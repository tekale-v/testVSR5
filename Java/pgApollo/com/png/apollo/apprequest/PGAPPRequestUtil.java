package com.png.apollo.apprequest;

import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Locale;
import java.util.Map;
import java.util.Set;
import java.util.TimeZone;

import com.dassault_systemes.enovia.enterprisechangemgt.util.ChangeUtil;
import com.matrixone.apps.domain.DomainConstants;
import com.matrixone.apps.domain.DomainObject;
import com.matrixone.apps.domain.DomainRelationship;
import com.matrixone.apps.domain.MultiValueSelects;
import com.matrixone.apps.domain.util.ContextUtil;
import com.matrixone.apps.domain.util.EnoviaResourceBundle;
import com.matrixone.apps.domain.util.FrameworkException;
import com.matrixone.apps.domain.util.FrameworkUtil;
import com.matrixone.apps.domain.util.MapList;
import com.matrixone.apps.domain.util.PersonUtil;
import com.matrixone.apps.domain.util.StringUtil;
import com.matrixone.apps.domain.util.eMatrixDateFormat;
import com.matrixone.apps.domain.util.i18nNow;
import com.matrixone.apps.framework.ui.UICache;
import com.matrixone.apps.framework.ui.UIUtil;
import com.png.apollo.pgApolloCommonUtil;
import com.png.apollo.pgApolloConstants;

import matrix.db.BusinessObject;
import matrix.db.BusinessObjectWithSelect;
import matrix.db.Context;
import matrix.db.JPO;
import matrix.db.RelationshipType;
import matrix.util.MatrixException;
import matrix.util.StringList;

public class PGAPPRequestUtil {

	private static final org.apache.log4j.Logger logger = org.apache.log4j.Logger.getLogger(PGAPPRequestUtil.class);


	/**
	 * Method to create APP Requests
	 * @param context
	 * @param mapAllInput
	 * @return
	 * @throws Exception
	 */
	public static Map createAPPRequests(Context context, Map mapAllInput) throws Exception 
	{
	
		logger.info("Create Request Started : " +mapAllInput);

		Map mapReturn = new HashMap();
		
		String sErrorMessage = DomainConstants.EMPTY_STRING;
		
		MapList mlOutputList = new MapList();
		MapList mlInputList = new MapList();
		boolean isTransactionStarted = false;

		StringList slAllRequestDataList = new StringList();

		try {

			Map mapAPPRequestDataAttributeMapping = pgApolloCommonUtil.prepareAttributeMappingBasedOnConfiguration(context, pgApolloConstants.STR_APOLLO_CONFIG_PAGE_FILENAME, "pgApolloConfiguration.APPRequestManagement.APPRequestData.AttributeMapping", false);

			mlInputList = (MapList)mapAllInput.get(PGAPPRequestConstants.KEY_DATA);
			Map mapInput;
			Map mapOutput;
			MapList mlAffectedItemList;
			MapList mlUpdatedAffectedItemList;
			Map mapAPPRequestDataAttributes;
			Map mapAPPRequestedChangeDetails;
			String sTypeOfChange;
			String sAPPRequestDataObjGeneratorName;
			String sAPPRequestAutoGeneratedName;
			DomainObject domAPPRequestDataObject;
			String sAPPRequestDataPhysicalId;
			String sRequestNumber;
			DomainObject domAPPRequestObject;
			String sAPPRequestPhysicalId;
			String sAPPRequestName;
			Map mapAffectedItem;
			String sAffectedItemPhysicalId;
			StringList slAPPRequestPhysicalIdList = new StringList();
			Map mapAPPRequestAttributes;
			String sObjectType;
			String sObjectName;
			String sObjectRevision;
			String sDueDate;
			Map mapRequest;
			String sRequestState;
			StringList slRequestSelects = new StringList();
			slRequestSelects.add(DomainConstants.SELECT_CURRENT);
			
			Locale localeContext = context.getLocale();
			String sLanguage = localeContext.getLanguage();
			
			String sObjectTNR;

			int iAffectedItemNo = 0;
			
			int iAffectedSequence = 0;
			String sDescription;
			String sTitle;

			MapList mlApproverObjectList = getAPPRequestApproverObjectList(context);
			StringList slApproverListObjectList =  new ChangeUtil().getStringListFromMapList(mlApproverObjectList, DomainConstants.SELECT_PHYSICAL_ID);

			
			if(null != mlInputList && !mlInputList.isEmpty())
			{
				for(Object objMap : mlInputList)
				{
					mapInput  = (Map)objMap;
					
					mlUpdatedAffectedItemList = new MapList();
					mapOutput = new HashMap();
					mapOutput.putAll(mapInput);					

					sDescription = (String)mapInput.getOrDefault(pgApolloConstants.STR_MAP_RESULT_KEY_DESCRIPTION, DomainConstants.EMPTY_STRING);
					sTitle = (String)mapInput.getOrDefault(DomainConstants.ATTRIBUTE_TITLE, DomainConstants.EMPTY_STRING);

					mlAffectedItemList = (MapList)mapInput.get(PGAPPRequestConstants.KEY_REQUEST_LINE_ITEMS);
					
					mapInput = updateSizeField(mapInput);
														
					mapAPPRequestDataAttributes = pgApolloCommonUtil.filterAndPrepareMapBasedOnMapping(context, mapInput, mapAPPRequestDataAttributeMapping, true, false);
					
					
					mapAPPRequestedChangeDetails = (Map)mapInput.get(PGAPPRequestConstants.KEY_REQUEST_CHANGE_DETAILS);
					sTypeOfChange = (String)mapInput.get(PGAPPRequestConstants.KEY_TYPE_OF_CHANGE);
					
					if(UIUtil.isNotNullAndNotEmpty(sTypeOfChange))
					{
						
						ContextUtil.startTransaction(context,true);
						isTransactionStarted = true;	
						
						updateRequestDataChangeDetails(context, mapAPPRequestDataAttributes, sTypeOfChange, mapAPPRequestedChangeDetails);
						
						mapAPPRequestDataAttributes.put(PGAPPRequestConstants.ATTRIBUTE_CREATED_ON, getTodaysDate());
						
						sDueDate = (String)mapAPPRequestDataAttributes.get(PGAPPRequestConstants.ATTRIBUTE_PG_LPD_DUE_DATE);
						
						sDueDate = convertUIToEmatrixDateFormat(context, sDueDate);
						
						mapAPPRequestDataAttributes.put(PGAPPRequestConstants.ATTRIBUTE_PG_LPD_DUE_DATE, sDueDate);

						sAPPRequestDataObjGeneratorName = UICache.getObjectGenerator(context, "type_pgAPPRequestData", DomainConstants.EMPTY_STRING);
						
						sAPPRequestAutoGeneratedName = DomainObject.getAutoGeneratedName(context, sAPPRequestDataObjGeneratorName, DomainConstants.EMPTY_STRING);

						domAPPRequestDataObject = DomainObject.newInstance(context);
						domAPPRequestDataObject.createObject(context, PGAPPRequestConstants.TYPE_PGAPPREQUESTDATA, sAPPRequestAutoGeneratedName, pgApolloConstants.CONSTANT_STRING_HYPHEN, PGAPPRequestConstants.POLICY_PGAPPREQUESTDATA, pgApolloConstants.VAULT_ESERVICE_PRODUCTION);
						domAPPRequestDataObject.setDescription(context, sDescription);
						domAPPRequestDataObject.setAttributeValues(context, mapAPPRequestDataAttributes);

						sAPPRequestDataPhysicalId = domAPPRequestDataObject.getPhysicalId(context);					

						slAPPRequestPhysicalIdList = new StringList();
						
					
						if(null != mlAffectedItemList && !mlAffectedItemList.isEmpty())
						{
							iAffectedItemNo = mlAffectedItemList.size();
							
							iAffectedSequence = 0;
							for(int i=0; i<iAffectedItemNo;i++)
							{
								mapAffectedItem = (Map)mlAffectedItemList.get(i);
								
								mapAffectedItem = getAffectedItemMap(context, mapAffectedItem);
								
								sAffectedItemPhysicalId = (String)mapAffectedItem.get(PGAPPRequestConstants.KEY_AFFECTED_ITEM_PHYSICAL_ID);		
								
			
								if(UIUtil.isNotNullAndNotEmpty(sAffectedItemPhysicalId))
								{		
									iAffectedSequence = iAffectedSequence + 1;
									domAPPRequestObject = DomainObject.newInstance(context);
									sRequestNumber = String.format("%02d", (iAffectedSequence));
									
									
									sAPPRequestName = new StringBuilder(sAPPRequestAutoGeneratedName).append(pgApolloConstants.CONSTANT_STRING_HYPHEN).append(sRequestNumber).toString();
									domAPPRequestObject.createObject(context, PGAPPRequestConstants.TYPE_PGAPPREQUEST, sAPPRequestName, pgApolloConstants.CONSTANT_STRING_HYPHEN, PGAPPRequestConstants.POLICY_PGAPPREQUEST, pgApolloConstants.VAULT_ESERVICE_PRODUCTION);
									domAPPRequestObject.setDescription(context, sDescription);			
									sAPPRequestPhysicalId = domAPPRequestObject.getPhysicalId(context);


									if(UIUtil.isNotNullAndNotEmpty(sAPPRequestPhysicalId))
									{									
										slAPPRequestPhysicalIdList.add(sAPPRequestPhysicalId);
										
										DomainRelationship.connect(context, sAPPRequestPhysicalId, PGAPPRequestConstants.RELATIONSHIP_PGAPPREQUESTAFFECTEDITEM, sAffectedItemPhysicalId, true);
																	
										sObjectType = (String)mapAffectedItem.get(PGAPPRequestConstants.KEY_AFFECTED_ITEM_TYPE);
										
										sObjectType = EnoviaResourceBundle.getAdminI18NString(context, "Type", sObjectType, Locale.US.getLanguage());

										sObjectName = (String)mapAffectedItem.get(PGAPPRequestConstants.KEY_AFFECTED_ITEM);
										sObjectRevision = (String)mapAffectedItem.get(PGAPPRequestConstants.KEY_AFFECTED_ITEM_REVISION);
										
										sObjectTNR = new StringBuilder(sObjectType).append(pgApolloConstants.CONSTANT_STRING_PIPE).append(sObjectName).append(pgApolloConstants.CONSTANT_STRING_PIPE).append(sObjectRevision).toString();
										
										mapAPPRequestAttributes = new HashMap();
										mapAPPRequestAttributes.put(PGAPPRequestConstants.ATTRIBUTE_PG_AFFECTEDITEM, sObjectTNR);
										mapAPPRequestAttributes.put(PGAPPRequestConstants.ATTRIBUTE_CREATED_ON, getTodaysDate());
										mapAPPRequestAttributes.put(DomainConstants.ATTRIBUTE_TITLE, sTitle);

										sObjectTNR = fetchAndUpdateImplementedItem(context, mapAffectedItem, sAPPRequestPhysicalId);	
										
										if(UIUtil.isNotNullAndNotEmpty(sObjectTNR))
										{
											mapAPPRequestAttributes.put(PGAPPRequestConstants.ATTRIBUTE_PG_IMPLEMENTEDITEM, sObjectTNR);
										}

										domAPPRequestObject.setAttributeValues(context, mapAPPRequestAttributes);
										
										if(!slApproverListObjectList.isEmpty())
										{
											DomainRelationship.connect(context, domAPPRequestObject, PGAPPRequestConstants.RELATIONSHIP_TECHNICALASSIGNEE, true, slApproverListObjectList.toArray(new String[slApproverListObjectList.size()]));
										}
										
										mapRequest = domAPPRequestObject.getInfo(context, slRequestSelects);
										
										sRequestState = (String)mapRequest.get(DomainConstants.SELECT_CURRENT);
										
										if(!pgApolloConstants.STR_DENIED.equalsIgnoreCase(sRequestState))
										{
											sRequestState = EnoviaResourceBundle.getStateI18NString(context,PGAPPRequestConstants.POLICY_PGAPPREQUEST ,sRequestState, sLanguage);			
										}

										mapAffectedItem.put(PGAPPRequestConstants.KEY_REQUEST_PHYSICAL_ID, sAPPRequestPhysicalId);
										mapAffectedItem.put(PGAPPRequestConstants.KEY_REQUEST_ID, sAPPRequestName);
										mapAffectedItem.put(PGAPPRequestConstants.KEY_REQUEST_STATE, sRequestState);

									}
									
									

								}		
								
								mlUpdatedAffectedItemList.add(mapAffectedItem);

							}
							
							mapOutput.put(PGAPPRequestConstants.KEY_REQUEST_LINE_ITEMS, mlUpdatedAffectedItemList);
						}
						
						if(null != mapAPPRequestedChangeDetails)
						{
							mapOutput.put(PGAPPRequestConstants.KEY_REQUEST_CHANGE_DETAILS, mapAPPRequestedChangeDetails);
						}				

						if(UIUtil.isNotNullAndNotEmpty(sAPPRequestDataPhysicalId) && !slAPPRequestPhysicalIdList.isEmpty())
						{
							DomainRelationship.connect(context,domAPPRequestDataObject,PGAPPRequestConstants.RELATIONSHIP_PGAPPREQUESTCHANGEDATA, true, slAPPRequestPhysicalIdList.toArray(new String[slAPPRequestPhysicalIdList.size()]));
						}				
					
						
						mapOutput.put(PGAPPRequestConstants.KEY_REQUEST_SET_ID, sAPPRequestAutoGeneratedName);
						mapOutput.put(PGAPPRequestConstants.KEY_REQUEST_SET_PHYSICAL_ID, sAPPRequestDataPhysicalId);

						ContextUtil.commitTransaction(context);
						isTransactionStarted = false;
						if(UIUtil.isNotNullAndNotEmpty(sAPPRequestDataPhysicalId))
						{
							slAllRequestDataList.add(sAPPRequestDataPhysicalId);
						}
					}
					else
					{
						//TODO Throw Error if type of change is not there
						
					}
				

				}

			}
		}  
		catch (Exception e)
		{
			logger.error(e.getMessage(), e);
			if(isTransactionStarted)
			{
				ContextUtil.abortTransaction(context);
				isTransactionStarted = false;
			}
			sErrorMessage = e.getLocalizedMessage();
			slAllRequestDataList = new StringList();
		}		
				
		
		if(UIUtil.isNotNullAndNotEmpty(sErrorMessage))
		{
			mapReturn.put(pgApolloConstants.STR_ERROR, sErrorMessage);
			mapReturn.put(PGAPPRequestConstants.KEY_DATA, new MapList());
			mapReturn.put(PGAPPRequestConstants.KEY_RESPONSEKEY_STATUS, pgApolloConstants.STR_FAILED);
		}
		else
		{
			if(!slAllRequestDataList.isEmpty())
			{
				mlOutputList = getRequestDataDetails(context, slAllRequestDataList);
			}
		
			mapReturn.put(PGAPPRequestConstants.KEY_DATA, mlOutputList);
			mapReturn.put(PGAPPRequestConstants.KEY_RESPONSEKEY_STATUS, pgApolloConstants.STR_SUCCESS);
		}

		logger.info("Create Request Ended : " +mapReturn);

		return mapReturn;
	}

	/**
	 * Method to return Map with Size value filtering ALL and other sizes
	 * @param mapAPPRequestDataAttributes
	 * @return
	 */
	private static Map updateSizeField(Map mapInput) 
	{
		StringList slSize = (StringList)mapInput.get(pgApolloConstants.STR_PRODUCT_SIZE);
		if(null != slSize && pgApolloCommonUtil.containsInListCaseInsensitive(pgApolloConstants.STR_ALL, slSize))
		{
			slSize = new StringList();
			slSize.add("ALL");
			mapInput.put(pgApolloConstants.STR_PRODUCT_SIZE, slSize);

		}	
		return mapInput;
	}


	/**
	 * Method to fetch and update implemented item
	 * @param context
	 * @param mapAffectedItem
	 * @param sAPPRequestPhysicalId
	 * @param sAffectedItemPhysicalId
	 * @return
	 * @throws MatrixException 
	 */
	private static String fetchAndUpdateImplementedItem(Context context, Map mapAffectedItem, String sAPPRequestPhysicalId) throws MatrixException 
	{
		String sReturn = DomainConstants.EMPTY_STRING;
		
		String sImplementedItemPhysicalId;
		sImplementedItemPhysicalId = (String)mapAffectedItem.get(PGAPPRequestConstants.KEY_IMPLEMENTED_ITEM_PHYSICAL_ID);
		
		if(UIUtil.isNotNullAndNotEmpty(sImplementedItemPhysicalId))
		{
			DomainRelationship.connect(context, sAPPRequestPhysicalId, PGAPPRequestConstants.RELATIONSHIP_PGAPPREQUESTIMPLEMENTEDITEM, sImplementedItemPhysicalId, true);			
	
			String sImplementedItemType = (String)mapAffectedItem.get(PGAPPRequestConstants.KEY_IMPLEMENTED_ITEM_TYPE);
			
			sImplementedItemType = EnoviaResourceBundle.getAdminI18NString(context, "Type", sImplementedItemType, Locale.US.getLanguage());

			String sImplementedItemName = (String)mapAffectedItem.get(PGAPPRequestConstants.KEY_IMPLEMENTED_ITEM);

			String sImplementedItemRevision = (String)mapAffectedItem.get(PGAPPRequestConstants.KEY_IMPLEMENTED_ITEM_REVISION);

			if(UIUtil.isNotNullAndNotEmpty(sImplementedItemName))
			{
				sReturn = new StringBuilder(sImplementedItemType).append(pgApolloConstants.CONSTANT_STRING_PIPE).append(sImplementedItemName).append(pgApolloConstants.CONSTANT_STRING_PIPE).append(sImplementedItemRevision).toString();
			}			

		}
		
		return sReturn;
	}
	
	/**
	 * Method to update LPD requests
	 * @param context
	 * @param mapAllInput
	 * @return
	 * @throws Exception
	 */
	public static Map updateAPPRequests(Context context, Map mapAllInput) throws Exception 
	{
		Map mapReturn = new HashMap();
		MapList mlInputList = new MapList();
		MapList mlOutputList = new MapList();

		boolean isTransactionStarted = false;
		StringList slErrorMessageList = new StringList();
		String sErrorMessage = DomainConstants.EMPTY_STRING;
		Map mapRequestDataInfo;
		String sDescription;
		StringList slAllRequestDataList = new StringList();
		
		StringList slRequestDataSelects = new StringList();
		slRequestDataSelects.add(PGAPPRequestConstants.SELECT_ATTRIBUTE_PG_APP_REQUESTCHANGETYPE);

		try {

			mlInputList = (MapList)mapAllInput.get(PGAPPRequestConstants.KEY_DATA);
			Map mapInput;
			String sAPPRequestDataName;
			String sAPPRequestDataPhysicalId;
			Map mapAPPRequestDataAttributes;
			Map mapAPPRequestedChangeDetails;
			String sTypeOfChange;
			DomainObject domAPPRequestDataObject;
			Map mapObject;
			String sDueDate;
			StringBuilder sbErrorMessage;
			
			MapList mlApproverObjectList = getAPPRequestApproverObjectList(context);
			StringList slApproverListObjectList =  new ChangeUtil().getStringListFromMapList(mlApproverObjectList, DomainConstants.SELECT_PHYSICAL_ID);


			Map mapAPPRequestDataAttributeMapping = pgApolloCommonUtil.prepareAttributeMappingBasedOnConfiguration(context, pgApolloConstants.STR_APOLLO_CONFIG_PAGE_FILENAME, "pgApolloConfiguration.APPRequestManagement.APPRequestData.AttributeMapping", false);
			Map mapAPPRequestAttributeMapping = pgApolloCommonUtil.prepareAttributeMappingBasedOnConfiguration(context, pgApolloConstants.STR_APOLLO_CONFIG_PAGE_FILENAME, "pgApolloConfiguration.APPRequestManagement.APPRequest.AttributeMapping", false);

			if(null != mlInputList && !mlInputList.isEmpty())
			{
				for(Object objMap : mlInputList)
				{
					mapInput  = (Map)objMap;

					sAPPRequestDataPhysicalId = (String)mapInput.get(PGAPPRequestConstants.KEY_REQUEST_SET_PHYSICAL_ID);
					
					if(mapInput.containsKey(PGAPPRequestConstants.KEY_TYPE_OF_CHANGE))
					{
						mapInput.remove(PGAPPRequestConstants.KEY_TYPE_OF_CHANGE);
					}
					
					mapInput.remove(PGAPPRequestConstants.KEY_CREATEDON);


					ContextUtil.startTransaction(context,true);
					isTransactionStarted = true;					

					if(UIUtil.isNullOrEmpty(sAPPRequestDataPhysicalId))
					{
						sAPPRequestDataName = (String)mapInput.getOrDefault(PGAPPRequestConstants.KEY_REQUEST_SET_ID, PGAPPRequestConstants.KEY_REQUEST_SET_ID);
						if(UIUtil.isNotNullAndNotEmpty(sAPPRequestDataName))
						{
							mapObject = pgApolloCommonUtil.getLatestRevisionMap(context, PGAPPRequestConstants.TYPE_PGAPPREQUESTDATA, sAPPRequestDataName, pgApolloConstants.CONSTANT_STRING_HYPHEN);	
							sAPPRequestDataPhysicalId = (String)mapObject.get(DomainConstants.SELECT_PHYSICAL_ID);		
						}
						else
						{
							//Throw error - minimal input not found 
						}

					}
					

					if(UIUtil.isNotNullAndNotEmpty(sAPPRequestDataPhysicalId))
					{						
					
						slAllRequestDataList.add(sAPPRequestDataPhysicalId);
						
						domAPPRequestDataObject = DomainObject.newInstance(context, sAPPRequestDataPhysicalId);

						mapRequestDataInfo = domAPPRequestDataObject.getInfo(context, slRequestDataSelects);
						
						sDescription = (String)mapInput.get(pgApolloConstants.STR_MAP_RESULT_KEY_DESCRIPTION);

						sTypeOfChange = (String)mapRequestDataInfo.get(PGAPPRequestConstants.SELECT_ATTRIBUTE_PG_APP_REQUESTCHANGETYPE);
						
						mapInput = updateSizeField(mapInput);
						
						mapAPPRequestDataAttributes = pgApolloCommonUtil.filterAndPrepareMapBasedOnMapping(context, mapInput, mapAPPRequestDataAttributeMapping, true, true);
												
						sDueDate = (String)mapAPPRequestDataAttributes.get(PGAPPRequestConstants.ATTRIBUTE_PG_LPD_DUE_DATE);
						
						sDueDate = convertUIToEmatrixDateFormat(context, sDueDate);
						
						mapAPPRequestDataAttributes.put(PGAPPRequestConstants.ATTRIBUTE_PG_LPD_DUE_DATE, sDueDate);
						
						mapAPPRequestedChangeDetails = (Map)mapInput.get(PGAPPRequestConstants.KEY_REQUEST_CHANGE_DETAILS);
						
						updateRequestDataChangeDetails(context, mapAPPRequestDataAttributes, sTypeOfChange, mapAPPRequestedChangeDetails);					

						if(!mapAPPRequestDataAttributes.isEmpty())
						{
							domAPPRequestDataObject.setAttributeValues(context, mapAPPRequestDataAttributes);
						}			
						
						if(null != sDescription)
						{
							domAPPRequestDataObject.setDescription(context, sDescription);
						}


					}

					MapList mlRequestLineItemList = (MapList)mapInput.get(PGAPPRequestConstants.KEY_REQUEST_LINE_ITEMS);		
					
					updateCommonAttributes(context, sAPPRequestDataPhysicalId);

					if(null != mlRequestLineItemList && !mlRequestLineItemList.isEmpty())
					{
						int iRequestLineItem = 0;
						Map mapAPPRequestLineItem;

						iRequestLineItem = mlRequestLineItemList.size();

						for(int i=0; i<iRequestLineItem;i++)
						{
							mapAPPRequestLineItem = (Map)mlRequestLineItemList.get(i);
							
							if(null != mapAPPRequestLineItem && !mapAPPRequestLineItem.isEmpty())
							{
								updateEachRequest(context, mapAPPRequestLineItem, mapAPPRequestAttributeMapping, sAPPRequestDataPhysicalId, slApproverListObjectList);	
							}							

						}

					}
					
					

					ContextUtil.commitTransaction(context);
					isTransactionStarted = false;
				}
				
			}
		}
		catch (Exception e)
		{
			
			logger.error(e.getMessage(), e);
			if(isTransactionStarted)
			{
				ContextUtil.abortTransaction(context);
				isTransactionStarted = false;
			}		
			throw e;
		}

		if(null != slErrorMessageList && !slErrorMessageList.isEmpty())
		{
			sErrorMessage = StringUtil.join(slErrorMessageList, pgApolloConstants.CONSTANT_STRING_COMMA);
			mapReturn.put(pgApolloConstants.STR_ERROR, sErrorMessage);
			mapReturn.put(PGAPPRequestConstants.KEY_RESPONSEKEY_STATUS, pgApolloConstants.STR_FAILED);
		}
		else
		{
			if(!slAllRequestDataList.isEmpty())
			{
				mlOutputList = getRequestDataDetails(context, slAllRequestDataList);
			}
		
			mapReturn.put(PGAPPRequestConstants.KEY_DATA, mlOutputList);
			mapReturn.put(PGAPPRequestConstants.KEY_RESPONSEKEY_STATUS, pgApolloConstants.STR_SUCCESS);
		}

		return mapReturn;
	}

	/**
	 * Method to update Common Attributes
	 * @param context
	 * @param sAPPRequestDataPhysicalId
	 * @throws MatrixException 
	 */
	private static void updateCommonAttributes(Context context, String sAPPRequestDataPhysicalId) throws MatrixException 
	{
		if(UIUtil.isNotNullAndNotEmpty(sAPPRequestDataPhysicalId))
		{
			String sRequestDataSelectable = new StringBuilder("from[").append(PGAPPRequestConstants.RELATIONSHIP_PGAPPREQUESTCHANGEDATA).append("].to.id").toString();

			StringList slAPPRequestDataInfoSelect = new StringList();
			slAPPRequestDataInfoSelect.add(DomainConstants.SELECT_ID);
			slAPPRequestDataInfoSelect.add(DomainConstants.SELECT_PHYSICAL_ID);
			slAPPRequestDataInfoSelect.add(DomainConstants.SELECT_NAME);
			slAPPRequestDataInfoSelect.add(sRequestDataSelectable);
			slAPPRequestDataInfoSelect.add(DomainConstants.SELECT_ATTRIBUTE_TITLE);
			slAPPRequestDataInfoSelect.add(DomainConstants.SELECT_DESCRIPTION);

			DomainObject domAPPRequestDataObject = DomainObject.newInstance(context, sAPPRequestDataPhysicalId);

			Map mapAPPRequestDataIfo = domAPPRequestDataObject.getInfo(context, slAPPRequestDataInfoSelect, new StringList(sRequestDataSelectable));	
					
			StringList slRequestList = (StringList)mapAPPRequestDataIfo.get(sRequestDataSelectable);

			if(null != slRequestList && !slRequestList.isEmpty())
			{
				StringList slRequestSelects = new StringList();
				slRequestSelects.add(DomainConstants.SELECT_PHYSICAL_ID);
				slRequestSelects.add(DomainConstants.SELECT_CURRENT);
							
				StringList slValidRequests = new StringList();
				
				MapList mlRequestIdInfo = DomainObject.getInfo(context, slRequestList.toArray(new String[slRequestList.size()]), slRequestSelects); 

				Map mapRequest;
				
				String sRequestCurrent;
				String sRequestId;
				
				for(Object objRequest : mlRequestIdInfo)
				{
					mapRequest = (Map)objRequest;
					
					sRequestCurrent = (String)mapRequest.get(DomainConstants.SELECT_CURRENT);
					
					sRequestId = (String)mapRequest.get(DomainConstants.SELECT_PHYSICAL_ID);

					if(!PGAPPRequestConstants.PGAPPREQUEST_STATE_REJECTED.equals(sRequestCurrent) && !PGAPPRequestConstants.PGAPPREQUEST_STATE_CANCELLED.equals(sRequestCurrent) )
					{
						slValidRequests.add(sRequestId);
					}					
				}
				
				updateCommonRequestAttributes(context, slValidRequests, mapAPPRequestDataIfo, false);

			}	
		}		
	
	}
	
	/**
	 * Method to update Common Request Attributes
	 * @param context
	 * @param slRequestList
	 * @param mapAPPRequestDataIfo
	 * @param bPushContextRequired
	 * @throws MatrixException
	 */
	public static void updateCommonRequestAttributes(Context context, StringList slRequestList, Map mapAPPRequestDataIfo, boolean bPushContextRequired) throws MatrixException
	{  
		boolean isContextPushed = false;
		try
		{
			if(null!= slRequestList && !slRequestList.isEmpty())
			{
				String sTitle = (String)mapAPPRequestDataIfo.get(DomainConstants.SELECT_ATTRIBUTE_TITLE);
				String sDescription = (String)mapAPPRequestDataIfo.get(DomainConstants.SELECT_DESCRIPTION);
				
				Map mapAPPRequestAttributes;
				
				if(bPushContextRequired)
				{
					//Context user will not always have access to update common attributes e.g. update in case of Cancelled or Rejected Requests - for which update attributes is required
					ContextUtil.pushContext(context, pgApolloConstants.PERSON_USER_AGENT, DomainConstants.EMPTY_STRING,DomainConstants.EMPTY_STRING);
					isContextPushed = true;
				}					
				
				for(String sAPPRequestPhysicalId : slRequestList)
				{
					if(UIUtil.isNotNullAndNotEmpty(sAPPRequestPhysicalId))
					{			
						DomainObject domAPPRequestObject = DomainObject.newInstance(context, sAPPRequestPhysicalId);

						mapAPPRequestAttributes = new HashMap();
						mapAPPRequestAttributes.put(DomainConstants.ATTRIBUTE_TITLE, sTitle);
						
						domAPPRequestObject.setAttributeValues(context, mapAPPRequestAttributes);
						domAPPRequestObject.setDescription(context, sDescription);
					}
				}
				
									
			}				
		}
		catch(MatrixException e)
		{
			logger.error(e.getMessage(), e);
			throw e;
		}
		finally
		{
			if(isContextPushed)
			{
				ContextUtil.popContext(context);
				isContextPushed = false;
			}			
		}
	}	


	/**
	 * Method to update Each Request
	 * @param context
	 * @param mapAPPRequestLineItem
	 * @param mapAPPRequestAttributeMapping 
	 * @param mapInput 
	 * @param sAPPRequestDataPhysicalId 
	 * @param slApproverListObjectList 
	 * @throws Exception 
	 */
	private static Map updateEachRequest(Context context, Map mapAPPRequestLineItem, Map mapAPPRequestAttributeMapping, String sAPPRequestDataPhysicalId, StringList slApproverListObjectList) throws Exception
	{
		String sAPPRequestName;
		String sAPPRequestPhysicalId = (String)mapAPPRequestLineItem.get(PGAPPRequestConstants.KEY_REQUEST_PHYSICAL_ID);
		String sAction = (String)mapAPPRequestLineItem.get(PGAPPRequestConstants.KEY_ACTION);
		Map mapObject;
		
		if(UIUtil.isNullOrEmpty(sAPPRequestPhysicalId))
		{
			sAPPRequestName = (String)mapAPPRequestLineItem.get(PGAPPRequestConstants.KEY_REQUEST_ID);
			if(UIUtil.isNotNullAndNotEmpty(sAPPRequestName))
			{
				mapObject = pgApolloCommonUtil.getLatestRevisionMap(context, PGAPPRequestConstants.TYPE_PGAPPREQUEST, sAPPRequestName, pgApolloConstants.CONSTANT_STRING_HYPHEN);		
				sAPPRequestPhysicalId = (String)mapObject.get(DomainConstants.SELECT_PHYSICAL_ID);
			}

		}


		Map mapAffectedItem = getAffectedItemMap(context, mapAPPRequestLineItem);
		
	
		String sAffectedItemPhysicalId = (String)mapAffectedItem.get(PGAPPRequestConstants.KEY_AFFECTED_ITEM_PHYSICAL_ID);
		
		String sRequestDataSelectable = new StringBuilder("from[").append(PGAPPRequestConstants.RELATIONSHIP_PGAPPREQUESTCHANGEDATA).append("].to.id").toString();
		
		StringList slAPPRequestDataInfoSelect = new StringList();
		slAPPRequestDataInfoSelect.add(DomainConstants.SELECT_ID);
		slAPPRequestDataInfoSelect.add(DomainConstants.SELECT_OWNER);
		slAPPRequestDataInfoSelect.add(DomainConstants.SELECT_PHYSICAL_ID);
		slAPPRequestDataInfoSelect.add(DomainConstants.SELECT_NAME);
		slAPPRequestDataInfoSelect.add(sRequestDataSelectable);
		slAPPRequestDataInfoSelect.add(DomainConstants.SELECT_ATTRIBUTE_TITLE);
		slAPPRequestDataInfoSelect.add(DomainConstants.SELECT_DESCRIPTION);

		DomainObject domAPPRequestDataObject = DomainObject.newInstance(context, sAPPRequestDataPhysicalId);

		Map mapAPPRequestDataIfo = domAPPRequestDataObject.getInfo(context, slAPPRequestDataInfoSelect, new StringList(sRequestDataSelectable));
		
		String sTitle = (String)mapAPPRequestDataIfo.get(DomainConstants.SELECT_ATTRIBUTE_TITLE);
		String sDescription = (String)mapAPPRequestDataIfo.get(DomainConstants.SELECT_DESCRIPTION);
		String sRequestSetOwner = (String)mapAPPRequestDataIfo.get(DomainConstants.SELECT_OWNER);
	
		Map mapAPPRequestAttributes = new HashMap();
		
		if(PGAPPRequestConstants.STR_ACTION_ADD.equalsIgnoreCase(sAction) && UIUtil.isNotNullAndNotEmpty(sAPPRequestDataPhysicalId))
		{
			if(UIUtil.isNullOrEmpty(sAPPRequestPhysicalId))
			{
			
				String sAPPRequestDataName = (String)mapAPPRequestDataIfo.get(DomainConstants.SELECT_NAME);						

				StringList slRequestList = (StringList)mapAPPRequestDataIfo.get(sRequestDataSelectable);
				
				int iNoOfRequestsConnected = 0;
				
				if(null != slRequestList && !slRequestList.isEmpty())
				{
					iNoOfRequestsConnected = slRequestList.size();
				}
				
				String sRequestNumber = String.format("%02d", (iNoOfRequestsConnected+1));
				
				sAPPRequestName = new StringBuilder(sAPPRequestDataName).append(pgApolloConstants.CONSTANT_STRING_HYPHEN).append(sRequestNumber).toString();

				DomainObject domAPPRequestObject = DomainObject.newInstance(context);

				domAPPRequestObject.createObject(context, PGAPPRequestConstants.TYPE_PGAPPREQUEST, sAPPRequestName, pgApolloConstants.CONSTANT_STRING_HYPHEN, PGAPPRequestConstants.POLICY_PGAPPREQUEST, context.getVault().getName());
				sAPPRequestPhysicalId = domAPPRequestObject.getPhysicalId(context);
				
				mapAPPRequestLineItem.put(PGAPPRequestConstants.KEY_REQUEST_PHYSICAL_ID, sAPPRequestPhysicalId);
				mapAPPRequestLineItem.put(PGAPPRequestConstants.KEY_REQUEST_ID, sAPPRequestName);
				
				String sObjectType = (String)mapAffectedItem.get(PGAPPRequestConstants.KEY_AFFECTED_ITEM_TYPE);
				
				sObjectType = EnoviaResourceBundle.getAdminI18NString(context, "Type", sObjectType, Locale.US.getLanguage());

				String sObjectName = (String)mapAffectedItem.get(PGAPPRequestConstants.KEY_AFFECTED_ITEM);
				String sObjectRevision = (String)mapAffectedItem.get(PGAPPRequestConstants.KEY_AFFECTED_ITEM_REVISION);
				
				String sObjectTNR = new StringBuilder(sObjectType).append(pgApolloConstants.CONSTANT_STRING_PIPE).append(sObjectName).append(pgApolloConstants.CONSTANT_STRING_PIPE).append(sObjectRevision).toString();
				
				mapAPPRequestAttributes = new HashMap();
				mapAPPRequestAttributes.put(PGAPPRequestConstants.ATTRIBUTE_PG_AFFECTEDITEM, sObjectTNR);				
				mapAPPRequestAttributes.put(PGAPPRequestConstants.ATTRIBUTE_CREATED_ON, getTodaysDate());
				mapAPPRequestAttributes.put(DomainConstants.ATTRIBUTE_TITLE, sTitle);

				
				sObjectTNR = fetchAndUpdateImplementedItem(context, mapAffectedItem, sAPPRequestPhysicalId);	
				
				if(UIUtil.isNotNullAndNotEmpty(sObjectTNR))
				{
					mapAPPRequestAttributes.put(PGAPPRequestConstants.ATTRIBUTE_PG_IMPLEMENTEDITEM, sObjectTNR);
				}
				
				if(UIUtil.isNotNullAndNotEmpty(sAffectedItemPhysicalId) && UIUtil.isNotNullAndNotEmpty(sAPPRequestPhysicalId))
				{
					DomainRelationship.connect(context, sAPPRequestPhysicalId, PGAPPRequestConstants.RELATIONSHIP_PGAPPREQUESTAFFECTEDITEM, sAffectedItemPhysicalId, true);
				}
				
				if(UIUtil.isNotNullAndNotEmpty(sAPPRequestDataPhysicalId) && UIUtil.isNotNullAndNotEmpty(sAPPRequestPhysicalId))
				{
					DomainRelationship.connect(context, sAPPRequestDataPhysicalId, PGAPPRequestConstants.RELATIONSHIP_PGAPPREQUESTCHANGEDATA, sAPPRequestPhysicalId, true);
				}	
				
				domAPPRequestObject.setAttributeValues(context, mapAPPRequestAttributes);
				domAPPRequestObject.setDescription(context, sDescription);
				
				if(!slApproverListObjectList.isEmpty())
				{
					DomainRelationship.connect(context, domAPPRequestObject, PGAPPRequestConstants.RELATIONSHIP_TECHNICALASSIGNEE, true, slApproverListObjectList.toArray(new String[slApproverListObjectList.size()]));
				}
				
				domAPPRequestObject.setOwner(context, sRequestSetOwner);
			}

			
		}
		

		if(UIUtil.isNotNullAndNotEmpty(sAPPRequestPhysicalId) && UIUtil.isNotNullAndNotEmpty(sAction))
		{
			processRequest(context, mapAPPRequestLineItem, mapAPPRequestAttributeMapping, sAPPRequestPhysicalId, sAction);			
		}

		return mapAPPRequestLineItem;
	}


	/**
	 * Method to process Request
	 * @param context
	 * @param mapAPPRequestLineItem
	 * @param mapAPPRequestAttributeMapping
	 * @param sAPPRequestPhysicalId
	 * @param sAction
	 * @throws MatrixException
	 */
	public static void processRequest(Context context, Map mapAPPRequestLineItem, Map mapAPPRequestAttributeMapping,String sAPPRequestPhysicalId, String sAction) throws  MatrixException 
	{
		
		DomainObject domAPPRequestObject = DomainObject.newInstance(context, sAPPRequestPhysicalId);
		
		StringList slAPPRequestSelectable = new StringList();
		slAPPRequestSelectable.add(DomainConstants.SELECT_CURRENT);

		Map mapAPPRequest = domAPPRequestObject.getInfo(context, slAPPRequestSelectable);
		
		String sAPPRequestCurrent = (String)mapAPPRequest.get(DomainConstants.SELECT_CURRENT);
				
		if(!PGAPPRequestConstants.PGAPPREQUEST_STATE_REJECTED.equals(sAPPRequestCurrent) && !PGAPPRequestConstants.PGAPPREQUEST_STATE_CANCELLED.equals(sAPPRequestCurrent) )
		{
			Map mapAPPRequestAttributes = pgApolloCommonUtil.filterAndPrepareMapBasedOnMapping(context, mapAPPRequestLineItem, mapAPPRequestAttributeMapping, true, true);

			if(!mapAPPRequestAttributes.isEmpty())
			{
				domAPPRequestObject.setAttributeValues(context, mapAPPRequestAttributes);
			}
		}

		processRequestObject(context, sAction, domAPPRequestObject);	
		
	}


	/**
	 * Method to process Request Object
	 * @param context
	 * @param sAction
	 * @param domAPPRequestObject
	 * @throws MatrixException
	 */
	public static void processRequestObject(Context context, String sAction, DomainObject domAPPRequestObject)	throws MatrixException 
	{
		StringList slAPPRequestSelectable = new StringList();
		slAPPRequestSelectable.add(DomainConstants.SELECT_CURRENT);
		slAPPRequestSelectable.add(DomainConstants.SELECT_POLICY);

		Map mapAPPRequest = domAPPRequestObject.getInfo(context, slAPPRequestSelectable);
		
		String sAPPRequestCurrent = (String)mapAPPRequest.get(DomainConstants.SELECT_CURRENT);
		
		String sAPPRequestPolicy = (String)mapAPPRequest.get(DomainConstants.SELECT_POLICY);

		
		if(PGAPPRequestConstants.PGAPPREQUEST_STATE_CREATE.equals(sAPPRequestCurrent) || PGAPPRequestConstants.PGAPPREQUEST_STATE_REVIEW.equals(sAPPRequestCurrent) )
		{
			if(PGAPPRequestConstants.STR_ACTION_CANCEL.equalsIgnoreCase(sAction))
			{
				String sContextUser = context.getUser();				
				domAPPRequestObject.setOwner(context, sContextUser);
				domAPPRequestObject.setPolicy(context, PGAPPRequestConstants.POLICY_CANCELLED);
			}			
		}
		
		if(PGAPPRequestConstants.PGAPPREQUEST_STATE_CREATE.equals(sAPPRequestCurrent) || PGAPPRequestConstants.PGAPPREQUEST_STATE_REVIEW.equals(sAPPRequestCurrent) || PGAPPRequestConstants.PGAPPREQUEST_STATE_READY_TO_IMPLEMENT.equals(sAPPRequestCurrent) )
		{
			if(PGAPPRequestConstants.STR_ACTION_REJECT.equalsIgnoreCase(sAction))
			{
				String sContextUser = context.getUser();				
				domAPPRequestObject.setOwner(context, sContextUser);
				domAPPRequestObject.setPolicy(context, PGAPPRequestConstants.POLICY_PGREJECTED);
			}		
		}
		
		if(PGAPPRequestConstants.POLICY_PGAPPREQUEST.equals(sAPPRequestPolicy))
		{
			if(PGAPPRequestConstants.STR_ACTION_PROMOTE.equalsIgnoreCase(sAction))
			{
				domAPPRequestObject.promote(context);
			}
			else if(PGAPPRequestConstants.STR_ACTION_DEMOTE.equalsIgnoreCase(sAction))
			{
				domAPPRequestObject.demote(context);
			}
		}
	}

	/**
	 * Method to update Request Data Change Details
	 * @param mapAPPRequestDataAttributes
	 * @param sTypeOfChange
	 * @param mapAPPRequestedChangeDetails
	 */
	public static Map updateRequestDataChangeDetails(Context context, Map mapAPPRequestDataAttributes, String sTypeOfChange, Map mapAPPRequestedChangeDetails) 
	{
		
		if(null != mapAPPRequestedChangeDetails && !mapAPPRequestedChangeDetails.isEmpty())
		{
			if(PGAPPRequestConstants.RANGE_PGAPPREQUESTCHANGETYPE_SUBSTITUTE_ADDITION.equalsIgnoreCase(sTypeOfChange))
			{					
				MapList mlSubstituteDetails = (MapList)mapAPPRequestedChangeDetails.get(PGAPPRequestConstants.RANGE_PGAPPREQUESTCHANGETYPE_SUBSTITUTE_ADDITION);
						
				Map mapSubstitute;
				String sGroupName;
				String sLayerName;
				String sObjectName;
				String sValidStartDate;
				String sValidEndDate;
				String sComments;
				
				StringList slSubstituteList = new StringList();
				
				StringBuilder sbSubstituteObjectDetails = new StringBuilder();
				
				for(Object objMap : mlSubstituteDetails)
				{
					mapSubstitute = (Map)objMap;		
					
					slSubstituteList = getSubstitutesForRequestedChanges(mapSubstitute, slSubstituteList);
				}			

				if(!slSubstituteList.isEmpty())
				{
					mapAPPRequestDataAttributes.put(PGAPPRequestConstants.ATTRIBUTE_PG_APP_REQUEST_SUBSTITUTES, slSubstituteList);
				}
				else if(!mlSubstituteDetails.isEmpty() && slSubstituteList.isEmpty())
				{
					mapAPPRequestDataAttributes.put(PGAPPRequestConstants.ATTRIBUTE_PG_APP_REQUEST_SUBSTITUTES, new StringList());
				}
			}
			else if(PGAPPRequestConstants.RANGE_PGAPPREQUESTCHANGETYPE_PLANTS_ADDITION.equalsIgnoreCase(sTypeOfChange))
			{
				MapList mlPlantDetails = (MapList)mapAPPRequestedChangeDetails.get(PGAPPRequestConstants.RANGE_PGAPPREQUESTCHANGETYPE_PLANTS_ADDITION);
				
				Map mapPlant;
				String sPlantName;
				String sAuthorizedToUse;
				String sAuthorizedToProduce;
				String sActivated;
				
				StringList slPlantDetailList = new StringList();
				
				StringBuilder sbPlantDetails = new StringBuilder();
				
				for(Object objMap : mlPlantDetails)
				{
					mapPlant = (Map)objMap;
					
					slPlantDetailList = getPlantsForRequestedChanges(mapPlant, slPlantDetailList);
				}
					
				if(!slPlantDetailList.isEmpty())
				{
					mapAPPRequestDataAttributes.put(PGAPPRequestConstants.ATTRIBUTE_PG_APPREQUESTPLANTS, slPlantDetailList);
				}
				else if(!mlPlantDetails.isEmpty() && slPlantDetailList.isEmpty())
				{
					mapAPPRequestDataAttributes.put(PGAPPRequestConstants.ATTRIBUTE_PG_APPREQUESTPLANTS, new StringList());
				}

			}
			else if(PGAPPRequestConstants.RANGE_PGAPPREQUESTCHANGETYPE_MFG_STATUS_CHANGE.equalsIgnoreCase(sTypeOfChange))
			{
				Map mapChangeDetails = (Map)mapAPPRequestedChangeDetails.get(PGAPPRequestConstants.RANGE_PGAPPREQUESTCHANGETYPE_MFG_STATUS_CHANGE);
				
				String sMfgStatus = DomainConstants.EMPTY_STRING;
				
				if(null != mapChangeDetails && !mapChangeDetails.isEmpty())
				{
					sMfgStatus = (String)mapChangeDetails.get(PGAPPRequestConstants.KEY_MANUFACTURINGSTATUS);
				}
				
				if(UIUtil.isNotNullAndNotEmpty(sMfgStatus))
				{
					mapAPPRequestDataAttributes.put(pgApolloConstants.ATTRIBUTE_PG_LIFECYCLE_STATUS, sMfgStatus);
				}

			}
			else if(PGAPPRequestConstants.RANGE_PGAPPREQUESTCHANGETYPE_EXPIRATION_DATE_CHANGE.equalsIgnoreCase(sTypeOfChange))
			{
				Map mapChangeDetails = (Map)mapAPPRequestedChangeDetails.get(PGAPPRequestConstants.RANGE_PGAPPREQUESTCHANGETYPE_EXPIRATION_DATE_CHANGE);

				String sExpirationDate = DomainConstants.EMPTY_STRING;

				if(null != mapChangeDetails && !mapChangeDetails.isEmpty())
				{
					sExpirationDate = (String)mapChangeDetails.get(PGAPPRequestConstants.KEY_EXPIRATIONDATE);
				}
				
				if(UIUtil.isNotNullAndNotEmpty(sExpirationDate))
				{
					sExpirationDate = convertUIToEmatrixDateFormat(context, sExpirationDate);
					mapAPPRequestDataAttributes.put(PGAPPRequestConstants.ATTRIBUTE_PG_EXPIRATIONDATE, sExpirationDate);
				}
			}
			else if(PGAPPRequestConstants.RANGE_PGAPPREQUESTCHANGETYPE_ACCELERATED_RELEASE_ADDITION.equalsIgnoreCase(sTypeOfChange))
			{			
				Map mapChangeDetails = (Map)mapAPPRequestedChangeDetails.get(PGAPPRequestConstants.RANGE_PGAPPREQUESTCHANGETYPE_ACCELERATED_RELEASE_ADDITION);

				String sAPPRequestComments = DomainConstants.EMPTY_STRING;
				
				if(null != mapChangeDetails && !mapChangeDetails.isEmpty())
				{
					sAPPRequestComments = (String)mapChangeDetails.get(PGAPPRequestConstants.KEY_APPREQUEST_COMMENTS);
				}
				
				if(UIUtil.isNotNullAndNotEmpty(sAPPRequestComments))
				{
					mapAPPRequestDataAttributes.put(PGAPPRequestConstants.ATTRIBUTE_PGAPPREQUESTCOMMENTS, sAPPRequestComments);
				}
			}
			else if(PGAPPRequestConstants.RANGE_PGAPPREQUESTCHANGETYPE_OBSOLESENCE.equalsIgnoreCase(sTypeOfChange))
			{
				
				Map mapChangeDetails = (Map)mapAPPRequestedChangeDetails.get(PGAPPRequestConstants.RANGE_PGAPPREQUESTCHANGETYPE_OBSOLESENCE);

				String sAPPRequestComments = DomainConstants.EMPTY_STRING;
				
				if(null != mapChangeDetails && !mapChangeDetails.isEmpty())
				{
					sAPPRequestComments = (String)mapChangeDetails.get(PGAPPRequestConstants.KEY_APPREQUEST_COMMENTS);
				}
				

				if(null != sAPPRequestComments)
				{
					mapAPPRequestDataAttributes.put(PGAPPRequestConstants.ATTRIBUTE_PGAPPREQUESTCOMMENTS, sAPPRequestComments);
				}
			}		
		}	
		
		return mapAPPRequestDataAttributes;
	}

	/**
	 * Method to get updated Plant list for Requested Changes
	 * @param mapPlant
	 * @param slPlantDetailList
	 * @return
	 */
	private static StringList getPlantsForRequestedChanges(Map mapPlant, StringList slPlantDetailList)
	{
		if(null != mapPlant && !mapPlant.isEmpty())
		{
			String sPlantName;
			String sAuthorizedToUse;
			String sAuthorizedToProduce;
			String sActivated;
			StringBuilder sbPlantDetails;
			sPlantName = (String)mapPlant.get(DomainConstants.SELECT_NAME);
			if(UIUtil.isNullOrEmpty(sPlantName))
			{
				sPlantName = (String)mapPlant.get(PGAPPRequestConstants.KEY_NAME);
			}
			sAuthorizedToUse = (String)mapPlant.get(PGAPPRequestConstants.KEY_AUTHORIZEDTOUSE);
			sAuthorizedToProduce = (String)mapPlant.get(PGAPPRequestConstants.KEY_AUTHORIZEDTOPRODUCE);
			sActivated = (String)mapPlant.get(PGAPPRequestConstants.KEY_ACTIVATED);

			if(UIUtil.isNotNullAndNotEmpty(sPlantName) && UIUtil.isNotNullAndNotEmpty(sAuthorizedToUse) && UIUtil.isNotNullAndNotEmpty(sAuthorizedToProduce) && UIUtil.isNotNullAndNotEmpty(sActivated))
			{
				sbPlantDetails = new StringBuilder();
				sbPlantDetails.append(sPlantName).append(pgApolloConstants.CONSTANT_STRING_PIPE).append(sAuthorizedToUse).append(pgApolloConstants.CONSTANT_STRING_PIPE).append(sAuthorizedToProduce).append(pgApolloConstants.CONSTANT_STRING_PIPE).append(sActivated);
				slPlantDetailList.add(sbPlantDetails.toString());
			}
		}
		
		return slPlantDetailList;
		
	}

	/**
	 * Method to get updated Substitutes for Requested Changes
	 * @param mapSubstitute
	 * @param slSubstituteList
	 * @return
	 */
	private static StringList getSubstitutesForRequestedChanges(Map mapSubstitute, StringList slSubstituteList) 
	{
		if(null != mapSubstitute && !mapSubstitute.isEmpty())
		{
			String sGroupName;
			String sLayerName;
			String sObjectName;
			String sValidStartDate;
			String sValidEndDate;
			String sComments;
			StringBuilder sbSubstituteObjectDetails;
			sGroupName = (String)mapSubstitute.get(pgApolloConstants.STR_GROUPNAME);
			sLayerName = (String)mapSubstitute.get(pgApolloConstants.STR_LAYERNAME);
			sObjectName = (String)mapSubstitute.get(DomainConstants.SELECT_NAME);
			
			if(UIUtil.isNullOrEmpty(sObjectName))
			{
				sObjectName = (String)mapSubstitute.get(PGAPPRequestConstants.KEY_NAME);
			}
			sValidStartDate = (String)mapSubstitute.get(PGAPPRequestConstants.KEY_VALID_START_DATE);
			sValidEndDate = (String)mapSubstitute.get(PGAPPRequestConstants.KEY_VALID_UNTIL_DATE);
			sComments = (String)mapSubstitute.get(PGAPPRequestConstants.KEY_COMMENTS);

			if(UIUtil.isNotNullAndNotEmpty(sGroupName) && UIUtil.isNotNullAndNotEmpty(sLayerName) && UIUtil.isNotNullAndNotEmpty(sObjectName))
			{
				sbSubstituteObjectDetails = new StringBuilder();
				sbSubstituteObjectDetails.append(sGroupName).append(pgApolloConstants.CONSTANT_STRING_PIPE).append(sLayerName).append(pgApolloConstants.CONSTANT_STRING_PIPE).append(sObjectName)
				.append(pgApolloConstants.CONSTANT_STRING_PIPE).append(sValidStartDate).append(pgApolloConstants.CONSTANT_STRING_PIPE).append(sValidEndDate).append(pgApolloConstants.CONSTANT_STRING_PIPE).append(sComments);
				
				slSubstituteList.add(sbSubstituteObjectDetails.toString());
			}
		}		
		
		return slSubstituteList;
	}


	/**
	 * Method to get Affected Item physical id directly or based on name/revision
	 * @param context
	 * @param mapAffectedItem
	 * @return
	 * @throws Exception
	 */
	private static Map getAffectedItemMap(Context context, Map mapAffectedItem) throws Exception
	{
		String sAffectedItemPhysicalId;
		sAffectedItemPhysicalId = (String)mapAffectedItem.get(PGAPPRequestConstants.KEY_AFFECTED_ITEM_PHYSICAL_ID);
		
		
		Locale locale = context.getLocale();
		String sLanguage = locale.getLanguage();
		
		if(UIUtil.isNullOrEmpty(sAffectedItemPhysicalId) || pgApolloConstants.STR_NO_ACCESS.equalsIgnoreCase(sAffectedItemPhysicalId) ||  pgApolloConstants.STR_DENIED.equalsIgnoreCase(sAffectedItemPhysicalId))
		{
			String sObjectName = (String)mapAffectedItem.get(PGAPPRequestConstants.KEY_AFFECTED_ITEM);
			
			
			if(UIUtil.isNotNullAndNotEmpty(sObjectName))
			{
				String sObjectType = (String)mapAffectedItem.get(PGAPPRequestConstants.KEY_AFFECTED_ITEM_TYPE);
				
				
				if(UIUtil.isNullOrEmpty(sObjectType) || pgApolloConstants.STR_NO_ACCESS.equalsIgnoreCase(sObjectType) ||  pgApolloConstants.STR_DENIED.equalsIgnoreCase(sObjectType))
				{
					sObjectType =  pgApolloCommonUtil.getPageProperty(context, pgApolloConstants.STR_APOLLO_CONFIG_PAGE_FILENAME, "pgApolloConfiguration.APPRequestManagement.AffectedItem.AllowedTypes");
				}
				
				String sObjectRevision = (String)mapAffectedItem.get(PGAPPRequestConstants.KEY_AFFECTED_ITEM_REVISION);
				
				
				Map mapObject = new HashMap();
				
				if(null == sObjectRevision || pgApolloConstants.STR_NO_ACCESS.equalsIgnoreCase(sObjectRevision) ||  pgApolloConstants.STR_DENIED.equalsIgnoreCase(sObjectRevision))
				{
					sObjectRevision = DomainConstants.QUERY_WILDCARD;
				}
				
					
				mapObject = pgApolloCommonUtil.getLatestRevisionMap(context, sObjectType, sObjectName, sObjectRevision);	
				
				
				sAffectedItemPhysicalId = (String)mapObject.get(DomainConstants.SELECT_PHYSICAL_ID);
				
				
				if(UIUtil.isNotNullAndNotEmpty(sAffectedItemPhysicalId))
				{
					String sAffectedItemName = (String)mapObject.get(DomainConstants.SELECT_NAME);
					String sAffectedItemRevision = (String)mapObject.get(DomainConstants.SELECT_REVISION);
					String sAffectedItemType = (String)mapObject.get(DomainConstants.SELECT_TYPE);
					String sAffectedItemCurrent = (String)mapObject.get(DomainConstants.SELECT_CURRENT);
					String sAffectedItemPolicy = (String)mapObject.get(DomainConstants.SELECT_POLICY);
					String sIsLast = (String)mapObject.get(DomainConstants.SELECT_IS_LAST);

					if(!pgApolloConstants.STR_DENIED.equalsIgnoreCase(sAffectedItemCurrent))
					{
						sAffectedItemCurrent = EnoviaResourceBundle.getStateI18NString(context,sAffectedItemPolicy ,sAffectedItemCurrent, sLanguage);			
					}

					mapAffectedItem.put(PGAPPRequestConstants.KEY_AFFECTED_ITEM, sAffectedItemName);
					mapAffectedItem.put(PGAPPRequestConstants.KEY_AFFECTED_ITEM_REVISION, sAffectedItemRevision);
					mapAffectedItem.put(PGAPPRequestConstants.KEY_AFFECTED_ITEM_TYPE, sAffectedItemType);
					mapAffectedItem.put(PGAPPRequestConstants.KEY_AFFECTED_ITEM_PHYSICAL_ID, sAffectedItemPhysicalId);	
					mapAffectedItem.put(PGAPPRequestConstants.KEY_AFFECTED_ITEM_STATE, sAffectedItemCurrent);
					
					if(!pgApolloConstants.STR_TRUE_FLAG.equalsIgnoreCase(sIsLast))
					{
						DomainObject domAffectedItem = DomainObject.newInstance(context, sAffectedItemPhysicalId);
						mapAffectedItem = updateMapForImplementedItem(context, domAffectedItem, mapAffectedItem);
					}
					else
					{
						mapAffectedItem.put(PGAPPRequestConstants.KEY_IMPLEMENTED_ITEM, sAffectedItemName);
						mapAffectedItem.put(PGAPPRequestConstants.KEY_IMPLEMENTED_ITEM_REVISION, sAffectedItemRevision);
						mapAffectedItem.put(PGAPPRequestConstants.KEY_IMPLEMENTED_ITEM_TYPE, sAffectedItemType);
						mapAffectedItem.put(PGAPPRequestConstants.KEY_IMPLEMENTED_ITEM_STATE, sAffectedItemCurrent);
						mapAffectedItem.put(PGAPPRequestConstants.KEY_IMPLEMENTED_ITEM_PHYSICAL_ID, sAffectedItemPhysicalId);
					}

				}
				
				
			}
			else
			{
				//Throw Error Object Name Not found - Object Name is Mandatory
				throw new Exception("Object Name Not found");
			}								

		}		
		else
		{

			DomainObject domAffectedItem = DomainObject.newInstance(context, sAffectedItemPhysicalId);
			
			StringList slObjectSelects = new StringList();
			slObjectSelects.add(DomainConstants.SELECT_TYPE);
			slObjectSelects.add(DomainConstants.SELECT_NAME);
			slObjectSelects.add(DomainConstants.SELECT_REVISION);
			slObjectSelects.add(DomainConstants.SELECT_CURRENT);
			slObjectSelects.add(DomainConstants.SELECT_POLICY);
			slObjectSelects.add(DomainConstants.SELECT_IS_LAST);

			Map mapObject = domAffectedItem.getInfo(context, slObjectSelects);

			String sAffectedItemType = (String)mapObject.get(DomainConstants.SELECT_TYPE);
			String sAffectedItemName = (String)mapObject.get(DomainConstants.SELECT_NAME);
			String sAffectedItemRevision = (String)mapObject.get(DomainConstants.SELECT_REVISION);
			String sAffectedItemCurrent = (String)mapObject.get(DomainConstants.SELECT_CURRENT);
			String sAffectedItemPolicy = (String)mapObject.get(DomainConstants.SELECT_POLICY);
			String sIsLast = (String)mapObject.get(DomainConstants.SELECT_IS_LAST);

			
			if(UIUtil.isNotNullAndNotEmpty(sAffectedItemCurrent))
			{				
				if(!pgApolloConstants.STR_DENIED.equalsIgnoreCase(sAffectedItemCurrent))
				{
					sAffectedItemCurrent = EnoviaResourceBundle.getStateI18NString(context,sAffectedItemPolicy ,sAffectedItemCurrent, sLanguage);	
				}

				mapAffectedItem.put(PGAPPRequestConstants.KEY_AFFECTED_ITEM, sAffectedItemName);
				mapAffectedItem.put(PGAPPRequestConstants.KEY_AFFECTED_ITEM_REVISION, sAffectedItemRevision);
				mapAffectedItem.put(PGAPPRequestConstants.KEY_AFFECTED_ITEM_TYPE, sAffectedItemType);
				mapAffectedItem.put(PGAPPRequestConstants.KEY_AFFECTED_ITEM_STATE, sAffectedItemCurrent);
				
				if(!pgApolloConstants.STR_TRUE_FLAG.equalsIgnoreCase(sIsLast))
				{
					mapAffectedItem = updateMapForImplementedItem(context, domAffectedItem, mapAffectedItem);
				}
				else
				{
					mapAffectedItem.put(PGAPPRequestConstants.KEY_IMPLEMENTED_ITEM, sAffectedItemName);
					mapAffectedItem.put(PGAPPRequestConstants.KEY_IMPLEMENTED_ITEM_REVISION, sAffectedItemRevision);
					mapAffectedItem.put(PGAPPRequestConstants.KEY_IMPLEMENTED_ITEM_TYPE, sAffectedItemType);
					mapAffectedItem.put(PGAPPRequestConstants.KEY_IMPLEMENTED_ITEM_STATE, sAffectedItemCurrent);
					mapAffectedItem.put(PGAPPRequestConstants.KEY_IMPLEMENTED_ITEM_PHYSICAL_ID, sAffectedItemPhysicalId);
				}
			}

			
		}
		
		return mapAffectedItem;
	}

	/**
	 * Method to update Affected Item Map with Implemented Item Details
	 * @param context
	 * @param mapAffectedItem
	 * @param domAffectedItem
	 * @return
	 * @throws FrameworkException
	 * @throws MatrixException
	 */
	public static Map updateMapForImplementedItem(Context context, DomainObject domAffectedItem, Map mapAffectedItem) throws MatrixException 
	{
		DomainObject domLatestAffectedItem = DomainObject.newInstance(context, domAffectedItem.getLastRevision(context));
		
		Locale locale = context.getLocale();
		String sLanguage = locale.getLanguage();

		StringList slObjectSelects = new StringList();
		slObjectSelects.add(DomainConstants.SELECT_TYPE);
		slObjectSelects.add(DomainConstants.SELECT_NAME);
		slObjectSelects.add(DomainConstants.SELECT_REVISION);
		slObjectSelects.add(DomainConstants.SELECT_CURRENT);
		slObjectSelects.add(DomainConstants.SELECT_POLICY);
		slObjectSelects.add(DomainConstants.SELECT_PHYSICAL_ID);
		
		Map mapLatestObject = domLatestAffectedItem.getInfo(context, slObjectSelects);

		String sImplementedItemType = (String)mapLatestObject.get(DomainConstants.SELECT_TYPE);
		String sImplementedItemName = (String)mapLatestObject.get(DomainConstants.SELECT_NAME);
		String sImplementedItemRevision = (String)mapLatestObject.get(DomainConstants.SELECT_REVISION);
		String sImplementedItemCurrent = (String)mapLatestObject.get(DomainConstants.SELECT_CURRENT);
		String sImplementedItemPolicy = (String)mapLatestObject.get(DomainConstants.SELECT_POLICY);
		String sImplementedItemPhysicalId = (String)mapLatestObject.get(DomainConstants.SELECT_PHYSICAL_ID);

		if(!pgApolloConstants.STR_DENIED.equalsIgnoreCase(sImplementedItemCurrent))
		{
			sImplementedItemCurrent = EnoviaResourceBundle.getStateI18NString(context,sImplementedItemPolicy ,sImplementedItemCurrent, sLanguage);	
		}

		mapAffectedItem.put(PGAPPRequestConstants.KEY_IMPLEMENTED_ITEM, sImplementedItemName);
		mapAffectedItem.put(PGAPPRequestConstants.KEY_IMPLEMENTED_ITEM_REVISION, sImplementedItemRevision);
		mapAffectedItem.put(PGAPPRequestConstants.KEY_IMPLEMENTED_ITEM_TYPE, sImplementedItemType);
		mapAffectedItem.put(PGAPPRequestConstants.KEY_IMPLEMENTED_ITEM_STATE, sImplementedItemCurrent);
		mapAffectedItem.put(PGAPPRequestConstants.KEY_IMPLEMENTED_ITEM_PHYSICAL_ID, sImplementedItemPhysicalId);
		
		return mapAffectedItem;
	}
	
	
	/**
	 * Method to get All LPD requests
	 * @param context
	 * @param sInput
	 * @return
	 * @throws Exception
	 */
	public static MapList getAllAPPRequests(Context context) throws Exception 
	{
		MapList mlOutputList = new MapList();	
		
		StringBuilder sbWhereClause = new StringBuilder();			
		sbWhereClause.append(DomainConstants.SELECT_CURRENT).append(pgApolloConstants.CONSTANT_STRING_NOT_EQUAL_SIGN).append("'").append( pgApolloConstants.STATE_ARCHIVED ).append("'");

		
		MapList mlRequestDataList = DomainObject.findObjects(context,	// Context
								PGAPPRequestConstants.TYPE_PGAPPREQUESTDATA, // Type
								DomainConstants.QUERY_WILDCARD, //Name
								DomainConstants.QUERY_WILDCARD, // Revision
								DomainConstants.QUERY_WILDCARD,	//Owner
								pgApolloConstants.VAULT_ESERVICE_PRODUCTION, // Vault
								sbWhereClause.toString(), // Where Clause
								true,				// Include Sub-types Flag
								new StringList(DomainConstants.SELECT_ID), //Object Selects
								null); // Multi-Value Object Selects
		
			
		StringList slRequestDataIdList = new ChangeUtil().getStringListFromMapList(mlRequestDataList, DomainConstants.SELECT_ID);
		
	
		mlOutputList = getRequestDataDetails(context, slRequestDataIdList);

		return mlOutputList;
	}

	
	/**
	 * Method to get All APP Requests with Filtered Criteria
	 * @param context
	 * @param mapFilterCriteria
	 * @return
	 * @throws Exception 
	 */
	public static MapList getAPPRequests(Context context, Map mapFilterCriteria) throws Exception	
	{
		MapList mlOutputList = new MapList();	
		
		StringBuilder sbWhereClause = new StringBuilder();			
		sbWhereClause.append(DomainConstants.SELECT_CURRENT).append(pgApolloConstants.CONSTANT_STRING_NOT_EQUAL_SIGN).append("'").append( pgApolloConstants.STATE_ARCHIVED ).append("'");
		
		if(mapFilterCriteria.containsKey(PGAPPRequestConstants.KEY_OWNER))
		{
			StringList slOwnerList = pgApolloCommonUtil.getStringListMultiValue(mapFilterCriteria.get(PGAPPRequestConstants.KEY_OWNER));
			sbWhereClause = pgApolloCommonUtil.appendWhereClause(sbWhereClause, DomainConstants.SELECT_OWNER, slOwnerList);
			mapFilterCriteria.remove(PGAPPRequestConstants.KEY_OWNER);
		}
		
		boolean bFilterState = false;
		
		if(mapFilterCriteria.containsKey(PGAPPRequestConstants.KEY_STATE))
		{
			StringList slFilteredState = pgApolloCommonUtil.getStringListMultiValue(mapFilterCriteria.get(PGAPPRequestConstants.KEY_STATE));
			sbWhereClause = pgApolloCommonUtil.appendWhereClause(sbWhereClause, DomainConstants.SELECT_CURRENT, slFilteredState);
			mapFilterCriteria.remove(PGAPPRequestConstants.KEY_STATE);
			bFilterState = true;
		}
				
		if(bFilterState)
		{
			
			MapList mlRequestList = DomainObject.findObjects(context,	// Context
													PGAPPRequestConstants.TYPE_PGAPPREQUEST, // Type
													DomainConstants.QUERY_WILDCARD, //Name
													DomainConstants.QUERY_WILDCARD, // Revision
													DomainConstants.QUERY_WILDCARD,	//Owner
													pgApolloConstants.VAULT_ESERVICE_PRODUCTION, // Vault
													sbWhereClause.toString(), // Where Clause
													true,				// Include Sub-types Flag
													new StringList(DomainConstants.SELECT_ID), //Object Selects
													null); // Multi-Value Object Selects

			
			StringList slRequestIdList = new ChangeUtil().getStringListFromMapList(mlRequestList, DomainConstants.SELECT_ID);
			
			mlOutputList = getRequestDetails(context, slRequestIdList);
			
			mlOutputList = getFilteredRequestDetails(context, mlOutputList, mapFilterCriteria);

		}
		else
		{
			if(mapFilterCriteria.containsKey(PGAPPRequestConstants.KEY_TYPE_OF_CHANGE))
			{
				StringList slTypeOfChange = pgApolloCommonUtil.getStringListMultiValue(mapFilterCriteria.get(PGAPPRequestConstants.KEY_TYPE_OF_CHANGE));
				sbWhereClause = pgApolloCommonUtil.appendWhereClause(sbWhereClause, PGAPPRequestConstants.SELECT_ATTRIBUTE_PG_APP_REQUESTCHANGETYPE, slTypeOfChange);
				mapFilterCriteria.remove(PGAPPRequestConstants.KEY_TYPE_OF_CHANGE);
			}
			
			if(mapFilterCriteria.containsKey(PGAPPRequestConstants.KEY_BUSINESS_AREA))
			{
				StringList slBusinessArea = pgApolloCommonUtil.getStringListMultiValue(mapFilterCriteria.get(PGAPPRequestConstants.KEY_BUSINESS_AREA));
				sbWhereClause = pgApolloCommonUtil.appendWhereClause(sbWhereClause, pgApolloConstants.SELECT_ATTRIBUTE_ENTERPRISEPART_PGBUSINESSAREA, slBusinessArea);
				mapFilterCriteria.remove(PGAPPRequestConstants.KEY_BUSINESS_AREA);
			}
			
			if(mapFilterCriteria.containsKey(DomainConstants.ATTRIBUTE_ORIGINATOR))
			{
				StringList slOriginator = pgApolloCommonUtil.getStringListMultiValue(mapFilterCriteria.get(DomainConstants.ATTRIBUTE_ORIGINATOR));
				
				sbWhereClause = pgApolloCommonUtil.appendWhereClause(sbWhereClause, DomainConstants.SELECT_ORIGINATOR, slOriginator);
				
				mapFilterCriteria.remove(DomainConstants.ATTRIBUTE_ORIGINATOR);
			}
				
			MapList mlRequestDataList = DomainObject.findObjects(context,	// Context
									PGAPPRequestConstants.TYPE_PGAPPREQUESTDATA, // Type
									DomainConstants.QUERY_WILDCARD, //Name
									DomainConstants.QUERY_WILDCARD, // Revision
									DomainConstants.QUERY_WILDCARD,	//Owner
									pgApolloConstants.VAULT_ESERVICE_PRODUCTION, // Vault
									sbWhereClause.toString(), // Where Clause
									true,				// Include Sub-types Flag
									new StringList(DomainConstants.SELECT_ID), //Object Selects
									null); // Multi-Value Object Selects
			
				
			StringList slRequestDataIdList = new ChangeUtil().getStringListFromMapList(mlRequestDataList, DomainConstants.SELECT_ID);		
		
			mlOutputList = getRequestDataDetails(context, slRequestDataIdList);
			
			mlOutputList = getFilteredRequestDetails(context, mlOutputList, mapFilterCriteria);

		}	
	
		return mlOutputList;
	}
	
	/**
	 * Method to get Filtered Request Details
	 * @param context
	 * @param mlOutputList
	 * @param mapFilterCriteria
	 * @return
	 */
	public static MapList getFilteredRequestDetails(Context context, MapList mlRequestList, Map mapFilterCriteria)
	{
		MapList mlOutputList  = new MapList();
		
		if(!mapFilterCriteria.isEmpty())
		{
			Map mapRequest;		
			
			boolean isValidObject = false;
			
			for(Object objMap : mlRequestList)
			{
				mapRequest = (Map)objMap;
				
				isValidObject = validateRequestMapForCriteria(context, mapRequest, mapFilterCriteria);	
				
				if(isValidObject)
				{
					mlOutputList.add(mapRequest);
				}
				
			}
		}
		else
		{
			return mlRequestList;
		}	
		return mlOutputList;
	}


	/**
	 * Method to validate Request Map for Criteria
	 * @param context
	 * @param mapFilterCriteria
	 * @param mapFilterCriteria2 
	 * @return
	 */
	public static boolean validateRequestMapForCriteria(Context context, Map mapRequest, Map mapFilterCriteria) 
	{
		boolean isValidObject = false;
		
		isValidObject = filterCriteria(mapRequest, mapFilterCriteria);
		
		return isValidObject;
	}
	
	
	/**
	 * Compare Value map with Filter Criteria Map
	 * @param mapValues
	 * @param mapFilterCriteria
	 * @return
	 */
	public static boolean filterCriteria(Map<String, Object> mapValues, Map<String, Object> mapFilterCriteria) {

		boolean bAllReturn = false;

		String sFilterKey;
		Object objectFilterCriteriaValue;

		Object objectValue;

		StringList slFilterCriteriaValueList;
		StringList slObjectValueList;
		
		MapList mlRequestLineItems = (MapList)mapValues.get(PGAPPRequestConstants.KEY_REQUEST_LINE_ITEMS);
		
		Map mapRequestLine = new HashMap();
		
		if(null != mlRequestLineItems && !mlRequestLineItems.isEmpty())
		{
			mapRequestLine = (Map)mlRequestLineItems.get(0);
		}


		Map mapObject;
		Set<Boolean> setBoolean = new HashSet();

		boolean bReturn = false;

		for (Map.Entry<String, Object> entry : mapFilterCriteria.entrySet()) {
			
			bReturn = false;

			sFilterKey = entry.getKey();
			objectFilterCriteriaValue = entry.getValue();

			if (!mapValues.containsKey(sFilterKey) && !mapRequestLine.containsKey(sFilterKey)) {
				bReturn =  false;  // Key missing in Value Map
			}

			objectValue = mapValues.get(sFilterKey);			

			slFilterCriteriaValueList = pgApolloCommonUtil.getStringListMultiValue(objectFilterCriteriaValue);

			if(null != objectValue)
			{
				slObjectValueList = pgApolloCommonUtil.getStringListMultiValue(objectValue);

				if(containsSome(slFilterCriteriaValueList, slObjectValueList))
				{
					bReturn =  true;
				}   
			}

			if(null == objectValue && null != mlRequestLineItems)
			{
				for(Object objMap : mlRequestLineItems)
				{
					mapObject = (Map)objMap;

					objectValue = mapObject.get(sFilterKey);					

					slObjectValueList = pgApolloCommonUtil.getStringListMultiValue(objectValue);
					
					if(containsSome(slFilterCriteriaValueList, slObjectValueList))
					{
						bReturn =  true;
					}   

				}

			}

			
			setBoolean.add(bReturn);

		}
		
	
		if(!setBoolean.isEmpty())
		{
			if(setBoolean.contains(false))
			{
				bAllReturn = false;
			}
			else if(setBoolean.contains(true))
			{
				bAllReturn = true;
			}
		}
		else
		{
			bAllReturn = true;
		}
		
		return bAllReturn;  
	}

    /**
	 * Method to compare to check Parent List contains child list - ignore case
	 * @param slElementsParentList
	 * @param slElementsToCheck
	 * @return
	 */
	public static boolean containsAll(StringList slElementsParentList, StringList slElementsToCheck)
	{
		boolean bContainsAll = false;
		if(!slElementsParentList.isEmpty() &&  !slElementsToCheck.isEmpty())
		{			
			bContainsAll =  slElementsParentList.containsAll(slElementsToCheck);
		}
		else if(slElementsParentList.isEmpty() && slElementsToCheck.isEmpty())
		{
			bContainsAll = true;
		}		
		return bContainsAll;
	}
	
	
	/**
	 * Method to check if contains some value
	 * @param slElementsParentList
	 * @param slElementsToCheck
	 * @return
	 */
	public static boolean containsSome(StringList slElementsParentList, StringList slElementsToCheck) {
		
		boolean bContainsSome = false;
		
		if(!slElementsParentList.isEmpty() &&  !slElementsToCheck.isEmpty())
		{			
			for (String sElementToCheck : slElementsToCheck) {
	            if (slElementsParentList.contains(sElementToCheck)) {
	            	bContainsSome = true;
	            	break;
	            }
	        }
		}
		else if(slElementsParentList.isEmpty() && slElementsToCheck.isEmpty())
		{
			bContainsSome = true;
		}	
        
        return bContainsSome;
    }

	/**
	 * Method to exclude keys for API Integration
	 * @param context
	 * @return
	 * @throws Exception
	 */
	public static StringList getExcludedKeysForAPIIntegration(Context context) throws Exception
	{
		StringList slExcludedKeys = new StringList();
		
		String sExcludedKeysForAPI = pgApolloCommonUtil.getPageProperty(context, pgApolloConstants.STR_APOLLO_CONFIG_PAGE_FILENAME, "pgApolloConfiguration.APPRequestManagement.APIIntegration.ExcludedKeysMapping");

		if(UIUtil.isNotNullAndNotEmpty(sExcludedKeysForAPI))
		{
			 slExcludedKeys = StringUtil.split(sExcludedKeysForAPI, pgApolloConstants.CONSTANT_STRING_PIPE);
		}
		
		return slExcludedKeys;
	}
	
	/**
	 * Method to exclude keys for API Integration
	 * @param context
	 * @return
	 * @throws Exception
	 */
	public static MapList getFilteredDataForAPIIntegration(Context context, MapList mlInputList) throws Exception
	{
		MapList mlOutputList = new MapList();
		
		if(null != mlInputList && !mlInputList.isEmpty())
		{
			Map mapObject;
			
			StringList slExcludedKeys = getExcludedKeysForAPIIntegration(context);
			
			for(Object objMap : mlInputList)
			{
				mapObject = (Map)objMap;				
				mapObject = removeKeysRecursive(mapObject, slExcludedKeys);
				mlOutputList.add(mapObject);
			}
		}
		
		return mlOutputList;
	}
	
	/**
	 * Method to remove keys recursively
	 * @param map
	 * @param slKeysToRemove
	 */
	public static Map removeKeysRecursive(Map<String, Object> map, StringList slKeysToRemove) {
		
		for (String key : slKeysToRemove) {
			map.remove(key);
		}

		Map<String, Object> mapLocal;
		String sNameValue;

		for (Object value : map.values()) {
			if (value instanceof Map) {
				removeKeysRecursive((Map<String, Object>) value, slKeysToRemove);
			} else if (value instanceof MapList) {
				for (Object item : (MapList) value) {
					if (item instanceof Map) {
						mapLocal = (Map<String, Object>)item;
						mapLocal.remove(MultiValueSelects.ATTRIBUTE_TITLE);
						mapLocal.remove(pgApolloConstants.STR_MAP_RESULT_KEY_DESCRIPTION);
						sNameValue = (String)mapLocal.remove(DomainConstants.SELECT_NAME);
						if(null != sNameValue)
						{
							mapLocal.put(PGAPPRequestConstants.KEY_NAME, sNameValue);
						}
						removeKeysRecursive(mapLocal, slKeysToRemove);
					}
				}
			}
		}

		return map;
	}
	
	/**
	 * Method to get Request Data Details
	 * @param context
	 * @param slRequestDataIdList
	 * @return
	 * @throws Exception
	 */
	public static MapList getRequestDataDetails(Context context, StringList slRequestDataIdList) throws Exception
	{
		MapList mlOutputList = new MapList();	

		String sMultiValueAttributes = pgApolloCommonUtil.getPageProperty(context, pgApolloConstants.STR_APOLLO_CONFIG_PAGE_FILENAME, "pgApolloConfiguration.APPRequestManagement.APPRequestData.MultiValueSelectableAttributeMapping");
		StringList slConfiguredRequestDataSelects = getConfiguredSelectableList(context, "pgApolloConfiguration.APPRequestManagement.APPRequestData.SelectableAttributeMapping");
		StringList slConfiguredRequestSelects = getConfiguredSelectableList(context, "pgApolloConfiguration.APPRequestManagement.APPRequest.SelectableAttributeMapping");

		Map mapAPPRequestTypeOfChangeMapping = pgApolloCommonUtil.prepareAttributeMappingBasedOnConfiguration(context, pgApolloConstants.STR_APOLLO_CONFIG_PAGE_FILENAME, "pgApolloConfiguration.APPRequestManagement.TypeOfChangeMapping", true);

		Map mapAPPRequestDataAttributeMapping = pgApolloCommonUtil.prepareAttributeMappingBasedOnConfiguration(context, pgApolloConstants.STR_APOLLO_CONFIG_PAGE_FILENAME, "pgApolloConfiguration.APPRequestManagement.APPRequestData.SelectableAttributeMapping", true);
		Map mapAPPRequestAttributeMapping = pgApolloCommonUtil.prepareAttributeMappingBasedOnConfiguration(context, pgApolloConstants.STR_APOLLO_CONFIG_PAGE_FILENAME, "pgApolloConfiguration.APPRequestManagement.APPRequest.SelectableAttributeMapping", true);

		String sRequestSelectable = new StringBuilder("from[").append(PGAPPRequestConstants.RELATIONSHIP_PGAPPREQUESTCHANGEDATA).append("].to.physicalid").toString();
		String sRequestDataAffectedItemSelectable = new StringBuilder("from[").append(PGAPPRequestConstants.RELATIONSHIP_PGAPPREQUESTCHANGEDATA).append("].to.from[").append(PGAPPRequestConstants.RELATIONSHIP_PGAPPREQUESTAFFECTEDITEM).append("].to.physicalid").toString();
		String sRequestImplementedItemSelectable = new StringBuilder("from[").append(PGAPPRequestConstants.RELATIONSHIP_PGAPPREQUESTIMPLEMENTEDITEM).append("].to.physicalid").toString();
		String sRequestApproverGroupListSelectable = new StringBuilder("from[").append(PGAPPRequestConstants.RELATIONSHIP_TECHNICALASSIGNEE).append("].to.name").toString();
		String sRequestBackgroundProcessNameSelectable = new StringBuilder("to[").append(pgApolloConstants.RELATIONSHIP_PGBACKGROUNDPROCESSRELATEDOBJECTS).append("].from.name").toString();
		String sRequestBackgroundProcessPhysicalIdSelectable = new StringBuilder("to[").append(pgApolloConstants.RELATIONSHIP_PGBACKGROUNDPROCESSRELATEDOBJECTS).append("].from.physicalid").toString();
		String sRequestImplementedItemStateSelectable = new StringBuilder("from[").append(PGAPPRequestConstants.RELATIONSHIP_PGAPPREQUESTIMPLEMENTEDITEM).append("].to.current").toString();

		StringList slRequestDataSelects = new StringList();
		slRequestDataSelects.add(DomainConstants.SELECT_NAME);
		slRequestDataSelects.add(DomainConstants.SELECT_PHYSICAL_ID);
		slRequestDataSelects.add(DomainConstants.SELECT_CURRENT);
		slRequestDataSelects.add(sRequestSelectable);
		slRequestDataSelects.add(sRequestDataAffectedItemSelectable);
		slRequestDataSelects.addAll(slConfiguredRequestDataSelects);
		slRequestDataSelects.add(PGAPPRequestConstants.SELECT_ATTRIBUTE_PG_APP_REQUEST_SUBSTITUTES);
		slRequestDataSelects.add(PGAPPRequestConstants.SELECT_ATTRIBUTE_PG_APPREQUESTPLANTS);
		slRequestDataSelects.add(PGAPPRequestConstants.SELECT_ATTRIBUTE_PG_LPD_DUE_DATE);
		slRequestDataSelects.add(PGAPPRequestConstants.SELECT_ATTRIBUTE_PG_EXPIRATIONDATE);
		slRequestDataSelects.add(PGAPPRequestConstants.SELECT_ATTRIBUTE_PGAPPREQUESTCOMMENTS);
		slRequestDataSelects.add(PGAPPRequestConstants.SELECT_ATTRIBUTE_PG_LIFECYCLE_STATUS);


		StringList slMultiValueAttributeList = StringUtil.split(sMultiValueAttributes, pgApolloConstants.CONSTANT_STRING_PIPE);
		slMultiValueAttributeList.add(sRequestSelectable);
		slMultiValueAttributeList.add(sRequestDataAffectedItemSelectable);

		
		MapList mlRequestDataList = DomainObject.getInfo(context, slRequestDataIdList.toArray(new String[slRequestDataIdList.size()]), slRequestDataSelects, slMultiValueAttributeList);
		
		if(null != mlRequestDataList && !mlRequestDataList.isEmpty())
		{   			
			Map localMap;			
			
			StringList slAllRequestIdList = new StringList();
			StringList slAllAffectedItemList = new StringList();

			StringList slRequestIdList = new StringList();
			StringList slAffectedItemList = new StringList();

			for(Object objectMap : mlRequestDataList)
			{
				localMap = (Map)objectMap;
				
				slRequestIdList = pgApolloCommonUtil.getStringListMultiValue(localMap.get(sRequestSelectable));
				slAffectedItemList = pgApolloCommonUtil.getStringListMultiValue(localMap.get(sRequestDataAffectedItemSelectable));

				slAllRequestIdList.addAll(slRequestIdList);		
				slAllAffectedItemList.addAll(slAffectedItemList);
			}			
			
			StringList slObjectSelectable = new StringList();	
			slObjectSelectable.add(DomainConstants.SELECT_ID);
			slObjectSelectable.add(DomainConstants.SELECT_TYPE);
			slObjectSelectable.add(DomainConstants.SELECT_NAME);
			slObjectSelectable.add(DomainConstants.SELECT_REVISION);
			slObjectSelectable.add(DomainConstants.SELECT_PHYSICAL_ID);
			slObjectSelectable.add(DomainConstants.SELECT_CURRENT);

			
			Map mapAllRequestInfoDetails = new HashMap();
			Map mapAllAffectedItemDetails = new HashMap();

			String sRequestPhysicalId;
			String sRequestCurrent;
			String sRequestPolicy;
			String sRequestName;
			String sRequestAffectedItem;
			String sAffectedItemName;
			String sAffectedItemType;
			String sAffectedItemRevision;
			String sAffectedItemPhysicalId;
			StringBuilder sbAffectedItemDetails;
			
			Map mapRequest;

			Locale localeContext = context.getLocale();
			String sLanguage = localeContext.getLanguage();
			
			if(!slAllAffectedItemList.isEmpty())
			{
				MapList mlAffectedItemObjectInfo = DomainObject.getInfo(context, slAllAffectedItemList.toArray(new String[slAllAffectedItemList.size()]), slObjectSelectable);			
				
				for(Object objectMap : mlAffectedItemObjectInfo)
				{
					localMap = (Map)objectMap;			

					sAffectedItemType = (String)localMap.get(DomainConstants.SELECT_TYPE);

					sAffectedItemType = EnoviaResourceBundle.getAdminI18NString(context, "Type", sAffectedItemType, Locale.US.getLanguage());

					sAffectedItemName = (String)localMap.get(DomainConstants.SELECT_NAME);
					sAffectedItemRevision = (String)localMap.get(DomainConstants.SELECT_REVISION);
					
					sbAffectedItemDetails = new StringBuilder();
					sbAffectedItemDetails.append(sAffectedItemType).append(pgApolloConstants.CONSTANT_STRING_PIPE).append(sAffectedItemName).append(pgApolloConstants.CONSTANT_STRING_PIPE).append(sAffectedItemRevision);
					
					mapAllAffectedItemDetails.put(sbAffectedItemDetails.toString(), localMap);					

				}
				
			}

			Map mapAffectedItem;
			
			Map mapClaimedBy;
			String sClaimedByUser;
			String sRequestOwner;
			String sRequestOriginator;
			String sRequestDataOwner;
			
			Map mapOwnerFullNameDetails;
			Map mapOriginatorFullNameDetails;
			
			String sDueDate;
			String sDueDateFormatted;
			String sCreatedOn;
			String sCreatedOnFormatted;
			
			String sRequestImplementedItem;
			
			String sImplementedItemName;
			String sImplementedItemType;
			String sImplementedItemRevision;
			String sImplementedItemPhysicalId;
			String sImplementedItemState;

			
			StringList slRequestImplementedItemList;
			StringList slRequestImplementedItemStateList;
			
			StringList slRequestApproverGroupList;
			String sRequestApproverGroupList;
			
			StringList slRequestBackgroundProcessNameList;
			StringList slRequestBackgroundProcessPhysicalIdList;

			String sRequestBackgroundProcessNameList;
			String sRequestBackgroundProcessPhysicalIdList;
			
			StringList slImplementedItemList;

			if(!slAllRequestIdList.isEmpty())
			{
				StringList slRequestSelects = new StringList();
				slRequestSelects.addAll(slConfiguredRequestSelects);
				slRequestSelects.addAll(DomainConstants.SELECT_POLICY);

				slRequestSelects.add(PGAPPRequestConstants.SELECT_ATTRIBUTE_PG_AFFECTEDITEM);
				slRequestSelects.add(PGAPPRequestConstants.SELECT_ATTRIBUTE_PG_IMPLEMENTEDITEM);
				slRequestSelects.add(sRequestImplementedItemSelectable);
				slRequestSelects.add(sRequestImplementedItemStateSelectable);
				slRequestSelects.add(sRequestApproverGroupListSelectable);
				slRequestSelects.add(sRequestBackgroundProcessNameSelectable);
				slRequestSelects.add(sRequestBackgroundProcessPhysicalIdSelectable);

				
				StringList slMultiValueRequestSelects = new StringList();
				slMultiValueRequestSelects.add(sRequestImplementedItemSelectable);
				slMultiValueRequestSelects.add(sRequestImplementedItemStateSelectable);
				slMultiValueRequestSelects.add(sRequestApproverGroupListSelectable);
				slMultiValueRequestSelects.add(sRequestBackgroundProcessNameSelectable);
				slMultiValueRequestSelects.add(sRequestBackgroundProcessPhysicalIdSelectable);

				MapList mlAllRequestIdInfo = DomainObject.getInfo(context, slAllRequestIdList.toArray(new String[slAllRequestIdList.size()]), slRequestSelects, slMultiValueRequestSelects); 
								
				for(Object objectMap : mlAllRequestIdInfo)
				{
					localMap = (Map)objectMap;					
					
					sRequestPhysicalId = (String)localMap.get(DomainConstants.SELECT_PHYSICAL_ID);
					
					slRequestImplementedItemList = (StringList)localMap.get(sRequestImplementedItemSelectable);
					
					slRequestImplementedItemStateList = (StringList)localMap.get(sRequestImplementedItemStateSelectable);
					
					slRequestApproverGroupList = (StringList)localMap.get(sRequestApproverGroupListSelectable);
					
					slRequestBackgroundProcessNameList = (StringList)localMap.get(sRequestBackgroundProcessNameSelectable);
					
					slRequestBackgroundProcessPhysicalIdList = (StringList)localMap.get(sRequestBackgroundProcessPhysicalIdSelectable);

					sRequestApproverGroupList = DomainConstants.EMPTY_STRING;
					sRequestBackgroundProcessNameList = DomainConstants.EMPTY_STRING;
					sRequestBackgroundProcessPhysicalIdList = DomainConstants.EMPTY_STRING;

					if(null != slRequestBackgroundProcessNameList && !slRequestBackgroundProcessNameList.isEmpty())
					{
						sRequestBackgroundProcessNameList = StringUtil.join(slRequestBackgroundProcessNameList, pgApolloConstants.CONSTANT_STRING_COMMA);
						sRequestBackgroundProcessPhysicalIdList = StringUtil.join(slRequestBackgroundProcessPhysicalIdList, pgApolloConstants.CONSTANT_STRING_COMMA);
					}
					
					sRequestApproverGroupList = DomainConstants.EMPTY_STRING;
					
					if(null != slRequestApproverGroupList && !slRequestApproverGroupList.isEmpty())
					{
						sRequestApproverGroupList = StringUtil.join(slRequestApproverGroupList, pgApolloConstants.CONSTANT_STRING_COMMA);
					}

					sRequestCurrent = (String)localMap.get(DomainConstants.SELECT_CURRENT);	
					
					sRequestPolicy = (String)localMap.get(DomainConstants.SELECT_POLICY);			
					
					sDueDate =  (String)localMap.get(PGAPPRequestConstants.SELECT_ATTRIBUTE_PG_LPD_DUE_DATE);
					
					sDueDateFormatted = parseDateForDashboard(sDueDate);
					
					sCreatedOn =  (String)localMap.get(PGAPPRequestConstants.SELECT_ATTRIBUTE_CREATED_ON);
					
					sCreatedOnFormatted = parseDateForDashboard(sCreatedOn);
					
					sClaimedByUser = (String)localMap.get(PGAPPRequestConstants.SELECT_ATTRIBUTE_PGCLAIMEDBY);
					
					sRequestOwner = (String)localMap.get(DomainConstants.SELECT_OWNER);
					
					mapOwnerFullNameDetails = getPersonDetailsMap(context, sRequestOwner);
					
					sRequestOriginator = (String)localMap.get("attribute["+DomainConstants.ATTRIBUTE_ORIGINATOR+"]");
					
					mapOriginatorFullNameDetails = getPersonDetailsMap(context, sRequestOriginator);

					mapClaimedBy = getPersonDetailsMap(context, sClaimedByUser);
					
					if(UIUtil.isNotNullAndNotEmpty(sRequestCurrent))
					{
						if(!pgApolloConstants.STR_DENIED.equalsIgnoreCase(sRequestCurrent))
						{
							sRequestCurrent = EnoviaResourceBundle.getStateI18NString(context, sRequestPolicy ,sRequestCurrent, sLanguage);			
						}
					}

					localMap.put(DomainConstants.SELECT_CURRENT, sRequestCurrent);
					localMap.put(PGAPPRequestConstants.SELECT_ATTRIBUTE_PG_LPD_DUE_DATE, sDueDateFormatted);
					localMap.put(PGAPPRequestConstants.SELECT_ATTRIBUTE_CREATED_ON, sCreatedOnFormatted);

					mapRequest = new HashMap();					
					mapRequest = pgApolloCommonUtil.filterAndPrepareMapBasedOnMapping(context, localMap, mapAPPRequestAttributeMapping, true, true);
					mapRequest.put(PGAPPRequestConstants.KEY_CLAIMEDBY+PGAPPRequestConstants.STR_FULL_NAME_DETAILS_KEY, (String)mapClaimedBy.get(DomainConstants.SELECT_NAME));
					mapRequest.put(PGAPPRequestConstants.KEY_OWNER+PGAPPRequestConstants.STR_FULL_NAME_DETAILS_KEY, (String)mapOwnerFullNameDetails.get(DomainConstants.SELECT_NAME));
					mapRequest.put(DomainConstants.ATTRIBUTE_ORIGINATOR+PGAPPRequestConstants.STR_FULL_NAME_DETAILS_KEY, (String)mapOriginatorFullNameDetails.get(DomainConstants.SELECT_NAME));
					mapRequest.put(PGAPPRequestConstants.KEY_APPROVER_LIST, sRequestApproverGroupList);
					mapRequest.put(PGAPPRequestConstants.KEY_BACKGROUNDPROCESS, sRequestBackgroundProcessNameList);
					mapRequest.put(PGAPPRequestConstants.KEY_BACKGROUNDPROCESS_PHYSICALID, sRequestBackgroundProcessPhysicalIdList);

					sRequestAffectedItem = (String)localMap.get(PGAPPRequestConstants.SELECT_ATTRIBUTE_PG_AFFECTEDITEM);
					
					sRequestImplementedItem = (String)localMap.get(PGAPPRequestConstants.SELECT_ATTRIBUTE_PG_IMPLEMENTEDITEM);

					if(UIUtil.isNotNullAndNotEmpty(sRequestAffectedItem))
					{
						mapAffectedItem = (Map)mapAllAffectedItemDetails.get(sRequestAffectedItem);
						
						if(null != mapAffectedItem && !mapAffectedItem.isEmpty() && mapAffectedItem.containsKey(DomainConstants.SELECT_PHYSICAL_ID))
						{
							sAffectedItemPhysicalId = (String)mapAffectedItem.get(DomainConstants.SELECT_PHYSICAL_ID);

							slAffectedItemList = StringUtil.split(sRequestAffectedItem, pgApolloConstants.CONSTANT_STRING_PIPE);
							
							sAffectedItemName = DomainConstants.EMPTY_STRING;
							
							sAffectedItemRevision = DomainConstants.EMPTY_STRING;

							sAffectedItemType = DomainConstants.EMPTY_STRING;


							if(null != slAffectedItemList && slAffectedItemList.size() > 2)
							{
								sAffectedItemType = (String)slAffectedItemList.get(0);

								sAffectedItemName = (String)slAffectedItemList.get(1);

								sAffectedItemRevision = (String)slAffectedItemList.get(2);
							}
							
							if(UIUtil.isNotNullAndNotEmpty(sAffectedItemName))
							{
								mapRequest.put(PGAPPRequestConstants.KEY_AFFECTED_ITEM_PHYSICAL_ID, sAffectedItemPhysicalId);
								mapRequest.put(PGAPPRequestConstants.KEY_AFFECTED_ITEM, sAffectedItemName);
								mapRequest.put(PGAPPRequestConstants.KEY_AFFECTED_ITEM_REVISION, sAffectedItemRevision);
								mapRequest.put(PGAPPRequestConstants.KEY_AFFECTED_ITEM_TYPE, sAffectedItemType);

							}
							
							sImplementedItemName = DomainConstants.EMPTY_STRING;
							sImplementedItemType = DomainConstants.EMPTY_STRING;
							sImplementedItemRevision = DomainConstants.EMPTY_STRING;
							sImplementedItemPhysicalId = DomainConstants.EMPTY_STRING;
							
							if(UIUtil.isNotNullAndNotEmpty(sRequestImplementedItem))
							{
								if(null != slRequestImplementedItemList && !slRequestImplementedItemList.isEmpty())
								{
									sImplementedItemPhysicalId = slRequestImplementedItemList.get(0);
									mapRequest.put(PGAPPRequestConstants.KEY_IMPLEMENTED_ITEM_PHYSICAL_ID, sImplementedItemPhysicalId);
									sImplementedItemState = slRequestImplementedItemStateList.get(0);
									if(!pgApolloConstants.STR_DENIED.equalsIgnoreCase(sImplementedItemState))
									{
										sImplementedItemState = EnoviaResourceBundle.getStateI18NString(context,DomainConstants.POLICY_EC_PART ,sImplementedItemState, sLanguage);
									}
									mapRequest.put(PGAPPRequestConstants.KEY_IMPLEMENTED_ITEM_STATE, sImplementedItemState);
								}								
								
								slImplementedItemList = StringUtil.split(sRequestImplementedItem, pgApolloConstants.CONSTANT_STRING_PIPE);
								
								if(null != slImplementedItemList && slImplementedItemList.size() > 2)
								{
									sImplementedItemType = (String)slImplementedItemList.get(0);

									sImplementedItemName = (String)slImplementedItemList.get(1);

									sImplementedItemRevision = (String)slImplementedItemList.get(2);
									
									if(UIUtil.isNotNullAndNotEmpty(sImplementedItemName))
									{
										mapRequest.put(PGAPPRequestConstants.KEY_IMPLEMENTED_ITEM, sImplementedItemName);
										if(!sImplementedItemName.equals(sAffectedItemName))
										{
											mapRequest.put(PGAPPRequestConstants.KEY_IMPLEMENTED_ITEM_DISPLAY_NAME, sImplementedItemName+PGAPPRequestConstants.KEY_IMPLEMENTED_ITEM_VARIANT);
										}
										else
										{
											mapRequest.put(PGAPPRequestConstants.KEY_IMPLEMENTED_ITEM_DISPLAY_NAME, sImplementedItemName+PGAPPRequestConstants.KEY_IMPLEMENTED_ITEM_DEFAULT);
										}
										mapRequest.put(PGAPPRequestConstants.KEY_IMPLEMENTED_ITEM_REVISION, sImplementedItemRevision);
										mapRequest.put(PGAPPRequestConstants.KEY_IMPLEMENTED_ITEM_TYPE, sImplementedItemType);
									}
								}
								
							}
							
						}					

					}				
				
					mapAllRequestInfoDetails.put(sRequestPhysicalId, mapRequest);				
				}				
				
				MapList mlRequestInfoList;
				Map mapRequestInfo;
				String sTypeOfChange;
				String sTypeOfChangeLabel;
				Map mapRequestDataInfo;
				String sRequestDataId;
				String sRequestDataPhysicalId;
				String sRequestDescription;
				String sLocalDate;
				

				for(Object objectMap : mlRequestDataList)
				{
					localMap = (Map)objectMap;
					
					mapRequestDataInfo = new HashMap();
					
					sRequestDataId = (String)localMap.get(DomainConstants.SELECT_NAME);
					
					sRequestDescription = (String)localMap.get(DomainConstants.SELECT_DESCRIPTION);					

					sRequestDataPhysicalId = (String)localMap.get(DomainConstants.SELECT_PHYSICAL_ID);

					slRequestIdList = pgApolloCommonUtil.getStringListMultiValue(localMap.get(sRequestSelectable));
					
					sRequestOwner = (String)localMap.get(DomainConstants.SELECT_OWNER);
					
					mapOwnerFullNameDetails = getPersonDetailsMap(context, sRequestOwner);
					
					sRequestOriginator = (String)localMap.get("attribute["+DomainConstants.ATTRIBUTE_ORIGINATOR+"]");
					
					mapOriginatorFullNameDetails = getPersonDetailsMap(context, sRequestOriginator);
					
					mlRequestInfoList = new MapList();
					
					for(String sLocalId : slRequestIdList)
					{
						mapRequestInfo = (Map)mapAllRequestInfoDetails.get(sLocalId);
						
						if(null != mapRequestInfo && !mapRequestInfo.isEmpty())
						{
							mlRequestInfoList.add(mapRequestInfo);
						}
						
					}
					
					sTypeOfChange = (String)localMap.get(PGAPPRequestConstants.SELECT_ATTRIBUTE_PG_APP_REQUESTCHANGETYPE);		
					
					sTypeOfChangeLabel = (String)mapAPPRequestTypeOfChangeMapping.getOrDefault(sTypeOfChange, sTypeOfChange);	
										
					sDueDate =  (String)localMap.get(PGAPPRequestConstants.SELECT_ATTRIBUTE_PG_LPD_DUE_DATE);
					
					sDueDateFormatted = parseDateForDashboard(sDueDate);
					
					sCreatedOn =  (String)localMap.get(PGAPPRequestConstants.SELECT_ATTRIBUTE_CREATED_ON);
					
					sCreatedOnFormatted = parseDateForDashboard(sCreatedOn);
					
					localMap.put(PGAPPRequestConstants.SELECT_ATTRIBUTE_PG_LPD_DUE_DATE, sDueDateFormatted);
					localMap.put(PGAPPRequestConstants.SELECT_ATTRIBUTE_CREATED_ON, sCreatedOnFormatted);

					mapRequestDataInfo = pgApolloCommonUtil.filterAndPrepareMapBasedOnMapping(context, localMap, mapAPPRequestDataAttributeMapping, true, true);
					
					mapRequestDataInfo = getRequestDataChangeDetails(sTypeOfChange, localMap, mapRequestDataInfo);				
					
					mapRequestDataInfo.put(PGAPPRequestConstants.KEY_REQUEST_SET_ID, sRequestDataId);
					mapRequestDataInfo.put(PGAPPRequestConstants.KEY_REQUEST_SET_PHYSICAL_ID, sRequestDataPhysicalId);
					mlRequestInfoList.sort(PGAPPRequestConstants.KEY_REQUEST_ID, pgApolloConstants.STR_ASCENDING, pgApolloConstants.STR_STRING); // Sorting MapList
					mapRequestDataInfo.put(PGAPPRequestConstants.KEY_REQUEST_LINE_ITEMS, mlRequestInfoList);
					mapRequestDataInfo.put(PGAPPRequestConstants.KEY_OWNER+PGAPPRequestConstants.STR_FULL_NAME_DETAILS_KEY, (String)mapOwnerFullNameDetails.get(DomainConstants.SELECT_NAME));
					mapRequestDataInfo.put(DomainConstants.ATTRIBUTE_ORIGINATOR+PGAPPRequestConstants.STR_FULL_NAME_DETAILS_KEY, (String)mapOriginatorFullNameDetails.get(DomainConstants.SELECT_NAME));
					mapRequestDataInfo.put(PGAPPRequestConstants.KEY_TYPE_OF_CHANGE_LABEL, sTypeOfChangeLabel);

					mlOutputList.add(mapRequestDataInfo);
				}			
				
			}	
			
		}
		
		mlOutputList.sort(PGAPPRequestConstants.KEY_REQUEST_SET_ID, pgApolloConstants.STR_ASCENDING, pgApolloConstants.STR_STRING); // Sorting MapList
		
		return mlOutputList;
	}

	/**
	 * Method to get Person Details Map
	 * @param context
	 * @param sUserName
	 * @return
	 * @throws FrameworkException
	 */
	public static Map getPersonDetailsMap(Context context, String sUserName) throws FrameworkException 
	{
		Map mapUserDetails;
		String sUserFullName;
		sUserFullName = DomainConstants.EMPTY_STRING;
				
		if(UIUtil.isNotNullAndNotEmpty(sUserName))
		{
			sUserFullName = PersonUtil.getFullName(context, sUserName);
		}
		
		mapUserDetails = new HashMap();
		mapUserDetails.put(DomainConstants.SELECT_ID, sUserName);
		mapUserDetails.put(DomainConstants.SELECT_NAME, sUserFullName);
		
		return mapUserDetails;
	}

	/**
	 * Method to get configured selectable list based on attribute mapping
	 * @param context
	 * @param sKey
	 * @return
	 * @throws Exception
	 */
	public static StringList getConfiguredSelectableList(Context context, String sKeyName) throws Exception 
	{
		StringList slAttributeSelectableList = new StringList();
		
		String sAttibuteMapping = pgApolloCommonUtil.getPageProperty(context, pgApolloConstants.STR_APOLLO_CONFIG_PAGE_FILENAME, sKeyName);
		StringList slAttributeMapping = new StringList();
		if(UIUtil.isNotNullAndNotEmpty(sAttibuteMapping))
		{
			slAttributeMapping	= StringUtil.split(sAttibuteMapping, pgApolloConstants.CONSTANT_STRING_PIPE);
		}
		
		StringList slMappingList;
		
		for(String sMapping : slAttributeMapping) 
		{
			slMappingList =  StringUtil.split(sMapping, pgApolloConstants.CONSTANT_STRING_COLON);
			if(null != slMappingList && !slMappingList.isEmpty() && slMappingList.size() > 1)
			{
				slAttributeSelectableList.add(slMappingList.get(1));
			}
		}
		
		return slAttributeSelectableList;
	}
	
	
	/**
	 * Method to get Request Data Change Details
	 * @param sTypeOfChangeAttributeValue
	 * @param sTypeOfChange
	 * @param mapRequestData
	 * @param mapRequestDataInfo 
	 * @return
	 */
	public static Map getRequestDataChangeDetails(String sTypeOfChange, Map mapRequestData, Map mapRequestDataInfo) 
	{
		Map mapRequestedChanges = new HashMap();

		if(PGAPPRequestConstants.RANGE_PGAPPREQUESTCHANGETYPE_SUBSTITUTE_ADDITION.equalsIgnoreCase(sTypeOfChange))
		{
			StringList slSubstituteList = pgApolloCommonUtil.getStringListMultiValue(mapRequestData.get(PGAPPRequestConstants.SELECT_ATTRIBUTE_PG_APP_REQUEST_SUBSTITUTES));

			MapList mlSubstituteDetails = formatSubstituteAttributeValue(slSubstituteList);		
			
			mapRequestedChanges.put(PGAPPRequestConstants.RANGE_PGAPPREQUESTCHANGETYPE_SUBSTITUTE_ADDITION, mlSubstituteDetails);	
					
		}
		else if(PGAPPRequestConstants.RANGE_PGAPPREQUESTCHANGETYPE_PLANTS_ADDITION.equalsIgnoreCase(sTypeOfChange))
		{
			
			StringList slPlantList = pgApolloCommonUtil.getStringListMultiValue(mapRequestData.get(PGAPPRequestConstants.SELECT_ATTRIBUTE_PG_APPREQUESTPLANTS));

			MapList mlPlantDetails = parsePlantsAttributeValue(slPlantList);		
			
			mapRequestedChanges.put(PGAPPRequestConstants.RANGE_PGAPPREQUESTCHANGETYPE_PLANTS_ADDITION, mlPlantDetails);	

		}
		else if(PGAPPRequestConstants.RANGE_PGAPPREQUESTCHANGETYPE_MFG_STATUS_CHANGE.equalsIgnoreCase(sTypeOfChange))
		{
			String sMfgStatus = (String)mapRequestData.get(pgApolloConstants.SELECT_ATTRIBUTE_PG_LIFECYCLESTATUS);
			
			Map mapAttribute = new HashMap();
			mapAttribute.put(PGAPPRequestConstants.KEY_MANUFACTURINGSTATUS, sMfgStatus);
			
			mapRequestedChanges.put(PGAPPRequestConstants.RANGE_PGAPPREQUESTCHANGETYPE_MFG_STATUS_CHANGE, mapAttribute);	

		}
		else if(PGAPPRequestConstants.RANGE_PGAPPREQUESTCHANGETYPE_EXPIRATION_DATE_CHANGE.equalsIgnoreCase(sTypeOfChange))
		{			
			String sExpirationDate = (String)mapRequestData.get(PGAPPRequestConstants.SELECT_ATTRIBUTE_PG_EXPIRATIONDATE);

			sExpirationDate = parseDateForDashboard(sExpirationDate);

			Map mapAttribute = new HashMap();
			mapAttribute.put(PGAPPRequestConstants.KEY_EXPIRATIONDATE, sExpirationDate);

			mapRequestedChanges.put(PGAPPRequestConstants.RANGE_PGAPPREQUESTCHANGETYPE_EXPIRATION_DATE_CHANGE, mapAttribute);	

		}
		else if(PGAPPRequestConstants.RANGE_PGAPPREQUESTCHANGETYPE_ACCELERATED_RELEASE_ADDITION.equalsIgnoreCase(sTypeOfChange))
		{	
			String sComments = (String)mapRequestData.get(PGAPPRequestConstants.SELECT_ATTRIBUTE_PGAPPREQUESTCOMMENTS);
					
			Map mapAttribute = new HashMap();
			mapAttribute.put(PGAPPRequestConstants.KEY_APPREQUEST_COMMENTS, sComments);
			
			mapRequestedChanges.put(PGAPPRequestConstants.RANGE_PGAPPREQUESTCHANGETYPE_ACCELERATED_RELEASE_ADDITION, mapAttribute);	
			
		}
		else if(PGAPPRequestConstants.RANGE_PGAPPREQUESTCHANGETYPE_OBSOLESENCE.equalsIgnoreCase(sTypeOfChange))
		{			
			String sComments = (String)mapRequestData.get(PGAPPRequestConstants.SELECT_ATTRIBUTE_PGAPPREQUESTCOMMENTS);
			
			Map mapAttribute = new HashMap();
			mapAttribute.put(PGAPPRequestConstants.KEY_APPREQUEST_COMMENTS, sComments);
			
			mapRequestedChanges.put(PGAPPRequestConstants.RANGE_PGAPPREQUESTCHANGETYPE_OBSOLESENCE, mapAttribute);		
	
		}	

		mapRequestDataInfo.put(PGAPPRequestConstants.KEY_REQUEST_CHANGE_DETAILS, mapRequestedChanges);	
		
		return mapRequestDataInfo;
	}

	/**
	 * Method to parse Plants Attribute Value
	 * @param slPlantList
	 * @return
	 */
	public static MapList parsePlantsAttributeValue(StringList slPlantList) 
	{
		
		MapList mlPlantDetails = new MapList();
		
		Map mapPlant;
		String sPlantName;
		String sAuthorizedToUse;
		String sAuthorizedToProduce;
		String sActivated;			
		
		if(null != slPlantList && !slPlantList.isEmpty())
		{
			StringList slPlantDetailsList;
			
			for(String sPlantDetails : slPlantList)
			{
				slPlantDetailsList = StringUtil.split(sPlantDetails, pgApolloConstants.CONSTANT_STRING_PIPE);
				
				if(!slPlantDetailsList.isEmpty() && slPlantDetailsList.size() > 3)
				{
					sPlantName = slPlantDetailsList.get(0);
					sAuthorizedToUse = slPlantDetailsList.get(1);
					sAuthorizedToProduce = slPlantDetailsList.get(2);
					sActivated = slPlantDetailsList.get(3);

					mapPlant = new HashMap();
					mapPlant.put(DomainConstants.SELECT_NAME, sPlantName);
					mapPlant.put(PGAPPRequestConstants.KEY_AUTHORIZEDTOUSE, sAuthorizedToUse);
					mapPlant.put(PGAPPRequestConstants.KEY_AUTHORIZEDTOPRODUCE, sAuthorizedToProduce);
					mapPlant.put(PGAPPRequestConstants.KEY_ACTIVATED, sActivated);

					mlPlantDetails.add(mapPlant);
				}
			}
		}
		
		return mlPlantDetails;
	}

	
	/**
	 * Method to parse Substitute attribute value for LPD request
	 * @param slSubstituteList
	 */
	public static MapList formatSubstituteAttributeValue(StringList slSubstituteList) 
	{		
		MapList mlSubstituteDetails = new MapList();
		
		Map mapSubstitute;
		String sGroupName;
		String sLayerName;
		String sObjectName;		
		String sValidStartDate;
		String sValidEndDate;
		String sComments;
		
		if(null != slSubstituteList && !slSubstituteList.isEmpty())
		{
			StringList slSubstituteDetails;
			
			for(String sSubstituteDetails : slSubstituteList)
			{
				slSubstituteDetails = StringUtil.split(sSubstituteDetails, pgApolloConstants.CONSTANT_STRING_PIPE);
				
				if(!slSubstituteDetails.isEmpty() && slSubstituteDetails.size() > 2)
				{
					sGroupName = slSubstituteDetails.get(0);
					sLayerName = slSubstituteDetails.get(1);
					sObjectName = slSubstituteDetails.get(2);
					
					sValidStartDate = DomainConstants.EMPTY_STRING;
					sValidEndDate = DomainConstants.EMPTY_STRING;
					sComments = DomainConstants.EMPTY_STRING;

					
					if(slSubstituteDetails.size() > 4)
					{
						sValidStartDate = slSubstituteDetails.get(3);
						if(UIUtil.isNullOrEmpty(sValidStartDate))
						{
							sValidStartDate = DomainConstants.EMPTY_STRING;
						}
						sValidEndDate = slSubstituteDetails.get(4);
						if(UIUtil.isNullOrEmpty(sValidEndDate))
						{
							sValidEndDate = DomainConstants.EMPTY_STRING;
						}
						sComments = slSubstituteDetails.get(5);
						if(UIUtil.isNullOrEmpty(sComments))
						{
							sComments = DomainConstants.EMPTY_STRING;
						}
					}

					mapSubstitute = new HashMap();
					mapSubstitute.put(pgApolloConstants.STR_GROUPNAME, sGroupName);
					mapSubstitute.put(pgApolloConstants.STR_LAYERNAME, sLayerName);
					mapSubstitute.put(DomainConstants.SELECT_NAME, sObjectName);
					mapSubstitute.put(PGAPPRequestConstants.KEY_VALID_START_DATE, sValidStartDate);
					mapSubstitute.put(PGAPPRequestConstants.KEY_VALID_UNTIL_DATE, sValidEndDate);
					mapSubstitute.put(PGAPPRequestConstants.KEY_COMMENTS, sComments);
					

					mlSubstituteDetails.add(mapSubstitute);
				}
			}
		}
		
		return mlSubstituteDetails;
	}

	/**
	 * Method to get EBOM Details
	 * @param context
	 * @param mapInput
	 * @return
	 * @throws FrameworkException 
	 */
	public static MapList getEBOMDetails(Context context, Map mapInput) throws FrameworkException
	{
		MapList mlReturn = new MapList();

		StringList slInputIdList = (StringList)mapInput.get(PGAPPRequestConstants.KEY_DATA);

		if(null != slInputIdList && !slInputIdList.isEmpty())
		{
			HashMap<String, StringList> map = new HashMap();
			
			Set<String> setUniqueGroupLayers = new HashSet();

			StringList slGroupLayers = new StringList();

			for(String sObjectId : slInputIdList)
			{
				slGroupLayers = getEBOMDetails(context, sObjectId);				
				setUniqueGroupLayers.addAll(slGroupLayers);
			}
			
			Map mapGroupLayer;
			String sGroupName;
			String sLayerName;
			
			StringList slGroupLayerList;
			
			for(String sGroupLayer : setUniqueGroupLayers)
			{
				slGroupLayerList = StringUtil.split(sGroupLayer, pgApolloConstants.CONSTANT_STRING_PIPE);
				
				if(null != slGroupLayerList && !slGroupLayerList.isEmpty())
				{
					sGroupName = slGroupLayerList.get(0);
					sLayerName = slGroupLayerList.get(1);

					mapGroupLayer = new HashMap();					
					mapGroupLayer.put(pgApolloConstants.STR_GROUPNAME, sGroupName);
					mapGroupLayer.put(pgApolloConstants.STR_LAYERNAME, sLayerName);
					
					mlReturn.add(mapGroupLayer);
				}
				
				
			}
		}

		return mlReturn;
	}

	/**
	 * Method to get EBOM Details
	 * @param context
	 * @param sObjectId
	 * @return
	 * @throws FrameworkException
	 */
	public static StringList getEBOMDetails(Context context, String sObjectId) throws FrameworkException
	{
		StringList slGroupLayers = new StringList();
		
		if(UIUtil.isNotNullAndNotEmpty(sObjectId) && !pgApolloConstants.STR_DENIED.equalsIgnoreCase(sObjectId) && !pgApolloConstants.STR_NO_ACCESS.equalsIgnoreCase(sObjectId))
		{
			StringList objectSelects = new StringList();
			objectSelects.add(DomainConstants.SELECT_ID);

			StringList relSelects = new StringList();
			relSelects.add(pgApolloConstants.SELECT_ATTRIBUTE_PLYGROUPNAME);
			relSelects.add(pgApolloConstants.SELECT_ATTRIBUTE_PLYNAME);

			
			DomainObject domObject = DomainObject.newInstance(context, sObjectId);				

			MapList mlRelatedMaterial = domObject.getRelatedObjects(context,//Context
															DomainConstants.RELATIONSHIP_EBOM,//Relationship Pattern
															DomainConstants.QUERY_WILDCARD, //Type Pattern
															objectSelects,//Object Select
															relSelects,//rel Select
															false,//get To
															true,//get From
															(short)1,//recurse level
															null,//where Clause
															null,//Rel where clause
															0);	//Object Limit
			
			if(null != mlRelatedMaterial && !mlRelatedMaterial.isEmpty())
			{
				Map mapObject;
				String sGroupName;
				String sLayerName;
				StringBuilder sbGroupLayer;
				
				for(Object objMap : mlRelatedMaterial)
				{
					mapObject = (Map)objMap;
					
					sGroupName = (String)mapObject.get(pgApolloConstants.SELECT_ATTRIBUTE_PLYGROUPNAME);
					sLayerName = (String)mapObject.get(pgApolloConstants.SELECT_ATTRIBUTE_PLYNAME);
					
					if(UIUtil.isNotNullAndNotEmpty(sGroupName) && UIUtil.isNotNullAndNotEmpty(sLayerName))
					{
						sbGroupLayer = new StringBuilder();
						sbGroupLayer.append(sGroupName).append(pgApolloConstants.CONSTANT_STRING_PIPE).append(sLayerName);
						slGroupLayers.add(sbGroupLayer.toString());				
					}				
				}
			}
			
		}
		
		return slGroupLayers;
	}

	/**
	 * Method to get Request Details
	 * @param context
	 * @param stringList
	 * @return
	 * @throws Exception 
	 */
	public static MapList getRequestDetails(Context context, StringList slRequestIdList) throws Exception 
	{
		MapList mlOutput = new MapList();
		
		StringList slAllRequestDataList = new StringList();

		String sRequestDataSelectable = new StringBuilder("to[").append(PGAPPRequestConstants.RELATIONSHIP_PGAPPREQUESTCHANGEDATA).append("].from.physicalid").toString();

		StringList slRequestIdSelects = new StringList();
		slRequestIdSelects.add(DomainConstants.SELECT_PHYSICAL_ID);
		slRequestIdSelects.add(sRequestDataSelectable);	
		

		if(null != slRequestIdList && !slRequestIdList.isEmpty())
		{
			MapList mlRequestList = DomainObject.getInfo(context, slRequestIdList.toArray(new String[slRequestIdList.size()]), slRequestIdSelects, slRequestIdSelects);

			Map mapRequest;
			StringList slRequestDataList;
			
			if(null != mlRequestList && !mlRequestList.isEmpty())
			{
				for(Object objMap : mlRequestList)
				{
					mapRequest = (Map)objMap;
					slRequestDataList = pgApolloCommonUtil.getStringListMultiValue(mapRequest.get(sRequestDataSelectable));
					slAllRequestDataList.addAll(slRequestDataList);
				}
			}
		}
		
	
		if(!slAllRequestDataList.isEmpty())
		{
			mlOutput = getRequestDataDetails(context, slAllRequestDataList);

		}	
		
		return mlOutput;
	}

	
	/**
	 * Method to implement APP Requests
	 * @param context
	 * @param mapInput
	 * @return
	 * @throws Exception 
	 */
	public static Map implementAPPRequest(Context context, Map mapAllInput) throws Exception 
	{
		Map mapReturn = new HashMap();
		MapList mlInputList = new MapList();

		boolean isTransactionStarted = false;
		StringList slErrorMessageList = new StringList();
		String sErrorMessage = DomainConstants.EMPTY_STRING;
		Map mapRequestDataInfo;
		
		StringList slRequestDataSelects = new StringList();
		slRequestDataSelects.add(PGAPPRequestConstants.SELECT_ATTRIBUTE_PG_APP_REQUESTCHANGETYPE);

		try {

			mlInputList = (MapList)mapAllInput.get(PGAPPRequestConstants.KEY_DATA);
			Map mapInput;
			String sAPPRequestDataName;
			String sAPPRequestDataPhysicalId;
			Map mapAPPRequestDataAttributes;
			Map mapAPPRequestedChangeDetails;
			String sTypeOfChange;
			DomainObject domAPPRequestDataObject;
			Map mapObject;
			StringBuilder sbErrorMessage;
			
			String sAPPRequestName;
			String sAPPRequestPhysicalId;

			Map mapAPPRequestDataAttributeMapping = pgApolloCommonUtil.prepareAttributeMappingBasedOnConfiguration(context, pgApolloConstants.STR_APOLLO_CONFIG_PAGE_FILENAME, "pgApolloConfiguration.APPRequestManagement.APPRequestData.AttributeMapping", false);
			Map mapAPPRequestAttributeMapping = pgApolloCommonUtil.prepareAttributeMappingBasedOnConfiguration(context, pgApolloConstants.STR_APOLLO_CONFIG_PAGE_FILENAME, "pgApolloConfiguration.APPRequestManagement.APPRequest.AttributeMapping", false);

			if(null != mlInputList && !mlInputList.isEmpty())
			{
				for(Object objMap : mlInputList)
				{
					mapInput  = (Map)objMap;

					sAPPRequestDataPhysicalId = (String)mapInput.get(PGAPPRequestConstants.KEY_REQUEST_SET_PHYSICAL_ID);					
					
					if(UIUtil.isNullOrEmpty(sAPPRequestDataPhysicalId))
					{
						sAPPRequestDataName = (String)mapInput.get(PGAPPRequestConstants.KEY_REQUEST_SET_ID);
						if(UIUtil.isNotNullAndNotEmpty(sAPPRequestDataName))
						{
							mapObject = pgApolloCommonUtil.getLatestRevisionMap(context, PGAPPRequestConstants.TYPE_PGAPPREQUESTDATA, sAPPRequestDataName, pgApolloConstants.CONSTANT_STRING_HYPHEN);	
							sAPPRequestDataPhysicalId = (String)mapObject.get(DomainConstants.SELECT_PHYSICAL_ID);		
						}
						else
						{
							//Throw error - minimal input not found 
						}

					}					

					if(UIUtil.isNotNullAndNotEmpty(sAPPRequestDataPhysicalId))
					{			
						sAPPRequestPhysicalId = (String)mapInput.get(PGAPPRequestConstants.KEY_REQUEST_PHYSICAL_ID);

						
						if(UIUtil.isNullOrEmpty(sAPPRequestPhysicalId))
						{
							sAPPRequestDataName = (String)mapInput.get(PGAPPRequestConstants.KEY_REQUEST_SET_ID);
							if(UIUtil.isNotNullAndNotEmpty(sAPPRequestDataName))
							{
								mapObject = pgApolloCommonUtil.getLatestRevisionMap(context, PGAPPRequestConstants.TYPE_PGAPPREQUESTDATA, sAPPRequestDataName, pgApolloConstants.CONSTANT_STRING_HYPHEN);	
								sAPPRequestDataPhysicalId = (String)mapObject.get(DomainConstants.SELECT_PHYSICAL_ID);		
							}
							else
							{
								//Throw error - minimal input not found 
							}

						}
					}		
					
					ContextUtil.startTransaction(context,true);
					isTransactionStarted = true;					

					
					

					ContextUtil.commitTransaction(context);
					isTransactionStarted = false;
				}

			}
		}
		catch (Exception e)
		{
			
			logger.error(e.getMessage(), e);
			if(isTransactionStarted)
			{
				ContextUtil.abortTransaction(context);
				isTransactionStarted = false;
			}		
			throw e;
		}

		mapReturn.put(PGAPPRequestConstants.KEY_DATA, mlInputList);
		if(null != slErrorMessageList && !slErrorMessageList.isEmpty())
		{
			sErrorMessage = StringUtil.join(slErrorMessageList, pgApolloConstants.CONSTANT_STRING_COMMA);
			mapReturn.put(pgApolloConstants.STR_ERROR, sErrorMessage);
		}

		return mapReturn;
	}

	
	/**
	 * Method to get Latest Affected Item Details
	 * @param context
	 * @param mapInput
	 * @return
	 * @throws Exception 
	 */
	public static MapList getLatestAffectedItems(Context context, Map mapInput) throws Exception
	{
		MapList mlReturn = new MapList();

		StringList slInputGCASList = (StringList)mapInput.get(PGAPPRequestConstants.KEY_DATA);

		if(null != slInputGCASList && !slInputGCASList.isEmpty())
		{
			Map mapAffectedItem;
			Map mapInputAffectedItem;
			DomainObject domainObject;
			String sAffectedItemPhysicalId;
			boolean hasReadShowAccess = false;
			boolean hasModifyAccess = false;
			boolean hasReviseAccess = false;

			for(String sInputGCAS : slInputGCASList)
			{
				mapInputAffectedItem = new HashMap();
				mapInputAffectedItem.put(PGAPPRequestConstants.KEY_AFFECTED_ITEM, sInputGCAS);
				mapAffectedItem = getAffectedItemMap(context, mapInputAffectedItem);
				
				if(null != mapAffectedItem && !mapAffectedItem.isEmpty())
				{
					sAffectedItemPhysicalId = (String)mapAffectedItem.get(PGAPPRequestConstants.KEY_AFFECTED_ITEM_PHYSICAL_ID);	
					
					hasReadShowAccess = false;
					hasModifyAccess = false;
					hasReviseAccess = false;
					
					if(UIUtil.isNotNullAndNotEmpty(sAffectedItemPhysicalId))
					{
						domainObject = DomainObject.newInstance(context,sAffectedItemPhysicalId);
						hasReadShowAccess = FrameworkUtil.hasAccess(context,domainObject,"read,show");
						hasModifyAccess = FrameworkUtil.hasAccess(context,domainObject,"modify");
						hasReviseAccess = FrameworkUtil.hasAccess(context,domainObject,"revise");
					}
					
					mapAffectedItem.put("readShow", Boolean.toString(hasReadShowAccess));
					mapAffectedItem.put("modify", Boolean.toString(hasModifyAccess));
					mapAffectedItem.put("revise", Boolean.toString(hasReviseAccess));
					
					mlReturn.add(mapAffectedItem);
				}
			

			}
			
		}

		return mlReturn;
	}

	
	/**
	 * Method to get Request Approver Group
	 * @param context
	 * @return
	 * @throws Exception 
	 */
	public static MapList getRequestApproverList(Context context) throws Exception 
	{
		MapList mlApproverList = new MapList();
		
		MapList mlApproverObjectList = getAPPRequestApproverObjectList(context);
		StringList slConfiguredAPPRequestAprpoverApproverList =  new ChangeUtil().getStringListFromMapList(mlApproverObjectList, DomainConstants.SELECT_NAME);
		
		Map mapApproverListInfo = new HashMap();
		if(null != slConfiguredAPPRequestAprpoverApproverList && !slConfiguredAPPRequestAprpoverApproverList.isEmpty())
		{
			String sConfiguredAPPRequestAprpoverApproverList = StringUtil.join(slConfiguredAPPRequestAprpoverApproverList, pgApolloConstants.CONSTANT_STRING_COMMA);
			mapApproverListInfo.put(DomainConstants.SELECT_ID, sConfiguredAPPRequestAprpoverApproverList);
			mapApproverListInfo.put(DomainConstants.SELECT_NAME, sConfiguredAPPRequestAprpoverApproverList);
		}
		
		mlApproverList.add(mapApproverListInfo);
		
		return mlApproverList;
	}

	
	/**
	 * Method to claim APP Requests
	 * @param context
	 * @param mapInput
	 * @return
	 * @throws Exception 
	 */
	public static Map claimAPPRequests(Context context, Map mapAllInput) throws Exception 
	{

		Map mapReturn = new HashMap();
		
		MapList mlOutputList = new MapList();
		
		StringList slAllRequestPhysicalIdList = new StringList();

		String sErrorMessage = DomainConstants.EMPTY_STRING;
		
		boolean isTransactionStarted = false;

		MapList mlInputList = new MapList();		
		StringList slRequestIdList = new StringList();
		StringList slRequestPhysicalIdList = new StringList();
		Map mapInput;

		String sClaimedUser;
		String sImplementedItemPhysicalId;
		
		
		try {
			
			mlInputList = (MapList)mapAllInput.get(PGAPPRequestConstants.KEY_DATA);
			
			if(null != mlInputList && !mlInputList.isEmpty())
			{
				ContextUtil.startTransaction(context,true);
				isTransactionStarted = true;
				
				for(Object objMap : mlInputList)
				{	
					
					mapInput  = (Map)objMap;

					slRequestIdList = (StringList)mapInput.get(PGAPPRequestConstants.KEY_REQUEST_ID);
					
					sClaimedUser = (String)mapInput.get(PGAPPRequestConstants.KEY_CLAIMEDBY);

					slRequestPhysicalIdList = (StringList)mapInput.get(PGAPPRequestConstants.KEY_REQUEST_PHYSICAL_ID);					
			
					slAllRequestPhysicalIdList.addAll(slRequestPhysicalIdList);

					for(String sRequestPhysicalId : slRequestPhysicalIdList)
					{
						claimRequest(context, sRequestPhysicalId, sClaimedUser);
					}
					
				}

			}
			
			ContextUtil.commitTransaction(context);
			isTransactionStarted = false;
		}  
		catch (Exception e)
		{
			
			logger.error(e.getMessage(), e);
			if(isTransactionStarted)
			{
				ContextUtil.abortTransaction(context);
				isTransactionStarted = false;
			}
			sErrorMessage = e.getLocalizedMessage();
		}
		
		if(UIUtil.isNotNullAndNotEmpty(sErrorMessage))
		{
			mapReturn.put(pgApolloConstants.STR_ERROR, sErrorMessage);
			mapReturn.put(PGAPPRequestConstants.KEY_DATA, new MapList());
		}
		else
		{		
			if(!slAllRequestPhysicalIdList.isEmpty())
			{
				mlOutputList = getRequestDetails(context, slAllRequestPhysicalIdList);
			}
			mapReturn.put(PGAPPRequestConstants.KEY_DATA, mlOutputList);
		}
		
		return mapReturn;
	}
	
	
	/**
	 * Method to claim Request
	 * @param context
	 * @param sRequestPhysicalId
	 * @param sClaimedUser
	 * @throws FrameworkException 
	 */
	public static void claimRequest(Context context, String sRequestPhysicalId, String sClaimedUser) throws FrameworkException
	{
		if(UIUtil.isNotNullAndNotEmpty(sClaimedUser) && UIUtil.isNotNullAndNotEmpty(sRequestPhysicalId))
		{
			DomainObject domRequest = DomainObject.newInstance(context, sRequestPhysicalId);
			domRequest.setOwner(context, sClaimedUser);
			domRequest.setAttributeValue(context, PGAPPRequestConstants.ATTRIBUTE_PGCLAIMEDBY, sClaimedUser);
		}
		
	}


	/**
	 * Method to convert database date to Widget display date
	 * @param sDate
	 * @return
	 */
	public static String parseDateForDashboard(String sDatabaseDate) 
	{
		SimpleDateFormat sdFormatter = new SimpleDateFormat(eMatrixDateFormat.strEMatrixDateFormat, Locale.US);		
		SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
		Date date;
		String sDateView = DomainConstants.EMPTY_STRING;
		try {
			if(UIUtil.isNotNullAndNotEmpty(sDatabaseDate))
			{
				Date dDateObject = sdFormatter.parse(sDatabaseDate);
				sDateView = sdf.format(dDateObject);
			}
			
		} catch (Exception e) {
			logger.error(e.getMessage(), e);
		}

		return sDateView;
	}
	
	/**
	 * Method to copy APP Requests
	 * @param context
	 * @param mapInput
	 * @return
	 * @throws Exception 
	 */
	/*
	public static Map copyAPPRequests(Context context, Map mapAllInput) throws Exception 
	{
		Map mapReturn = new HashMap();
		MapList mlInputList = new MapList();

		boolean isTransactionStarted = false;
		StringList slErrorMessageList = new StringList();
		String sErrorMessage = DomainConstants.EMPTY_STRING;
		Map mapRequestDataInfo;
		
		StringList slRequestDataSelects = new StringList();
		slRequestDataSelects.add(pgApolloConstants.SELECT_ATTRIBUTE_PG_LPD_REQUESTCHANGETYPE);

		try {

			mlInputList = (MapList)mapAllInput.get(PGAPPRequestConstants.KEY_DATA);
			Map mapInput;
			String sAPPRequestDataName;
			String sAPPRequestDataPhysicalId;
			Map mapAPPRequestDataAttributes;
			Map mapAPPRequestedChangeDetails;
			String sTypeOfChange;
			DomainObject domAPPRequestDataObject;
			Map mapObject;
			StringBuilder sbErrorMessage;
			String sNewClonedRequestDataId;
			BusinessObject boNewRequestData;
			String sAPPRequestDataObjGeneratorName;
			String sAPPRequestAutoGeneratedName;

			Map mapAPPRequestDataAttributeMapping = pgApolloCommonUtil.prepareAttributeMappingBasedOnConfiguration(context, pgApolloConstants.STR_APOLLO_CONFIG_PAGE_FILENAME, "pgApolloConfiguration.APPRequestManagement.APPRequestData.AttributeMapping", false);
			Map mapAPPRequestAttributeMapping = pgApolloCommonUtil.prepareAttributeMappingBasedOnConfiguration(context, pgApolloConstants.STR_APOLLO_CONFIG_PAGE_FILENAME, "pgApolloConfiguration.APPRequestManagement.APPRequest.AttributeMapping", false);

			if(null != mlInputList && !mlInputList.isEmpty())
			{
				for(Object objMap : mlInputList)
				{
					mapInput  = (Map)objMap;

					sAPPRequestDataPhysicalId = (String)mapInput.get(PGAPPRequestConstants.KEY_PARENT_REQUEST_PHYSICAL_ID);

					if(mapInput.containsKey(pgApolloConstants.KEY_TYPE_OF_CHANGE))
					{
						sAPPRequestDataName = (String)mapInput.get(PGAPPRequestConstants.KEY_PARENT_REQUEST_ID);

						sbErrorMessage = new StringBuilder();
						sbErrorMessage.append(pgApolloConstants.ERROR_UPDATE_REQUEST_FAIL_TYPE_OF_CHANGE_PRESENT);
						sbErrorMessage.append(pgApolloConstants.CONSTANT_STRING_COLON);
						sbErrorMessage.append(sAPPRequestDataName);

						slErrorMessageList.add(sbErrorMessage.toString());
						break;
					}

					ContextUtil.startTransaction(context,true);
					isTransactionStarted = true;					

					if(UIUtil.isNullOrEmpty(sAPPRequestDataPhysicalId))
					{
						sAPPRequestDataName = (String)mapInput.get(PGAPPRequestConstants.KEY_PARENT_REQUEST_ID);
						if(UIUtil.isNotNullAndNotEmpty(sAPPRequestDataName))
						{
							mapObject = pgApolloCommonUtil.getLatestRevisionMap(context, pgApolloConstants.TYPE_PGAPPREQUESTDATA, sAPPRequestDataName, pgApolloConstants.CONSTANT_STRING_HYPHEN);	
							sAPPRequestDataPhysicalId = (String)mapObject.get(DomainConstants.SELECT_PHYSICAL_ID);		
						}
						else
						{
							//Throw error - minimal input not found 
						}

					}					

					if(UIUtil.isNotNullAndNotEmpty(sAPPRequestDataPhysicalId))
					{	
						boNewRequestData = new BusinessObject();

						domAPPRequestDataObject = DomainObject.newInstance(context, sAPPRequestDataPhysicalId);

						sAPPRequestDataObjGeneratorName = UICache.getObjectGenerator(context, "type_pgAPPRequestData", DomainConstants.EMPTY_STRING);
						
						sAPPRequestAutoGeneratedName = DomainObject.getAutoGeneratedName(context, sAPPRequestDataObjGeneratorName, DomainConstants.EMPTY_STRING);
												
						boNewRequestData = domAPPRequestDataObject.cloneObject(context, sAPPRequestAutoGeneratedName, pgApolloConstants.CONSTANT_STRING_HYPHEN, domAPPRequestDataObject.getVault(context), true);
										
						
					}

					

					ContextUtil.commitTransaction(context);
					isTransactionStarted = false;
				}

			}
		}
		catch (Exception e)
		{
			
			logger.error(e.getMessage(), e);
			if(isTransactionStarted)
			{
				ContextUtil.abortTransaction(context);
				isTransactionStarted = false;
			}		
			throw e;
		}

		mapReturn.put(PGAPPRequestConstants.KEY_DATA, mlInputList);
		if(null != slErrorMessageList && !slErrorMessageList.isEmpty())
		{
			sErrorMessage = StringUtil.join(slErrorMessageList, pgApolloConstants.CONSTANT_STRING_COMMA);
			mapReturn.put(pgApolloConstants.STR_ERROR, sErrorMessage);
		}


		return mapReturn;
		
	}
	*/
	
	
	/**
	 * Method to convert database date to Widget display date
	 * @param sDate
	 * @return
	 */
	public static String getTodaysDate() 
	{
		SimpleDateFormat sdf = new SimpleDateFormat(eMatrixDateFormat.getEMatrixDateFormat());
		Date date;
		String sTodaysDate = DomainConstants.EMPTY_STRING;
		try {
				Date dDateObject = new Date();
				sTodaysDate = sdf.format(dDateObject);			
			
		} catch (Exception e) {
			logger.error(e.getMessage(), e);
		}

		return sTodaysDate;
	}

	/**
	 * Method to promote demote requests
	 * @param context
	 * @param slRequestDataList
	 * @param demoteAction
	 * @param isChildRequest
	 * @return
	 * @throws Exception
	 */
	public static MapList promoteDemoteRequests(Context context, StringList slRequestDataList, boolean demoteAction, boolean isChildRequest) throws Exception 
	{
		MapList mlOutputList = new MapList();
		
		StringList slAllRequestIdList = new StringList();

		String sRequestIdSelectable = new StringBuilder("from[").append(PGAPPRequestConstants.RELATIONSHIP_PGAPPREQUESTCHANGEDATA).append("].to.physicalid").toString();

		StringList slRequestIdSelects = new StringList();
		slRequestIdSelects.add(DomainConstants.SELECT_PHYSICAL_ID);
		slRequestIdSelects.add(sRequestIdSelectable);	
		

		if(null != slRequestDataList && !slRequestDataList.isEmpty())
		{
			MapList mlRequestDataList = DomainObject.getInfo(context, slRequestDataList.toArray(new String[slRequestDataList.size()]), slRequestIdSelects, slRequestIdSelects);

			Map mapRequestData;
			StringList slRequestIdList;
			
			if(null != mlRequestDataList && !mlRequestDataList.isEmpty())
			{
				for(Object objMap : mlRequestDataList)
				{
					mapRequestData = (Map)objMap;
					slRequestIdList = pgApolloCommonUtil.getStringListMultiValue(mapRequestData.get(sRequestIdSelectable));
					slAllRequestIdList.addAll(slRequestIdList);
				}
			}
		}
		
		boolean isTransactionStarted = false;

		try 
		{			

			if(null != slAllRequestIdList && !slAllRequestIdList.isEmpty())
			{
				StringList slObjectSelects = new StringList();
				slObjectSelects.add(DomainConstants.SELECT_CURRENT);
				slObjectSelects.add(DomainConstants.SELECT_POLICY);
				slObjectSelects.add(DomainConstants.SELECT_ID);
				slObjectSelects.add(DomainConstants.SELECT_PHYSICAL_ID);

				MapList mlChildRequestList = DomainObject.getInfo(context, slAllRequestIdList.toArray(new String[slAllRequestIdList.size()]), slObjectSelects);

				Map mapRequest;
				String sRequestCurrent;
				String sRequestId;
				DomainObject domAPPRequestObject;

				MapList mlValidChildRequestList = new MapList();

				for(Object objMap : mlChildRequestList)
				{
					mapRequest = (Map)objMap;
					sRequestCurrent = (String)mapRequest.get(DomainConstants.SELECT_CURRENT);

					if(PGAPPRequestConstants.PGAPPREQUEST_STATE_CREATE.equals(sRequestCurrent) || PGAPPRequestConstants.PGAPPREQUEST_STATE_REVIEW.equals(sRequestCurrent) || (PGAPPRequestConstants.PGAPPREQUEST_STATE_READY_TO_IMPLEMENT.equals(sRequestCurrent) && demoteAction) )
					{
						mlValidChildRequestList.add(mapRequest);				
					}

				}


				if(!mlValidChildRequestList.isEmpty())	
				{
					ContextUtil.startTransaction(context,true);
					isTransactionStarted = true;	

					for(Object objMap : mlValidChildRequestList)
					{
						mapRequest = (Map)objMap;
						sRequestCurrent = (String)mapRequest.get(DomainConstants.SELECT_CURRENT);
						sRequestId = (String)mapRequest.get(DomainConstants.SELECT_ID);
						domAPPRequestObject = DomainObject.newInstance(context, sRequestId);

						if(!demoteAction && !(PGAPPRequestConstants.PGAPPREQUEST_STATE_READY_TO_IMPLEMENT.equals(sRequestCurrent)))
						{
							domAPPRequestObject.promote(context);
						}
						else if(demoteAction)
						{
							domAPPRequestObject.demote(context);
						}

					}

					ContextUtil.commitTransaction(context);
					isTransactionStarted = false;

				}		

			}	

		}
		catch (Exception e) 
		{					
			logger.error(e.getMessage(), e);
			if(isTransactionStarted)
			{
				ContextUtil.abortTransaction(context);
				isTransactionStarted = false;
			}	
			throw e;
		}
		
		mlOutputList = getRequestDataDetails(context, slRequestDataList);
		

		return mlOutputList;
	}

	/**
	 * Method to update Implemented Item
	 * @param context
	 * @param mapInput
	 * @return
	 */
	public static Map updateImplementedItemDummy(Context context, Map mapInput) 
	{
		Map mapReturn = new HashMap();
		
		String sErrorMessage = DomainConstants.EMPTY_STRING;
		
		boolean isTransactionStarted = false;

		MapList mlInputList = new MapList();;
		
		try {
			
			mlInputList = (MapList)mapInput.get(PGAPPRequestConstants.KEY_DATA);
			
			if(null != mlInputList && !mlInputList.isEmpty())
			{
				ContextUtil.startTransaction(context,true);
				isTransactionStarted = true;
				
				for(Object objMap : mlInputList)
				{
	
					
					
					
					
					
				}

			}
			
			ContextUtil.commitTransaction(context);
			isTransactionStarted = false;
		}  
		catch (Exception e)
		{
			
			logger.error(e.getMessage(), e);
			if(isTransactionStarted)
			{
				ContextUtil.abortTransaction(context);
				isTransactionStarted = false;
			}
			sErrorMessage = e.getLocalizedMessage();
		}
		
		if(UIUtil.isNotNullAndNotEmpty(sErrorMessage))
		{
			mapReturn.put(pgApolloConstants.STR_ERROR, sErrorMessage);
			mapReturn.put(PGAPPRequestConstants.KEY_DATA, new MapList());
		}
		else
		{		
			mapReturn.put(PGAPPRequestConstants.KEY_DATA, mlInputList);
		}
		
		return mapReturn;
	}
	
	
	/**
	 * Method to update Implemented Item
	 * @param context
	 * @param mapInput
	 * @return
	 * @throws Exception 
	 */
	public static Map updateImplementedItem(Context context, Map mapAllInput) throws Exception 
	{
		Map mapReturn = new HashMap();
		
		MapList mlOutputList = new MapList();

		String sErrorMessage = DomainConstants.EMPTY_STRING;
		
		boolean isTransactionStarted = false;

		MapList mlInputList = new MapList();	
		
		StringList slRequestIdList = new StringList();
		StringList slAllRequestPhysicalIdList = new StringList();
		StringList slRequestPhysicalIdList = new StringList();
		Map mapInput;

		String sImplementedItem;
		String sImplementedItemPhysicalId;
		
		try {
			
			mlInputList = (MapList)mapAllInput.get(PGAPPRequestConstants.KEY_DATA);
			
			if(null != mlInputList && !mlInputList.isEmpty())
			{
				ContextUtil.startTransaction(context,true);
				isTransactionStarted = true;
				
				for(Object objMap : mlInputList)
				{	
					
					mapInput  = (Map)objMap;

					slRequestIdList = (StringList)mapInput.get(PGAPPRequestConstants.KEY_REQUEST_ID);
					
					sImplementedItem = (String)mapInput.get(PGAPPRequestConstants.KEY_IMPLEMENTED_ITEM);

					slRequestPhysicalIdList = (StringList)mapInput.get(PGAPPRequestConstants.KEY_REQUEST_PHYSICAL_ID);	
					
					sImplementedItemPhysicalId = (String)mapInput.get(PGAPPRequestConstants.KEY_IMPLEMENTED_ITEM_PHYSICAL_ID);
					
					slAllRequestPhysicalIdList.addAll(slRequestPhysicalIdList);
					
					for(String sRequestPhysicalId : slRequestPhysicalIdList)
					{
						updateImplementedItemOnRequest(context, sRequestPhysicalId, sImplementedItemPhysicalId, sImplementedItem);
					}
					
				}

			}
			
			ContextUtil.commitTransaction(context);
			isTransactionStarted = false;
		}  
		catch (Exception e)
		{
			
			logger.error(e.getMessage(), e);
			if(isTransactionStarted)
			{
				ContextUtil.abortTransaction(context);
				isTransactionStarted = false;
			}
			sErrorMessage = e.getLocalizedMessage();
		}
		
		if(UIUtil.isNotNullAndNotEmpty(sErrorMessage))
		{
			mapReturn.put(pgApolloConstants.STR_ERROR, sErrorMessage);
			mapReturn.put(PGAPPRequestConstants.KEY_DATA, new MapList());
		}
		else
		{	
			if(!slAllRequestPhysicalIdList.isEmpty())
			{
				mlOutputList = getRequestDetails(context, slAllRequestPhysicalIdList);
			}
			mapReturn.put(PGAPPRequestConstants.KEY_DATA, mlOutputList);
		}
		
		return mapReturn;
	}


	/**
	 * Method to update implemented item on request
	 * @param context
	 * @param sRequestPhysicalId
	 * @param sImplementedItemPhysicalId
	 * @param sImplementedItem
	 * @throws MatrixException 
	 */
	public static void updateImplementedItemOnRequest(Context context, String sRequestPhysicalId, String sImplementedItemPhysicalId, String sImplementedItem) throws MatrixException
	{
		if(UIUtil.isNotNullAndNotEmpty(sRequestPhysicalId) && UIUtil.isNotNullAndNotEmpty(sImplementedItemPhysicalId))
		{

			StringList slExistingImplementedItem = new StringList();
			StringList slExistingAffectedItem = new StringList();

			StringList slToBeConnectedImplementedItem = new StringList();
			StringList slToBeDisconnectedImplementedItem = new StringList();

			DomainObject domNewImplementedItem = DomainObject.newInstance(context, sImplementedItemPhysicalId);

			StringList slObjectSelectable = new StringList();
			slObjectSelectable.add(DomainConstants.SELECT_TYPE);
			slObjectSelectable.add(DomainConstants.SELECT_NAME);
			slObjectSelectable.add(DomainConstants.SELECT_REVISION);
			slObjectSelectable.add(DomainConstants.SELECT_PHYSICAL_ID);

			Map mapNewImplementedInfo = domNewImplementedItem.getInfo(context, slObjectSelectable);


			String sObjectType = (String)mapNewImplementedInfo.get(DomainConstants.SELECT_TYPE);
			String sObjectName = (String)mapNewImplementedInfo.get(DomainConstants.SELECT_NAME);
			String sObjectRevision = (String)mapNewImplementedInfo.get(DomainConstants.SELECT_REVISION);

			sObjectType = EnoviaResourceBundle.getAdminI18NString(context, "Type", sObjectType, Locale.US.getLanguage());

			String sObjectPhysicalId = (String)mapNewImplementedInfo.get(DomainConstants.SELECT_PHYSICAL_ID);

			String sNewImplementedObjectTNR = new StringBuilder(sObjectType).append(pgApolloConstants.CONSTANT_STRING_PIPE).append(sObjectName).append(pgApolloConstants.CONSTANT_STRING_PIPE).append(sObjectRevision).toString();


			String sObjectTNR;

			DomainObject domRequestObject = DomainObject.newInstance(context, sRequestPhysicalId);

			String sRequestAffectedItemSelectable = new StringBuilder("from[").append(PGAPPRequestConstants.RELATIONSHIP_PGAPPREQUESTAFFECTEDITEM).append("].to.physicalid").toString();
			String sRequestImplementedItemSelectable = new StringBuilder("from[").append(PGAPPRequestConstants.RELATIONSHIP_PGAPPREQUESTIMPLEMENTEDITEM).append("].to.physicalid").toString();

			StringList slRequestSelects = new StringList();
			slRequestSelects.add(PGAPPRequestConstants.SELECT_ATTRIBUTE_PG_AFFECTEDITEM);
			slRequestSelects.add(PGAPPRequestConstants.SELECT_ATTRIBUTE_PG_IMPLEMENTEDITEM);
			slRequestSelects.add(sRequestAffectedItemSelectable);
			slRequestSelects.add(sRequestImplementedItemSelectable);

			StringList slMultiValueRequestSelects = new StringList();
			slMultiValueRequestSelects.add(sRequestAffectedItemSelectable);
			slMultiValueRequestSelects.add(sRequestImplementedItemSelectable);


			Map mapRequestInfo = domRequestObject.getInfo(context, slRequestSelects, slMultiValueRequestSelects);

			String sAffectedItemTNR = (String)mapRequestInfo.get(PGAPPRequestConstants.SELECT_ATTRIBUTE_PG_AFFECTEDITEM);

			String sImplementedItemTNR = (String)mapRequestInfo.get(PGAPPRequestConstants.SELECT_ATTRIBUTE_PG_IMPLEMENTEDITEM);

			StringList slConnectedAffectedItemList = (StringList)mapRequestInfo.get(sRequestAffectedItemSelectable);

			StringList slConnectedImplementedItemList = (StringList)mapRequestInfo.get(sRequestImplementedItemSelectable);

			if(!slConnectedImplementedItemList.contains(sImplementedItemPhysicalId))
			{
				slToBeConnectedImplementedItem.add(sImplementedItemPhysicalId);
				slToBeDisconnectedImplementedItem.addAll(slConnectedImplementedItemList);
			}
			else
			{
				if(null != slConnectedImplementedItemList && !slConnectedImplementedItemList.isEmpty())
				{
					slConnectedImplementedItemList.remove(sImplementedItemPhysicalId);
					if(!slConnectedImplementedItemList.isEmpty())
					{
						slToBeDisconnectedImplementedItem.addAll(slConnectedImplementedItemList);
					}
				}
				
			}


			if(null != slToBeDisconnectedImplementedItem && !slToBeDisconnectedImplementedItem.isEmpty())
			{
				String sExistingImplementedItemPhysicalId = slToBeDisconnectedImplementedItem.get(0);

				DomainObject domExistingImplementedItem = DomainObject.newInstance(context, sExistingImplementedItemPhysicalId);

				domRequestObject.disconnect(context, new RelationshipType(PGAPPRequestConstants.RELATIONSHIP_PGAPPREQUESTIMPLEMENTEDITEM), true, domExistingImplementedItem);
			}


			if(!slToBeConnectedImplementedItem.isEmpty())
			{
				sImplementedItemPhysicalId = slToBeConnectedImplementedItem.get(0);

				if(UIUtil.isNotNullAndNotEmpty(sImplementedItemPhysicalId))
				{
					DomainRelationship.connect(context, sRequestPhysicalId, PGAPPRequestConstants.RELATIONSHIP_PGAPPREQUESTIMPLEMENTEDITEM, sImplementedItemPhysicalId, true);

					domRequestObject.setAttributeValue(context, PGAPPRequestConstants.ATTRIBUTE_PG_IMPLEMENTEDITEM, sNewImplementedObjectTNR);
				}	

			}


		}


	}


	/**
	 * Method to reset Implemented Item
	 * @param context
	 * @param mapAllInput
	 * @return
	 * @throws Exception 
	 */
	public static Map resetImplementedItem(Context context, Map mapAllInput) throws Exception
	{
		Map mapReturn = new HashMap();
		
		MapList mlOutputList = new MapList();
		StringList slAllRequestPhysicalIdList = new StringList();

		String sErrorMessage = DomainConstants.EMPTY_STRING;
		
		boolean isTransactionStarted = false;

		MapList mlInputList = new MapList();		
		StringList slRequestIdList = new StringList();
		StringList slRequestPhysicalIdList = new StringList();
		Map mapInput;
		
		
		try {
			
			mlInputList = (MapList)mapAllInput.get(PGAPPRequestConstants.KEY_DATA);
			
			if(null != mlInputList && !mlInputList.isEmpty())
			{
				ContextUtil.startTransaction(context,true);
				isTransactionStarted = true;
				
				for(Object objMap : mlInputList)
				{	
					
					mapInput  = (Map)objMap;

					slRequestIdList = (StringList)mapInput.get(PGAPPRequestConstants.KEY_REQUEST_ID);					

					slRequestPhysicalIdList = (StringList)mapInput.get(PGAPPRequestConstants.KEY_REQUEST_PHYSICAL_ID);
					
					slAllRequestPhysicalIdList.addAll(slRequestPhysicalIdList);
										
					for(String sRequestPhysicalId : slRequestPhysicalIdList)
					{
						resetImplementedItemOnRequest(context, sRequestPhysicalId);
					}
					
				}

			}
			
			ContextUtil.commitTransaction(context);
			isTransactionStarted = false;
		}  
		catch (Exception e)
		{
			
			logger.error(e.getMessage(), e);
			if(isTransactionStarted)
			{
				ContextUtil.abortTransaction(context);
				isTransactionStarted = false;
			}
			sErrorMessage = e.getLocalizedMessage();
		}
		
		if(UIUtil.isNotNullAndNotEmpty(sErrorMessage))
		{
			mapReturn.put(pgApolloConstants.STR_ERROR, sErrorMessage);
			mapReturn.put(PGAPPRequestConstants.KEY_DATA, new MapList());
		}
		else
		{		
			if(!slAllRequestPhysicalIdList.isEmpty())
			{
				mlOutputList = getRequestDetails(context, slAllRequestPhysicalIdList);
			}
			mapReturn.put(PGAPPRequestConstants.KEY_DATA, mlOutputList);
		}
		
		return mapReturn;
	}


	/**
	 * Method to reset Implemented Item on Request
	 * @param context
	 * @param sRequestPhysicalId
	 * @throws MatrixException 
	 */
	public static void resetImplementedItemOnRequest(Context context, String sRequestPhysicalId) throws MatrixException
	{
		if(UIUtil.isNotNullAndNotEmpty(sRequestPhysicalId))
		{		

			DomainObject domRequestObject = DomainObject.newInstance(context, sRequestPhysicalId);

			String sRequestAffectedItemSelectable = new StringBuilder("from[").append(PGAPPRequestConstants.RELATIONSHIP_PGAPPREQUESTAFFECTEDITEM).append("].to.physicalid").toString();
			String sRequestImplementedItemSelectable = new StringBuilder("from[").append(PGAPPRequestConstants.RELATIONSHIP_PGAPPREQUESTIMPLEMENTEDITEM).append("].to.physicalid").toString();

			StringList slRequestSelects = new StringList();
			slRequestSelects.add(PGAPPRequestConstants.SELECT_ATTRIBUTE_PG_AFFECTEDITEM);
			slRequestSelects.add(PGAPPRequestConstants.SELECT_ATTRIBUTE_PG_IMPLEMENTEDITEM);
			slRequestSelects.add(sRequestAffectedItemSelectable);
			slRequestSelects.add(sRequestImplementedItemSelectable);

			StringList slMultiValueRequestSelects = new StringList();
			slMultiValueRequestSelects.add(sRequestAffectedItemSelectable);
			slMultiValueRequestSelects.add(sRequestImplementedItemSelectable);

			Map mapRequestInfo = domRequestObject.getInfo(context, slRequestSelects, slMultiValueRequestSelects);			

			String sAffectedItemTNR = (String)mapRequestInfo.get(PGAPPRequestConstants.SELECT_ATTRIBUTE_PG_AFFECTEDITEM);

			String sImplementedItemTNR = (String)mapRequestInfo.get(PGAPPRequestConstants.SELECT_ATTRIBUTE_PG_IMPLEMENTEDITEM);

			StringList slConnectedAffectedItemList = (StringList)mapRequestInfo.get(sRequestAffectedItemSelectable);

			StringList slConnectedImplementedItemList = (StringList)mapRequestInfo.get(sRequestImplementedItemSelectable);


			StringList slToBeDisconnectedImplementedItem = new StringList();
			StringList slToBeConnectedImplementedItem = new StringList();
			StringList slToBeConnectedImplementedItemTNR = new StringList();


			if(null != slConnectedAffectedItemList && !slConnectedAffectedItemList.isEmpty())
			{
				int iSize = slConnectedAffectedItemList.size();

				StringList slObjectSelectable = new StringList();
				slObjectSelectable.add(DomainConstants.SELECT_PHYSICAL_ID);
				slObjectSelectable.add(DomainConstants.SELECT_TYPE);
				slObjectSelectable.add(DomainConstants.SELECT_NAME);
				slObjectSelectable.add(DomainConstants.SELECT_REVISION);
				slObjectSelectable.add(PGAPPRequestConstants.SELECT_LAST_PHYSICALID);

				slObjectSelectable.add(sRequestAffectedItemSelectable);

				MapList mlAffectedItemObjectInfo = DomainObject.getInfo(context, slConnectedAffectedItemList.toArray(new String[slConnectedAffectedItemList.size()]), slObjectSelectable);	

				Map mapObject;	

				String sObjectType;
				String sObjectName;
				String sObjectRevision;

				String sObjectPhysicalId;
				String sAffectedItemPhysicalId = DomainConstants.EMPTY_STRING;
				String sAffectedItemLastPhysicalId = DomainConstants.EMPTY_STRING;
				String sObjectLastPhysicalId;
				String sObjectTNR;
				String sImplementedItemPhysicalId = DomainConstants.EMPTY_STRING;


				for(Object objMap : mlAffectedItemObjectInfo)
				{
					mapObject = (Map)objMap;

					sObjectType = (String)mapObject.get(DomainConstants.SELECT_TYPE);
					sObjectName = (String)mapObject.get(DomainConstants.SELECT_NAME);
					sObjectRevision = (String)mapObject.get(DomainConstants.SELECT_REVISION);

					sObjectType = EnoviaResourceBundle.getAdminI18NString(context, "Type", sObjectType, Locale.US.getLanguage());

					sObjectPhysicalId = (String)mapObject.get(DomainConstants.SELECT_PHYSICAL_ID);
					sObjectLastPhysicalId = (String)mapObject.get(PGAPPRequestConstants.SELECT_LAST_PHYSICALID);					

					sObjectTNR = new StringBuilder(sObjectType).append(pgApolloConstants.CONSTANT_STRING_PIPE).append(sObjectName).append(pgApolloConstants.CONSTANT_STRING_PIPE).append(sObjectRevision).toString();

					if(sObjectTNR.equalsIgnoreCase(sAffectedItemTNR)) 
					{
						sAffectedItemPhysicalId = sObjectPhysicalId;
						sAffectedItemLastPhysicalId = sObjectLastPhysicalId;
					}

				}				

				String sNewImplementedObjectTNR = DomainConstants.EMPTY_STRING;

				if(UIUtil.isNotNullAndNotEmpty(sAffectedItemLastPhysicalId))
				{

					if(!slConnectedImplementedItemList.contains(sAffectedItemLastPhysicalId))
					{
						slToBeConnectedImplementedItem.add(sAffectedItemLastPhysicalId);
						slToBeDisconnectedImplementedItem.addAll(slConnectedImplementedItemList);
					}
					else
					{
						if(null != slConnectedImplementedItemList && !slConnectedImplementedItemList.isEmpty())
						{
							slConnectedImplementedItemList.remove(sAffectedItemLastPhysicalId);
							if(!slConnectedImplementedItemList.isEmpty())
							{
								slToBeDisconnectedImplementedItem.addAll(slConnectedImplementedItemList);
							}
						}
						
					}

					slObjectSelectable = new StringList();
					slObjectSelectable.add(DomainConstants.SELECT_TYPE);
					slObjectSelectable.add(DomainConstants.SELECT_NAME);
					slObjectSelectable.add(DomainConstants.SELECT_REVISION);

					DomainObject domObject = DomainObject.newInstance(context, sAffectedItemLastPhysicalId);

					mapObject = domObject.getInfo(context, slObjectSelectable);

					sObjectType = (String)mapObject.get(DomainConstants.SELECT_TYPE);
					sObjectName = (String)mapObject.get(DomainConstants.SELECT_NAME);
					sObjectRevision = (String)mapObject.get(DomainConstants.SELECT_REVISION);

					sObjectType = EnoviaResourceBundle.getAdminI18NString(context, "Type", sObjectType, Locale.US.getLanguage());

					sNewImplementedObjectTNR = new StringBuilder(sObjectType).append(pgApolloConstants.CONSTANT_STRING_PIPE).append(sObjectName).append(pgApolloConstants.CONSTANT_STRING_PIPE).append(sObjectRevision).toString();

				}		


				if(null != slToBeDisconnectedImplementedItem && !slToBeDisconnectedImplementedItem.isEmpty())
				{
					String sExistingImplementedItemPhysicalId = slToBeDisconnectedImplementedItem.get(0);

					DomainObject domExistingImplementedItem = DomainObject.newInstance(context, sExistingImplementedItemPhysicalId);

					domRequestObject.disconnect(context, new RelationshipType(PGAPPRequestConstants.RELATIONSHIP_PGAPPREQUESTIMPLEMENTEDITEM), true, domExistingImplementedItem);
				}


				if(!slToBeConnectedImplementedItem.isEmpty())
				{
					sImplementedItemPhysicalId = slToBeConnectedImplementedItem.get(0);

					if(UIUtil.isNotNullAndNotEmpty(sImplementedItemPhysicalId))
					{
						DomainRelationship.connect(context, sRequestPhysicalId, PGAPPRequestConstants.RELATIONSHIP_PGAPPREQUESTIMPLEMENTEDITEM, sImplementedItemPhysicalId, true);

						domRequestObject.setAttributeValue(context, PGAPPRequestConstants.ATTRIBUTE_PG_IMPLEMENTEDITEM, sNewImplementedObjectTNR);
					}	

				}


			}

		}		
	}


	/**
	 * Method to delete request Data
	 * @param context
	 * @param mapInput
	 * @return
	 */
	public static Map deleteRequestData(Context context, Map mapAllInput) 
	{
		Map mapReturn = new HashMap();
		
		String sErrorMessage = DomainConstants.EMPTY_STRING;
		
		boolean isTransactionStarted = false;

		MapList mlInputList = new MapList();		
		StringList slRequestSetIdList = new StringList();
		StringList slRequestSetPhysicalIdList = new StringList();
		Map mapInput;
		MapList mlRequestSetList;
		Map mapRequestSet;
		StringList slChildRequestList;
		String sRequestSetId;
		DomainObject domObject;
		
		try {

			mlInputList = (MapList)mapAllInput.get(PGAPPRequestConstants.KEY_DATA);

			if(null != mlInputList && !mlInputList.isEmpty())
			{
				ContextUtil.startTransaction(context,true);
				isTransactionStarted = true;

				for(Object objMap : mlInputList)
				{	

					mapInput  = (Map)objMap;

					slRequestSetIdList = (StringList)mapInput.get(PGAPPRequestConstants.KEY_REQUEST_SET_ID);					

					slRequestSetPhysicalIdList = (StringList)mapInput.get(PGAPPRequestConstants.KEY_REQUEST_SET_PHYSICAL_ID);					

					StringList slAllRequestDataList = new StringList();

					String sRequestDataSelectable = new StringBuilder("from[").append(PGAPPRequestConstants.RELATIONSHIP_PGAPPREQUESTCHANGEDATA).append("].to.physicalid").toString();

					StringList slRequestIdSelects = new StringList();
					slRequestIdSelects.add(DomainConstants.SELECT_PHYSICAL_ID);
					slRequestIdSelects.add(sRequestDataSelectable);	


					if(null != slRequestSetPhysicalIdList && !slRequestSetPhysicalIdList.isEmpty())
					{
						mlRequestSetList = DomainObject.getInfo(context, slRequestSetPhysicalIdList.toArray(new String[slRequestSetPhysicalIdList.size()]), slRequestIdSelects, new StringList(sRequestDataSelectable));

						if(null != mlRequestSetList && !mlRequestSetList.isEmpty())
						{
							for(Object objectMap : mlRequestSetList)
							{
								mapRequestSet = (Map)objectMap;
								
								deleteRequestSet(context, mapRequestSet);

							}
						}
					}



				}

			}

			ContextUtil.commitTransaction(context);
			isTransactionStarted = false;
		}  
		catch (Exception e)
		{
			
			logger.error(e.getMessage(), e);
			if(isTransactionStarted)
			{
				ContextUtil.abortTransaction(context);
				isTransactionStarted = false;
			}
			sErrorMessage = e.getLocalizedMessage();
		}
		
		if(UIUtil.isNotNullAndNotEmpty(sErrorMessage))
		{
			mapReturn.put(pgApolloConstants.STR_ERROR, sErrorMessage);
			mapReturn.put(PGAPPRequestConstants.KEY_DATA, new MapList());
		}
		else
		{		
			mapReturn.put(PGAPPRequestConstants.KEY_DATA, mlInputList);
		}
		
		return mapReturn;
	}

	/**
	 * Method to delete Request Set
	 * @param context
	 * @param objectMap
	 * @throws Exception
	 * @throws FrameworkException
	 */
	private static void deleteRequestSet(Context context, Map mapRequestSet) throws Exception, FrameworkException 
	{
		String sRequestDataSelectable = new StringBuilder("from[").append(PGAPPRequestConstants.RELATIONSHIP_PGAPPREQUESTCHANGEDATA).append("].to.physicalid").toString();
		StringList slChildRequestList;
		String sRequestSetId;
		DomainObject domObject;
		sRequestSetId = (String)mapRequestSet.get(DomainConstants.SELECT_PHYSICAL_ID);
		slChildRequestList = pgApolloCommonUtil.getStringListMultiValue(mapRequestSet.get(sRequestDataSelectable));
		
		if(null != slChildRequestList && !slChildRequestList.isEmpty())
		{
			DomainObject.deleteObjects(context, slChildRequestList.toArray(new String[slChildRequestList.size()]));
		}
		
		
		if(UIUtil.isNotNullAndNotEmpty(sRequestSetId))
		{
			domObject = DomainObject.newInstance(context, sRequestSetId);

			domObject.deleteObject(context);
		}										
		
	}

	/**
	 * Method to validate APP Request Approval Member ship
	 * @param context
	 * @return
	 * @throws Exception 
	 */
	public static boolean validateAPPRequestApprovalMembership(Context context) throws Exception 
	{
		boolean isAPPRequestApprover = false;

		StringList slAllApproverList = new StringList();
		StringList slApproverList;

		MapList mlApproverObjectList = getAPPRequestApproverObjectList(context);
		StringList slApproverListObjectList =  new ChangeUtil().getStringListFromMapList(mlApproverObjectList, DomainConstants.SELECT_PHYSICAL_ID);
		
		slAllApproverList = getAPPRequestApproversFromApproverGroup(context, slApproverListObjectList);
		
		String sContextUser = context.getUser();
		
		if(slAllApproverList.contains(sContextUser))
		{
			isAPPRequestApprover = true;
		}

		return isAPPRequestApprover;
	}

	/**
	 * Method to get APP Request Approvers from User Group
	 * @param context
	 * @param slApproverGroupList
	 * @throws FrameworkException
	 */
	public static StringList getAPPRequestApproversFromApproverGroup(Context context, StringList slApproverListObjectList) throws FrameworkException {
		
		StringList slAllApproverList = new StringList();

		StringList slApproverList;
		if(null != slApproverListObjectList && !slApproverListObjectList.isEmpty())
		{
			String sListMemberSelectable = new StringBuilder("from[").append(PGAPPRequestConstants.RELATIONSHIP_GROUP_MEMBER).append("].to[").append(PGAPPRequestConstants.TYPE_PERSON).append("].name").toString();

			StringList slObjectSelects = new StringList();
			slObjectSelects.add(DomainConstants.SELECT_PHYSICAL_ID);
			slObjectSelects.add(sListMemberSelectable);

			MapList mlApproverListObjectdList = DomainObject.getInfo(context, slApproverListObjectList.toArray(new String[slApproverListObjectList.size()]), slObjectSelects, new StringList(sListMemberSelectable));
			
			Map mapApproverList;

			for(Object objMap : mlApproverListObjectdList)
			{
				mapApproverList = (Map)objMap;

				slApproverList = (StringList)mapApproverList.get(sListMemberSelectable);

				slAllApproverList.addAll(slApproverList);
			}


			Set setAllMembers = new HashSet();
			setAllMembers.addAll(slAllApproverList);
			slAllApproverList.clear();
			
			slAllApproverList.addAll(setAllMembers);
		}
		
		
		return slAllApproverList;
	}


	/**
	 * Method to get APP Request Approver Group Ids
	 * @param context
	 * @throws Exception
	 */
	public static MapList getAPPRequestApproverObjectList(Context context)	throws Exception
	{
		MapList mlRequestApproverGroup = new MapList();
		Map mapRequestApproverGroup;
		
		StringList slApproverList = new StringList();

		String sConfiguredAPPRequestAprpoverApproverList =  pgApolloCommonUtil.getPageProperty(context, pgApolloConstants.STR_APOLLO_CONFIG_PAGE_FILENAME, "pgApolloConfiguration.APPRequestManagement.ApproverGroup");

		if(UIUtil.isNotNullAndNotEmpty(sConfiguredAPPRequestAprpoverApproverList))
		{
			StringList  slConfiguredAPPRequestAprpoverApproverList = StringUtil.split(sConfiguredAPPRequestAprpoverApproverList, pgApolloConstants.CONSTANT_STRING_COMMA);

			if(null != slConfiguredAPPRequestAprpoverApproverList && !slConfiguredAPPRequestAprpoverApproverList.isEmpty())
			{
				Map mapObject;
				String sApproverGroupPhysicalId;
				String sApproverGroupName;


				for(String sApprover : slConfiguredAPPRequestAprpoverApproverList)
				{
					mapObject = pgApolloCommonUtil.getLatestRevisionMap(context, PGAPPRequestConstants.TYPE_GROUP, sApprover, pgApolloConstants.CONSTANT_STRING_HYPHEN);	
					
					sApproverGroupPhysicalId = (String)mapObject.get(DomainConstants.SELECT_PHYSICAL_ID);	
					sApproverGroupName = (String)mapObject.get(DomainConstants.SELECT_NAME);
					
					if(UIUtil.isNotNullAndNotEmpty(sApproverGroupPhysicalId))	
					{
						mapRequestApproverGroup = new HashMap();
						mapRequestApproverGroup.put(DomainConstants.SELECT_PHYSICAL_ID, sApproverGroupPhysicalId);
						mapRequestApproverGroup.put(DomainConstants.SELECT_NAME, sApproverGroupName);
						mlRequestApproverGroup.add(mapRequestApproverGroup);
					}
				}
			}
		}
		
		return mlRequestApproverGroup;
	}

	/**
	 * Method to Reject APP Requests
	 * @param context
	 * @param mapAllInput
	 * @return
	 * @throws Exception 
	 */
	public static Map rejectAPPRequests(Context context, Map mapAllInput) throws Exception 
	{

		Map mapReturn = new HashMap();
		
		MapList mlOutputList = new MapList();
		
		StringList slAllRequestPhysicalIdList = new StringList();
		
		String sErrorMessage = DomainConstants.EMPTY_STRING;
		
		boolean isTransactionStarted = false;

		MapList mlInputList = new MapList();		
		StringList slRequestPhysicalIdList = new StringList();
		Map mapInput;

		String sRejectionComments;
		
		
		try {
			
			mlInputList = (MapList)mapAllInput.get(PGAPPRequestConstants.KEY_DATA);
			
			if(null != mlInputList && !mlInputList.isEmpty())
			{
				ContextUtil.startTransaction(context,true);
				isTransactionStarted = true;
				
				for(Object objMap : mlInputList)
				{	
					
					mapInput  = (Map)objMap;
					
					sRejectionComments = (String)mapInput.get("ReasonForRejection");

					slRequestPhysicalIdList = (StringList)mapInput.get(PGAPPRequestConstants.KEY_REQUEST_PHYSICAL_ID);					
			
					slAllRequestPhysicalIdList.addAll(slRequestPhysicalIdList);
					
					for(String sRequestPhysicalId : slRequestPhysicalIdList)
					{
						rejectRequest(context, sRequestPhysicalId, sRejectionComments);
					}
					
				}

			}
			
			ContextUtil.commitTransaction(context);
			isTransactionStarted = false;
		}  
		catch (Exception e)
		{
			
			logger.error(e.getMessage(), e);
			if(isTransactionStarted)
			{
				ContextUtil.abortTransaction(context);
				isTransactionStarted = false;
			}
			sErrorMessage = e.getLocalizedMessage();
		}
		
		if(UIUtil.isNotNullAndNotEmpty(sErrorMessage))
		{
			mapReturn.put(pgApolloConstants.STR_ERROR, sErrorMessage);
			mapReturn.put(PGAPPRequestConstants.KEY_DATA, new MapList());
		}
		else
		{		
			if(!slAllRequestPhysicalIdList.isEmpty())
			{
				mlOutputList = getRequestDetails(context, slAllRequestPhysicalIdList);
			}
			mapReturn.put(PGAPPRequestConstants.KEY_DATA, mlOutputList);
		}
		
		return mapReturn;
	}


	/**
	 * Method to Reject Request
	 * @param context
	 * @param sRequestPhysicalId
	 * @param sRejectionComments
	 * @throws MatrixException 
	 */
	private static void rejectRequest(Context context, String sRequestPhysicalId, String sRejectionComments) throws MatrixException 
	{
		if(UIUtil.isNotNullAndNotEmpty(sRequestPhysicalId))
		{
			DomainObject domAPPRequestObject = DomainObject.newInstance(context, sRequestPhysicalId);
			
			processRequestObject(context, PGAPPRequestConstants.STR_ACTION_REJECT, domAPPRequestObject);
			
			domAPPRequestObject.setAttributeValue(context, pgApolloConstants.ATTRIBUTE_REASON_FOR_REJECTION, sRejectionComments);

		}
		
	}


	/**
	 * Method to Cancel APP Requests
	 * @param context
	 * @param mapAllInput
	 * @return
	 * @throws Exception 
	 */
	public static Map cancelAPPRequests(Context context, Map mapAllInput) throws Exception 
	{

		Map mapReturn = new HashMap();
		
		MapList mlOutputList = new MapList();
		
		StringList slAllRequestPhysicalIdList = new StringList();
		
		String sErrorMessage = DomainConstants.EMPTY_STRING;
		
		boolean isTransactionStarted = false;

		MapList mlInputList = new MapList();		
		StringList slRequestIdList = new StringList();
		StringList slRequestPhysicalIdList = new StringList();
		Map mapInput;

		String sRejectionComments;
		String sImplementedItemPhysicalId;
		
		
		try {
			
			mlInputList = (MapList)mapAllInput.get(PGAPPRequestConstants.KEY_DATA);
			
			if(null != mlInputList && !mlInputList.isEmpty())
			{
				ContextUtil.startTransaction(context,true);
				isTransactionStarted = true;
				
				for(Object objMap : mlInputList)
				{	
					
					mapInput  = (Map)objMap;

					slRequestIdList = (StringList)mapInput.get(PGAPPRequestConstants.KEY_REQUEST_ID);
					
					sRejectionComments = (String)mapInput.get("ReasonForRejection");

					slRequestPhysicalIdList = (StringList)mapInput.get(PGAPPRequestConstants.KEY_REQUEST_PHYSICAL_ID);					
			
					slAllRequestPhysicalIdList.addAll(slRequestPhysicalIdList);
					
					for(String sRequestPhysicalId : slRequestPhysicalIdList)
					{
						cancelRequest(context, sRequestPhysicalId, sRejectionComments);
					}
					
				}

			}
			
			ContextUtil.commitTransaction(context);
			isTransactionStarted = false;
		}  
		catch (Exception e)
		{
			
			logger.error(e.getMessage(), e);
			if(isTransactionStarted)
			{
				ContextUtil.abortTransaction(context);
				isTransactionStarted = false;
			}
			sErrorMessage = e.getLocalizedMessage();
		}
		
		if(UIUtil.isNotNullAndNotEmpty(sErrorMessage))
		{
			mapReturn.put(pgApolloConstants.STR_ERROR, sErrorMessage);
			mapReturn.put(PGAPPRequestConstants.KEY_DATA, new MapList());
		}
		else
		{		
			if(!slAllRequestPhysicalIdList.isEmpty())
			{
				mlOutputList = getRequestDetails(context, slAllRequestPhysicalIdList);
			}
			mapReturn.put(PGAPPRequestConstants.KEY_DATA, mlOutputList);
		}
		
		return mapReturn;
	}


	/**
	 * Method to cancel Request
	 * @param context
	 * @param sRequestPhysicalId
	 * @param sCancellationComments
	 * @throws MatrixException
	 */
	public static void cancelRequest(Context context, String sRequestPhysicalId, String sCancellationComments) throws MatrixException
	{
		if(UIUtil.isNotNullAndNotEmpty(sRequestPhysicalId))
		{
			DomainObject domAPPRequestObject = DomainObject.newInstance(context, sRequestPhysicalId);			
			
			domAPPRequestObject.setAttributeValue(context, pgApolloConstants.ATTRIBUTE_REASON_FOR_REJECTION, sCancellationComments);

			processRequestObject(context, PGAPPRequestConstants.STR_ACTION_CANCEL, domAPPRequestObject);			

		}
		
		
	}

	/**
	 * Method to get Configured type of changes
	 * @param context
	 * @return
	 * @throws Exception 
	 */
	public static Map getConfiguredTypeOfChanges(Context context) throws Exception
	{
		Map mapReturn = new HashMap();
		MapList mlConfiguredTypeOfChange = new MapList();
		String sErrorMessage = DomainConstants.EMPTY_STRING;

		try
		{
			Map mapAPPRequestTypeOfChangeMapping = pgApolloCommonUtil.prepareAttributeMappingBasedOnConfiguration(context, pgApolloConstants.STR_APOLLO_CONFIG_PAGE_FILENAME, "pgApolloConfiguration.APPRequestManagement.TypeOfChangeMapping", false);
			
			Set<String> setAPPRequestTypeOfChange = new HashSet();
			
			if(null != mapAPPRequestTypeOfChangeMapping && !mapAPPRequestTypeOfChangeMapping.isEmpty())
			{
				setAPPRequestTypeOfChange = mapAPPRequestTypeOfChangeMapping.keySet();
				
				String sTypeOfChangeValue;
				Map mapConfiguredType;
				
				for(String sTypeOfChangeDisplay : setAPPRequestTypeOfChange)
				{
					sTypeOfChangeValue = (String)mapAPPRequestTypeOfChangeMapping.get(sTypeOfChangeDisplay);
					mapConfiguredType = new HashMap();
					mapConfiguredType.put("label", sTypeOfChangeDisplay);
					mapConfiguredType.put("value", sTypeOfChangeValue);

					mlConfiguredTypeOfChange.add(mapConfiguredType);
				}
			}

		}  
		catch (Exception e)
		{
			
			logger.error(e.getMessage(), e);

			sErrorMessage = e.getLocalizedMessage();
		}

		if(UIUtil.isNotNullAndNotEmpty(sErrorMessage))
		{
			mapReturn.put(pgApolloConstants.STR_ERROR, sErrorMessage);
			mapReturn.put(PGAPPRequestConstants.KEY_DATA, new MapList());
		}
		else
		{		
			mlConfiguredTypeOfChange.sort("label", pgApolloConstants.STR_ASCENDING, pgApolloConstants.STR_STRING); // Sorting Maplist
			mapReturn.put(PGAPPRequestConstants.KEY_DATA, mlConfiguredTypeOfChange);
		}

		return mapReturn;
	}
	
	
	/**
	 * Method to mark as Implemented
	 * @param context
	 * @param mapInput
	 * @return
	 * @throws Exception 
	 */
	public static Map markAsImplemented(Context context, Map mapAllInput) throws Exception 
	{
		Map mapReturn = new HashMap();
		
		MapList mlOutputList = new MapList();
		
		StringList slAllRequestPhysicalIdList = new StringList();
		
		String sErrorMessage = DomainConstants.EMPTY_STRING;
		
		boolean isTransactionStarted = false;

		MapList mlInputList = new MapList();		
		StringList slRequestPhysicalIdList = new StringList();
		Map mapInput;
		String sTargetRequestState;

		String sContextUser = context.getUser();
		
		String sContextUserFullName = DomainConstants.EMPTY_STRING;
		
		if(UIUtil.isNotNullAndNotEmpty(sContextUser))
		{
			sContextUserFullName = PersonUtil.getFullName(context, sContextUser);
		}
		
		
		
		try {
			
			mlInputList = (MapList)mapAllInput.get(PGAPPRequestConstants.KEY_DATA);
			
			if(null != mlInputList && !mlInputList.isEmpty())
			{
				ContextUtil.startTransaction(context,true);
				isTransactionStarted = true;
				
				for(Object objMap : mlInputList)
				{	
					
					mapInput  = (Map)objMap;

					slRequestPhysicalIdList = (StringList)mapInput.get(PGAPPRequestConstants.KEY_REQUEST_PHYSICAL_ID);	
					
					sTargetRequestState = (String)mapInput.get(PGAPPRequestConstants.KEY_REQUEST_STATE);
					
					slAllRequestPhysicalIdList.addAll(slRequestPhysicalIdList);
					
					for(String sRequestPhysicalId : slRequestPhysicalIdList)
					{
						markAsImplemented(context, sRequestPhysicalId, sTargetRequestState, sContextUserFullName);
					}
					
				}

			}
			
			ContextUtil.commitTransaction(context);
			isTransactionStarted = false;
		}  
		catch (Exception e)
		{
			
			logger.error(e.getMessage(), e);
			if(isTransactionStarted)
			{
				ContextUtil.abortTransaction(context);
				isTransactionStarted = false;
			}
			sErrorMessage = e.getLocalizedMessage();
		}
		
		if(UIUtil.isNotNullAndNotEmpty(sErrorMessage))
		{
			mapReturn.put(pgApolloConstants.STR_ERROR, sErrorMessage);
			mapReturn.put(PGAPPRequestConstants.KEY_DATA, new MapList());
		}
		else
		{		
			if(!slAllRequestPhysicalIdList.isEmpty())
			{
				mlOutputList = getRequestDetails(context, slAllRequestPhysicalIdList);
			}
			mapReturn.put(PGAPPRequestConstants.KEY_DATA, mlOutputList);
		}
		
		return mapReturn;
	}
	
	/**
	 * Method to cancel Request
	 * @param context
	 * @param sRequestPhysicalId
	 * @param sTargetRequestState 
	 * @param sContextUser 
	 * @param sCancellationComments
	 * @throws Exception 
	 */
	public static void markAsImplemented(Context context, String sRequestPhysicalId, String sTargetRequestState, String sContextUser) throws Exception
	{
		if(UIUtil.isNotNullAndNotEmpty(sRequestPhysicalId))
		{
			DomainObject domAPPRequestObject = DomainObject.newInstance(context, sRequestPhysicalId);	
			String sRequestExistingState = domAPPRequestObject.getInfo(context, DomainConstants.SELECT_CURRENT);
					
			if(UIUtil.isNullOrEmpty(sTargetRequestState))
			{
				sTargetRequestState = PGAPPRequestConstants.PGAPPREQUEST_STATE_IMPLEMENTED;
			}				
			
			if(PGAPPRequestConstants.PGAPPREQUEST_STATE_READY_TO_IMPLEMENT.equals(sRequestExistingState) || PGAPPRequestConstants.PGAPPREQUEST_STATE_IMPLEMENTED.equals(sRequestExistingState))
			{
				domAPPRequestObject.setAttributeValue(context, PGAPPRequestConstants.ATTRIBUTE_PGFAILEDREASON, DomainConstants.EMPTY_STRING);	
				String sMarkAsImplementedMessage = PGAPPRequestConstants.STR_MESSAGE_MARK_AS_IMPLMENTED;
				sMarkAsImplementedMessage = sMarkAsImplementedMessage.replace("<CONTEXTUSER>", sContextUser);
				PGAPPRequestImplementation.addCustomHistoryOnAPPRequestImplement(context, sRequestPhysicalId, sMarkAsImplementedMessage);
				domAPPRequestObject.setState(context, sTargetRequestState);
			}				
			
		}		
		
	}


	/**
	 * Method to validate Affected Items for Implementation
	 * @param context
	 * @param mapInput
	 * @return
	 * @throws Exception 
	 */
	public static Map validateAffectedItemsForImplementation(Context context, Map mapAllInput) throws Exception
	{
		
		Map mapReturn = new HashMap();
			
		context.printTrace(pgApolloConstants.TRACE_LPD, "PGAPPRequestUtil : validateAffectedItemsForImplementation >> : mapAllInput :"+mapAllInput);

		MapList mlInputList = (MapList)mapAllInput.get(PGAPPRequestConstants.KEY_DATA);
		
		Map mapInput = new HashMap();

		if(null != mlInputList && !mlInputList.isEmpty())
		{
			mapInput = (Map)mlInputList.get(0);
		}
		
		StringList slRequestPhysicalIdList = (StringList)mapInput.get(PGAPPRequestConstants.KEY_REQUEST_PHYSICAL_ID);	
		
		String sRequestPhysicalId = DomainConstants.EMPTY_STRING;
		
		if(null != slRequestPhysicalIdList && !slRequestPhysicalIdList.isEmpty())
		{
			sRequestPhysicalId = slRequestPhysicalIdList.get(0);
		}
		
		boolean bChangesAlreadyImplemented = false;
		
		Map mapValidationOutput = new HashMap();

		StringList slErrorList = new StringList();
		
		StringList slMessageList;
		
		context.printTrace(pgApolloConstants.TRACE_LPD, "PGAPPRequestUtil : validateAffectedItemsForImplementation  sRequestPhysicalId :"+sRequestPhysicalId);

		String sTypeOfChange = DomainConstants.EMPTY_STRING;
		String sImplementedItemLastCurrent = DomainConstants.EMPTY_STRING;
		
		if(UIUtil.isNotNullAndNotEmpty(sRequestPhysicalId))
		{
			String sRequestImplementedItemSelectable = new StringBuilder("from[").append(PGAPPRequestConstants.RELATIONSHIP_PGAPPREQUESTIMPLEMENTEDITEM).append("].to.physicalid").toString();
			String sRequestDataSelectable = new StringBuilder("to[").append(PGAPPRequestConstants.RELATIONSHIP_PGAPPREQUESTCHANGEDATA).append("].from.physicalid").toString();

			StringList slSelectables = new StringList();
			slSelectables.add(DomainConstants.SELECT_ID);
			slSelectables.add(DomainConstants.SELECT_NAME);
			slSelectables.add(DomainConstants.SELECT_TYPE);
			slSelectables.add(DomainConstants.SELECT_PHYSICAL_ID);
			slSelectables.add(DomainConstants.SELECT_CURRENT);
			slSelectables.add(sRequestImplementedItemSelectable);
			slSelectables.add(sRequestDataSelectable);


			StringList slMultiValueSelectables = new StringList();
			slMultiValueSelectables.add(sRequestImplementedItemSelectable);
			slMultiValueSelectables.add(sRequestDataSelectable);

			DomainObject domRequest = DomainObject.newInstance(context, sRequestPhysicalId);

			Map mapRequest = domRequest.getInfo(context, slSelectables, slMultiValueSelectables);
			
			context.printTrace(pgApolloConstants.TRACE_LPD, "PGAPPRequestUtil : validateAffectedItemsForImplementation  mapRequest :"+mapRequest);
			
			String sRequestName = (String)mapRequest.get(DomainConstants.SELECT_NAME);

			StringList slRequestDataList = pgApolloCommonUtil.getStringListMultiValue(mapRequest.get(sRequestDataSelectable));

			String sRequestDataId = DomainConstants.EMPTY_STRING;
			if(null != slRequestDataList && !slRequestDataList.isEmpty())
			{
				sRequestDataId = slRequestDataList.get(0);				
			}

			String sImplementedItemPhysicalId = DomainConstants.EMPTY_STRING;

			StringList slImplementedItemList = (StringList)mapRequest.get(sRequestImplementedItemSelectable);

			if(null != slImplementedItemList && !slImplementedItemList.isEmpty())
			{
				sImplementedItemPhysicalId = slImplementedItemList.get(0);
			}

			context.printTrace(pgApolloConstants.TRACE_LPD, "PGAPPRequestUtil : validateAffectedItemsForImplementation  sRequestDataId :"+sRequestDataId+" sImplementedItemPhysicalId :"+sImplementedItemPhysicalId);

			if(UIUtil.isNotNullAndNotEmpty(sRequestDataId) && UIUtil.isNotNullAndNotEmpty(sImplementedItemPhysicalId))
			{
				Map mapRequestSetRequestedChangeInfo = PGAPPRequestImplementation.getRequestedChangeDetailsInfo(context, new StringList(sRequestDataId));
				
				context.printTrace(pgApolloConstants.TRACE_LPD, "PGAPPRequestUtil : validateAffectedItemsForImplementation  mapRequestSetRequestedChangeInfo :"+mapRequestSetRequestedChangeInfo);

				DomainObject domImplementedItem = DomainObject.newInstance(context, sImplementedItemPhysicalId);

				StringList slImplementedItemSelectable = new StringList();
				slImplementedItemSelectable.add(DomainConstants.SELECT_CURRENT);
				slImplementedItemSelectable.add(PGAPPRequestConstants.SELECT_LAST_CURRENT);
				slImplementedItemSelectable.add(PGAPPRequestConstants.SELECT_LAST_PHYSICALID);				
				slImplementedItemSelectable.add(DomainConstants.SELECT_TYPE);
				slImplementedItemSelectable.add(DomainConstants.SELECT_POLICY);
				slImplementedItemSelectable.add(PGAPPRequestConstants.SELECT_LAST_NAME);
				slImplementedItemSelectable.add(PGAPPRequestConstants.SELECT_LAST_REVISION);

				Map mapImplementedItem = domImplementedItem.getInfo(context, slImplementedItemSelectable);
				
				context.printTrace(pgApolloConstants.TRACE_LPD, "PGAPPRequestUtil : validateAffectedItemsForImplementation  mapImplementedItem :"+mapImplementedItem);

				String sImplementedItemLastRevisionPhysicalId = (String)mapImplementedItem.get(PGAPPRequestConstants.SELECT_LAST_PHYSICALID);

				sImplementedItemLastCurrent = (String)mapImplementedItem.get(PGAPPRequestConstants.SELECT_LAST_CURRENT);		
				
				Map mapRequestSetedChangeDetailsInfo = (Map)mapRequestSetRequestedChangeInfo.get(sRequestDataId);

				sTypeOfChange = (String)mapRequestSetedChangeDetailsInfo.get(PGAPPRequestConstants.ATTRIBUTE_PG_APP_REQUESTCHANGETYPE);		
				
				String sImplementedItemType = (String)mapImplementedItem.get(DomainConstants.SELECT_TYPE);				

				String sImplementedItemPolicy = (String)mapImplementedItem.get(DomainConstants.SELECT_POLICY);	

				String sImplementedItemName = (String)mapImplementedItem.get(PGAPPRequestConstants.SELECT_LAST_NAME);				

				String sImplementedItemRevision = (String)mapImplementedItem.get(PGAPPRequestConstants.SELECT_LAST_REVISION);	
				
				Map mapDataToImplement = new HashMap();
				mapDataToImplement.put(PGAPPRequestConstants.KEY_IMPLEMENTED_ITEM_PHYSICAL_ID, sImplementedItemLastRevisionPhysicalId);
				mapDataToImplement.put(PGAPPRequestConstants.KEY_IMPLEMENTED_ITEM_STATE, sImplementedItemLastCurrent);
				mapDataToImplement.put(PGAPPRequestConstants.KEY_REQUEST_PHYSICAL_ID, sRequestPhysicalId);
				mapDataToImplement.put(PGAPPRequestConstants.KEY_REQUEST_ID, sRequestName);
				mapDataToImplement.put(PGAPPRequestConstants.KEY_IMPLEMENTED_ITEM_TYPE, sImplementedItemType);
				mapDataToImplement.put(PGAPPRequestConstants.KEY_IMPLEMENTED_ITEM_POLICY, sImplementedItemPolicy);
				mapDataToImplement.put(PGAPPRequestConstants.KEY_IMPLEMENTED_ITEM, sImplementedItemName);
				mapDataToImplement.put(PGAPPRequestConstants.KEY_IMPLEMENTED_ITEM_REVISION, sImplementedItemRevision);
			

				if(!pgApolloConstants.STATE_OBSOLETE.equalsIgnoreCase(sImplementedItemLastCurrent))
				{
					Map mapNewRequestedChangeDetails = (Map)mapRequestSetedChangeDetailsInfo.get(sTypeOfChange);

					context.printTrace(pgApolloConstants.TRACE_LPD, "PGAPPRequestUtil : validateAffectedItemsForImplementation  mapNewRequestedChangeDetails :"+mapNewRequestedChangeDetails);

					Map mapImplementedItemExistingDetails = PGAPPRequestImplementation.getAffectedItemExistingInfo(context, sImplementedItemLastRevisionPhysicalId, sTypeOfChange);

					context.printTrace(pgApolloConstants.TRACE_LPD, "PGAPPRequestUtil : validateAffectedItemsForImplementation  mapImplementedItemExistingDetails :"+mapImplementedItemExistingDetails);

					mapValidationOutput = PGAPPRequestImplementation.validateAndGetDataForImplementation(context, sTypeOfChange, mapImplementedItemExistingDetails, mapNewRequestedChangeDetails, mapDataToImplement);
				
					context.printTrace(pgApolloConstants.TRACE_LPD, "PGAPPRequestUtil : validateAffectedItemsForImplementation  mapValidationOutput :"+mapValidationOutput);

					if(mapValidationOutput.containsKey(PGAPPRequestConstants.KEY_CHANGES_IMPLEMENTED))
					{
						bChangesAlreadyImplemented = (boolean)mapValidationOutput.get(PGAPPRequestConstants.KEY_CHANGES_IMPLEMENTED);
					}
				
					if(mapValidationOutput.containsKey(pgApolloConstants.STR_ERROR_LIST))
					{
						slErrorList = (StringList)mapValidationOutput.get(pgApolloConstants.STR_ERROR_LIST);
					}
					
				}

			}

		}		
		
		context.printTrace(pgApolloConstants.TRACE_LPD, "PGAPPRequestUtil : validateAffectedItemsForImplementation <<: bChangesAlreadyImplemented :"+bChangesAlreadyImplemented);

		mapReturn.put(pgApolloConstants.STR_ERROR_LIST, mapValidationOutput.getOrDefault(pgApolloConstants.STR_ERROR_LIST, new StringList()));	
		mapReturn.put(pgApolloConstants.KEY_MESSAGE, mapValidationOutput.getOrDefault(pgApolloConstants.KEY_MESSAGE, new StringList()));
		
		mapReturn.put(PGAPPRequestConstants.KEY_TYPE_OF_CHANGE, sTypeOfChange);
		mapReturn.put(PGAPPRequestConstants.PGAPPREQUEST_STATE_IMPLEMENTED, bChangesAlreadyImplemented);
		mapReturn.put(PGAPPRequestConstants.KEY_IMPLEMENTED_ITEM_STATE, sImplementedItemLastCurrent);
		
		return mapReturn;
	}
	
	
	/**
	 * Method to get the picklist items as stringlist
	 * @param context
	 * @param strPickListName
	 * @return
	 * @throws MatrixException
	 */
	public static Object getStringListPickListItems(Context context, String strPickListName) throws MatrixException  {
		StringList slResult = new StringList();
		HashMap hmArgs=new HashMap();
		HashMap fieldMap=new HashMap();
		HashMap settings=new HashMap();

		settings.put("pgPicklistName", strPickListName);
		settings.put("Input Type","combobox");
		fieldMap.put("settings",settings);
		hmArgs.put("fieldMap",fieldMap);

		//invoke the corresponding method for particular field

		if(strPickListName.equals(PGAPPRequestConstants.CONST_PICKLIST_LIFECYCLESTATUS_EXPERIMENTAL) || 
				strPickListName.equals(PGAPPRequestConstants.CONST_PICKLIST_LIFECYCLESTATUS_PILOT) || 
				strPickListName.equals(PGAPPRequestConstants.CONST_PICKLIST_LIFECYCLESTATUS_PRODUCTION) || 
				strPickListName.equals(PGAPPRequestConstants.CONST_PICKLIST_LIFECYCLESTATUS_PRODUCTIONAPP)) {
			settings.put("pgPicklistSubset", strPickListName);
			slResult=JPO.invoke(context, "pgPLPicklist", null, "getPicklistSubsetRange",JPO.packArgs(hmArgs),StringList.class);
		}
		
		return slResult;
	}
	
	
	/**
	 * Method to get History Data
	 * @param context
	 * @param strObjId
	 * @param strTimeZone
	 * @return
	 */
	public static MapList getHistoryData(Context context, String strObjId) 
	{			
		String sUser    = DomainConstants.EMPTY_STRING;
		String sTime    = DomainConstants.EMPTY_STRING;
		String sDescription  = DomainConstants.EMPTY_STRING;
		String sState   = DomainConstants.EMPTY_STRING;
		String sAction   = DomainConstants.EMPTY_STRING;
		MapList mlHistoryList =  new MapList();
		String languageStr = "en-US";
		TimeZone tz=TimeZone.getTimeZone(context.getSession().getTimezone());
		int tzoff = tz.getRawOffset();
		Double timezone = ((double)tzoff /3600000);
		try 
		{
			BusinessObject businessObject = new BusinessObject(strObjId);
			StringList stringList1 = new StringList();		   
		    stringList1.add("history.event");
			stringList1.add("history.time");
			stringList1.add("history.user");
			stringList1.add("history.state");
			stringList1.add("history.description");
			stringList1.add("name");
			
			String strFormattedReportDate ;
			Map historyHashMap;

			BusinessObjectWithSelect businessObjectWithSelect = businessObject.select(context, stringList1);
			StringList timeArray = businessObjectWithSelect.getSelectDataList("history.time");
			StringList actionArray = businessObjectWithSelect.getSelectDataList("history.event");
			StringList userArray = businessObjectWithSelect.getSelectDataList("history.user");
			StringList stateArray = businessObjectWithSelect.getSelectDataList("history.state");
			StringList descriptionArray = businessObjectWithSelect.getSelectDataList("history.description");
		   
			String currStateTranslated = DomainConstants.EMPTY_STRING;
			
			for( int j=0; j < timeArray.size(); j++) 
			{
				sUser    = userArray.get(j);
				sTime    = timeArray.get(j);
				sAction    = actionArray.get(j);
				sDescription    = descriptionArray.get(j);
				sState   = stateArray.get(j);

				if(sState != null && !"null".equals(sState) && sState.length() > 0) {
					sState = sState.substring(sState.indexOf("state: ")+ 7,sState.length());
					sState=sState.trim();
				}

				if(sTime != null && !"null".equals(sTime) && sTime.length() > 0) {
					sTime = sTime.substring(sTime.indexOf("time: ")+ 6,sTime.length());
					sTime=sTime.trim();
				}

				if(sUser != null && !"null".equals(sUser) && sUser.length() > 0){
					sUser = sUser.substring(sUser.indexOf("user: ")+ 6,sUser.length());
					sUser=sUser.trim();
				}

                strFormattedReportDate = eMatrixDateFormat.getFormattedDisplayDateTime(context, sTime, true, eMatrixDateFormat.getEMatrixDisplayDateFormat(), timezone, context.getLocale());
				
				historyHashMap   = new HashMap();

				historyHashMap.put("sAction", sAction);
				sUser= PersonUtil.getFullName(context, sUser);
			
				historyHashMap.put("sUser", sUser);
				historyHashMap.put("sTime", strFormattedReportDate);
				historyHashMap.put("sDescription", sDescription);
				String translatedState=DomainConstants.EMPTY_STRING;

				if(sState!=null && sState.length()>0) {
				   translatedState=i18nNow.getStateI18NString("Organization",sState.trim(),languageStr);
						currStateTranslated = translatedState;
				}

				translatedState = currStateTranslated;
				historyHashMap.put("sState", sState);
				historyHashMap.put("translatedState", translatedState);

				mlHistoryList.add(historyHashMap);
			}

			return mlHistoryList;
		} catch (Exception e) {		
			logger.error(e.getMessage(), e);
		}
		
		return new MapList();
	}

	/**
	 * Method to validate Authentication
	 * @param context
	 * @return
	 * @throws Exception
	 */
	public static boolean validateAuthentication(matrix.db.Context context) throws Exception 
	{
		boolean isAuthorized = false;
		String sContextUser = context.getUser();
		if(UIUtil.isNotNullAndNotEmpty(sContextUser))
		{
			StringList slAPIAuthorizedUserList = getConfiguredAuthorizedUsers(context);
			if(slAPIAuthorizedUserList.contains(sContextUser))
			{
				isAuthorized = true; 
			}
		}
		return isAuthorized;
	}
	
	
	/**
	 * Method to get APP Request Approver Group Ids
	 * @param context
	 * @throws Exception
	 */
	public static StringList getConfiguredAuthorizedUsers(Context context)	throws Exception
	{
		
		StringList slAPIAuthorizedUserList = new StringList();

		 String sAPIAuthorizedUserList =  DomainConstants.EMPTY_STRING;

		 String strTypepgConfigurationAdmin =pgApolloConstants.TYPE_PGCONFIGURATIONADMIN;
		 
		 String strObjectId = pgApolloCommonUtil.getObjectId(context, strTypepgConfigurationAdmin, PGAPPRequestConstants.STR_PG_APPREQUEST_CONFIG, pgApolloConstants.CONSTANT_STRING_HYPHEN);
		 
		 if(UIUtil.isNotNullAndNotEmpty(strObjectId))
		 {
			 DomainObject domConfigObject = DomainObject.newInstance(context, strObjectId);
			 sAPIAuthorizedUserList = domConfigObject.getInfo(context, PGAPPRequestConstants.SELECT_ATTRIBUTE_DESIGNATEDUSER);	

		 }		
		
		if(UIUtil.isNotNullAndNotEmpty(sAPIAuthorizedUserList))
		{
			slAPIAuthorizedUserList = StringUtil.split(sAPIAuthorizedUserList, pgApolloConstants.CONSTANT_STRING_PIPE);
		}
		
		return slAPIAuthorizedUserList;
	}


	/**
	 * Method to validate Filter Criteria
	 * @param context
	 * @param mapFilterCriteria 
	 * @return
	 * @throws Exception 
	 */
	public static boolean validateFilterCriteria(Context context, Map mapFilterCriteria) throws Exception
	{
		boolean bReturn = true;
		
		StringList slValidFilterKeyList = new StringList();

		String sValidFilterKeyList =  pgApolloCommonUtil.getPageProperty(context, pgApolloConstants.STR_APOLLO_CONFIG_PAGE_FILENAME, "pgApolloConfiguration.APPRequestManagement.APIIntegration.ValidFilterKeys");

		if(UIUtil.isNotNullAndNotEmpty(sValidFilterKeyList))
		{
			slValidFilterKeyList = StringUtil.split(sValidFilterKeyList, pgApolloConstants.CONSTANT_STRING_PIPE);
		}
		
				
		if(null != mapFilterCriteria && !mapFilterCriteria.isEmpty())
		{
			Set<String> setFilterKeys = mapFilterCriteria.keySet();
			
			StringList slInputFilterKeys = new StringList();
			
			for(String sFilterKey : setFilterKeys)
			{
				if(!slValidFilterKeyList.contains(sFilterKey))
				{
					bReturn = false;
					break;
				}
			}
		}
		
		return bReturn;
	}

	
	/**
	 * Method to validate Create or Update Pay load
	 * @param context
	 * @param mapInput
	 * @return 
	 */
	public static Map validateCreatePayload(Context context, Map mapAllInput)
	{
		Map mapValidationResponse = new HashMap();
		
		MapList mlInputList = new MapList();
		String sErrorMessage;
		Set<String> setErrorList = new HashSet();

		try 
		{

			StringList slMandatoryPayloadKeyList = new StringList();

			String sMandatoryPayloadKeys =  pgApolloCommonUtil.getPageProperty(context, pgApolloConstants.STR_APOLLO_CONFIG_PAGE_FILENAME, "pgApolloConfiguration.APPRequestManagement.APIIntegration.RequestData.Create.MandatoryPayloadKeys");

			if(UIUtil.isNotNullAndNotEmpty(sMandatoryPayloadKeys))
			{
				slMandatoryPayloadKeyList = StringUtil.split(sMandatoryPayloadKeys, pgApolloConstants.CONSTANT_STRING_PIPE);
			}			
		
			mlInputList = (MapList)mapAllInput.get(PGAPPRequestConstants.KEY_DATA);
			
			Map mapInput;
			MapList mlRequestLineItems;
			Map mapRequestLineItem;
			Set<String> setKeys = new HashSet();
			Set<String> setPayloadKeys;
			Set<String> setRequestLineItemKeys;
			String sAffectedItem;
			String sAffectedItemPhysicalId;
			Map mapAffectedItem;
			Set<String> setMissingKeyList;
			Set<String> setAllMissingKeyList = new HashSet();
			Set<String> setInvalidSizeList = new HashSet();
			Map mapValidation;
			Set<String> setLocalErrorList;

			Set<String> setAllMissingInvalidPickList = new HashSet();			
			Set<String> setMissingInvalidPicklist;
			
			Set<String> setAllInvalidAffectedItemList = new HashSet();			
			Set<String> setInvalidAffectedItemlist;

			StringList slMandatoryKeyValue;

			if(null != mlInputList && !mlInputList.isEmpty())
			{
				for(Object objMap : mlInputList)
				{
					mapInput  = (Map)objMap;
					
					setMissingKeyList = new HashSet();
					
					setMissingInvalidPicklist = new HashSet();
					
					setInvalidAffectedItemlist = new HashSet();
					
					setKeys = mapInput.keySet();
					
					for(String sLocalKey : setKeys)
					{
						if(slMandatoryPayloadKeyList.contains(sLocalKey))
						{
							slMandatoryKeyValue = pgApolloCommonUtil.getStringListMultiValue(mapInput.get(sLocalKey));
							if(slMandatoryKeyValue.isEmpty())
							{
								setMissingKeyList.add(sLocalKey);
							}
						}
					}
					
					setPayloadKeys = new HashSet();
					setPayloadKeys.addAll(setKeys);
					
					mlRequestLineItems = (MapList)mapInput.get(PGAPPRequestConstants.KEY_REQUEST_LINE_ITEMS);
					
					if(null != mlRequestLineItems && !mlRequestLineItems.isEmpty())
					{
						for(Object objRequestLineMap : mlRequestLineItems)
						{
							mapRequestLineItem = (Map)objRequestLineMap;
							
							sAffectedItem = (String)mapRequestLineItem.get(PGAPPRequestConstants.KEY_AFFECTED_ITEM);
							
							sAffectedItemPhysicalId = (String)mapRequestLineItem.get(PGAPPRequestConstants.KEY_AFFECTED_ITEM_PHYSICAL_ID);
							
							if(UIUtil.isNullOrEmpty(sAffectedItem) && UIUtil.isNullOrEmpty(sAffectedItemPhysicalId))
							{
								//Affected Item Missing
								setMissingKeyList.add(PGAPPRequestConstants.KEY_AFFECTED_ITEM);
							}
							else
							{
								//Add Affected Item Key
								setPayloadKeys.add(PGAPPRequestConstants.KEY_AFFECTED_ITEM);
								
								mapAffectedItem = getAffectedItemMap(context, mapRequestLineItem);
								
								sAffectedItemPhysicalId = (String)mapAffectedItem.get(PGAPPRequestConstants.KEY_AFFECTED_ITEM_PHYSICAL_ID);		

								if(UIUtil.isNullOrEmpty(sAffectedItemPhysicalId))
								{
									setInvalidAffectedItemlist.add(sAffectedItem);
								}
							}
							
							setRequestLineItemKeys = mapRequestLineItem.keySet();
						}
					}
					else
					{
						setMissingKeyList.add(PGAPPRequestConstants.KEY_REQUEST_LINE_ITEMS);
					}
					
					setAllInvalidAffectedItemList.addAll(setInvalidAffectedItemlist);
					setAllMissingKeyList.addAll(setMissingKeyList);
					
					if(!setPayloadKeys.containsAll(slMandatoryPayloadKeyList))
					{
						for(String sMandatoryKey : slMandatoryPayloadKeyList)
						{
							if(!setPayloadKeys.contains(sMandatoryKey))
							{
								setAllMissingKeyList.add(sMandatoryKey);
							}
						}
					}
					
					StringList slSize = (StringList)mapInput.get(pgApolloConstants.STR_PRODUCT_SIZE);
					if(null != slSize && pgApolloCommonUtil.containsInListCaseInsensitive(pgApolloConstants.STR_ALL, slSize) && slSize.size() > 1)
					{
						setInvalidSizeList.addAll(slSize);
					}					
					
					mapValidation = validatePicklistValues(context, mapInput);
					setLocalErrorList = (Set<String>)mapValidation.get(pgApolloConstants.STR_ERROR);
					setErrorList.addAll(setLocalErrorList);
					setMissingInvalidPicklist = (Set<String>)mapValidation.get(PGAPPRequestConstants.KEY_INVALID_PICKLIST);
					setAllMissingInvalidPickList.addAll(setMissingInvalidPicklist);

				}
				
				if(!setInvalidSizeList.isEmpty())
				{
					StringList slInvalidSizeList = new StringList();
					slInvalidSizeList.addAll(setInvalidSizeList);
					
					String sInvalidSizePickListMessage = new StringBuilder(PGAPPRequestConstants.STR_ERROR_INVALID_SIZEVALUES).append(pgApolloConstants.CONSTANT_STRING_COLON).append(slInvalidSizeList.join(pgApolloConstants.CONSTANT_STRING_COMMA)).toString();
					
					setErrorList.add(sInvalidSizePickListMessage);
				}
				
				if(!setAllInvalidAffectedItemList.isEmpty())
				{
					StringList slInvalidAffectedItemValues = new StringList();
					slInvalidAffectedItemValues.addAll(setAllInvalidAffectedItemList);
					
					String sMissingInvalidAffectedItemMessage = new StringBuilder(PGAPPRequestConstants.STR_ERROR_INVALID_AFFECTED_ITEM).append(pgApolloConstants.CONSTANT_STRING_COLON).append(slInvalidAffectedItemValues.join(pgApolloConstants.CONSTANT_STRING_COMMA)).toString();
					
					setErrorList.add(sMissingInvalidAffectedItemMessage);
				}
				
				if(!setAllMissingInvalidPickList.isEmpty())
				{
					StringList slMissinInValidPickListValues = new StringList();
					slMissinInValidPickListValues.addAll(setAllMissingInvalidPickList);
					
					String sMissingInvalidPicklistMessage = new StringBuilder(PGAPPRequestConstants.STR_ERROR_MISSING_INVALID_PICKLIST).append(pgApolloConstants.CONSTANT_STRING_COLON).append(slMissinInValidPickListValues.join(pgApolloConstants.CONSTANT_STRING_COMMA)).toString();
					
					setErrorList.add(sMissingInvalidPicklistMessage);
				}
				
				if(!setAllMissingKeyList.isEmpty())
				{
					StringList slMissingKeys = new StringList();
					slMissingKeys.addAll(setAllMissingKeyList);
					
					String sMissingKeyMessage = new StringBuilder(PGAPPRequestConstants.STR_ERROR_MISSING_MANDATORY_KEYS).append(pgApolloConstants.CONSTANT_STRING_COLON).append(slMissingKeys.join(pgApolloConstants.CONSTANT_STRING_COMMA)).toString();
					
					setErrorList.add(sMissingKeyMessage);
				}
				
			}

		}
		catch (Exception e)
		{
			logger.error(e.getMessage(), e);
			mapValidationResponse.put(PGAPPRequestConstants.KEY_RESPONSEKEY_STATUS, pgApolloConstants.STR_FAILED);
			sErrorMessage = e.getLocalizedMessage();
			setErrorList.add(sErrorMessage);
		}	
		
		if(!setErrorList.isEmpty())
		{
			StringList slErrorList = new StringList();
			slErrorList.addAll(setErrorList);
			
			String sError = StringUtil.join(slErrorList, ";");
			
			mapValidationResponse.put(pgApolloConstants.STR_ERROR, sError);	
			
			mapValidationResponse.put(PGAPPRequestConstants.KEY_RESPONSEKEY_STATUS, pgApolloConstants.STR_FAILED);

		}
		else
		{
			mapValidationResponse.put(PGAPPRequestConstants.KEY_RESPONSEKEY_STATUS, pgApolloConstants.STR_SUCCESS);
		}
		
		return mapValidationResponse;
		
	}
	

	/**
	 * Method to validate Create or Update Pay load
	 * @param context
	 * @param mapInput
	 * @return 
	 */
	public static Map validateUpdatePayload(Context context, Map mapAllInput)
	{
		Map mapValidationResponse = new HashMap();
		
		MapList mlInputList = new MapList();
		String sErrorMessage;
		Set<String> setErrorList = new HashSet();

		try 
		{

			StringList slMandatoryPayloadKeyList = new StringList();

			String sMandatoryPayloadKeys =  pgApolloCommonUtil.getPageProperty(context, pgApolloConstants.STR_APOLLO_CONFIG_PAGE_FILENAME, "pgApolloConfiguration.APPRequestManagement.APIIntegration.RequestData.Update.MandatoryPayloadKeys");

			if(UIUtil.isNotNullAndNotEmpty(sMandatoryPayloadKeys))
			{
				slMandatoryPayloadKeyList = StringUtil.split(sMandatoryPayloadKeys, pgApolloConstants.CONSTANT_STRING_PIPE);
			}
			
			mlInputList = (MapList)mapAllInput.get(PGAPPRequestConstants.KEY_DATA);
			
			Map mapInput;
			MapList mlRequestLineItems;
			Map mapRequestLineItem;
			Set<String> setKeys;
			Set<String> setLocalErrorList;
			Set<String> setPayloadKeys;
			Set<String> setAffectedItemListForAddition = new HashSet();
			StringList slExistingAffectedItems;
			Set<String> setDuplicateAffectedItems;
			Set<String> setAllDuplicateAffectedItemList = new HashSet();			
			String sAction;
			String sAffectedItem;
			String sAffectedItemPhysicalId;
			Map mapObject;
			String sRequestId;
			Set<String> setMissingKeyList;
			Set<String> setAllMissingKeyList = new HashSet();
			Set<String> setAllInvalidRequestSetList = new HashSet();

			Set<String> setAllMissingInvalidPickList = new HashSet();			
			Set<String> setMissingInvalidPicklist;
			Map mapValidationRequestData;
			
			Set<String> setAllInvalidAffectedItemList = new HashSet();			
			Set<String> setInvalidAffectedItemlist;
			Set<String> setInvalidSizeList = new HashSet();

			
			Map mapAffectedItem;

			if(null != mlInputList && !mlInputList.isEmpty())
			{
				for(Object objMap : mlInputList)
				{
					mapInput  = (Map)objMap;	
					
					if(mapInput.containsKey(PGAPPRequestConstants.KEY_TYPE_OF_CHANGE))
					{
						setErrorList.add(PGAPPRequestConstants.STR_ERROR_UPDATE_REQUEST_FAIL_TYPE_OF_CHANGE_PRESENT);
					}
					
					setMissingKeyList = new HashSet();	
					setDuplicateAffectedItems = new HashSet();
					
					setInvalidAffectedItemlist = new HashSet();
					
					mlRequestLineItems = (MapList)mapInput.get(PGAPPRequestConstants.KEY_REQUEST_LINE_ITEMS);

					setKeys = mapInput.keySet();
					
					setPayloadKeys = new HashSet();
					setPayloadKeys.addAll(setKeys);
					
					if(null != mlRequestLineItems && !mlRequestLineItems.isEmpty())
					{
						for(Object objRequestLineMap : mlRequestLineItems)
						{
							mapRequestLineItem = (Map)objRequestLineMap;
							
							if(!mapRequestLineItem.isEmpty())
							{
								sAction = (String)mapRequestLineItem.get(PGAPPRequestConstants.KEY_ACTION);
								
								sAffectedItem = (String)mapRequestLineItem.get(PGAPPRequestConstants.KEY_AFFECTED_ITEM);
								
								sRequestId = (String)mapRequestLineItem.get(PGAPPRequestConstants.KEY_REQUEST_ID);
								
								sAffectedItemPhysicalId = (String)mapRequestLineItem.get(PGAPPRequestConstants.KEY_AFFECTED_ITEM_PHYSICAL_ID);
								
								if(UIUtil.isNullOrEmpty(sAffectedItem) && UIUtil.isNullOrEmpty(sAffectedItemPhysicalId))
								{
									//Affected Item Missing
									setMissingKeyList.add(PGAPPRequestConstants.KEY_AFFECTED_ITEM);
								}
								else
								{
									setPayloadKeys.add(PGAPPRequestConstants.KEY_AFFECTED_ITEM);							
								}	
								
								if(UIUtil.isNotNullAndNotEmpty(sRequestId))
								{
									setErrorList.add(PGAPPRequestConstants.STR_ERROR_NOT_ALLOWED_OPERATION_REQUEST);
								}
								
								if(UIUtil.isNullOrEmpty(sAction))
								{								
									//Missing Action in Request Line Items
									setErrorList.add(PGAPPRequestConstants.STR_ERROR_MISSING_ACTION);
								}
								else if(!PGAPPRequestConstants.STR_ACTION_ADD.equalsIgnoreCase(sAction))
								{
									//Invalid Action in Request Line Items
									setErrorList.add(PGAPPRequestConstants.STR_ERROR_INVALID_ACTION);
								}
								else if(mapRequestLineItem.containsKey(PGAPPRequestConstants.KEY_AFFECTED_ITEM) && PGAPPRequestConstants.STR_ACTION_ADD.equalsIgnoreCase(sAction))
								{
									sAffectedItem = (String)mapRequestLineItem.get(PGAPPRequestConstants.KEY_AFFECTED_ITEM);
									setAffectedItemListForAddition.add(sAffectedItem);
									
									mapAffectedItem = getAffectedItemMap(context, mapRequestLineItem);
									
									sAffectedItemPhysicalId = (String)mapAffectedItem.get(PGAPPRequestConstants.KEY_AFFECTED_ITEM_PHYSICAL_ID);		

									if(UIUtil.isNullOrEmpty(sAffectedItemPhysicalId))
									{
										setInvalidAffectedItemlist.add(sAffectedItem);
									}
								}
							}
							else
							{
								//Affected Item Missing
								setMissingKeyList.add(PGAPPRequestConstants.KEY_AFFECTED_ITEM);
								setErrorList.add(PGAPPRequestConstants.STR_ERROR_MISSING_ACTION);
							}

						}

						
						if(!setMissingKeyList.isEmpty())
						{
							slMandatoryPayloadKeyList.addAll(setMissingKeyList);
						}					
						
						if(!setPayloadKeys.containsAll(slMandatoryPayloadKeyList))
						{
							for(String sMandatoryKey : slMandatoryPayloadKeyList)
							{
								if(!setPayloadKeys.contains(sMandatoryKey))
								{
									setAllMissingKeyList.add(sMandatoryKey);
								}
							}
						}
						
					}
					
					setAllInvalidAffectedItemList.addAll(setInvalidAffectedItemlist);
					
					StringList slSize = (StringList)mapInput.get(pgApolloConstants.STR_PRODUCT_SIZE);
					if(null != slSize && pgApolloCommonUtil.containsInListCaseInsensitive(pgApolloConstants.STR_ALL, slSize) && slSize.size() > 1)
					{
						setInvalidSizeList.addAll(slSize);
					}		

					if(mapInput.containsKey(PGAPPRequestConstants.KEY_REQUEST_SET_ID))
					{						
						String sAPPRequestDataName = (String)mapInput.get(PGAPPRequestConstants.KEY_REQUEST_SET_ID);
						mapObject = pgApolloCommonUtil.getLatestRevisionMap(context, PGAPPRequestConstants.TYPE_PGAPPREQUESTDATA, sAPPRequestDataName, pgApolloConstants.CONSTANT_STRING_HYPHEN);	
						String sAPPRequestDataPhysicalId = (String)mapObject.get(DomainConstants.SELECT_PHYSICAL_ID);	
						
						if(UIUtil.isNotNullAndNotEmpty(sAPPRequestDataPhysicalId))
						{
							mapValidationRequestData = validatePicklistAndExistingData(context, mapInput, sAPPRequestDataPhysicalId);
							setMissingInvalidPicklist = (Set<String>)mapValidationRequestData.get(PGAPPRequestConstants.KEY_MISSING_PICKLIST);
							slExistingAffectedItems = (StringList)mapValidationRequestData.get(PGAPPRequestConstants.KEY_AFFECTED_ITEM);
							setLocalErrorList = (Set<String>)mapValidationRequestData.get(pgApolloConstants.STR_ERROR);
							setErrorList.addAll(setLocalErrorList);
							
							for(String sAffectedItemToAdd : setAffectedItemListForAddition)
							{
								if(slExistingAffectedItems.contains(sAffectedItemToAdd))
								{
									setDuplicateAffectedItems.add(sAffectedItemToAdd);
								}
							}

							setAllDuplicateAffectedItemList.addAll(setDuplicateAffectedItems);

							setAllMissingInvalidPickList.addAll(setMissingInvalidPicklist);
						}
						else
						{
							setAllInvalidRequestSetList.add(sAPPRequestDataName);
						}
						
						
					}
					else
					{
						setAllMissingKeyList.add(PGAPPRequestConstants.KEY_REQUEST_SET_ID);
					}		
					
				}
				
				if(!setInvalidSizeList.isEmpty())
				{
					StringList slInvalidSizeList = new StringList();
					slInvalidSizeList.addAll(setInvalidSizeList);
					
					String sInvalidSizePickListMessage = new StringBuilder(PGAPPRequestConstants.STR_ERROR_INVALID_SIZEVALUES).append(pgApolloConstants.CONSTANT_STRING_COLON).append(slInvalidSizeList.join(pgApolloConstants.CONSTANT_STRING_COMMA)).toString();
					
					setErrorList.add(sInvalidSizePickListMessage);
				}
				
				if(!setAllInvalidAffectedItemList.isEmpty())
				{
					StringList slInvalidAffectedItemValues = new StringList();
					slInvalidAffectedItemValues.addAll(setAllInvalidAffectedItemList);
					
					String sMissingInvalidAffectedItemMessage = new StringBuilder(PGAPPRequestConstants.STR_ERROR_INVALID_AFFECTED_ITEM).append(pgApolloConstants.CONSTANT_STRING_COLON).append(slInvalidAffectedItemValues.join(pgApolloConstants.CONSTANT_STRING_COMMA)).toString();
					
					setErrorList.add(sMissingInvalidAffectedItemMessage);
				}
				
				if(!setAllInvalidRequestSetList.isEmpty())
				{
					StringList slInvalidRequestSetValues = new StringList();
					slInvalidRequestSetValues.addAll(setAllInvalidRequestSetList);
					
					String sMissingInvalidRequestSetMessage = new StringBuilder(PGAPPRequestConstants.STR_ERROR_INVALID_REQUEST_SET).append(pgApolloConstants.CONSTANT_STRING_COLON).append(slInvalidRequestSetValues.join(pgApolloConstants.CONSTANT_STRING_COMMA)).toString();
					
					setErrorList.add(sMissingInvalidRequestSetMessage);
				}
				
				if(!setAllDuplicateAffectedItemList.isEmpty())
				{
					StringList slAllDuplicateAffectedItemList = new StringList();
					slAllDuplicateAffectedItemList.addAll(setAllDuplicateAffectedItemList);
					
					String sDuplicateAffectedItemMessage = new StringBuilder(PGAPPRequestConstants.STR_ERROR_DUPLICATE_AFFECTEDITEM_FORADDITION).append(pgApolloConstants.CONSTANT_STRING_COLON).append(slAllDuplicateAffectedItemList.join(pgApolloConstants.CONSTANT_STRING_COMMA)).toString();
					
					setErrorList.add(sDuplicateAffectedItemMessage);
				}
				
				if(!setAllMissingInvalidPickList.isEmpty())
				{
					StringList slMissinInValidPickListValues = new StringList();
					slMissinInValidPickListValues.addAll(setAllMissingInvalidPickList);
					
					String sMissingInvalidPicklistMessage = new StringBuilder(PGAPPRequestConstants.STR_ERROR_MISSING_INVALID_PICKLIST).append(pgApolloConstants.CONSTANT_STRING_COLON).append(slMissinInValidPickListValues.join(pgApolloConstants.CONSTANT_STRING_COMMA)).toString();
					
					setErrorList.add(sMissingInvalidPicklistMessage);
				}
				
				if(!setAllMissingKeyList.isEmpty())
				{
					StringList slMissingKeys = new StringList();
					slMissingKeys.addAll(setAllMissingKeyList);
					
					String sMissingKeyMessage = new StringBuilder(PGAPPRequestConstants.STR_ERROR_MISSING_MANDATORY_KEYS).append(pgApolloConstants.CONSTANT_STRING_COLON).append(slMissingKeys.join(pgApolloConstants.CONSTANT_STRING_COMMA)).toString();
					
					setErrorList.add(sMissingKeyMessage);
				}
				
			}

		}
		catch (Exception e)
		{
			logger.error(e.getMessage(), e);
			mapValidationResponse.put(PGAPPRequestConstants.KEY_RESPONSEKEY_STATUS, pgApolloConstants.STR_FAILED);
			sErrorMessage = e.getLocalizedMessage();
			setErrorList.add(sErrorMessage);
		}	
		
		if(!setErrorList.isEmpty())
		{
			StringList slErrorList = new StringList();
			slErrorList.addAll(setErrorList);
			
			String sError = StringUtil.join(slErrorList, ";");
			
			mapValidationResponse.put(pgApolloConstants.STR_ERROR, sError);			
			mapValidationResponse.put(PGAPPRequestConstants.KEY_RESPONSEKEY_STATUS, pgApolloConstants.STR_FAILED);

		}
		else
		{
			mapValidationResponse.put(PGAPPRequestConstants.KEY_RESPONSEKEY_STATUS, pgApolloConstants.STR_SUCCESS);
		}
		
		
		return mapValidationResponse;
	}
	
	
	/**
	 * Method to validate picklist values
	 * @param context
	 * @param mapInput
	 * @return
	 * @throws Exception 
	 */
	public static Map validatePicklistAndExistingData(Context context, Map mapInput, String sRequestDataPhysicalId) throws Exception
	{
		Map mapReturn = new HashMap();
		Set<String> setErrorList = new HashSet();
		Set<String> setLocalErrorList = new HashSet();
		Map mapValidation;

		if(UIUtil.isNotNullAndNotEmpty(sRequestDataPhysicalId))
		{

			String sRequestDataRequestStateSelectable = new StringBuilder("from[").append(PGAPPRequestConstants.RELATIONSHIP_PGAPPREQUESTCHANGEDATA).append("].to.").append(DomainConstants.SELECT_CURRENT).toString();
			String sRequestDataAffectedItemSelectable = new StringBuilder("from[").append(PGAPPRequestConstants.RELATIONSHIP_PGAPPREQUESTCHANGEDATA).append("].to.from[").append(PGAPPRequestConstants.RELATIONSHIP_PGAPPREQUESTAFFECTEDITEM).append("].to.name").toString();

			DomainObject domAPPRequestDataObject = DomainObject.newInstance(context, sRequestDataPhysicalId);
			
			StringList slRequestDataSelects = new StringList();
			slRequestDataSelects.add(DomainConstants.SELECT_PHYSICAL_ID);
			slRequestDataSelects.add(sRequestDataAffectedItemSelectable);
			slRequestDataSelects.add(sRequestDataRequestStateSelectable);
			StringList slPickListSelectable = new StringList();
			updateSelectableBasedOnPicklist(mapInput, slPickListSelectable, pgApolloConstants.STR_AUTOMATION_BUSINESSAREA, pgApolloConstants.SELECT_ATTRIBUTE_ENTERPRISEPART_PGBUSINESSAREA);
			updateSelectableBasedOnPicklist(mapInput, slPickListSelectable, pgApolloConstants.STR_AUTOMATION_PRODUCTCATEGORYPLATFORM, pgApolloConstants.SELECT_ATTRIBUTE_ENTERPRISEPART_PGPRODUCTCATEGORYPLATFORM);
			updateSelectableBasedOnPicklist(mapInput, slPickListSelectable, pgApolloConstants.STR_AUTOMATION_PRODUCTTECHNOLOGYPLATFORM, pgApolloConstants.SELECT_ATTRIBUTE_ENTERPRISEPART_PGPRODUCTTECHNOLOGYPLATFORM);
			updateSelectableBasedOnPicklist(mapInput, slPickListSelectable, pgApolloConstants.STR_AUTOMATION_PRODUCTTECHNOLOGYCHASSIS, pgApolloConstants.SELECT_ATTRIBUTE_ENTERPRISEPART_PGPRODUCTTECHNOLOGYCHASSIS);
			updateSelectableBasedOnPicklist(mapInput, slPickListSelectable, pgApolloConstants.STR_AUTOMATION_FRANCHISEPLATFORM, pgApolloConstants.SELECT_ATTRIBUTE_ENTERPRISEPART_PGFRANCHISEPLATFORM);
			updateSelectableBasedOnPicklist(mapInput, slPickListSelectable, pgApolloConstants.STR_PRODUCT_SIZE, PGAPPRequestConstants.SELECT_ATTRIBUTE_PG_LPD_MULTI_SIZE);
			updateSelectableBasedOnPicklist(mapInput, slPickListSelectable, PGAPPRequestConstants.KEY_LPDREGION, PGAPPRequestConstants.SELECT_ATTRIBUTE_PG_LPD_MULTI_REGION);
			updateSelectableBasedOnPicklist(mapInput, slPickListSelectable, PGAPPRequestConstants.KEY_LPDSUBREGION, PGAPPRequestConstants.SELECT_ATTRIBUTE_PG_LPD_MULTI_SUBREGION);
			slRequestDataSelects.addAll(slPickListSelectable);
			
			StringList slRequestDataMultiValueSelects = new StringList();
			slRequestDataMultiValueSelects.add(sRequestDataAffectedItemSelectable);
			slRequestDataMultiValueSelects.add(sRequestDataRequestStateSelectable);
			slRequestDataMultiValueSelects.addAll(slPickListSelectable);
			
			Map mapRequestDataInfo = domAPPRequestDataObject.getInfo(context, slRequestDataSelects, slRequestDataMultiValueSelects);
					
			StringList slAffectedItemList = pgApolloCommonUtil.getStringListMultiValue(mapRequestDataInfo.get(sRequestDataAffectedItemSelectable));
			
			StringList slRequestStateList = pgApolloCommonUtil.getStringListMultiValue(mapRequestDataInfo.get(sRequestDataRequestStateSelectable));

			updateInputMapBasedOnPicklist(mapInput, mapRequestDataInfo, pgApolloConstants.STR_AUTOMATION_BUSINESSAREA, pgApolloConstants.SELECT_ATTRIBUTE_ENTERPRISEPART_PGBUSINESSAREA);
			updateInputMapBasedOnPicklist(mapInput, mapRequestDataInfo, pgApolloConstants.STR_AUTOMATION_PRODUCTCATEGORYPLATFORM, pgApolloConstants.SELECT_ATTRIBUTE_ENTERPRISEPART_PGPRODUCTCATEGORYPLATFORM);
			updateInputMapBasedOnPicklist(mapInput, mapRequestDataInfo, pgApolloConstants.STR_AUTOMATION_PRODUCTTECHNOLOGYPLATFORM, pgApolloConstants.SELECT_ATTRIBUTE_ENTERPRISEPART_PGPRODUCTTECHNOLOGYPLATFORM);
			updateInputMapBasedOnPicklist(mapInput, mapRequestDataInfo, pgApolloConstants.STR_AUTOMATION_PRODUCTTECHNOLOGYCHASSIS, pgApolloConstants.SELECT_ATTRIBUTE_ENTERPRISEPART_PGPRODUCTTECHNOLOGYCHASSIS);
			updateInputMapBasedOnPicklist(mapInput, mapRequestDataInfo, pgApolloConstants.STR_AUTOMATION_FRANCHISEPLATFORM, pgApolloConstants.SELECT_ATTRIBUTE_ENTERPRISEPART_PGFRANCHISEPLATFORM);
			updateInputMapBasedOnPicklist(mapInput, mapRequestDataInfo, pgApolloConstants.STR_PRODUCT_SIZE, PGAPPRequestConstants.SELECT_ATTRIBUTE_PG_LPD_MULTI_SIZE);
			updateInputMapBasedOnPicklist(mapInput, mapRequestDataInfo, PGAPPRequestConstants.KEY_LPDREGION, PGAPPRequestConstants.SELECT_ATTRIBUTE_PG_LPD_MULTI_REGION);
			updateInputMapBasedOnPicklist(mapInput, mapRequestDataInfo, PGAPPRequestConstants.KEY_LPDSUBREGION, PGAPPRequestConstants.SELECT_ATTRIBUTE_PG_LPD_MULTI_SUBREGION);

			mapValidation = validatePicklistValues(context, mapInput);
			setLocalErrorList = (Set<String>)mapValidation.get(pgApolloConstants.STR_ERROR);
			setErrorList.addAll(setLocalErrorList);
			Set<String > setMissingInvalidPickListValues = (Set<String>)mapValidation.get(PGAPPRequestConstants.KEY_INVALID_PICKLIST);
			
			mapReturn.put(PGAPPRequestConstants.KEY_MISSING_PICKLIST, setMissingInvalidPickListValues);
			
			mapReturn.put(PGAPPRequestConstants.KEY_AFFECTED_ITEM, slAffectedItemList);
			
			if(!slRequestStateList.isEmpty())
			{
				boolean bRequestCreate = false;
				
				for(String sRequestState : slRequestStateList)
				{
					if(PGAPPRequestConstants.PGAPPREQUEST_STATE_CREATE.equals(sRequestState))
					{
						bRequestCreate = true;
					}
					else if(!PGAPPRequestConstants.PGAPPREQUEST_STATE_REJECTED.equals(sRequestState) && !PGAPPRequestConstants.PGAPPREQUEST_STATE_CANCELLED.equals(sRequestState))
					{
						bRequestCreate = false;
						break;
					}
						
				}
				
				if(!bRequestCreate)
				{
					setErrorList.add(PGAPPRequestConstants.STR_ERROR_UPDATE_NO_CREATE_OR_INPROGRESS_APPREQUEST);
				}
			}			


		}
		
		mapReturn.put(pgApolloConstants.STR_ERROR, setErrorList);

		return mapReturn;
	}
	
	
	/**
	 * Method to Update Selectable based on picklist
	 * @param mapInput
	 * @param slRequestDataSelects
	 * @param strAutomationBusinessarea
	 * @param selectAttributeEnterprisepartPgbusinessarea
	 */
	private static StringList updateSelectableBasedOnPicklist(Map mapInput, StringList slRequestDataSelects,String sPicklistKey, String sPickListAttributeSelectable) 
	{
		if(!mapInput.containsKey(sPicklistKey))
		{
			slRequestDataSelects.add(sPickListAttributeSelectable);
		}
		
		return slRequestDataSelects;
	}
	
	/**
	 * Method to Update Input Map based on picklist
	 * @param mapInput
	 * @param sPicklistKey
	 * @param sPickListAttributeSelectable
	 * @return
	 */
	private static Map updateInputMapBasedOnPicklist(Map mapInput, Map mapAttributes, String sPicklistKey, String sPickListAttributeSelectable) 
	{
		if(!mapInput.containsKey(sPicklistKey) && mapAttributes.containsKey(sPickListAttributeSelectable))
		{
			StringList slAttributeValues = pgApolloCommonUtil.getStringListMultiValue(mapAttributes.get(sPickListAttributeSelectable));
			mapInput.put(sPicklistKey, slAttributeValues);
		}
		
		return mapInput;
	}


	/**
	 * Method to validate picklist values
	 * @param context
	 * @param mapInput
	 * @return
	 * @throws Exception 
	 */
	public static Map validatePicklistValues(Context context, Map mapInput) throws Exception
	{
		Map mapValidation = new HashMap();
		
		boolean bEmptyPicklist = false;
		
		Set<String> setError = new HashSet();	

		Set<String> setMissingInvalidPicklist = new HashSet();		
		
		Map mapNewInputData = new HashMap();
		
		StringList slBusinessArea = (StringList)mapInput.get(pgApolloConstants.STR_AUTOMATION_BUSINESSAREA);
		StringList slPCP = (StringList)mapInput.get(pgApolloConstants.STR_AUTOMATION_PRODUCTCATEGORYPLATFORM);
		StringList slPTP = (StringList)mapInput.get(pgApolloConstants.STR_AUTOMATION_PRODUCTTECHNOLOGYPLATFORM);
		StringList slPTC = (StringList)mapInput.get(pgApolloConstants.STR_AUTOMATION_PRODUCTTECHNOLOGYCHASSIS);
		StringList slFranchise = (StringList)mapInput.get(pgApolloConstants.STR_AUTOMATION_FRANCHISEPLATFORM);
		StringList slSize = (StringList)mapInput.get(pgApolloConstants.STR_PRODUCT_SIZE);
		if(pgApolloCommonUtil.containsInListCaseInsensitive(pgApolloConstants.STR_ALL, slSize))
		{
			slSize = new StringList();
		}
		StringList slRegion = (StringList)mapInput.get(PGAPPRequestConstants.KEY_LPDREGION);
		StringList slSubRegion = (StringList)mapInput.get(PGAPPRequestConstants.KEY_LPDSUBREGION);
		StringList slPlantList = (StringList)mapInput.get(pgApolloConstants.TYPE_PLANT);
		
		if(slBusinessArea.contains(DomainConstants.EMPTY_STRING) ||
				slPCP.contains(DomainConstants.EMPTY_STRING) || 
				slPTP.contains(DomainConstants.EMPTY_STRING) ||
				slPTC.contains(DomainConstants.EMPTY_STRING) ||
				slFranchise.contains(DomainConstants.EMPTY_STRING) ||
				slSize.contains(DomainConstants.EMPTY_STRING) ||
				slRegion.contains(DomainConstants.EMPTY_STRING) ||
				slSubRegion.contains(DomainConstants.EMPTY_STRING) ||
				slPlantList.contains(DomainConstants.EMPTY_STRING)
				)
		{
			bEmptyPicklist = true;
		}
		
		if(!bEmptyPicklist)
		{
			pgApolloCommonUtil.validateAndGetPicklistItem(context, mapNewInputData, pgApolloConstants.STR_AUTOMATION_BUSINESSAREA, slBusinessArea);
			pgApolloCommonUtil.validateAndGetPicklistItem(context, mapNewInputData, pgApolloConstants.STR_AUTOMATION_PRODUCTCATEGORYPLATFORM, slPCP);		
			pgApolloCommonUtil.validateAndGetPicklistItem(context, mapNewInputData, pgApolloConstants.STR_AUTOMATION_PRODUCTTECHNOLOGYPLATFORM, slPTP);		
			pgApolloCommonUtil.validateAndGetPicklistItem(context, mapNewInputData, pgApolloConstants.STR_AUTOMATION_PRODUCTTECHNOLOGYCHASSIS, slPTC);		
			pgApolloCommonUtil.validateAndGetPicklistItem(context, mapNewInputData, pgApolloConstants.STR_AUTOMATION_FRANCHISEPLATFORM, slFranchise);		
			pgApolloCommonUtil.validateAndGetPicklistItem(context, mapNewInputData, pgApolloConstants.STR_AUTOMATION_SIZE, slSize);		
			pgApolloCommonUtil.validateAndGetPicklistItem(context, mapNewInputData, pgApolloConstants.STR_AUTOMATION_REGION, slRegion);		
			pgApolloCommonUtil.validateAndGetPicklistItem(context, mapNewInputData, pgApolloConstants.STR_AUTOMATION_SUBREGION, slSubRegion);		
			pgApolloCommonUtil.validateAndGetPicklistItem(context, mapNewInputData, pgApolloConstants.TYPE_PLANT, slPlantList);	
			
			if(mapNewInputData.containsKey(pgApolloConstants.STR_ERROR))
			{
				setMissingInvalidPicklist = (Set<String>)mapNewInputData.get(pgApolloConstants.STR_ERROR);
			}
			
			if(setMissingInvalidPicklist.contains(DomainConstants.EMPTY_STRING))
			{
				setMissingInvalidPicklist.remove(DomainConstants.EMPTY_STRING);
			}
		}	
		
		if(bEmptyPicklist)
		{
			setError.add(PGAPPRequestConstants.STR_ERROR_EMPTY_PICKLIST);
		}
		mapValidation.put(pgApolloConstants.STR_ERROR, setError);
		mapValidation.put(PGAPPRequestConstants.KEY_INVALID_PICKLIST, setMissingInvalidPicklist);
		

		return mapValidation;
	}
	
	/**
	 * Method to convert date format from Ag grid to Ematrix Format
	 * @param inputDate
	 * @return
	 */
	public static String convertUIToEmatrixDateFormat(Context context, String sInputDate) {
		try {
			if(UIUtil.isNotNullAndNotEmpty(sInputDate))
			{
				// Input date format: "yyyy-MM-dd"
				SimpleDateFormat inputDateFormat = new SimpleDateFormat("yyyy-MM-dd");
				Date date = inputDateFormat.parse(sInputDate);

				// Output date format: ematrix date format
				SimpleDateFormat outputDateFormat = new SimpleDateFormat(eMatrixDateFormat.getEMatrixDateFormat(), context.getLocale());
				return outputDateFormat.format(date);
			}

		} catch (Exception e) {
			logger.error(e.getMessage(), e);
		}
		return sInputDate;
	}
}
