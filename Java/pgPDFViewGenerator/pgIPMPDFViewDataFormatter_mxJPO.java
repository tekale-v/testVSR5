//pgIPMPDFViewDataFormatter
import java.io.ByteArrayInputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.StringWriter;
//Added by IRM-2015x.5 for PDF Views (Defect - 16267,16268,16269) - Ends
//Added by DSM-2015x.4 for PDF Views (Defect Id-17453) - Starts
import java.math.BigDecimal;
//Added by DSM-2015x.4 for PDF Views (Defect Id-17453) - Ends
//Added by DSM-2015x.2 for PDF Views FOP Type(Defect-9761) - Ends
//Added by DSM 2015x.2 PDF Views to get physical id via Rel Attribute-End
//Added by DSM-2015x.2 for PDF Views FOP Type(Req Id-11472) - Ends
//Added by DSM-2015x.4 for PDF Views (Defect id-13632) - Starts
import java.text.DecimalFormat;
import java.text.ParseException;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Hashtable;
import java.util.Iterator;
//Added by DSM(Sogeti)-2018x.6 June CW 2022 for PDF Views (Defect-49089/49098) - Starts
import java.util.LinkedHashMap;
import java.util.LinkedHashSet;
//Added by DSM(Sogeti)-2018x.6 June CW 2022 for PDF Views (Defect-49089/49098) - Ends
import java.util.List;
import java.util.Map;
import java.util.Scanner;
import java.util.Set;
import java.util.StringTokenizer;
import java.util.TreeSet;
import java.util.Vector;
import java.util.logging.Logger;
import java.util.stream.Collectors;
import java.text.SimpleDateFormat;
import java.time.Duration;
import java.time.Instant;

import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.transform.Transformer;
import javax.xml.transform.TransformerConfigurationException;
import javax.xml.transform.TransformerException;
import javax.xml.transform.TransformerFactory;
import javax.xml.transform.dom.DOMSource;
import javax.xml.transform.stream.StreamResult;

import org.apache.commons.lang3.StringEscapeUtils;
import org.apache.commons.lang3.StringUtils;
import com.matrixone.apps.domain.util.StringUtil;
import org.apache.commons.text.WordUtils;
import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.NamedNodeMap;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;
import org.xml.sax.InputSource;
import org.xml.sax.SAXParseException;

import com.dassault_systemes.enovia.apps.materialcomposition.enumeration.MATCSchema;
import com.dassault_systemes.enovia.characteristic.model.Characteristic;
import com.dassault_systemes.enovia.enterprisechangemgt.common.ChangeAction;
//Added by DSM(Sogeti)-2015x.1.2 for FPP allinfo view defect-7319 on 18-Oct-2016 - Ends
//Added by DSM-2015x.2 for PDF Views FOP Type(Req Id-11472) - Starts
import com.dassault_systemes.enovia.formulation.custom.enumeration.FormulationAttribute;
//Added by DSM-2015x.2 for PDF Views FOP Type(Defect-9761) - Starts
import com.dassault_systemes.enovia.formulation.custom.enumeration.FormulationType;
//Added by DSM 2015x.2 PDF Views to get physical id via Rel Attribute-Start
import com.dassault_systemes.enovia.formulation.custom.virtualintermediates.model.VirtualIntermediate;
//Added by DSM-2015x.4 for PDF Views (Defect id-13632) - Ends
//Added by IRM-2015x.5 for PDF Views (Defect - 16267,16268,16269) - Starts
import com.matrixone.apps.awl.util.BusinessUtil;
import com.matrixone.apps.cpn.CPNCommonConstants;
import com.matrixone.apps.cpn.enumeration.CPNRelationship;
import com.matrixone.apps.cpn.util.CPNUIUtil;
import com.matrixone.apps.domain.DomainAccess;
import com.matrixone.apps.domain.DomainConstants;
import com.matrixone.apps.domain.DomainObject;
import com.matrixone.apps.domain.DomainRelationship;
import com.matrixone.apps.domain.DomainSymbolicConstants;
import com.matrixone.apps.domain.util.ContextUtil;
//Added by DSM(Sogeti)-2018x.1.1 for PDF Views Defect 26211  - Starts
import com.matrixone.apps.domain.util.EnoviaResourceBundle;
//Added by DSM(Sogeti)-2018x.1.1 for PDF Views Defect 26211  - Ends
import com.matrixone.apps.domain.util.FrameworkException;
//import com.matrixone.apps.domain.util.FrameworkProperties;
import com.matrixone.apps.domain.util.FrameworkUtil;
import com.matrixone.apps.domain.util.MapList;
//Added by DSM(Sogeti)-2015x.1.2 for FPP allinfo view defect-7319 on 18-Oct-2016 - Starts
import com.matrixone.apps.domain.util.MqlUtil;
import com.matrixone.apps.domain.util.PersonUtil;
import com.matrixone.apps.domain.util.PropertyUtil;
import com.matrixone.apps.domain.util.i18nNow;
import com.matrixone.apps.framework.ui.UINavigatorUtil;
import com.matrixone.apps.framework.ui.UIUtil;
//Added by DSM(Sogeti)-2018x.6 June CW 2022 for PDF Views (Defect-49089/49098) - Starts
import com.matrixone.servlet.Framework;
//Added by DSM(Sogeti)-2018x.6 June CW 2022 for PDF Views (Defect-49089/49098) - Ends
import com.pg.dsm.table.utils.EnoviaTableUtils;
import com.pg.v3.custom.pgV3Constants;

import matrix.db.AccessConstants;
import matrix.db.Attribute;
import matrix.db.AttributeList;
import matrix.db.Context;
import matrix.db.JPO;
import matrix.db.Person;
import matrix.db.SelectConstants;
import matrix.util.MatrixException;
import matrix.util.StringList;

import java.nio.charset.Charset;
import java.io.InputStream;

//22x Upgrade changes start
import org.w3c.dom.ls.LSSerializer;
import org.w3c.dom.ls.LSOutput;
import org.w3c.dom.ls.DOMImplementationLS;
import org.w3c.dom.bootstrap.DOMImplementationRegistry;
//22x Upgrade changes end

import javax.xml.parsers.ParserConfigurationException;

import org.xml.sax.SAXException;

import java.io.IOException;
import com.matrixone.apps.domain.util.XSSUtil;
import com.matrixone.apps.domain.util.eMatrixDateFormat;

import java.util.logging.Level;
public class pgIPMPDFViewDataFormatter_mxJPO implements CPNCommonConstants
{
    //private static final pgDSOCommonUtils_mxJPO UTILS = pgDSOCommonUtils_mxJPO.INSTANCE;
    //private static final double FONT_SIZE = 6.4;
    //private static final int DEFAULT_PAGE_SIZE = 35;

    private Document doc = null;
    private final Logger logger = Logger.getLogger(this.getClass().getName());

//Start Code Refactoring
//	private static final String TABLE_IN_TABLE_START = "#@#";
//	private static final String TABLE_IN_TABLE_END = ";@;";
//	private static final String DYNAMIC_TABLE_START = "#~#";
//	private static final String DYNAMIC_TABLE_END = ";~;";
//	private static final String DYNAMIC_ROW_START = "#~~#";
//	private static final String DYNAMIC_ROW_END = ";~~;";
//	private static final String DYNAMIC_ROW_DATA_START = "#_#";
//	private static final String DYNAMIC_ROW_DATA_END = ";_;";
//	private static final String STATIC_TEXT_START = "##";
//	private static final String STATIC_TEXT_END = ";;";
//	private static final int TABLE_BUFFER_SIZE = 3;
//End Code Refactoring
//	private static final String DYNAMIC_ROW_SEPERATOR = "~#~";
//	private static final String KEY_PREFIX_START = "@_@";
    //private static final String KEY_PREFIX_END = "*_*";
    //public static int iCount = 0;
    //Modified by DSM-2015x.4 for PDF Views (Defect id-14166)
    //private static final String PATTERN_DECIMALFORMAT = "##.######";
    //private static final String PATTERN_DECIMALFORMAT = "0.000000";
/*Start Code Refactoring
	 String strCSSTraderDistributor = (String) PropertyUtil.getSchemaProperty("attribute_pgCSSTraderDistributor");
	 String strCSSManufacturer = (String)PropertyUtil.getSchemaProperty("attribute_pgCSSManufacturer");
	 String strPlantLineSpecific =(String)PropertyUtil.getSchemaProperty("attribute_pgPlantLineSpecific");
	 String strQualStatus = (String)PropertyUtil.getSchemaProperty("attribute_pgQualificationStatus"); not used
	 String strSupplierTradeName = (String)PropertyUtil.getSchemaProperty("attribute_pgSupplierTradeName");
	 String strQualificationStatus =  (String)PropertyUtil.getSchemaProperty("attribute_pgQualificationStatus");
	 String strClassification =  (String)PropertyUtil.getSchemaProperty("attribute_pgClassification");
	 String strProductProperty =  (String)PropertyUtil.getSchemaProperty("attribute_pgProduct");
	 String strGBU = (String)PropertyUtil.getSchemaProperty("attribute_pgGBU");not used
	 String strPSRAInformation =  (String)PropertyUtil.getSchemaProperty("attribute_pgPSRAInformation");
	 String strSequence1 =  (String)PropertyUtil.getSchemaProperty("attribute_pgSequence");
	 String strCountry = (String)PropertyUtil.getSchemaProperty("attribute_Country");
	 String strCategory = (String)PropertyUtil.getSchemaProperty("attribute_pgCategory");


	//Added by DSM(Sogeti)-2015x.5.1 for PDF Views (Req - 21884) - Starts
	// String ATTRIBUTE_PGBUILDPATH = PropertyUtil.getSchemaProperty("attribute_pgBuildPath");
	// String SELECT_ATTRIBUTE_PGBUILDPATH = "attribute[" + pgPDFViewConstants.ATTRIBUTE_PGBUILDPATH + "]";
	//Added by DSM(Sogeti)-2015x.5.1 for PDF Views (Req - 21884) - Ends
End Code Refactoring*/


    //Modified by DSM(Sogeti)-2015x.5.1 for PDF Views (Def - 17089) - Starts
    private static String strParentObjType = DomainConstants.EMPTY_STRING;
    private static String strFPPviewType = DomainConstants.EMPTY_STRING;
    //Modified by DSM(Sogeti)-2015x.5.1 for PDF Views (Def - 17089) - Ends
    //Added by DSM(Sogeti)-2015x.5.1 for PDF Views (Defect ID-19072) - Starts
    String strCtxt = DomainConstants.EMPTY_STRING;
    //Added by DSM(Sogeti)-2015x.5.1 for PDF Views (Defect ID-19072) - Ends
//Start Code Refactoring
    //Added by DSM(Sogeti)-2018x.1 for PDF Views Requirements - Starts
//	 String ATTRIBUTE_PGPLMPARAMDISPLAYUNIT = PropertyUtil.getSchemaProperty("attribute_PlmParamDisplayUnit");
//	 String SELECT_ATTRIBUTE_PGPLMPARAMDISPLAYUNIT = "attribute[" + pgPDFViewConstants.ATTRIBUTE_PGPLMPARAMDISPLAYUNIT + "]";
//	 String ATTRIBUTE_PGMEASUREMENTPRECISION = PropertyUtil.getSchemaProperty("attribute_MeasurementPrecision");
//	 String SELECT_ATTRIBUTE_PGMEASUREMENTPRECISION = "attribute[" + pgPDFViewConstants.ATTRIBUTE_PGMEASUREMENTPRECISION + "]";
//	 String ATTRIBUTE_PGTESTMETHODREFDOCGCAS = PropertyUtil.getSchemaProperty("attribute_pgTestMethodRefDocGCAS");
//	 String SELECT_ATTRIBUTE_PGTESTMETHODREFDOCGCAS = "attribute[" + pgPDFViewConstants.ATTRIBUTE_PGTESTMETHODREFDOCGCAS + "]";
//	 String ATTRIBUTE_PGPLBATTERYWEIGHTLIUOM = PropertyUtil.getSchemaProperty("attribute_pgPLBatteryWeightLiUOM");
//	 String ATTRIBUTE_PGPLBATTERYENRUOM = PropertyUtil.getSchemaProperty("attribute_pgPLBatteryEnRUOM");
//	 String ATTRIBUTE_PGPLBATTERYVOLUOM = PropertyUtil.getSchemaProperty("attribute_pgPLBatteryVolUOM");
//	 String ATTRIBUTE_PGPLBATTERYTCUOM = PropertyUtil.getSchemaProperty("attribute_pgPLBatteryTCUOM");
    //Added by DSM(Sogeti)-2018x.1 for PDF Views Requirements - Ends
//End Code Refactoring
    //Added by DSM-2018x.2.1 for PDF Views Requirement : Starts
    private Map mpFOPAttributeInfo=null;
    //Added by DSM-2018x.2.1 for PDF Views Requirement : Ends
	//22x Upgrade Modification Start
	public static final String CONSTANT_APP_CPN = "emxCPN";
	public static final String CONSTANT_SRV_PATH = "emxCPN.ServerPath";
	public static final String CONST_PDF_BASE_FOLDER = "pdfHtmlBase";
	public static final String BLANK_SPACE = " ";
	public static final String CONSTANT_STRING_COMMA = ",";
	//22x Upgrade Modification End
	
	//Modified by DSM-2022x.05 for PDF Views (Def Id #57070) - START
	private static final String CONST_UNKNOWN = "Unknown";
	private static final String CONST_UNASSIGNED = "Unassigned";
	//Modified by DSM-2022x.05 for PDF Views (Def Id #57070) - END
	
    public pgIPMPDFViewDataFormatter_mxJPO(Context context,String[] args) throws Exception
    {
        //super(context,args);
    }
    /**
     * Read XML file to replace static and dynamic text with actual content data in HTML format.
     * @param context
     * @param objectId
     * @param consolidatedMap
     * @param strPDFViewType
     * @param strUser
     * @return
     * @throws MatrixException
     * @throws FileNotFoundException
     */
    public String renderFormattedHTML(Context context ,String objectId,Map consolidatedMap,String strPDFViewType,String strUser) throws MatrixException,FileNotFoundException
    {
		//22x Upgrade Modification Start
		String filename = new StringBuilder(EnoviaResourceBundle.getProperty(context, CONSTANT_APP_CPN, context.getLocale(), CONSTANT_SRV_PATH)).append(File.separator).append(CONST_PDF_BASE_FOLDER).append(File.separator).append(strPDFViewType).append(".xml").toString();
		//22x Upgrade Modification End
        System.out.println("************************ XML File Name ************************ "+filename);
        StringBuffer HTMLTemplateBuffer = new StringBuffer(readPdfHtmlBase(context,filename));
        consolidatedMap.put("pgPerformanceCharacteristic","yes");
        consolidatedMap.put("pgRawMaterialTable", "yes");
        consolidatedMap.put("pgPDFTable", "yes");
        consolidatedMap.put("pgMasterPackingMaterialTable", "yes");
        consolidatedMap.put("pgFormulatedProductTable", "yes");
        consolidatedMap.put("pgConsumerDesignBasisTable", "yes");
        consolidatedMap.put("pgApprovedSupplierListTable", "yes");
        consolidatedMap.put("pgBaseFormulaTable", "yes");
        consolidatedMap.put("SharedTable", "yes");
        consolidatedMap.put("pgMasterRawMaterialTable", "yes");
        consolidatedMap.put("pgMasterFinishedProductTable", "yes");
        consolidatedMap.put("pgFinishedProductTable", "yes");
        consolidatedMap.put("pgPackingMaterialTable", "yes");
        consolidatedMap.put("pgCOSTable", "yes");
        consolidatedMap.put("BOM", "yes");
        consolidatedMap.put("NEWCOSTABLE", "yes");
        consolidatedMap.put("FinalIngredientsTable", "yes");
        consolidatedMap.put("pgProductQualityParametersTable", "yes");
        consolidatedMap.put("pgPackageQualityParametersTable", "yes");
        consolidatedMap.put("IsATSTable", "yes");
        consolidatedMap.put("HasATSTable", "yes");
        HTMLTemplateBuffer = replaceStaticKeyInTemplate(context, HTMLTemplateBuffer, consolidatedMap);
        strPDFViewType=strPDFViewType.substring(0,strPDFViewType.indexOf(File.separator));
        HTMLTemplateBuffer = replaceDynamicTablesInTemplate(context,HTMLTemplateBuffer, consolidatedMap,objectId,strPDFViewType,strUser);
        return HTMLTemplateBuffer.toString();
    }
    /**
     * Replaces dynamic tables from XML files to HTML tables with data.
     * @param HTMLTemplateBuffer
     * @param consolidatedMap
     * @param objectId
     * @param pdfViewType
     * @param strUser
     * @return
     */
    private StringBuffer replaceDynamicTablesInTemplate(Context context,StringBuffer HTMLTemplateBuffer,Map<String, String> consolidatedMap,String objectId,String pdfViewType,String strUser)
    {
        //Added as per new requirement to show all information to external users - Starts
        boolean isPushContext = false;
        //Added as per new requirement to show all information to external users - Ends
        //Added by DSM(Sogeti)-2015x.5.1 for PDF Views (Defect ID-19072) - Starts
        strCtxt = context.getUser();
        //Added by DSM(Sogeti)-2015x.5.1 for PDF Views (Defect ID-19072) - Ends
        try{
            //Added by DSM(Sogeti) for Code Optimization Start
            int dynamicTableStartIndx = 0;
            int dynamicTableEndIndx = 0;
            int idStart = 0;
            int idEnd = 0;
            int dynamicRowStartIndx = 0;
            int dynamicRowEndIndx  = 0;
            int dynamicRowEnd = 0;
            int dynamicRowStart = 0;
            int TotalDynamicRows = 0;
            String dynamicRowString = DomainConstants.EMPTY_STRING;
            String tableIdString = DomainConstants.EMPTY_STRING;
            String dynamicRowHTMLBuffer = DomainConstants.EMPTY_STRING;
            String tableIdValue = DomainConstants.EMPTY_STRING;
            String StaticTemplateKey  = DomainConstants.EMPTY_STRING;
            String prefix = DomainConstants.EMPTY_STRING;
            String actualMapKey = DomainConstants.EMPTY_STRING;
            String dynamicRowData = DomainConstants.EMPTY_STRING;
            String strContext = DomainConstants.EMPTY_STRING;
            String strCOSData = DomainConstants.EMPTY_STRING;
            String strHeader = DomainConstants.EMPTY_STRING;
            final String DYNAMIC_TABLE_START = "#~#";
            final String DYNAMIC_TABLE_END = ";~;";
            final String DYNAMIC_ROW_START = "#~~#";
            final String DYNAMIC_ROW_END = ";~~;";
            final String DYNAMIC_ROW_DATA_START = "#_#";
            final String DYNAMIC_ROW_DATA_END = ";_;";
            Map BOMPack = new HashMap();
            Map ATSPack = new HashMap();
            Map mapFITable = new HashMap();
            DomainObject doObj = DomainObject.newInstance(context, objectId);
            String strType = doObj.getInfo(context, DomainConstants.SELECT_TYPE);
            StringBuilder dynamicTableHTMLBuffer = new StringBuilder();
            while (HTMLTemplateBuffer.indexOf(DYNAMIC_TABLE_START) > 0){
                dynamicTableStartIndx = HTMLTemplateBuffer.indexOf(DYNAMIC_TABLE_START);
                dynamicTableEndIndx = HTMLTemplateBuffer.indexOf(DYNAMIC_TABLE_END);
                dynamicTableHTMLBuffer = new StringBuilder(HTMLTemplateBuffer.substring(dynamicTableStartIndx + DYNAMIC_TABLE_START.length(), dynamicTableEndIndx));
                // in this tableStr we need to find out the dynamic rows marker(#~~#
                // and ;~~;) and replace it with actual data rows
                //Modified by DSM(Sogeti) for 2018x.5 Defect 33271 : Starts
                idStart = dynamicTableHTMLBuffer.indexOf("id=\"");
                idEnd = dynamicTableHTMLBuffer.indexOf("\"", idStart + 4);
                //Modified by DSM(Sogeti) for 2018x.5 Defect 33271 : Ends
                tableIdString = dynamicTableHTMLBuffer.substring(idStart + 4, idEnd);
                while(dynamicTableHTMLBuffer.indexOf(DYNAMIC_ROW_START)>0){
                    //Modified by DSM(Sogeti) for Code Optimization End
                    dynamicRowStartIndx = dynamicTableHTMLBuffer.indexOf(DYNAMIC_ROW_START);
                    dynamicRowEndIndx = dynamicTableHTMLBuffer.indexOf(DYNAMIC_ROW_END);
                    dynamicRowString = DomainConstants.EMPTY_STRING;
                    dynamicRowHTMLBuffer = dynamicTableHTMLBuffer.substring(dynamicRowStartIndx + DYNAMIC_ROW_START.length(), dynamicRowEndIndx);
                    tableIdValue = (String) consolidatedMap.get(tableIdString);
                    if ((tableIdValue!=null) && (!tableIdValue.isEmpty()) && (!tableIdValue.equalsIgnoreCase("no")) && (!tableIdString.equalsIgnoreCase("BOM") && (!tableIdString.equalsIgnoreCase("NEWCOSTABLE"))&&(!tableIdString.equalsIgnoreCase("pgProductQualityParametersTable"))&&(!tableIdString.equalsIgnoreCase("pgPackageQualityParametersTable"))&& (!tableIdString.equalsIgnoreCase("IsATSTable")) && (!tableIdString.equalsIgnoreCase("HasATSTable") && (!tableIdString.equalsIgnoreCase("FinalIngredientsTable"))))){
                        int maxRowsTaken = 500;
                        int actualRowsTaken = 0;
                        for (int currentRow = 0; currentRow < maxRowsTaken; currentRow++){
                            StringBuffer dynamicRowStringBuff = new StringBuffer(dynamicRowHTMLBuffer);
                            while (dynamicRowStringBuff.indexOf(DYNAMIC_ROW_DATA_START) > 0) {
                                dynamicRowStart = dynamicRowStringBuff.indexOf(DYNAMIC_ROW_DATA_START);
                                dynamicRowEnd = dynamicRowStringBuff.indexOf(DYNAMIC_ROW_DATA_END);
                                StaticTemplateKey = dynamicRowStringBuff.substring(dynamicRowStart + DYNAMIC_ROW_DATA_START.length(),dynamicRowEnd);
                                String[] mapKeysWithPrefix = getActualMapKeys(StaticTemplateKey);
                                prefix = mapKeysWithPrefix[0];
                                actualMapKey = mapKeysWithPrefix[1];
                                if((consolidatedMap.containsKey(actualMapKey)) && (!consolidatedMap.get(actualMapKey).isEmpty())) {
                                    String[] dynamicRowValues = ((String) consolidatedMap.get(actualMapKey)).split(pgPDFViewConstants.DYNAMIC_ROW_SEPERATOR);
                                    TotalDynamicRows = dynamicRowValues.length;
                                    if(actualRowsTaken < TotalDynamicRows){
                                        actualRowsTaken = TotalDynamicRows;
                                    }
                                    dynamicRowData = (dynamicRowValues.length > currentRow) && (!dynamicRowValues[currentRow].isEmpty()) ? (String) dynamicRowValues[currentRow]:DomainConstants.EMPTY_STRING;
                                    if ((null != dynamicRowData) && (!dynamicRowData.isEmpty()) && (!"".equals(dynamicRowData))){
                                        // check if prefix is available for ex. in Charactstics Table & BOM Table T: SS:
                                        if ((null != prefix) && (!prefix.isEmpty()) && (!"".equals(prefix))){
                                            dynamicRowData = prefix + dynamicRowData;
                                        }
                                    }
                                    //Modified by DSM(Sogeti)-2018x.2 for PDF Views (Defect - 24954) - Starts
                                    if(actualMapKey.equalsIgnoreCase("Reference_Documents_description")) {
                                        //Modified by DSM(Sogeti)-2022x.01 for Feb CW PDF Views (Defect - 50481) - Starts
                                        dynamicRowStringBuff.replace(dynamicRowStart,dynamicRowEnd + DYNAMIC_ROW_DATA_END.length(),dynamicRowData);
                                        //Modified by DSM(Sogeti)-2022x.01 for Feb CW PDF Views (Defect - 50481) - Ends
                                    } else {
                                        //Modified by DSM(Sogeti)-2018x.2 for PDF Views (Defect - 24954) - Ends
                                        dynamicRowStringBuff.replace(dynamicRowStart,dynamicRowEnd + DYNAMIC_ROW_DATA_END.length(),dynamicRowData);
                                    }
                                } else{
                                    dynamicRowStringBuff.replace(dynamicRowStart,dynamicRowEnd + DYNAMIC_ROW_DATA_END.length(),"");
                                }
                            }
                            if(actualRowsTaken <= currentRow){
                                break;
                            } else{
                                dynamicRowString += dynamicRowStringBuff.toString();
                            }
                        }
                        if (actualRowsTaken > 0){
                            // rowStr here should replace the tableRow
                            dynamicTableHTMLBuffer.replace(dynamicRowStartIndx, dynamicRowEndIndx + 4, dynamicRowString);
                        }else{
                            // if no rows are there remove the table
                            dynamicTableHTMLBuffer = new StringBuilder();
                        }
                    }
                    else if(tableIdString.equalsIgnoreCase("BOM")){
                        // objSelect Map does not contains the tableId, remove the table
                        dynamicTableHTMLBuffer = new StringBuilder();
                        //get  BOM for objectId
                        BOMPack = new HashMap();
                        BOMPack.put("objectId", objectId);
                        BOMPack.put("emxExpandFilter", "2");
                        String[] args = JPO.packArgs(BOMPack);
                        dynamicTableHTMLBuffer=getBillOfMaterialSubstituteAndSAPBOMData(context,args,objectId,pdfViewType,strUser);
                    }
                    else if(tableIdString.equalsIgnoreCase("FPPBOM")){
                        dynamicTableHTMLBuffer = new StringBuilder();
                        dynamicTableHTMLBuffer=getBillOfMaterialSubstituteAndSAPBOMDataFPP(context, objectId, pdfViewType);
                    }
                    else if(tableIdString.equalsIgnoreCase("DSOBOM")){
                        dynamicTableHTMLBuffer = new StringBuilder();

                        //Added by DSM-2015x.2 for PDF Views FOP Type(Defect-9761) - Starts
                        //Modified by DSM-2015x.4 for PDF Views FOP Type(Defect-11472) - Starts
                        if(strType.equals(pgV3Constants.TYPE_FORMULATIONPART)){
                            dynamicTableHTMLBuffer = getFormulaSubstitutes(context,objectId,pdfViewType);
                            //Modified by DSM-2015x.4 for PDF Views FOP Type(Defect-11472) - Ends
                        }
                        else
                            //Added by DSM-2015x.2 for PDF Views FOP Type(Defect-9761) - Ends
                            dynamicTableHTMLBuffer=getBillOfMaterialSubstituteAndSAPBOMDataDSOTypes(context,objectId,pdfViewType);
                    }
                    else if(tableIdString.equalsIgnoreCase("TUPBOM")){
                        dynamicTableHTMLBuffer = new StringBuilder();
                        dynamicTableHTMLBuffer=getBillOfMaterialSubstituteAndBOMDataTUP(context,objectId,pdfViewType);
                    }
                    else if(tableIdString.equalsIgnoreCase("DSONotes")){
                        dynamicTableHTMLBuffer = new StringBuilder();
                        dynamicTableHTMLBuffer = getNotesDSO(context,objectId);
                    }
                    else if(tableIdString.equalsIgnoreCase("DSOPerformance")){
                        dynamicTableHTMLBuffer = new StringBuilder();
                        strContext = context.getUser();
                        //Modified by DSM(Sogeti) for Code Optimization End
                        if((pdfViewType.equals("consolidatedpackaging") || pdfViewType.equals("supplier") ) && pgV3Constants.PERSON_USER_AGENT.equals(strContext) ){
                            ContextUtil.popContext(context);
                            isPushContext = true;
                            dynamicTableHTMLBuffer=getPerformanceChracteristicDSO(context,objectId,pdfViewType);
                        }else{
                            dynamicTableHTMLBuffer=getPerformanceChracteristicDSO(context,objectId,pdfViewType);
                        }
                        if(isPushContext) {
                            ContextUtil.pushContext(context, pgV3Constants.PERSON_USER_AGENT , "", "");
                            isPushContext = false;
                        }
                    }
                    //Modified by DSM(Sogeti) for Code Optimization
                    else if(tableIdString.equalsIgnoreCase("FPPBOMGenDoc")){
                        dynamicTableHTMLBuffer = new StringBuilder();
                        dynamicTableHTMLBuffer = getBillOfMaterialSubstituteAndSAPBOMDataDSOGenDoc(context,objectId,pdfViewType);
                    }
                    //Modified by DSM(Sogeti) for Code Optimization
                    else if(tableIdString.equalsIgnoreCase("PDFReachStatement")){
                        dynamicTableHTMLBuffer = new StringBuilder();

                        dynamicTableHTMLBuffer = getReachStatement(context);
                    }
                    //Modified by DSM(Sogeti) for Code Optimization Start
                    else if(tableIdString.equalsIgnoreCase("NEWCOSTABLE")){
                        // objSelect Map does not contains the tableId, remove the table
                        dynamicTableHTMLBuffer = new StringBuilder();
                        //get  BOM for objectId
                        BOMPack=new HashMap();
                        BOMPack.put("objectId", objectId);
                        String[] args = JPO.packArgs(BOMPack);
                        //pgCountriesOfSale_mxJPO ipmProduct=new pgCountriesOfSale_mxJPO(context,args);
                        long startTime = new Date().getTime();
                        //strCOSData = ipmProduct.simpleReportIPSFORPDF(context,objectId);
                        //Added for PDF Refactor
                        strCOSData= (String)pgPDFViewHelper.executeIntermediatorClassMethod(context, "simpleReportIPSFORPDF", args);
                        long endTime = new Date().getTime();
                        System.out.println("Total Time has taken by the ipmProduct:simpleReportIPSFORPDF Method is-->"+(endTime-startTime));
                        strHeader = DomainConstants.EMPTY_STRING;
                        //Modified by DSM(Sogeti) for Code Optimization End
                        StringBuilder headerBuffer= new StringBuilder();
                        if(pdfViewType.equals(pgPDFViewConstants.CONST_COMBINEDWITHMASTER)){
                            if(strType.equals(pgV3Constants.TYPE_PGFINISHEDPRODUCT)){
                                strHeader = " FINISHED PRODUCT COUNTRIES OF SALE (R)";
                            }
                            else if(strType.equals(pgV3Constants.TYPE_PGPACKINGSUBASSEMBLY)){
                                strHeader = " PACKING SUBASSEMBLY COUNTRIES OF SALE (R)";
                            }
                        }
                        else{
                            strHeader = " COUNTRIES OF SALE(R)";
                        }
                        if(StringUtils.isNotBlank(strCOSData)){
                            headerBuffer.append("<TR><TD class=\"new\"><TABLE cellspacing=\"0\" style=\"line-height: 16px;\" id=\"pgFinishedProductTable\">");
                            headerBuffer.append("<TR><TD class=\"new\"><B>"+strHeader+"</B></TD></TR>");
                            headerBuffer.append("</TABLE></TD></TR>");
                            strCOSData = headerBuffer.toString() + strCOSData;
                        }
                        dynamicTableHTMLBuffer.append(strCOSData);
                    }
                    else if(tableIdString.equalsIgnoreCase("DSONEWCOSTABLE")){
                        dynamicTableHTMLBuffer = new StringBuilder();
                        BOMPack = new HashMap();
                        BOMPack.put("objectId", objectId);
                        String[] args = JPO.packArgs(BOMPack);
                        //pgCountriesOfSale_mxJPO ipmProduct=new pgCountriesOfSale_mxJPO(context,args);
                        //Modified by DSM(Sogeti) for Code Optimization Start
                        //strCOSData = ipmProduct.simpleReportIPSFORPDF(context,objectId);
                        //Added for PDF Refactor
                        strCOSData= (String)pgPDFViewHelper.executeIntermediatorClassMethod(context, "simpleReportIPSFORPDF", args);
                        strHeader = DomainConstants.EMPTY_STRING;
                        //Modified by DSM(Sogeti) for Code Optimization End
                        //Added by DSM(Sogeti)-2018x.5 for PDF Views Requirements - Starts
                        strHeader = "<TR><TD><B><font size='4'>Market Of Sale</font></B><BR></BR></TD></TR>";
                        //Added by DSM(Sogeti)-2018x.5 for PDF Views Requirements - Ends
                        if(StringUtils.isNotBlank(strCOSData)){
                            strCOSData = strHeader+strCOSData;
                        }
                        dynamicTableHTMLBuffer.append(strCOSData);
                    }
                    else if (tableIdString.equalsIgnoreCase("MasterWnD")){
                        dynamicTableHTMLBuffer = getMasterWeightDimensionsTable(context,objectId,pdfViewType);
                    }
                    else if (tableIdString.equalsIgnoreCase("DSOWnD")){
                        dynamicTableHTMLBuffer = getDSOWeightDimensionsTable(context,objectId,pdfViewType);
                    }
                    else if (tableIdString.equalsIgnoreCase("DSODerived")){
                        dynamicTableHTMLBuffer = getDSOderivedPartsTable(context,objectId);
                    }
                    //modified  by DSM 2018x.3 PDF Views Defect 32124,32144 -STARTS
                    else if (tableIdString.equalsIgnoreCase("DSOMaterial")){
                        dynamicTableHTMLBuffer = getDSOMaterial(context,objectId,pdfViewType);
                    }
                    //modified  by DSM 2018x.3 PDF Views Defect 32124,32144 -ENDS
                    else if (tableIdString.equalsIgnoreCase("DSOSubstance")){
                        dynamicTableHTMLBuffer = getDSOSubstance(context,objectId);
                    }
                    else if (tableIdString.equalsIgnoreCase("DSOPlants")){
                        dynamicTableHTMLBuffer = getDSOPlantsTable(context,objectId,strType);
                    }
                    else if (tableIdString.equalsIgnoreCase("FPPPlants")){
                        dynamicTableHTMLBuffer = getFPPPlantsTable(context,objectId);
                    }
                    else if (tableIdString.equalsIgnoreCase("DSOONS")){
                        dynamicTableHTMLBuffer = getDSOONSTable(context,objectId);
                    }
                    else if (tableIdString.equalsIgnoreCase("DSOTask")){
                        //Modified by DSM-2015x.4 for PDF Views Defect 13901 - Starts
                        strContext = context.getUser();
                        if(!pgV3Constants.PERSON_USER_AGENT.equals(strContext) ){
                            ContextUtil.pushContext(context, pgV3Constants.PERSON_USER_AGENT , "", "");
                            isPushContext = true;
                        }
                        dynamicTableHTMLBuffer = getDSOTasksTable(context,objectId);
                        if(isPushContext){
                            ContextUtil.popContext(context);
                            isPushContext = false;
                        }
                        //Modified by DSM-2015x.4 for PDF Views Defect 13901 - Ends
                    }
                    else if (tableIdString.equalsIgnoreCase("FLATBOM")){
                        //Modified by DSM(Sogeti) - for 2015x.5 PDF Views Defect# 14538 - Starts
                        //dynamicTableHTMLBuffer = getFlatBOM(context,objectId);
                        dynamicTableHTMLBuffer = getFlatBOM(context,objectId,pdfViewType);
                        //Modified by DSM(Sogeti) - for 2015x.5 PDF Views Defect# 14538 - Ends
                    }
                    else if(tableIdString.equalsIgnoreCase("DSOIsATS")){
                        dynamicTableHTMLBuffer = new StringBuilder();
                        ATSPack = new HashMap();
                        ATSPack.put("objectId", objectId);
                        ATSPack.put("table","pgIPMIRMSIsATS");
                        String[] args = JPO.packArgs(ATSPack);
                        dynamicTableHTMLBuffer = getIsATSDataForDSO(context,args,objectId,pdfViewType);
                    }
                    else if (tableIdString.equalsIgnoreCase("pgProductQualityParametersTable")){
                        dynamicTableHTMLBuffer = getQualityParametersTableHTML(context,objectId,pdfViewType,tableIdString);
                    }
                    else if (tableIdString.equalsIgnoreCase("pgPackageQualityParametersTable")){
                        dynamicTableHTMLBuffer = getQualityParametersTableHTML(context,objectId,pdfViewType,tableIdString);
                    }
                    else if(tableIdString.equalsIgnoreCase("IsATSTable")){
                        dynamicTableHTMLBuffer = new StringBuilder();
                        ATSPack = new HashMap();
                        ATSPack.put("objectId", objectId);
                        ATSPack.put("table","pgIPMIRMSIsATS");
                        String[] args = JPO.packArgs(ATSPack);
                        dynamicTableHTMLBuffer=getIsATSData(context,args,objectId,pdfViewType,strUser);
                    }
                    else if(tableIdString.equalsIgnoreCase("HasATSTable")){
                        dynamicTableHTMLBuffer = new StringBuilder();
                        ATSPack=new HashMap();
                        ATSPack.put("objectId", objectId);
                        ATSPack.put("table","pgIPMIRMSHasATS");
                        String[] args = JPO.packArgs(ATSPack);
                        dynamicTableHTMLBuffer=getHasATSData(context,args,objectId,pdfViewType,strUser);
                    }
                    else if(tableIdString.equalsIgnoreCase("FinalIngredientsTable")){
                        dynamicTableHTMLBuffer = new StringBuilder();
                        mapFITable = new HashMap();
                        mapFITable.put("objectId", objectId);
                        mapFITable.put("table","pgIPMIRMSHasATS");
                        String[] args = JPO.packArgs(mapFITable);
                        dynamicTableHTMLBuffer=getFinalIngredientsTableData(context,args,objectId,pdfViewType,strUser);
                        //Added by DSM-2015x.1 for PDF Views (Req ID-8196,8197,5725,5726,5727,5728) on 12-Jan-2016 - Starts
                    }else if (tableIdString.equalsIgnoreCase("DSOEQPartsMEP") || tableIdString.equalsIgnoreCase("DSOEQSEP")){
                        dynamicTableHTMLBuffer = getManufactureEquivalentTable(context,objectId,tableIdString);
                    }else if(tableIdString.equals("DSOEQPartsSEP")){
                        dynamicTableHTMLBuffer = getSupplierEquivalentTable(context, objectId, tableIdString);
                    }else if ("DSOSubstitute".equalsIgnoreCase(tableIdString)) {
                        dynamicTableHTMLBuffer = new StringBuilder();
                        MapList mlListOfConnectedEBOM = null;
                        dynamicTableHTMLBuffer=getDSOSubstitutes(context,objectId,mlListOfConnectedEBOM,pdfViewType);
                    }
                    //Added by DSM-2015x.1 for PDF Views (Req ID-8196,8197,5725,5726,5727,5728) on 12-Jan-2016 - Ends
                    else if("DSOSecurityClass".equalsIgnoreCase(tableIdString)){
                        //Added by DSM-2015x.1 for PDF Views (Req ID-5691,5692,5693,5694,5696,5697,5698,5699,5700,10146,10151,10158,10160)on 22-03-2016 - Starts
                        //dynamicTableHTMLBuffer=getSecurityClassTable(context,objectId,pdfViewType);
                        //Modified by DSM-2018x.5 for PDF Views Requirment - Starts
                        dynamicTableHTMLBuffer=getSecurityClassTable(context,objectId,pdfViewType,tableIdString);
                        //Modified by DSM-2018x.5 for PDF Views Requirment - Ends
                        //Added by DSM-2015x.1 for PDF Views (Req ID-5691,5692,5693,5694,5696,5697,5698,5699,5700,10146,10151,10158,10160)on 22-03-2016 - Ends
                    }
                    //Added by DSM-2018x.5 for PDF Views Requirment - Starts
                    else if("DSOIPSecurityClass".equalsIgnoreCase(tableIdString)){
                        dynamicTableHTMLBuffer=getSecurityClassTable(context,objectId,pdfViewType,tableIdString);
                    }
                    //Added by DSM-2018x.5 for PDF Views Requirment - Ends
                    //Added by DSM(Sogeti)-2015x.2 for PDF Views (Req Id-11473,11998,12002,11999,11470,11471) - Starts
                    else if(tableIdString.equals("DSOStartingMaterials")){
                        dynamicTableHTMLBuffer = new StringBuilder();
                        // Modified by DSM(Sogeti) for 2018x.5 PDF Views : Starts
                        dynamicTableHTMLBuffer = getStartingMaterialsTable(context, objectId,pdfViewType);
                        // Modified by DSM(Sogeti) for 2018x.5 PDF Views : Ends
                    }
                    else if(tableIdString.equalsIgnoreCase("DSOAlternates")){
                        dynamicTableHTMLBuffer = new StringBuilder();
                        // Modified by DSM(Sogeti) for 2018x.5 PDF Views : Starts
                        dynamicTableHTMLBuffer = getPrimaryAlternate(context,objectId,pdfViewType);
                        // Modified by DSM(Sogeti) for 2018x.5 PDF Views : Ends
                    }
                    else if(tableIdString.equalsIgnoreCase("DSOMaterialsProduced")){
                        dynamicTableHTMLBuffer = new StringBuilder();
                        // Modified by DSM(Sogeti) for 2018x.5 PDF Views : Starts
                        dynamicTableHTMLBuffer = getRelatedDefineMaterials(context,objectId,pdfViewType);
                        // Modified by DSM(Sogeti) for 2018x.5 PDF Views : Ends
                    }
                    else if(tableIdString.equalsIgnoreCase("DSOComponentEquivalents")){
                        dynamicTableHTMLBuffer = new StringBuilder();
                        dynamicTableHTMLBuffer = getComponentEquivalentsTable(context,objectId);
                    }
                    else if(tableIdString.equalsIgnoreCase("DSOProducingFormula")){
                        dynamicTableHTMLBuffer = new StringBuilder();
                        // Modified by DSM(Sogeti) for 2018x.5 PDF Views : Starts
                        dynamicTableHTMLBuffer = getProducingFormula(context,objectId,pdfViewType);
                        // Modified by DSM(Sogeti) for 2018x.5 PDF Views : Ends
                    }
                    else if(tableIdString.equalsIgnoreCase("DSOSubstancesMaterials")){
                        dynamicTableHTMLBuffer = new StringBuilder();
                        dynamicTableHTMLBuffer = getSubstancesMaterialsTable(context,objectId);
                    }
                    // Added by DSM-2018x.6_Oct_CW for PDF Views (Req Id #39799 ) : Start
                    else if("SEPSubstanceAndMaterials".equalsIgnoreCase(tableIdString)){
                        dynamicTableHTMLBuffer = getSEPSubstanceAndMaterials(context,objectId,strType,pdfViewType);
                    }
                    // Added by DSM-2018x.6_Oct_CW for PDF Views (Req Id #39799 ) : End
                    //Added by DSM-2015x.2 for PDF Views (Req Id-11472) - Starts
                    else if(tableIdString.equalsIgnoreCase("DSOFormulaIngredients")){
                        dynamicTableHTMLBuffer = new StringBuilder();
                        //Modified by DSM(Sogeti)-2015x.2.1 for PDF Views (Defect ID-11637) - Starts
                        dynamicTableHTMLBuffer = getFormulaIngredients(context,objectId,pdfViewType);
                        //Modified by DSM(Sogeti)-2015x.2.1 for PDF Views (Defect ID-11637) - Ends
                    }
                    //Added by DSM-2015x.2 for PDF Views (Req Id-11472) - Ends
                    //Added by DSM(Sogeti)-2015x.2 for PDF Views (Req Id-11473,11998,12002,11999,11470,11471) - Ends
                    //Added by DSM-2015x.4 for PDF Views(Req Id-13691 ) - Starts
                    else if(tableIdString.equalsIgnoreCase("DSOCUPArtwork")){
                        dynamicTableHTMLBuffer = new StringBuilder();
                        dynamicTableHTMLBuffer = getCUPArtwork(context,objectId);
                    }
                    //Added by DSM-2015x.4 for PDF Views (Req Id-13691 ) - Ends
                    //Added by DSM-2015x.4 for PDF Views(Req Id-11470) - Starts
                    else if(tableIdString.equalsIgnoreCase("DSOWeightChar")){
                        dynamicTableHTMLBuffer = new StringBuilder();
                        // Modified by DSM-2018x.3 for PDF Views (Defect Id #32058 ) : Starts
                        //dynamicTableHTMLBuffer = getWeightCharacteristics(context,objectId);
                        dynamicTableHTMLBuffer = getWeightCharacteristics(context,objectId,pdfViewType);
                        // Modified by DSM-2018x.3 for PDF Views (Defect Id #32058 ) : Ends
                    }
                    //Added by DSM-2015x.4 for PDF Views (Req Id-11470) - Ends
                    //Added by DSM-2015x.4 for PDF Views(Req Id-15310,15311,15312) - Starts
                    else if(tableIdString.equalsIgnoreCase("DSOProductQualificationRecord")){
                        dynamicTableHTMLBuffer = new StringBuilder();
                        dynamicTableHTMLBuffer = getProductQualificationRecord(context,objectId);
                    }
                    //Added by DSM-2015x.4 for PDF Views(Defect Id-13510) - Starts
                    else if(tableIdString.equalsIgnoreCase("DSOASLSUPINFOLIST")){
                        dynamicTableHTMLBuffer = new StringBuilder();
                        dynamicTableHTMLBuffer = getASLSupplierInformationList(context,objectId);
                    }
                    else if(tableIdString.equalsIgnoreCase("DSOASLSEPMEPLIST")){
                        dynamicTableHTMLBuffer = new StringBuilder();
                        dynamicTableHTMLBuffer = getASLSupplierManufacturerList(context,objectId);
                    }
                    //Added by DSM Sogeti for 2015x.5 REQID 19633 starts
                    else if(tableIdString.equalsIgnoreCase("Files")){
                        dynamicTableHTMLBuffer = new StringBuilder();
                        dynamicTableHTMLBuffer = getStudyProtocolFilesList(context,objectId);
                    }
                    else if(tableIdString.equalsIgnoreCase("Approvals")){
                        dynamicTableHTMLBuffer = new StringBuilder();
                        dynamicTableHTMLBuffer = getStudyProtocolApprovalsList(context,objectId);
                    }
                    //Added by DSM-2018x.3 for PDF Views (Req Id-32753 ) - Starts
                    else if(tableIdString.equalsIgnoreCase("SPRevisions")) {
                        dynamicTableHTMLBuffer = new StringBuilder();
                        dynamicTableHTMLBuffer=	getRevisions(context, objectId);
                    }
                    //Added by DSM-2018x.3 for PDF Views (Req Id-32753 ) - Ends
                    //Added by DSM Sogeti for 2015x.5 Defect #15470 - Starts
                    else if(tableIdString.equalsIgnoreCase("LegDetails")){
                        dynamicTableHTMLBuffer = new StringBuilder();
                        dynamicTableHTMLBuffer = getLegDetailsForStudyProtocal(context,objectId);
                    }
                    //Added by DSM-2018x.3 Study Protocol - PDF Views for Requirement #32753 - Start
                    else if(tableIdString.equalsIgnoreCase("StudyDesign")){
                        dynamicTableHTMLBuffer = new StringBuilder();
                        dynamicTableHTMLBuffer = getStudyDesignFieldValues(context,objectId);
                    }
                    else if(tableIdString.equalsIgnoreCase("MultipleOwnershipAccess")){
                        dynamicTableHTMLBuffer = new StringBuilder();
                        dynamicTableHTMLBuffer = getMultipleOwnershipAccessFieldValues(context,objectId);
                    }
                    //Added by DSM-2018x.3 Study Protocol - PDF Views for Requirement #32753 - End
                    else if(tableIdString.equalsIgnoreCase("PlatformChasis")){
                        dynamicTableHTMLBuffer = new StringBuilder();
                        dynamicTableHTMLBuffer = getPlatformFranchiseFieldValues(context,objectId);
                    }
                    //Added by DSM Sogeti for 2015x.5 Defect #15470 - Ends
                    //Added by DSM Sogeti for 2015x.5 REQID 19633 Ends
                    //Added by DSM(Sogeti)-2015x.4 for PDF Views (Req 8197) - Starts
                    else if(tableIdString.equalsIgnoreCase("DSOTaskSignatures")){
                        dynamicTableHTMLBuffer = new StringBuilder();
                        dynamicTableHTMLBuffer = getDSOTaskSignaturesTable(context,objectId);
                    }
                    //Added by DSM(Sogeti)-2015x.4 for PDF Views (Req 8197) - Ends
                    //Added by DSM-2015x.4 for PDF Views(Defect Id-13510) - Ends
                    //Added by DSM-2015x.4 for PDF Views(Req Id-15310,15311,15312) - Ends

                    //Added by DSM(Sogeti)-2015x.5.1 for PDF Views (Req - 21884) - Starts
                    else if(tableIdString.equalsIgnoreCase("DSOSoftwareBuilds")){
                        dynamicTableHTMLBuffer = new StringBuilder();
                        dynamicTableHTMLBuffer = getSoftwareBuildsTable(context,objectId);
                    }
                    //Added by DSM(Sogeti)-2015x.5.1 for PDF Views (Req - 21884) - Ends

                    //Added by DSM(Sogeti)-2015x.5.1 for PDF Views Requirements - Starts
                    //Modified by DSM(Sogeti)-2018x.5  for PDF Views Requirements - Starts
					/*else if(tableIdString.equalsIgnoreCase("DSOAttributeData")){
						dynamicTableHTMLBuffer = new StringBuilder();
						dynamicTableHTMLBuffer = getDSOAttributeData(context,objectId,pdfViewType);
					}*/
                    else if(tableIdString.equalsIgnoreCase("StorageTableFOP")){
                        dynamicTableHTMLBuffer = new StringBuilder();
                        dynamicTableHTMLBuffer = getStorageTransportTableFOP(context,objectId);
                    }
                    else if(tableIdString.equalsIgnoreCase("StorageTableCUPCOP")){
                        dynamicTableHTMLBuffer = new StringBuilder();
                        dynamicTableHTMLBuffer = getStorageTransportTableCUPCOP(context,objectId);
                    }
                    else if(tableIdString.equalsIgnoreCase("StorageTableFPP")){
                        dynamicTableHTMLBuffer = new StringBuilder();
                        dynamicTableHTMLBuffer = getStorageTransportTableFPP(context,objectId,pdfViewType);
                    }
                    else if(tableIdString.equalsIgnoreCase("StorageTableAPP")){
                        dynamicTableHTMLBuffer = new StringBuilder();
                        dynamicTableHTMLBuffer = getStorageTransportTableAPP(context,objectId);
                    }
                    else if(tableIdString.equalsIgnoreCase("StorageTableDPP")){
                        dynamicTableHTMLBuffer = new StringBuilder();
                        dynamicTableHTMLBuffer = getStorageTransportTableDPP(context,objectId);
                    }
                    //Added by DSM(Sogeti)-2018x.6 for PDF Views Req#36346: Starts
                    else if("StorageTableRM".equalsIgnoreCase(tableIdString)){
                        dynamicTableHTMLBuffer = getStorageTransportTableForRM(context,objectId);
                    }
                    //Added by DSM(Sogeti)-2018x.6 for PDF Views Req#36346: Ends
                    //Modified by DSM(Sogeti)-2018x.5  for PDF Views Requirements - Starts
                    else if(tableIdString.equalsIgnoreCase("BaseCodeDetails")){
                        dynamicTableHTMLBuffer = new StringBuilder();
                        dynamicTableHTMLBuffer = getBaseCodeDetails(context,objectId);
                    }
                    //Modified by DSM(Sogeti)-2018x.5  for PDF Views Requirements - Ends
                    else if(tableIdString.equalsIgnoreCase("ProfileIdentification")){
                        dynamicTableHTMLBuffer = new StringBuilder();
                        //Added by DSM(Sogeti)- 2015x.5.1 Oct Bug Fix PDF Views Defect - 20904 - Starts
                        dynamicTableHTMLBuffer = getProfileIdentification(context,objectId,pdfViewType);
                        //Added by DSM(Sogeti)- 2015x.5.1 Oct Bug Fix PDF Views Defect - 20904 - Ends
                    }

                    else if(tableIdString.equalsIgnoreCase("ChemicalClassification")){
                        dynamicTableHTMLBuffer = new StringBuilder();
                        dynamicTableHTMLBuffer = getChemicalClassification(context,objectId);
                    }
                    else if(tableIdString.equalsIgnoreCase("PhysicalProperties")){
                        dynamicTableHTMLBuffer = new StringBuilder();
                        dynamicTableHTMLBuffer = getPhysicalProperties(context,objectId);
                    }
                    else if(tableIdString.equalsIgnoreCase("PerfumeProperties")){
                        dynamicTableHTMLBuffer = new StringBuilder();
                        dynamicTableHTMLBuffer = getPerfumeProperties(context,objectId);
                    }
                    else if(tableIdString.equalsIgnoreCase("ChemicalMolecularProperties")){
                        dynamicTableHTMLBuffer = new StringBuilder();
                        dynamicTableHTMLBuffer = getChemicalMolecularProperties(context,objectId);
                    }
                    else if(tableIdString.equalsIgnoreCase("DetergentSurfactantProperties")){
                        dynamicTableHTMLBuffer = new StringBuilder();
                        dynamicTableHTMLBuffer = getDetergentSurfactantProperties(context,objectId);
                    }
                    else if(tableIdString.equalsIgnoreCase("PDFReachTable")){
                        dynamicTableHTMLBuffer = new StringBuilder();
                        dynamicTableHTMLBuffer = getReachDetail(context,objectId);
                    }
                    else if(tableIdString.equalsIgnoreCase("DSOChemicalPhysicalData")){
                        dynamicTableHTMLBuffer = new StringBuilder();
                        //dynamicTableHTMLBuffer = getChemicalAndPhisicalData(context,objectId);
                        dynamicTableHTMLBuffer = getChemicalAndPhysicalForGHSAndDGCClassification(context,objectId);
                    }
                    else if(tableIdString.equalsIgnoreCase("DSOChemicalPhysicalForWarehouseClassification")){
                        dynamicTableHTMLBuffer = new StringBuilder();
                        dynamicTableHTMLBuffer = getChemicalAndPhysicalForWarehouseClassification(context,objectId);
                    }
                    else if(tableIdString.equalsIgnoreCase("DSOChemicalPhysicalForEnginuityAndLegacyData")){
                        dynamicTableHTMLBuffer = new StringBuilder();
                        dynamicTableHTMLBuffer = getChemicalAndPhysicalForEnginuityAndLegacyData(context, objectId);
                    }
                    //Added by DSM(Sogeti)-2015x.5.1 for PDF Views Requirements - Ends
                    //Added by DSM(Sogeti)-2018x.1 for PDF Views Requirements - Starts
                    else if(tableIdString.equalsIgnoreCase("DSOCharacteristicsData")){
                        dynamicTableHTMLBuffer = new StringBuilder();
                        dynamicTableHTMLBuffer = getCharacteristicsData(context,objectId);
                    }
                    //Added by DSM(Sogeti)-2018x.1 for PDF Views Requirements - Ends
                    //Added by DSM(Sogeti)-2018x.1.1 for PDF Views Requirements - Starts
                    else if(tableIdString.equalsIgnoreCase("DSOUFI")){
                        dynamicTableHTMLBuffer = new StringBuilder();
                        dynamicTableHTMLBuffer = getUFIData(context,objectId);
                    }
                    //Added by DSM(Sogeti)-2018x.1.1 for PDF Views Requirements - Ends
                    //Added by DSM(Sogeti)-2018x.2 for PDF Views Requirements - Starts
                    else if (tableIdString.equalsIgnoreCase("DSODGC")) {
                        //dynamicTableHTMLBuffer = getDGCTable(context,objectId);
                        dynamicTableHTMLBuffer =getDangerousGoodsClassificationDataForProduct(context, objectId);
                    }
                    //Added by DSM(Sogeti)-2018x.2 for PDF Views Requirements - Ends

                    //Added by DSM(Sogeti)-2018x.2 for PDF Views Requirements - Starts
                    else if (tableIdString.equalsIgnoreCase("MLCERTIFICATION")){
                        dynamicTableHTMLBuffer = getCertificationTable(context,objectId);
                    }
                    //Added by DSM(Sogeti)-2018x.2 for PDF Views Requirements - Ends
                    //Added by DSM(Sogeti)-2018x.2 for PDF Views Requirements - Starts
                    else if(tableIdString.equalsIgnoreCase("DSOARCertTable")) {
                        dynamicTableHTMLBuffer = getARCertificationEquivalentTable(context, objectId,pdfViewType);
                    }
                    //Added by DSM(Sogeti)-2018x.2 for PDF Views Requirements - Ends
                    else if(tableIdString.equalsIgnoreCase("DSOCertTable")) {
                        dynamicTableHTMLBuffer = getCertificationEquivalentTable(context, objectId,pdfViewType);
                    }
                    else if(tableIdString.equalsIgnoreCase("DangerousGoodsClassification")){
                        dynamicTableHTMLBuffer = new StringBuilder();
                        dynamicTableHTMLBuffer = getDangerousGoodsClassificationData(context,objectId);
                    }
                    else if(tableIdString.equalsIgnoreCase("GlobalHarmonizedStandard")){
                        dynamicTableHTMLBuffer = new StringBuilder();
                        if(strType.equals(pgV3Constants.TYPE_FINISHEDPRODUCTPART)){
                            dynamicTableHTMLBuffer = getRolledUpGlobalHarmonizedStandardData(context,objectId);
                        }else {
                            // Modified by DSM(Sogeti) for 2018x.5 PDF Views Requirement : Starts
                            dynamicTableHTMLBuffer = getGlobalHarmonizedStandardData(context,objectId,pdfViewType);
                            // Modified by DSM(Sogeti) for 2018x.5 PDF Views : End
                        }
                    }
                    else if(tableIdString.equalsIgnoreCase("DSOStabilityResults")){
                        dynamicTableHTMLBuffer = new StringBuilder();
                        dynamicTableHTMLBuffer = getStabilityResultsData(context,objectId);
                    }
                    // Added by IRM-2018x.3 for PDF Views (Req Id #32753) : Starts
                    else if(tableIdString.equalsIgnoreCase("StudyOwnership")){
                        dynamicTableHTMLBuffer = new StringBuilder();
                        dynamicTableHTMLBuffer = getStudyOwnershipData(context,objectId);
                    }
                    else if (tableIdString.equalsIgnoreCase("StudyLocationDates")) {
                        dynamicTableHTMLBuffer = new StringBuilder();
                        dynamicTableHTMLBuffer=	getStabilityResultsonStudyLocationDates(context, objectId);
                    }
                    //Added by IRM-2018x.3 for PDF Views (Req Id #32753) : ends

                    else if(tableIdString.equalsIgnoreCase("DSOCertifications")){
                        dynamicTableHTMLBuffer = new StringBuilder();
                        dynamicTableHTMLBuffer = getCertificationsData(context,objectId);
                    }
                    //Modified by DSM(Sogeti)-2018x.6 May CW 2022 for PDF Views (Req-42227) - Starts
                    else if(tableIdString.equalsIgnoreCase("DSOPackagingCertifications")){
                        dynamicTableHTMLBuffer = new StringBuilder();
                        dynamicTableHTMLBuffer = getPackagingCertificationsData(context,objectId);
                    } //Modified by DSM(Sogeti)-2018x.6 May CW 2022 for PDF Views (Req-42227) - Ends
                    else if(tableIdString.equalsIgnoreCase("DSOWarehouseClassification")){
                        dynamicTableHTMLBuffer = new StringBuilder();
                        dynamicTableHTMLBuffer = getWarehouseClassificationData(context,objectId);
                    } else if (tableIdString.equalsIgnoreCase("DSOStabilityResultsTab")) {
                        dynamicTableHTMLBuffer = new StringBuilder();
                        dynamicTableHTMLBuffer=	getStabilityResultsonProductPartData(context, objectId);
                    } //Added by DSM Sogeti for 2018x.3 PDF Views Req #32753 : Starts
                    else if (tableIdString.equalsIgnoreCase("GPSAssessment")) {
                        dynamicTableHTMLBuffer = new StringBuilder();
                        dynamicTableHTMLBuffer=	getGPSAssessmentData(context, objectId);
                    }else if (tableIdString.equalsIgnoreCase("FileVersions")) {
                        dynamicTableHTMLBuffer = new StringBuilder();
                        dynamicTableHTMLBuffer=	getFileVersionsData(context, objectId);
                    } //Added by DSM Sogeti for 2018x.3 PDF Views Req #32753 : Ends
                    //Added by DSM(Sogeti)-2018x.5 for PDF Views Requirements 35306, 32960, 32964, 32965, 32966, 35338, 34926, 32866 and 32869 POA ATS Gendoc- Starts
                    else if(tableIdString.equalsIgnoreCase("POARelatedParts")) {
                        dynamicTableHTMLBuffer=	getPOARelatedParts(context, objectId);
                    } else if (tableIdString.equalsIgnoreCase("ATSRelatedParts")) {
                        dynamicTableHTMLBuffer=	getATSRelatedParts(context, objectId);
                    } else if (tableIdString.equalsIgnoreCase("ATSRevisions")) {
                        dynamicTableHTMLBuffer=	getATSRevisions(context, objectId);
                    } else if (tableIdString.equalsIgnoreCase("ATSRelatedSpecification")) {
                        dynamicTableHTMLBuffer=	getATSRelatedSpefication(context, objectId);
                        //Added by DSM-2018x.6 for PDF Views for Req#37091/37092 - Start
                    } else if ("REGISTRATIONDETAILS".equalsIgnoreCase(tableIdString)) {
                        dynamicTableHTMLBuffer=	getRegistrationTableDetails(context, objectId);
                        //Added by DSM-2018x.6 for PDF Views for Req#37091/37092 - Ends
                        //Added by DSM-2018x.6 for PDF Views for Req#36346 - Start
                    }else if("BatteryRollUp".equalsIgnoreCase(tableIdString)){
                        dynamicTableHTMLBuffer = getBatteryRollUp(context,objectId,pdfViewType);
                    }
                    //Added by DSM-2018x.6 for PDF Views for Req#36346 - End
                    //Added by DSM-2018x.6 for PDF Views Defect-39337 - Starts
                    else if("MarketClearance".equalsIgnoreCase(tableIdString)){
                        dynamicTableHTMLBuffer=getMarketClearance(context,objectId,strType);
                    }
                    //Added by DSM-2018x.6 for PDF Views Defect-39337 - Ends
                    //Added by DSM(Sogeti)-2022x.5 for PDF Views Requirements-49482 , 49483 - Start
                    else if("DSOIngredientTransparency".equalsIgnoreCase(tableIdString)){
                        dynamicTableHTMLBuffer=getIngredientTransparency(context,objectId,strType);
                    }
                    //Added by DSM-2022x.5 for PDF Views Requirements-49482 , 49483 - Ends

                    //Added by DSM-2018x.6 July CW for PDF Views Req #39480: Start
                    else if("DesignParameter".equalsIgnoreCase(tableIdString)){
                        dynamicTableHTMLBuffer=getDesignParameter(context,objectId);
                    }
                    //Added by DSM-2018x.6 July CW for PDF Views Req #39480: End
                    //Added by DSM-2018x.6 Feb CW for PDF Views Req #41363,41364: Start
                    else if("DSOSustainability".equalsIgnoreCase(tableIdString)){
                        dynamicTableHTMLBuffer = getSustainability(context,objectId,strType);
                    }
                    //Added by DSM-2018x.6 Feb CW for PDF Views Req #41363,41364: End
                    // Added by (DSM Sogeti) for (2018x.6 Apr CW 2022) - PDF Views Req #41365,41373 Start
                    else if ("DSOCertificationTable".equalsIgnoreCase(tableIdString)) {
                        dynamicTableHTMLBuffer = getCertifications(context, objectId, strType);
                    }
                    // Added by (DSM Sogeti) for (2018x.6 Apr CW 2022) - PDF Views Req #41365,41373 End
                	//Added by DSM-2022x.5 for PDF Views (Req:48198) : Starts
                    else if ("PackagingComponentType".equalsIgnoreCase(tableIdString)) {
                        dynamicTableHTMLBuffer = getPackagingComponentType(context, objectId);
                    }
                	//Added by DSM-2022x.5 for PDF Views (Req:48198) : Ends
                    else {
                        dynamicTableHTMLBuffer = new StringBuilder();
                    }
                }
                // finally replace the inprocessHTMl with the processed table
                HTMLTemplateBuffer.replace(dynamicTableStartIndx, dynamicTableEndIndx + 3, dynamicTableHTMLBuffer.toString());
            }
        }
        catch (Exception e)
        {
            e.printStackTrace();
        }
        return HTMLTemplateBuffer;
    }
//Added by DSM Sogeti for 2018x.3 PDF Views Req #32753 : Starts
    /**
     * helper method to get GPS FileVersions Data.
     * @param context
     * @param ObjectId
     * @return StringBuilder
     * @throws Exception
     */
    private StringBuilder getFileVersionsData(Context context, String strObjectId) throws Exception{
        StringBuilder sFileVersionsData = new StringBuilder();
        try {
            if(validateString(strObjectId)){
                //DomainObject domainObject= DomainObject.newInstance(context,strObjectId);
                Map ArgsmapFileVers			= new HashMap();
                ArgsmapFileVers.put("objectId", strObjectId);
                String[] argsfiles			= JPO.packArgs(ArgsmapFileVers);
                MapList mlFileVersList		= new MapList();
                String strFileName 			= DomainConstants.EMPTY_STRING;
                String strVer 				= DomainConstants.EMPTY_STRING;
                String strOriginated		= DomainConstants.EMPTY_STRING;
                String strComments			= DomainConstants.EMPTY_STRING;
                String StrId				= DomainConstants.EMPTY_STRING;
                DomainObject dObject 		= null;
                mlFileVersList 				= (MapList)pgPDFViewHelper.executeMainClassMethod(context, "emxCommonFileUI", "getFileVersions", argsfiles);
                if(mlFileVersList != null && mlFileVersList.size() > 0){
                    sFileVersionsData.append("<TR><TD><TABLE class=\"pdf\" cellspacing=\"0\" width=\"1000px\" id=\"FileVersions\">");
                    sFileVersionsData.append("<thead>");
                    sFileVersionsData.append("<TR><TD colspan='4' class=\"new\" ><font size='4'><b>File Versions<br /></b></font></TD></TR>");
                    sFileVersionsData.append("<TR>");
                    sFileVersionsData.append("<TD align=\"center\" width=\"250px\" ><B>Ver</B></TD>");
                    sFileVersionsData.append("<TD align=\"center\" width=\"250px\" ><B>File Name</B></TD>");
                    sFileVersionsData.append("<TD align=\"center\" width=\"250px\" ><B>Orginated</B></TD>");
                    sFileVersionsData.append("<TD align=\"center\" width=\"250px\" ><B>Comments</B></TD>");
                    sFileVersionsData.append("</TR></thead>");
                    sFileVersionsData.append("<tbody>");
                    Map mpFileVersMap 	= null;
                    for(Iterator FilesVersItr = mlFileVersList.iterator(); FilesVersItr.hasNext();) {
                        mpFileVersMap 	= (Map)FilesVersItr.next();
                        StrId 				= (String)mpFileVersMap.get(DomainConstants.SELECT_ID);
                        dObject 			= DomainObject.newInstance(context, StrId);
                        strComments 		= dObject.getInfo(context, pgPDFViewConstants.SELECT_ATTRIBUTE_CHECK_IN_REASON);
                        strVer 				= (String)mpFileVersMap.get(DomainConstants.SELECT_REVISION);
                        strFileName 		= (String)mpFileVersMap.get(pgPDFViewConstants.CONST_FORMAT_FILE_NAME);
                        strOriginated 		= (String)mpFileVersMap.get(DomainConstants.SELECT_ORIGINATED);
                        sFileVersionsData.append("<TR align=\"center\" class=\"pdf\">");
                        sFileVersionsData.append("<TD align='center' width=\"250px\">"+validateString1(strVer)+"</TD>");
                        sFileVersionsData.append("<TD align='center' width=\"250px\">"+validateString1(strFileName)+"</TD>");
                        sFileVersionsData.append("<TD align='center' width=\"250px\">"+validateString1(strOriginated)+"</TD>");
                        sFileVersionsData.append("<TD align='center' width=\"250px\">"+validateString1(strComments)+"</TD>");
                        sFileVersionsData.append("</TR>");
                    }
                    sFileVersionsData.append("</tbody>");
                    sFileVersionsData.append("</TABLE><TR><TD><br /></TD></TR></TD></TR>");
                }
            }
        }catch (Exception e) {
            e.printStackTrace();
        }
        return sFileVersionsData;
    }
    //Added by DSM Sogeti for 2018x.3 PDF Views Req #32753 : Ends

//Added by DSM Sogeti for 2018x.3 PDF Views Req #32753 : Starts
    /**
     * helper method to get GPS Assessment Data.
     * @param context
     * @param ObjectId
     * @return StringBuilder
     * @throws Exception
     */
    private StringBuilder getGPSAssessmentData(Context context, String strObjectId) throws Exception{
        StringBuilder sGPSAssessmentData = new StringBuilder();
        try {
            if(validateString(strObjectId)) {
                StringList slObjSelects 		= new  StringList();
                DomainObject dObject 			= null;
                Map mTaskMap 			 	 	= null;
                String strGPSStatus				=DomainConstants.EMPTY_STRING;
                String strNRQID					=DomainConstants.EMPTY_STRING;
                String strTaskName				=DomainConstants.EMPTY_STRING;
                slObjSelects.add(pgPDFViewConstants.SELECT_ATTRIBUTE_GPSSTATUS);
                slObjSelects.add(pgPDFViewConstants.SELECT_ATTRIBUTE_NRQID);
                slObjSelects.add(pgPDFViewConstants.SELECT_ATTRIBUTE_ORIGINALTASKNAME);
                dObject 				= DomainObject.newInstance(context, strObjectId);
                MapList mlTask 			= dObject.getRelatedObjects(context, //Context
                        pgPDFViewConstants.RELATIONSHIP_PGGPSASSESSMENTTASKINPUTS, //relPattern
                        pgPDFViewConstants.TYPE_PGGPSASSESSMENTTASK, //typePattern
                        slObjSelects, //objectSelects
                        null,// relationshipSelects
                        true, //getTo - Get Parent Data
                        false, //getFrom - Get Child Data
                        (short)1, //recurseToLevel
                        null, //objectWhere
                        null); //relationshipWhere
                if(mlTask != null && mlTask.size()>0) {
                    sGPSAssessmentData.append("<TR><TD><TABLE class=\"WordWrappdf\" cellspacing=\"0\" width=\"1000px\" id=\"GPSAssessment\">");
                    sGPSAssessmentData.append("<thead>");
                    sGPSAssessmentData.append("<TR><TD class=\"new\" colspan='3'><font size='4'><b>GPS Assessment</b></font></TD></TR>");
                    sGPSAssessmentData.append("</thead>");
                    sGPSAssessmentData.append("<tbody>");
                    sGPSAssessmentData.append("<TR>");
                    sGPSAssessmentData.append("<TD align='center' width=\"330px\"><B>Status</B></TD>");
                    sGPSAssessmentData.append("<TD align='center' width=\"330px\"><B>TaskName</B></TD>");
                    sGPSAssessmentData.append("<TD align='center' width=\"330px\"><B>NRQ ID</B></TD>");
                    sGPSAssessmentData.append("</TR>");
                    int size 			= mlTask.size();
                    for (int Task = 0;Task< size; Task++){
                        mTaskMap = (Map) mlTask.get(Task);
                        strGPSStatus 	= (String)mTaskMap.get(pgPDFViewConstants.SELECT_ATTRIBUTE_GPSSTATUS);
                        strNRQID     	= (String)mTaskMap.get(pgPDFViewConstants.SELECT_ATTRIBUTE_NRQID);
                        strTaskName  	=  (String)mTaskMap.get(pgPDFViewConstants.SELECT_ATTRIBUTE_ORIGINALTASKNAME);
                        sGPSAssessmentData.append("<TR>");
                        sGPSAssessmentData.append("<TD align='center' width=\"333px\">"+validateString1(strGPSStatus)+"</TD>");
                        sGPSAssessmentData.append("<TD align='center' width=\"333px\">"+validateString1(strTaskName)+"</TD>");
                        sGPSAssessmentData.append("<TD align='center' width=\"333px\">"+validateString1(strNRQID)+"</TD>");
                        sGPSAssessmentData.append("</TR>");
                    }
                    sGPSAssessmentData.append("</tbody>");
                    sGPSAssessmentData.append("</TABLE><TR><TD><br /></TD></TR></TD></TR>");
                }
            }
        }catch (Exception e) {
            e.printStackTrace();
        }
        return sGPSAssessmentData;
    }
    //Added by DSM Sogeti for 2018x.3 PDF Views Req #32753 : Ends

    /**
     * ex: 	templateKey = @_@pd*_*pgRawMaterial_relationship[pgMaster].from.name
     * where pd is the prefix
     *
     * This method splits the key into prefix and mapKey
     *
     * */
    private String[] getActualMapKeys(String HTMLTemplateKey)
    {
        String mapKeysAndPrefix[] = new String[2];
        final String KEY_PREFIX_START = "@_@";
        final String KEY_PREFIX_END = "*_*";
        try
        {
            if ((null != HTMLTemplateKey) && (!HTMLTemplateKey.isEmpty()) && (!"".equals(HTMLTemplateKey)))
            {
                //if template key contains a prefix
                int prefixStart = HTMLTemplateKey.indexOf(KEY_PREFIX_START);
                int prefixEnd = HTMLTemplateKey.indexOf(KEY_PREFIX_END);
                if((prefixStart>-1) && (prefixEnd>-1))
                {
                    mapKeysAndPrefix[0] = HTMLTemplateKey.substring(prefixStart + KEY_PREFIX_START.length(),prefixEnd);
                }
                else
                {
                    mapKeysAndPrefix[0] =DomainConstants.EMPTY_STRING;
                }
                if(prefixEnd>-1)
                {
                    mapKeysAndPrefix[1] = HTMLTemplateKey.substring(prefixEnd+KEY_PREFIX_END.length());
                }
                else
                    mapKeysAndPrefix[1] = HTMLTemplateKey;
            }
            else
            {
                //templateKey is empty
                mapKeysAndPrefix[0]= DomainConstants.EMPTY_STRING;
                mapKeysAndPrefix[1]=DomainConstants.EMPTY_STRING;
            }
        }
        catch (Exception e)
        {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }
        return mapKeysAndPrefix;
    }
    /**
     * Replaces static content from XML files to HTML tables with data.
     * @param HTMLTemplateBuffer
     * @param consolidatedMap
     * @return
     */
    private StringBuffer replaceStaticKeyInTemplate(Context context,StringBuffer HTMLTemplateBuffer,Map<String, String> consolidatedMap){
        final String STATIC_TEXT_START = "##";
        final String STATIC_TEXT_END = ";;";
        try{

            while (HTMLTemplateBuffer.indexOf(STATIC_TEXT_START) > 0){
                int startIndx = HTMLTemplateBuffer.indexOf(STATIC_TEXT_START);
                int endIndx = HTMLTemplateBuffer.indexOf(STATIC_TEXT_END);
                String consolidatedMapKey = HTMLTemplateBuffer.substring(startIndx + STATIC_TEXT_START.length(), endIndx);

                String consolidatedMapValue =DomainConstants.EMPTY_STRING;
                if (consolidatedMap.containsKey(consolidatedMapKey))
                {
                    consolidatedMapValue = (String) consolidatedMap.get(consolidatedMapKey);
                    if(consolidatedMapValue.contains("##")){
                        consolidatedMapValue = consolidatedMapValue.replaceAll("##","#_HASH_#");
                    }
                    if(consolidatedMapValue.contains(";;"))
                    {
                        consolidatedMapValue = consolidatedMapValue.replaceAll(";;","#_Colon_#");
                    }
                }
                HTMLTemplateBuffer.replace(startIndx, endIndx + STATIC_TEXT_END.length(), consolidatedMapValue);
            }
            while (HTMLTemplateBuffer.indexOf("#_HASH_#") > 0)
            {
                int startIndx = HTMLTemplateBuffer.indexOf("#_HASH_#");
                HTMLTemplateBuffer.replace(startIndx,startIndx+8,"##");
            }
            while (HTMLTemplateBuffer.indexOf("#_Colon_#") > 0)
            {
                int startIndx = HTMLTemplateBuffer.indexOf("#_Colon_#");
                HTMLTemplateBuffer.replace(startIndx,startIndx+9,";;");
            }
        }catch(Exception e){
            e.printStackTrace();
        }
        return HTMLTemplateBuffer;
    }
    /**
     * Parses HTML content to create document object.
     * @param strHTMLWithData
     * @return
     * @throws Exception
     */
    public String formatTables(String strHTMLWithData) throws Exception{
        try{
            strHTMLWithData = initialScreener(strHTMLWithData);
            ByteArrayInputStream byteStream = new ByteArrayInputStream(strHTMLWithData.getBytes());
            InputSource inputsource = new InputSource(byteStream);
            DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();
            dbf.setNamespaceAware(false);
            dbf.setIgnoringElementContentWhitespace(true);
            // Parse the input to produce a parse tree with its root
            // in the form of a Document object
            DocumentBuilder documentbuilder = dbf.newDocumentBuilder();
            doc = documentbuilder.parse(inputsource);

            NodeList nodelist = doc.getElementsByTagName("TABLE");
            Node mainTable = nodelist.item(0);
            processTable(mainTable, false);
        }catch (SAXParseException ex){
            ex.printStackTrace();
        }
        return writeFile(doc);
    }
    /**
     * Replace not supported character by Document Builder
     * @param strHTMLcontents
     * @return
     */
    private String initialScreener(String strHTMLcontents){
        //first check if there are already any &amp;
        strHTMLcontents = strHTMLcontents.replaceAll("&amp;", "&");
        strHTMLcontents = strHTMLcontents.replaceAll("&nbsp;", "n#b#s#p");
        strHTMLcontents = strHTMLcontents.replaceAll("&lt;", "<");
        strHTMLcontents = strHTMLcontents.replaceAll("&gt;", ">");
        //Added by DSM(Sogeti)-2015x.5 PDF views For Defect#16150 - Starts
        strHTMLcontents = strHTMLcontents.replaceAll("&quot;","\"");
        //Added by DSM(Sogeti)-2015x.5 PDF views For Defect#16150 - Ends
        // check for '&' and replace it with '&amp;'
        strHTMLcontents= strHTMLcontents.replaceAll("&", "&amp;");
        return strHTMLcontents;
    }
    /**
     * Replace not supported character by Document Builder with its orignal content
     * @param table
     * @param rows
     *: Number of rows to keep in table 1 excluding header row
     */
    private String finalScreener(String strHTMLcontents){
        //return strHTMLcontents.replaceAll("n#b#s#p","&nbsp;");
        strHTMLcontents= strHTMLcontents.replaceAll("n#b#s#p","&nbsp;");

        strHTMLcontents =strHTMLcontents.replaceAll("#LINE_BREAK","<BR/>");
        strHTMLcontents =strHTMLcontents.replaceAll("#BOLDTAG_START","<B>");
        strHTMLcontents =strHTMLcontents.replaceAll("#BOLDTAG_END","</B>");
        strHTMLcontents =strHTMLcontents.replaceAll("#LESS_THAN","&lt;");
        strHTMLcontents =strHTMLcontents.replaceAll("#GREATER_THAN","&gt;");
        return strHTMLcontents;
    }
    /**
     * Used to create multiple header for dynamic tables
     * @param table
     * @param rows
     *
     */
    private void splitTable(Node table, int rows){
        // browse thru the table and find the tr having th i.e header.. save it
        // create 2 tables with all the info same as previous tables with "rows"
        // no. of rows
        Node parentNode = table.getParentNode();
        // Node tdNode = table.getParentNode();
        Node trNode = parentNode.getParentNode();
        Node grndParent = null;
        if (null != trNode)
        {
            grndParent = trNode.getParentNode();
        }
        if (rows == 1)
        {
            grndParent.insertBefore(getPageBreakNode(), trNode);
            return;
        }
        Node table1 = table.cloneNode(true);
        Node table2 = table.cloneNode(true);
        Node trSibling = trNode.getNextSibling();
        NodeList tableChilds = table.getChildNodes();
        NodeList table1Childs = table1.getChildNodes();
        NodeList table2Childs = table2.getChildNodes();
        int rowCount = 0;
        int length = tableChilds.getLength();
        List<Node> table1DeleteList = new ArrayList<Node>();
        List<Node> table2DeleteList = new ArrayList<Node>();
        for (int tblChldCntr = 0; tblChldCntr < length; tblChldCntr++)
        {
            Node tableChild = tableChilds.item(tblChldCntr);
            Node table1Child = table1Childs.item(tblChldCntr);
            Node table2Child = table2Childs.item(tblChldCntr);
            if (tableChild.getNodeName().equalsIgnoreCase("TR"))
            {
                rowCount++;
                // dont remove the header info
                if (countTags(tableChild, "TH") > 0)
                {
                    continue;
                }
                if (rowCount <= rows)
                {
                    // remove that row from second table
                    table2DeleteList.add(table2Child);
                } else {
                    // remove row from first table
                    table1DeleteList.add(table1Child);
                }
            }
        }
        if ((table1DeleteList.size() > 0) && (table2DeleteList.size() > 0))
        {
            int table1DeleteListSize = table1DeleteList.size();
            for (int i = 0; i < table1DeleteListSize; i++)
            {
                Node table1Node = table1DeleteList.get(i);
                table1.removeChild(table1Node);
            }
            int table2DeleteListSize = table2DeleteList.size();
            for (int i = 0; i < table2DeleteListSize; i++)
            {
                Node table2Node = table2DeleteList.get(i);
                table2.removeChild(table2Node);
            }
            Node table1Tr = doc.createElement("TR");
            Node table1TD = doc.createElement("TD");
            Node table2Tr = doc.createElement("TR");
            Node table2TD = doc.createElement("TD");
            table1TD.appendChild(table1);
            table1Tr.appendChild(table1TD);
            table2TD.appendChild(table2);
            table2Tr.appendChild(table2TD);
            parentNode.replaceChild(table1, table);
            if (null != grndParent)
            {
                grndParent.insertBefore(table2Tr, trSibling);
                grndParent.insertBefore(getPageBreakNode(), table2Tr);
            } else
            {
                trNode.appendChild(table2Tr);
                trNode.insertBefore(getPageBreakNode(), table2Tr);
            }
        }
        else
        {
            if ((table2DeleteList.size() > 0))
            {
                // if table2 is empty and table1 is not empty then insert break
                // after the table
                grndParent.insertBefore(getPageBreakNode(), trSibling);
            } else if (table1DeleteList.size() > 0)
            {
                // if table1 is empty and table2 is not empty then insert break
                // before the table
                grndParent.insertBefore(getPageBreakNode(), trNode);
            }
        }
    }
    /***
     * Creates a Page Break Row in the table
     *
     * @return pageBreak node
     */
    private Node getPageBreakNode(){
        Node trBreak = doc.createElement("TR");
        Node td = doc.createElement("TD");
        Element br =doc.createElement("BR");
        br.setAttribute("style", "page-break-after:always;");
        Node text = doc.createTextNode("break here");
        Node b = doc.createElement("B");
        b.appendChild(text);
        td.appendChild(br);
        trBreak.appendChild(td);
        return trBreak;
    }
    /**
     * Used to count table header and table body tags from HTML table data
     * @param node
     * @param tag
     * @return
     */
    private int countTags(Node node, String tag){
        NodeList childNodes = node.getChildNodes();
        int tagCnt = 0;
        int size = childNodes.getLength();
        for (int i = 0; i < size; i++)
        {
            Node child = childNodes.item(i);
            if((child.getNodeName().equalsIgnoreCase("thead"))||(child.getNodeName().equalsIgnoreCase("tbody")))
            {
                NodeList trNodes = child.getChildNodes();
                int trsize = trNodes.getLength();
                for (int tr = 0; tr < trsize; tr++)
                {
                    Node trNode = trNodes.item(tr);
                    if (trNode.getNodeName().equalsIgnoreCase(tag))
                        tagCnt++;
                }
            }
            if (child.getNodeName().equalsIgnoreCase(tag))
                tagCnt++;
        }
        return tagCnt;
    }
    /**
     * @param table
     * @param position
     * @return
     */
    private int[] isSplitRequired(Node table, int tableStart, int tdPageSize){
        int upperRows[] = {0,0};
        int tableSize = processTable(table, true);
        upperRows[1] =tableSize;
        int tableEnd = tableStart + tableSize - 1;
        int pageSize = (tdPageSize>0)?tdPageSize:pgPDFViewConstants.DEFAULT_PAGE_SIZE;
        //adding Buffer size to table start and table End
        int startPageNo = (tableStart- pgPDFViewConstants.TABLE_BUFFER_SIZE) / pgPDFViewConstants.DEFAULT_PAGE_SIZE;
        int endPageNo = (tableEnd+pgPDFViewConstants.TABLE_BUFFER_SIZE) / pgPDFViewConstants.DEFAULT_PAGE_SIZE;
        int linesBreak = 0;
        if (startPageNo != endPageNo)
        {
            linesBreak = ((startPageNo + 1) * pgPDFViewConstants.DEFAULT_PAGE_SIZE) - tableStart;
            // return rows to break -1 row for header.(Header should not be
            // counted)
            upperRows[0] = rowsToSplit(table,linesBreak, tableSize, countTags(table, "TR"),pageSize);
            if(upperRows[0]<1){upperRows[0]++;}
            return upperRows;
        }
        return upperRows;
    }
    /**
     *  This method identifies no of rows that should be present in the upper table after the split
     */
    private int rowsToSplit(Node table, int linesBreak, int tableSize, int trCount,int pageSize)
    {
        //if tr size is > the page size .. dont split the table
        if((tableSize/trCount)>pageSize){
            return -1;
        }
        linesBreak = (int)((linesBreak/(double)pgPDFViewConstants.DEFAULT_PAGE_SIZE)*pageSize);
        NodeList trNodeList = table.getChildNodes();
        int remainingPageSize=0;
        int rowCount=0,tdCount=0;
        int length = trNodeList.getLength();
        for (int i = 0; i < length; i++)
        {
            Node trNode = trNodeList.item(i);
            // get the tr
            if (trNode.getNodeName().equalsIgnoreCase("TR"))
            {
                //if(countTags(trNode,"TH")>0)thCount++;
                if(countTags(trNode,"TD")>0)tdCount++;
                int trSize = processTable(trNode,true);
                remainingPageSize +=trSize;
                if(remainingPageSize>(linesBreak))
                    break;
                rowCount++;
            }
        }
        if((tdCount<=1)&&(remainingPageSize>=(pageSize - 2*pgPDFViewConstants.TABLE_BUFFER_SIZE))){
            //split the table with 1 td row
            //this condition will be encountered only when a table has a row with large data
            //that along with header does not fit into 1 page.
            //here we forcefully allow the table row to spill over next page
            remainingPageSize = 0;
            rowCount=0;
            for (int i = 0; i < length; i++)
            {
                Node trNode = trNodeList.item(i);
                // get the tr
                if (trNode.getNodeName().equalsIgnoreCase("TR"))
                {
                    int trSize = processTable(trNode,true);
                    remainingPageSize +=trSize;
                    if(remainingPageSize>(pageSize*2-pgPDFViewConstants.TABLE_BUFFER_SIZE))
                        break;
                    rowCount++;
                }
            }
        }
        return rowCount;
    }
    /**
     * primary method that starts file processing.
     *
     * @param table
     *            : table to be processed
     * @return table size
     * */
    private int processTable(Node table, boolean sizeOnly){
        if ((null != table) && (table.hasChildNodes())){
            NodeList trNodeList = table.getChildNodes();
            int tableSize = 0;
            // iterate TRs:START .. TR nodes size will vary as and when dynamic
            // TRs are being added
            for (int i = 0; i < trNodeList.getLength(); i++){
                Node trNode = trNodeList.item(i);
                // get the tr
                if (trNode.getNodeName().equalsIgnoreCase("TR")){
                    NodeList tdNodeList = trNode.getChildNodes();
                    int tdSize = 0;
                    // iterate TDs: START
                    int tdNodeListSize = tdNodeList.getLength();
                    for (int j = 0; j < tdNodeListSize; j++){
                        Node tdNode = tdNodeList.item(j);
                        tdSize = processTD(tdNode, tableSize, sizeOnly,tdSize);
                    }// iterate TDs: END
                    tableSize += tdSize;
                }else if((trNode.getNodeName().equalsIgnoreCase("TD"))||((trNode.getNodeName().equalsIgnoreCase("TH")))){
                    // if only TR Size is required
                    tableSize = processTD(trNode,tableSize,sizeOnly,tableSize);
                }else if((trNode.getNodeName().equalsIgnoreCase("TBODY"))||((trNode.getNodeName().equalsIgnoreCase("THEAD")))){
                    tableSize = tableSize +processTable(trNode, sizeOnly);
                }
            }// iterate TRs:END
            return tableSize;
        }
        return 0;
    }
    /**
     * This method will process the TD node passed and will return the size(number of lines) consumed by that TD
     *
     * @param tdNode
     * @param tableSize : Basically the start table pointer
     * @param isSizeOnly : if set to true this method will only process to fetch size, and will not process for splitting the table.
     * @param prevTDSize : previous TD size.
     * @return Size of the current TD
     */
    private int processTD(Node tdNode, int tableSize, boolean isSizeOnly, int prevTDSize){
        int currTDSize = 0, brSize = 1, currTextLines = 0;
        // get the TD
        int totalTextLinesInTD = 0;
        if ((tdNode.getNodeName().equalsIgnoreCase("TD"))||((tdNode.getNodeName().equalsIgnoreCase("TH"))))
        {
            String strWidth = getAttributeValue(tdNode, "width");
            int tdWidth = 0;
            if ((null != strWidth) && (!strWidth.isEmpty()) && (!"".equals(strWidth)))
            {
                tdWidth = Integer.parseInt(strWidth);
            }
            String strFontSize = getAttributeValue(tdNode, "fontSize");
            double fontSize = 0;
            if ((null != strFontSize) && (!strFontSize.isEmpty()) && (!"".equals(strFontSize)))
            {
                fontSize = Double.parseDouble(strFontSize);
            }
            if (tdNode.hasChildNodes())
            {
                NodeList tdChildNodeLst = tdNode.getChildNodes();
                for (int k = 0; k < tdChildNodeLst.getLength(); k++)
                {
                    Node tdChildNode = tdChildNodeLst.item(k);
                    // if TD has TABLE then send back to processTable
                    if ((tdChildNode.getNodeName().equalsIgnoreCase("TABLE")))
                    {
                        String strSplitReq = getAttributeValue(tdChildNode, "isSplitReq");
                        String strPageSize = getAttributeValue(tdChildNode, "pageSize");
                        int pageSize = 0;
                        if ((null != strPageSize) && (!strPageSize.isEmpty()) && (!"".equals(strPageSize)))
                        {
                            pageSize = Integer.parseInt(strPageSize);
                        }
                        // here we have found a table
                        int[] rowsToSplit = isSplitRequired(tdChildNode, tableSize,pageSize);
                        if ((null == strSplitReq) || (strSplitReq.isEmpty()))
                        {
                            isSizeOnly =true;
                        }
                        if ((rowsToSplit[0] > 0) && (!isSizeOnly))
                        {
                            splitTable(tdChildNode, rowsToSplit[0]);
                            // now the next split table should
                            // start from a new page
                            int tblPageSize = (pageSize>0)?pageSize:pgPDFViewConstants.DEFAULT_PAGE_SIZE;
                            currTDSize = (((tableSize / pgPDFViewConstants.DEFAULT_PAGE_SIZE) + 1) * pgPDFViewConstants.DEFAULT_PAGE_SIZE) - tableSize;
                            //increment the table start pointer i.e subTDTblSize by the Table buffer size
                            currTDSize += pgPDFViewConstants.TABLE_BUFFER_SIZE+1;
                        }
                        else
                        {
                            currTDSize = rowsToSplit[1];
                        }
                    }
                    // if TD has BRs count the number of BRs
                    else if ((tdChildNode.getNodeName().equalsIgnoreCase("BR")))
                    {
                        brSize++;
                        Node sibl = tdChildNode.getNextSibling();
                        if (sibl == null)
                            brSize--;
                    } else if ((tdChildNode.getNodeName().equalsIgnoreCase("IMG")))
                    {
                        brSize+=4;
                    }
                    else if ((tdChildNode.getNodeType() == Node.TEXT_NODE))
                    {
                        // if TD has text data then find the number of lines it consumes
                        currTextLines = 1;
                        if (tdWidth > 0)
                            currTextLines = getTextLines(tdChildNode, tdWidth,fontSize);
                        totalTextLinesInTD += currTextLines;
                    }
                }
            }
        }
        return maxSize(prevTDSize, currTDSize, brSize, totalTextLinesInTD);
    }
    /**
     * Identifies if TD content can be placed on same page
     * @param tdSubNode
     * @param tdWidth
     * @return
     */
    private int getTextLines(Node tdSubNode, int tdWidth, double fontSize){
        final double FONT_SIZE = 6.4;
        double fntSize = (fontSize>0)?fontSize:FONT_SIZE;
        double lines = (tdSubNode.getNodeValue().length() * fntSize) / tdWidth;
        return (int) Math.ceil(lines);
    }
    /**
     * Replace pixel from node object
     * @param node
     * @param attr
     * @return attribute value
     */
    private String getAttributeValue(Node node, String attr){
        NamedNodeMap attLst = node.getAttributes();
        if ((attLst != null) && (null != attLst.getNamedItem(attr))
                && (null != attLst.getNamedItem(attr).getNodeValue()))
        {
            String attrValue = attLst.getNamedItem(attr).getNodeValue();
            if (attrValue.contains("px"))
                return attrValue.replaceFirst("px", "");
            else
                return attrValue;
        }
        return DomainConstants.EMPTY_STRING;
    }
    /**
     * Used to identify Max size required by TD
     * @param a
     * @param b
     * @param c
     * @param d
     * @return
     */
    private int maxSize(int a, int b, int c, int d){
        return Math.max(a, Math.max(b, Math.max(c, d)));
    }
    /**
     * Write HTML content to document
     * @param document
     * @return
     * @throws TransformerConfigurationException
     * @throws TransformerException
     * @throws FileNotFoundException
     */
    private String writeFile(Node document) throws TransformerConfigurationException, TransformerException,FileNotFoundException{
        // Use a Transformer for output
        TransformerFactory tFactory = TransformerFactory.newInstance();
        Transformer transformer;
        String stringXML = DomainConstants.EMPTY_STRING;
        transformer = tFactory.newTransformer();
        DOMSource source = new DOMSource(document);
        StringWriter out;
        out = new StringWriter();
        StreamResult result = new StreamResult(out);
        transformer.transform(source, result);
        stringXML = out.toString();
        stringXML = StringEscapeUtils.unescapeJava(stringXML);
        return finalScreener(stringXML);
    }
    /**
     * Read type specific XML files
     * @param filename
     * @return
     * @throws FileNotFoundException
     */

    private String readPdfHtmlBase(Context context,String filename) throws FileNotFoundException {
        long startTime = new Date().getTime();
        Scanner scanner = null;
        //Modified by DSM(Sogeti) for 2018x.5 Defect 33271 : Starts
        StringBuilder sFinalContent = new StringBuilder();
        DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
        DocumentBuilder documentBuilder;
        try {
            documentBuilder = factory.newDocumentBuilder();
            documentBuilder.parse(new FileInputStream(new File(filename)));
            org.w3c.dom.Document docXML = documentBuilder.parse(new FileInputStream(new File(filename)));
		    //22x Upgrade changes start
			DOMImplementationRegistry registry = DOMImplementationRegistry.newInstance();
	        DOMImplementationLS impls =  (DOMImplementationLS)registry.getDOMImplementation("LS");
	        //Prepare the output
	        LSOutput outputFormat = impls.createLSOutput();
            StringWriter stringOut = new StringWriter ();
		    outputFormat.setCharacterStream(stringOut);
		    outputFormat.setEncoding("UTF-8");
		    //Prepare the serializer
	        LSSerializer xmlSerializer = impls.createLSSerializer();  
	        xmlSerializer.write(docXML, outputFormat);
            String stringOut1 = stringOut.toString().replaceAll("&gt;", ">");
            InputStream inputStream = new ByteArrayInputStream(stringOut1.getBytes(Charset.forName("UTF-8")));
            scanner = new Scanner(inputStream);
            if (scanner != null) {
                while (scanner.hasNextLine()){
                    sFinalContent.append(scanner.nextLine());
                }
            }
		    //22x Upgrade changes end
        }
			catch (Exception e) {
            e.printStackTrace();
        }finally{
            if (scanner != null) {
                scanner.close();
            }
        }
        long endTime = new Date().getTime();
        System.out.println("Total Time has taken by the readPdfHtmlBase Method is-->"+(endTime-startTime));
        //Modified by DSM(Sogeti) for 2018x.5 Defect 33271 : Ends
        return sFinalContent.toString();
    }


    /**
     * Get short type name
     * @param context
     * @return
     */
    Map mapTypeAbbreviation = new HashMap();
    public Object getTypeDisplayName(Context context,Object obj){
        StringList slDisplayName = new  StringList(1);
        Object DisplayName = null;
        //Modify Code Refactoring
//		Map mapTypeAbbreviation = new HashMap();
        if(mapTypeAbbreviation.isEmpty() || mapTypeAbbreviation==null) {
            mapTypeAbbreviation.put("pgApprovedSupplierList", "ASL");
            mapTypeAbbreviation.put("pgArtwork", "ART");
            mapTypeAbbreviation.put("pgBaseFormula","BSF");
            mapTypeAbbreviation.put("ECR","CR");
            mapTypeAbbreviation.put("pgCommonPerformanceSpecification", "CPST");
            mapTypeAbbreviation.put("pgConsumerDesignBasis","CDB");
            mapTypeAbbreviation.put("pgFinishedProduct","FP");
            mapTypeAbbreviation.put("pgIllustration", "ILST");
            mapTypeAbbreviation.put("pgLogisticSpec", "LOG");
            mapTypeAbbreviation.put("pgMakingInstructions","MI");
            mapTypeAbbreviation.put("pgMasterPackingMaterial","MPMS");
            mapTypeAbbreviation.put("pgMasterRawMaterial", "MRMS");
            mapTypeAbbreviation.put("pgMasterFinishedProduct","MPS");
            mapTypeAbbreviation.put("pgPackingMaterial","MATL");
            mapTypeAbbreviation.put("pgRawMaterial","MATL");
            mapTypeAbbreviation.put("Shared Table","CPS");
            mapTypeAbbreviation.put("pgPhase","FIL");
            mapTypeAbbreviation.put("pgNonGCASPart", "NGCAS");
            mapTypeAbbreviation.put("pgPackingInstructions", "PI");
            mapTypeAbbreviation.put(pgV3Constants.TYPE_PGPACKINGSUBASSEMBLY,"PSUB");
            mapTypeAbbreviation.put("pgProcessStandard", "PROS");
            mapTypeAbbreviation.put("pgApplianceProduct", "APP");
            mapTypeAbbreviation.put("pgAssembledProduct","ASP");
            mapTypeAbbreviation.put("pgFormulatedProduct","FC");
            mapTypeAbbreviation.put("pgQualitySpecification", "QUAL");
            mapTypeAbbreviation.put("pgStackingPattern", "SPS");
            mapTypeAbbreviation.put("pgStandardOperatingProcedure","SOP");
            mapTypeAbbreviation.put("pgSupplierInformationSheet", "SIS");
            mapTypeAbbreviation.put("pgTestMethod", "TM");
            mapTypeAbbreviation.put("Safety And Regulatory Characteristic","SRS");
            mapTypeAbbreviation.put("pgFormulatedMaterial","FMATL");
            mapTypeAbbreviation.put("pgMaterial","MATL");
            mapTypeAbbreviation.put("pgPPMConstituent","Constituent");
            //Added by DSM(Sogeti)-2015x.1 for PDF Views (Defect ID-6925) - Starts
            mapTypeAbbreviation.put("Packaging Material Part","PMP");
            //Added by DSM(Sogeti)-2018x.2 for PDF Views TM Data Migration
            mapTypeAbbreviation.put(pgV3Constants.TYPE_TESTMETHOD,"TMS");
            //Added by DSM(Sogeti)-2018x.5 for PDF Views Defect #34668  - Starts
            mapTypeAbbreviation.put(pgV3Constants.TYPE_RAWMATERIALPART,"RMP");
            //Added by DSM(Sogeti)-2018x.5 for PDF Views Defect #34668  - Ends
            //Added by DSM(Sogeti)-2018x.5 for PDF Views Defect #36154  - Starts
            mapTypeAbbreviation.put(pgV3Constants.TYPE_MASTERRAWMATERIALPART,"Master Raw Material Part");
            //Added by DSM(Sogeti)-2018x.5 for PDF Views Defect #36154  - Ends
        }
        //Added by DSM(Sogeti)-2015x.1 for PDF Views (Defect ID-6925) - Ends
        if(obj instanceof StringList){
            StringList slActualType=(StringList)obj;
            if(null !=slActualType && slActualType.size() > 0){
                for(Object key:slActualType){
                    String KeyValue =(String)mapTypeAbbreviation.get(key);
                    slDisplayName.add(KeyValue);
                }
            }
            DisplayName=slDisplayName;
        }
        else if(obj instanceof String){
            String KeyValue =(String)mapTypeAbbreviation.get((String)obj);
            DisplayName = KeyValue;
        }
        //Added by DSM(Sogeti)-2015x.1 for PDF Views (Defect ID-6925) - Starts
        if(null==DisplayName){
            DisplayName = DomainConstants.EMPTY_STRING;
        }
        //Added by DSM(Sogeti)-2015x.1 for PDF Views (Defect ID-6925) - Ends
        return DisplayName;
    }
    /**
     * Used to retrieve Spec Sub type
     * @param context
     * @param specMap
     * @return
     */
    public String getSpecificationSubType(Context context,Map <String,String>specMap){
        String strSpecSubType=DomainConstants.EMPTY_STRING;
        try{
            //Modify Code Refactoring change some pgV3Constants
            if(null != specMap && !specMap.isEmpty()){
                String strType=specMap.get(DomainConstants.SELECT_TYPE);
                String pgAssemblyType=specMap.get(pgV3Constants.ATTRIBUTE_PGASSEMBLYTYPE);
                String pgCSSType=specMap.get(pgV3Constants.ATTRIBUTE_PGCSSTYPE);
                if (pgV3Constants.TYPE_PGFINISHEDPRODUCT.equals(strType)){
                    if("".equals(pgAssemblyType)){
                        strSpecSubType="Finished Product";
                    }
                    else if("FWIP-Finished Work in Process".equals(pgAssemblyType)){
                        strSpecSubType="FWIP-Finished Work in Process";
                    }
                    else if("Purchased Subassembly".equals(pgAssemblyType)){
                        strSpecSubType="Purchased Subassembly";
                    }
                    else if("Purchased and/or Produced Subassembly".equals(pgAssemblyType)){
                        strSpecSubType="Purchased and/or Produced Subassembly";
                    }else{
                        strSpecSubType=pgAssemblyType;
                    }
                }
                if (pgV3Constants.TYPE_PGQUALITYSPECIFICATION.equals(strType)){
                    strSpecSubType=pgCSSType;
                }
                if(pgV3Constants.TYPE_PGTESTMETHOD.equals(strType)){
                    if ("TAMU".equals(pgCSSType)){
                        strSpecSubType="TAMU";
                    }else{
                        strSpecSubType=DomainConstants.EMPTY_STRING;
                    }
                }
                if(pgV3Constants.TYPE_PGPACKINGMATERIAL.equals(strType)){
                    strSpecSubType="Packaging";
                }
                if(pgV3Constants.TYPE_PGRAWMATERIAL.equals(strType)){
                    strSpecSubType="Raw";
                }
                if(pgV3Constants.TYPE_PGPACKINGSUBASSEMBLY.equals(strType)){
                    if(StringUtils.isNotBlank(pgAssemblyType)){
                        strSpecSubType=pgAssemblyType;
                    }else{
                        strSpecSubType="PSUB";
                    }
                }
                //Added by DSM(Sogeti)-2018x.2 for PDF Views TM Data Migration
                if(pgV3Constants.TYPE_TESTMETHOD.equals(strType)){
                    strSpecSubType=pgAssemblyType;
                }
            }
        }
        catch (Exception e){
            System.out.println("Exception in getSpecificationSubType Method ! "+e.getMessage());
        }
        return strSpecSubType;
    }
    /**
     * Used to get BOM and Substitute data for IPM types
     * @param context
     * @param args
     * @param strObjectId
     * @param strPDFViewType
     * @param strUser
     * @return
     * @throws MatrixException
     */
    private  StringBuilder getBillOfMaterialSubstituteAndSAPBOMData(Context context,String[] args,String strObjectId,String strPDFViewType,String strUser) throws MatrixException{
        long startTime = new Date().getTime();
        //Modified by DSM(Sogeti)-2015x.4 for PDF View Performance improvement - Starts
        //${CLASS:pgV3SecurityUtil} objV3 = new ${CLASS:pgV3SecurityUtil}(context, null);
        //Modified by DSM(Sogeti)-2015x.4 for PDF View Performance improvement - Ends
        StringBuilder BOMSubstituteSAPBuffer=new StringBuilder();
        DomainObject dmoPart = null;
        //Modified by DSM(Sogeti) for Code Optimization Start
        DomainObject dmoFirstLevelPart = null;
        String strPCTFIL=DomainConstants.EMPTY_STRING;
        String SAPDescription1=DomainConstants.EMPTY_STRING;
        String strPCTFIL1=DomainConstants.EMPTY_STRING;
        String strPCTFIL2=DomainConstants.EMPTY_STRING;
        String strLevel = DomainConstants.EMPTY_STRING;
        String strFirstLevelId = DomainConstants.EMPTY_STRING;
        String strName = DomainConstants.EMPTY_STRING;
        String strHasChildren = DomainConstants.EMPTY_STRING;
        String fromEBOM = DomainConstants.EMPTY_STRING;
        String strIfSubstitute = DomainConstants.EMPTY_STRING;
        String strEBOMId = DomainConstants.EMPTY_STRING;
        String strFromName = DomainConstants.EMPTY_STRING;
        String pgChange = DomainConstants.EMPTY_STRING;
        String SAPDesc = DomainConstants.EMPTY_STRING;
        String Desc = DomainConstants.EMPTY_STRING;
        String strType = DomainConstants.EMPTY_STRING;
        String strDesc = DomainConstants.EMPTY_STRING;
        String pgCSSType = DomainConstants.EMPTY_STRING;
        String pgAssemblyType = DomainConstants.EMPTY_STRING;
        String strSpecSubType = DomainConstants.EMPTY_STRING;
        String strMin = DomainConstants.EMPTY_STRING;
        String strTarget = DomainConstants.EMPTY_STRING;
        String strMax = DomainConstants.EMPTY_STRING;
        String UOM = DomainConstants.EMPTY_STRING;
        String MF = DomainConstants.EMPTY_STRING;
        String PI = DomainConstants.EMPTY_STRING;
        String strPackingLevel = DomainConstants.EMPTY_STRING;
        //Commented by DSM(Sogeti)-2015x.2 for (Defect#8461) - Starts
		/*String strFinishedProductCode = DomainConstants.EMPTY_STRING;
		/String strCOSAnalysis = DomainConstants.EMPTY_STRING;*/
        //Commented by DSM(Sogeti)-2015x.2 for (Defect#8461) - Ends
        String strPackagingSize=  DomainConstants.EMPTY_STRING;
        String Comment = DomainConstants.EMPTY_STRING;
        String batchUnitSize = DomainConstants.EMPTY_STRING;
        String strUnitTotal = DomainConstants.EMPTY_STRING;
        String strUnitTotalUOM = DomainConstants.EMPTY_STRING;
        String strIngredientLoss = DomainConstants.EMPTY_STRING;
        String strIngredientLossUOM = DomainConstants.EMPTY_STRING;
        String strSubTotal = DomainConstants.EMPTY_STRING;
        String strSubTotalUOM = DomainConstants.EMPTY_STRING;
        String strIngredientLossComment = DomainConstants.EMPTY_STRING;
        String strComment = DomainConstants.EMPTY_STRING;
        String strSAPFILDescription = DomainConstants.EMPTY_STRING;
        String strObjType = DomainConstants.EMPTY_STRING;
        String strObjSubType = DomainConstants.EMPTY_STRING;
        String strBatchUnitSize = DomainConstants.EMPTY_STRING;
        String strRangeMin = DomainConstants.EMPTY_STRING;
        String strRangeMax = DomainConstants.EMPTY_STRING;
        String strBatchUOM = DomainConstants.EMPTY_STRING;
        String strNewDesc = DomainConstants.EMPTY_STRING;
        StringBuilder Target = new StringBuilder();
        StringBuilder IngredientLossComment=new StringBuilder();
        StringBuilder BatchUnitSize=new StringBuilder();
        StringList selectStmts = new StringList(25);
        //Modified by DSM(Sogeti) for Code Optimization End
        selectStmts.add(pgV3Constants.SELECT_ATTRIBUTE_PGBOMBASEQUANTITY);
        selectStmts.add(pgV3Constants.SELECT_ATTRIBUTE_PGENTRYBASEQUANTITY);
        selectStmts.add(pgV3Constants.SELECT_ATTRIBUTE_PGBASEUNITOFMEASURE);
        selectStmts.add(pgV3Constants.SELECT_ATTRIBUTE_PGQUANTITYFORPRODUCTIS);
        selectStmts.add(pgV3Constants.SELECT_ATTRIBUTE_PGQUANTITY);
        selectStmts.add(pgV3Constants.SELECT_ATTRIBUTE_PGQUANTITYUNITOFMEASURE);
        selectStmts.add(pgV3Constants.SELECT_ATTRIBUTE_PGINGREDIENTLOSS);
        selectStmts.add(pgV3Constants.SELECT_ATTRIBUTE_PGINGREDIENTLOSSUNITOFMEASURE);
        selectStmts.add(pgV3Constants.SELECT_ATTRIBUTE_PGSUBTOTAL);
        selectStmts.add(pgV3Constants.SELECT_ATTRIBUTE_PGSUBTOTALUNITOFMEASURE);
        //Batch Size
        selectStmts.add(pgV3Constants.SELECT_ATTRIBUTE_PGBATCHUNITSIZE);
        selectStmts.add(pgV3Constants.SELECT_ATTRIBUTE_PGMINQUANTITY);
        selectStmts.add(pgV3Constants.SELECT_ATTRIBUTE_PGMAXQUANTITY);
        selectStmts.add(pgV3Constants.SELECT_ATTRIBUTE_PGBATCHUNITSIZEUNITOFMEASURE);
        selectStmts.add(pgV3Constants.SELECT_ATTRIBUTE_TITLE);
        selectStmts.add(pgV3Constants.SELECT_ATTRIBUTE_PGCSSTYPE);
        selectStmts.add(pgV3Constants.SELECT_ATTRIBUTE_PGASSEMBLYTYPE);
        selectStmts.add(pgV3Constants.SELECT_ATTRIBUTE_COMMENT);
        selectStmts.add(pgV3Constants.SELECT_ATTRIBUTE_PGINGREDIENTLOSSCOMMENT);
        //Modified by DSM(Sogeti)-2015x.5 for PDF Views(Defect#15751) - Starts
        selectStmts.add(pgV3Constants.SELECT_ATTRIBUTE_PGINGREDIENTLOSSCOMMENTS);
        //Modified by DSM(Sogeti)-2015x.5 for PDF Views(Defect#15751) - Ends
        //Modified by DSM(Sogeti)-2015x.5 for PDF Views(Defect#15881) - Starts
        selectStmts.add(pgV3Constants.SELECT_ATTRIBUTE_PGTOTAL);
        //Modified by DSM(Sogeti)-2015x.5 for PDF Views(Defect#15881) - Ends
        selectStmts.add(pgV3Constants.SELECT_ATTRIBUTE_PGCHANGE);
        selectStmts.add(pgV3Constants.SELECT_ATTRIBUTE_PGMATERIALFUNCTION);
        selectStmts.add(pgV3Constants.SELECT_ATTRIBUTE_PGPOSITIONINDICATOR);
        selectStmts.add(DomainConstants.SELECT_NAME);
        selectStmts.add(DomainConstants.SELECT_TYPE);
        selectStmts.add(DomainConstants.SELECT_DESCRIPTION);
        selectStmts.add("from["+pgV3Constants.RELATIONSHIP_PGMASTER+"]");
        selectStmts.add("from["+pgV3Constants.RELATIONSHIP_PGMASTER+"].to.last.id");
        //Modified by DSM(Sogeti) for Code Optimization Start
        boolean havingSecondLevel = false;
        MapList mlSubstituteData = new MapList();
        boolean firstBreakAllowed=false;
        boolean isPushContext = false;
        Map mapObject = new HashMap();
        //Added by DSM 2015x.1 (Sogeti) for defect #7552 - Start
        boolean isContextUserCMorCS = false;
        //Added by DSM 2015x.1 (Sogeti) for defect #7552 - End
        //Modified by DSM(Sogeti)-2015x.2 for (Defect#10336) - Starts
        String strTypeMaster = DomainConstants.EMPTY_STRING;
        int iCount = 0;
        if(iCount > 0){
            strTypeMaster = pgV3Constants.TYPE_PGPACKINGSUBASSEMBLY;
        }
        //Modified by DSM(Sogeti)-2015x.2 for (Defect#10336) - Ends
        if(null != strObjectId && !"".equals(strObjectId)){
            try {
                if(context.isAssigned(pgV3Constants.ROLE_PGCONTRACTSUPPLIER) || context.isAssigned(pgV3Constants.ROLE_PGCONTRACTMANUFACTURER)) {
                    isPushContext = true;
                    ContextUtil.pushContext(context, "User Agent", "", "");
                    //Added by DSM 2015x.1 (Sogeti) for defect #7552 - Start
                    isContextUserCMorCS = true;
                    //Added by DSM 2015x.1 (Sogeti) for defect #7552 - End
                }
                //V3.1 : pushed the super user context if the user is EBP -end
                //emxPart_mxJPO emxPart = new emxPart_mxJPO(context, args);
                //MapList mlEBOM = emxPart.getStoredEBOMPDF(context, args);
                //Added for PDF Refactor
                MapList mlEBOM= (MapList)pgPDFViewHelper.executeMainClassMethod(context, "emxPart", "getStoredEBOMPDF",args);
                dmoPart= DomainObject.newInstance(context,strObjectId);
                //Root part needed attributes values
                //Modified by DSM(Sogeti) for Code Optimization End
                Map<String,String> rootPartAttributeMap=dmoPart.getInfo(context, selectStmts);
                String strSpecType=rootPartAttributeMap.get(DomainConstants.SELECT_TYPE);
                String isHavingMaster=rootPartAttributeMap.get("from["+pgV3Constants.RELATIONSHIP_PGMASTER+"]");
                String strMasterId=rootPartAttributeMap.get("from["+pgV3Constants.RELATIONSHIP_PGMASTER+"].to.last.id");
                //Modified by DSM(Sogeti)-2015x.5 for PDF Views(Defect#15881) - Starts
                String strRootUnitTotal=rootPartAttributeMap.get(pgV3Constants.SELECT_ATTRIBUTE_PGTOTAL);
                //Modified by DSM(Sogeti)-2015x.5 for PDF Views(Defect#15881) - Ends
                String strRootUnitTotalUOM=rootPartAttributeMap.get(pgV3Constants.SELECT_ATTRIBUTE_PGQUANTITYUNITOFMEASURE);
                String strRootIngredientLoss=rootPartAttributeMap.get(pgV3Constants.SELECT_ATTRIBUTE_PGINGREDIENTLOSS);
                String strRootIngredientLossUOM=rootPartAttributeMap.get(pgV3Constants.SELECT_ATTRIBUTE_PGINGREDIENTLOSSUNITOFMEASURE);
                String strRootSubTotal=rootPartAttributeMap.get(pgV3Constants.SELECT_ATTRIBUTE_PGSUBTOTAL);
                String strRootSubTotalUOM=rootPartAttributeMap.get(pgV3Constants.SELECT_ATTRIBUTE_PGSUBTOTALUNITOFMEASURE);
                //Modified by DSM(Sogeti)-2015x.5 for PDF Views(Defect#15751) - Starts
                String strRootIngredientLossComment=rootPartAttributeMap.get(pgV3Constants.SELECT_ATTRIBUTE_PGINGREDIENTLOSSCOMMENTS);
                //Added by DSM(Sogeti)-2015x.5 for PDF Views (Defect ID-16705) - Starts
                if(UIUtil.isNullOrEmpty(strRootIngredientLossComment)){
                    strRootIngredientLossComment = DomainConstants.EMPTY_STRING;
                }
                //Added by DSM(Sogeti)-2015x.5 for PDF Views (Defect ID-16705) - Ends
                //Modified by DSM(Sogeti)-2015x.5 for PDF Views(Defect#15751) - Ends
                //Modified for defect related to Special character  < > preventing PDF generation - Starts
                strRootIngredientLossComment =strRootIngredientLossComment.replaceAll("[<]","#LESS_THAN");
                strRootIngredientLossComment =strRootIngredientLossComment.replaceAll("[>]","#GREATER_THAN");
                //Modified for defect related to Special character  < > preventing PDF generation -End
                //Modified by DSM(Sogeti)-2015x.4 for PDF Views(Defect#11912) - Starts
                String strRootComment=rootPartAttributeMap.get(pgV3Constants.SELECT_ATTRIBUTE_COMMENT);
                //Modified by DSM(Sogeti)-2015x.4 for PDF Views(Defect#11912) - Ends
                //Added by DSM(Sogeti)-2015x.5 for PDF Views (Defect ID-16705) - Starts
                if(UIUtil.isNullOrEmpty(strRootComment)){
                    strRootComment = DomainConstants.EMPTY_STRING;
                }
                //Added by DSM(Sogeti)-2015x.5 for PDF Views (Defect ID-16705) - Ends
                //Modified for defect related to Special character  < > preventing PDF generation - Starts
                strRootComment =strRootComment.replaceAll("[<]","#LESS_THAN");
                strRootComment =strRootComment.replaceAll("[>]","#GREATER_THAN");
                //Modified for defect related to Special character  < > preventing PDF generation -End
                String strRootSAPFILDescription=rootPartAttributeMap.get(pgV3Constants.SELECT_ATTRIBUTE_TITLE);
                //Added by DSM(Sogeti)-2015x.5 for PDF Views (Defect ID-16705) - Starts
                if(UIUtil.isNullOrEmpty(strRootSAPFILDescription)){
                    strRootSAPFILDescription = DomainConstants.EMPTY_STRING;
                }
                //Added by DSM(Sogeti)-2015x.5 for PDF Views (Defect ID-16705) - Ends
                //Modified for defect related to Special character  < > preventing PDF generation -Start
                strRootSAPFILDescription =strRootSAPFILDescription.replaceAll("[<]","#LESS_THAN");
                strRootSAPFILDescription =strRootSAPFILDescription.replaceAll("[>]","#GREATER_THAN");
                //Modified for defect related to Special character  < > preventing PDF generation -End
                String strRootpgChange=rootPartAttributeMap.get(pgV3Constants.SELECT_ATTRIBUTE_PGCHANGE);
                //Modified by DSM(Sogeti) for Code Optimization Start
                if (strRootpgChange == null || strRootpgChange.equals("null")) {
                    strRootpgChange = DomainConstants.EMPTY_STRING;
                }
                String strRootMF=rootPartAttributeMap.get(pgV3Constants.SELECT_ATTRIBUTE_PGMATERIALFUNCTION);
                if (strRootMF == null || strRootMF.equals("null")) {
                    strRootMF = DomainConstants.EMPTY_STRING;
                }
                //Modified by DSM(Sogeti) for Code Optimization End
                String strRootPI=rootPartAttributeMap.get(pgV3Constants.SELECT_ATTRIBUTE_PGPOSITIONINDICATOR);
                //Added by DSM(Sogeti)-2015x.5 for PDF Views (Defect ID-16705) - Starts
                if(UIUtil.isNullOrEmpty(strRootPI)){
                    strRootPI = DomainConstants.EMPTY_STRING;
                }
                //Added by DSM(Sogeti)-2015x.5 for PDF Views (Defect ID-16705) - Ends
                // Added by P&G V2/V3 team for Defect 5947 to handle special character  < > preventing PDF generation Start
                strRootpgChange = strRootpgChange.replaceAll("[<]","#LESS_THAN");
                strRootpgChange = strRootpgChange.replaceAll("[>]","#GREATER_THAN");
                strRootMF = strRootMF.replaceAll("[<]","#LESS_THAN");
                strRootMF = strRootMF.replaceAll("[>]","#GREATER_THAN");
                strRootPI = strRootPI.replaceAll("[<]","#LESS_THAN");
                strRootPI = strRootPI.replaceAll("[>]","#GREATER_THAN");
                // Added by P&G V2/V3 team for Defect 5947 to handle special character  < > preventing PDF generation End
                //Batch Unit size
                String strRootBatchUnitSize=rootPartAttributeMap.get(pgV3Constants.SELECT_ATTRIBUTE_PGBATCHUNITSIZE);
                String strRootRangeMin=rootPartAttributeMap.get(pgV3Constants.SELECT_ATTRIBUTE_PGMINQUANTITY);
                String strRootRangeMax=rootPartAttributeMap.get(pgV3Constants.SELECT_ATTRIBUTE_PGMAXQUANTITY);
                String strRootBatchUOM=rootPartAttributeMap.get(pgV3Constants.SELECT_ATTRIBUTE_PGBATCHUNITSIZEUNITOFMEASURE);
                String strRootObjType=rootPartAttributeMap.get(DomainConstants.SELECT_TYPE);
                String strRootSpecName=rootPartAttributeMap.get(DomainConstants.SELECT_NAME);
                String strRootSpecDescription=rootPartAttributeMap.get(DomainConstants.SELECT_DESCRIPTION);
                //Added by DSM(Sogeti)-2015x.5 for PDF Views (Defect ID-16705) - Starts
                if(UIUtil.isNullOrEmpty(strRootSpecDescription)){
                    strRootSpecDescription = DomainConstants.EMPTY_STRING;
                }
                //Added by DSM(Sogeti)-2015x.5 for PDF Views (Defect ID-16705) - Ends
                //Modified for defect related to Special character  < > preventing PDF generation -Start
                strRootSpecDescription =strRootSpecDescription.replaceAll("[<]","#LESS_THAN");
                strRootSpecDescription =strRootSpecDescription.replaceAll("[>]","#GREATER_THAN");
                //Modified for defect related to Special character  < > preventing PDF generation -End
                //Target buffer
                StringBuilder RootBSFTarget = new StringBuilder();
                RootBSFTarget.append("<B>Subtotal:</B>"+strRootSubTotal+" "+strRootSubTotalUOM+"<BR/>");
                RootBSFTarget.append("<B>Ingredient <BR/> Loss:</B>"+strRootIngredientLoss+" "+strRootIngredientLossUOM+"<BR/>");
                RootBSFTarget.append("<B>Total:</B>"+strRootUnitTotal+" "+strRootUnitTotalUOM);
                //Comment Buffer
                StringBuilder RootIngredientLossComment = new StringBuilder();
                RootIngredientLossComment.append("<B>Ingredient Loss <BR/> Comment:</B><BR/>"+strRootIngredientLossComment+"<BR/>");
                //BatchUnit Size Buffer
                StringBuilder RootBatchUnitSize = new StringBuilder();
                RootBatchUnitSize.append("<B>Target:</B>"+strRootBatchUnitSize+"<BR/>");
                RootBatchUnitSize.append("<B>Range Min:</B>"+strRootRangeMin+"<BR/>");
                RootBatchUnitSize.append("<B>Range Max:</B>"+strRootRangeMax+"<BR/>");
                RootBatchUnitSize.append("<B>Unit of Measure: </B>"+strRootBatchUOM);
                //Modified by DSM(Sogeti) for Code Optimization
                String BOMHeading =DomainConstants.EMPTY_STRING;
                if(pgPDFViewConstants.CONST_COMBINEDWITHMASTER.equals(strPDFViewType) || null == strPDFViewType){
                    BOMHeading = (null == strPDFViewType ? "MASTER BILL OF MATERIALS" : "FINISHED PRODUCT BILL OF MATERIALS");
                    if (pgV3Constants.TYPE_PGPACKINGSUBASSEMBLY.equals(strSpecType)){
                        BOMHeading = "PACKING SUBASSEMBLY BILL OF MATERIALS";
                    }
                }else{
                    BOMHeading="BILL OF MATERIALS";
                }
                //Modified by DSM(Sogeti) for Code Optimization
                if ((pgV3Constants.TYPE_PGFINISHEDPRODUCT.equals(strSpecType)) || (pgV3Constants.TYPE_PGMASTERFINISHEDPRODUCT.equals(strSpecType))){
                    strPCTFIL="PCT ";
                    SAPDescription1="SAP Description or PCT Description";
                }
                //Modified by DSM(Sogeti) for Code Optimization
                else if (pgV3Constants.TYPE_PGFORMULATEDPRODUCT.equals(strSpecType) || pgV3Constants.TYPE_PGBASEFORMULA.equals(strSpecType)){
                    SAPDescription1="SAP Description or FIL Description";
                    strPCTFIL="FIL ";
                }
                else if (pgV3Constants.TYPE_PGPACKINGSUBASSEMBLY.equals(strSpecType)){
                    SAPDescription1 = "SAP Description or PCT Description";
                    strPCTFIL="PCT ";
                }
                else{
                    strPCTFIL="FIL ";
                    SAPDescription1="SAP Description";
                }
                String BOMBase=rootPartAttributeMap.get(pgV3Constants.SELECT_ATTRIBUTE_PGBOMBASEQUANTITY);
                String EntryBase=rootPartAttributeMap.get(pgV3Constants.SELECT_ATTRIBUTE_PGENTRYBASEQUANTITY);
                String UOM1=rootPartAttributeMap.get(pgV3Constants.SELECT_ATTRIBUTE_PGBASEUNITOFMEASURE);
                //Modified by DSM(Sogeti) for Code Optimization
                if((null!=mlEBOM && mlEBOM.size() > 1) || (pgV3Constants.TYPE_PGBASEFORMULA.equals(strSpecType))){
                    //Modified by DSM(Sogeti)-2015x.2 for (Defect#10336) - Starts
                    if(BOMHeading.contains("MASTER BILL OF MATERIALS") && (pgV3Constants.TYPE_PGPACKINGSUBASSEMBLY.equals(strTypeMaster) && UIUtil.isNotNullAndNotEmpty(strTypeMaster))){
                    }
                    else{
                        BOMSubstituteSAPBuffer.append("<TR><TD class=\"new\"><TABLE cellspacing=\"0\" style=\"line-height: 16px;\" id=\"BOM\">");
                        if(null!=mlEBOM && mlEBOM.size() > 1){
                            BOMSubstituteSAPBuffer.append("<TR><TD class=\"new\"><B>"+BOMHeading+"</B></TD></TR>");
                        }
                        BOMSubstituteSAPBuffer.append("</TABLE></TD></TR>");
                    }
                    //Modified by DSM(Sogeti)-2015x.2 for (Defect#10336) - Ends
                    BOMSubstituteSAPBuffer.append("<TR><TD><TABLE class=\"pdf\" cellspacing=\"0\" width=\"1000px\" id=\"BOM\">");
                    if((null != BOMBase && !"".equals(BOMBase)) || ( null != EntryBase && !"".equals(EntryBase)) || (null != UOM1 && !"".equals(UOM1))){
                        //Modified by DSM(Sogeti) for Code Optimization
                        if (((pgV3Constants.TYPE_PGFINISHEDPRODUCT.equals(strSpecType))&& !"consolidatedpackaging".equals(strPDFViewType)) || (pgV3Constants.TYPE_PGMASTERFINISHEDPRODUCT.equals(strSpecType)) || (pgV3Constants.TYPE_PGPACKINGSUBASSEMBLY.equals(strSpecType))){
                            BOMSubstituteSAPBuffer.append("<TR>");
                            BOMSubstituteSAPBuffer.append("<TD class=\"new\" valign=\"top\" width=\"300\">Quantity For Product Is: "+rootPartAttributeMap.get(pgV3Constants.SELECT_ATTRIBUTE_PGQUANTITYFORPRODUCTIS)+"</TD>");
                            BOMSubstituteSAPBuffer.append("</TR>");
                        }
                        //Modified by DSM(Sogeti) for Code Optimization
                        //Modified by DSM(Sogeti)-2015x.2 for (Defect#10336) - Starts
                        if (!pgV3Constants.TYPE_PGBASEFORMULA.equals(strSpecType) && !pgV3Constants.TYPE_PGPACKINGSUBASSEMBLY.equals(strSpecType)){
                            //Modified by DSM(Sogeti)-2015x.5 for (Defect#16947) - Starts
                            if(BOMHeading.contains("MASTER BILL OF MATERIALS") && (pgV3Constants.TYPE_PGPACKINGSUBASSEMBLY.equals(strTypeMaster) && UIUtil.isNotNullAndNotEmpty(strTypeMaster)) || pgV3Constants.TYPE_PGMASTERFINISHEDPRODUCT.equals(strSpecType)){
                                //Modified by DSM(Sogeti)-2015x.5 for (Defect#16947) - Ends
                            }
                            else{
                                BOMSubstituteSAPBuffer.append("<TR>");
                                BOMSubstituteSAPBuffer.append("<TD class=\"new\" valign=\"top\" width=\"200\">BOM Base Quantity: "+rootPartAttributeMap.get(pgV3Constants.SELECT_ATTRIBUTE_PGBOMBASEQUANTITY)+"</TD>");
                                BOMSubstituteSAPBuffer.append("<TD class=\"new\" valign=\"top\" width=\"200\">"+strPCTFIL+"Base Quantity: "+rootPartAttributeMap.get(pgV3Constants.SELECT_ATTRIBUTE_PGENTRYBASEQUANTITY)+"</TD>");
                                BOMSubstituteSAPBuffer.append("<TD class=\"new\" valign=\"top\" width=\"600\">Base Unit Of Measure: "+rootPartAttributeMap.get(pgV3Constants.SELECT_ATTRIBUTE_PGBASEUNITOFMEASURE)+"</TD>");
                                BOMSubstituteSAPBuffer.append("</TR>");
                            }
                            //Modified by DSM(Sogeti)-2015x.2 for (Defect#10336) - Ends
                        }
                        //Modified by DSM(Sogeti) for Code Optimization
                        if (pgV3Constants.TYPE_PGPACKINGSUBASSEMBLY.equals(strSpecType)){
                            BOMSubstituteSAPBuffer.append("<TR>");
                            BOMSubstituteSAPBuffer.append("<TD class=\"new\" valign=\"top\" width=\"200\">BOM Base Quantity: "+rootPartAttributeMap.get(pgV3Constants.SELECT_ATTRIBUTE_PGBOMBASEQUANTITY)+"</TD>");
                            BOMSubstituteSAPBuffer.append("<TD class=\"new\" valign=\"top\" width=\"200\">"+strPCTFIL+"Base Quantity: "+rootPartAttributeMap.get(pgV3Constants.SELECT_ATTRIBUTE_PGENTRYBASEQUANTITY)+"</TD>");
                            BOMSubstituteSAPBuffer.append("<TD class=\"new\" valign=\"top\" width=\"600\">Base Unit Of Measure: "+rootPartAttributeMap.get(pgV3Constants.SELECT_ATTRIBUTE_PGBASEUNITOFMEASURE)+"</TD>");
                            BOMSubstituteSAPBuffer.append("</TR>");
                        }
                    }
                    BOMSubstituteSAPBuffer.append("</TABLE></TD></TR>");
                }
                BOMSubstituteSAPBuffer.append("<TR><TD><TABLE class=\"WordWrappdf\" cellspacing=\"0\" width=\"1000px\" id=\"BOM\">");
                //Modified by DSM(Sogeti) for Code Optimization
                if(null!=mlEBOM && mlEBOM.size() > 1 && !pgV3Constants.TYPE_PGBASEFORMULA.equalsIgnoreCase(strSpecType)){
                    BOMSubstituteSAPBuffer.append("<thead><TR>");
                    BOMSubstituteSAPBuffer.append("<TH width=\"100\">Name</TH>");
                    BOMSubstituteSAPBuffer.append("<TH width=\"40\">Chg.</TH>");
                    BOMSubstituteSAPBuffer.append("<TH width=\"220\">"+SAPDescription1+"</TH>");
                    //Modified by DSM(Sogeti) for Code Optimization
                    if(pgV3Constants.TYPE_PGFINISHEDPRODUCT.equalsIgnoreCase(strSpecType) ||  pgV3Constants.TYPE_PGMASTERFINISHEDPRODUCT.equalsIgnoreCase(strSpecType) || pgV3Constants.TYPE_PGPACKINGSUBASSEMBLY.equalsIgnoreCase(strSpecType)){
                        BOMSubstituteSAPBuffer.append("<TH width=\"100\">Packing Level</TH>");
                    }
                    BOMSubstituteSAPBuffer.append("<TH width=\"80\">Type (T)<BR/>Spec SubType (SS)</TH>");
                    //Modified by DSM(Sogeti) for Code Optimization Start
                    //Commented by DSM(Sogeti)-2015x.2 for (Defect#8461) - Starts
						/*if(pgV3Constants.TYPE_PGMASTERFINISHEDPRODUCT.equalsIgnoreCase(strSpecType)){
							BOMSubstituteSAPBuffer.append("<TD>Finished Product Code</TD>");
						}*/
                    //Commented by DSM(Sogeti)-2015x.2 for (Defect#8461) - Ends
                    if(pgV3Constants.TYPE_PGBASEFORMULA.equalsIgnoreCase(strSpecType) || pgV3Constants.TYPE_PGFORMULATEDPRODUCT.equalsIgnoreCase(strSpecType))
                    {
                        BOMSubstituteSAPBuffer.append("<TH width=\"40\">Sub</TH>");
                    }
                    if(!(pgV3Constants.TYPE_PGFINISHEDPRODUCT.equals(strSpecType) || pgV3Constants.TYPE_PGMASTERFINISHEDPRODUCT.equals(strSpecType) || pgV3Constants.TYPE_PGPACKINGSUBASSEMBLY.equals(strSpecType))){
                        BOMSubstituteSAPBuffer.append("<TH width=\"50\">Min</TH>");
                        BOMSubstituteSAPBuffer.append("<TH width=\"100\">Target</TH>");
                        BOMSubstituteSAPBuffer.append("<TH width=\"50\">Max</TH>");
                        BOMSubstituteSAPBuffer.append("<TH width=\"80\">Unit of Measure</TH>");
                        BOMSubstituteSAPBuffer.append("<TH width=\"120\">Material Function (MF)<BR/>Position Indicator (PI)</TH>");
                        BOMSubstituteSAPBuffer.append("<TH width=\"140\">Comments</TH>");
                        if(!pgV3Constants.TYPE_PGBASEFORMULA.equalsIgnoreCase(strSpecType))
                        {
                            BOMSubstituteSAPBuffer.append("<TH width=\"120\">Batch/Unit Size</TH>");
                        }
                    }
                    if(pgV3Constants.TYPE_PGPACKINGSUBASSEMBLY.equalsIgnoreCase(strSpecType) || pgV3Constants.TYPE_PGFINISHEDPRODUCT.equalsIgnoreCase(strSpecType) || pgV3Constants.TYPE_PGMASTERFINISHEDPRODUCT.equalsIgnoreCase(strSpecType)){
                        BOMSubstituteSAPBuffer.append("<TH width=\"100\">Substitution</TH>");
                        BOMSubstituteSAPBuffer.append("<TH width=\"100\">Quantity</TH>");
                        BOMSubstituteSAPBuffer.append("<TH width=\"100\">Unit of Measure</TH>");
                        //Commented by DSM(Sogeti)-2015x.2 for (Defect#8461) - Starts
                        //Added by DSM 2015x.1 (Sogeti) for defect #5534 - Starts
						/*if(pgV3Constants.TYPE_PGMASTERFINISHEDPRODUCT.equalsIgnoreCase(strSpecType)){
							BOMSubstituteSAPBuffer.append("<TD>Include In Countries of Sale Analysis</TD>");
						}*/
                        //Added by DSM 2015x.1 (Sogeti) for defect #5534 - Ends
                        //Commented by DSM(Sogeti)-2015x.2 for (Defect#8461) - Ends
                        BOMSubstituteSAPBuffer.append("<TH width=\"150\">Comments</TH>");
                    }
                    BOMSubstituteSAPBuffer.append("</TR></thead>");
                }
                //for BSF
                if(mlEBOM.size()>1){
                    if(pgV3Constants.TYPE_PGBASEFORMULA.equalsIgnoreCase(strSpecType)){
                        //Modified by DSM(Sogeti) for Code Optimization End
                        BOMSubstituteSAPBuffer.append(getBSFBOMTableheader(context));
                        BOMSubstituteSAPBuffer.append("<TR>");
                        BOMSubstituteSAPBuffer.append("<TD width=\"100\">"+strRootSpecName+"</TD>");
                        BOMSubstituteSAPBuffer.append("<TD width=\"40\">"+strRootpgChange+"</TD>");
                        BOMSubstituteSAPBuffer.append("<TD width=\"220\">"+""+"</TD>");
                        //for pgPhase we have to put SELECT_DESCRIPTION
                        BOMSubstituteSAPBuffer.append("<TD>"+""+"</TD>");
                        //Modified by DSM(Sogeti) for Defect 18483 Start
                        BOMSubstituteSAPBuffer.append("<TD>No</TD>");
                        //Modified by DSM(Sogeti) for Defect 18483 End
                        BOMSubstituteSAPBuffer.append("<TD>"+""+"</TD>");
                        BOMSubstituteSAPBuffer.append("<TD width=\"100\">"+RootBSFTarget.toString()+"</TD>");
                        BOMSubstituteSAPBuffer.append("<TD>"+""+"</TD>");
                        BOMSubstituteSAPBuffer.append("<TD>"+""+"</TD>");
                        BOMSubstituteSAPBuffer.append("<TD width=\"120\" valign=\"top\">MF:"+strRootMF+"<BR/>PI:"+strRootPI+"</TD>");
                        BOMSubstituteSAPBuffer.append("<TD width=\"140\">"+RootIngredientLossComment.toString()+"</TD>");
                        //Modified by DSM-2015x.1(Sogeti) for Defect - 5706 on 12-July-2016- Starts
                        BOMSubstituteSAPBuffer.append("<TD width=\"120\">"+RootBatchUnitSize.toString()+"</TD>");
                        //Modified by DSM-2015x.1(Sogeti) for Defect - 5706 on 12-July-2016- Ends
                        BOMSubstituteSAPBuffer.append("</TR>");
                    }
                }
                //Modified by DSM(Sogeti) for Code Optimization Start
                for (Iterator iterator = mlEBOM.iterator(); iterator.hasNext();){
                    mapObject = (Map) iterator.next();
                    strLevel = (String)mapObject.get(DomainConstants.SELECT_LEVEL);
                    strFirstLevelId = (String)mapObject.get(DomainConstants.SELECT_ID);
                    strName = (String)mapObject.get("name");
                    strHasChildren = (String)mapObject.get("hasChildren");
                    if("3".equals(strLevel)){
                        iterator.remove();
                    }
                    if(null != strName && !"".equals(strName)){
                        fromEBOM = (String)mapObject.get("from["+pgV3Constants.RELATIONSHIP_EBOM+"]");
                        strIfSubstitute = (String)mapObject.get("frommid["+pgV3Constants.RELATIONSHIP_EBOMSUBSTITUTE+"]");
                        strEBOMId = (String)mapObject.get(DomainConstants.SELECT_RELATIONSHIP_ID);
                        strFromName = (String)mapObject.get("from.name");
                        pgChange = (String)mapObject.get(pgV3Constants.SELECT_ATTRIBUTE_PGCHANGE);
                        if (pgChange == null || pgChange.equals("null")) {
                            pgChange = DomainConstants.EMPTY_STRING;
                        }
                        //Modified for defect related to Special character  < > preventing PDF generation -Start
                        pgChange =pgChange.replaceAll("[<]","#LESS_THAN");
                        pgChange =pgChange.replaceAll("[>]","#GREATER_THAN");
                        //Modified for defect related to Special character  < > preventing PDF generation -End
                        //Added by DSM 2015x.1 (Sogeti) for defect #7552 - Start
                        if(!isContextUserCMorCS){
                            ContextUtil.pushContext(context,"User Agent", "", "");
                            DomainObject domFirstLevel = DomainObject.newInstance(context,strFirstLevelId);
                            SAPDesc = String.valueOf(domFirstLevel.getInfo(context,pgV3Constants.SELECT_ATTRIBUTE_TITLE));
                            ContextUtil.popContext(context);
                        }else{
                            SAPDesc=(String)mapObject.get(pgV3Constants.SELECT_ATTRIBUTE_TITLE);
                        }
                        //Added by DSM 2015x.1 (Sogeti) for defect #7552 - End
                        //Added by DSM(Sogeti)-2015x.5 for PDF Views (Defect ID-16705) - Starts
                        if(UIUtil.isNullOrEmpty(SAPDesc)){
                            SAPDesc = DomainConstants.EMPTY_STRING;
                        }
                        //Added by DSM(Sogeti)-2015x.5 for PDF Views (Defect ID-16705) - Ends
                        //Modified for defect related to Special character  < > preventing PDF generation -Start
                        SAPDesc =SAPDesc.replaceAll("[<]","#LESS_THAN");
                        SAPDesc =SAPDesc.replaceAll("[>]","#GREATER_THAN");
                        //Modified for defect related to Special character  < > preventing PDF generation -End
                        Desc = (String)mapObject.get("from.description");
                        //Added by DSM(Sogeti)-2015x.5 for PDF Views (Defect ID-16705) - Starts
                        if(UIUtil.isNullOrEmpty(Desc)){
                            Desc = DomainConstants.EMPTY_STRING;
                        }
                        //Added by DSM(Sogeti)-2015x.5 for PDF Views (Defect ID-16705) - Ends
                        //Modified for defect related to Special character  < > preventing PDF generation -Start
                        Desc =Desc.replaceAll("[<]","#LESS_THAN");
                        Desc =Desc.replaceAll("[>]","#GREATER_THAN");
                        //Modified for defect related to Special character  < > preventing PDF generation -End
                        strType=(String)mapObject.get(DomainConstants.SELECT_TYPE);
                        strDesc=(String)mapObject.get(DomainConstants.SELECT_DESCRIPTION);
                        //Added by DSM(Sogeti)-2015x.5 for PDF Views (Defect ID-16705) - Starts
                        if(UIUtil.isNullOrEmpty(strDesc)){
                            strDesc = DomainConstants.EMPTY_STRING;
                        }
                        //Added by DSM(Sogeti)-2015x.5 for PDF Views (Defect ID-16705) - Ends
                        //Modified for defect related to Special character  < > preventing PDF generation -Start
                        strDesc =strDesc.replaceAll("[<]","#LESS_THAN");
                        strDesc =strDesc.replaceAll("[>]","#GREATER_THAN");
                        //Modified for defect related to Special character  < > preventing PDF generation -End
                        pgCSSType=(String)mapObject.get(pgV3Constants.SELECT_ATTRIBUTE_PGCSSTYPE);
                        pgAssemblyType = (String)mapObject.get(pgV3Constants.SELECT_ATTRIBUTE_PGASSEMBLYTYPE);
                        Map<String,String> specMapForSubtype=new HashMap();
                        specMapForSubtype.put(DomainConstants.SELECT_TYPE, strType);
                        specMapForSubtype.put("pgAssemblyType", pgAssemblyType);
                        specMapForSubtype.put("pgCSSType", pgCSSType);
                        //display spec subtype
                        strSpecSubType=getSpecificationSubType(context,specMapForSubtype);
                        //display type
                        strType = (String)getTypeDisplayName(context,strType);
                        strMin = (String)mapObject.get(pgV3Constants.SELECT_ATTRIBUTE_PGMINQUANTITY);
                        strTarget = (String)mapObject.get(pgV3Constants.SELECT_ATTRIBUTE_PGQUANTITY);
                        strMax = (String)mapObject.get(pgV3Constants.SELECT_ATTRIBUTE_PGMAXQUANTITY);
                        UOM = (String)mapObject.get(pgV3Constants.SELECT_ATTRIBUTE_PGQUANTITYUNITOFMEASURE);
                        MF = (String)mapObject.get(pgV3Constants.SELECT_ATTRIBUTE_PGMATERIALFUNCTION);
                        if (MF == null || MF.equals("null")) {
                            MF=DomainConstants.EMPTY_STRING;
                        }
                        PI = (String)mapObject.get(pgV3Constants.SELECT_ATTRIBUTE_PGPOSITIONINDICATOR);
                        strPackingLevel = (String)mapObject.get("attribute[pgPackingLevel]");
                        //Commented by DSM(Sogeti)-2015x.2 for (Defect#8461) - Starts
                        //strFinishedProductCode=(String)mapObject.get("attribute["+ATTRIBUTE_PGFINISHEDPRODUCTCODE+"]");
                        //strCOSAnalysis = (String)mapObject.get(pgV3Constants.SELECT_ATTRIBUTE_PGINCLUDEINCOSANALYSIS);
                        //Commented by DSM(Sogeti)-2015x.2 for (Defect#8461) - Ends
                        strPackagingSize = (String)mapObject.get(pgV3Constants.SELECT_ATTRIBUTE_PGQUANTITY);
                        Comment = (String)mapObject.get(pgV3Constants.SELECT_ATTRIBUTE_COMMENT);
                        //Added by DSM(Sogeti)-2015x.5 for PDF Views (Defect ID-16705) - Starts
                        if(UIUtil.isNullOrEmpty(Comment)){
                            Comment = DomainConstants.EMPTY_STRING;
                        }
                        //Added by DSM(Sogeti)-2015x.5 for PDF Views (Defect ID-16705) - Ends
                        //Modified for defect related to Special character  < > preventing PDF generation -Start
                        Comment = Comment.replaceAll("[<]","#LESS_THAN");
                        Comment = Comment.replaceAll("[>]","#GREATER_THAN");
                        //Modified for defect related to Special character  < > preventing PDF generation -End
                        batchUnitSize = (String)mapObject.get(pgV3Constants.SELECT_ATTRIBUTE_PGBATCHUNITSIZE);
                        if("2" .equals(strLevel) && Boolean.parseBoolean(strIfSubstitute)){
                            Map map = new HashMap();
                            map.put("relId", strEBOMId);
                            map.put("SubstituteFor", strName);
                            map.put("SAP", SAPDesc);
                            map.put("UsedIn", strFromName);
                            map.put("FIL", Desc);
                            mlSubstituteData.add(map);
                            havingSecondLevel = true;
                        }
                        else if("1" .equals(strLevel) && Boolean.parseBoolean(strIfSubstitute) && pgV3Constants.TYPE_PGBASEFORMULA.equals(strSpecType)){
                            Map map = new HashMap();
                            map.put("relId", strEBOMId);
                            map.put("SubstituteFor", strName);
                            map.put("SAP", SAPDesc);
                            map.put("UsedIn", strFromName);
                            map.put("FIL", Desc);
                            mlSubstituteData.add(map);
                            havingSecondLevel = true;
                        }
                        if("1".equals(strLevel)){
                            //added for 1st level part
                            if(validateString(strFirstLevelId)){
                                dmoFirstLevelPart = DomainObject.newInstance(context,strFirstLevelId);
                                //get the attributes values
                                Map<String,String>firstLevelObjectmap=dmoFirstLevelPart.getInfo(context, selectStmts);
                                //target
                                strUnitTotal= firstLevelObjectmap.get(pgV3Constants.SELECT_ATTRIBUTE_PGQUANTITY);
                                strUnitTotalUOM = firstLevelObjectmap.get(pgV3Constants.SELECT_ATTRIBUTE_PGQUANTITYUNITOFMEASURE);
                                strIngredientLoss = firstLevelObjectmap.get(pgV3Constants.SELECT_ATTRIBUTE_PGINGREDIENTLOSS);
                                strIngredientLossUOM = firstLevelObjectmap.get(pgV3Constants.SELECT_ATTRIBUTE_PGINGREDIENTLOSSUNITOFMEASURE);
                                strSubTotal = firstLevelObjectmap.get(pgV3Constants.SELECT_ATTRIBUTE_PGSUBTOTAL);
                                strSubTotalUOM = firstLevelObjectmap.get(pgV3Constants.SELECT_ATTRIBUTE_PGSUBTOTALUNITOFMEASURE);
                                //comment
                                strIngredientLossComment = firstLevelObjectmap.get(pgV3Constants.SELECT_ATTRIBUTE_PGINGREDIENTLOSSCOMMENT);
                                //Added by DSM(Sogeti)-2015x.5 for PDF Views (Defect ID-16705) - Starts
                                if(UIUtil.isNullOrEmpty(strIngredientLossComment)){
                                    strIngredientLossComment = DomainConstants.EMPTY_STRING;
                                }
                                //Added by DSM(Sogeti)-2015x.5 for PDF Views (Defect ID-16705) - Ends
                                //Modified for defect related to Special character  < > preventing PDF generation -Start
                                strIngredientLossComment = strIngredientLossComment.replaceAll("[<]","#LESS_THAN");
                                strIngredientLossComment = strIngredientLossComment.replaceAll("[>]","#GREATER_THAN");
                                //Modified for defect related to Special character  < > preventing PDF generation -End
                                strComment = firstLevelObjectmap.get(pgV3Constants.SELECT_ATTRIBUTE_COMMENT);
                                //Added by DSM(Sogeti)-2015x.5 for PDF Views (Defect ID-16705) - Starts
                                if(UIUtil.isNullOrEmpty(strComment)){
                                    strComment = DomainConstants.EMPTY_STRING;
                                }
                                //Added by DSM(Sogeti)-2015x.5 for PDF Views (Defect ID-16705) - Ends
                                //Modified for defect related to Special character  < > preventing PDF generation -Start
                                strComment = strComment.replaceAll("[<]","#LESS_THAN");
                                strComment = strComment.replaceAll("[>]","#GREATER_THAN");
                                //Modified for defect related to Special character  < > preventing PDF generation -End
                                strSAPFILDescription = firstLevelObjectmap.get(pgV3Constants.SELECT_ATTRIBUTE_TITLE);
                                //Added by DSM(Sogeti)-2015x.5 for PDF Views (Defect ID-16705) - Starts
                                if(UIUtil.isNullOrEmpty(strSAPFILDescription)){
                                    strSAPFILDescription = DomainConstants.EMPTY_STRING;
                                }
                                //Added by DSM(Sogeti)-2015x.5 for PDF Views (Defect ID-16705) - Ends
                                //Modified for defect related to Special character  < > preventing PDF generation -Start
                                strSAPFILDescription = strSAPFILDescription.replaceAll("[<]","#LESS_THAN");
                                strSAPFILDescription = strSAPFILDescription.replaceAll("[>]","#GREATER_THAN");
                                //Modified for defect related to Special character  < > preventing PDF generation -End
                                strObjType = firstLevelObjectmap.get(DomainConstants.SELECT_TYPE);
                                //display spec subtype
                                Map<String,String> specMapForSubType1 = new HashMap();
                                specMapForSubType1.put(DomainConstants.SELECT_TYPE, strObjType);
                                specMapForSubType1.put("pgAssemblyType", firstLevelObjectmap.get(pgV3Constants.SELECT_ATTRIBUTE_PGASSEMBLYTYPE));
                                specMapForSubType1.put("pgCSSType", firstLevelObjectmap.get(pgV3Constants.SELECT_ATTRIBUTE_PGCSSTYPE));
                                strObjSubType = getSpecificationSubType(context,specMapForSubType1);
                                //display type
                                strObjType = (String)getTypeDisplayName(context,strObjType);
                                if(strObjType.equals("FIL")){
                                    strObjType=DomainConstants.EMPTY_STRING;
                                }
                                //batch unit
                                strBatchUnitSize = firstLevelObjectmap.get(pgV3Constants.SELECT_ATTRIBUTE_PGBATCHUNITSIZE);
                                strRangeMin = firstLevelObjectmap.get(pgV3Constants.SELECT_ATTRIBUTE_PGMINQUANTITY);
                                strRangeMax = firstLevelObjectmap.get(pgV3Constants.SELECT_ATTRIBUTE_PGMAXQUANTITY);
                                strBatchUOM = firstLevelObjectmap.get(pgV3Constants.SELECT_ATTRIBUTE_PGBATCHUNITSIZEUNITOFMEASURE);
                                //Target buffer
                                Target = new StringBuilder();
                                Target.append("<B>Subtotal:</B>"+strSubTotal+" "+strSubTotalUOM+"<BR/>");
                                Target.append("<B>Ingredient <BR/> Loss:</B>"+strIngredientLoss+" "+strIngredientLossUOM+"<BR/>");
                                Target.append("<B>Total:</B>"+strUnitTotal+" "+strUnitTotalUOM);
                                //Comment Buffer
                                IngredientLossComment = new StringBuilder();
                                IngredientLossComment.append(strComment+"<BR/>"+"<B>Ingredient Loss <BR/> Comment:</B><BR/>"+strIngredientLossComment+"<BR/>");
                                //BatchUnit Size Buffer
                                BatchUnitSize = new StringBuilder();
                                //Modified by DSM-2015x.1(Sogeti) for Defect - 5706 on 12-July-2016- Starts

                                //if(validateString(strTarget))BatchUnitSize.append("<B>Target:</B>"+strTarget+"<BR/>");
                                //if(validateString(strMin))BatchUnitSize.append("<B>Range Min:</B>"+strMin+"<BR/>");
                                //if(validateString(strMax))BatchUnitSize.append("<B>Range Max:</B>"+strMax+"<BR/>");
                                //if(validateString(UOM))BatchUnitSize.append("<B>Unit of Measure: </B>"+UOM);

                                //Modified by DSM(Sogeti)-2015x.1.2 for (Defect ID-8018) - Starts
                                //if(validateString(strTarget))BatchUnitSize.append("<B>Target:</B>"+strTarget+"<BR/>");
                                BatchUnitSize.append("<B>Target:</B>"+strBatchUnitSize+"<BR/>");								//if(validateString(strMin))BatchUnitSize.append("<B>Range Min:</B>"+strMin+"<BR/>");
                                BatchUnitSize.append("<B>Range Min:</B>"+strRangeMin+"<BR/>");								//if(validateString(strMax))BatchUnitSize.append("<B>Range Max:</B>"+strMax+"<BR/>");
                                BatchUnitSize.append("<B>Range Max:</B>"+strRangeMax+"<BR/>");								//if(validateString(UOM))BatchUnitSize.append("<B>Unit of Measure: </B>"+UOM);
                                BatchUnitSize.append("<B>Unit of Measure: </B>"+strBatchUOM);
                                //Modified by DSM(Sogeti)-2015x.1.2 for (Defect ID-8018) - Ends
                                //Modified by DSM-2015x.1(Sogeti) for Defect - 5706 on 12-July-2016- Ends
                                if(firstBreakAllowed && !pgV3Constants.TYPE_PGBASEFORMULA.equalsIgnoreCase(strSpecType)){
                                    BOMSubstituteSAPBuffer.append("</TABLE></TD></TR>");
                                    BOMSubstituteSAPBuffer.append(getHTMLForSubstituteTable(context,mlSubstituteData,strObjectId,strSpecType));
                                    mlSubstituteData.clear();
                                    BOMSubstituteSAPBuffer.append("<TR><TD class=\"new\"><BR/></TD></TR>");
                                    BOMSubstituteSAPBuffer.append("<TR><TD><TABLE class=\"pdf\" cellspacing=\"0\" width=\"1000px\" id=\"BOM\">");
                                    BOMSubstituteSAPBuffer.append("<thead><TR>");
                                    BOMSubstituteSAPBuffer.append("<TH width=\"100\">Name</TH>");
                                    BOMSubstituteSAPBuffer.append("<TH width=\"40\">Chg.</TH>");
                                    BOMSubstituteSAPBuffer.append("<TH width=\"220\">"+SAPDescription1+"</TH>");
                                    if(pgV3Constants.TYPE_PGFINISHEDPRODUCT.equalsIgnoreCase(strSpecType) || pgV3Constants.TYPE_PGMASTERFINISHEDPRODUCT.equalsIgnoreCase(strSpecType) || pgV3Constants.TYPE_PGPACKINGSUBASSEMBLY.equalsIgnoreCase(strSpecType)){
                                        BOMSubstituteSAPBuffer.append("<TH width=\"100\">Packing Level</TH>");
                                    }
                                    BOMSubstituteSAPBuffer.append("<TH width=\"80\">Type (T)<BR/>Spec SubType (SS)</TH>");
                                    //Commented by DSM(Sogeti)-2015x.2 for (Defect#8461) - Starts
									/*if(pgV3Constants.TYPE_PGMASTERFINISHEDPRODUCT.equalsIgnoreCase(strSpecType)){
										BOMSubstituteSAPBuffer.append("<TD>Finished Product Code</TD>");
									}*/
                                    //Commented by DSM(Sogeti)-2015x.2 for (Defect#8461) - Ends
                                    if(pgV3Constants.TYPE_PGBASEFORMULA.equalsIgnoreCase(strSpecType) || pgV3Constants.TYPE_PGFORMULATEDPRODUCT.equalsIgnoreCase(strSpecType)){
                                        BOMSubstituteSAPBuffer.append("<TH width=\"40\">Sub</TH>");
                                    }
                                    if(!(pgV3Constants.TYPE_PGFINISHEDPRODUCT.equals(strSpecType) || pgV3Constants.TYPE_PGMASTERFINISHEDPRODUCT.equals(strSpecType) || pgV3Constants.TYPE_PGPACKINGSUBASSEMBLY.equals(strSpecType))){
                                        BOMSubstituteSAPBuffer.append("<TH width=\"50\">Min</TH>");
                                        BOMSubstituteSAPBuffer.append("<TH width=\"100\">Target</TH>");
                                        BOMSubstituteSAPBuffer.append("<TH width=\"50\">Max</TH>");
                                        BOMSubstituteSAPBuffer.append("<TH width=\"80\">Unit of Measure</TH>");
                                        BOMSubstituteSAPBuffer.append("<TH width=\"120\">Material Function (MF)<BR/>Position Indicator (PI)</TH>");
                                        BOMSubstituteSAPBuffer.append("<TH width=\"140\">Comments</TH>");
                                        BOMSubstituteSAPBuffer.append("<TH width=\"120\">Batch/Unit Size</TH>");
                                    }
                                    if(pgV3Constants.TYPE_PGPACKINGSUBASSEMBLY.equalsIgnoreCase(strSpecType) || pgV3Constants.TYPE_PGFINISHEDPRODUCT.equalsIgnoreCase(strSpecType) || pgV3Constants.TYPE_PGMASTERFINISHEDPRODUCT.equalsIgnoreCase(strSpecType)){
                                        BOMSubstituteSAPBuffer.append("<TH width=\"100\">Substitution</TH>");
                                        BOMSubstituteSAPBuffer.append("<TH width=\"100\">Quantity</TH>");
                                        BOMSubstituteSAPBuffer.append("<TH width=\"100\">Unit of Measure</TH>");
                                        //Commented by DSM(Sogeti)-2015x.2 for (Defect#8461) - Starts
										/*if(pgV3Constants.TYPE_PGMASTERFINISHEDPRODUCT.equalsIgnoreCase(strSpecType)){
											BOMSubstituteSAPBuffer.append("<TD>Include In Countries of Sale Analysis</TD>");
										}*/
                                        //Commented by DSM(Sogeti)-2015x.2 for (Defect#8461) - Ends
                                        BOMSubstituteSAPBuffer.append("<TH width=\"150\">Comments</TH>");
                                    }
                                    BOMSubstituteSAPBuffer.append("</TR></thead>");
                                }
                                //to display the attributes of first level formulation
                                if("NGCAS".equalsIgnoreCase(strType)){
                                    strName="Non-GCAS";
                                }
                                BOMSubstituteSAPBuffer.append("<TR>");
                                BOMSubstituteSAPBuffer.append("<TD width=\"100\">"+strName+"</TD>");
                                BOMSubstituteSAPBuffer.append("<TD width=\"40\">"+pgChange+"</TD>");
                                if(!pgV3Constants.TYPE_PGBASEFORMULA.equalsIgnoreCase(strSpecType)){
                                    strNewDesc=(String)firstLevelObjectmap.get(DomainConstants.SELECT_DESCRIPTION);
                                    //Added by DSM(Sogeti)-2015x.5 for PDF Views (Defect ID-16705) - Starts
                                    if(UIUtil.isNullOrEmpty(strNewDesc)){
                                        strNewDesc = DomainConstants.EMPTY_STRING;
                                    }
                                    //Added by DSM(Sogeti)-2015x.5 for PDF Views (Defect ID-16705) - Ends
                                    strNewDesc =strNewDesc.replaceAll("[<]","#LESS_THAN");
                                    strNewDesc =strNewDesc.replaceAll("[>]","#GREATER_THAN");
                                    BOMSubstituteSAPBuffer.append("<TD width=\"220\">"+strNewDesc+"</TD>");
                                }
                                if(pgV3Constants.TYPE_PGBASEFORMULA.equalsIgnoreCase(strSpecType)){
                                    BOMSubstituteSAPBuffer.append("<TD width=\"220\">"+SAPDesc+"</TD>");
                                }
                                if(pgV3Constants.TYPE_PGFINISHEDPRODUCT.equalsIgnoreCase(strSpecType) ||  pgV3Constants.TYPE_PGMASTERFINISHEDPRODUCT.equalsIgnoreCase(strSpecType) || pgV3Constants.TYPE_PGPACKINGSUBASSEMBLY.equalsIgnoreCase(strSpecType)){
                                    BOMSubstituteSAPBuffer.append("<TD width=\"100\">"+strPackingLevel+"</TD>");
                                }
                                BOMSubstituteSAPBuffer.append("<TD width=\"80\">T:"+strObjType+"<BR/>SS:"+strObjSubType+"</TD>");
                                if(pgV3Constants.TYPE_PGBASEFORMULA.equalsIgnoreCase(strSpecType) || pgV3Constants.TYPE_PGFORMULATEDPRODUCT.equalsIgnoreCase(strSpecType)){
                                    BOMSubstituteSAPBuffer.append("<TD width=\"40\">"+changeTrueToYes(strIfSubstitute)+"</TD>");
                                }
                                //Commented by DSM(Sogeti)-2015x.2 for (Defect#8461) - Starts
								/*if(pgV3Constants.TYPE_PGMASTERFINISHEDPRODUCT.equalsIgnoreCase(strSpecType)){
									BOMSubstituteSAPBuffer.append("<TD>"+strFinishedProductCode+"</TD>");
								}*/
                                //Commented by DSM(Sogeti)-2015x.2 for (Defect#8461) - Ends
                                if(!(pgV3Constants.TYPE_PGFINISHEDPRODUCT.equals(strSpecType) || pgV3Constants.TYPE_PGMASTERFINISHEDPRODUCT.equals(strSpecType) || pgV3Constants.TYPE_PGPACKINGSUBASSEMBLY.equals(strSpecType))){
                                    BOMSubstituteSAPBuffer.append("<TD width=\"50\">"+strMin+"</TD>");
                                    if("pgPhase".equals(firstLevelObjectmap.get(DomainConstants.SELECT_TYPE))){
                                        BOMSubstituteSAPBuffer.append("<TD width=\"100\">"+Target.toString()+"</TD>");
                                    }
                                    else{
                                        BOMSubstituteSAPBuffer.append("<TD width=\"100\">"+strTarget+"</TD>");
                                    }
                                    BOMSubstituteSAPBuffer.append("<TD width=\"50\">"+strMax+"</TD>");
                                    BOMSubstituteSAPBuffer.append("<TD width=\"80\">"+UOM+"</TD>");
                                    BOMSubstituteSAPBuffer.append("<TD valign=\"top\">MF:"+MF+"<BR/>PI:"+PI+"</TD>");
                                    //Modified by DSM(Sogeti)-2015x.1.2 for (Defect ID-8018) - Starts
                                    if("pgPhase".equals(firstLevelObjectmap.get(DomainConstants.SELECT_TYPE))){
                                        BOMSubstituteSAPBuffer.append("<TD width=\"100\">"+IngredientLossComment.toString()+"</TD>");
                                        BOMSubstituteSAPBuffer.append("<TD width=\"120\">"+BatchUnitSize.toString()+"</TD>");
                                    }
                                    else{
                                        BOMSubstituteSAPBuffer.append("<TD width=\"140\">"+Comment+"</TD>");
                                        BOMSubstituteSAPBuffer.append("<TD width=\"120\"> </TD>");
                                    }
                                    //BOMSubstituteSAPBuffer.append("<TD width=\"120\">"+BatchUnitSize.toString()+"</TD>");
                                    //Modified by DSM(Sogeti)-2015x.1.2 for (Defect ID-8018) - Ends
                                }
                                if(pgV3Constants.TYPE_PGPACKINGSUBASSEMBLY.equalsIgnoreCase(strSpecType) || pgV3Constants.TYPE_PGFINISHEDPRODUCT.equalsIgnoreCase(strSpecType) || pgV3Constants.TYPE_PGMASTERFINISHEDPRODUCT.equalsIgnoreCase(strSpecType)){
                                    BOMSubstituteSAPBuffer.append("<TD width=\"100\">"+changeTrueToYes(strIfSubstitute)+"</TD>");
                                    BOMSubstituteSAPBuffer.append("<TD width=\"100\">"+strPackagingSize+"</TD>");
                                    BOMSubstituteSAPBuffer.append("<TD width=\"100\">"+UOM+"</TD>");
                                    //Commented by DSM(Sogeti)-2015x.2 for (Defect#8461) - Starts
									/*if(pgV3Constants.TYPE_PGMASTERFINISHEDPRODUCT.equalsIgnoreCase(strSpecType)){
										BOMSubstituteSAPBuffer.append("<TD>"+changeTrueToYes(strCOSAnalysis)+"</TD>");
									}*/
                                    //Commented by DSM(Sogeti)-2015x.2 for (Defect#8461) - Ends
                                    BOMSubstituteSAPBuffer.append("<TD width=\"150\">"+Comment+"</TD>");
                                }
                                BOMSubstituteSAPBuffer.append("</TR>");
                            }
                        }
                        else if(!pgV3Constants.TYPE_PGBASEFORMULA.equalsIgnoreCase(strSpecType)){
                            if("NGCAS".equalsIgnoreCase(strType)){
                                strName="Non-GCAS";
                            }
                            BOMSubstituteSAPBuffer.append("<TR>");
                            BOMSubstituteSAPBuffer.append("<TD width=\"100\">"+strName+"</TD>");
                            BOMSubstituteSAPBuffer.append("<TD width=\"40\">"+pgChange+"</TD>");
                            if(strType.equals("FIL")){
                                BOMSubstituteSAPBuffer.append("<TD width=\"220\">"+strDesc+"</TD>");
                            }else
                                BOMSubstituteSAPBuffer.append("<TD width=\"220\">"+SAPDesc+"</TD>");
                            if(pgV3Constants.TYPE_PGFINISHEDPRODUCT.equalsIgnoreCase(strSpecType) || pgV3Constants.TYPE_PGMASTERFINISHEDPRODUCT.equalsIgnoreCase(strSpecType) || pgV3Constants.TYPE_PGPACKINGSUBASSEMBLY.equalsIgnoreCase(strSpecType)){
                                if(strType.equals("FIL")&&"1".equals(strLevel)){
                                    BOMSubstituteSAPBuffer.append("<TD width=\"100\">"+strPackingLevel+"</TD>");
                                }
                                else{
                                    BOMSubstituteSAPBuffer.append("<TD> </TD>");
                                }
                            }
                            BOMSubstituteSAPBuffer.append("<TD width=\"80\">T:"+strType+"<BR/>SS:"+strSpecSubType+"</TD>");
                            if(pgV3Constants.TYPE_PGBASEFORMULA.equalsIgnoreCase(strSpecType) || pgV3Constants.TYPE_PGFORMULATEDPRODUCT.equalsIgnoreCase(strSpecType)){
                                BOMSubstituteSAPBuffer.append("<TD width=\"40\">"+changeTrueToYes(strIfSubstitute)+"</TD>");
                            }
                            //Commented by DSM(Sogeti)-2015x.2 for (Defect#8461) - Starts
							/*if(pgV3Constants.TYPE_PGMASTERFINISHEDPRODUCT.equalsIgnoreCase(strSpecType)){
								BOMSubstituteSAPBuffer.append("<TD>"+strFinishedProductCode+"</TD>");
							}*/
                            //Commented by DSM(Sogeti)-2015x.2 for (Defect#8461) - Ends
                            if(pgV3Constants.TYPE_PGBASEFORMULA.equalsIgnoreCase(strSpecType) || pgV3Constants.TYPE_PGFORMULATEDPRODUCT.equalsIgnoreCase(strSpecType)){
                                BOMSubstituteSAPBuffer.append("<TD width=\"50\">"+strMin+"</TD>");
                                BOMSubstituteSAPBuffer.append("<TD width=\"100\">"+strTarget+"</TD>");
                                BOMSubstituteSAPBuffer.append("<TD width=\"50\">"+strMax+"</TD>");
                                BOMSubstituteSAPBuffer.append("<TD width=\"80\">"+UOM+"</TD>");
                                BOMSubstituteSAPBuffer.append("<TD width=\"120\" valign=\"top\">MF:"+MF+"<BR/>PI:"+PI+"</TD>");
                                BOMSubstituteSAPBuffer.append("<TD width=\"140\">"+Comment+"</TD>");
                                //Modified by DSM(Sogeti)-2015x.1.2 for (Defect ID-8018) - Starts
                                //BOMSubstituteSAPBuffer.append("<TD>"+batchUnitSize+"</TD>");
                                BOMSubstituteSAPBuffer.append("<TD> </TD>");
                                //Modified by DSM(Sogeti)-2015x.1.2 for (Defect ID-8018) - Ends
                            }
                            if(pgV3Constants.TYPE_PGPACKINGSUBASSEMBLY.equalsIgnoreCase(strSpecType) || pgV3Constants.TYPE_PGFINISHEDPRODUCT.equalsIgnoreCase(strSpecType) || pgV3Constants.TYPE_PGMASTERFINISHEDPRODUCT.equalsIgnoreCase(strSpecType)){
                                BOMSubstituteSAPBuffer.append("<TD width=\"100\">"+changeTrueToYes(strIfSubstitute)+"</TD>");
                                BOMSubstituteSAPBuffer.append("<TD width=\"100\">"+strPackagingSize+"</TD>");
                                BOMSubstituteSAPBuffer.append("<TD width=\"100\">"+UOM+"</TD>");
                                //Commented by DSM(Sogeti)-2015x.2 for (Defect#8461) - Starts
								/*if(pgV3Constants.TYPE_PGMASTERFINISHEDPRODUCT.equalsIgnoreCase(strSpecType)){
									BOMSubstituteSAPBuffer.append("<TD>"+changeTrueToYes(strCOSAnalysis)+"</TD>");
								}*/
                                //Commented by DSM(Sogeti)-2015x.2 for (Defect#8461) - Ends
                                BOMSubstituteSAPBuffer.append("<TD width=\"150\">"+Comment+"</TD>");
                            }
                            BOMSubstituteSAPBuffer.append("</TR>");
                        }
                    }
                    firstBreakAllowed =true;
                }
                BOMSubstituteSAPBuffer.append("</TABLE></TD></TR>");
                BOMSubstituteSAPBuffer.append(getHTMLForSubstituteTable(context,mlSubstituteData,strObjectId,strSpecType));
                if(pgV3Constants.TYPE_PGFINISHEDPRODUCT.equalsIgnoreCase(strSpecType) || pgV3Constants.TYPE_PGMASTERFINISHEDPRODUCT.equalsIgnoreCase(strSpecType) || pgV3Constants.TYPE_PGPACKINGSUBASSEMBLY.equalsIgnoreCase(strSpecType)){
                    //Modified by DSM(Sogeti) for Code Optimization End
                    //pgIPMTablesJPO_mxJPO tablesJPO = new pgIPMTablesJPO_mxJPO(context, args);
                    //MapList mlNotes = tablesJPO.getTableCharacteristicSequenceData(context, args);
                    //Added for PDF Refactor
                    MapList mlNotes= (MapList)pgPDFViewHelper.executeMainClassMethod(context, "pgIPMTablesJPO", "getTableCharacteristicSequenceData",args);
                    MapList mlNewNotesList=new MapList();
                    if(null != mlNotes &&  mlNotes.size() > 0){
                        boolean repeatHeader=true;
                        boolean isDataPresent=true;
                        boolean isTablePresent=false;
                        for (Iterator iterator = mlNotes.iterator(); iterator.hasNext();){
                            Map NotesMap = (Map) iterator.next();
                            String strNotesDescription=	(String)NotesMap.get(DomainConstants.SELECT_DESCRIPTION);
                            if(null != strNotesDescription && !strNotesDescription.equals("")){
                                strNotesDescription =strNotesDescription.replaceAll("[<]","#LESS_THAN");
                                strNotesDescription =strNotesDescription.replaceAll("[>]","#GREATER_THAN");
                            }
                            //Added by DSM(Sogeti)-2015x.5 for PDF Views (Defect ID-16705) - Starts
                            else{
                                strNotesDescription = DomainConstants.EMPTY_STRING;
                            }
                            //Added by DSM(Sogeti)-2015x.5 for PDF Views (Defect ID-16705) - Ends
                            String strSequence=(String)NotesMap.get("attribute[SharedTableCharacteristicSequence]");
                            if(validateString(strNotesDescription)){
                                if(isDataPresent){
                                    BOMSubstituteSAPBuffer.append("<TR><TD class=\"new\"><TABLE cellspacing=\"0\" style=\"line-height: 16px;\" id=\"BOM\">");
                                    BOMSubstituteSAPBuffer.append("<TR><TD class=\"new\"><B>NOTES</B></TD></TR></TABLE></TD></TR>");
                                    BOMSubstituteSAPBuffer.append("<TR><TD><TABLE class=\"pdf\" width=\"1000\" cellspacing=\"0\" style=\"line-height: 16px;\" id=\"BOM\">");
                                    BOMSubstituteSAPBuffer.append("<thead><TR>");
                                    BOMSubstituteSAPBuffer.append("<TD width=\"100\">No.</TD>");
                                    BOMSubstituteSAPBuffer.append("<TD width=\"900\">Description</TD>");
                                    BOMSubstituteSAPBuffer.append("</TR></thead>");
                                    isDataPresent = false;
                                    isTablePresent=true;
                                }
                                BOMSubstituteSAPBuffer.append("<TR>");
                                BOMSubstituteSAPBuffer.append("<TD>"+strSequence+"</TD>");
                                BOMSubstituteSAPBuffer.append("<TD>"+strNotesDescription+"</TD>");
                                BOMSubstituteSAPBuffer.append("</TR>");
                            }
                        }
                        if(isTablePresent){
                            BOMSubstituteSAPBuffer.append("</TABLE></TD></TR>");
                            BOMSubstituteSAPBuffer.append("<TR><TD class=\"new\"><BR/></TD></TR>");
                        }
                    }
                }
                // for combined with master
                if (validateString(strPDFViewType) && strPDFViewType.equals(pgPDFViewConstants.CONST_COMBINEDWITHMASTER))
                {
                    if(validateString(isHavingMaster) && Boolean.parseBoolean(isHavingMaster))
                    {
                        Map MasterBOM=new HashMap();
                        if(validateString(strMasterId))
                        {
                            //Modified by DSM(Sogeti)-2015x.2 for (Defect#10336) - Starts
                            if((pgV3Constants.TYPE_PGPACKINGSUBASSEMBLY.equals(strSpecType))){
                                iCount++;
                            }
                            //Modified by DSM(Sogeti)-2015x.4 for PDF views For defect 14101 - Starts
                            String []arry = pgIPMPDFViewUtil_mxJPO.getLatestRelease(context,strMasterId);
                            if(null !=arry && arry.length>1){
                                strMasterId  =  arry[0];
                            }
                            //Modified by DSM(Sogeti)-2015x.4 for PDF views For defect 14101 - Ends
                            //Modified by DSM(Sogeti)-2015x.2 for (Defect#10336) - Ends
                            MasterBOM.put("objectId", strMasterId);
                            MasterBOM.put("emxExpandFilter", "2");
                            String[] MasterArgs = JPO.packArgs(MasterBOM);
                            StringBuilder MasterBOMBuffer=getBillOfMaterialSubstituteAndSAPBOMData(context,MasterArgs,strMasterId,null,strUser);
                            BOMSubstituteSAPBuffer=BOMSubstituteSAPBuffer.append(MasterBOMBuffer);
                        }
                    }
                }
                //end combined with master
            }
            catch (MatrixException e){
                throw new MatrixException(e);
            }
            catch (Exception e){
                //Modified by DSM(Sogeti)-2015x.4 for PDF Views(Defect#11912) - Starts
                e.printStackTrace();
                //Modified by DSM(Sogeti)-2015x.4 for PDF Views(Defect#11912) - Ends
                throw new MatrixException(e);
            }
            finally{
                //V3.1 : pop the super user context if the user is EBP -start
                if(isPushContext){
                    ContextUtil.popContext(context);
                    isPushContext = false;
                }
                //V3.1 : pop the super user context if the user is EBP -end
            }
        }
        long endTime = new Date().getTime();
        System.out.println("Total Time has taken by the getBillOfMaterialSubstituteAndSAPBOMData Method is-->"+(endTime-startTime));
        return BOMSubstituteSAPBuffer;
    }
    /**
     * Get weight and dimension data
     * @param context
     * @param strObjectId
     * @param strPDFViewType
     * @return
     */
    private StringBuilder getMasterWeightDimensionsTable(Context context,String strObjectId,String strPDFViewType) throws Exception {
        long startTime = new Date().getTime();
        StringBuilder objectWnDBuffer = new StringBuilder();
        try{
            if(validateString(strObjectId)){
                DomainObject domainObject = DomainObject.newInstance(context,strObjectId);
                StringList slbusSelect = new StringList(4);
                slbusSelect.add(pgV3Constants.SELECT_ATTRIBUTE_PGWDSTATIUS);
                slbusSelect.add(pgV3Constants.SELECT_ATTRIBUTE_PGUNITOFMEASURESYSTEM);
                slbusSelect.add("from["+pgV3Constants.RELATIONSHIP_PGMASTER+"]");
                slbusSelect.add("from["+pgV3Constants.RELATIONSHIP_PGMASTER+"].to.last.id");
                StringList busSelect = new StringList(25);
                busSelect.add(pgV3Constants.SELECT_ATTRIBUTE_PGCSSTYPE);
                busSelect.add(pgV3Constants.SELECT_ATTRIBUTE_PGUNITOFMEASURESYSTEM);
                busSelect.add(pgV3Constants.SELECT_ATTRIBUTE_PGGTIN);
                busSelect.add(pgV3Constants.SELECT_ATTRIBUTE_PGDEPTH);
                busSelect.add(pgV3Constants.SELECT_ATTRIBUTE_PGWIDTH);
                busSelect.add(pgV3Constants.SELECT_ATTRIBUTE_PGHEIGHT);
                busSelect.add(pgV3Constants.SELECT_ATTRIBUTE_PGDIMENSIONUNITOFMEASURE);
                busSelect.add(pgV3Constants.SELECT_ATTRIBUTE_PGGROSSWEIGHT);
                busSelect.add(pgV3Constants.SELECT_ATTRIBUTE_PGGROSSWEIGHTUNITOFMEASURE);
                busSelect.add(pgV3Constants.SELECT_ATTRIBUTE_PGCONSUMERUNITSPERPACKINGUNIT);
                busSelect.add(pgV3Constants.SELECT_ATTRIBUTE_PGNETWEIGHTOFPRODUCTINCONSUMERUNIT);
                busSelect.add(pgV3Constants.SELECT_ATTRIBUTE_PGNETWEIGHTUNITOFMEASURE);
                busSelect.add(pgV3Constants.SELECT_ATTRIBUTE_PGCUBEEFFICIENCY);
                busSelect.add(pgV3Constants.SELECT_ATTRIBUTE_PGPALLETTYPE);
                busSelect.add(pgV3Constants.SELECT_ATTRIBUTE_PGVOLUME);
                busSelect.add(pgV3Constants.SELECT_ATTRIBUTE_PGVOLUMEUNITOFMEASURE);
                busSelect.add(pgV3Constants.SELECT_ATTRIBUTE_PGGROSSWEIGHTWITHPALLET);
                busSelect.add(pgV3Constants.SELECT_ATTRIBUTE_PGGROSSWEIGHTWITHOUTPALLET);
                busSelect.add(pgV3Constants.SELECT_ATTRIBUTE_PGGROSSWEIGHTUNITOFMEASURE);
                busSelect.add(DomainConstants.SELECT_TYPE);
                busSelect.add(DomainConstants.SELECT_NAME);
                busSelect.add(DomainConstants.SELECT_REVISION);
                busSelect.add(DomainConstants.SELECT_CURRENT);
                //Modified by DSM(Sogeti) for Code Optimization Start
                Map mapObject = new HashMap();
                Map<String,String> packingunitMap  = new HashMap();
                Map<String,String> transportunitDataMap =  new HashMap();
                MapList mlTransportUnitCharData = new MapList();
                String strType = null;
                String pgCSSType = null;
                String strWeightDimensionTitle = null;
                String packingunitAttributeValue = null;
                int packingunitMapListSize = 0;
                int transportunitMapListSize = 0;
                int mlTransportUnitCharDataSize = 0;
                Map<String,String> specInfoMap = domainObject.getInfo(context,slbusSelect);
                String strpgWDStatius = specInfoMap.get(pgV3Constants.SELECT_ATTRIBUTE_PGWDSTATIUS);
                String strpgUnitOfMeasureSystem = specInfoMap.get(pgV3Constants.SELECT_ATTRIBUTE_PGUNITOFMEASURESYSTEM);
                MapList packingunitMapList = new MapList();
                MapList transportunitMapList = new MapList();
                //Modified by DSM(Sogeti) for Code Optimization End
                MapList mlRelatedObjects = domainObject.getRelatedObjects(context,
                        pgV3Constants.RELATIONSHIP_CHARACTERISTIC,
                        pgV3Constants.TYPE_PGTRANSPORTUNITCHARACTERISTIC+","+pgV3Constants.TYPE_PGPACKINGUNITCHARACTERISTIC,
                        busSelect,
                        null,
                        false,
                        true,
                        (short) 1,
                        null,
                        null,
                        0);
                for (Iterator iterator = mlRelatedObjects.iterator(); iterator.hasNext();){
                    //Modified by DSM(Sogeti) for Code Optimization Start
                    mapObject = (Map) iterator.next();
                    strType = (String)mapObject.get(DomainConstants.SELECT_TYPE);
                    pgCSSType = (String) mapObject.get(pgV3Constants.SELECT_ATTRIBUTE_PGCSSTYPE);
                    //Modified by DSM(Sogeti) for Code Optimization End
                    if("pgPackingUnitCharacteristic".equals(strType)){
                        if(packingunitMapList.size()<1){
                            packingunitMapList.add(new HashMap());
                            packingunitMapList.add(new HashMap());
                            packingunitMapList.add(new HashMap());
                        }
                        if(pgCSSType.equalsIgnoreCase("Consumer_Unit")){
                            packingunitMapList.set(0, mapObject);
                        }
                        if(pgCSSType.equalsIgnoreCase("Inner_Pack")){
                            packingunitMapList.set(1, mapObject);
                        }
                        if(pgCSSType.equalsIgnoreCase("Customer_Unit")){
                            packingunitMapList.set(2, mapObject);
                        }
                    }else if("pgTransportUnitCharacteristic".equals(strType)){
                        transportunitMapList.add(mapObject);
                    }
                }
                //Modified by DSM(Sogeti) for Code Optimization Start
                packingunitMapListSize = packingunitMapList.size();
                transportunitMapListSize = transportunitMapList.size();
                //Modified by DSM(Sogeti) for Code Optimization End
                Map paramMap=new HashMap();
                paramMap.put("objectId",strObjectId);
                String[] args=JPO.packArgs(paramMap);
                //pgIPMProductData_mxJPO ipmProduct=new pgIPMProductData_mxJPO(context, args);
                //Modified by DSM(Sogeti) for Code Optimization Start
                //mlTransportUnitCharData = ipmProduct.pgGetTransportUnitCharData(context,args);
                //Added for PDF Refactor
                mlTransportUnitCharData= (MapList)pgPDFViewHelper.executeMainClassMethod(context, "pgIPMProductData", "pgGetTransportUnitCharData",args);
                mlTransportUnitCharDataSize = mlTransportUnitCharData.size();
                strWeightDimensionTitle = DomainConstants.EMPTY_STRING;
                //Modified by DSM(Sogeti) for Code Optimization End
                if(pgPDFViewConstants.CONST_COMBINEDWITHMASTER.equals(strPDFViewType) || null == strPDFViewType){
                    strWeightDimensionTitle = (null == strPDFViewType ? "MASTER WEIGHTS AND DIMENSIONS (R)":"FINISHED PRODUCT WEIGHTS AND DIMENSIONS (R)");
                    String strSpecType = domainObject.getInfo(context, DomainConstants.SELECT_TYPE);
                    if (pgV3Constants.TYPE_PGPACKINGSUBASSEMBLY.equals(strSpecType)){
                        strWeightDimensionTitle = "PACKING SUBASSEMBLY WEIGHTS AND DIMENSIONS (R)";
                    }
                }else{
                    strWeightDimensionTitle="WEIGHTS AND DIMENSIONS (R)";
                }
                boolean havingPackingUnitData=false;
                if(packingunitMapListSize > 0){
                    for (Iterator iterator = packingunitMapList.iterator(); iterator.hasNext();){
                        packingunitMap = (Map) iterator.next();
                        List lisKeyst=getpackingunitKeys(context);
                        for (Iterator<String> iterator2 = lisKeyst.iterator(); iterator2.hasNext();){
                            packingunitAttributeValue = (String)packingunitMap.get(iterator2.next());
                            if(validateString(packingunitAttributeValue)){havingPackingUnitData=true;break;}
                        }
                        if(havingPackingUnitData)
                            break;
                    }
                }
                if(havingPackingUnitData || ((null!=transportunitMapList && transportunitMapListSize > 0) ||(null!=mlTransportUnitCharData && mlTransportUnitCharDataSize > 0))){
                    objectWnDBuffer.append("<TR><TD class=\"new\"><TABLE cellspacing=\"0\" style=\"line-height: 16px;\" id=\"pgFinishedProductTable\">");
                    //Modified by DSM-2015x.1(Sogeti) for Defect - 5543 on 12-July-2016- Starts
                    objectWnDBuffer.append("<thead><th><TR><TD class=\"new\"><B>"+strWeightDimensionTitle+"</B></TD></TR></th></thead>");
                    objectWnDBuffer.append("<TR><TD><TABLE class=\"WordWrappdf\" cellspacing=\"0\" width=\"1000px\" id=\"pgFinishedProductTable\">");
                    objectWnDBuffer.append("<TR>");
                    objectWnDBuffer.append("<TD width=\"300px\">W&amp;D Status</TD>");
                    objectWnDBuffer.append("<TD>"+validateString1(strpgWDStatius)+"</TD>");
                    objectWnDBuffer.append("</TR>");
                    objectWnDBuffer.append("<TR>");
                    objectWnDBuffer.append("<TD>Unit of Measure System</TD>");
                    objectWnDBuffer.append("<TD>"+validateString1(strpgUnitOfMeasureSystem)+"</TD>");
                    objectWnDBuffer.append("</TR>");
                    objectWnDBuffer.append("</TABLE></TD></TR>");
                    objectWnDBuffer.append("<TR><TD><br /></TD></TR>");
                    objectWnDBuffer.append("</TABLE></TD></TR>");
                    //Modified by DSM-2015x.1(Sogeti) for Defect - 5543 on 12-July-2016- Ends
                }
                //W n D Status Table end
                if(havingPackingUnitData){
                    //Modified by DSM(Sogeti)-2015x.1 for PDF Views (Defect ID-5543) - Starts
                    //objectWnDBuffer.append("<TR><TD><TABLE class=\"WordWrappdf\" cellspacing=\"0\" width=\"1000px\" id=\"pgFinishedProductTable\">");
                    /* objectWnDBuffer.append("<thead><TR><TD class=\"new\" colspan='25'><B>PACKING UNIT</B></TD></TR><TR>"); */
                    //Modified for iText colspan issue
                    objectWnDBuffer.append("<TR><TD><TABLE class=\"pdf\" cellspacing=\"0\" width=\"1000px\" id=\"pgFinishedProductTable\">");
                    objectWnDBuffer.append("<thead><TR><TD class=\"new\" colspan='13'><B>PACKING UNIT</B></TD></TR><TR>");
                    //Modified for iText colspan issue
                    objectWnDBuffer.append("<TD align=\"center\" width=\"100px\" rowspan='2'>Packing Unit<br />Type</TD>");
                    //Modified by DSM(Sogeti)-2015x.1 for PDF Views (Defect ID-5543) - Ends
                    objectWnDBuffer.append("<TD align=\"center\" width=\"100px\" rowspan='2'>Alternative<br />Unit of<br />Measure</TD>");
                    objectWnDBuffer.append("<TD align=\"center\" width=\"100px\" rowspan='2'>GTIN</TD>");
                    objectWnDBuffer.append("<TD align=\"center\" width=\"300px\" colspan='3'>Dimensions - OD with Bulge</TD>");
                    objectWnDBuffer.append("<TD align=\"center\" width=\"100px\" rowspan='2'>Unit of<br />Measure</TD>");
                    objectWnDBuffer.append("<TD align=\"center\" width=\"100px\" rowspan='2'>Gross Weight</TD>");
                    objectWnDBuffer.append("<TD align=\"center\" width=\"100px\" rowspan='2'>Unit<br />of Measure</TD>");
                    objectWnDBuffer.append("<TD align=\"center\" width=\"100px\" rowspan='2'>Number of<br />Consumer<br />Units per Unit</TD>");
                    objectWnDBuffer.append("<TD align=\"center\" width=\"100px\" rowspan='2'>Net Weight of<br />Product in<br />Consumer Unit</TD>");
                    objectWnDBuffer.append("<TD align=\"center\" width=\"100px\" rowspan='2'>Unit of<br />Measure</TD>");
                    objectWnDBuffer.append("<TD align=\"center\" width=\"100px\" rowspan='2'>Cube<br />Efficiency</TD>");
                    objectWnDBuffer.append("</TR>");
                    objectWnDBuffer.append("<TR>");
                    objectWnDBuffer.append("<TD align=\"center\" width=\"100px\">Depth</TD>");
                    objectWnDBuffer.append("<TD align=\"center\" width=\"100px\">Width</TD>");
                    objectWnDBuffer.append("<TD align=\"center\" width=\"100px\">Height</TD>");
                    objectWnDBuffer.append("</TR></thead>");
                    for (Iterator iterator = packingunitMapList.iterator(); iterator.hasNext();){
                        packingunitMap = (Map) iterator.next();
                        //Modified for V4-2013x.4 - Defect-7180 - Starts
                        objectWnDBuffer.append("<TR class=\"pdf\">");
                        //Modified for V4-2013x.4 - Defect-7180 - Ends
                        objectWnDBuffer.append("<TD width=\"150px\">"+getFormatedValue(context,packingunitMap.get(pgV3Constants.SELECT_ATTRIBUTE_PGCSSTYPE))+"</TD>");
                        objectWnDBuffer.append("<TD>"+validateString1(packingunitMap.get(pgV3Constants.SELECT_ATTRIBUTE_PGUNITOFMEASURESYSTEM))+"</TD>");
                        objectWnDBuffer.append("<TD>"+validateString1(packingunitMap.get(pgV3Constants.SELECT_ATTRIBUTE_PGGTIN))+"</TD>");
                        objectWnDBuffer.append("<TD width=\"100px\">"+validateString1(packingunitMap.get(pgV3Constants.SELECT_ATTRIBUTE_PGDEPTH))+"</TD>");
                        objectWnDBuffer.append("<TD width=\"100px\">"+validateString1(packingunitMap.get(pgV3Constants.SELECT_ATTRIBUTE_PGWIDTH))+"</TD>");
                        objectWnDBuffer.append("<TD width=\"100px\">"+validateString1(packingunitMap.get(pgV3Constants.SELECT_ATTRIBUTE_PGHEIGHT))+"</TD>");
                        objectWnDBuffer.append("<TD>"+validateString1(packingunitMap.get(pgV3Constants.SELECT_ATTRIBUTE_PGDIMENSIONUNITOFMEASURE))+"</TD>");
                        objectWnDBuffer.append("<TD>"+validateString1(packingunitMap.get(pgV3Constants.SELECT_ATTRIBUTE_PGGROSSWEIGHT))+"</TD>");
                        objectWnDBuffer.append("<TD>"+validateString1(packingunitMap.get(pgV3Constants.SELECT_ATTRIBUTE_PGGROSSWEIGHTUNITOFMEASURE))+"</TD>");
                        objectWnDBuffer.append("<TD>"+validateString1(packingunitMap.get(pgV3Constants.SELECT_ATTRIBUTE_PGCONSUMERUNITSPERPACKINGUNIT))+"</TD>");
                        objectWnDBuffer.append("<TD>"+validateString1(packingunitMap.get(pgV3Constants.SELECT_ATTRIBUTE_PGNETWEIGHTOFPRODUCTINCONSUMERUNIT))+"</TD>");
                        objectWnDBuffer.append("<TD>"+validateString1(packingunitMap.get(pgV3Constants.SELECT_ATTRIBUTE_PGNETWEIGHTUNITOFMEASURE))+"</TD>");
                        objectWnDBuffer.append("<TD>"+validateString1(packingunitMap.get(pgV3Constants.SELECT_ATTRIBUTE_PGCUBEEFFICIENCY))+"</TD>");
                        objectWnDBuffer.append("</TR>");
                    }
                    objectWnDBuffer.append("</TABLE></TD></TR>");
                    objectWnDBuffer.append("<TR><TD><br /></TD></TR>");
                }
                //Transport Unit Table
                if(null !=transportunitMapList && transportunitMapListSize > 0){
                    objectWnDBuffer.append("<TR><TD class=\"new\"><TABLE cellspacing=\"0\" style=\"line-height: 16px;\" id=\"pgFinishedProductTable\">");
                    objectWnDBuffer.append("<TR><TD class=\"new\"><B>TRANSPORT UNIT</B></TD></TR>");
                    objectWnDBuffer.append("</TABLE></TD></TR>");
                    objectWnDBuffer.append("<TR><TD><TABLE class=\"pdf\" cellspacing=\"0\" width=\"1000px\" id=\"pgFinishedProductTable\">");
                    objectWnDBuffer.append("</TABLE></TD></TR>");
                    objectWnDBuffer.append("<TR><TD><TABLE class=\"pdf\" cellspacing=\"0\" width=\"1000px\" id=\"pgFinishedProductTable\">");
                    objectWnDBuffer.append("<thead><TR>");
                    objectWnDBuffer.append("<TD align=\"center\" width=\"100px\" rowspan='2'>Pallet Type</TD>");
                    objectWnDBuffer.append("<TD align=\"center\" width=\"100px\" rowspan='2'>GTIN</TD>");
                    objectWnDBuffer.append("<TD align=\"center\" width=\"300px\" colspan='3'>Dimensions - OD with Bulge</TD>");
                    objectWnDBuffer.append("<TD align=\"center\" width=\"100px\" rowspan='2'>Unit of<br />Measure</TD>");
                    objectWnDBuffer.append("<TD align=\"center\" width=\"100px\" rowspan='2'>Transport Unit<br />Volume</TD>");
                    objectWnDBuffer.append("<TD align=\"center\" width=\"100px\" rowspan='2'>Unit<br />of Measure</TD>");
                    objectWnDBuffer.append("<TD align=\"center\" width=\"100px\" rowspan='2'>Gross Weight with Pallet</TD>");
                    objectWnDBuffer.append("<TD align=\"center\" width=\"100px\" rowspan='2'>Gross Weight without Pallet</TD>");
                    objectWnDBuffer.append("<TD align=\"center\" width=\"100px\" rowspan='2'>Unit of<br />Measure</TD>");
                    objectWnDBuffer.append("</TR>");
                    objectWnDBuffer.append("<TR>");
                    objectWnDBuffer.append("<TD align=\"center\" width=\"100px\">Depth</TD>");
                    objectWnDBuffer.append("<TD align=\"center\" width=\"100px\">Width</TD>");
                    objectWnDBuffer.append("<TD align=\"center\" width=\"100px\">Height</TD>");
                    objectWnDBuffer.append("</TR></thead>");
                    transportunitMapList.sort(pgV3Constants.SELECT_ATTRIBUTE_PGPALLETTYPE, "ascending", "String");
                    for (Iterator iterator = transportunitMapList.iterator(); iterator.hasNext();){
                        Map<String,String> transportunitMap = (Map) iterator.next();
                        objectWnDBuffer.append("<TR class=\"pdf\">");
                        objectWnDBuffer.append("<TD>"+validateString1(transportunitMap.get(pgV3Constants.SELECT_ATTRIBUTE_PGPALLETTYPE))+"</TD>");
                        objectWnDBuffer.append("<TD>"+validateString1(transportunitMap.get(pgV3Constants.SELECT_ATTRIBUTE_PGGTIN))+"</TD>");
                        objectWnDBuffer.append("<TD>"+validateString1(transportunitMap.get(pgV3Constants.SELECT_ATTRIBUTE_PGDEPTH))+"</TD>");
                        objectWnDBuffer.append("<TD>"+validateString1(transportunitMap.get(pgV3Constants.SELECT_ATTRIBUTE_PGWIDTH))+"</TD>");
                        objectWnDBuffer.append("<TD>"+validateString1(transportunitMap.get(pgV3Constants.SELECT_ATTRIBUTE_PGHEIGHT))+"</TD>");
                        objectWnDBuffer.append("<TD>"+validateString1(transportunitMap.get(pgV3Constants.SELECT_ATTRIBUTE_PGDIMENSIONUNITOFMEASURE))+"</TD>");
                        objectWnDBuffer.append("<TD>"+validateString1(transportunitMap.get(pgV3Constants.SELECT_ATTRIBUTE_PGVOLUME))+"</TD>");
                        objectWnDBuffer.append("<TD>"+validateString1(transportunitMap.get(pgV3Constants.SELECT_ATTRIBUTE_PGVOLUMEUNITOFMEASURE))+"</TD>");
                        objectWnDBuffer.append("<TD>"+validateString1(transportunitMap.get(pgV3Constants.SELECT_ATTRIBUTE_PGGROSSWEIGHTWITHPALLET))+"</TD>");
                        objectWnDBuffer.append("<TD>"+validateString1(transportunitMap.get(pgV3Constants.SELECT_ATTRIBUTE_PGGROSSWEIGHTWITHOUTPALLET))+"</TD>");
                        objectWnDBuffer.append("<TD>"+validateString1(transportunitMap.get(pgV3Constants.SELECT_ATTRIBUTE_PGGROSSWEIGHTUNITOFMEASURE))+"</TD>");
                        objectWnDBuffer.append("</TR>");
                    }
                    objectWnDBuffer.append("</TABLE></TD></TR>");
                    objectWnDBuffer.append("<TR><TD><br /></TD></TR>");
                }
                //Last Table in W & D
                if(null !=mlTransportUnitCharData && mlTransportUnitCharDataSize > 0){
                    objectWnDBuffer.append("<TR><TD class=\"new\"><TABLE class=\"WordWrappdf\" width=\"1000px\" cellspacing=\"0\" style=\"line-height: 16px;\" id=\"pgFinishedProductTable\">");
                    objectWnDBuffer.append("<thead><TR>");
                    //Modified by DSM(Sogeti)-2015x.2 for (Defect ID-11213) - Starts
                    objectWnDBuffer.append("<TD align=\"center\" width=\"150px\">Pallet Type</TD>");
                    //Modified by DSM(Sogeti)-2015x.2 for (Defect ID-11213) - Ends
                    objectWnDBuffer.append("<TD align=\"center\" width=\"150px\">Number of Customer Units per Layer</TD>");
                    objectWnDBuffer.append("<TD align=\"center\" width=\"150px\">Number of Layers per Transport Unit</TD>");
                    objectWnDBuffer.append("<TD align=\"center\" width=\"200px\">Number of Customer Units per Transport Unit</TD>");
                    //Modified by DSM(Sogeti)-2015x.2 for (Defect ID-11213) - Starts
                    objectWnDBuffer.append("<TD align=\"center\" width=\"150px\">Cube Efficiency</TD>");
                    //Modified by DSM(Sogeti)-2015x.2 for (Defect ID-11213) - Ends
                    objectWnDBuffer.append("<TD align=\"center\" width=\"150px\">Warehouse: Pallet Stack Height Maximum</TD>");
                    objectWnDBuffer.append("<TD align=\"center\" width=\"150px\">Warehouse: Case Stack Height Maximum</TD>");
                    objectWnDBuffer.append("<TD align=\"center\" width=\"100px\">Truck: Pallet Stack Height Maximum</TD>");
                    //Modified by DSM(Sogeti)-2015x.2 for (Defect ID-11213) - Starts
                    objectWnDBuffer.append("<TD align=\"center\" width=\"150px\">Stacking Pattern Name</TD>");
                    //Modified by DSM(Sogeti)-2015x.2 for (Defect ID-11213) - Ends
                    objectWnDBuffer.append("</TR></thead>");
                    for (Iterator iterator2 = mlTransportUnitCharData.iterator(); iterator2.hasNext();){
                        transportunitDataMap = (Map) iterator2.next();
                        objectWnDBuffer.append("<TR class=\"pdf\">");
                        objectWnDBuffer.append("<TD align=\"center\">"+validateString1(transportunitDataMap.get(pgV3Constants.SELECT_ATTRIBUTE_PGPALLETTYPE))+"</TD>");
                        objectWnDBuffer.append("<TD align=\"center\">"+validateString1(transportunitDataMap.get("attribute[pgCustomerUnitsPerLayer]"))+"</TD>");
                        objectWnDBuffer.append("<TD align=\"center\">"+validateString1(transportunitDataMap.get("attribute[pgLayersPerTransportUnit]"))+"</TD>");
                        objectWnDBuffer.append("<TD align=\"center\">"+validateString1(transportunitDataMap.get("attribute[pgCustomerUnitsPerTransportUnit]"))+"</TD>");
                        objectWnDBuffer.append("<TD align=\"center\">"+validateString1(transportunitDataMap.get(pgV3Constants.SELECT_ATTRIBUTE_PGCUBEEFFICIENCY))+"</TD>");
                        objectWnDBuffer.append("<TD align=\"center\">"+validateString1(transportunitDataMap.get("attribute[pgMaxPalletStackHeight]"))+"</TD>");
                        objectWnDBuffer.append("<TD align=\"center\">"+validateString1(transportunitDataMap.get("attribute[pgMaxCaseStackHeight]"))+"</TD>");
                        objectWnDBuffer.append("<TD align=\"center\">"+validateString1(transportunitDataMap.get("attribute[pgMaxTruckPalletStackHeight]"))+"</TD>");
                        objectWnDBuffer.append("<TD align=\"center\">"+validateString1(transportunitDataMap.get("to[Reference Document].from.name"))+"</TD>");
                        objectWnDBuffer.append("</TR>");
                    }
                    objectWnDBuffer.append("</TABLE></TD></TR>");
                    //Modified by DSM-2015x.2 for PDF Views(Sogeti) (Defect ID-10090) -Starts
                    objectWnDBuffer.append("<TR><TD><BR /></TD></TR>");
                    //Modified by DSM-2015x.2 for PDF Views(Sogeti) (Defect ID-10090) -Ends
                }
                //Master W & D Starts
                String isHavingMaster = specInfoMap.get("from["+pgV3Constants.RELATIONSHIP_PGMASTER+"]");
                String strMasterId = specInfoMap.get("from["+pgV3Constants.RELATIONSHIP_PGMASTER+"].to.last.id");
                if (validateString(strPDFViewType) && strPDFViewType.equals(pgPDFViewConstants.CONST_COMBINEDWITHMASTER)){
                    if(validateString(isHavingMaster) && Boolean.parseBoolean(isHavingMaster)){
                        //Modified by DSM(Sogeti)-2015x.4 for PDF views For defect 14101 - Starts
                        String []arry = pgIPMPDFViewUtil_mxJPO.getLatestRelease(context,strMasterId);
                        if(null !=arry && arry.length>1){
                            strMasterId  =  arry[0];
                        }
                        //Modified by DSM(Sogeti)-2015x.4 for PDF views For defect 14101 - Ends
                        if(validateString(strMasterId)){
                            StringBuilder masterWnDBuffer=getMasterWeightDimensionsTable(context,strMasterId,null);
                            objectWnDBuffer = objectWnDBuffer.append(masterWnDBuffer);
                        }
                    }
                }
            }
            //Master W & D Finished
        }
        catch (Exception e){
            throw new MatrixException(e);
        }
        long endTime = new Date().getTime();
        System.out.println("Total Time has taken by the getMasterWeightDimensionsTable Method is-->"+(endTime-startTime));
        return objectWnDBuffer;
    }
    /**
     * Replace type name with correct value
     * @param context
     * @param strListValue
     * @return
     */
    public String getFormatedValue(Context context,String strListValue){
        if(validateString(strListValue)){
            if("Customer_Unit".equalsIgnoreCase(strListValue)){
                strListValue = "Customer Unit";
            } else if("Inner_Pack".equalsIgnoreCase(strListValue)){
                strListValue = "Inner Pack";
            } else if("Consumer_Unit".equalsIgnoreCase(strListValue)){
                strListValue = "Consumer Unit";
            }
        }
        return strListValue;
    }
    /**
     * Check if input string is valid.
     * @param strVerifyString
     * @return
     */
    public static boolean validateString(String strVerifyString){
        boolean isStringDesired=false;
        if(null != strVerifyString && !"".equals(strVerifyString) && !"null".equalsIgnoreCase(strVerifyString)){
            isStringDesired=true;
        }
        return isStringDesired;
    }
    /**
     * Check pased StringList object contains valid String
     * @param obj
     * @return
     */
    public static String validateString1(Object obj){
        //Modified by DSM(Sogeti) for Code Optimization Start
        String strReturn = DomainConstants.EMPTY_STRING;
        String strTestMethod = DomainConstants.EMPTY_STRING;
        //Modified by DSM(Sogeti) for Code Optimization End
        if(null !=obj && !"null".equals(obj)) {
            if (obj instanceof String) {
                strReturn = (String) obj;
            }
            else if(obj instanceof StringList) {
                StringList listObject = (StringList) obj;
                if(listObject.size()==1){
                    strReturn+=(String)listObject.get(0);
                } else{
                    for (Iterator iterator2 = listObject.iterator(); iterator2.hasNext();){
                        strTestMethod = (String) iterator2.next();
                        strReturn+="<br/>"+strTestMethod;
                    }
                }
            }
        }
        return strReturn;
    }

    //Added by DSM(Sogeti)-2018x.6 for (Defect#42363) - Starts
    /**
     * Wrap String and StringList
     * @param obj
     * @return
     */
    public static String getWrappedText(Object object) {

        String outStr = DomainConstants.EMPTY_STRING;
        int iWrapLength=12;
        if (null != object) {
            StringBuilder outStrBuilder = new StringBuilder();
            if (object instanceof String && UIUtil.isNotNullAndNotEmpty((String) object)) {
                outStr = (String) object;
                if (outStr.length() > iWrapLength && outStr.indexOf(" ") > iWrapLength) {
                    outStrBuilder.append("<BR/>");
                }
                outStrBuilder.append(wrapCharTable(outStr, iWrapLength));
            } else if (object instanceof StringList) {
                StringList outStrList = (StringList) object;
                boolean isSperatorNeeded=false;
                for (Iterator dataStringItr = outStrList.iterator(); dataStringItr.hasNext();) {
                    outStr = (String) dataStringItr.next();
                    if(isSperatorNeeded) {
                        outStrBuilder.append(", ");
                    }else {
                        isSperatorNeeded=true;
                    }
                    if (outStr.length() > iWrapLength && outStr.indexOf(" ") > iWrapLength) {
                        outStrBuilder.append("<BR/>");
                    }
                    outStrBuilder.append(wrapCharTable(outStr, iWrapLength));

                }
            }
            outStr = outStrBuilder.toString();
        }
        return outStr;
    }
    //Added by DSM(Sogeti)-2018x.6 for (Defect#42363) - Ends

    /**
     * Replace boolean with Yes or No
     * @param sBoolean
     * @return
     */
    private String changeTrueToYes(String sBoolean){
        if(sBoolean!=null && sBoolean.equalsIgnoreCase("True")){
            return "Yes";
        }else{
            return "No";
        }
    }
    /**
     * Get packaging material bus selects
     * @return
     */
    private List<String> getpackingunitKeys(Context context){
        List busSelect = new StringList(12);
        busSelect.add(pgV3Constants.SELECT_ATTRIBUTE_PGUNITOFMEASURESYSTEM);
        busSelect.add(pgV3Constants.SELECT_ATTRIBUTE_PGGTIN);
        busSelect.add(pgV3Constants.SELECT_ATTRIBUTE_PGDEPTH);
        busSelect.add(pgV3Constants.SELECT_ATTRIBUTE_PGWIDTH);
        busSelect.add(pgV3Constants.SELECT_ATTRIBUTE_PGHEIGHT);
        busSelect.add(pgV3Constants.SELECT_ATTRIBUTE_PGDIMENSIONUNITOFMEASURE);
        busSelect.add(pgV3Constants.SELECT_ATTRIBUTE_PGGROSSWEIGHT);
        busSelect.add(pgV3Constants.SELECT_ATTRIBUTE_PGGROSSWEIGHTUNITOFMEASURE);
        busSelect.add(pgV3Constants.SELECT_ATTRIBUTE_PGCONSUMERUNITSPERPACKINGUNIT);
        busSelect.add(pgV3Constants.SELECT_ATTRIBUTE_PGNETWEIGHTOFPRODUCTINCONSUMERUNIT);
        busSelect.add(pgV3Constants.SELECT_ATTRIBUTE_PGNETWEIGHTUNITOFMEASURE);
        busSelect.add(pgV3Constants.SELECT_ATTRIBUTE_PGCUBEEFFICIENCY);
        return busSelect;
    }
    /**
     * Create table header for BSF BOM
     * @return
     */
    private StringBuilder getBSFBOMTableheader(Context context) {
        String SAPDescription1 = "SAP Description or FIL Description";
        StringBuilder BOMSubstituteSAPBuffer = new StringBuilder();
        BOMSubstituteSAPBuffer.append("<thead><TR>");
        BOMSubstituteSAPBuffer.append("<TH width=\"100\">Name</TH>");
        BOMSubstituteSAPBuffer.append("<TH width=\"40\">Chg.</TH>");
        BOMSubstituteSAPBuffer.append("<TH width=\"220\">"+SAPDescription1+"</TH>");
        BOMSubstituteSAPBuffer.append("<TH width=\"80\">Type (T)<BR/>Spec SubType (SS)</TH>");
        BOMSubstituteSAPBuffer.append("<TH width=\"40\">Sub</TH>");
        BOMSubstituteSAPBuffer.append("<TH width=\"50\">Min</TH>");
        BOMSubstituteSAPBuffer.append("<TH width=\"100\">Target</TH>");
        BOMSubstituteSAPBuffer.append("<TH width=\"50\">Max</TH>");
        BOMSubstituteSAPBuffer.append("<TH width=\"80\">Unit of Measure</TH>");
        BOMSubstituteSAPBuffer.append("<TH width=\"120\">Material Function (MF)<BR/>Position Indicator (PI)</TH>");
        BOMSubstituteSAPBuffer.append("<TH width=\"140\">Comment</TH>");
        BOMSubstituteSAPBuffer.append("<TH width=\"120\">Batch/Unit Size</TH>");
        BOMSubstituteSAPBuffer.append("</TR></thead>");
        return BOMSubstituteSAPBuffer;
    }
    /**
     * Get substitute data
     * @param mlSubstituteData
     * @param strObjectId
     * @param strSpecType
     *@return
     */
    private StringBuilder getHTMLForSubstituteTable(Context context, MapList mlSubstituteData,String strObjectId,String strSpecType) throws Exception{
        StringBuilder BOMSubstituteSAPBuffer=new StringBuilder();
        if(null != mlSubstituteData && mlSubstituteData.size() > 0){
            int nCount=0;
            //Modified by DSM(Sogeti) for Code Optimization Start
            String strPCTFIL1=DomainConstants.EMPTY_STRING;
            String strPCTFIL=DomainConstants.EMPTY_STRING;
            String strPCTFIL2=DomainConstants.EMPTY_STRING;
            String Change = DomainConstants.EMPTY_STRING;
            String SCN = DomainConstants.EMPTY_STRING;
            String Qty = DomainConstants.EMPTY_STRING;
            String strpgQuantity = DomainConstants.EMPTY_STRING;
            String uom = DomainConstants.EMPTY_STRING;
            String COSAnalysis = DomainConstants.EMPTY_STRING;
            String ValidUntil = DomainConstants.EMPTY_STRING;
            String comment = DomainConstants.EMPTY_STRING;
            //Commented by DSM(Sogeti)-2015x.2 for (Defect#8461) - Starts
            //String strFinishedProductCode = DomainConstants.EMPTY_STRING;
            //Commented by DSM(Sogeti)-2015x.2 for (Defect#8461) - Ends
            String Min = DomainConstants.EMPTY_STRING;
            String Max = DomainConstants.EMPTY_STRING;
            String Target = DomainConstants.EMPTY_STRING;
            String PositionIndicator = DomainConstants.EMPTY_STRING;
            String MaterialFunction = DomainConstants.EMPTY_STRING;
            String Type = DomainConstants.EMPTY_STRING;
            String SAPDescription = DomainConstants.EMPTY_STRING;
            String SubType = DomainConstants.EMPTY_STRING;
            String pgAssemblyType = DomainConstants.EMPTY_STRING;
            String name = DomainConstants.EMPTY_STRING;
            String strSpecSubType = DomainConstants.EMPTY_STRING;
            Map mapSubstituteObject = new HashMap();
            Map<String,String> strEBOMId = new HashMap();
            Map mapRelId = new HashMap();
            MapList mlSubstitutes = new MapList();
            Map<String,String> specMap=new HashMap();
            //Modified by DSM(Sogeti) for Code Optimization End
            BOMSubstituteSAPBuffer.append("<TR><TD class=\"new\"><BR/></TD></TR>");
            BOMSubstituteSAPBuffer.append("<TR><TD class=\"new\"><TABLE cellspacing=\"0\" style=\"line-height: 16px;\" id=\"BOM\">");
            BOMSubstituteSAPBuffer.append("<TR><TD class=\"new\"><B>SUBSTITUTES</B></TD></TR></TABLE></TD></TR>");
            //Modified by DSM(Sogeti) for Code Optimization
            //Modified by DSM(Sogeti) - for 2015x.5 PDF Views Defect# 15894 - Starts
            /*if ((pgV3Constants.TYPE_PGFINISHEDPRODUCT.equals(strSpecType)) || (pgV3Constants.TYPE_PGMASTERFINISHEDPRODUCT.equals(strSpecType)) || (pgV3Constants.TYPE_PGPACKINGSUBASSEMBLY.equals(strSpecType))){*/
            if ((pgV3Constants.TYPE_PGFINISHEDPRODUCT.equals(strSpecType)) || (pgV3Constants.TYPE_PGPACKINGSUBASSEMBLY.equals(strSpecType))){
                strPCTFIL1="Packing Table: ";
                strPCTFIL2="PCT ";
            }
            else if((pgV3Constants.TYPE_PGMASTERFINISHEDPRODUCT.equals(strSpecType))){
                strPCTFIL1="Packing Component Table: ";
                strPCTFIL2="PCT ";
            }
            //Modified by DSM(Sogeti) - for 2015x.5 PDF Views Defect# 15894 - Ends
            else {
                strPCTFIL1="Formulation: ";
                strPCTFIL2="FIL ";
            }
            for (Iterator iterator = mlSubstituteData.iterator(); iterator.hasNext();){
                nCount++;
                strEBOMId = (Map) iterator.next();
                mapRelId = new HashMap();
                mapRelId.put("relId", strEBOMId.get("relId"));
                mapRelId.put("objectId", strObjectId);
                String []args = JPO.packArgs(mapRelId);
                //emxPart_mxJPO emxPart = new emxPart_mxJPO(context, args);
                //mlSubstitutes = emxPart.getTableEBOMPartsSubstituteList(context,args);
                //Added for PDF Refactor
                mlSubstitutes= (MapList)pgPDFViewHelper.executeMainClassMethod(context, "emxPart", "getTableEBOMPartsSubstituteList",args);
                if(nCount>1)
                    BOMSubstituteSAPBuffer.append("<TR><TD class=\"new\"><BR/></TD></TR>");
                BOMSubstituteSAPBuffer.append("<TR><TD><TABLE class=\"pdf\" cellspacing=\"0\" id=\"BOM\">");
                BOMSubstituteSAPBuffer.append("<TR>");
                BOMSubstituteSAPBuffer.append("<TD class=\"new\" valign=\"top\" colspan=\"3\">Substitute For: "+strEBOMId.get("SubstituteFor")+"</TD>");
                BOMSubstituteSAPBuffer.append("<TD class=\"new\" valign=\"top\" colspan=\"7\">SAP Description: "+strEBOMId.get("SAP")+"</TD>");
                BOMSubstituteSAPBuffer.append("</TR>");
                BOMSubstituteSAPBuffer.append("<TR>");
                BOMSubstituteSAPBuffer.append("<TD class=\"new\" valign=\"top\" colspan=\"3\">Used in "+strPCTFIL1+strEBOMId.get("UsedIn")+"</TD>");
                BOMSubstituteSAPBuffer.append("<TD class=\"new\" valign=\"top\" colspan=\"7\">"+strPCTFIL2+"Description: "+strEBOMId.get("FIL")+"</TD>");
                BOMSubstituteSAPBuffer.append("</TR>");
                BOMSubstituteSAPBuffer.append("</TABLE></TD></TR>");
                BOMSubstituteSAPBuffer.append("<TR><TD><TABLE class=\"WordWrappdf\" cellspacing=\"0\" width=\"1000px\" id=\"BOM\">");
                BOMSubstituteSAPBuffer.append("<thead><TR>");
                BOMSubstituteSAPBuffer.append("<TH align=\"center\" width=\"50\">Chg.</TH>");
                BOMSubstituteSAPBuffer.append("<TH align=\"center\" width=\"80\">Substitution <BR/> Combination <BR/>Number</TH>");
                BOMSubstituteSAPBuffer.append("<TH align=\"center\" width=\"80\">Name</TH>");
                BOMSubstituteSAPBuffer.append("<TH align=\"center\" width=\"180\">SAP Description</TH>");
                BOMSubstituteSAPBuffer.append("<TH align=\"center\" width=\"100\">Type (T)<BR/>Spec SubType (SS)</TH>");
                //Commented by DSM(Sogeti)-2015x.2 for (Defect#8461) - Starts
                //Modified by DSM(Sogeti) for Code Optimization
				/*if(pgV3Constants.TYPE_PGMASTERFINISHEDPRODUCT.equalsIgnoreCase(strSpecType)){
					BOMSubstituteSAPBuffer.append("<TD align=\"center\">Finished Product Code</TD>");
				}*/
                //Modified by DSM(Sogeti) for Code Optimization
                //Commented by DSM(Sogeti)-2015x.2 for (Defect#8461) - Ends
                if(!(pgV3Constants.TYPE_PGFINISHEDPRODUCT.equals(strSpecType) || pgV3Constants.TYPE_PGMASTERFINISHEDPRODUCT.equals(strSpecType) || pgV3Constants.TYPE_PGPACKINGSUBASSEMBLY.equals(strSpecType)))
                {
                    BOMSubstituteSAPBuffer.append("<TH align=\"center\" width=\"50\">Min</TH>");
                    BOMSubstituteSAPBuffer.append("<TH align=\"center\" width=\"50\">Target</TH>");
                    BOMSubstituteSAPBuffer.append("<TH align=\"center\" width=\"50\">Max</TH>");
                    BOMSubstituteSAPBuffer.append("<TH align=\"center\" width=\"80\">Unit of Measure</TH>");
                    BOMSubstituteSAPBuffer.append("<TH align=\"center\" width=\"90\">Material Function (MF)<BR/>Position Indicator (PI)</TH>");
                    BOMSubstituteSAPBuffer.append("<TH align=\"center\" width=\"60\">Valid Until Date</TH>");
                    BOMSubstituteSAPBuffer.append("<TH align=\"center\" width=\"180\">Comments</TH>");
                }
                if(pgV3Constants.TYPE_PGPACKINGSUBASSEMBLY.equalsIgnoreCase(strSpecType) || pgV3Constants.TYPE_PGFINISHEDPRODUCT.equalsIgnoreCase(strSpecType) || pgV3Constants.TYPE_PGMASTERFINISHEDPRODUCT.equalsIgnoreCase(strSpecType)){
                    BOMSubstituteSAPBuffer.append("<TH align=\"center\" width=\"80\">Quantity</TH>");
                    BOMSubstituteSAPBuffer.append("<TH align=\"center\" width=\"80\">Unit of Measure</TH>");
                    //Commented by DSM(Sogeti)-2015x.2 for (Defect#8461) - Starts
					/*if(pgV3Constants.TYPE_PGMASTERFINISHEDPRODUCT.equalsIgnoreCase(strSpecType)){
						BOMSubstituteSAPBuffer.append("<TD align=\"center\">Include In Countries of Sale Analysis</TD>");
					}*/
                    //Commented by DSM(Sogeti)-2015x.2 for (Defect#8461) - Ends
                    BOMSubstituteSAPBuffer.append("<TH align=\"center\" width=\"60\">Valid Until Date</TH>");
                    BOMSubstituteSAPBuffer.append("<TH align=\"center\" width=\"180\">Comments</TH>");
                }
                BOMSubstituteSAPBuffer.append("</TR></thead>");
                for (Iterator iterator2 = mlSubstitutes.iterator(); iterator2.hasNext();){
                    //Modified by DSM(Sogeti) for Code Optimization Start
                    mapSubstituteObject = (Map) iterator2.next();
                    Change=(String)mapSubstituteObject.get("Chg");
                    SCN=(String)mapSubstituteObject.get("SCN");
                    Qty=(String)mapSubstituteObject.get("Quantity");
                    //Added by DSM 2015x.1 (Sogeti) for defect #6808 - Starts
                    strpgQuantity=(String)mapSubstituteObject.get("Target");
                    //Added by DSM 2015x.1 (Sogeti) for defect #6808 - Ends
                    uom=(String)mapSubstituteObject.get("UoM");
                    COSAnalysis=(String)mapSubstituteObject.get("COSAnalysis");
                    ValidUntil=(String)mapSubstituteObject.get("ValidUntil");
                    ValidUntil=pgIPMPDFViewUtil_mxJPO.getFormattedDate(ValidUntil);
                    comment=(String)mapSubstituteObject.get("Comment");
                    //Added by DSM(Sogeti)-2015x.5 for PDF Views (Defect ID-16705) - Starts
                    if(UIUtil.isNullOrEmpty(comment)){
                        comment = DomainConstants.EMPTY_STRING;
                    }
                    //Added by DSM(Sogeti)-2015x.5 for PDF Views (Defect ID-16705) - Ends
                    // Added by P&G V2/V3 team for Defect 5947 to handle special character  < > preventing PDF generation Start
                    comment = comment.replaceAll("[<]","#LESS_THAN");
                    comment = comment.replaceAll("[>]","#GREATER_THAN");
                    // Added by P&G V2/V3 team for Defect 5947 to handle special character  < > preventing PDF generation End
                    //Commented by DSM(Sogeti)-2015x.2 for (Defect#8461) - Starts
                    //strFinishedProductCode=(String)mapSubstituteObject.get("FinishedProductCode");
                    //Commented by DSM(Sogeti)-2015x.2 for (Defect#8461) - Ends
                    Min=(String)mapSubstituteObject.get("Min");
                    Max=(String)mapSubstituteObject.get("Max");
                    Target=(String)mapSubstituteObject.get("Target");
                    PositionIndicator=(String)mapSubstituteObject.get("PositionIndicator");
                    MaterialFunction=(String)mapSubstituteObject.get("MaterialFunction");
                    if (MaterialFunction == null || MaterialFunction.equals("null")) {
                        MaterialFunction = DomainConstants.EMPTY_STRING;
                    }
                    Type=(String)mapSubstituteObject.get("Type");
                    SAPDescription=(String)mapSubstituteObject.get("SAPDesc");
                    //Added by DSM(Sogeti)-2015x.5 for PDF Views (Defect ID-16705) - Starts
                    if(UIUtil.isNullOrEmpty(SAPDescription)){
                        SAPDescription = DomainConstants.EMPTY_STRING;
                    }
                    //Added by DSM(Sogeti)-2015x.5 for PDF Views (Defect ID-16705) - Ends
                    // Added by P&G V2/V3 team for Defect 5947 to handle special character  < > preventing PDF generation Start
                    SAPDescription = SAPDescription.replaceAll("[<]","#LESS_THAN");
                    SAPDescription = SAPDescription.replaceAll("[>]","#GREATER_THAN");
                    // Added by P&G V2/V3 team for Defect 5947 to handle special character  < > preventing PDF generation End
                    SubType=(String)mapSubstituteObject.get("SS");
                    pgAssemblyType=(String)mapSubstituteObject.get("pgAssemblyType");
                    name=(String)mapSubstituteObject.get("name");
                    specMap = new HashMap();
                    specMap.put(DomainConstants.SELECT_TYPE, Type);
                    specMap.put("pgAssemblyType", pgAssemblyType);
                    specMap.put("pgCSSType", SubType);
                    //display spec subtype
                    strSpecSubType = getSpecificationSubType(context,specMap);
                    //Modified by DSM(Sogeti) for Code Optimization End
                    //display type
                    Type=(String)getTypeDisplayName(context,Type);
                    if("NGCAS".equalsIgnoreCase(Type)){
                        name="Non-GCAS";
                    }
                    BOMSubstituteSAPBuffer.append("<TR>");
                    BOMSubstituteSAPBuffer.append("<TD width=\"50\">"+validateString1(Change)+"</TD>");
                    BOMSubstituteSAPBuffer.append("<TD width=\"80\">"+SCN+"</TD>");
                    BOMSubstituteSAPBuffer.append("<TD width=\"80\">"+name+"</TD>");
                    BOMSubstituteSAPBuffer.append("<TD width=\"180\">"+SAPDescription+"</TD>");
                    BOMSubstituteSAPBuffer.append("<TD width=\"100\">T:"+Type+"<BR/>SS:"+strSpecSubType+"</TD>");
                    //Modified by DSM 2015x.1 (Sogeti) for defect #5534 - Starts
                    //Commented by DSM(Sogeti)-2015x.2 for (Defect#8461) - Starts
					/*if(pgV3Constants.TYPE_PGMASTERFINISHEDPRODUCT.equalsIgnoreCase(strSpecType)){
						BOMSubstituteSAPBuffer.append("<TD>"+strFinishedProductCode+"</TD>");
					}*/
                    //Commented by DSM(Sogeti)-2015x.2 for (Defect#8461) - Ends
                    if(!(pgV3Constants.TYPE_PGFINISHEDPRODUCT.equals(strSpecType) || pgV3Constants.TYPE_PGMASTERFINISHEDPRODUCT.equals(strSpecType) || pgV3Constants.TYPE_PGPACKINGSUBASSEMBLY.equals(strSpecType))){
                        BOMSubstituteSAPBuffer.append("<TD width=\"50\">"+Min+"</TD>");
                        BOMSubstituteSAPBuffer.append("<TD width=\"50\">"+Target+"</TD>");
                        BOMSubstituteSAPBuffer.append("<TD width=\"50\">"+Max+"</TD>");
                        BOMSubstituteSAPBuffer.append("<TD width=\"80\">"+uom+"</TD>");
                        BOMSubstituteSAPBuffer.append("<TD valign=\"top\" width=\"90\">MF:"+MaterialFunction+"<BR/>PI:"+PositionIndicator+"</TD>");
                        BOMSubstituteSAPBuffer.append("<TD width=\"60\">"+ValidUntil+"</TD>");
                        BOMSubstituteSAPBuffer.append("<TD width=\"180\">"+comment+"</TD>");
                    }
                    if(pgV3Constants.TYPE_PGPACKINGSUBASSEMBLY.equals(strSpecType) || pgV3Constants.TYPE_PGFINISHEDPRODUCT.equalsIgnoreCase(strSpecType) || pgV3Constants.TYPE_PGMASTERFINISHEDPRODUCT.equalsIgnoreCase(strSpecType)){
                        //Added by DSM 2015x.1 (Sogeti) for defect #6808 - Starts
                        if(UIUtil.isNullOrEmpty(strpgQuantity)){
                            BOMSubstituteSAPBuffer.append("<TD width=\"80\">"+Qty+"</TD>");
                        }else{
                            BOMSubstituteSAPBuffer.append("<TD width=\"80\">"+strpgQuantity+"</TD>");
                        }
                        //Added by DSM 2015x.1 (Sogeti) for defect #6808 - Ends
                        BOMSubstituteSAPBuffer.append("<TD width=\"80\">"+uom+"</TD>");
                        //Added by DSM 2015x.1 (Sogeti) for defect #5534 - Starts
                        //Commented by DSM(Sogeti)-2015x.2 for (Defect#10004) on 06Feb2017 - Starts
						/*
						if(pgV3Constants.TYPE_PGMASTERFINISHEDPRODUCT.equalsIgnoreCase(strSpecType)){
							BOMSubstituteSAPBuffer.append("<TD>"+changeTrueToYes(COSAnalysis)+"</TD>");
						}
						*/
                        //Commented by DSM(Sogeti)-2015x.2 for (Defect#10004) on 06Feb2017 - Ends
                        //Added by DSM 2015x.1 (Sogeti) for defect #5534 - Ends
                        BOMSubstituteSAPBuffer.append("<TD width=\"60\">"+ValidUntil+"</TD>");
                        BOMSubstituteSAPBuffer.append("<TD width=\"180\">"+comment+"</TD>");
                    }
                    BOMSubstituteSAPBuffer.append("</TR>");
                }
                BOMSubstituteSAPBuffer.append("</TABLE></TD></TR>");
            }
        }
        return BOMSubstituteSAPBuffer;
    }
    /** Gets the Consumer Design Basis  values.
     * @param strObjectID
     * @param pdfViewType
     * @param strTableType
     * @author V2 */
    private StringBuilder getQualityParametersTableHTML(Context context, String strObjectID,String pdfViewType,String strTableType) throws Exception{
        long startTime = new Date().getTime();
        StringBuilder QualityParametersTableBuffer=new StringBuilder();
        try {
            //Modified by DSM(Sogeti) for Code Optimization Start
            String typePattern =DomainConstants.EMPTY_STRING;
            String strChange = DomainConstants.EMPTY_STRING;
            String strArea = DomainConstants.EMPTY_STRING;
            String strCharacteristic = DomainConstants.EMPTY_STRING;
            String strCharacteristicSpecifics = DomainConstants.EMPTY_STRING;
            String strComment = DomainConstants.EMPTY_STRING;
            String strConsumerCommentLanguage = DomainConstants.EMPTY_STRING;
            String strConsumerNeed = DomainConstants.EMPTY_STRING;
            String strDesignImpact = DomainConstants.EMPTY_STRING;
            String strParameterType = DomainConstants.EMPTY_STRING;
            Map mapQualityCharacteristic = new HashMap();
            //Modified by DSM(Sogeti) for Code Optimization End
            //Modify Code Refactoring
            if("pgProductQualityParametersTable".equalsIgnoreCase(strTableType)){
//				typePattern="pgProductQualityCharacteristic";
                typePattern=pgV3Constants.TYPE_PGPRODUCTQUALITYCHARACTERISTIC;
            }else if("pgPackageQualityParametersTable".equalsIgnoreCase(strTableType)){
//				typePattern="pgPackageQualityCharacteristic";
                typePattern=pgV3Constants.TYPE_PGPACKAGEQUALITYCHARACTERISTIC;
            }
            MapList relatedObjectList= pgGetConsumerDesignBasisCharDataForPDF(context,strObjectID,typePattern);
            if(null != relatedObjectList && relatedObjectList.size() > 0){
                if("pgProductQualityParametersTable".equalsIgnoreCase(strTableType)){
                    QualityParametersTableBuffer.append("<TR><TD class=\"new\"><TABLE cellspacing=\"0\" style=\"line-height: 16px;\" id=\"BOM\">");
                    QualityParametersTableBuffer.append("<TR><TD class=\"new\"><B>PRODUCT QUALITY PARAMETERS</B></TD></TR></TABLE></TD></TR>");
                }else if("pgPackageQualityParametersTable".equalsIgnoreCase(strTableType)){
                    QualityParametersTableBuffer.append("<TR><TD class=\"new\"><TABLE cellspacing=\"0\" style=\"line-height: 16px;\" id=\"BOM\">");
                    QualityParametersTableBuffer.append("<TR><TD class=\"new\"><B>PACKAGE QUALITY PARAMETERS</B></TD></TR></TABLE></TD></TR>");
                }
                QualityParametersTableBuffer.append("<TR><TD><TABLE class=\"pdf\" cellspacing=\"0\" width=\"1000px\" id=\"pgFinishedProductTable\">");
                QualityParametersTableBuffer.append("<thead><TR>");
                QualityParametersTableBuffer.append("<TD align=\"center\" >Chg.</TD>");
                QualityParametersTableBuffer.append("<TD align=\"center\" >Consumer Need</TD>");
                QualityParametersTableBuffer.append("<TD align=\"center\" >Characteristic</TD>");
                QualityParametersTableBuffer.append("<TD align=\"center\" >Characteristic Specifics</TD>");
                QualityParametersTableBuffer.append("<TD align=\"center\" >Design Impact</TD>");
                QualityParametersTableBuffer.append("<TD align=\"center\" >Consumer Comment Language</TD>");
                QualityParametersTableBuffer.append("<TD align=\"center\" >Parameter Type</TD>");
                QualityParametersTableBuffer.append("<TD align=\"center\" >Area</TD>");
                QualityParametersTableBuffer.append("<TD align=\"center\">Comments</TD>");
                QualityParametersTableBuffer.append("</TR></thead>");
                for (Iterator iterator = relatedObjectList.iterator(); iterator.hasNext();){
                    //Modified by DSM(Sogeti) for Code Optimization Start
                    mapQualityCharacteristic = (Map) iterator.next();
                    strChange = (String)mapQualityCharacteristic.get(pgV3Constants.SELECT_ATTRIBUTE_PGCHANGE);
                    strArea = (String)mapQualityCharacteristic.get(pgV3Constants.SELECT_ATTRIBUTE_PGAREA);
                    strCharacteristic = (String)mapQualityCharacteristic.get(pgV3Constants.SELECT_ATTRIBUTE_PGCHARACTERISTIC);
                    strCharacteristicSpecifics = (String)mapQualityCharacteristic.get(pgV3Constants.SELECT_ATTRIBUTE_PGCHARACTERISTICSPECIFICS);
                    strComment = (String)mapQualityCharacteristic.get(pgV3Constants.SELECT_ATTRIBUTE_COMMENT);
                    strConsumerCommentLanguage = (String)mapQualityCharacteristic.get(pgV3Constants.SELECT_ATTRIBUTE_PGCONSUMERCOMMENTLANGUAGE);
                    strConsumerNeed = (String)mapQualityCharacteristic.get(pgV3Constants.SELECT_ATTRIBUTE_PGCONSUMERNEED);
                    strDesignImpact = (String)mapQualityCharacteristic.get(pgV3Constants.SELECT_ATTRIBUTE_PGDESIGNIMPACT);
                    strParameterType = (String)mapQualityCharacteristic.get(pgV3Constants.SELECT_ATTRIBUTE_PGPARAMETERTYPE);
                    //Added by DSM(Sogeti)-2015x.5 for PDF Views (Defect ID-16705) - Starts
                    if(UIUtil.isNullOrEmpty(strChange)){
                        strChange = DomainConstants.EMPTY_STRING;
                    }
                    if(UIUtil.isNullOrEmpty(strArea)){
                        strArea = DomainConstants.EMPTY_STRING;
                    }
                    if(UIUtil.isNullOrEmpty(strCharacteristic)){
                        strCharacteristic = DomainConstants.EMPTY_STRING;
                    }
                    if(UIUtil.isNullOrEmpty(strCharacteristicSpecifics)){
                        strCharacteristicSpecifics = DomainConstants.EMPTY_STRING;
                    }
                    if(UIUtil.isNullOrEmpty(strComment)){
                        strComment = DomainConstants.EMPTY_STRING;
                    }
                    if(UIUtil.isNullOrEmpty(strConsumerCommentLanguage)){
                        strConsumerCommentLanguage = DomainConstants.EMPTY_STRING;
                    }
                    if(UIUtil.isNullOrEmpty(strConsumerNeed)){
                        strConsumerNeed = DomainConstants.EMPTY_STRING;
                    }
                    if(UIUtil.isNullOrEmpty(strDesignImpact)){
                        strDesignImpact = DomainConstants.EMPTY_STRING;
                    }
                    if(UIUtil.isNullOrEmpty(strParameterType)){
                        strParameterType = DomainConstants.EMPTY_STRING;
                    }
                    //Added by DSM(Sogeti)-2015x.5 for PDF Views (Defect ID-16705) - Ends
                    //Modified by DSM(Sogeti) for Code Optimization End
                    strChange =strChange.replaceAll("[<]","#LESS_THAN");
                    strChange =strChange.replaceAll("[>]","#GREATER_THAN");
                    strArea =strArea.replaceAll("[<]","#LESS_THAN");
                    strArea =strArea.replaceAll("[>]","#GREATER_THAN");
                    strCharacteristic =strCharacteristic.replaceAll("[<]","#LESS_THAN");
                    strCharacteristic =strCharacteristic.replaceAll("[>]","#GREATER_THAN");
                    strCharacteristicSpecifics =strCharacteristicSpecifics.replaceAll("[<]","#LESS_THAN");
                    strCharacteristicSpecifics =strCharacteristicSpecifics.replaceAll("[>]","#GREATER_THAN");
                    strComment =strComment.replaceAll("[<]","#LESS_THAN");
                    strComment =strComment.replaceAll("[>]","#GREATER_THAN");
                    strConsumerCommentLanguage =strConsumerCommentLanguage.replaceAll("[<]","#LESS_THAN");
                    strConsumerCommentLanguage =strConsumerCommentLanguage.replaceAll("[>]","#GREATER_THAN");
                    strConsumerNeed =strConsumerNeed.replaceAll("[<]","#LESS_THAN");
                    strConsumerNeed =strConsumerNeed.replaceAll("[>]","#GREATER_THAN");
                    strDesignImpact =strDesignImpact.replaceAll("[<]","#LESS_THAN");
                    strDesignImpact =strDesignImpact.replaceAll("[>]","#GREATER_THAN");
                    strParameterType =strParameterType.replaceAll("[<]","#LESS_THAN");
                    strParameterType =strParameterType.replaceAll("[>]","#GREATER_THAN");

                    QualityParametersTableBuffer.append("<TR>");
                    QualityParametersTableBuffer.append("<TD>"+strChange+"</TD>");
                    QualityParametersTableBuffer.append("<TD>"+strConsumerNeed+"</TD>");
                    QualityParametersTableBuffer.append("<TD>"+strCharacteristic+"</TD>");
                    QualityParametersTableBuffer.append("<TD>"+strCharacteristicSpecifics+"</TD>");
                    QualityParametersTableBuffer.append("<TD>"+strDesignImpact+"</TD>");
                    QualityParametersTableBuffer.append("<TD>"+strConsumerCommentLanguage+"</TD>");
                    QualityParametersTableBuffer.append("<TD>"+strParameterType+"</TD>");
                    QualityParametersTableBuffer.append("<TD>"+strArea+"</TD>");
                    QualityParametersTableBuffer.append("<TD>"+strComment+"</TD>");
                    QualityParametersTableBuffer.append("</TR>");
                }
                QualityParametersTableBuffer.append("</TABLE></TD></TR>");
            }
            //Modify Code Refactoring
            relatedObjectList.clear();
        }catch(Exception e)
        {
            e.printStackTrace();
        }
        long endTime = new Date().getTime();
        System.out.println("Total Time has taken by the  getQualityParametersTableHTML Method is-->"+(endTime-startTime));
        return QualityParametersTableBuffer;
    }
    /** Gets the Consumer Design Basis  values.
     * @param strObjectID
     * @param typePattern
     * @author V2 */
    public MapList pgGetConsumerDesignBasisCharDataForPDF(Context context, String strObjectID,String typePattern) throws Exception{
        MapList objList = new MapList();
        try{
            StringList objectSelects = new StringList(10);
            objectSelects.add(DomainConstants.SELECT_ID);
            objectSelects.add(pgV3Constants.SELECT_ATTRIBUTE_PGCHANGE);
            objectSelects.add(pgV3Constants.SELECT_ATTRIBUTE_PGAREA);
            objectSelects.add(pgV3Constants.SELECT_ATTRIBUTE_PGCHARACTERISTIC);
            objectSelects.add(pgV3Constants.SELECT_ATTRIBUTE_PGCHARACTERISTICSPECIFICS);
            objectSelects.add(pgV3Constants.SELECT_ATTRIBUTE_COMMENT);
            objectSelects.add(pgV3Constants.SELECT_ATTRIBUTE_PGCONSUMERCOMMENTLANGUAGE);
            objectSelects.add(pgV3Constants.SELECT_ATTRIBUTE_PGCONSUMERNEED);
            objectSelects.add(pgV3Constants.SELECT_ATTRIBUTE_PGDESIGNIMPACT);
            objectSelects.add(pgV3Constants.SELECT_ATTRIBUTE_PGPARAMETERTYPE);
            StringList relSelects = new StringList(2);
            relSelects.add(DomainObject.SELECT_RELATIONSHIP_ID);
            relSelects.add(pgV3Constants.SELECT_ATTRIBUTE_SHAREDTABLECHARACTERISTICSEQUENCE);
            DomainObject doObj = DomainObject.newInstance(context, strObjectID);
            objList = doObj.getRelatedObjects(context, CPNCommonConstants.RELATIONSHIP_CHARACTERISTIC, typePattern, objectSelects, relSelects, true, true, (short)2, null, null, 0);
            if(null != objList && objList.size()>0){
                objList.sort(pgV3Constants.SELECT_ATTRIBUTE_SHAREDTABLECHARACTERISTICSEQUENCE, "ascending", "integer");
            }
        }catch(Exception e){
            e.printStackTrace();
        }
        return objList;
    }
    /**
     * Retrieve Is ATS information
     * @param context
     * @param args
     * @param strObjectId
     * @param strPDFViewType
     * @param strUser
     * @return
     * @throws MatrixException
     */
    private  StringBuilder getIsATSData(Context context,String[] args,String strObjectId,String strPDFViewType,String strUser) throws MatrixException{
        long startTime = new Date().getTime();
        StringBuilder objectIsATSBuffer= new StringBuilder();
        Map<String,String> m1ATSMap = null;
        Map<String,String> m1ATSMapMaster = null;
        MapList mlATSMaster = null;
        Map ATSPack=new HashMap();
        //Modified by DSM(Sogeti) for Code Optimization
        String MasterId =DomainConstants.EMPTY_STRING;
        int nIsATSMasterSize =0;
        int nCount=0;
        try {
            if(null != strObjectId && !"".equals(strObjectId)){
                //pgIPMV3Reports_mxJPO pgIPMV3Reports = new pgIPMV3Reports_mxJPO();
                //MapList mlATS=pgIPMV3Reports.getDataForATS(context, args);
                //Added for PDF Refactor
                MapList mlATS= (MapList)pgPDFViewHelper.executeMainClassMethod(context, "pgIPMV3Reports", "getDataForATS",args);
                if(pgPDFViewConstants.CONST_COMBINEDWITHMASTER.equals(strPDFViewType)){
                    DomainObject ObjDom = DomainObject.newInstance(context,strObjectId);
                    StringList paramLists = ObjDom.getInfoList(context,"from["+pgV3Constants.RELATIONSHIP_PGMASTER+"].to.last.id");
                    if(paramLists.size()>0){
                        MasterId = (String)paramLists.get(0);
                        //Added by DSM(Sogeti)-2015x.4 for PDF Views (Defect ID-13913) -Starts
                        if(UIUtil.isNotNullAndNotEmpty(MasterId))
                        {
                            //Modified by DSM(Sogeti)-2015x.4 for PDF views For defect 14101 - Starts
                            String []arry = pgIPMPDFViewUtil_mxJPO.getLatestRelease(context,MasterId);
                            if(null !=arry && arry.length>1){
                                MasterId  =  arry[0];
                            }
                            //Modified by DSM(Sogeti)-2015x.4 for PDF views For defect 14101 - Ends
                            DomainObject MasterObject = DomainObject.newInstance(context,MasterId);
                            boolean isAccess = MasterObject.checkAccess(context, (short)0);
                            if(isAccess)
                            {
                                ATSPack.put("objectId", MasterId);
                                ATSPack.put("table","pgIPMIRMSIsATS");
                                String[] args1 = JPO.packArgs(ATSPack);
                                //pgIPMV3Reports_mxJPO pgIPMV3Report = new pgIPMV3Reports_mxJPO();
                                //mlATSMaster=pgIPMV3Report.getDataForATS(context, args1);
                                //Added for PDF Refactor
                                mlATSMaster= (MapList)pgPDFViewHelper.executeMainClassMethod(context, "pgIPMV3Reports", "getDataForATS",args1);
                            }
                        }
                        //Added by DSM(Sogeti)-2015x.4 for PDF Views (Defect ID-13913) -Ends

                    }
                }
                int nIsATSSize=mlATS.size();
                nCount=nIsATSSize;
                if(pgPDFViewConstants.CONST_COMBINEDWITHMASTER.equals(strPDFViewType)){
                    if(mlATSMaster != null && !mlATSMaster.isEmpty()){
                        nIsATSMasterSize=mlATSMaster.size();
                    }
                    if(nIsATSSize<nIsATSMasterSize)
                        nCount=nIsATSMasterSize;
                }
                if(nCount>0){
                    objectIsATSBuffer.append("<TR><TD><TABLE width=\"1014px\" cellspacing=\"0\" class=\"pdf\" style=\"line-height: 16px;\" id=\"IsATSTable\">");
                    objectIsATSBuffer.append("<thead>");
                    if(pgPDFViewConstants.CONST_COMBINEDWITHMASTER.equals(strPDFViewType)){
                        objectIsATSBuffer.append("<TR><TD colspan='3' align=\"left\">Is ATS For</TD>");
                        objectIsATSBuffer.append("<TD colspan='3' align=\"left\">Is ATS For</TD>");
                        objectIsATSBuffer.append("</TR>");
                    }else{
                        objectIsATSBuffer.append("<TR><TD colspan='3' align=\"left\">Is ATS For</TD>");
                        objectIsATSBuffer.append("</TR>");
                    }
                    objectIsATSBuffer.append("<TR>");
                    if(pgPDFViewConstants.CONST_COMBINEDWITHMASTER.equals(strPDFViewType)){
                        objectIsATSBuffer.append("<TD align=\"left\">Name</TD>");
                        objectIsATSBuffer.append("<TD align=\"left\">SAP Description</TD>");
                        objectIsATSBuffer.append("<TD align=\"left\">State</TD>");
                    }
                    objectIsATSBuffer.append("<TD align=\"left\">Name</TD>");
                    objectIsATSBuffer.append("<TD align=\"left\">SAP Description</TD>");
                    objectIsATSBuffer.append("<TD align=\"left\">State</TD>");
                    objectIsATSBuffer.append("</TR>");
                    objectIsATSBuffer.append("</thead>");
                    objectIsATSBuffer.append("<tbody>");
                    //Modified by DSM(Sogeti) for Code Optimization Start
                    String strMasterSapDesc=DomainConstants.EMPTY_STRING;
                    String strSapDesc=DomainConstants.EMPTY_STRING;
                    //Modified by DSM(Sogeti) for Code Optimization End
                    if(pgPDFViewConstants.CONST_COMBINEDWITHMASTER.equals(strPDFViewType)){
                        for (int nnCount=0; nnCount<nCount;nnCount++ ){
                            objectIsATSBuffer.append("<TR>");
                            if(nnCount<nIsATSSize){
                                m1ATSMap = (Map)mlATS.get(nnCount);
                                objectIsATSBuffer.append("<TD width=\"120px\">"+m1ATSMap.get(DomainConstants.SELECT_NAME)+"."+m1ATSMap.get(DomainConstants.SELECT_REVISION)+"</TD>");
                                //Modified by DSM(Sogeti) for Code Optimization
                                strSapDesc = DomainConstants.EMPTY_STRING;;
                                strSapDesc =(String)m1ATSMap.get(pgV3Constants.SELECT_ATTRIBUTE_TITLE);
                                //Added by DSM(Sogeti)-2015x.5 for PDF Views (Defect ID-16705) - Starts
                                if(UIUtil.isNullOrEmpty(strSapDesc)){
                                    strSapDesc = DomainConstants.EMPTY_STRING;
                                }
                                //Added by DSM(Sogeti)-2015x.5 for PDF Views (Defect ID-16705) - Ends
                                strSapDesc =strSapDesc.replaceAll("[<]","#LESS_THAN");
                                strSapDesc =strSapDesc.replaceAll("[>]","#GREATER_THAN");
                                objectIsATSBuffer.append("<TD width=\"260px\">"+strSapDesc+"</TD>");
                                objectIsATSBuffer.append("<TD width=\"125px\">"+m1ATSMap.get(DomainConstants.SELECT_CURRENT)+"</TD>");
                            }else{
                                objectIsATSBuffer.append("<TD width=\"120px\"></TD>");
                                objectIsATSBuffer.append("<TD width=\"260px\"></TD>");
                                objectIsATSBuffer.append("<TD width=\"125px\"></TD>");
                            }
                            if(nnCount<nIsATSMasterSize){
                                m1ATSMapMaster = (Map)mlATSMaster.get(nnCount);
                                objectIsATSBuffer.append("<TD width=\"120px\">"+m1ATSMapMaster.get(DomainConstants.SELECT_NAME)+"."+m1ATSMapMaster.get(DomainConstants.SELECT_REVISION)+"</TD>");
                                //Modified by DSM(Sogeti) for Code Optimization Start
                                strMasterSapDesc = DomainConstants.EMPTY_STRING;;
                                strMasterSapDesc = (String)m1ATSMapMaster.get(pgV3Constants.SELECT_ATTRIBUTE_TITLE);
                                //Added by DSM(Sogeti)-2015x.5 for PDF Views (Defect ID-16705) - Starts
                                if(UIUtil.isNullOrEmpty(strMasterSapDesc)){
                                    strMasterSapDesc = DomainConstants.EMPTY_STRING;
                                }
                                //Added by DSM(Sogeti)-2015x.5 for PDF Views (Defect ID-16705) - Ends
                                strMasterSapDesc =strMasterSapDesc.replaceAll("[<]","#LESS_THAN");
                                strMasterSapDesc =strMasterSapDesc.replaceAll("[>]","#GREATER_THAN");
                                objectIsATSBuffer.append("<TD width=\"260px\">"+strMasterSapDesc+"</TD>");
                                objectIsATSBuffer.append("<TD width=\"129px\">"+m1ATSMapMaster.get(DomainConstants.SELECT_CURRENT)+"</TD>");
                            }else{
                                objectIsATSBuffer.append("<TD width=\"120px\"></TD>");
                                objectIsATSBuffer.append("<TD width=\"260px\"></TD>");
                                objectIsATSBuffer.append("<TD width=\"129px\"></TD>");
                            }
                            objectIsATSBuffer.append("</TR>");
                        }
                    }
                    else{
                        for (Iterator iterator = mlATS.iterator(); iterator.hasNext();){
                            m1ATSMap = (Map) iterator.next();
                            objectIsATSBuffer.append("<TR>");
                            objectIsATSBuffer.append("<TD width=\"120px\">"+m1ATSMap.get(DomainConstants.SELECT_NAME)+"."+m1ATSMap.get(DomainConstants.SELECT_REVISION)+"</TD>");
                            //Modified by DSM(Sogeti) for Code Optimization End
                            strSapDesc = DomainConstants.EMPTY_STRING;;
                            strSapDesc=(String)m1ATSMap.get(pgV3Constants.SELECT_ATTRIBUTE_TITLE);
                            //Added by DSM(Sogeti)-2015x.5 for PDF Views (Defect ID-16705) - Starts
                            if(UIUtil.isNullOrEmpty(strSapDesc)){
                                strSapDesc = DomainConstants.EMPTY_STRING;
                            }
                            //Added by DSM(Sogeti)-2015x.5 for PDF Views (Defect ID-16705) - Ends
                            strSapDesc =strSapDesc.replaceAll("[<]","#LESS_THAN");
                            strSapDesc =strSapDesc.replaceAll("[>]","#GREATER_THAN");
                            objectIsATSBuffer.append("<TD width=\"600px\">"+strSapDesc+"</TD>");
                            objectIsATSBuffer.append("<TD width=\"109px\">"+m1ATSMap.get(DomainConstants.SELECT_CURRENT)+"</TD>");
                            objectIsATSBuffer.append("</TR>");
                        }
                    }
                    objectIsATSBuffer.append("</tbody>");
                    objectIsATSBuffer.append("</TABLE></TD></TR>");
                    objectIsATSBuffer.append("<TR><TD><br /></TD></TR>");
                }
                //Modify Code Refactoring
                mlATS.clear();
            }
        }catch (Exception e)
        {
            throw new MatrixException(e);
        }
        long endTime = new Date().getTime();
        System.out.println("Total Time has taken by the  getIsATSData Method is-->"+(endTime-startTime));
        return objectIsATSBuffer;
    }
    /**
     * Retrieve Has ATS information
     * @param context
     * @param args
     * @param strObjectId
     * @param strPDFViewType
     * @param strUser
     * @return
     * @throws MatrixException
     */
    private  StringBuilder getHasATSData(Context context,String[] args,String strObjectId,String strPDFViewType,String strUser) throws MatrixException{
        long startTime = new Date().getTime();
        StringBuilder objectHasATSBuffer= new StringBuilder();
        Map<String,String> m1ATSMap = null;
        Map<String,String> m1ATSMapMaster = null;
        MapList mlATSMaster = null;
        Map ATSPack=new HashMap();
        //Modified by DSM(Sogeti) for Code Optimization
        String MasterId = DomainConstants.EMPTY_STRING;;
        int nIsATSMasterSize =0;
        int nCount=0;
        try{
            if(null != strObjectId && !"".equals(strObjectId)){
//				pgIPMV3Reports_mxJPO pgIPMV3Reports = new pgIPMV3Reports_mxJPO();
//				MapList mlATS = pgIPMV3Reports.getDataForATS(context, args);
//Added for PDF Refactor
                MapList mlATS = (MapList)pgPDFViewHelper.executeMainClassMethod(context, "pgIPMV3Reports", "getDataForATS",args);
                if(pgPDFViewConstants.CONST_COMBINEDWITHMASTER.equals(strPDFViewType)){
                    DomainObject ObjDom = DomainObject.newInstance(context,strObjectId);
                    StringList paramLists = ObjDom.getInfoList(context,"from["+pgV3Constants.RELATIONSHIP_PGMASTER+"].to.last.id");
                    if(paramLists.size()>0){
                        MasterId = (String)paramLists.get(0);
                        //Added by DSM(Sogeti)-2015x.4 for PDF Views (Defect ID-13913) -Starts
                        if(UIUtil.isNotNullAndNotEmpty(MasterId))
                        {
                            //Modified by DSM(Sogeti)-2015x.4 for PDF views For defect 14101 - Starts
                            String []arry = pgIPMPDFViewUtil_mxJPO.getLatestRelease(context,MasterId);
                            if(null !=arry && arry.length>1){
                                MasterId  =  arry[0];
                            }
                            //Modified by DSM(Sogeti)-2015x.4 for PDF views For defect 14101 - Ends
                            DomainObject MasterObject = DomainObject.newInstance(context,MasterId);
                            boolean isAccess = MasterObject.checkAccess(context, (short)0);
                            if(isAccess)
                            {
                                ATSPack.put("objectId", MasterId);
                                ATSPack.put("table","pgIPMIRMSHasATS");
                                String[] args1 = JPO.packArgs(ATSPack);
//					pgIPMV3Reports_mxJPO pgIPMV3Report = new pgIPMV3Reports_mxJPO();
//					mlATSMaster=pgIPMV3Report.getDataForATS(context, args1);
                                //Added for PDF Refactor
                                mlATSMaster=(MapList)pgPDFViewHelper.executeMainClassMethod(context, "pgIPMV3Reports", "getDataForATS",args1);
                            }
                        }
                        //Added by DSM(Sogeti)-2015x.4 for PDF Views (Defect ID-13913) -Ends
                    }
                }
                int nIsATSSize = mlATS.size();
                nCount=nIsATSSize;
                String strMasterSapDesc="";
                String strSapDesc="";
                if(pgPDFViewConstants.CONST_COMBINEDWITHMASTER.equals(strPDFViewType)){
                    if(mlATSMaster != null && !mlATSMaster.isEmpty())
                    {
                        nIsATSMasterSize=mlATSMaster.size();
                    }
                    if(nIsATSSize<nIsATSMasterSize)
                        nCount=nIsATSMasterSize;
                }
                if(nCount>0){
                    objectHasATSBuffer.append("<TR><TD><TABLE width=\"1000px\" cellspacing=\"0\" class=\"pdf\" style=\"line-height: 16px;\" id=\"HasATSTable\">");
                    objectHasATSBuffer.append("<thead>");
                    if(pgPDFViewConstants.CONST_COMBINEDWITHMASTER.equals(strPDFViewType)){
                        objectHasATSBuffer.append("<TR><TD colspan='3' align=\"left\">Has ATS (R):</TD>");
                        objectHasATSBuffer.append("<TD colspan='3' align=\"left\">Has ATS (R):</TD>");
                        objectHasATSBuffer.append("</TR>");
                    }else{
                        objectHasATSBuffer.append("<TR><TD colspan='3' align=\"left\">Has ATS (R):</TD>");
                        objectHasATSBuffer.append("</TR>");
                    }
                    objectHasATSBuffer.append("<TR>");
                    if(pgPDFViewConstants.CONST_COMBINEDWITHMASTER.equals(strPDFViewType)){
                        objectHasATSBuffer.append("<TD align=\"left\">Name</TD>");
                        objectHasATSBuffer.append("<TD align=\"left\">SAP Description</TD>");
                        objectHasATSBuffer.append("<TD align=\"left\">State</TD>");
                    }
                    objectHasATSBuffer.append("<TD align=\"left\">Name</TD>");
                    objectHasATSBuffer.append("<TD align=\"left\">SAP Description</TD>");
                    objectHasATSBuffer.append("<TD align=\"left\">State</TD>");
                    objectHasATSBuffer.append("</TR>");
                    objectHasATSBuffer.append("</thead>");
                    objectHasATSBuffer.append("<tbody>");
                    if(pgPDFViewConstants.CONST_COMBINEDWITHMASTER.equals(strPDFViewType)){
                        for(int nnCount=0; nnCount<nCount;nnCount++ ){
                            objectHasATSBuffer.append("<TR>");
                            if(nnCount<nIsATSSize){
                                m1ATSMap = (Map)mlATS.get(nnCount);
                                objectHasATSBuffer.append("<TD width=\"120px\">"+m1ATSMap.get(DomainConstants.SELECT_NAME)+"."+m1ATSMap.get(DomainConstants.SELECT_REVISION)+"</TD>");
                                //Modified by DSM(Sogeti) for Code Optimization
                                strSapDesc = DomainConstants.EMPTY_STRING;;
                                strSapDesc=(String)m1ATSMap.get(pgV3Constants.SELECT_ATTRIBUTE_TITLE);
                                //Added by DSM(Sogeti)-2015x.5 for PDF Views (Defect ID-16705) - Starts
                                if(UIUtil.isNullOrEmpty(strSapDesc)){
                                    strSapDesc = DomainConstants.EMPTY_STRING;
                                }
                                //Added by DSM(Sogeti)-2015x.5 for PDF Views (Defect ID-16705) - Ends
                                strSapDesc =strSapDesc.replaceAll("[<]","#LESS_THAN");
                                strSapDesc =strSapDesc.replaceAll("[>]","#GREATER_THAN");
                                objectHasATSBuffer.append("<TD width=\"260px\">"+strSapDesc+"</TD>");
                                objectHasATSBuffer.append("<TD width=\"125px\">"+m1ATSMap.get(DomainConstants.SELECT_CURRENT)+"</TD>");
                            }else{
                                objectHasATSBuffer.append("<TD width=\"120px\"></TD>");
                                objectHasATSBuffer.append("<TD width=\"260px\"></TD>");
                                objectHasATSBuffer.append("<TD width=\"125px\"></TD>");
                            }
                            if(nnCount<nIsATSMasterSize){
                                m1ATSMapMaster = (Map)mlATSMaster.get(nnCount);
                                objectHasATSBuffer.append("<TD width=\"120px\">"+m1ATSMapMaster.get(DomainConstants.SELECT_NAME)+"."+m1ATSMapMaster.get(DomainConstants.SELECT_REVISION)+"</TD>");
                                //Modified by DSM(Sogeti) for Code Optimization
                                strMasterSapDesc=DomainConstants.EMPTY_STRING;
                                strMasterSapDesc=(String)m1ATSMapMaster.get(pgV3Constants.SELECT_ATTRIBUTE_TITLE);
                                //Added by DSM(Sogeti)-2015x.5 for PDF Views (Defect ID-16705) - Starts
                                if(UIUtil.isNullOrEmpty(strMasterSapDesc)){
                                    strMasterSapDesc = DomainConstants.EMPTY_STRING;
                                }
                                //Added by DSM(Sogeti)-2015x.5 for PDF Views (Defect ID-16705) - Ends
                                strMasterSapDesc =strMasterSapDesc.replaceAll("[<]","#LESS_THAN");
                                strMasterSapDesc =strMasterSapDesc.replaceAll("[>]","#GREATER_THAN");
                                objectHasATSBuffer.append("<TD width=\"260px\">"+strMasterSapDesc+"</TD>");
                                objectHasATSBuffer.append("<TD width=\"129px\">"+m1ATSMapMaster.get(DomainConstants.SELECT_CURRENT)+"</TD>");
                            }else{
                                objectHasATSBuffer.append("<TD width=\"120px\"></TD>");
                                objectHasATSBuffer.append("<TD width=\"260px\"></TD>");
                                objectHasATSBuffer.append("<TD width=\"129px\"></TD>");
                            }
                            objectHasATSBuffer.append("</TR>");
                        }
                    }else{
                        for (Iterator iterator = mlATS.iterator(); iterator.hasNext();){
                            m1ATSMap = (Map) iterator.next();
                            objectHasATSBuffer.append("<TR>");
                            objectHasATSBuffer.append("<TD width=\"120px\">"+m1ATSMap.get(DomainConstants.SELECT_NAME)+"."+m1ATSMap.get(DomainConstants.SELECT_REVISION)+"</TD>");
                            //Modified by DSM(Sogeti) for Code Optimization
                            strSapDesc = DomainConstants.EMPTY_STRING;;
                            strSapDesc=(String)m1ATSMap.get(pgV3Constants.SELECT_ATTRIBUTE_TITLE);
                            //Added by DSM(Sogeti)-2015x.5 for PDF Views (Defect ID-16705) - Starts
                            if(UIUtil.isNullOrEmpty(strSapDesc)){
                                strSapDesc = DomainConstants.EMPTY_STRING;
                            }
                            //Added by DSM(Sogeti)-2015x.5 for PDF Views (Defect ID-16705) - Ends
                            strSapDesc =strSapDesc.replaceAll("[<]","#LESS_THAN");
                            strSapDesc =strSapDesc.replaceAll("[>]","#GREATER_THAN");
                            objectHasATSBuffer.append("<TD width=\"600px\">"+strSapDesc+"</TD>");
                            objectHasATSBuffer.append("<TD width=\"109px\">"+m1ATSMap.get(DomainConstants.SELECT_CURRENT)+"</TD>");
                            objectHasATSBuffer.append("</TR>");
                        }
                    }
                    objectHasATSBuffer.append("</tbody>");
                    objectHasATSBuffer.append("</TABLE></TD></TR>");
                    objectHasATSBuffer.append("<TR><TD><br /></TD></TR>");
                }
                //Modify Code Refactoring
                mlATS.clear();
            }
        }
        catch (Exception e){
            throw new MatrixException(e);
        }
        long endTime = new Date().getTime();
        System.out.println("Total Time has taken by the  getHasATSData Method is-->"+(endTime-startTime));
        return objectHasATSBuffer;
    }
    /**
     * This method get the table structure for Final Ingredients table
     *
     * @param context
     * @param args
     * @return: StringBuilder containing table columns and values for Final Ingredients table
     * @throws Exception
     */
    private  StringBuilder getFinalIngredientsTableData(Context context,String[] args,String strObjectId,String strPDFViewType,String strUser){
        long startTime = new Date().getTime();
        StringBuilder objectFinalIngredientsBuffer= new StringBuilder();
        StringList slFCInfo = new StringList(4);
        slFCInfo.addElement(pgV3Constants.SELECT_ATTRIBUTE_PGPCLTRACKINGCODE);
        slFCInfo.addElement(pgV3Constants.SELECT_ATTRIBUTE_PGPCLDESCRIPTION);
        slFCInfo.addElement(pgV3Constants.SELECT_ATTRIBUTE_PGPCLQUANTITY);
        slFCInfo.addElement(pgV3Constants.SELECT_ATTRIBUTE_PGPCLUOM);
        try {

            if(validateString(strObjectId)){
                DomainObject dObjFC = DomainObject.newInstance(context,strObjectId);
                Map mapFCAttributeInfo = dObjFC.getInfo(context, slFCInfo);
                MapList mlFinalIngredientsData = EnoviaTableUtils.getFinalIngredients(context, strObjectId);
                if(mlFinalIngredientsData != null && !mlFinalIngredientsData.isEmpty() && pgPDFViewConstants.CONST_ALLINFO.equalsIgnoreCase(strPDFViewType)){
                    objectFinalIngredientsBuffer.append("<TR><TD class=\"new\"><TABLE cellspacing=\"0\" style=\"line-height: 16px;\" id=\"FinalIngredientsTable\">");
                    objectFinalIngredientsBuffer.append("<TR><TD class=\"new\"><B>"+EnoviaResourceBundle.getProperty(context, "emxCPNStringResource", context.getLocale(), "emxCPN.CommandLabel.FinalIngredientsPDF")+"</B></TD></TR>");
                    objectFinalIngredientsBuffer.append("</TABLE></TD></TR>");
                    objectFinalIngredientsBuffer.append("<TR><TD class=\"new\"><TABLE cellspacing=\"0\" style=\"line-height: 16px;\" id=\"FinalIngredientsTable\">");
                    objectFinalIngredientsBuffer.append("<TR><TD class=\"new\" valign=\"top\" width=\"200\">Tracking Code: "+mapFCAttributeInfo.get(pgV3Constants.SELECT_ATTRIBUTE_PGPCLTRACKINGCODE)+"</TD>");
                    String strPCLDesc = (String)mapFCAttributeInfo.get(pgV3Constants.SELECT_ATTRIBUTE_PGPCLDESCRIPTION);
                    objectFinalIngredientsBuffer.append("<TD class=\"new\" valign=\"top\" >Description: " +checkLessThanGreaterThan(strPCLDesc)+"</TD></TR>");
                    objectFinalIngredientsBuffer.append("<TR><TD class=\"new\" valign=\"top\" width=\"200\">Total: "+mapFCAttributeInfo.get(pgV3Constants.SELECT_ATTRIBUTE_PGPCLQUANTITY)+"</TD>");
                    objectFinalIngredientsBuffer.append("<TD class=\"new\" valign=\"top\" >Unit of Measure: " +mapFCAttributeInfo.get(pgV3Constants.SELECT_ATTRIBUTE_PGPCLUOM)+"</TD></TR>");
                    objectFinalIngredientsBuffer.append("</TABLE></TD></TR>");
                    objectFinalIngredientsBuffer.append("<TR><TD><TABLE cellspacing=\"0\" class=\"pdf\" style=\"line-height: 16px;\" id=\"FinalIngredientsTable\">");
                    objectFinalIngredientsBuffer.append("<thead>");
                    objectFinalIngredientsBuffer.append("<TR>");
                    objectFinalIngredientsBuffer.append("<TD align=\"left\" width=\"120px\">"+EnoviaResourceBundle.getProperty(context,"emxCPNStringResource",context.getLocale(),"emxCPN.Label.Chg")+"</TD>");
                    objectFinalIngredientsBuffer.append("<TD align=\"left\" width=\"100px\">"+EnoviaResourceBundle.getProperty(context,"emxCPNStringResource",context.getLocale(),"emxCPN.Label.GCASTrackingCode")+"</TD>");
                    objectFinalIngredientsBuffer.append("<TD align=\"left\" width=\"140px\">"+EnoviaResourceBundle.getProperty(context,"emxCPNStringResource",context.getLocale(),"emxCPN.Label.SAPDescription")+"</TD>");
                    objectFinalIngredientsBuffer.append("<TD align=\"left\" width=\"100px\">"+EnoviaResourceBundle.getProperty(context,"emxCPNStringResource",context.getLocale(),"emxCPN.Common.Type")+"</TD>");
                    objectFinalIngredientsBuffer.append("<TD align=\"left\" width=\"100px\">"+EnoviaResourceBundle.getProperty(context,"emxCPNStringResource",context.getLocale(),"emxCPN.Label.Min" )+"</TD>");
                    objectFinalIngredientsBuffer.append("<TD align=\"left\" width=\"120px\">"+EnoviaResourceBundle.getProperty(context,"emxCPNStringResource",context.getLocale(),"emxCPN.Label.Target")+"</TD>");
                    objectFinalIngredientsBuffer.append("<TD align=\"left\" width=\"100px\">"+EnoviaResourceBundle.getProperty(context,"emxCPNStringResource",context.getLocale(),"emxCPN.Label.Max")+"</TD>");
                    objectFinalIngredientsBuffer.append("<TD align=\"left\" width=\"100px\">"+EnoviaResourceBundle.getProperty(context,"emxCPNStringResource",context.getLocale(),"emxCPN.Label.UoM")+"</TD>");
                    objectFinalIngredientsBuffer.append("<TD align=\"left\" width=\"120px\">"+EnoviaResourceBundle.getProperty(context,"emxCPNStringResource",context.getLocale(),"emxCPN.Label.MaterialFunction")+"</TD>");
                    objectFinalIngredientsBuffer.append("<TD align=\"left\" width=\"120px\">"+EnoviaResourceBundle.getProperty(context,"emxCPNStringResource",context.getLocale(),"emxCPN.Label.CommentsFI")+"</TD>");
                    objectFinalIngredientsBuffer.append("</TR>");
                    objectFinalIngredientsBuffer.append("</thead>");
                    objectFinalIngredientsBuffer.append("<tbody>");
                    String strSapDesc;
                    Map<String,String> mapFinalIngredients ;
                    for (Iterator iterator = mlFinalIngredientsData.iterator(); iterator.hasNext();){
                        mapFinalIngredients = (Map) iterator.next();
                        objectFinalIngredientsBuffer.append("<TR>");
                        objectFinalIngredientsBuffer.append("<TD width=\"120px\">"+validateString1(mapFinalIngredients.get("Chg"))+"</TD>");
                        objectFinalIngredientsBuffer.append("<TD width=\"100px\">"+validateString1(mapFinalIngredients.get("GCASCode"))+"</TD>");
                        strSapDesc=mapFinalIngredients.get("SAPDescription");
                        strSapDesc =strSapDesc.replace("\n"," ");
                        objectFinalIngredientsBuffer.append("<TD width=\"140px\">"+checkLessThanGreaterThan(strSapDesc)+"</TD>");
                        objectFinalIngredientsBuffer.append("<TD width=\"100px\">"+validateString1(mapFinalIngredients.get("Type"))+"</TD>");
                        objectFinalIngredientsBuffer.append("<TD width=\"100px\">"+validateString1(mapFinalIngredients.get("Min"))+"</TD>");
                        objectFinalIngredientsBuffer.append("<TD width=\"120px\">"+validateString1(mapFinalIngredients.get("Target"))+"</TD>");
                        objectFinalIngredientsBuffer.append("<TD width=\"100px\">"+validateString1(mapFinalIngredients.get("Max"))+"</TD>");
                        objectFinalIngredientsBuffer.append("<TD width=\"100px\">"+validateString1(mapFinalIngredients.get("UoM"))+"</TD>");
                        objectFinalIngredientsBuffer.append("<TD width=\"120px\">"+checkLessThanGreaterThan(validateString1(mapFinalIngredients.get("MaterialFunction")))+"</TD>");
                        objectFinalIngredientsBuffer.append("<TD width=\"120px\">"+checkLessThanGreaterThan(validateString1(mapFinalIngredients.get("Comments")))+"</TD>");
                        objectFinalIngredientsBuffer.append("</TR>");
                    }
                    objectFinalIngredientsBuffer.append("</tbody>");
                    objectFinalIngredientsBuffer.append("</TABLE></TD></TR>");
                    objectFinalIngredientsBuffer.append("<TR><TD><br /></TD></TR>");
                    mlFinalIngredientsData.clear();
                }
            }
        } catch (Exception e) {
            logger.log(Level.WARNING, null, e);
        }
        long endTime = new Date().getTime();
        System.out.println("Total Time has taken by the  getFinalIngredientsTableData Method is-->"+(endTime-startTime));
        return objectFinalIngredientsBuffer;

    }
    /**
     * Get weight and dimension data for DSO type
     * @param context
     * @param strObjectId
     * @param pdfViewType
     * @return
     */
    private StringBuilder getDSOWeightDimensionsTable(Context context,String strObjectId, String pdfViewType) throws Exception{
        long startTime = new Date().getTime();
        StringBuilder objectWnDBuffer= new StringBuilder();
        try
        {
            DomainObject domainObject= DomainObject.newInstance(context,strObjectId);
            //Modified by DSM(Sogeti) for Code Optimization Start
            boolean havingPackingUnitData=false;
            int inValue = 0;
            int p = 0;
            //Modified by DSM(Sogeti) for Code Optimization End
            StringList slbusSelect=new StringList(2);
            slbusSelect.add(pgV3Constants.SELECT_ATTRIBUTE_PGWDSTATIUS);
            slbusSelect.add(pgV3Constants.SELECT_ATTRIBUTE_PGUNITOFMEASURESYSTEM);
            Map<String,String> specInfoMap=domainObject.getInfo(context,slbusSelect);
            //Modified by DSM(Sogeti) for Code Optimization Start
            Map Argmap = new HashMap();
            Map mapObject = null;
            Map commomArgs = null;
            Map argmapNCUPU = null;
            Map argmapPUT = null;
            Map columnMap = null;
            Map settingMap = null;
            Map argmapAUOM = null;
            Map argmapVUoM = null;
            Map columnMapVUoM = null;
            Map settingMapVUoM = null;
            Map columnMapAUOM =  null;
            Map settingMapAUOM = null;
            Map argmapDM =  null;
            Map columnMapGTIN = null;
            Map settingMapGTIN = null;
            Map argmapGTIN =  null;
            Map mapCI = null;
            Map argmapGWwP = null;
            Map argmapGWUoM = null;
            Map argmapPallet = null;
            Map argmapTUV = null;
            Map argmapGWP = null;
            Map columnMapGWwP = null;
            Map settingMapGWwP = null;
            Map columnMapDM =  null;
            Map settingMapDM = null;
            Map columnMapTUV = null;
            Map settingMapTUV = null;
            Map columnMapGWP = null;
            Map settingMapGWP = null;
            Map columnMapGWUoM = null;
            Map settingMapGWUoM = null;
            Map columnMapNLPTU = null;
            Map settingMapNLPTU = null;
            Map argmapNCUPTU = null;
            Map argmapNLPTU = null;
            Map settingMapNCUPTU = null;
            Map argmapWPSHM = null;
            Map columnMapWPSHM = null;
            Map settingMapWPSHM = null;
            Map argmapWCSHM = null;
            Map settingMapWCSHM = null;
            Map columnMapTPSHM = null;
            Map settingMapTPSHM = null;
            Map argmapSPGC = null;
            Map columnMapSPGC = null;
            Map settingMapSPGC = null;
            Map argmapTPSHM = null;
            Map argmapCE = null;
            Map columnMapCE = null;
            Map columnMapWCSHM = null;
            Map columnMapNCUPTU = null;
            Map settingMapCE = null;
            Map columnMapPallet = null;
            Map settingMapPallet = null;
            Map argmapNCUPL = null;
            Map columnMapNCUPL = null;
            Map settingMapNCUPL = null;
            Map mapWeightAttributeInfo = null;
            MapList commomML1 = null;
            MapList mlCI =  null;
            MapList commomML = null;
            MapList mlBOM = null;
            MapList mlTransportUnit = null;
            HashMap paramList = null;
            HashMap paramListNCUPTU = null;
            HashMap paramListNLPTU = null;
            HashMap paramListGWwP = null;
            HashMap paramListGWP = null;
            HashMap paramListNCUPL = null;
            HashMap paramListGWUoM = null;
            HashMap paramListPallet = null;
            HashMap paramListTUV =  null;
            HashMap paramListDM = null;
            HashMap paramListGTIN = null;
            HashMap paramListAUOM =  null;
            //Modified by DSM(Sogeti) for Code Optimization End
            String strpgWDStatius=specInfoMap.get(pgV3Constants.SELECT_ATTRIBUTE_PGWDSTATIUS);
            String strpgUnitOfMeasureSystem=specInfoMap.get(pgV3Constants.SELECT_ATTRIBUTE_PGUNITOFMEASURESYSTEM);
            //Modified by DSM(Sogeti) for Code Optimization Start
            String languageStr =  DomainConstants.EMPTY_STRING;
            String sGTIN =  DomainConstants.EMPTY_STRING;
            String sGWUoM =  DomainConstants.EMPTY_STRING;
            String sGWP =  DomainConstants.EMPTY_STRING;
            String sGWwP =  DomainConstants.EMPTY_STRING;
            String strId =  DomainConstants.EMPTY_STRING;
            String strRelId =  DomainConstants.EMPTY_STRING;
            String strType =  DomainConstants.EMPTY_STRING;
            String strName =   DomainConstants.EMPTY_STRING;
            String strLevel =  DomainConstants.EMPTY_STRING;
            String strAttrQty =  DomainConstants.EMPTY_STRING;
            String strDepth =  DomainConstants.EMPTY_STRING;
            String strWidth =  DomainConstants.EMPTY_STRING;
            String strHeight =  DomainConstants.EMPTY_STRING;
            String strNoOfCuUnit =  DomainConstants.EMPTY_STRING;
            String strDM =  DomainConstants.EMPTY_STRING;
            String strNWPCU =  DomainConstants.EMPTY_STRING;
            String strNetWetUoM =  DomainConstants.EMPTY_STRING;
            String strGrossWgt =  DomainConstants.EMPTY_STRING;
            String strGrossWth =  DomainConstants.EMPTY_STRING;
            String strCIId =  DomainConstants.EMPTY_STRING;
            String strRel =  DomainConstants.EMPTY_STRING;
            String sRelPartFamilyReference =  DomainConstants.EMPTY_STRING;
            String sRelClassifiedItem =  DomainConstants.EMPTY_STRING;
            String strWeightDimensionTitle =  DomainConstants.EMPTY_STRING;
            StringList mlPUT= new StringList();
            StringList slRelSelects = null;
            StringList slUOM = null;
            StringList strPGDUoM = null;
            StringList mlCE = new StringList();
            StringList mlSPGC = new StringList();
            StringList mlWCSHM =  new StringList();
            StringList mlWPSHM = new StringList();
            StringList mlNCUPTU = new StringList();
            StringList mlNLPTU = new StringList();
            StringList mlNCUPL= new StringList();
            StringList mlTPSHM = new StringList();
            StringList UOM = new StringList();
            StringList mlVUoM= new StringList();
            StringList mlTUV= new StringList();
            StringList mlPallet=new StringList();
            StringList slCI = new StringList();
            StringList mlAUOM= new StringList();
            StringList mlDM=new StringList();
            StringList mlNCUPU = new StringList();
            StringList busSelect = new StringList(1);
            busSelect.add(DomainConstants.SELECT_NAME);
            StringList relSelect = new StringList(2);
            relSelect.add(DomainRelationship.SELECT_NAME);
            relSelect.add(DomainRelationship.SELECT_ID);
            //Modified by DSM(Sogeti) for Code Optimization End
            StringList slWeigth = new StringList(4);
            slWeigth.addElement(pgV3Constants.SELECT_ATTRIBUTE_PGGROSSWEIGHTUNITOFMEASURE);
            slWeigth.addElement(pgV3Constants.SELECT_ATTRIBUTE_PGNETWEIGHTOFPRODUCTINCONSUMERUNITUOM);
            slWeigth.addElement(pgV3Constants.SELECT_ATTRIBUTE_PGGROSSWEIGHTREAL);
            slWeigth.addElement(pgV3Constants.SELECT_ATTRIBUTE_PGNETWEIGHTOFPRODUCTINCONSUMERUNITREAL);
            //Modified by DSM(Sogeti) for Code Optimization Start
            if(validateString(strObjectId)){
                //Modified by DSM(Sogeti)-2015x.2.1 for (Review Comments -11215) - Starts
                Argmap.put("objectId", strObjectId);
                String[] argsFPP= JPO.packArgs(Argmap);
//				pgVPDFinishedProductPart_mxJPO objVPD=new pgVPDFinishedProductPart_mxJPO(context, argsFPP);
                mlBOM = new MapList();
//				mlBOM=(MapList)objVPD.getPackingUnitWeightsAndDiamensionsData(context, argsFPP);
                //Added for PDF Refactor
                mlBOM=(MapList)pgPDFViewHelper.executeMainClassMethod(context, "pgVPDFinishedProductPart", "getPackingUnitWeightsAndDiamensionsData",argsFPP);
                mlTransportUnit=new MapList();
//				mlTransportUnit=(MapList)objVPD.getTransportUnitWeightAndDiamensionsData(context, argsFPP);
//Added for PDF Refactor
                mlTransportUnit=(MapList)pgPDFViewHelper.executeMainClassMethod(context, "pgVPDFinishedProductPart", "getTransportUnitWeightAndDiamensionsData",argsFPP);
                languageStr = context.getSession().getLanguage();
                strWeightDimensionTitle = i18nNow.getI18nString("emxCPN.Type.WeightsNDimensions", "emxCPN", languageStr);
                // W n D Status Table
                //Modified by DSM(Sogeti) for Code Optimization End
                int mlTransportUnitsize = mlTransportUnit.size();
                int mlBOMsize = mlBOM.size();
                if(mlBOMsize > 0){
                    havingPackingUnitData=true;
                }
                if(UIUtil.isNotNullAndNotEmpty(strpgWDStatius) || UIUtil.isNotNullAndNotEmpty(strpgUnitOfMeasureSystem)){
                    //Modified by DSM-2015x.5.1 for PDF Views (Defect id #17430) - Starts
                    objectWnDBuffer.append("<TR><TD class=\"WordWrappdf\"><TABLE cellspacing=\"0\" style=\"line-height: 16px;\"  width=\"1000px\" id=\"pgFinishedProductTable\">");
                    objectWnDBuffer.append("<thead>");
                    objectWnDBuffer.append("<TR><TD class=\"new\"><B><font size='4'>"+strWeightDimensionTitle+"</font></B></TD></TR>");
                    objectWnDBuffer.append("</thead>");
                    objectWnDBuffer.append("<TR>");
                    objectWnDBuffer.append("<TR><TD><TABLE class=\"WordWrappdf\" cellspacing=\"0\" width=\"1000px\" id=\"pgFinishedProductTable\">");
                    objectWnDBuffer.append("<TR>");
                    objectWnDBuffer.append("<TD width=\"200px\"><B>W&amp;D Status</B></TD>");
                    objectWnDBuffer.append("<TD width=\"800px\">"+validateString1(strpgWDStatius)+"</TD>");
                    objectWnDBuffer.append("</TR>");
                    objectWnDBuffer.append("<TR>");
                    objectWnDBuffer.append("<TD width=\"200px\"><B>Unit of Measure System</B></TD>");
                    objectWnDBuffer.append("<TD width=\"800px\">"+validateString1(strpgUnitOfMeasureSystem)+"</TD>");
                    objectWnDBuffer.append("</TR>");
                    objectWnDBuffer.append("</TABLE></TD></TR>");
                    objectWnDBuffer.append("</TR>");
                    //Modified by DSM-2015x.5.1 for PDF Views (Defect id #17430) - Ends
                    objectWnDBuffer.append("</TABLE><TR><TD><br /></TD></TR></TD></TR>");
                }
                //W n D Status Table end
                if(havingPackingUnitData){
                    objectWnDBuffer.append("<TR><TD><TABLE class=\"WordWrappdf\" cellspacing=\"0\" width=\"1000px\" id=\"pgFinishedProductTable\">");
                    objectWnDBuffer.append("<thead>");
                    objectWnDBuffer.append("<TR><TD class=\"new\" colspan='12'><B><font size ='3'>Packing Unit</font></B></TD></TR>");
                    objectWnDBuffer.append("<TR><TD align=\"center\" width=\"90px\" rowspan='2'><B>Packing<br/>Unit Type</B></TD>");
                    objectWnDBuffer.append("<TD align=\"center\" width=\"90px\" rowspan='2'><B>AUOM</B></TD>");
                    objectWnDBuffer.append("<TD align=\"center\" width=\"90px\" rowspan='2'><B>GTIN</B></TD>");
                    objectWnDBuffer.append("<TD align=\"center\" width=\"180px\" colspan='3'><B>Dimensions - OD with Bulge</B></TD>");
                    objectWnDBuffer.append("<TD align=\"center\" width=\"110px\" rowspan='2'><B>Dimension Unit of<br />Measure</B></TD>");
                    objectWnDBuffer.append("<TD align=\"center\" width=\"90px\" rowspan='2'><B>Gross Weight</B></TD>");
                    objectWnDBuffer.append("<TD align=\"center\" width=\"80px\" rowspan='2'><B>Unit of<br/>Measure</B></TD>");
                    objectWnDBuffer.append("<TD align=\"center\" width=\"90px\" rowspan='2'><B>Number of<br />Consumer<br />Units per Unit</B></TD>");
                    objectWnDBuffer.append("<TD align=\"center\" width=\"90px\" rowspan='2'><B>Net Weight of<br />Product in<br />Consumer<br />Unit</B></TD>");
                    objectWnDBuffer.append("<TD align=\"center\" width=\"90px\" rowspan='2'><B>Unit of<br />Measure</B></TD>");
                    objectWnDBuffer.append("</TR>");
                    objectWnDBuffer.append("<TR>");
                    objectWnDBuffer.append("<TD align=\"center\" width=\"60px\"><B>Depth</B></TD>");
                    objectWnDBuffer.append("<TD align=\"center\" width=\"60px\"><B>Width</B></TD>");
                    objectWnDBuffer.append("<TD align=\"center\" width=\"60px\"><B>Height</B></TD>");
                    objectWnDBuffer.append("</TR></thead>");
                    if(mlBOM!=null && mlBOMsize>0) {
                        //Modified by DSM(Sogeti)-2018x.6 June CW 2022 for PDF Views (Defect-49332 ) - Starts
                        argmapNCUPU = new HashMap();
			argmapNCUPU.put("objectList", mlBOM);
			//Modified by DSM(Sogeti)-2018x.6 June CW 2022 for PDF Views (Defect-49332 ) - Ends
                        String[] argsFPPNCUPU= JPO.packArgs(argmapNCUPU);
//						pgVPDFinishedProductPart_mxJPO objVPDNCUPU=new pgVPDFinishedProductPart_mxJPO(context, argsFPPNCUPU);
//						mlNCUPU=(StringList)objVPDNCUPU.getNumberPerCustomerUnit(context, argsFPPNCUPU);
//Added for PDF Refactor
                        mlNCUPU=(StringList)pgPDFViewHelper.executeMainClassMethod(context, "pgVPDFinishedProductPart", "getNumberPerCustomerUnit",argsFPPNCUPU);
                        inValue = mlNCUPU.size();
                        String[] argsFPPPUT  = null;
                        String[] argsFPPAUOM = null;
                        String[] argsFPPGTIN = null;
                        String[] argsFPPDM   = null;
                        Vector vGTIN		 = null;
                        Hashtable htRelData  = null;

                        DomainObject bomObject = null;
                        for (int i = 0;i< mlBOMsize; i++){

                            //Modify by DSM(Sogeti) 2018x.6 July Release Defect #43661 -Starts
                            sGTIN =DomainConstants.EMPTY_STRING;
                            //Modify by DSM(Sogeti) 2018x.6 July Release Defect #43661 -Ends

                            //Modified by DSM(Sogeti) for Code Optimization Start
                            mapObject = new HashMap();
                            mapObject = (Map) mlBOM.get(i);
                            strId = (String)mapObject.get(DomainConstants.SELECT_ID);
                            strType = (String) mapObject.get(DomainConstants.SELECT_TYPE);
                            strName = (String) mapObject.get(DomainConstants.SELECT_NAME);
                            strLevel = (String) mapObject.get(DomainConstants.SELECT_LEVEL);
                            strAttrQty = (String) mapObject.get(DomainConstants.SELECT_ATTRIBUTE_QUANTITY);
                            commomArgs = new HashMap();
                            //Modified by DSM(Sogeti) for Code Optimization End
                            commomArgs.put(DomainConstants.SELECT_ID, strId);
                            commomArgs.put(DomainConstants.SELECT_TYPE, strType);
                            commomArgs.put(DomainConstants.SELECT_NAME, strName);
                            commomArgs.put(DomainConstants.SELECT_LEVEL, strLevel);
                            commomArgs.put(DomainConstants.SELECT_ATTRIBUTE_QUANTITY, strAttrQty);
                            commomML = new 	MapList();
                            commomML.add(commomArgs);
//Start Code Refactoring
//							argmapPUT = new HashMap();
//							argmapPUT.put("objectList", commomML);
//							paramList = new HashMap();
//							paramList.put("languageStr","Stren");
//							argmapPUT.put("paramList", paramList);
//							columnMap = new  HashMap();
//							settingMap = new  HashMap();
//							settingMap.put("CPNFieldType","name");
//							columnMap.put("settings",settingMap);
//							argmapPUT.put("columnMap", columnMap);
//							argmapPUT.put("reportFormat","CSV");
//							argsFPPPUT= JPO.packArgs(argmapPUT);
                            //Commented by DSM(Sogeti) 2018x.6.1 Defect #43129 - Starts

                            //argsFPPPUT=getArgsMapData(commomML,"name");
//End Code Refactoring


//							pgVPDFinishedProductPart_mxJPO objVPDPUT=new pgVPDFinishedProductPart_mxJPO(context, argsFPPPUT);
//							mlPUT=(StringList)objVPDPUT.getCalculationsAndRollupColumnVal(context, argsFPPPUT);
//Added for PDF Refactor
                            //mlPUT=(StringList)pgPDFViewHelper.executeMainClassMethod(context, "pgVPDFinishedProductPart", "getCalculationsAndRollupColumnVal",argsFPPPUT);
                            //Commented by DSM(Sogeti) 2018x.6.1 Defect #43129 - Ends
                            DomainObject domainObj= DomainObject.newInstance(context,strId);
                            //Modify by DSM(Sogeti) 2018x.6.1 Defect #43129 - Starts
                            boolean hasReadAccess = domainObj.checkAccess(context, (short) AccessConstants.cRead);
                            mapWeightAttributeInfo = new HashMap();
                            mapWeightAttributeInfo = domainObj.getInfo(context, slWeigth);
                            mlPUT=new StringList();
                            if(!hasReadAccess)
                            {
                                mlPUT.add(pgPDFViewConstants.CONST_NO_ACCESS);
                            } else {
                                argsFPPPUT=getArgsMapData(commomML,"name");
                                mlPUT=(StringList)pgPDFViewHelper.executeMainClassMethod(context, "pgVPDFinishedProductPart", "getCalculationsAndRollupColumnVal",argsFPPPUT);
                            }
                            //Modify by DSM(Sogeti) 2018x.6.1 Defect #43129 - Ends
                            objectWnDBuffer.append("<TR align=\"center\"  class=\"pdf\">");
                            objectWnDBuffer.append("<TD width=\"90px\">"+validateString1(mlPUT)+"</TD>");
//Start Code Refactoring
//							argmapAUOM = new HashMap();
//							argmapAUOM.put("objectList", commomML);
//							paramListAUOM = new HashMap();
//							paramListAUOM.put("languageStr","Stren");
//							argmapAUOM.put("paramList", paramListAUOM);
//							columnMapAUOM = new  HashMap();
//							settingMapAUOM = new  HashMap();
//							settingMapAUOM.put("CPNFieldType","attribute_pgAlternateUnitOfMeasure");
//							columnMapAUOM.put("settings",settingMapAUOM);
//							argmapAUOM.put("columnMap", columnMapAUOM);
//							argmapAUOM.put("reportFormat","CSV");
//							argsFPPAUOM= JPO.packArgs(argmapAUOM);
                            argsFPPAUOM=getArgsMapData(commomML,"attribute_pgAlternateUnitOfMeasure");
//End Code Refactoring
//							pgVPDFinishedProductPart_mxJPO objVPDAUOM=new pgVPDFinishedProductPart_mxJPO(context, argsFPPAUOM);
//							mlAUOM=(StringList)objVPDAUOM.getAlternateUnitOfMeasure(context, argsFPPAUOM);
//Added for PDF Refactor
                            mlAUOM=(StringList)pgPDFViewHelper.executeMainClassMethod(context, "pgVPDFinishedProductPart", "getAlternateUnitOfMeasure", argsFPPAUOM);
                            //Modify by DSM(Sogeti) 2018x.6.1 Defect #43129 - Starts
                            Collections.replaceAll(mlAUOM,pgV3Constants.DENIED,pgPDFViewConstants.CONST_NO_ACCESS);
                            //Modify by DSM(Sogeti) 2018x.6.1 Defect #43129 - Ends
                            objectWnDBuffer.append("<TD align=\"center\" width=\"90px\">"+validateString1(mlAUOM)+"</TD>");
                            argmapGTIN = new HashMap();
                            argmapGTIN.put("objectList", commomML);
                            paramListGTIN = new HashMap();
                            paramListGTIN.put("languageStr","Stren");
                            paramListGTIN.put("objectId",strObjectId);
                            paramListGTIN.put("table","pgVPDPackingUnitWeightAndDimensionsTable");
                            argmapGTIN.put("paramList", paramListGTIN);
                            columnMapGTIN = new  HashMap();
                            settingMapGTIN = new  HashMap();
                            settingMapGTIN.put("CPNFieldType","attribute_pgGTIN");
                            columnMapGTIN.put("settings",settingMapGTIN);
                            argmapGTIN.put("columnMap", columnMapGTIN);
                            argmapGTIN.put("reportFormat","CSV");
                            argsFPPGTIN= JPO.packArgs(argmapGTIN);

//							pgDSOCPNProductData_mxJPO objVPDGTIN=new pgDSOCPNProductData_mxJPO(context, argsFPPGTIN);
//							vGTIN=(Vector)objVPDGTIN.getGTINValue(context, argsFPPGTIN);
//Added for PDF Refactor
                            //Modify by DSM(Sogeti) 2018x.6.1 Defect #43129 - Starts
                            //Modify by DSM(Sogeti) 2018x.6 July Release Defect #43661 - Starts

                            boolean readAccess = domainObj.checkAccess(context, (short) AccessConstants.cRead);
                            if(!readAccess)
                            {
                                sGTIN = pgPDFViewConstants.CONST_NO_ACCESS;
                            }else{
                                vGTIN=(Vector)pgPDFViewHelper.executeMainClassMethod(context, "pgDSOCPNProductData", "getGTINValue", argsFPPGTIN);
                                if(!vGTIN.isEmpty()) {
                                    sGTIN = (String)vGTIN.get(0);
                                }
                            }
                            logger.log(Level.INFO,"{0}|{1}|{2}|PDF Views|Retrieved GTIN is -> {3}", new Object[]{strType, strName, strId, sGTIN });
                            //Modify by DSM(Sogeti) 2018x.6 July Release Defect #43661 - End

                            //Modify by DSM(Sogeti) 2018x.6.1 Defect #43129 - Ends
                            objectWnDBuffer.append("<TD align=\"center\" width=\"90px\">"+validateString1(sGTIN)+"</TD>");
//Start Code Refactoring
//							argmapDM = new HashMap();
//							argmapDM.put("objectList", commomML);
//							paramListDM = new HashMap();
//							paramListDM.put("languageStr","Stren");
//							argmapDM.put("paramList", paramListDM);
//							columnMapDM = new  HashMap();
//							settingMapDM = new  HashMap();
//							settingMapDM.put("CPNFieldType","");
//							columnMapDM.put("settings",settingMapDM);
//							argmapDM.put("columnMap", columnMapDM);
//							argmapDM.put("reportFormat","CSV");
//							argsFPPDM= JPO.packArgs(argmapDM);
                            argsFPPDM=getArgsMapData(commomML,"");
//End Code Refactoring
//							pgVPDFinishedProductPart_mxJPO objVPDDM=new pgVPDFinishedProductPart_mxJPO(context, argsFPPDM);
//							mlDM=(StringList)objVPDDM.getPackagingDimensions(context, argsFPPDM);
//Added for PDF Refactor
                            mlDM=(StringList)pgPDFViewHelper.executeMainClassMethod(context, "pgVPDFinishedProductPart", "getPackagingDimensions", argsFPPDM);
                            //Modify by DSM(Sogeti) 2018x.6.1 Defect #43129 - Starts
                            if(!mlDM.isEmpty())
                            {
                                strDM = (String)mlDM.get(0);
                                StringTokenizer stDM = new StringTokenizer(strDM,"|");
                                if(stDM.hasMoreTokens()) {
                                    strDepth = (String)stDM.nextToken();
                                    strWidth = (String)stDM.nextToken();
                                    strHeight = (String)stDM.nextToken();
                                }
                            } else {
                                strDepth =pgPDFViewConstants.CONST_NO_ACCESS;
                                strWidth = pgPDFViewConstants.CONST_NO_ACCESS;
                                strHeight =pgPDFViewConstants.CONST_NO_ACCESS;
                            }
                            //Modify by DSM(Sogeti) 2018x.6.1 Defect #43129 - Ends
                            objectWnDBuffer.append("<TD width=\"60px\">"+validateString1(strDepth)+"</TD>");
                            objectWnDBuffer.append("<TD width=\"60px\">"+validateString1(strWidth)+"</TD>");
                            objectWnDBuffer.append("<TD width=\"60px\">"+validateString1(strHeight)+"</TD>");
                            bomObject = DomainObject.newInstance(context,strId);
                            sRelPartFamilyReference = pgV3Constants.RELATIONSHIP_PARTFAMILYREFERENCE;
                            sRelClassifiedItem = pgV3Constants.RELATIONSHIP_CLASSIFIEDITEM;
                            slCI = new StringList();
                            mlCI =  new MapList();
                            //Modify by DSM(Sogeti) 2018x.6.1 Defect #43129 - Starts
                            boolean bReadAccess = bomObject.checkAccess(context, (short) AccessConstants.cRead);
                            if(bReadAccess){
                                mlCI = bomObject.getRelatedObjects(context,
                                        sRelClassifiedItem,
                                        "*",
                                        busSelect,
                                        relSelect,
                                        true,
                                        false,
                                        (short) 1,
                                        null,
                                        null,
                                        0);

                            }
                            //Modify by DSM(Sogeti) 2018x.6.1 Defect #43129 - Ends
                            if(mlCI != null && mlCI.size() > 0){
                                int mlCIsize = mlCI.size();
                                for(int intCount = 0; intCount < mlCIsize; intCount++) {
                                    mapCI = new HashMap();
                                    mapCI = (Map)mlCI.get(intCount);
                                    strRelId = (String)mapCI.get(DomainRelationship.SELECT_ID);
                                    slCI.add(strRelId);
                                }
                            }
                            slRelSelects = new StringList();
                            slRelSelects.add("frommid["+sRelPartFamilyReference+"].torel.to.attribute["+pgV3Constants.ATTRIBUTE_PGDIMENSIONUOM+"]");
                            slUOM = new StringList();
                            strPGDUoM = new StringList();
                            if(	slCI != null && slCI.size()>0) {
                                for(int k = 0; k < slCI.size(); k++){
                                    strCIId = (String)slCI.get(k);
                                    DomainRelationship domRel = DomainRelationship.newInstance(context,strCIId);
                                    htRelData  = domRel.getRelationshipData(context,slRelSelects);
                                    UOM = (StringList) htRelData.get("frommid["+sRelPartFamilyReference+"].torel.to.attribute["+pgV3Constants.ATTRIBUTE_PGDIMENSIONUOM+"]");
                                    //Modified for 2018x Upgrade STARTS
                                    //slUOM.add(UOM);
                                    slUOM.addAll(UOM);
                                    //Modified for 2018x Upgrade ENDS
                                }
                            }
                            if(	slUOM != null && slUOM.size()>0) {
                                for(int l = 0; l < slUOM.size(); l++){
                                    //Modified by DSM 2015x.1 (Sogeti) for defect #6237/6372 -Starts
                                    //Modified for 2018x Upgrade STARTS
                                    //strPGDUoM.addAll((StringList)slUOM.get(l));
                                    strPGDUoM.add(slUOM.get(l));
                                    //Modified for 2018x Upgrade ENDS
                                    //Modified by DSM 2015x.1 (Sogeti) for defect #6237/6372 -Ends
                                }
                            }

                            //Modify by DSM(Sogeti) 2018x.6.1 Defect #43129 - Starts
                            if(!bReadAccess && strPGDUoM.isEmpty()){
                                strPGDUoM.add(pgPDFViewConstants.CONST_NO_ACCESS);
                            }
                            //Modified by V4-IPM/DSO-2013x.5 for Defect-5119 Starts
                            objectWnDBuffer.append("<TD align=\"center\" width=\"110px\">"+validateString1(strPGDUoM)+"</TD>");
                            strGrossWgt = (String)mapWeightAttributeInfo.get(pgV3Constants.SELECT_ATTRIBUTE_PGGROSSWEIGHTREAL);
                            if(strGrossWgt.equals(pgV3Constants.DENIED)){
                                strGrossWgt=pgPDFViewConstants.CONST_NO_ACCESS;
                            }
                            objectWnDBuffer.append("<TD width=\"90px\">"+validateString1(strGrossWgt)+"</TD>");
                            strGrossWth = (String)mapWeightAttributeInfo.get(pgV3Constants.SELECT_ATTRIBUTE_PGGROSSWEIGHTUNITOFMEASURE);
                            if(strGrossWth.equals(pgV3Constants.DENIED)){
                                strGrossWth=pgPDFViewConstants.CONST_NO_ACCESS;
                            }
                            objectWnDBuffer.append("<TD width=\"80px\">"+validateString1(strGrossWth)+"</TD>");
                            if(mlNCUPU !=null && p < inValue){
                                strNoOfCuUnit = (String)mlNCUPU.get(p);
                                p++;
                            }
                            if(!bReadAccess){
                                strNoOfCuUnit=pgPDFViewConstants.CONST_NO_ACCESS;
                            }
                            objectWnDBuffer.append("<TD width=\"90px\">"+validateString1(strNoOfCuUnit)+"</TD>");
                            strNWPCU = (String)mapWeightAttributeInfo.get(pgV3Constants.SELECT_ATTRIBUTE_PGNETWEIGHTOFPRODUCTINCONSUMERUNITREAL);

                            if(strNWPCU.equals(pgV3Constants.DENIED)){
                                strNWPCU=pgPDFViewConstants.CONST_NO_ACCESS;
                            }
                            objectWnDBuffer.append("<TD width=\"90px\">"+validateString1(strNWPCU)+"</TD>");
                            strNetWetUoM = (String)mapWeightAttributeInfo.get(pgV3Constants.SELECT_ATTRIBUTE_PGNETWEIGHTOFPRODUCTINCONSUMERUNITUOM);

                            if(strNetWetUoM.equals(pgV3Constants.DENIED)){
                                strNetWetUoM =pgPDFViewConstants.CONST_NO_ACCESS;
                            }
                            //Modify by DSM(Sogeti) 2018x.6.1 Defect #43129 - Ends
                            objectWnDBuffer.append("<TD width=\"90px\">"+validateString1(strNetWetUoM)+"</TD>");
                            objectWnDBuffer.append("</TR>");

                        }
                        objectWnDBuffer.append("</TABLE><TR><TD><br /></TD></TR></TD></TR>");

                    }
                }
                //Transport Unit Table
                if(null !=mlTransportUnit && mlTransportUnitsize > 0){
                    objectWnDBuffer.append("<TR><TD><TABLE class=\"WordWrappdf\" cellspacing=\"0\" width=\"1000px\" id=\"pgFinishedProductTable\">");
                    objectWnDBuffer.append("<thead>");
                    objectWnDBuffer.append("<TR><TD class=\"new\" colspan='9'><B><font size ='3'>Transport Unit</font></B></TD></TR>");
                    objectWnDBuffer.append("<TR><TD align=\"center\" width=\"80px\" rowspan='2'><B>Pallet<br/>Type</B></TD>");
                    //Modified for defect 2438 by IPM V4-2013x.4
                    objectWnDBuffer.append("<TD align=\"center\" width=\"110px\" rowspan='2'><B>GTIN</B></TD>");
                    objectWnDBuffer.append("<TD align=\"center\" width=\"180px\" colspan='3'><B>Dimensions - OD with Bulge</B></TD>");
                    objectWnDBuffer.append("<TD align=\"center\" width=\"120px\" rowspan='2'><B>Dimension Unit of<br />Measure</B></TD>");
                    //Commented by DSM 2018x.2.1 (Sogeti) for defect 30257 -Starts
                    //objectWnDBuffer.append("<TD align=\"center\" width=\"90px\" rowspan='2'><B>Transport<br/>Unit Volume</B></TD>");
                    //objectWnDBuffer.append("<TD align=\"center\" width=\"80px\" rowspan='2'><B>Unit of<br/>Measure</B></TD>");
                    //Commented by DSM 2018x.2.1 (Sogeti) for defect 30257 -Ends
                    objectWnDBuffer.append("<TD align=\"center\" width=\"100px\" rowspan='2'><B>Gross Weight With Pallet</B></TD>");
                    objectWnDBuffer.append("<TD align=\"center\" width=\"100px\" rowspan='2'><B>Gross Weight<br/>Without<br/>Pallet</B></TD>");
                    objectWnDBuffer.append("<TD align=\"center\" width=\"140px\" rowspan='2'><B>Unit of Measure</B></TD>");
                    objectWnDBuffer.append("</TR>");
                    objectWnDBuffer.append("<TR>");
                    objectWnDBuffer.append("<TD align=\"center\" width=\"60px\"><B>Depth</B></TD>");
                    objectWnDBuffer.append("<TD align=\"center\" width=\"60px\"><B>Width</B></TD>");
                    objectWnDBuffer.append("<TD align=\"center\" width=\"60px\"><B>Height</B></TD>");
                    objectWnDBuffer.append("</TR></thead>");

                    mlTransportUnit.sort(pgV3Constants.SELECT_ATTRIBUTE_PGPALLETTYPE, "ascending", "String");
                    String[] argsFPPPallet 	= null;
                    String[] argsFPPGTIN 	= null;
                    String[] argsFPPDM 		= null;
                    String[] argsFPPTUV 	= null;
                    String[] argsFPPVUoM 	= null;
                    String[] argsFPPGWP 	= null;
                    String[] argsFPPGWwP 	= null;
                    String[] argsFPPGWUoM 	= null;
                    Vector vGTIN		 	= null;
                    Vector vGWP		 		= null;
                    Vector vGWwP		 	= null;
                    Vector vGWUoM		 	= null;
                    String strDUoM			= null;
                    for (int i = 0;i< mlTransportUnitsize; i++){

                        //Modify by DSM(Sogeti) 2018x.6 July Release Defect #43661 - Starts
                        sGTIN =DomainConstants.EMPTY_STRING;
                        //Modify by DSM(Sogeti) 2018x.6 July Release Defect #43661 - Ends
                        //Modified by DSM(Sogeti) for Code Optimization
                        mapObject = new HashMap();
                        mapObject = (Map) mlTransportUnit.get(i);
                        strId=(String)mapObject.get(DomainConstants.SELECT_ID);
                        strType = (String) mapObject.get(DomainConstants.SELECT_TYPE);
                        strName = (String) mapObject.get(DomainConstants.SELECT_NAME);
                        strRel = (String) mapObject.get(DomainObject.SELECT_RELATIONSHIP_ID);
                        commomArgs = new HashMap();
                        commomArgs.put(DomainConstants.SELECT_ID, strId);
                        commomArgs.put(DomainConstants.SELECT_TYPE, strType);
                        commomArgs.put(DomainConstants.SELECT_NAME, strName);
                        commomArgs.put(DomainConstants.SELECT_RELATIONSHIP_ID, strRel);
                        commomML = new 	MapList();
                        commomML.add(commomArgs);
                        DomainObject domainObj= DomainObject.newInstance(context,strId);
//Start Code Refactoring
//						argmapPallet = new HashMap();
//						argmapPallet.put("objectList", commomML);
//						paramList = new HashMap();
//						paramList.put("languageStr","Stren");
//						argmapPallet.put("paramList", paramList);
//						columnMap = new  HashMap();
//						settingMap = new  HashMap();
//						settingMap.put("CPNFieldType","attribute_pgPalletType");
//						columnMap.put("settings",settingMap);
//						argmapPallet.put("columnMap", columnMap);
//						argmapPallet.put("reportFormat","CSV");
//						argsFPPPallet= JPO.packArgs(argmapPallet);
                        argsFPPPallet=getArgsMapData(commomML,"attribute_pgPalletType");
//End Code Refactoring
//						pgVPDFinishedProductPart_mxJPO objVPDPUT=new pgVPDFinishedProductPart_mxJPO(context, argsFPPPallet);
//						mlPallet=(StringList)objVPDPUT.getCalculationsAndRollupColumnVal(context, argsFPPPallet);
//Added for PDF Refactor
                        mlPallet=(StringList)pgPDFViewHelper.executeMainClassMethod(context, "pgVPDFinishedProductPart", "getCalculationsAndRollupColumnVal", argsFPPPallet);
                        //Modify by DSM(Sogeti) 2018x.6.1 Defect #43129 - Starts
                        Collections.replaceAll(mlPallet,pgV3Constants.DENIED,pgPDFViewConstants.CONST_NO_ACCESS);
                        //Modify by DSM(Sogeti) 2018x.6.1 Defect #43129 - Ends
                        //Modified for V4-2013x.4 - Defect-7180 - Starts
                        objectWnDBuffer.append("<TR align=\"center\" class=\"pdf\">");
                        objectWnDBuffer.append("<TD align=\"center\" width=\"80px\">"+validateString1(mlPallet)+"</TD>");
                        argmapGTIN = new HashMap();
                        argmapGTIN.put("objectList", commomML);
                        paramListGTIN = new HashMap();
                        paramListGTIN.put("languageStr","Stren");
                        paramListGTIN.put("objectId",strObjectId);
                        paramListGTIN.put("table","pgVPDTransportUnitWeightAndDimensionsTable");
                        argmapGTIN.put("paramList", paramListGTIN);
                        columnMapGTIN = new  HashMap();
                        settingMapGTIN = new  HashMap();
                        settingMapGTIN.put("CPNFieldType","attribute_pgGTIN");
                        columnMapGTIN.put("settings",settingMapGTIN);
                        argmapGTIN.put("columnMap", columnMapGTIN);
                        argmapGTIN.put("reportFormat","CSV");
                        argsFPPGTIN= JPO.packArgs(argmapGTIN);
//						pgDSOCPNProductData_mxJPO objVPDGTIN=new pgDSOCPNProductData_mxJPO(context, argsFPPGTIN);
//						vGTIN=(Vector)objVPDGTIN.getGTINValue(context, argsFPPGTIN);
//Added for PDF Refactor
                        //Modify by DSM(Sogeti) 2018x.6.1 Defect #43129 - Starts
                        //Modify by DSM(Sogeti) 2018x.6 July Release Defect #43661 - Starts
                        boolean readAccess = domainObj.checkAccess(context, (short) AccessConstants.cRead);
                        if(!readAccess)
                        {
                            sGTIN = pgPDFViewConstants.CONST_NO_ACCESS;
                        } else {
                            vGTIN=(Vector)pgPDFViewHelper.executeMainClassMethod(context, "pgDSOCPNProductData", "getGTINValue", argsFPPGTIN);
                            if(!vGTIN.isEmpty()) {
                                sGTIN = (String)vGTIN.get(0);
                            }
                        }
                        //Modify by DSM(Sogeti) 2018x.6.1 Defect #43129 - Ends
                        logger.log(Level.INFO,"{0}|{1}|{2}|PDF Views|Retrieved GTIN is -> {3}", new Object[]{strType, strName, strId, sGTIN });
                        //Modify by DSM(Sogeti) 2018x.6 July Release Defect #43661 -Ends

                        objectWnDBuffer.append("<TD width=\"110px\">"+validateString1(sGTIN)+"</TD>");
//Start Code Refactoring
//						argmapDM = new HashMap();
//						 argmapDM.put("objectList", commomML);
//						 paramListDM = new HashMap();
//						 paramListDM.put("languageStr","Stren");
//						 argmapDM.put("paramList", paramListDM);
//						 columnMapDM = new  HashMap();
//						 settingMapDM = new  HashMap();
//						 settingMapDM.put("CPNFieldType","");
//						 columnMapDM.put("settings",settingMapDM);
//						 argmapDM.put("columnMap", columnMapDM);
//						 argmapDM.put("reportFormat","CSV");
//						 argsFPPDM= JPO.packArgs(argmapDM);
                        argsFPPDM=getArgsMapData(commomML,"");
//End Code Refactoring
//						pgVPDFinishedProductPart_mxJPO objVPDDM=new pgVPDFinishedProductPart_mxJPO(context, argsFPPDM);
//						mlDM=(StringList)objVPDDM.getPKGDimensionsForTransportUnit(context, argsFPPDM);
//Added for PDF Refactor
                        mlDM=(StringList)pgPDFViewHelper.executeMainClassMethod(context, "pgVPDFinishedProductPart", "getPKGDimensionsForTransportUnit", argsFPPDM);
                        strDM = (String)mlDM.get(0);
                        StringTokenizer stDM = new StringTokenizer(strDM,"|");
                        //Modify by DSM(Sogeti) 2018x.6.1 Defect #43129 - Starts
                        if(stDM.hasMoreTokens()){
                            strDepth = (String)stDM.nextToken();
                            strWidth = (String)stDM.nextToken();
                            strHeight = (String)stDM.nextToken();
                        }

                        if(strDepth.equals(pgV3Constants.DENIED)){
                            strDepth=pgPDFViewConstants.CONST_NO_ACCESS;
                        }
                        if(strWidth.equals(pgV3Constants.DENIED)){
                            strWidth=pgPDFViewConstants.CONST_NO_ACCESS;
                        }
                        if(strHeight.equals(pgV3Constants.DENIED)){
                            strHeight=pgPDFViewConstants.CONST_NO_ACCESS;
                        }
                        //Modify by DSM(Sogeti) 2018x.6.1 Defect #43129 - Ends
                        objectWnDBuffer.append("<TD width=\"60px\">"+validateString1(strDepth)+"</TD>");
                        objectWnDBuffer.append("<TD width=\"60px\">"+validateString1(strWidth)+"</TD>");
                        objectWnDBuffer.append("<TD width=\"60px\">"+validateString1(strHeight)+"</TD>");
                        DomainObject transportObject = DomainObject.newInstance(context,strId);
                        strDUoM = transportObject.getInfo(context, pgV3Constants.SELECT_ATTRIBUTE_PGDIMENSIONUOM);
                        //Modify by DSM(Sogeti) 2018x.6.1 Defect #43129 - Starts
                        if(strDUoM.equals(pgV3Constants.DENIED)){
                            strDUoM=pgPDFViewConstants.CONST_NO_ACCESS;
                        }
                        //Modify by DSM(Sogeti) 2018x.6.1 Defect #43129 - Ends
                        objectWnDBuffer.append("<TD width=\"120px\">"+validateString1(strDUoM)+"</TD>");
//Start Code Refactoring
//						argmapTUV = new HashMap();
//						argmapTUV.put("objectList", commomML);
//						paramListTUV = new HashMap();
//						paramListTUV.put("languageStr","Stren");
//						argmapTUV.put("paramList", paramListTUV);
//						columnMapTUV = new  HashMap();
//						settingMapTUV = new  HashMap();
//						settingMapTUV.put("CPNFieldType","attribute_pgVolumeReal");
//						columnMapTUV.put("settings",settingMapTUV);
//						argmapTUV.put("columnMap", columnMapTUV);
//						argmapTUV.put("reportFormat","CSV");
//						argsFPPTUV= JPO.packArgs(argmapTUV);
                        argsFPPTUV=getArgsMapData(commomML,"attribute_pgVolumeReal");
//End Code Refactoring
//						pgVPDFinishedProductPart_mxJPO objVPDTUV=new pgVPDFinishedProductPart_mxJPO(context, argsFPPTUV);
//						mlTUV=(StringList)objVPDTUV.getCalculationsAndRollupColumnVal(context, argsFPPTUV);
//Added for PDF Refactor
                        //Commented by DSM 2018x.2.1 (Sogeti) for defect 30257 -Starts
                        //mlTUV=(StringList)pgPDFViewHelper.executeMainClassMethod(context, "pgVPDFinishedProductPart", "getCalculationsAndRollupColumnVal", argsFPPTUV);
                        //objectWnDBuffer.append("<TD align=\"center\" width=\"90px\">"+validateString1(mlTUV)+"</TD>");
                        //Commented by DSM 2018x.2.1 (Sogeti) for defect 30257 -End
//Start Code Refactoring
//						argmapVUoM = new HashMap();
//						argmapVUoM.put("objectList", commomML);
//						HashMap paramListVUoM = new HashMap();
//						paramListVUoM.put("languageStr","Stren");
//						argmapVUoM.put("paramList", paramListVUoM);
//						columnMapVUoM = new  HashMap();
//						settingMapVUoM = new  HashMap();
//						settingMapVUoM.put("CPNFieldType","attribute_pgVolumeUnitOfMeasure");
//						columnMapVUoM.put("settings",settingMapVUoM);
//						argmapVUoM.put("columnMap", columnMapVUoM);
//						argmapVUoM.put("reportFormat","CSV");
//						argsFPPVUoM= JPO.packArgs(argmapVUoM);
                        argsFPPVUoM=getArgsMapData(commomML,"attribute_pgVolumeUnitOfMeasure");
//End Code Refactoring
//						pgVPDFinishedProductPart_mxJPO objVPDVUoM=new pgVPDFinishedProductPart_mxJPO(context, argsFPPVUoM);
//						mlVUoM=(StringList)objVPDVUoM.getCalculationsAndRollupColumnVal(context, argsFPPVUoM);
//Added for PDF Refactor
                        //Commented by DSM 2018x.2.1 (Sogeti) for defect 30257 -Starts
                        //mlVUoM=(StringList)pgPDFViewHelper.executeMainClassMethod(context, "pgVPDFinishedProductPart", "getCalculationsAndRollupColumnVal", argsFPPVUoM);
                        //objectWnDBuffer.append("<TD width=\"80px\">"+validateString1(mlVUoM)+"</TD>");
                        //Commented by DSM 2018x.2.1 (Sogeti) for defect 30257 -End
                        argmapGWP = new HashMap();
                        argmapGWP.put("objectList", commomML);
                        paramListGWP = new HashMap();
                        paramListGWP.put("languageStr","Stren");
                        paramListGWP.put("objectId",strObjectId);
                        argmapGWP.put("paramList", paramListGWP);
                        columnMapGWP = new  HashMap();
                        settingMapGWP = new  HashMap();
                        settingMapGWP.put("CPNFieldType","attribute_pgGrossWeightWithPalletReal");
                        columnMapGWP.put("settings",settingMapGWP);
                        argmapGWP.put("columnMap", columnMapGWP);
                        argmapGWP.put("reportFormat","CSV");
                        argsFPPGWP= JPO.packArgs(argmapGWP);
//						pgDSOCPNProductData_mxJPO objVPDGWP=new pgDSOCPNProductData_mxJPO(context, argsFPPGWP);
//						vGWP = (Vector)objVPDGWP.getTransportUnitRelationshipAttribute(context, argsFPPGWP);
//Added for PDF Refactor
                        //Modify by DSM(Sogeti) 2018x.6.1 Defect #43129 - Starts
                        boolean hasReadAccess = transportObject.checkAccess(context, (short) AccessConstants.cRead);
                        if(hasReadAccess){
                            vGWP=(Vector)pgPDFViewHelper.executeMainClassMethod(context, "pgDSOCPNProductData", "getTransportUnitRelationshipAttribute", argsFPPGWP);
                            if(!vGWP.isEmpty()){
                                sGWP = (String)vGWP.get(0);
                            } else {
                                sGWP = DomainConstants.EMPTY_STRING;
                            }
                        } else {
                            sGWP=pgPDFViewConstants.CONST_NO_ACCESS;
                        }
                        //Modify by DSM(Sogeti) 2018x.6.1 Defect #43129 - Ends
                        objectWnDBuffer.append("<TD width=\"100px\">"+validateString1(sGWP)+"</TD>");
                        //Modified by DSM(Sogeti) for Code Optimization Start
                        argmapGWwP = new HashMap();
                        argmapGWwP.put("objectList", commomML);
                        paramListGWwP = new HashMap();
                        paramListGWwP.put("languageStr","Stren");
                        paramListGWwP.put("objectId",strObjectId);
                        argmapGWwP.put("paramList", paramListGWwP);
                        columnMapGWwP = new  HashMap();
                        settingMapGWwP = new  HashMap();
                        //Modified by DSM(Sogeti) for Code Optimization End
                        settingMapGWwP.put("CPNFieldType","attribute_pgGrossWeightWithoutPalletReal");
                        columnMapGWwP.put("settings",settingMapGWwP);
                        argmapGWwP.put("columnMap", columnMapGWwP);
                        argmapGWwP.put("reportFormat","CSV");
                        argsFPPGWwP= JPO.packArgs(argmapGWwP);
//						pgDSOCPNProductData_mxJPO objVPDGWwP=new pgDSOCPNProductData_mxJPO(context, argsFPPGWwP);

//						vGWwP = (Vector)objVPDGWwP.getTransportUnitRelationshipAttribute(context, argsFPPGWwP);
//Added for PDF Refactor
                        //Modify by DSM(Sogeti) 2018x.6.1 Defect #43129 - Starts
                        if(hasReadAccess) {
                            vGWwP=(Vector)pgPDFViewHelper.executeMainClassMethod(context, "pgDSOCPNProductData", "getTransportUnitRelationshipAttribute", argsFPPGWwP);
                            if(!vGWwP.isEmpty()) {
                                sGWwP = (String)vGWwP.get(0);
                            } else {
                                sGWwP = DomainConstants.EMPTY_STRING;
                            }
                        } else {
                            sGWwP=pgPDFViewConstants.CONST_NO_ACCESS;
                        }
                        //Modify by DSM(Sogeti) 2018x.6.1 Defect #43129 - Ends
                        objectWnDBuffer.append("<TD width=\"100px\">"+validateString1(sGWwP)+"</TD>");
                        //Modified by DSM(Sogeti) for Code Optimization Start
                        argmapGWUoM = new HashMap();
                        argmapGWUoM.put("objectList", commomML);
                        paramListGWUoM = new HashMap();
                        paramListGWUoM.put("languageStr","Stren");
                        paramListGWUoM.put("objectId",strObjectId);
                        argmapGWUoM.put("paramList", paramListGWUoM);
                        columnMapGWUoM = new  HashMap();
                        settingMapGWUoM = new  HashMap();
                        //Modified by DSM(Sogeti) for Code Optimization End
                        settingMapGWUoM.put("CPNFieldType","attribute_pgGrossWeightUnitOfMeasure");
                        columnMapGWUoM.put("settings",settingMapGWUoM);
                        argmapGWUoM.put("columnMap", columnMapGWUoM);
                        argmapGWUoM.put("reportFormat","CSV");
                        argsFPPGWUoM= JPO.packArgs(argmapGWUoM);
//						pgDSOCPNProductData_mxJPO objVPDGWUoM=new pgDSOCPNProductData_mxJPO(context, argsFPPGWUoM);
//						vGWUoM = (Vector)objVPDGWUoM.getTransportUnitRelationshipAttribute(context, argsFPPGWUoM);
//Added for PDF Refactor
                        //Modify by DSM(Sogeti) 2018x.6.1 Defect #43129 - Starts
                        if(hasReadAccess) {
                            vGWUoM=(Vector)pgPDFViewHelper.executeMainClassMethod(context, "pgDSOCPNProductData", "getTransportUnitRelationshipAttribute", argsFPPGWUoM);
                            if(!vGWUoM.isEmpty()) {
                                sGWUoM = (String)vGWUoM.get(0);
                            } else {
                                sGWUoM = DomainConstants.EMPTY_STRING;
                            }
                        } else {
                            sGWUoM=pgPDFViewConstants.CONST_NO_ACCESS;
                        }
                        //Modify by DSM(Sogeti) 2018x.6.1 Defect #43129 - Ends
                        objectWnDBuffer.append("<TD width=\"140px\">"+validateString1(sGWUoM)+"</TD>");
                        objectWnDBuffer.append("</TR>");
                    }
                    objectWnDBuffer.append("</TABLE><TR><TD><br /></TD></TR></TD></TR>");

                }
                //Last Table in W & D
                //Modified by DSM(Sogeti)-2015x.1.2 for (Defect ID-7626) - Starts
                //if(!"warehouse".equals(pdfViewType)) {
                if(null !=mlTransportUnit && mlTransportUnitsize > 0)
                {
                    objectWnDBuffer.append("<TR><TD class=\"new\"><TABLE class=\"WordWrappdf\" width=\"1000px\" cellspacing=\"0\" style=\"line-height: 16px;\" id=\"pgFinishedProductTable\">");
                    objectWnDBuffer.append("<thead><TR>");
                    objectWnDBuffer.append("<TD align=\"center\" width=\"111px\"><B>Pallet Type</B></TD>");
                    objectWnDBuffer.append("<TD align=\"center\" width=\"111px\"><B>Number of<br/>Customer Units<br/>per Layer</B></TD>");
                    objectWnDBuffer.append("<TD align=\"center\" width=\"111px\"><B>Number of<br/>Layers per<br/>Transport Unit</B></TD>");
                    objectWnDBuffer.append("<TD align=\"center\" width=\"111px\"><B>Number of<br/>Customer Units<br/>per Transport<br/>Unit</B></TD>");
                    objectWnDBuffer.append("<TD align=\"center\" width=\"111px\"><B>Warehouse:<br/>Pallet Stack<br/>Height Maximum</B></TD>");
                    objectWnDBuffer.append("<TD align=\"center\" width=\"111px\"><B>Warehouse:<br/>Case Stack<br/>Height Maximum</B></TD>");
                    objectWnDBuffer.append("<TD align=\"center\" width=\"111px\"><B>Truck:<br/>Pallet Stack<br/>Height Maximum</B></TD>");
                    objectWnDBuffer.append("<TD align=\"center\" width=\"111px\"><B>Stacking Pattern GCAS Code</B></TD>");
                    objectWnDBuffer.append("<TD align=\"center\" width=\"112px\"><B>Cube Efficiency</B></TD>");
                    //Modified by DSM(Sogeti)-2015x.1.2 for (Defect ID-7557) - Starts
                    objectWnDBuffer.append("<TD align=\"center\" width=\"111px\"><B>Include in<br/>SAP BOM<br/>Feed</B></TD>");
                    //Modified by DSM(Sogeti)-2015x.1.2 for (Defect ID-7557) - Ends
                    objectWnDBuffer.append("</TR></thead>");
                    MapList mlGCAS				 = null;
                    DomainObject dObject 		 = null;
                    Map mGCASMap 			 	 = null;
                    Map mPgmMapIsPrimary 		 = new HashMap();
                    Map mColumnMapIsPrimary		 = new HashMap();
                    Map msettingMapIsPrimary	 = new  HashMap();
                    StringBuffer sbGCASName 	 = null;
                    //Modified by DSM(Sogeti)-2015x.4 for (Defect ID-11709) - Starts
                    StringList slObjSelects 	 = new StringList(2);
                    slObjSelects.addElement(DomainConstants.SELECT_TYPE);
                    slObjSelects.addElement(DomainConstants.SELECT_NAME);
                    //Modified by DSM(Sogeti)-2015x.4 for (Defect ID-11709) - Ends
                    String sGCASName 			 = null;
                    String sGCASType 		 = null;
                    String[] argsFPPPallet		 = null;
                    String[] argsFPPNCUPL		 = null;
                    String[] argsFPPNLPTU		 = null;
                    String[] argsFPPNCUPTU		 = null;
                    String[] argsFPPWPSHM		 = null;
                    String[] argsFPPWCSHM		 = null;
                    String[] argsFPPTPSHM		 = null;
                    String[] argsFPPCE		 	 = null;
                    String[] argsFPPIsPrimary 	 = null;
                    String sIsPrimary 			 = null;
                    Vector vIsPrimary			 = null;
                    for (int i = 0;i< mlTransportUnitsize; i++)
                    {
                        mapObject = new HashMap();
                        mapObject = (Map) mlTransportUnit.get(i);
                        strId=(String)mapObject.get(DomainConstants.SELECT_ID);
                        strType = (String) mapObject.get(DomainConstants.SELECT_TYPE);
                        //Modified by DSM(Sogeti)-2015x.1.2 for (Defect ID-7557) - Starts
                        strRel = (String) mapObject.get(DomainObject.SELECT_RELATIONSHIP_ID);
                        //Modified by DSM(Sogeti)-2015x.1.2 for (Defect ID-7557) - Ends
                        strName = (String) mapObject.get(DomainConstants.SELECT_NAME);
                        commomArgs = new HashMap();
                        commomArgs.put(DomainConstants.SELECT_ID, strId);
                        commomArgs.put(DomainConstants.SELECT_TYPE, strType);
                        commomArgs.put(DomainConstants.SELECT_NAME, strName);
                        //Modified by DSM(Sogeti)-2015x.1.2 for (Defect ID-7557) - Starts
                        commomArgs.put(DomainObject.SELECT_RELATIONSHIP_ID, strRel);
                        //Modified by DSM(Sogeti)-2015x.1.2 for (Defect ID-7557) - Ends
                        commomML = new 	MapList();
                        commomML.add(commomArgs);
                        //Modify by DSM(Sogeti) 2018x.6.1 Defect #43129 - Starts
                        if(strId!=null) {
                            dObject = DomainObject.newInstance(context,strId);
                        }
                        boolean hasReadAccess = dObject.checkAccess(context, (short) AccessConstants.cRead);
                        //Modify by DSM(Sogeti) 2018x.6.1 Defect #43129 - Ends
                        //Modified for V4-2013x.4 - Defect-7180 - Starts
                        objectWnDBuffer.append("<TR align=\"center\" class=\"pdf\">");
                        //Modified for V4-2013x.4 - Defect-7180 - Ends
//Start Code Refactoring
//							argmapPallet = new HashMap();
//							argmapPallet.put("objectList", commomML);
//							paramListPallet = new HashMap();
//							paramListPallet.put("languageStr","Stren");
//							argmapPallet.put("paramList", paramListPallet);
//							columnMapPallet = new  HashMap();
//							settingMapPallet = new  HashMap();
//							settingMapPallet.put("CPNFieldType","attribute_pgPalletType");
//							columnMapPallet.put("settings",settingMapPallet);
//							argmapPallet.put("columnMap", columnMapPallet);
//							argmapPallet.put("reportFormat","CSV");
//							argsFPPPallet= JPO.packArgs(argmapPallet);
                        argsFPPPallet=getArgsMapData(commomML,"attribute_pgPalletType");
//End Code Refactoring
//							pgVPDFinishedProductPart_mxJPO objVPDPallet=new pgVPDFinishedProductPart_mxJPO(context, argsFPPPallet);
//							mlPallet=(StringList)objVPDPallet.getCalculationsAndRollupColumnVal(context, argsFPPPallet);
//Added for PDF Refactor
                        mlPallet=(StringList)pgPDFViewHelper.executeMainClassMethod(context, "pgVPDFinishedProductPart", "getCalculationsAndRollupColumnVal", argsFPPPallet);
                        ////Modify by DSM(Sogeti) 2018x.6.1 Defect #43129 - Starts
                        Collections.replaceAll(mlPallet,pgV3Constants.DENIED,pgPDFViewConstants.CONST_NO_ACCESS);
                        //Modify by DSM(Sogeti) 2018x.6.1 Defect #43129 - Ends
                        objectWnDBuffer.append("<TD width=\"111px\">"+validateString1(mlPallet)+"</TD>");
//Start Code Refactoring
//							argmapNCUPL = new HashMap();
//							argmapNCUPL.put("objectList", commomML);
//							paramListNCUPL = new HashMap();
//							paramListNCUPL.put("languageStr","Stren");
//							argmapNCUPL.put("paramList", paramListNCUPL);
//							columnMapNCUPL = new  HashMap();
//							settingMapNCUPL = new  HashMap();
//							settingMapNCUPL.put("CPNFieldType","attribute_pgCustomerUnitsPerLayerInteger");
//							columnMapNCUPL.put("settings",settingMapNCUPL);
//							argmapNCUPL.put("columnMap", columnMapNCUPL);
//							argmapNCUPL.put("reportFormat","CSV");
//							argsFPPNCUPL= JPO.packArgs(argmapNCUPL);
                        argsFPPNCUPL=getArgsMapData(commomML,"attribute_pgCustomerUnitsPerLayerInteger");
//End Code Refactoring
//							pgVPDFinishedProductPart_mxJPO objVPDNCUPL=new pgVPDFinishedProductPart_mxJPO(context, argsFPPNCUPL);
//							mlNCUPL=(StringList)objVPDNCUPL.getCalculationsAndRollupColumnVal(context, argsFPPNCUPL);
//Added for PDF Refactor

                        mlNCUPL=(StringList)pgPDFViewHelper.executeMainClassMethod(context, "pgVPDFinishedProductPart", "getCalculationsAndRollupColumnVal", argsFPPNCUPL);
                        //Modify by DSM(Sogeti) 2018x.6.1 Defect #43129 - Starts
                        Collections.replaceAll(mlNCUPL, pgV3Constants.DENIED,pgPDFViewConstants.CONST_NO_ACCESS);
                        //Modify by DSM(Sogeti) 2018x.6.1 Defect #43129 - Ends
                        objectWnDBuffer.append("<TD width=\"111px\">"+validateString1(mlNCUPL)+"</TD>");
//Start Code Refactoring
//							argmapNLPTU = new HashMap();
//							argmapNLPTU.put("objectList", commomML);
//							paramListNLPTU = new HashMap();
//							paramListNLPTU.put("languageStr","Stren");
//							argmapNLPTU.put("paramList", paramListNLPTU);
//							columnMapNLPTU = new  HashMap();
//							settingMapNLPTU = new  HashMap();
//							settingMapNLPTU.put("CPNFieldType","attribute_pgLayersPerTransportUnitInteger");
//							columnMapNLPTU.put("settings",settingMapNLPTU);
//							argmapNLPTU.put("columnMap", columnMapNLPTU);
//							argmapNLPTU.put("reportFormat","CSV");
//							argsFPPNLPTU= JPO.packArgs(argmapNLPTU);
                        argsFPPNLPTU=getArgsMapData(commomML,"attribute_pgLayersPerTransportUnitInteger");
//End Code Refactoring
//							pgVPDFinishedProductPart_mxJPO objVPDNLPTU=new pgVPDFinishedProductPart_mxJPO(context, argsFPPNLPTU);
//							mlNLPTU=(StringList)objVPDNLPTU.getCalculationsAndRollupColumnVal(context, argsFPPNLPTU);
                        //Added for PDF Refactor
                        mlNLPTU=(StringList)pgPDFViewHelper.executeMainClassMethod(context, "pgVPDFinishedProductPart", "getCalculationsAndRollupColumnVal", argsFPPNLPTU);
                        //Modify by DSM(Sogeti) 2018x.6.1 Defect #43129 - Starts
                        Collections.replaceAll(mlNLPTU,pgV3Constants.DENIED,pgPDFViewConstants.CONST_NO_ACCESS);
                        //Modify by DSM(Sogeti) 2018x.6.1 Defect #43129 - Ends
                        objectWnDBuffer.append("<TD width=\"111px\">"+validateString1(mlNLPTU)+"</TD>");
//Start Code Refactoring
//							argmapNCUPTU = new HashMap();
//							argmapNCUPTU.put("objectList", commomML);
//							paramListNCUPTU = new HashMap();
//							paramListNCUPTU.put("languageStr","Stren");
//							argmapNCUPTU.put("paramList", paramListNCUPTU);
//							columnMapNCUPTU = new  HashMap();
//							settingMapNCUPTU = new  HashMap();
//							settingMapNCUPTU.put("CPNFieldType","attribute_pgCustomerUnitsPerTransportUnit");
//							columnMapNCUPTU.put("settings",settingMapNCUPTU);
//							argmapNCUPTU.put("columnMap", columnMapNCUPTU);
//							argmapNCUPTU.put("reportFormat","CSV");
//							argsFPPNCUPTU= JPO.packArgs(argmapNCUPTU);
                        argsFPPNCUPTU=getArgsMapData(commomML,"attribute_pgCustomerUnitsPerTransportUnit");
//End Code Refactoring
//							pgVPDFinishedProductPart_mxJPO objVPDNCUPTU=new pgVPDFinishedProductPart_mxJPO(context, argsFPPNCUPTU);
//							mlNCUPTU=(StringList)objVPDNCUPTU.getNumberOfCustUnitsPerTransportUnit(context, argsFPPNCUPTU);
                        //Added for PDF Refactor
                        mlNCUPTU=(StringList)pgPDFViewHelper.executeMainClassMethod(context, "pgVPDFinishedProductPart", "getNumberOfCustUnitsPerTransportUnit", argsFPPNCUPTU);
                        //Modify by DSM(Sogeti) 2018x.6.1 Defect #43129 - Starts
                        if(!hasReadAccess){
                            mlNCUPTU.add(pgPDFViewConstants.CONST_NO_ACCESS);
                        }
                        //Modify by DSM(Sogeti) 2018x.6.1 Defect #43129 - Ends
                        objectWnDBuffer.append("<TD width=\"111px\">"+validateString1(mlNCUPTU)+"</TD>");
//Start Code Refactoring
//							argmapWPSHM = new HashMap();
//							argmapWPSHM.put("objectList", commomML);
//							HashMap paramListWPSHM = new HashMap();
//							paramListWPSHM.put("languageStr","Stren");
//							argmapWPSHM.put("paramList", paramListWPSHM);
//							columnMapWPSHM = new  HashMap();
//							settingMapWPSHM = new  HashMap();
//							settingMapWPSHM.put("CPNFieldType","attribute_pgWhsePalletStackMaxHeight");
//							columnMapWPSHM.put("settings",settingMapWPSHM);
//							argmapWPSHM.put("columnMap", columnMapWPSHM);
//							argmapWPSHM.put("reportFormat","CSV");
//							argsFPPWPSHM= JPO.packArgs(argmapWPSHM);
                        argsFPPWPSHM=getArgsMapData(commomML,"attribute_pgWhsePalletStackMaxHeight");
//End Code Refactoring
//							pgVPDFinishedProductPart_mxJPO objVPDWPSHM=new pgVPDFinishedProductPart_mxJPO(context, argsFPPWPSHM);
//							mlWPSHM=(StringList)objVPDWPSHM.getCalculationsAndRollupColumnVal(context, argsFPPWPSHM);
                        //Added for PDF Refactor
                        mlWPSHM=(StringList)pgPDFViewHelper.executeMainClassMethod(context, "pgVPDFinishedProductPart", "getCalculationsAndRollupColumnVal", argsFPPWPSHM);
                        //Modify by DSM(Sogeti) 2018x.6.1 Defect #43129 - Starts
                        Collections.replaceAll(mlWPSHM,pgV3Constants.DENIED,pgPDFViewConstants.CONST_NO_ACCESS);
                        //Modify by DSM(Sogeti) 2018x.6.1 Defect #43129 - Ends
                        objectWnDBuffer.append("<TD width=\"111px\">"+validateString1(mlWPSHM)+"</TD>");
//Start Code Refactoring
//							argmapWCSHM = new HashMap();
//							argmapWCSHM.put("objectList", commomML);
//							HashMap paramListWCSHM = new HashMap();
//							paramListWCSHM.put("languageStr","Stren");
//							argmapWCSHM.put("paramList", paramListWCSHM);
//							columnMapWCSHM = new  HashMap();
//							settingMapWCSHM = new  HashMap();
//							settingMapWCSHM.put("CPNFieldType","attribute_pgWhseCaseMaxHeight");
//							columnMapWCSHM.put("settings",settingMapWCSHM);
//							argmapWCSHM.put("columnMap", columnMapWCSHM);
//							argmapWCSHM.put("reportFormat","CSV");
//							argsFPPWCSHM= JPO.packArgs(argmapWCSHM);
                        argsFPPWCSHM=getArgsMapData(commomML,"attribute_pgWhseCaseMaxHeight");
//End Code Refactoring
//							pgVPDFinishedProductPart_mxJPO objVPDWCSHM=new pgVPDFinishedProductPart_mxJPO(context, argsFPPWCSHM);
//							mlWCSHM=(StringList)objVPDWCSHM.getCalculationsAndRollupColumnVal(context, argsFPPWCSHM);
                        //Added for PDF Refactor
                        mlWCSHM=(StringList)pgPDFViewHelper.executeMainClassMethod(context, "pgVPDFinishedProductPart", "getCalculationsAndRollupColumnVal", argsFPPWCSHM);
                        //Modify by DSM(Sogeti) 2018x.6.1 Defect #43129 - Starts
                        Collections.replaceAll(mlWCSHM,pgV3Constants.DENIED,pgPDFViewConstants.CONST_NO_ACCESS);
                        //Modify by DSM(Sogeti) 2018x.6.1 Defect #43129 - Ends
                        objectWnDBuffer.append("<TD width=\"111px\">"+validateString1(mlWCSHM)+"</TD>");
//Start Code Refactoring
//							argmapTPSHM = new HashMap();
//							argmapTPSHM.put("objectList", commomML);
//							HashMap paramListTPSHM = new HashMap();
//							paramListTPSHM.put("languageStr","Stren");
//							argmapTPSHM.put("paramList", paramListTPSHM);
//							columnMapTPSHM = new  HashMap();
//							settingMapTPSHM = new  HashMap();
//							settingMapTPSHM.put("CPNFieldType","attribute_pgTruckPalletStackMaxHeight");
//							columnMapTPSHM.put("settings",settingMapTPSHM);
//							argmapTPSHM.put("columnMap", columnMapTPSHM);
//							argmapTPSHM.put("reportFormat","CSV");
//							argsFPPTPSHM= JPO.packArgs(argmapTPSHM);
                        argsFPPTPSHM=getArgsMapData(commomML,"attribute_pgTruckPalletStackMaxHeight");
//End Code Refactoring
//							pgVPDFinishedProductPart_mxJPO objVPDTPSHM=new pgVPDFinishedProductPart_mxJPO(context, argsFPPTPSHM);
//							mlTPSHM=(StringList)objVPDTPSHM.getCalculationsAndRollupColumnVal(context, argsFPPTPSHM);
                        //Added for PDF Refactor
                        mlTPSHM=(StringList)pgPDFViewHelper.executeMainClassMethod(context, "pgVPDFinishedProductPart", "getCalculationsAndRollupColumnVal", argsFPPTPSHM);
                        //Modify by DSM(Sogeti) 2018x.6.1 Defect #43129 - Starts
                        Collections.replaceAll(mlTPSHM,pgV3Constants.DENIED,pgPDFViewConstants.CONST_NO_ACCESS);
                        //Modify by DSM(Sogeti) 2018x.6.1 Defect #43129 - Ends
                        objectWnDBuffer.append("<TD width=\"111px\">"+validateString1(mlTPSHM)+"</TD>");
                        //Commented by DSM(Sogeti)-2015x.2 for (Defect ID-11215) - Starts
							/*argmapSPGC = new HashMap();
							argmapSPGC.put("objectList", commomML);
							HashMap paramListSPGC = new HashMap();
							paramListSPGC.put("languageStr","Stren");
							argmapSPGC.put("paramList", paramListSPGC);
							columnMapSPGC = new  HashMap();
							settingMapSPGC = new  HashMap();
							settingMapSPGC.put("CPNFieldType","attribute_pgGCAS");
							columnMapSPGC.put("settings",settingMapSPGC);
							argmapSPGC.put("columnMap", columnMapSPGC);
							argmapSPGC.put("reportFormat","CSV");
							String[] argsFPPSPGC= JPO.packArgs(argmapSPGC);
							${CLASS:pgVPDFinishedProductPart} objVPDSPGC=new ${CLASS:pgVPDFinishedProductPart}(context, argsFPPSPGC);
							mlSPGC=(StringList)objVPDSPGC.getCalculationsAndRollupColumnVal(context, argsFPPSPGC);*/
                        //Commented by DSM(Sogeti)-2015x.2 for (Defect ID-11215) - Ends
                        //Modified by DSM(Sogeti)-2015x.2 for (Defect ID-11215) - Starts
                        //Modified by DSM(Sogeti)-2015x.4 for (Defect ID-11709) - Starts
                        if(strId!=null) {
                            dObject = DomainObject.newInstance(context,strId);
                            //Modify by DSM(Sogeti) 2018x.6.1 Defect #43129 - Starts
                            if(hasReadAccess){
                                mlGCAS = dObject.getRelatedObjects(context, //Context
                                        pgV3Constants.RELATIONSHIP_PARTSPECIFICATION, //relPattern
                                        pgV3Constants.TYPE_PGSTACKINGPATTERN, //typePattern
                                        slObjSelects, //objectSelects
                                        null,// relationshipSelects
                                        false, //getTo - Get Parent Data
                                        true, //getFrom - Get Child Data
                                        (short)1, //recurseToLevel
                                        null, //objectWhere
                                        null); //relationshipWhere
                            } else {
                                mlGCAS = new MapList();
                            }
                            //Modify by DSM(Sogeti) 2018x.6.1 Defect #43129 - Ends
                        }
                        sbGCASName 	 = new StringBuffer();
                        if(mlGCAS != null && mlGCAS.size()>0) {
                            int mlGCASsize = mlGCAS.size();

                            for (int iGCAS = 0;iGCAS< mlGCASsize; iGCAS++){
                                mGCASMap = (Map) mlGCAS.get(iGCAS);
                                sGCASType =(String)mGCASMap.get(DomainConstants.SELECT_TYPE);
                                if(sGCASType.equals(pgV3Constants.TYPE_PGSTACKINGPATTERN)){
                                    sGCASName =(String)mGCASMap.get(DomainConstants.SELECT_NAME);
                                    if(UIUtil.isNotNullAndNotEmpty(sGCASName)){
                                        if(UIUtil.isNullOrEmpty(sbGCASName.toString())){
                                            sbGCASName.append(sGCASName);
                                        } else {
                                            sbGCASName.append(",");
                                            sbGCASName.append(sGCASName);
                                        }
                                    }
                                }
                            }

                            objectWnDBuffer.append("<TD width=\"111px\">"+validateString1(sbGCASName.toString())+"</TD>");
                            //Modified by DSM(Sogeti)-2015x.2 for (Defect ID-11215) - Ends
                        }
                        //Modify by DSM(Sogeti) 2018x.6.1 Defect #43129 - Starts
                        else if(!hasReadAccess){
                            sbGCASName.append(pgPDFViewConstants.CONST_NO_ACCESS);
                            objectWnDBuffer.append("<TD width=\"111px\">"+validateString1(sbGCASName.toString())+"</TD>");
                        }
                        //Modify by DSM(Sogeti) 2018x.6.1 Defect #43129 - Ends
                        else
                            objectWnDBuffer.append("<TD width=\"111px\">"+validateString1(sbGCASName.toString())+"</TD>");
                        //Modified by DSM(Sogeti)-2015x.4 for (Defect ID-11709) - Ends
//Start Code Refactoring
//							argmapCE = new HashMap();
//							argmapCE.put("objectList", commomML);
//							HashMap paramListCE = new HashMap();
//							paramListCE.put("languageStr","Stren");
//							argmapCE.put("paramList", paramListCE);
//							columnMapCE = new  HashMap();
//							settingMapCE = new  HashMap();
//							settingMapCE.put("CPNFieldType","attribute_pgCubeEffeciency");
//							columnMapCE.put("settings",settingMapCE);
//							argmapCE.put("columnMap", columnMapCE);
//							argmapCE.put("reportFormat","CSV");
//							argsFPPCE= JPO.packArgs(argmapCE);
                        argsFPPCE=getArgsMapData(commomML,"attribute_pgCubeEffeciency");
//End Code Refactoring
//							pgVPDFinishedProductPart_mxJPO objVPDCE=new pgVPDFinishedProductPart_mxJPO(context, argsFPPCE);
//							mlCE=(StringList)objVPDCE.getCalculationsAndRollupColumnVal(context, argsFPPCE);
                        //Added for PDF Refactor
                        mlCE=(StringList)pgPDFViewHelper.executeMainClassMethod(context, "pgVPDFinishedProductPart", "getCalculationsAndRollupColumnVal", argsFPPCE);
                        //Modify by DSM(Sogeti) 2018x.6.1 Defect #43129 - Starts
                        Collections.replaceAll(mlCE,pgV3Constants.DENIED,pgPDFViewConstants.CONST_NO_ACCESS);
                        //Modify by DSM(Sogeti) 2018x.6.1 Defect #43129 - Ends
                        objectWnDBuffer.append("<TD width=\"112px\">"+validateString1(mlCE)+"</TD>");
                        //Modified by DSM(Sogeti)-2015x.1.2 for (Defect ID-7557) - Starts
                        mPgmMapIsPrimary.put("objectList", commomML);
                        msettingMapIsPrimary.put("Admin Type","attribute_pgIsPrimary");
                        mColumnMapIsPrimary.put("settings", msettingMapIsPrimary);
                        mPgmMapIsPrimary.put("columnMap", mColumnMapIsPrimary);
                        argsFPPIsPrimary = JPO.packArgs(mPgmMapIsPrimary);
//							pgDSOUtil_mxJPO objDSOUtilIsPrimary=new pgDSOUtil_mxJPO(context, argsFPPIsPrimary);
//							vIsPrimary=(Vector)objDSOUtilIsPrimary.displayIsPrimaryTUP(context, argsFPPIsPrimary);
                        //Added for PDF Refactor
                        vIsPrimary=(Vector)pgPDFViewHelper.executeMainClassMethod(context, "pgDSOUtil", "displayIsPrimaryTUP", argsFPPIsPrimary);
                        ////Modify by DSM(Sogeti) 2018x.6.1 Defect #43129 - Starts
                        if(hasReadAccess){
                            if((vIsPrimary !=null) && (vIsPrimary.size() > 0))
                                sIsPrimary =(String)vIsPrimary.get(0);
                            else
                                sIsPrimary = DomainConstants.EMPTY_STRING;
                        } else{
                            sIsPrimary=pgPDFViewConstants.CONST_NO_ACCESS;
                        }
                        //Modify by DSM(Sogeti) 2018x.6.1 Defect #43129 - Ends
                        objectWnDBuffer.append("<TD width=\"112px\">"+validateString1(sIsPrimary)+"</TD>");
                        //Modified by DSM(Sogeti)-2015x.1.2 for (Defect ID-7557) - Ends
                        objectWnDBuffer.append("</TR>");
                    }
                    objectWnDBuffer.append("</TABLE><TR><TD><br /></TD></TR></TD></TR>");
                }
                //}
                //Modified by DSM(Sogeti)-2015x.1.2 for (Defect ID-7626) - Ends
                //Modified by DSM(Sogeti)-2015x.2.1 for (Review Comments -	) - Ends
                //Modify Code Refactoring
                mlTransportUnit.clear();
                mlBOM.clear();
            }

        }
        catch (Exception e)
        {
            //throw new MatrixException(e);
            e.printStackTrace();
            throw e;

        }
        long endTime = new Date().getTime();
        System.out.println("Total Time has taken by the getDSOWeightDimensionsTable Method is-->"+(endTime-startTime));
        return objectWnDBuffer;
    }
    /**
     * Retrieve Derived To and From Parts details
     * @param context
     * @param strObjectId
     * @return
     * @throws Exception
     */
    private StringBuilder getDSOderivedPartsTable(Context context,String strObjectId) {
        long startTime = new Date().getTime();
        StringBuilder objectDerivedPartsBuffer= new StringBuilder();
        try{
            if(validateString(strObjectId)){
                DomainObject domainObject= DomainObject.newInstance(context,strObjectId);
                String strType = domainObject.getInfo(context, DomainConstants.SELECT_TYPE);
                MapList mlDerivedFrom = EnoviaTableUtils.getDerivedFrom(context, strObjectId);
                MapList mlDerivedTo = EnoviaTableUtils.getDerivedTo(context, strObjectId);
                Map mapObject;
                String derivedObjState;
                String derivedObjPolicy;
                String strObjectDisplay;
                int iSize;
                mlDerivedFrom.addSortKey("Source Name", "ascending", "String");
                mlDerivedFrom.sort();
                mlDerivedTo.addSortKey("Derived Name", "ascending", "String");
                mlDerivedTo.sort();
                if((mlDerivedFrom != null && !mlDerivedFrom.isEmpty()) || (mlDerivedTo != null && !mlDerivedTo.isEmpty())){
                    objectDerivedPartsBuffer.append("<TR><TD><br /></TD></TR>");
                    objectDerivedPartsBuffer.append("<TR><TD class=\"new\"><TABLE cellspacing=\"0\" style=\"line-height: 16px;\" id=\"pgFinishedProductTable\">");
                    objectDerivedPartsBuffer.append("<TR><TD><font size='4'><b>Related Parts<br /></b></font></TD></TR>");
                    objectDerivedPartsBuffer.append("</TABLE></TD></TR>");
                }
                if(mlDerivedFrom != null && !mlDerivedFrom.isEmpty()){
                    objectDerivedPartsBuffer.append("<TR><TD><TABLE class=\"WordWrappdf\" cellspacing=\"0\" width=\"1000px\" id=\"pgFinishedProductTable\">");
                    objectDerivedPartsBuffer.append("<thead>");
                    objectDerivedPartsBuffer.append("<TR><TD align=\"left\" colspan='9' ><B><font size ='3'>Derived From</font></B></TD></TR>");
                    objectDerivedPartsBuffer.append("<TR>");
                    objectDerivedPartsBuffer.append("<TD align=\"center\" width=\"111px\" ><B>Source Name</B></TD>");
                    objectDerivedPartsBuffer.append("<TD align=\"center\" width=\"111px\" ><B>Derived Name</B></TD>");
                    objectDerivedPartsBuffer.append("<TD align=\"center\" width=\"111px\" ><B>Derived Description</B></TD>");
                    objectDerivedPartsBuffer.append("<TD align=\"center\" width=\"111px\" ><B>Derived Part State</B></TD>");
                    objectDerivedPartsBuffer.append("<TD align=\"center\" width=\"111px\" ><B>Derived Part Security Category</B></TD>");
                    objectDerivedPartsBuffer.append("<TD align=\"center\" width=\"111px\" ><B>Source Part Revision</B></TD>");
                    objectDerivedPartsBuffer.append("<TD align=\"center\" width=\"111px\" ><B>Generation Number</B></TD>");
                    objectDerivedPartsBuffer.append("<TD align=\"center\" width=\"111px\" ><B>Creator</B></TD>");
                    objectDerivedPartsBuffer.append("<TD align=\"center\" width=\"112px\" ><B>Create Date</B></TD>");
                    objectDerivedPartsBuffer.append("</TR></thead>");
                    iSize = mlDerivedFrom.size();
                    for (int i = 0; i < iSize; i++) {
                        mapObject = (Map) mlDerivedFrom.get(i);
                        objectDerivedPartsBuffer.append("<TR align=\"center\" class=\"WordWrappdf\">");
                        objectDerivedPartsBuffer.append("<TD width=\"111px\">"+ validateString1(mapObject.get("Source Name")) + "</TD>");
                        objectDerivedPartsBuffer.append("<TD width=\"111px\">"+ validateString1(mapObject.get("Derived Name")) + "</TD>");
                        objectDerivedPartsBuffer.append("<TD width=\"111px\">"+ checkLessThanGreaterThan(validateString1(mapObject.get("Derived Description")))+ "</TD>");
                        derivedObjState = (String) mapObject.get("Derived Part State");
                        derivedObjPolicy = (String) mapObject.get("Policy");
                        strObjectDisplay = EnoviaResourceBundle.getStateI18NString(context, derivedObjPolicy,derivedObjState, context.getLocale().getLanguage());
                        objectDerivedPartsBuffer.append("<TD width=\"111px\">" + validateString1(strObjectDisplay) + "</TD>");
                        objectDerivedPartsBuffer.append("<TD width=\"111px\">" + validateString1(mapObject.get("DSO Derived Part RDO")) + "</TD>");
                        objectDerivedPartsBuffer.append("<TD width=\"111px\">" + validateString1(mapObject.get("Source Part Revision")) + "</TD>");
                        objectDerivedPartsBuffer.append("<TD width=\"111px\">" + validateString1(pgV3Constants.ZERO) + "</TD>");
                        objectDerivedPartsBuffer.append("<TD width=\"111px\">" + validateString1(mapObject.get("Creator")) + "</TD>");
                        objectDerivedPartsBuffer.append("<TD width=\"112px\">" + validateString1(pgIPMPDFViewUtil_mxJPO.getFormattedDate((String)mapObject.get("Create Date")))+ "</TD>");
                        objectDerivedPartsBuffer.append("</TR>");
                    }
                    objectDerivedPartsBuffer.append("</TABLE><TR><TD><br /></TD></TR></TD></TR>");
                    mlDerivedFrom.clear();
                }

                if(mlDerivedTo != null && !mlDerivedTo.isEmpty()){
                    objectDerivedPartsBuffer.append("<TR><TD><TABLE class=\"WordWrappdf\" cellspacing=\"0\" width=\"1000px\" id=\"pgFinishedProductTable\">");
                    objectDerivedPartsBuffer.append("<thead>");
                    objectDerivedPartsBuffer.append("<TR><TD align=\"left\" colspan='9' ><B><font size ='3'>Derived To</font></B></TD></TR>");
                    objectDerivedPartsBuffer.append("<TR>");
                    if (pgV3Constants.TYPE_INTERMEDIATE_PRODUCT_PART.equals(strType)) {
                        objectDerivedPartsBuffer.append("<TD align=\"center\" width=\"111px\" ><B>Source Name</B></TD>");
                        objectDerivedPartsBuffer.append("<TD align=\"center\" width=\"111px\" ><B>Derived Name</B></TD>");
                    } else {
                        objectDerivedPartsBuffer.append("<TD align=\"center\" width=\"111px\" ><B>Derived Name</B></TD>");
                        objectDerivedPartsBuffer.append("<TD align=\"center\" width=\"111px\" ><B>Source Name</B></TD>");
                    }
                    objectDerivedPartsBuffer.append("<TD align=\"center\" width=\"111px\" ><B>Derived Description</B></TD>");
                    objectDerivedPartsBuffer.append("<TD align=\"center\" width=\"111px\" ><B>Derived Part State</B></TD>");
                    objectDerivedPartsBuffer.append("<TD align=\"center\" width=\"111px\" ><B>Derived Part Security <br />Category<br /></B></TD>");
                    objectDerivedPartsBuffer.append("<TD align=\"center\" width=\"111px\" ><B>Source Part Revision</B></TD>");
                    objectDerivedPartsBuffer.append("<TD align=\"center\" width=\"111px\" ><B>Generation Number</B></TD>");
                    objectDerivedPartsBuffer.append("<TD align=\"center\" width=\"111px\" ><B>Creator</B></TD>");
                    objectDerivedPartsBuffer.append("<TD align=\"center\" width=\"112px\" ><B>Create Date</B></TD>");
                    objectDerivedPartsBuffer.append("</TR></thead>");
                    iSize = mlDerivedTo.size();
                    for (int i = 0; i < iSize; i++) {
                        mapObject = (Map) mlDerivedTo.get(i);
                        objectDerivedPartsBuffer.append("<TR align=\"center\" class=\"WordWrappdf\">");
                        if (pgV3Constants.TYPE_INTERMEDIATE_PRODUCT_PART.equals(strType)) {
                            objectDerivedPartsBuffer.append("<TD width=\"111px\">"+ validateString1(mapObject.get("Source Name")) + "</TD>");
                            objectDerivedPartsBuffer.append("<TD width=\"111px\">"+ validateString1(mapObject.get("Derived Name")) + "</TD>");
                        } else {
                            objectDerivedPartsBuffer.append("<TD width=\"111px\">"+ validateString1(mapObject.get("Derived Name")) + "</TD>");
                            objectDerivedPartsBuffer.append("<TD width=\"111px\">"+ validateString1(mapObject.get("Source Name")) + "</TD>");
                        }
                        objectDerivedPartsBuffer.append("<TD width=\"111px\">"+ checkLessThanGreaterThan(validateString1(mapObject.get("Derived Description")))+"</TD>");
                        derivedObjState = (String) mapObject.get("Derived Part State");
                        derivedObjPolicy = (String) mapObject.get("Policy");
                        strObjectDisplay = EnoviaResourceBundle.getStateI18NString(context, derivedObjPolicy, derivedObjState, context.getLocale().getLanguage());
                        objectDerivedPartsBuffer.append("<TD width=\"111px\">"+ validateString1(strObjectDisplay) + "</TD>");
                        objectDerivedPartsBuffer.append("<TD width=\"111px\">"+ validateString1(mapObject.get("DSO Derived Part RDO")) + "</TD>");
                        objectDerivedPartsBuffer.append("<TD width=\"111px\">"+ validateString1(mapObject.get("Source Part Revision")) + "</TD>");
                        objectDerivedPartsBuffer.append("<TD width=\"111px\">"+ validateString1(pgV3Constants.ZERO) + "</TD>");
                        objectDerivedPartsBuffer.append("<TD width=\"111px\">"+ validateString1(mapObject.get("Creator")) + "</TD>");
                        objectDerivedPartsBuffer.append("<TD width=\"112px\">"+ validateString1(pgIPMPDFViewUtil_mxJPO.getFormattedDate((String) mapObject.get("Create Date")))+ "</TD>");
                        objectDerivedPartsBuffer.append("</TR>");
                    }
                    objectDerivedPartsBuffer.append("</TABLE><TR><TD><br /></TD></TR></TD></TR>");
                    mlDerivedTo.clear();
                }
            }
        } catch (Exception e) {
            logger.log(Level.WARNING, null, e);
        }
        long endTime = new Date().getTime();
        System.out.println("Total Time has taken by the getDSOderivedPartsTable Method is-->"+(endTime-startTime));
        return objectDerivedPartsBuffer;
    }
    /**
     * Retrieve Plants table for DSO type
     * @param context
     * @param strObjectId
     * @return
     * @throws MatrixException
     */
    private StringBuilder getFPPPlantsTable(Context context,String strObjectId) {
        long startTime = new Date().getTime();
        StringBuilder objectPlantsBuffer= new StringBuilder();
        try{
            if(validateString(strObjectId))
            {
                MapList mlPlants = EnoviaTableUtils.getPlants(context, strObjectId);
                boolean havingPlantsData=false;
                if(mlPlants!=null && !mlPlants.isEmpty()) {
                    havingPlantsData=true;
                }
                if(havingPlantsData){
                    DomainObject doObj = DomainObject.newInstance(context, strObjectId);
                    String strType = doObj.getInfo(context, DomainConstants.SELECT_TYPE);
                    String strSAPType = doObj.getAttributeValue(context, "pgSAPType");

                    objectPlantsBuffer.append("<TR><TD><TABLE class=\"pdf\" cellspacing=\"0\" width=\"1000px\" id=\"pgFinishedProductTable\">");
                    objectPlantsBuffer.append("<thead>");
                    objectPlantsBuffer.append("<TR><TD class=\"new\" colspan=\"10\" ><font size='4'><b>Plants<br /></b></font></TD></TR>");
                    objectPlantsBuffer.append("<TR>");
                    objectPlantsBuffer.append("<TD  width=\"250\" align=\"center\"><B>Plants</B></TD>");
                    if(strType.equals(pgV3Constants.TYPE_ANCILLARYRAWMATERIALPART))
                    {
                        objectPlantsBuffer.append("<TD  width=\"250\" align=\"center\"><B>Authorized</B></TD>");
                    } else if(pgPDFViewConstants.CONST_ROH.equals(strSAPType) && (strType.equals(pgV3Constants.TYPE_RAWMATERIALPART) || strType.equals(pgV3Constants.TYPE_PGRAWMATERIAL))){
                        objectPlantsBuffer.append("<TD  width=\"250\" align=\"center\"><B>Authorized</B></TD>");
                        objectPlantsBuffer.append("<TD  width=\"250\" align=\"center\"><B>Activated</B></TD>");
                    }//Modified by DSM Sogeti for 2022x.01 Feb CW for PDF Views (Defect -42783) - Starts
                    else if(pgV3Constants.TYPE_PACKAGINGASSEMBLYPART.equals(strType) || pgV3Constants.TYPE_RAWMATERIALPART.equals(strType) || pgV3Constants.TYPE_PGRAWMATERIAL.equals(strType) || pgV3Constants.TYPE_FABRICATEDPART.equals(strType) || pgV3Constants.TYPE_ASSEMBLEDPRODUCTPART.equals(strType) || pgV3Constants.TYPE_FORMULATIONPART.equals(strType) || pgV3Constants.TYPE_DEVICEPRODUCTPART.equals(strType) || pgV3Constants.TYPE_SOFTWAREPART.equals(strType) || (pgV3Constants.TYPE_FINISHEDPRODUCTPART.equals(strType) && pgPDFViewConstants.CONS_HALB.equals(strSAPType))){
                    	//Modified by DSM Sogeti for 2022x.01 Feb CW for PDF Views (Defect -42783) - Ends
                        objectPlantsBuffer.append("<TD  width=\"333\" align=\"center\"><B>Authorized To Use</B></TD>");
                        objectPlantsBuffer.append("<TD  width=\"334\" align=\"center\"><B>Authorized to Produce</B></TD>");
                        objectPlantsBuffer.append("<TD  width=\"334\" align=\"center\"><B>Activated</B></TD>");
                    } else{
                        objectPlantsBuffer.append("<TD  width=\"333\" align=\"center\"><B>Plants Authorized To Use</B></TD>");
                        objectPlantsBuffer.append("<TD  width=\"334\" align=\"center\"><B>Plants Authorized to Produce</B></TD>");
                    }
                    objectPlantsBuffer.append("</TR></thead>");
                    mlPlants.addSortKey("name", "ascending", "String");
                    mlPlants.sort();
                    Map mapObject;
                    String strPlantName;
                    String strAuthorized;
                    String strAuthorisedToUse;
                    String strAuthorizedToProduce;
                    String strActivated;
                    int iSize = mlPlants.size();
                    for (int i = 0;i< iSize; i++)
                    {
                        mapObject = (Map) mlPlants.get(i);
                        strPlantName  = (String)mapObject.get("Name");
                        strAuthorized = (String)mapObject.get("emxCPN.Label.PlantAuthorizedToView");
                        strAuthorisedToUse = (String)mapObject.get("emxCPN.Label.PlantAuthorizedToUse");
                        strAuthorizedToProduce = (String)mapObject.get("emxCPN.Label.PlantAuthorizedToProduce");
                        strActivated=(String)mapObject.get("emxCPN.Label.ActivePlants");
                        objectPlantsBuffer.append("<TR align=\"center\" class=\"pdf\">");
                        objectPlantsBuffer.append("<TD align=\"center\" width=\"250\">"+validateString1(strPlantName)+"</TD>");

                        if(strType.equals(pgV3Constants.TYPE_ANCILLARYRAWMATERIALPART)) {
                            objectPlantsBuffer.append("<TD align=\"center\" width=\"250\">"+validateString1(strAuthorized)+"</TD>");
                        } else if(pgPDFViewConstants.CONST_ROH.equals(strSAPType) && (strType.equals(pgV3Constants.TYPE_RAWMATERIALPART) || strType.equals(pgV3Constants.TYPE_PGRAWMATERIAL))){
                            objectPlantsBuffer.append("<TD align=\"center\" width=\"250\">"+validateString1(strAuthorized)+"</TD>");
                            objectPlantsBuffer.append("<TD align=\"center\" width=\"250\">"+validateString1(strActivated)+"</TD>");
                        }//Modified by DSM Sogeti for 2022x.01 Feb CW for PDF Views (Defect -42783) - Starts
                        else if(pgV3Constants.TYPE_PACKAGINGASSEMBLYPART.equals(strType) || pgV3Constants.TYPE_RAWMATERIALPART.equals(strType) || pgV3Constants.TYPE_PGRAWMATERIAL.equals(strType) || pgV3Constants.TYPE_FABRICATEDPART.equals(strType) || pgV3Constants.TYPE_ASSEMBLEDPRODUCTPART.equals(strType) || pgV3Constants.TYPE_FORMULATIONPART.equals(strType) || pgV3Constants.TYPE_DEVICEPRODUCTPART.equals(strType) || pgV3Constants.TYPE_SOFTWAREPART.equals(strType) || (pgV3Constants.TYPE_FINISHEDPRODUCTPART.equals(strType) && pgPDFViewConstants.CONS_HALB.equals(strSAPType))){
                            objectPlantsBuffer.append("<TD align=\"center\" width=\"333\">"+validateString1(strAuthorisedToUse)+"</TD>");
                            objectPlantsBuffer.append("<TD align=\"center\" width=\"334\">"+validateString1(strAuthorizedToProduce)+"</TD>");
                            objectPlantsBuffer.append("<TD align=\"center\" width=\"333\">"+validateString1(strActivated)+"</TD>");
                        }//Modified by DSM Sogeti for 2022x.01 Feb CW for PDF Views (Defect -42783) - Ends
                        else{
                            objectPlantsBuffer.append("<TD align=\"center\" width=\"333\">"+validateString1(strAuthorisedToUse)+"</TD>");
                            objectPlantsBuffer.append("<TD align=\"center\" width=\"334\">"+validateString1(strAuthorizedToProduce)+"</TD>");
                        }
                        objectPlantsBuffer.append("</TR>");
                    }
                    objectPlantsBuffer.append("</TABLE><TR><TD><br /></TD></TR></TD></TR>");
                }
                mlPlants.clear();
            }
        } catch (Exception e) {
            logger.log(Level.WARNING, null, e);
        }
        long endTime = new Date().getTime();
        System.out.println("Total Time has taken by the  getFPPPlantsTable Method is-->"+(endTime-startTime));
        return objectPlantsBuffer;
    }
    /**
     * Retrieve Plants data for GenDoc
     * @param context
     * @param strObjectId
     * @param strType
     * @return
     * @throws MatrixException
     */
    private StringBuilder getDSOPlantsTable(Context context,String strObjectId,String strType) {
        long startTime = new Date().getTime();
        StringBuilder objectPlantsBuffer= new StringBuilder();
        try{
            if(validateString(strObjectId)){
                MapList mlPlants = EnoviaTableUtils.getPlants(context, strObjectId);
                boolean havingPlantsData=false;
                if(mlPlants!=null && !mlPlants.isEmpty()) {
                    havingPlantsData=true;
                }
                if(havingPlantsData){
                    objectPlantsBuffer.append("<TR><TD><TABLE class=\"pdf\" cellspacing=\"0\" width=\"1000px\" id=\"pgFinishedProductTable\">");
                    objectPlantsBuffer.append("<thead>");
                    if (pgV3Constants.TYPE_PACKAGINGMATERIALPART.equals(strType)){
                        objectPlantsBuffer.append("<TR><TD colspan='3' class=\"new\" ><font size='4'><b>Plants<br /></b></font></TD></TR>");
                        objectPlantsBuffer.append("<TR>");
                        objectPlantsBuffer.append("<TD  width=\"500\" align=\"center\"><B>Plants</B></TD>");
                        if(pgV3Constants.TYPE_PACKAGINGMATERIALPART.equals(strType)) {
                            objectPlantsBuffer.append("<TD  width=\"500\" align=\"center\"><B>Authorized</B></TD>");
                            objectPlantsBuffer.append("<TD  width=\"500\" align=\"center\"><B>Activated</B></TD>");
                        }else {
                            objectPlantsBuffer.append("<TD  width=\"500\" align=\"center\"><B>Plants Authorized</B></TD>");
                            objectPlantsBuffer.append("<TD  width=\"500\" align=\"center\"><B>Plants Activated</B></TD>");
                        }
                    }else{
                        objectPlantsBuffer.append("<TR><TD colspan='2' class=\"new\" ><font size='4'><b>Plants<br /></b></font></TD></TR>");
                        objectPlantsBuffer.append("<TR>");
                        objectPlantsBuffer.append("<TD  width=\"500\" align=\"center\"><B>Plants</B></TD>");
					//Added by DSM for PDF Views (Req id #47506) - Start
					if(pgV3Constants.TYPE_STRUCTURED_ATS.equals(strType)){
						 objectPlantsBuffer.append("<TD  width=\"500\" align=\"center\"><B>Authorization</B></TD>");
					}else{
					//Added by DSM for PDF Views (Req id #47506) - End
                        objectPlantsBuffer.append("<TD  width=\"500\" align=\"center\"><B>Plants Authorized</B></TD>");
					//Added by DSM for PDF Views (Req id #47506) - Start
					}
					//Added by DSM for PDF Views (Req id #47506) - End
                    }
                    objectPlantsBuffer.append("</TR></thead>");
                    mlPlants.addSortKey("name", "ascending", "String");
                    mlPlants.sort();
                    Map mapObject;
                    String strPlantName;
                    String strAuthorisedToUse;
                    String strActivate;
                    int iSize = mlPlants.size();
                    for (int i = 0;i< iSize; i++){
                        mapObject = (Map) mlPlants.get(i);
                        strPlantName = (String)mapObject.get("Name");
                        strAuthorisedToUse = (String)mapObject.get("emxCPN.Label.PlantAuthorizedToView");
                        strActivate = (String)mapObject.get("emxCPN.Label.ActivePlants");
                        objectPlantsBuffer.append("<TR align=\"center\" class=\"pdf\">");
                        // Added by DSM-2018x.6 for PDF Views Req_36464 Start
                        if (pgV3Constants.TYPE_PACKAGINGMATERIALPART.equals(strType) )
                        {
                            // Added by DSM-2018x.6 for PDF Views Req_36464 Start
                            objectPlantsBuffer.append("<TD align=\"center\" width=\"500\">"+validateString1(strPlantName)+"</TD>");
                            objectPlantsBuffer.append("<TD align=\"center\" width=\"500\">"+validateString1(strAuthorisedToUse)+"</TD>");
                            objectPlantsBuffer.append("<TD align=\"center\" width=\"500\">"+validateString1(strActivate)+"</TD>");
                        } else 	{
                            objectPlantsBuffer.append("<TD align=\"center\" width=\"500\">"+validateString1(strPlantName)+"</TD>");
                            objectPlantsBuffer.append("<TD align=\"center\" width=\"500\">"+validateString1(strAuthorisedToUse)+"</TD>");
                        }
                        objectPlantsBuffer.append("</TR>");
                    }
                    objectPlantsBuffer.append("</TABLE><TR><TD><br /></TD></TR></TD></TR>");
                    mlPlants.clear();
                }
            }
        }
        catch (Exception e){
            logger.log(Level.WARNING, null, e);
        }
        long endTime = new Date().getTime();
        System.out.println("Total Time has taken by the getDSOPlantsTable Method is-->"+(endTime-startTime));
        return objectPlantsBuffer;
    }
    /**
     * Retrieve tasks and signature information for DSO types
     * @param context
     * @param args
     * @return
     * @throws MatrixException
     */
    private StringBuilder getDSOTasksTable(Context context,String strObjectId) throws Exception{
        long startTime = new Date().getTime();
        StringBuilder objectPlantsBuffer= new StringBuilder();
        //Added by DSM(Sogeti)-2015x.5.1 for PDF Views (Defect-17635) - Starts
        String strContext = DomainConstants.EMPTY_STRING;
        //Added by DSM(Sogeti)-2015x.5.1 for PDF Views (Defect-17635) - Ends
        try{
            if(validateString(strObjectId)){
                DomainObject domainObject= DomainObject.newInstance(context,strObjectId);
                StringList busSelects = new StringList(2);
                busSelects.add(DomainConstants.SELECT_NAME);
                busSelects.add(DomainConstants.SELECT_ID);
                int count = 0;
                //Modified by DSM(Sogeti) for Code Optimization
                String requested = DomainConstants.EMPTY_STRING;
                MapList mlTempTasks = null;
                //Modified by DSM(Sogeti)-2015x.2 for PDF views For defect 8690 on  - Starts
                Set alTasks = new HashSet();
                //Modified by DSM(Sogeti)-2015x.2 for PDF views For defect 8690 - Ends
                Set alCurrentTasks = new HashSet();
                //Modified for Upgrade 2018.0-Start
				/*StringList relSelects = new StringList(1);
				  relSelects.add("attribute[Requested Change]");
				  MapList maplistObjects = domainObject.getRelatedObjects(context,
													pgV3Constants.RELATIONSHIP_AFFECTEDITEM+","+pgV3Constants.RELATIONSHIP_IMPLEMENTEDITEM+","+pgV3Constants.RELATIONSHIP_CHANGEAFFECTEDITEM,
													pgV3Constants.TYPE_CHANGE,
													busSelects, // object Select
													relSelects, // rel Select
													true, // to
													false, // from
													(short)1,
													null, // ob where
													null  // rel where
													);
													*/

                Map proposedCAData  = com.dassault_systemes.enovia.enterprisechangemgt.util.ChangeUtil.getChangeObjectsInProposed(context, busSelects, new String[]{strObjectId}, 1);//REL_PG_CHANGE_AFFECTED_ITEM
                MapList maplistObjects = (MapList)proposedCAData.get(strObjectId);
                //Modified by DSM(Sogeti)-2015x.1 for PDF views For defect 1827 on 1-April-2016 - Ends
                //Modified for Upgrade 2018.0-End
                String strECId = "";
                MapList mlTasks = null;
                if (maplistObjects != null && (maplistObjects.size() > 0)){
                    for (Iterator iterator = maplistObjects.iterator(); iterator.hasNext();){
                        Map mData = (Map)iterator.next();
                        strECId = (String)mData.get(DomainConstants.SELECT_ID);
                        strECId = strECId.trim();
                        //Modified for Upgrade 2018.0-Start
                        //requested = (String)mData.get("attribute[Requested Change]");
                        requested = new ChangeAction(strECId).getRequestedChangeFromChangeAction(context, strObjectId,strECId);
                        //Modified for Upgrade 2018.0-End
                        if(requested.equalsIgnoreCase("For Release") || requested.equalsIgnoreCase("For Obsolescence")){
                            Map Argmap = new HashMap();
                            Argmap.put("objectId", strECId);
                            Argmap.put("languageStr", "en");
                            String[] argsSub= JPO.packArgs(Argmap);
//							emxLifecycle_mxJPO objLife = new emxLifecycle_mxJPO(context, argsSub);
//							mlTempTasks = (MapList)objLife.getAllTaskSignaturesOnObject(context, argsSub);
                            //Added for PDF Refactor
                            mlTempTasks= (MapList)pgPDFViewHelper.executeMainClassMethod(context, "emxLifecycle", "getAllTaskSignaturesOnObject", argsSub);
                            alTasks.add(mlTempTasks);
                        }
                    }
                }
                int cntFPPLimit = 0;
                //Added by DSM(Sogeti)-2015x.1 for PDF views For defect 4180 on 7-June-2016 - Starts
                StringBuffer sbTempTaskName = new StringBuffer();
                boolean isExists=false;
                //Added by DSM(Sogeti)-2015x.1 for PDF views For defect 4180 on 7-June-2016  - Ends
                for (Iterator cOIterator = alTasks.iterator(); cOIterator.hasNext();){
                    mlTasks = (MapList)cOIterator.next();
                    if(mlTasks!=null && mlTasks.size()>0)
                    {
                        mlTasks.addSortKey("Name", "ascending", "String");
                        mlTasks.sort();
                        Map object =null;
                        Map taskData = new HashMap();
                        for (Iterator iterator = mlTasks.iterator(); iterator.hasNext();) {
                            //Modify Code Refactoring
//							Map taskData = new HashMap();
                            taskData.clear();
                            object = (Map) iterator.next();
                            MapList objectList = new MapList();
                            taskData.put("name",(String)object.get("name"));
                            taskData.put("infoType",(String)object.get("infoType"));
                            taskData.put("taskId",(String)object.get("taskId"));
                            taskData.put("routeNodeId",(String)object.get("routeNodeId"));
                            taskData.put("routeId",(String)object.get("routeId"));
                            taskData.put("assigneeType",(String)object.get("assigneeType"));
                            taskData.put("routeTaskUser",(String)object.get("routeTaskUser"));
                            taskData.put("assigneeName",(String)object.get("assigneeName"));
                            taskData.put("signed",(String)object.get("signed"));
                            taskData.put("approver",(String)object.get("approver"));
                            taskData.put("title",(String)object.get("title"));
                            taskData.put("routeAction",(String)object.get("routeAction"));
                            taskData.put("currentState",(String)object.get("currentState"));
                            taskData.put("parentObjectState",(String)object.get("parentObjectState"));
                            taskData.put("routeStatus",(String)object.get("routeStatus"));
                            taskData.put("routeNodeId",(String)object.get("routeNodeId"));
                            taskData.put("approvalStatus",(String)object.get("approvalStatus"));
                            taskData.put("approved",(String)object.get("approved"));
                            taskData.put("rejected",(String)object.get("rejected"));
                            taskData.put("ignored",(String)object.get("ignored"));
                            taskData.put("completionDate",(String)object.get("completionDate"));
                            taskData.put("actualDate",(String)object.get("actualDate"));
                            //Added by DSM(Sogeti)-2018x.5 for PDF views requirement Starts
                            taskData.put("comments",(String)object.get("comments"));
                            taskData.put("instructions",(String)object.get("instructions"));
                            //Added by DSM(Sogeti)-2018x.5 for PDF views requirement Ends
                            objectList.add(taskData);
                            Map paramMap = new HashMap();
                            paramMap.put("reportFormat","PDF");
                            paramMap.put("languageStr", "en");
                            paramMap.put("objectId",strECId);
                            Map taskNamemap = new HashMap();
                            taskNamemap.put("objectList", objectList);
                            taskNamemap.put("paramList",paramMap);
                            String[] argsTaskName= JPO.packArgs(taskNamemap);
//							emxLifecycle_mxJPO objTaksName=new emxLifecycle_mxJPO(context, argsTaskName);
//							Vector mlTasksName=(Vector)objTaksName.getTaskOrSignatureForApprovals(context, argsTaskName);
                            //Added for PDF Refactor
                            Vector mlTasksName=(Vector)pgPDFViewHelper.executeMainClassMethod(context, "emxLifecycle", "getTaskOrSignatureForApprovals", argsTaskName);
                            String strTaskName = "";
                            for (int i = 0; i < mlTasksName.size(); i++){
                                strTaskName = (String)mlTasksName.get(i);
                                //Added by DSM(Sogeti)-2015x.1 for PDF views For defect 4180 on 7-June-2016 - Starts
                                if((strTaskName != null) &&  (!"".equals(strTaskName))){
                                    if(sbTempTaskName.indexOf(strTaskName) != -1 && !(((String)object.get("infoType")).equalsIgnoreCase("signature")))
                                        isExists=true;
                                    else
                                        sbTempTaskName.append(strTaskName);
                                }
                                //Added by DSM(Sogeti)-2015x.1 for PDF views For defect 4180 on 7-June-2016 - Ends
                            }
                            if(strTaskName != null &&  !"".equals(strTaskName)) {
                                //Added by DSM(Sogeti)-2015x.1 for PDF views For defect 4180 on 7-June-2016 - Starts
                                if(!isExists)
                                    cntFPPLimit++;
                                //Added by DSM(Sogeti)-2015x.1 for PDF views For defect 4180 on 7-June-2016 - Ends
                                alCurrentTasks.add(mlTasks);
                            }
                            //Modify Code Refactoring
                            mlTasksName.clear();
                            taskData.clear();
                        }
                    }
                }
                int cntFPP = 0;
                for (Iterator cOIterator = alCurrentTasks.iterator(); cOIterator.hasNext();) {
                    count++;
                    mlTasks = (MapList)cOIterator.next();
                    if(mlTasks!=null && mlTasks.size()>0){
                        mlTasks.addSortKey("Name", "ascending", "String");
                        mlTasks.sort();
                        Map object =null;
                        //Modify Code Refactoring
                        Map taskData = new HashMap();
                        for (Iterator iterator = mlTasks.iterator(); iterator.hasNext();){
//						Map taskData = new HashMap();
                            taskData.clear();
                            object = (Map) iterator.next();
                            MapList objectList = new MapList();
                            taskData.put("name",(String)object.get("name"));
                            taskData.put("infoType",(String)object.get("infoType"));
                            taskData.put("taskId",(String)object.get("taskId"));
                            taskData.put("routeNodeId",(String)object.get("routeNodeId"));
                            taskData.put("routeId",(String)object.get("routeId"));
                            //Added by DSM(Sogeti)-2018x.1 for PDF views For Incident INC2910747 on 19-March2019 - Starts
                            String routeId = (String)object.get("routeId");
                            if(routeId !=null)
                            {
                                DomainObject route = DomainObject.newInstance(context, routeId);
                                taskData.put("owner", route.getInfo(context,  DomainObject.SELECT_OWNER));
                            }
                            //Added by DSM(Sogeti)-2018x.1 for PDF views For Incident INC2910747 on 19-March2019 - Ends
                            taskData.put("assigneeType",(String)object.get("assigneeType"));
                            taskData.put("routeTaskUser",(String)object.get("routeTaskUser"));
                            taskData.put("assigneeName",(String)object.get("assigneeName"));
                            taskData.put("signed",(String)object.get("signed"));
                            taskData.put("approver",(String)object.get("approver"));
                            taskData.put("title",(String)object.get("title"));
                            taskData.put("routeAction",(String)object.get("routeAction"));
                            taskData.put("currentState",(String)object.get("currentState"));
                            taskData.put("parentObjectState",(String)object.get("parentObjectState"));
                            taskData.put("routeStatus",(String)object.get("routeStatus"));
                            taskData.put("routeNodeId",(String)object.get("routeNodeId"));
                            taskData.put("approvalStatus",(String)object.get("approvalStatus"));
                            taskData.put("approved",(String)object.get("approved"));
                            taskData.put("rejected",(String)object.get("rejected"));
                            taskData.put("ignored",(String)object.get("ignored"));
                            taskData.put("completionDate",(String)object.get("completionDate"));
                            taskData.put("actualDate",(String)object.get("actualDate"));
                            //Added by DSM(Sogeti)-2018x.5 for PDF views requirement Starts
                            taskData.put("comments",(String)object.get("comments"));
                            taskData.put("instructions",(String)object.get("instructions"));
                            //Added by DSM(Sogeti)-2018x.5 for PDF views requirement Ends
                            objectList.add(taskData);
                            Map paramMap = new HashMap();
                            paramMap.put("reportFormat","PDF");
                            paramMap.put("languageStr", "en");
                            paramMap.put("objectId",strECId);
                            Map taskNamemap = new HashMap();
                            taskNamemap.put("objectList", objectList);
                            taskNamemap.put("paramList",paramMap);
                            String[] argsTaskName= JPO.packArgs(taskNamemap);
//						emxLifecycle_mxJPO objTaksName=new emxLifecycle_mxJPO(context, argsTaskName);
//
//						Vector mlTasksName=(Vector)objTaksName.getTaskOrSignatureForApprovals(context, argsTaskName);
                            //Added for PDF Refactor
                            Vector mlTasksName=(Vector)pgPDFViewHelper.executeMainClassMethod(context, "emxLifecycle", "getTaskOrSignatureForApprovals", argsTaskName);
                            String strTaskName = "";
                            for (int i = 0; i < mlTasksName.size(); i++)
                            {
                                strTaskName = (String)mlTasksName.get(i);
                            }
                            if(strTaskName != null &&  !"".equals(strTaskName)) {
                                cntFPP++;
                                if(count == 1 && cntFPP == 1)
                                {
                                    objectPlantsBuffer.append("<TR><TD><TABLE class=\"pdf\" cellspacing=\"0\" width=\"1000px\" id=\"pgFinishedProductTable\">");
                                    objectPlantsBuffer.append("<thead>");
                                    objectPlantsBuffer.append("<TR><TD class=\"new\" colspan='7'><font size='4'><b>Lifecycle/Approval Powerview</b></font></TD></TR>");
                                    objectPlantsBuffer.append("<TR><TD align=\"left\" colspan='7' ><B><font size ='2'>Tasks/Signatures</font></B></TD></TR>");
                                    objectPlantsBuffer.append("<TR>");
                                    objectPlantsBuffer.append("<TD align=\"center\" width=\"166px\" ><B>Name</B></TD>");
                                    objectPlantsBuffer.append("<TD align=\"center\" width=\"166px\" ><B>Approver</B></TD>");
                                    objectPlantsBuffer.append("<TD align=\"center\" width=\"166px\" ><B>Title</B></TD>");
                                    objectPlantsBuffer.append("<TD align=\"center\" width=\"166px\" ><B>Approval Status</B></TD>");
                                    objectPlantsBuffer.append("<TD align=\"center\" width=\"166px\" ><B>Approval/Due Date</B></TD>");
                                    //Added by DSM(Sogeti)-2018x.5 for PDF views requirement Starts
                                    objectPlantsBuffer.append("<TD align=\"center\" width=\"166px\" ><B>Comments/Instructions</B></TD>");
                                    //Added by DSM(Sogeti)-2018x.5 for PDF views requirement Ends
                                    objectPlantsBuffer.append("</TR></thead>");


                                }
                                objectPlantsBuffer.append("<TR align=\"center\" class=\"pdf\">");
                                objectPlantsBuffer.append("<TD width=\"166px\">"+validateString1(strTaskName)+"</TD>");
//						Vector mlApproverName=(Vector)objTaksName.getAssigneeForApprovals(context, argsTaskName);
                                //Added for PDF Refactor
                                Vector mlApproverName=(Vector)pgPDFViewHelper.executeMainClassMethod(context, "emxLifecycle", "getAssigneeForApprovals", argsTaskName);
                                String strApproverName = "";
                                for (int i = 0; i < mlApproverName.size(); i++)
                                {
                                    strApproverName = (String)mlApproverName.get(i);
                                    strApproverName = (String)PersonUtil.getFullName(context,strApproverName);
                                }

                                objectPlantsBuffer.append("<TD width=\"166px\">"+validateString1(strApproverName)+"</TD>");



//						Vector mlTitle=(Vector)objTaksName.getTaskTitleForApprovals(context, argsTaskName);
                                //Added for PDF Refactor
                                Vector mlTitle=(Vector)pgPDFViewHelper.executeMainClassMethod(context, "emxLifecycle", "getTaskTitleForApprovals", argsTaskName);
                                String strTitle = "";
                                for (int i = 0; i < mlTitle.size(); i++)
                                {
                                    strTitle = (String)mlTitle.get(i);
                                }
                                //Added by DSM(Sogeti)-2015x.5 for PDF Views (Defect ID-16705) - Starts
                                if(UIUtil.isNullOrEmpty(strTitle)){
                                    strTitle = DomainConstants.EMPTY_STRING;
                                }
                                //Added by DSM(Sogeti)-2015x.5 for PDF Views (Defect ID-16705) - Ends
                                strTitle =strTitle.replaceAll("[<]","#LESS_THAN");
                                strTitle =strTitle.replaceAll("[>]","#GREATER_THAN");
                                objectPlantsBuffer.append("<TD width=\"166px\">"+validateString1(strTitle)+"</TD>");
                                //Modified by DSM(Sogeti)-2015x.5.1 for PDF Views (Defect-17635) - Starts
                                ContextUtil.popContext(context);


                                //Modified by DSM(Sogeti)-2015x.5.1 for PDF Views (Defect ID-19072) - Starts
                                //Modified by DSM(Sogeti)-2015x.5.1 October for PDF Views (Defect ID-21795) - Starts
                                strContext = context.getUser();
                                if((pgV3Constants.PERSON_USER_AGENT.equals(strContext)) && (!pgV3Constants.PERSON_USER_AGENT.equals(strCtxt))){
                                    ContextUtil.pushContext(context, strCtxt , "", "");
                                }


//						Vector mlApprovalStatus=(Vector)objTaksName.getActionForApprovals(context, argsTaskName);
                                //Added for PDF Refactor
                                Vector mlApprovalStatus=(Vector)pgPDFViewHelper.executeMainClassMethod(context, "emxLifecycle", "getActionForApprovals", argsTaskName);
                                //	ContextUtil.popContext(context);
                                //Modified by DSM(Sogeti)-2015x.5.1 October for PDF Views (Defect ID-21795) - Ends


                                //Modified by DSM(Sogeti)-2015x.5.1 for PDF Views (Defect ID-19072) - Ends
                                strContext = context.getUser();



                                if(!pgV3Constants.PERSON_USER_AGENT.equals(strContext)){
                                    ContextUtil.pushContext(context, pgV3Constants.PERSON_USER_AGENT , "", "");
                                }
                                //Modified by DSM(Sogeti)-2015x.5.1 for PDF Views (Defect-17635) - Ends
                                String strApprovalStatus = "";
                                for (int i = 0; i < mlApprovalStatus.size(); i++)
                                {
                                    strApprovalStatus = (String)mlApprovalStatus.get(i);
                                }

                                objectPlantsBuffer.append("<TD width=\"166px\">"+validateString1(strApprovalStatus)+"</TD>");
//						Vector mlApprovalDate=(Vector)objTaksName.getCompletedDateForApprovals(context, argsTaskName);
                                //Added for PDF Refactor
                                Vector mlApprovalDate=(Vector)pgPDFViewHelper.executeMainClassMethod(context, "emxLifecycle", "getCompletedDateForApprovals", argsTaskName);
                                String strApprovalDate = "";
                                for (int i = 0; i < mlApprovalDate.size(); i++)
                                {
                                    strApprovalDate = (String)mlApprovalDate.get(i);
                                }
                                objectPlantsBuffer.append("<TD width=\"166px\">"+validateString1(strApprovalDate)+"</TD>");

                                //Added by DSM(Sogeti)-2018x.5 for PDF views requirement Starts
                                Vector mlCommentInstrusction=(Vector)pgPDFViewHelper.executeMainClassMethod(context, "emxLifecycle", "getCommentsOrInstructionsForTaskSignatures", argsTaskName);
                                String strCommentInstrusction = DomainConstants.EMPTY_STRING;
                                for (int i = 0; i < mlCommentInstrusction.size(); i++)
                                {
                                    strCommentInstrusction = (String)mlCommentInstrusction.get(i);
                                }
                                if(!UIUtil.isNullOrEmpty(strCommentInstrusction)){
                                    strCommentInstrusction =strCommentInstrusction.replaceAll("[<]","#LESS_THAN");
                                    strCommentInstrusction =strCommentInstrusction.replaceAll("[>]","#GREATER_THAN");
                                }
                                objectPlantsBuffer.append("<TD width=\"166px\">"+validateString1(strCommentInstrusction)+"</TD>");

                                //Added by DSM(Sogeti)-2018x.5 for PDF views requirement Ends

                                objectPlantsBuffer.append("</TR>");

                                if(count == alCurrentTasks.size() && cntFPP == cntFPPLimit){
                                    objectPlantsBuffer.append("</TABLE><TR><TD><br /></TD></TR></TD></TR>");
                                }
                            }
                        }
                    }
                }
            }

        }
        catch (Exception e)
        {
            throw new MatrixException(e);
        }
        long endTime = new Date().getTime();
        System.out.println("Total Time has taken by the  getDSOTasksTable Method is-->"+(endTime-startTime));
        return objectPlantsBuffer;
    }

    /**
     * Retrieve Flat BOM
     * @param context
     * @param args
     * @return
     * @throws MatrixException
     */
    private StringBuilder getFlatBOM(Context context,String strObjectId, String strPDFViewKind) {
        long startTime = new Date().getTime();
        StringBuilder objectFlatBOMBuffer= new StringBuilder();
        boolean hasReadAccess =  false;
        try{
            if(validateString(strObjectId)){
                DomainObject domObj= DomainObject.newInstance(context,strObjectId);
                String sObjType = domObj.getInfo(context,DomainConstants.SELECT_TYPE);
                Map mFlatBOM= new HashMap();
                mFlatBOM.put("objectId", strObjectId);
                String[] argsflatBOM= JPO.packArgs(mFlatBOM);
                MapList mlFLATBOM;
                mlFLATBOM =(MapList)pgPDFViewHelper.executeMainClassMethod(context, "pgIPMSAPBOMJPO", "getTableData", argsflatBOM);
                String strName;
                String strId;
                String strType;
                String strSAPType;
                String strTitle;
                String strValue;
                String strSpecSubType = DomainConstants.EMPTY_STRING;
                String strBOMQUT;
                String strBUOM;
                Map<String,String> mpObjNameSST;
                Map mpBOMSubsSST;
                MapList mlObjListNameSST;
                String strSubGrp;

                if(mlFLATBOM != null && !mlFLATBOM.isEmpty()){
                    objectFlatBOMBuffer.append("<TR><TD><TABLE class=\"WordWrappdf\" cellspacing=\"0\" width=\"1000px\" id=\"FLATBOM\">");
                    objectFlatBOMBuffer.append("<thead>");
                    objectFlatBOMBuffer.append("<TR><TD colspan='10' class=\"new\" ><font size='4'><b>SAP BOM as Fed<br /></b></font></TD></TR>");
                    objectFlatBOMBuffer.append("<TR>");
                    objectFlatBOMBuffer.append("<TD align=\"center\" width=\"100px\" ><B>Name</B></TD>");
                    objectFlatBOMBuffer.append("<TD align=\"center\" width=\"100px\" ><B>SAP Description</B></TD>");
                    objectFlatBOMBuffer.append("<TD align=\"center\" width=\"100px\" ><B>Type</B></TD>");
                    objectFlatBOMBuffer.append("<TD align=\"center\" width=\"100px\" ><B>Specification <br/>SubType</B></TD>");
                    objectFlatBOMBuffer.append("<TD align=\"center\" width=\"100px\" ><B>SAP Type</B></TD>");
                    objectFlatBOMBuffer.append("<TD align=\"center\" width=\"100px\" ><B>Substitute/<br/>Alternate<br/> Grouping</B></TD>");
                    if (pgV3Constants.TYPE_FABRICATEDPART.equals(sObjType)){
                        objectFlatBOMBuffer.append("<TD align=\"center\" width=\"100px\" ><B>BOM Quantity</B></TD>");
                    //Modified by DSM-2022x.6 for PDF Views(Defect-56657) - Start
                    } else if(!sObjType.contains(pgV3Constants.TYPE_FINISHEDPRODUCTPART) && !sObjType.contains(pgV3Constants.TYPE_PACKAGINGASSEMBLYPART)) {
                    	objectFlatBOMBuffer.append("<TD align=\"center\" width=\"100px\" ><B>BOM Minimum<br/> Quantity (Min)<br/>BOM Quantity<br/>(BQ)<br/>BOM Maximum<br/> Quantity (Max)</B></TD>");
                    } else if(sObjType.contains(pgV3Constants.TYPE_FINISHEDPRODUCTPART) || sObjType.contains(pgV3Constants.TYPE_PACKAGINGASSEMBLYPART)) {
						 objectFlatBOMBuffer.append("<TD align=\"center\" width=\"100px\" ><B>BOM Quantity<br/>(BQ)</B></TD>");
					}
					//Modified by DSM-2022x.6 for PDF Views(Defect-56657) - End
                    objectFlatBOMBuffer.append("<TD align=\"center\" width=\"100px\" ><B>Base Unit of <br/>Measure(BUoM) <br/>Optional<br/>Component <br/>(OC)</B></TD>");
                    objectFlatBOMBuffer.append("<TD align=\"center\" width=\"100px\" ><B>Transport<br/>Unit</B></TD>");
                    objectFlatBOMBuffer.append("<TD align=\"center\" width=\"100px\" ><B>Comments</B></TD>");
                    objectFlatBOMBuffer.append("</TR></thead>");
                    objectFlatBOMBuffer.append("<tbody>");

                    for(Iterator FlatBOMItr = mlFLATBOM.iterator(); FlatBOMItr.hasNext();) {
                        Map mpFlatBOM = (Map)FlatBOMItr.next();
                        strName = (String)mpFlatBOM.get(DomainConstants.SELECT_NAME);
                        DomainObject domObject = DomainObject.newInstance(context);
                        strId = (String)mpFlatBOM.get(DomainConstants.SELECT_ID);
                        domObject.setId(strId);
                        hasReadAccess = domObject.checkAccess(context, (short) AccessConstants.cRead);
                        if(hasReadAccess) {
                            strTitle = (String)mpFlatBOM.get(DomainConstants.SELECT_DESCRIPTION);
                            if(UIUtil.isNullOrEmpty(strTitle)){
                                strTitle = DomainConstants.EMPTY_STRING;
                            }
                        } else {
                            strTitle = pgV3Constants.NO_ACCESS;
                        }

                        strSAPType = (String)mpFlatBOM.get("SAPType");
                        strBOMQUT = (String)mpFlatBOM.get("BOMQty");
                        strType = (String)mpFlatBOM.get(DomainConstants.SELECT_TYPE);
                        strSubGrp = (String)mpFlatBOM.get("substitute");
                        strBUOM = (String)mpFlatBOM.get("SAPUOM");
                        strTitle = strTitle.replaceAll("[<]","#LESS_THAN");
                        strValue = UINavigatorUtil.getAdminI18NString("Type", strType, context.getSession().getLanguage());
                        mpObjNameSST = new HashMap<>();
                        mpObjNameSST.put(DomainConstants.SELECT_ID,strId);
                        mpObjNameSST.put(DomainConstants.SELECT_TYPE,strType);
                        mlObjListNameSST = new MapList();
                        mlObjListNameSST.add(mpObjNameSST);
                        mpBOMSubsSST = new HashMap<>();
                        mpBOMSubsSST.put("objectList", mlObjListNameSST);
                        String[] argsSubsSST = JPO.packArgs(mpBOMSubsSST);
                        Vector vEBOMSubSpecSubType = (Vector)pgPDFViewHelper.executeMainClassMethod(context, "pgIPMTablesJPO", "getSpecificationSubtype", argsSubsSST);
                        if((vEBOMSubSpecSubType != null) && !vEBOMSubSpecSubType.isEmpty())
                            strSpecSubType = (String)vEBOMSubSpecSubType.get(0);
                        objectFlatBOMBuffer.append("<TR>");
                        objectFlatBOMBuffer.append("<TD width=\"100px\">"+validateString1(strName)+"</TD>");
                        objectFlatBOMBuffer.append("<TD width=\"100px\">"+checkLessThanGreaterThan(validateString1(strTitle))+"</TD>");
                        objectFlatBOMBuffer.append("<TD width=\"100px\">"+validateString1(strValue)+"</TD>");
                        objectFlatBOMBuffer.append("<TD width=\"100px\">"+validateString1(strSpecSubType)+"</TD>");
                        objectFlatBOMBuffer.append("<TD width=\"100px\">"+validateString1(strSAPType)+"</TD>");
                        objectFlatBOMBuffer.append("<TD width=\"100px\">"+validateString1(strSubGrp)+"</TD>");
                        if (pgV3Constants.TYPE_FABRICATEDPART.equals(sObjType)){
                            objectFlatBOMBuffer.append("<TD width=\"100px\">"+validateString1(strBOMQUT)+"</TD>");
                        //Modified by DSM-2022x.6 for PDF Views(Defect-56657) - Start
                        } else if(!sObjType.contains(pgV3Constants.TYPE_FINISHEDPRODUCTPART) && !sObjType.contains(pgV3Constants.TYPE_PACKAGINGASSEMBLYPART)) {
                            objectFlatBOMBuffer.append("<TD width=\"100px\"><B>Min:</B>"+validateString1(mpFlatBOM.get("Min"))+"<br/><B>BQ:</B>"+validateString1(strBOMQUT)+"<br/><B>Max:</B>"+validateString1(mpFlatBOM.get("Max"))+"</TD>");
                        } else if(sObjType.contains(pgV3Constants.TYPE_FINISHEDPRODUCTPART) || sObjType.contains(pgV3Constants.TYPE_PACKAGINGASSEMBLYPART)) {
                        	objectFlatBOMBuffer.append("<TD width=\"100px\"><B>BQ:</B>"+validateString1(strBOMQUT)+"</TD>");
                    	}
                    	//Modified by DSM-2022x.6 for PDF Views(Defect-56657) - End
                        objectFlatBOMBuffer.append("<TD width=\"100px\"><B>BUoM:</B>"+validateString1(strBUOM)+"<br/><B>OC:</B>"+validateString1(mpFlatBOM.get("OptComponent"))+"</TD>");
                        String strTUPName = DomainConstants.EMPTY_STRING;
                        String sTUPId = (String)mpFlatBOM.get("TUP_ID");
                        if(UIUtil.isNotNullAndNotEmpty(sTUPId)) {
                            domObject.setId(sTUPId);
                            strTUPName = domObject.getInfo(context, DomainConstants.SELECT_NAME);
                        }
                        objectFlatBOMBuffer.append("<TD width=\"100px\">"+validateString1(strTUPName)+"</TD>");
                        objectFlatBOMBuffer.append("<TD width=\"100px\">"+checkLessThanGreaterThan(validateString1(mpFlatBOM.get("Comment")))+"</TD>");
                        objectFlatBOMBuffer.append("</TR>");
                    }
                    objectFlatBOMBuffer.append("</tbody>");
                    objectFlatBOMBuffer.append("</TABLE><TR><TD><br /></TD></TR></TD></TR>");
                }
                mlFLATBOM.clear();
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        long endTime = new Date().getTime();
        System.out.println("Total Time has taken by the  getFlatBOM Method is-->"+(endTime-startTime));
        return objectFlatBOMBuffer;
    }
    /**
     * Retrieve Parent data in EBOM hierarchy for FPP
     * @param context
     * @param args
     * @return
     * @throws Exception
     */
    public ArrayList getParentEBOMsWOIntermediateObjects(Context context, String strObjectId, ArrayList alEBOMParents, String strLevel) throws Exception {
        long startTime = new Date().getTime();
        MapList mlConnectedEBOMParents = new MapList();
        try {
            //Added by DSM(Sogeti)-2018x.6 June CW 2022 for PDF Views (Defect-49089/49098) - Starts
            StringList parentBusSelects = new StringList(2);
            parentBusSelects.addElement(DomainConstants.SELECT_TYPE);
            parentBusSelects.addElement(DomainConstants.SELECT_NAME);
            //Added by DSM(Sogeti)-2018x.6 June CW 2022 for PDF Views (Defect-49089/49098) - Ends
            StringList busSelects = new StringList(1);
            StringList relSelects = new StringList(1);
            busSelects.addElement(DomainConstants.SELECT_ID);
            relSelects.addElement(DomainConstants.SELECT_RELATIONSHIP_ID);
            //Modified by DSM(Sogeti)-2018x.6 June CW 2022 for PDF Views (Defect-49089/49098) - Starts
            relSelects.addElement(pgV3Constants.SELECT_ATTRIBUTE_FINDNUMBER);
            //Modified by DSM(Sogeti)-2018x.6 June CW 2022 for PDF Views (Defect-49089/49098) - Ends
            DomainObject domObject = DomainObject.newInstance(context, strObjectId);
            //Modify by DSM(Sogeti) 2018x.6.1 Defect #43129 - Starts
            boolean hasReadAccess = domObject.checkAccess(context, (short) AccessConstants.cRead);
            if(hasReadAccess)
            {
                //Modified by DSM(Sogeti)-2018x.6 June CW 2022 for PDF Views (Defect-49089/49098) - Starts
                Map dataMap = domObject.getInfo(context, parentBusSelects);
                String strParentType = (String) dataMap.get(DomainConstants.SELECT_TYPE);
                String strParentName = (String)dataMap.get(DomainConstants.SELECT_NAME);
                //Modified by DSM(Sogeti)-2018x.6 June CW 2022 for PDF Views (Defect-49089/49098) - Ends
                mlConnectedEBOMParents = domObject.getRelatedObjects(context, //Context
                        DomainConstants.RELATIONSHIP_EBOM, //relPattern
                        "*", //typePattern
                        busSelects, //objectSelects
                        relSelects,// relationshipSelects
                        false, //getTo - Get Parent Data
                        true, //getFrom - Get Child Data
                        (short)1, //recurseToLevel
                        "", //objectWhere
                        ""); //relationshipWhere

                //Added by DSM(Sogeti)-2018x.6 June CW 2022 for PDF Views (Defect-49089/49098) - Starts
                mlConnectedEBOMParents.addSortKey(pgV3Constants.SELECT_ATTRIBUTE_FINDNUMBER, pgPDFViewConstants.CONST_ASCENDING, pgPDFViewConstants.CONST_STRING);
                mlConnectedEBOMParents.sort();
                //Added by DSM(Sogeti)-2018x.6 June CW 2022 for PDF Views (Defect-49089/49098) - Ends
                if(mlConnectedEBOMParents != null && !mlConnectedEBOMParents.isEmpty()) {
                    for(Iterator connectedEBOMParentsItr = mlConnectedEBOMParents.iterator(); connectedEBOMParentsItr.hasNext();) {
                        Map mpConnectedEBOMParents = (Map)connectedEBOMParentsItr.next();
                        String strParentId = (String)mpConnectedEBOMParents.get(DomainConstants.SELECT_ID);
                        String strRelId = (String)mpConnectedEBOMParents.get(DomainConstants.SELECT_RELATIONSHIP_ID);
                        String strBomLeveL = (String)mpConnectedEBOMParents.get(DomainConstants.SELECT_LEVEL);
                        if("First".equals(strLevel)) {
                            //Modified by DSM(Sogeti)-2018x.5 for PDF Views Requirements - Starts
                            //Modified by DSM(Sogeti)-2018x.6 June CW 2022 for PDF Views (Defect-49089/49098) - Starts
                            alEBOMParents.add("MAIN|"+strParentId+"|"+strRelId+"|"+strBomLeveL+"|"+strObjectId+"|"+strParentName);
                            alEBOMParents = getParentEBOMsWOIntermediateObjects(context, strParentId, alEBOMParents, "NotFirst");
                        } else {
                            if(pgV3Constants.TYPE_PGCONSUMERUNITPART.equals(strParentType)) {
                                alEBOMParents.add("COP|"+strParentId+"|"+strRelId+"|"+strBomLeveL+"|"+strObjectId+"|"+strParentName);

                                //Modified by DSM(Sogeti)-2015x.5.1 for PDF Views (Req - 20961,20915) - Starts
                                //alEBOMParents = getParentEBOMsWOIntermediateObjects(context, strParentId, alEBOMParents, "NotFirst");
                                //Modified by DSM(Sogeti)-2015x.5.1 for PDF Views (Req - 20961,20915) - Ends
                            } else if(pgV3Constants.TYPE_PGCUSTOMERUNITPART.equals(strParentType)) {
                                alEBOMParents.add("CUP|"+strParentId+"|"+strRelId+"|"+strBomLeveL+"|"+strObjectId+"|"+strParentName);
                                alEBOMParents = getParentEBOMsWOIntermediateObjects(context, strParentId, alEBOMParents, "NotFirst");
                            } else if( pgV3Constants.TYPE_PGINNERPACKUNITPART.equals(strParentType)) {
                                alEBOMParents.add("IP|"+strParentId+"|"+strRelId+"|"+strBomLeveL+"|"+strObjectId+"|"+strParentName);
                                //Modified by DSM(Sogeti)-2018x.5 for PDF Views Requirements - Ends
                                alEBOMParents = getParentEBOMsWOIntermediateObjects(context, strParentId, alEBOMParents, "NotFirst");
                                //Modified by DSM(Sogeti)-2018x.6 June CW 2022 for PDF Views (Defect-49089/49098) - Ends
                            }
                        }
                    }
                }
            }
            //Modify by DSM(Sogeti) 2018x.6.1 Defect #43129 - Ends
        } catch(Exception ex) {
            ex.printStackTrace();
        }
        long endTime = new Date().getTime();
        System.out.println("Total Time has taken by the getParentEBOMsWOIntermediateObjects Method is-->"+(endTime-startTime));
        return alEBOMParents;
    }
    /**
     * Retrieve BOM and substitute information for FPP
     * @param context
     * @param args
     * @return
     * @throws MatrixException
     */
    private  StringBuilder  getBillOfMaterialSubstituteAndSAPBOMDataFPP(Context context, String IPSId, String pdfViewType) throws MatrixException{
        long startTime = new Date().getTime();
        boolean isPushContext = false;
        StringBuilder BOMSubstituteSAPBuffer=new StringBuilder();
        try{
            //Modified by DSM(Sogeti)-2015x.4 for PDF Views (5706) - Starts
            StringList selectStmtsRel = new StringList(5);
            selectStmtsRel.add(DomainRelationship.SELECT_TO_ID );
            selectStmtsRel.add(pgV3Constants.SELECT_ATTRIBUTE_PGCHANGE);
            selectStmtsRel.add(pgV3Constants.SELECT_ATTRIBUTE_FINDNUMBER);
            selectStmtsRel.add(pgV3Constants.SELECT_ATTRIBUTE_REFERENCEDESIGNATOR);
            selectStmtsRel.add(pgV3Constants.SELECT_ATTRIBUTE_PGOPTIONALCOMPONENT);
            StringList selectStmt = new StringList(6);
            selectStmt.add(DomainConstants.SELECT_NAME);
            selectStmt.add(DomainConstants.SELECT_TYPE);
            selectStmt.add(DomainConstants.SELECT_ID);
            selectStmt.add(pgV3Constants.SELECT_ATTRIBUTE_TITLE);
            selectStmt.add(DomainConstants.SELECT_CURRENT);
            //Modified for 2018x Upgrade - Stage attribute is replaced by Release Phase attribute in 18x OOTB.
            selectStmt.add(pgV3Constants.SELECT_ATTRIBUTE_RELEASE_PHASE);

            //Modified by DSM(Sogeti)-2015x.5.1 for PDF Views (5691) - Starts
            selectStmt.add(DomainConstants.SELECT_REVISION);
            selectStmt.add(pgV3Constants.SELECT_ATTRIBUTE_RELEASE_DATE);
            //Modified by DSM(Sogeti)-2015x.5.1 for PDF Views (5691) - End
            //Added by DSM(Sogeti) for 2018x.2 Defect 29255 - Starts
            selectStmt.add(pgV3Constants.SELECT_POLICY);
            //Added by DSM(Sogeti) for 2018x.2 Defect 29255 -  Ends
            //Added by DSM(Sogeti) - for 2022x.02 May CW PDF Views Req#46172 - Starts
            selectStmt.add(pgPDFViewConstants.SELECT_ATTRIBUTE_PGRELATIONSHIPRESTRICTION);
            selectStmt.add(pgPDFViewConstants.SELECT_ATTRIBUTE_PGRELATIONSHIPRESTRICTIONCOMMENTS);
            //Added by DSM(Sogeti) - for 2022x.02 May CW PDF Views Req#46172 - Ends
            long startTime1 = new Date().getTime();


            //Modified by DSM(Sogeti)-2015x.5.1 for PDF Views (Def - 17089) - Starts
            //Added/Modified by DSM Sogeti for 2018x.6 Apr CW 2022 for PDF Views (Req -41367) - Starts
            StringList objectSelects = new StringList(2);
            objectSelects.addElement(DomainConstants.SELECT_TYPE);
            objectSelects.addElement(pgV3Constants.SELECT_ATTRIBUTE_PGSAPTYPE);
            DomainObject dob = DomainObject.newInstance(context,IPSId);
            Map dataMap =  new HashMap();
            dataMap = dob.getInfo(context, objectSelects);
            String strContType = (String) dataMap.get(DomainConstants.SELECT_TYPE);
            String strSAPType = (String) dataMap.get(pgV3Constants.SELECT_ATTRIBUTE_PGSAPTYPE);
            strParentObjType = strContType;
            strFPPviewType = pdfViewType;
            //Added/Modified by DSM Sogeti for 2018x.6 Apr CW 2022 for PDF Views (Req -41367) - Ends
            //Modified by DSM(Sogeti)-2015x.5.1 for PDF Views (Def - 17089) - Ends

            ArrayList alEBOMParents = getParentEBOMsWOIntermediateObjects(context, IPSId, new ArrayList(), "First");
            long endTime1 = new Date().getTime();
            System.out.println("Total Time has taken after executing getParentEBOMsWOIntermediateObjects method is-->"+(endTime1-startTime1));
            //Modified by DSM(Sogeti) for Code Optimization Start
            String strParentId = DomainConstants.EMPTY_STRING;
            //Added by DSM(Sogeti)-2018x.6 June CW 2022 for PDF Views (Defect-49089/49098) - Starts
            String strParentName = DomainConstants.EMPTY_STRING;
            StringList dataList = new StringList();
            String strCOPData = DomainConstants.EMPTY_STRING;
            Map<String,StringList> mapCOP = new LinkedHashMap<>();
            StringList list = new StringList();
            String strIPData = DomainConstants.EMPTY_STRING;
            Map<String,StringList> mapIP = new LinkedHashMap<>();
            StringList objectList = new StringList();
            Map<String,StringList> mapCUP = new LinkedHashMap<>();
            String strCUPData = DomainConstants.EMPTY_STRING;
            String headerName = DomainConstants.EMPTY_STRING;
            String parentName = DomainConstants.EMPTY_STRING;
            Set set = new LinkedHashSet<>();
            //Added by DSM(Sogeti)-2018x.6 June CW 2022 for PDF Views (Defect-49089/49098) - Ends
            String strRelId = DomainConstants.EMPTY_STRING;
            String strType=DomainConstants.EMPTY_STRING;
            String strToId =DomainConstants.EMPTY_STRING;
            String strpgChange = DomainConstants.EMPTY_STRING;
            String strFindNumber = DomainConstants.EMPTY_STRING;
            String strRefDesig = DomainConstants.EMPTY_STRING;
            String strOptComp = DomainConstants.EMPTY_STRING;
            String strlevel = DomainConstants.EMPTY_STRING;
            String strEBOMData = DomainConstants.EMPTY_STRING;
            //Added by DSM(Sogeti)-2018x.5 for PDF Views Requirements - Starts
            String strIntermediatePartId = DomainConstants.EMPTY_STRING;
            //Added by DSM(Sogeti)-2018x.5 for PDF Views Requirements - Ends
            String strid = DomainConstants.EMPTY_STRING;
            //Modified by DSM(Sogeti)-2015x.4 for PDF Views (Defect - 12926) - Starts
            String strTUName = DomainConstants.EMPTY_STRING;
            //Modified by DSM(Sogeti)-2015x.4 for PDF Views (Defect - 12926) - Ends
            //Modified by DSM(Sogeti) for Code Optimization End
            StringList slMainEBOM = new StringList();
            StringList slCOPEBOM = new StringList();
            StringList slCUPEBOM = new StringList();
            StringList slIPEBOM = new StringList();
            MapList mlMain = new MapList();
            MapList mlTP = new MapList();
            //Added by DSM(Sogeti)-2015x.1.2 for FPP allinfo view defect-7319 on 18-Oct-2016 - Starts
            ArrayList alCOPEBOMMaster = new ArrayList();
            ArrayList alCUPEBOMMaster = new ArrayList();
            ArrayList alIPEBOMMaster = new ArrayList();
            ArrayList alCOPEBOMMasterTemp = new ArrayList();
            ArrayList alCUPEBOMMasterTemp = new ArrayList();
            ArrayList alIPEBOMMasterTemp = new ArrayList();
            String strParentType = null;
            StringBuilder dynamicTableHTMLBufferMaster = null;
            //Added by DSM(Sogeti)-2015x.1.2 for FPP allinfo view defect-7319 on 18-Oct-2016 - Ends
            Map mpBom = new HashMap();
            MapList mlSub = null;
            int cntFPP = 0;
            boolean bFPPTable = false;
            //Modified by DSM(Sogeti)-2018x.5 for PDF Views Requirement  - Starts
            boolean bGenDoc = false;
            if("GenDoc".equalsIgnoreCase(pdfViewType)){
                bGenDoc = true;
            }
            //Modified by DSM(Sogeti)-2018x.5 for PDF Views Requirement  - Ends
            DomainObject dmoBom = null;
            //Modified by DSM(Sogeti)-2018x.6 June CW 2022 for PDF Views (Defect-49089/49098) - Starts
            StringList dataLists = new StringList();
            dataLists.add(DomainConstants.SELECT_TYPE);
            dataLists.add(DomainConstants.SELECT_NAME);
            DomainObject domParent;
            Map parentMap;
            //Modified by DSM(Sogeti)-2018x.6 June CW 2022 for PDF Views (Defect-49089/49098) - End
            
            for (int i = 0; i < alEBOMParents.size(); i++) {
                strEBOMData = (String)alEBOMParents.get(i);
                StringTokenizer stEBOMData = new StringTokenizer(strEBOMData, pgV3Constants.DUMP_CHARACTER);
                if(stEBOMData.hasMoreTokens()) {
                    strType = (String)stEBOMData.nextToken();
                    strParentId = (String)stEBOMData.nextToken();
                    strRelId = (String)stEBOMData.nextToken();
                    strlevel = (String)stEBOMData.nextToken();
                    //Modified by DSM(Sogeti)-2018x.5 for PDF Views Requirements - Starts
                    strIntermediatePartId = (String)stEBOMData.nextToken();
                    //Modified by DSM(Sogeti)-2018x.6 June CW 2022 for PDF Views (Defect-49089/49098) - Starts
                    strParentName = stEBOMData.nextToken();
                    if("MAIN".equals(strType)) {
                        slMainEBOM.add(strParentId+pgV3Constants.DUMP_CHARACTER+strType+pgV3Constants.DUMP_CHARACTER+strRelId+pgV3Constants.DUMP_CHARACTER+strlevel+pgV3Constants.DUMP_CHARACTER+strIntermediatePartId+"|"+strParentName);
                    } else if("COP".equals(strType)) {
                        slCOPEBOM.add(strParentId+pgV3Constants.DUMP_CHARACTER+strType+pgV3Constants.DUMP_CHARACTER+strRelId+pgV3Constants.DUMP_CHARACTER+strlevel+pgV3Constants.DUMP_CHARACTER+strIntermediatePartId+"|"+strParentName);
                    } else if("CUP".equals(strType)) {
                        slCUPEBOM.add(strParentId+pgV3Constants.DUMP_CHARACTER+strType+pgV3Constants.DUMP_CHARACTER+strRelId+pgV3Constants.DUMP_CHARACTER+strlevel+pgV3Constants.DUMP_CHARACTER+strIntermediatePartId+"|"+strParentName);
                    } else if("IP".equals(strType)) {
                        slIPEBOM.add(strParentId+pgV3Constants.DUMP_CHARACTER+strType+pgV3Constants.DUMP_CHARACTER+strRelId+pgV3Constants.DUMP_CHARACTER+strlevel+pgV3Constants.DUMP_CHARACTER+strIntermediatePartId+"|"+strParentName);
                    }
                    //Modified by DSM(Sogeti)-2018x.6 June CW 2022 for PDF Views (Defect-49089/49098) - Ends
                    //Modified by DSM(Sogeti)-2018x.5 for PDF Views Requirements - Ends
                    //Added by DSM(Sogeti)-2015x.1.2 for FPP allinfo view defect-7319 on 18-Oct-2016 - Starts
                    //Modified by DSM(Sogeti)-2018x.6 June CW 2022 for PDF Views (Defect-49089/49098) - Starts
                    domParent = DomainObject.newInstance(context,strParentId);
                    parentMap =  domParent.getInfo(context, dataLists);
                    strParentType = (String) parentMap.get(DomainConstants.SELECT_TYPE);
                    parentName = (String) parentMap.get(DomainConstants.SELECT_NAME);

                    if(pgV3Constants.TYPE_PGCONSUMERUNITPART.equalsIgnoreCase(strParentType)){
                        alCOPEBOMMasterTemp = getMasterObjectsForDSO(context,strParentId,parentName);
                        if(null != alCOPEBOMMasterTemp) {
                            alCOPEBOMMaster.addAll(alCOPEBOMMasterTemp);
                        }

                    }else if(pgV3Constants.TYPE_PGCUSTOMERUNITPART.equalsIgnoreCase(strParentType)){
                        alCUPEBOMMasterTemp = getMasterObjectsForDSO(context,strParentId,parentName);
                        if(null != alCUPEBOMMasterTemp)
                            alCUPEBOMMaster.addAll(alCUPEBOMMasterTemp);
                    }else if(pgV3Constants.TYPE_PGINNERPACKUNITPART.equalsIgnoreCase(strParentType)){
                        alIPEBOMMasterTemp = getMasterObjectsForDSO(context,strParentId,parentName);
                        if(null != alIPEBOMMasterTemp)
                            alIPEBOMMaster.addAll(alIPEBOMMasterTemp);
                    }
                    //Modified by DSM(Sogeti)-2018x.6 June CW 2022 for PDF Views (Defect-49089/49098) - Ends
                    //Added by DSM(Sogeti)-2015x.1.2 for FPP allinfo view defect-7319 on 18-Oct-2016 - Ends
                }
            }



            if(null!=slMainEBOM && slMainEBOM.size() > 0){
                //Modify Code Refactoring
                //				mlMain = new MapList();
                mlMain = getBOMRelData(context,slMainEBOM);

                if(null!=mlMain && mlMain.size() > 0){
                    BOMSubstituteSAPBuffer.append("<TR><TD><TABLE class=\"WordWrappdf\" cellspacing=\"0\" width=\"1000px\" id=\"BOM\">");
                    BOMSubstituteSAPBuffer.append("<thead><TR>");
                    if(pdfViewType.contains("consolidatedpackaging")) {
                        //Modified by DSM(Sogeti)-2018x.5 for PDF Views Requirement  - Starts
                        //Modified by DSM(Sogeti)-2018x.6 for PDF Views Defect 39959  - Starts
                        BOMSubstituteSAPBuffer.append("<TR><TD class=\"new\" colspan='13'><B><font size ='4'>Bill of Materials Finished Product Part</font></B></TD></TR>");
                        //Modified by DSM(Sogeti)-2018x.6 for PDF Views Defect 39959  - Ends
                        //Modified by DSM(Sogeti)-2018x.5 for PDF Views Requirement  - Ends
                    } else {
                        //Added by DSM(Sogeti)-2018x.6 for PDF Views Requirement #41367  - Starts
                        //Modified (colspan) by DSM(Sogeti)-2015x.5.1 for PDF Views (5691) - Start
                        BOMSubstituteSAPBuffer.append("<TR><TD class=\"new\" colspan='14'><B><font size ='4'>Bill of Materials</font></B></TD></TR>");
                        //Modified (colspan) by DSM(Sogeti)-2015x.5.1 for PDF Views (5691) - End
                        //Added by DSM(Sogeti)-2018x.6 for PDF Views Requirement #41367  - Ends
                    }
                    //Modified by DSM(Sogeti)-2015x.4 for PDF Views (Req - 5691) - Starts
                    //Modified by DSM ( Sogeti) for 2018x.5 PDF Defect - 33102 : Starts
                    //Added by DSM Sogeti for 2018x.6 Apr CW 2022 for PDF Views (Req -41367) - Starts
                    BOMSubstituteSAPBuffer.append(getBillofMaterialTableHeader(context,mlMain,pdfViewType,IPSId,strContType,strSAPType));
                    //Added by DSM Sogeti for 2018x.6 Apr CW 2022 for PDF Views (Req -41367) - Ends
                    //Modified by DSM ( Sogeti) for 2018x.5 PDF Defect - 33102 : Ends
                    //Modified by DSM(Sogeti)-2015x.4 for PDF Views (Req - 5691) - Ends
                    BOMSubstituteSAPBuffer.append("</TR></thead>");
                    //Modified by DSM(Sogeti)-2015x.4 for PDF Views (Req - 5691) - Starts
                    //Modified by DSM ( Sogeti) for 2018x.5 PDF Defect - 33102 : Starts
                    //Added by DSM Sogeti for 2018x.6 Apr CW 2022 for PDF Views (Req -41367) - Starts
                    BOMSubstituteSAPBuffer.append(getEBOMTablewithData(context,mlMain,pdfViewType,IPSId,strContType,strSAPType));
                    //Added by DSM Sogeti for 2018x.6 Apr CW 2022 for PDF Views (Req -41367) - Ends
                    //Modified by DSM ( Sogeti) for 2018x.5 PDF Defect - 33102 : Ends
                    //Modified by DSM(Sogeti)-2015x.4 for PDF Views (Req - 5691) - Ends
                    BOMSubstituteSAPBuffer.append("</TABLE><TR><TD><br /></TD></TR></TD></TR>");
                    //Substitute
                    cntFPP = 0;
                    bFPPTable = false;
                    for (Iterator iterator = mlMain.iterator(); iterator.hasNext();){
                        Map mapFPP = (Map) iterator.next();
                        strParentId = (String)mapFPP.get("ParentId");
                        mlSub = new MapList();
                        mlSub = getSubstituteData(context, mapFPP);
                        if(null != mlSub && mlSub.size()>0){
                            cntFPP++;
                            if( cntFPP == 1){
                                bFPPTable = true;
                                BOMSubstituteSAPBuffer.append("<TR><TD><TABLE class=\"WordWrappdf\" cellspacing=\"0\" width=\"1000px\" id=\"BOM\">");
                                BOMSubstituteSAPBuffer.append("<thead>");
                                if(pdfViewType.contains("consolidatedpackaging")) {
                                    //Modified by DSM(Sogeti)-2018x.5 for PDF Views Requirement  - Starts
                                    BOMSubstituteSAPBuffer.append("<TR><TD class=\"new\"  colspan='14'><B><font size ='4'>Substitutes <I>Finished Product Part</I></font></B></TD></TR>");
                                } else {
                                    BOMSubstituteSAPBuffer.append("<TR><TD class=\"new\"  colspan='14'><B><font size ='4'>Substitutes </font></B></TD></TR>");
                                    //Modified by DSM(Sogeti)-2018x.5 for PDF Views Requirement  - Ends
                                }
                                //Modified by DSM(Sogeti)-2015x.4 for PDF Views (Req - 5706) - Starts
                                BOMSubstituteSAPBuffer.append(getBOMSubstitueTableHeader(context,mlMain,pdfViewType,IPSId));
                                //Modified by DSM(Sogeti)-2015x.4 for PDF Views (Req - 5706) - Ends
                                BOMSubstituteSAPBuffer.append("</TR></thead>");
                            }
                            for (Iterator objIterator = mlSub.iterator(); objIterator.hasNext();){
                                Map mapSub = (Map) objIterator.next();
                                //Modified by DSM(Sogeti)-2018x.5 for PDF Views Requirement  - Starts
                                //Modified by DSM Sogeti for 2022x.02 May CW for PDF Views (Req -46172) - Starts
                                BOMSubstituteSAPBuffer.append(getSubstituteTablewithData(context, mapSub,strParentId,bGenDoc,pdfViewType));
                                //Modified by DSM Sogeti for 2022x.02 May CW for PDF Views (Req -46172) - Ends
                             	//Modified by DSM(Sogeti)-2018x.5 for PDF Views Requirement  - Ends
                            }
                        }
                    }
                    if(bFPPTable){
                        BOMSubstituteSAPBuffer.append("</TABLE><TR><TD><br /></TD></TR></TD></TR>");
                    }
                }
            }
            //CUP BOM
            //Modified by DSM(Sogeti)-2018x.6 June CW 2022 for PDF Views (Defect-49089/49098) - Starts
            set = new LinkedHashSet();
            set.addAll(slCUPEBOM);
            slCUPEBOM.clear();
            slCUPEBOM.addAll(set);
            int slCUPEBOMSize = slCUPEBOM.size();
            for (int j = 0; j < slCUPEBOMSize; j++){
                strCUPData = slCUPEBOM.get(j);
                objectList = StringUtil.split(strCUPData, pgV3Constants.DUMP_CHARACTER);
                strIntermediatePartId = objectList.size() > 3 ? objectList.get(4) : DomainConstants.EMPTY_STRING;
                dataList = mapCUP.getOrDefault(strIntermediatePartId, new StringList());
                dataList.add(slCUPEBOM.get(j));
                mapCUP.put(strIntermediatePartId, dataList);
            }

            Iterator iterators = mapCUP.entrySet().iterator();
            Map.Entry mapEntry;
            while (iterators.hasNext())
            {
                mapEntry = (Map.Entry) iterators.next();
                list = (StringList) mapEntry.getValue();
                strCUPData = list.get(0);
                objectList = StringUtil.split(strCUPData, "|");
                headerName = "(" + (objectList.size() > 4 ? objectList.get(5) : DomainConstants.EMPTY_STRING) + ")";

                //CUP BOM
                if(null!=list && !list.isEmpty()){
                    //Modify Code Refactoring
                    //				mlMain = new MapList();
                    mlMain = getBOMRelData(context,list);

                    if(null!=mlMain && mlMain.size() > 0){
                        BOMSubstituteSAPBuffer.append("<TR><TD><TABLE class=\"WordWrappdf\" cellspacing=\"0\" width=\"1000px\" id=\"BOM\">");
                        BOMSubstituteSAPBuffer.append("<thead><TR>");
                        //Modified (colspan) by DSM(Sogeti)-2015x.5.1 for PDF Views (5691)
                        //Modified by DSM(Sogeti)-2018x.6 for PDF Views Defect 39959  - Starts
                        //Modified by DSM(Sogeti)-2018x.6 June CW 2022 for PDF Views (Defect-49089/49098) - Starts
                        BOMSubstituteSAPBuffer.append("<TR><TD class=\"new\" colspan='13'><B><font size ='4'>Bill of Materials Customer Unit "+headerName+"</font></B></TD></TR>");
                        //Modified by DSM(Sogeti)-2018x.6 June CW 2022 for PDF Views (Defect-49089/49098) - Ends
                        //Modified by DSM(Sogeti)-2018x.6 for PDF Views Defect 39959  - Ends
                        //Modified by DSM(Sogeti)-2015x.4 for PDF Views (Req - 5691) - Starts
                        //Modified by DSM ( Sogeti) for 2018x.5 PDF Defect - 33102 : Starts
                        //Added by DSM Sogeti for 2018x.6 Apr CW 2022 for PDF Views (Req -41367) - Starts
                        BOMSubstituteSAPBuffer.append(getBillofMaterialTableHeader(context,mlMain,pdfViewType,IPSId,strContType,strSAPType));
                        //Added by DSM Sogeti for 2018x.6 Apr CW 2022 for PDF Views (Req -41367) - Ends
                        //Modified by DSM ( Sogeti) for 2018x.5 PDF Defect - 33102 : Ends
                        BOMSubstituteSAPBuffer.append("</TR></thead>");
                        //Modified by DSM ( Sogeti) for 2018x.5 PDF Defect - 33102 : Starts
                        //Added by DSM Sogeti for 2018x.6 Apr CW 2022 for PDF Views (Req -41367) - Starts
                        BOMSubstituteSAPBuffer.append(getEBOMTablewithData(context,mlMain,pdfViewType,IPSId,strContType,strSAPType));
                        //Added by DSM Sogeti for 2018x.6 Apr CW 2022 for PDF Views (Req -41367) - Ends
                        //Modified by DSM ( Sogeti) for 2018x.5 PDF Defect - 33102 : Ends
                        //Modified by DSM(Sogeti)-2015x.4 for PDF Views (Req - 5691) - Ends
                        BOMSubstituteSAPBuffer.append("</TABLE><TR><TD><br /></TD></TR></TD></TR>");

                        // CUP Substitute
                        cntFPP = 0;
                        bFPPTable = false;
                        for (Iterator iterator = mlMain.iterator(); iterator.hasNext();){
                            Map mapFPP = (Map) iterator.next();
                            strParentId = (String)mapFPP.get("ParentId");
                            mlSub = new MapList();
                            mlSub = getSubstituteData(context, mapFPP);
                            if(null != mlSub && mlSub.size()>0){
                                cntFPP++;
                                if( cntFPP == 1){
                                    bFPPTable = true;
                                    BOMSubstituteSAPBuffer.append("<TR><TD><TABLE class=\"WordWrappdf\" cellspacing=\"0\" width=\"1000px\" id=\"BOM\">");
                                    BOMSubstituteSAPBuffer.append("<thead>");
                                    //Modified (colspan) by DSM(Sogeti)-2015x.5.1 for PDF Views (5691)
                                    //Modified by DSM(Sogeti)-2018x.5 for PDF Views Requirement  - Starts
                                    //Modified by DSM(Sogeti)-2018x.6 June CW 2022 for PDF Views (Defect-49089/49098) - Starts
                                    BOMSubstituteSAPBuffer.append("<TR><TD class=\"new\"  colspan='14'><B><font size ='4'>Substitutes <I> Customer Unit </I>"+headerName+"</font></B></TD></TR>");
                                    //Modified by DSM(Sogeti)-2018x.6 June CW 2022 for PDF Views (Defect-49089/49098) - Ends//Modified by DSM(Sogeti)-2018x.5 for PDF Views Requirement  - Ends
                                    //Modified by DSM(Sogeti)-2015x.4 for PDF Views (Req - 5706) - Starts
                                    BOMSubstituteSAPBuffer.append(getBOMSubstitueTableHeader(context,mlMain,pdfViewType,IPSId));
                                    //Modified by DSM(Sogeti)-2015x.4 for PDF Views (Req - 5706) - Ends
                                    BOMSubstituteSAPBuffer.append("</TR></thead>");
                                }
                                for (Iterator objIterator = mlSub.iterator(); objIterator.hasNext();){
                                    Map mapSub = (Map) objIterator.next();
                                    //Modified by DSM(Sogeti)-2018x.5 for PDF Views Requirement  - Starts
                                    //Modified by DSM Sogeti for 2022x.02 May CW for PDF Views (Req -46172) - Starts
                                    BOMSubstituteSAPBuffer.append(getSubstituteTablewithData(context,mapSub,strParentId,bGenDoc,pdfViewType));
                                    //Modified by DSM Sogeti for 2022x.02 May CW for PDF Views (Req -46172) - Ends
                                	//Modified by DSM(Sogeti)-2018x.5 for PDF Views Requirement  - Ends
                                }
                            }
                        }
                        if(bFPPTable){
                            BOMSubstituteSAPBuffer.append("</TABLE><TR><TD><br /></TD></TR></TD></TR>");
                        }
                    }
                }
            }
            //Modified by DSM(Sogeti)-2018x.6 June CW 2022 for PDF Views (Defect-49089/49098) - Ends

            //Modified by DSM(Sogeti)-2018x.6 June CW 2022 for PDF Views (Defect-49089/49098) - Starts
            set = new LinkedHashSet();
            set.addAll(slIPEBOM);
            slIPEBOM.clear();
            slIPEBOM.addAll(set);
            int slIPEBOMSize = slIPEBOM.size();
            for (int j = 0; j < slIPEBOMSize; j++){
                strIPData = slIPEBOM.get(j);
                objectList = StringUtil.split(strIPData, "|");
                strIntermediatePartId = objectList.size() > 3 ? objectList.get(4) : DomainConstants.EMPTY_STRING;
                dataList = mapIP.getOrDefault(strIntermediatePartId, new StringList());
                dataList.add(slIPEBOM.get(j));
                mapIP.put(strIntermediatePartId, dataList);
            }


            iterators = mapIP.entrySet().iterator();
            while (iterators.hasNext())
            {
                mapEntry = (Map.Entry) iterators.next();
                list = (StringList) mapEntry.getValue();
                strIPData = list.get(0);
                objectList = StringUtil.split(strIPData, "|");
                headerName = "(" + (objectList.size() > 4 ? objectList.get(5) : DomainConstants.EMPTY_STRING )+ ")";
                //Modified by DSM 2015x.2 (Sogeti) for defect #7417 -Starts
                //Modified by DSM(Sogeti)-2015x.2 for (Defect#8126 ) - Starts
                //IP BOM
                if(null!=list && !list.isEmpty()){
                    //Modify Code Refactoring
                    //				mlMain = new MapList();
                    mlMain = getBOMRelData(context,list);


                    if(null!=mlMain && mlMain.size() > 0){
                        BOMSubstituteSAPBuffer.append("<TR><TD><TABLE class=\"WordWrappdf\" cellspacing=\"0\" width=\"1000px\" id=\"BOM\">");
                        BOMSubstituteSAPBuffer.append("<thead><TR>");
                        //Modified (colspan) by DSM(Sogeti)-2015x.5.1 for PDF Views (5691)
                        //Modified by DSM(Sogeti)-2018x.6 for PDF Views Defect 39959  - Starts
                        //Modified by DSM(Sogeti)-2018x.6 June CW 2022 for PDF Views (Defect-49089/49098) - Starts
                        BOMSubstituteSAPBuffer.append("<TR><TD class=\"new\" colspan='13'><B><font size ='4'>Bill of Materials Inner Pack "+headerName+"</font></B></TD></TR>");
                        //Modified by DSM(Sogeti)-2018x.6 June CW 2022 for PDF Views (Defect-49089/49098) - Ends
                        //Modified by DSM(Sogeti)-2018x.6 for PDF Views Defect 39959  - Ends
                        //Modified by DSM(Sogeti)-2015x.4 for PDF Views (Req - 5691) - Starts
                        //Modified by DSM ( Sogeti) for 2018x.5 PDF Defect - 33102 : Starts
                        //Added by DSM Sogeti for 2018x.6 Apr CW 2022 for PDF Views (Req -41367) - Starts
                        BOMSubstituteSAPBuffer.append(getBillofMaterialTableHeader(context,mlMain,pdfViewType,IPSId,strContType,strSAPType));
                        //Added by DSM Sogeti for 2018x.6 Apr CW 2022 for PDF Views (Req -41367) - Ends
                        //Modified by DSM ( Sogeti) for 2018x.5 PDF Defect - 33102 : Ends
                        BOMSubstituteSAPBuffer.append("</TR></thead>");
                        //Modified by DSM ( Sogeti) for 2018x.5 PDF Defect - 33102 : Starts
                        //Added by DSM Sogeti for 2018x.6 Apr CW 2022 for PDF Views (Req -41367) - Starts
                        BOMSubstituteSAPBuffer.append(getEBOMTablewithData(context,mlMain,pdfViewType,IPSId,strContType,strSAPType));
                        //Added by DSM Sogeti for 2018x.6 Apr CW 2022 for PDF Views (Req -41367) - Ends
                        //Modified by DSM ( Sogeti) for 2018x.5 PDF Defect - 33102 : Ends
                        //Modified by DSM(Sogeti)-2015x.4 for PDF Views (Req - 5691) - Ends
                        BOMSubstituteSAPBuffer.append("</TABLE><TR><TD><br /></TD></TR></TD></TR>");
                        //IP Substitute
                        cntFPP = 0;
                        bFPPTable = false;
                        for (Iterator iterator = mlMain.iterator(); iterator.hasNext();){
                            Map mapFPP = (Map) iterator.next();
                            strParentId = (String)mapFPP.get("ParentId");
                            mlSub = new MapList();
                            mlSub = getSubstituteData(context, mapFPP);
                            if(null != mlSub && mlSub.size()>0){
                                cntFPP++;
                                if( cntFPP == 1){
                                    bFPPTable = true;
                                    BOMSubstituteSAPBuffer.append("<TR><TD><TABLE class=\"WordWrappdf\" cellspacing=\"0\" width=\"1000px\" id=\"BOM\">");
                                    BOMSubstituteSAPBuffer.append("<thead>");
                                    //Modified (colspan) by DSM(Sogeti)-2015x.5.1 for PDF Views (5691)
                                    //Modified by DSM(Sogeti)-2018x.5 for PDF Views Requirement  - Starts
                                    //Modified by DSM(Sogeti)-2018x.6 June CW 2022 for PDF Views (Defect-49089/49098) - Starts
                                    BOMSubstituteSAPBuffer.append("<TR><TD class=\"new\"  colspan='14'><B><font size ='4'>Substitutes <I> Inner Pack </I>"+headerName+"</font></B></TD></TR>");
                                    //Modified by DSM(Sogeti)-2018x.6 June CW 2022 for PDF Views (Defect-49089/49098) - Ends
                                    //Modified by DSM(Sogeti)-2018x.5 for PDF Views Requirement  - Ends
                                    //Modified by DSM(Sogeti)-2015x.4 for PDF Views (Req - 5706) - Starts
                                    BOMSubstituteSAPBuffer.append(getBOMSubstitueTableHeader(context,mlMain,pdfViewType,IPSId));
                                    //Modified by DSM(Sogeti)-2015x.4 for PDF Views (Req - 5706) - Ends
                                    BOMSubstituteSAPBuffer.append("</TR></thead>");
                                }
                                for (Iterator objIterator = mlSub.iterator(); objIterator.hasNext();){
                                    Map mapSub = (Map) objIterator.next();
                                    //Modified by DSM(Sogeti)-2018x.5 for PDF Views Requirement  - Starts
                                    //Modified by DSM Sogeti for 2022x.02 May CW for PDF Views (Req -46172) - Starts
                                    BOMSubstituteSAPBuffer.append(getSubstituteTablewithData(context, mapSub,strParentId,bGenDoc,pdfViewType));
                        			//Modified by DSM Sogeti for 2022x.02 May CW for PDF Views (Req -46172) - Ends
                        			//Modified by DSM(Sogeti)-2018x.5 for PDF Views Requirement  - Ends
                                }
                            }
                        }
                        if(bFPPTable){
                            BOMSubstituteSAPBuffer.append("</TABLE><TR><TD><br /></TD></TR></TD></TR>");
                        }
                    }
                }
            }
            //Modified by DSM(Sogeti)-2018x.6 June CW 2022 for PDF Views (Defect-49089/49098) - Ends

            //COP BOM
            //Modified by DSM(Sogeti)-2018x.6 June CW 2022 for PDF Views (Defect-49089/49098) - Starts
            set = new LinkedHashSet();
            set.addAll(slCOPEBOM);
            slCOPEBOM.clear();
            slCOPEBOM.addAll(set);
            int slCOPEBOMSize = slCOPEBOM.size();
            dataList = new StringList();
            for (int j = 0; j < slCOPEBOMSize; j++){
                strCOPData = slCOPEBOM.get(j);
                objectList = StringUtil.split(strCOPData, "|");
                strIntermediatePartId = objectList.size() > 3 ? objectList.get(4) : DomainConstants.EMPTY_STRING;
                dataList = mapCOP.getOrDefault(strIntermediatePartId, new StringList());
                dataList.add(slCOPEBOM.get(j));
                mapCOP.put(strIntermediatePartId, dataList);
            }


            iterators = mapCOP.entrySet().iterator();
            while (iterators.hasNext())
            {
                mapEntry = (Map.Entry) iterators.next();
                list = (StringList) mapEntry.getValue();
                strCOPData = list.get(0);
                objectList = StringUtil.split(strCOPData, "|");
                headerName = "(" + (objectList.size() > 4 ? objectList.get(5) : DomainConstants.EMPTY_STRING) + ")";

                if(null!=list && !list.isEmpty()){
                    //Modify Code Refactoring
                    //				mlMain = new MapList();
                    mlMain = getBOMRelData(context,list);


                    if(null!=mlMain && mlMain.size() > 0){
                        BOMSubstituteSAPBuffer.append("<TR><TD><TABLE class=\"WordWrappdf\" cellspacing=\"0\" width=\"1000px\" id=\"BOM\">");
                        BOMSubstituteSAPBuffer.append("<thead><TR>");
                        //Modified (colspan) by DSM(Sogeti)-2015x.5.1 for PDF Views (5691)
                        //Modified by DSM(Sogeti)-2018x.6 for PDF Views Defect 39959  - Starts
                        //Modified by DSM(Sogeti)-2018x.6 June CW 2022 for PDF Views (Defect-49089/49098) - Starts
                        BOMSubstituteSAPBuffer.append("<TR><TD class=\"new\" colspan='13'><B><font size ='4'>Bill of Materials Consumer Unit "+headerName+"</font></B></TD></TR>");
                        //Modified by DSM(Sogeti)-2018x.6 June CW 2022 for PDF Views (Defect-49089/49098) - Ends	//Modified by DSM(Sogeti)-2018x.6 for PDF Views Defect 39959  - Ends
                        //Modified by DSM(Sogeti)-2015x.4 for PDF Views (Req - 5691) - Starts
                        //Modified by DSM ( Sogeti) for 2018x.5 PDF Defect - 33102 : Starts
                        //Added by DSM Sogeti for 2018x.6 Apr CW 2022 for PDF Views (Req -41367) - Starts
                        BOMSubstituteSAPBuffer.append(getBillofMaterialTableHeader(context,mlMain,pdfViewType,IPSId,strContType,strSAPType));
                        //Added by DSM Sogeti for 2018x.6 Apr CW 2022 for PDF Views (Req -41367) - Ends
                        //Modified by DSM ( Sogeti) for 2018x.5 PDF Defect - 33102 : Ends
                        BOMSubstituteSAPBuffer.append("</TR></thead>");
                        //Modified by DSM ( Sogeti) for 2018x.5 PDF Defect - 33102 : Starts
                        //Added by DSM Sogeti for 2018x.6 Apr CW 2022 for PDF Views (Req -41367) - Starts
                        BOMSubstituteSAPBuffer.append(getEBOMTablewithData(context,mlMain,pdfViewType,IPSId,strContType,strSAPType));
                        //Added by DSM Sogeti for 2018x.6 Apr CW 2022 for PDF Views (Req -41367) - Ends
                        //Modified by DSM ( Sogeti) for 2018x.5 PDF Defect - 33102 : Ends
                        //Modified by DSM(Sogeti)-2015x.4 for PDF Views (Req - 5691) - Ends
                        //Modified by DSM(Sogeti)-2015x.1.2 for FPP allinfo view defect-7319 on 17-Nov-2016 - Starts
                        BOMSubstituteSAPBuffer.append("</TABLE><TR><TD><br /></TD></TR></TD></TR>");
                        //BOMSubstituteSAPBuffer.append("</TABLE></TD></TR>");
                        //Modified by DSM(Sogeti)-2015x.1.2 for FPP allinfo view defect-7319 on 17-Nov-2016 - Ends
                        //COP Substitute
                        cntFPP = 0;
                        bFPPTable = false;
                        for (Iterator iterator = mlMain.iterator(); iterator.hasNext();){
                            Map mapFPP = (Map) iterator.next();
                            strParentId = (String)mapFPP.get("ParentId");
                            mlSub = new MapList();
                            mlSub = getSubstituteData(context, mapFPP);
                            if(null != mlSub && mlSub.size()>0){
                                cntFPP++;
                                if( cntFPP == 1){
                                    bFPPTable = true;
                                    BOMSubstituteSAPBuffer.append("<TR><TD><TABLE class=\"WordWrappdf\" cellspacing=\"0\" width=\"1000px\" id=\"BOM\">");
                                    BOMSubstituteSAPBuffer.append("<thead>");
                                    //Modified (colspan) by DSM(Sogeti)-2015x.5.1 for PDF Views (5691)
                                    //Modified by DSM(Sogeti)-2018x.5 for PDF Views Requirement  - Starts
                                    //Modified by DSM(Sogeti)-2018x.6 June CW 2022 for PDF Views (Defect-49089/49098) - Starts
                                    BOMSubstituteSAPBuffer.append("<TR><TD class=\"new\"  colspan='14'><B><font size ='4'>Substitutes <I> Consumer Unit </I>"+headerName+"</font></B></TD></TR>");
                                    //Modified by DSM(Sogeti)-2018x.6 June CW 2022 for PDF Views (Defect-49089/49098) - Ends
                                    //Modified by DSM(Sogeti)-2018x.5 for PDF Views Requirement  - Ends
                                    //Modified by DSM(Sogeti)-2015x.4 for PDF Views (Req - 5706) - Starts
                                    BOMSubstituteSAPBuffer.append(getBOMSubstitueTableHeader(context,mlMain,pdfViewType,IPSId));
                                    //Modified by DSM(Sogeti)-2015x.4 for PDF Views (Req - 5706) - Ends
                                    BOMSubstituteSAPBuffer.append("</TR></thead>");
                                }
                                for (Iterator objIterator = mlSub.iterator(); objIterator.hasNext();){
                                    Map mapSub = (Map) objIterator.next();
                                    //Modified by DSM(Sogeti)-2018x.5 for PDF Views Requirement  - Starts
                                    //Modified by DSM Sogeti for 2022x.02 May CW for PDF Views (Req -46172) - Starts
                                    BOMSubstituteSAPBuffer.append(getSubstituteTablewithData(context, mapSub,strParentId,bGenDoc,pdfViewType));
                                    //Modified by DSM Sogeti for 2022x.02 May CW for PDF Views (Req -46172) - Ends
                                	//Modified by DSM(Sogeti)-2018x.5 for PDF Views Requirement  - Ends
                                }
                            }
                        }
                        if(bFPPTable){
                            BOMSubstituteSAPBuffer.append("</TABLE><TR><TD><br /></TD></TR></TD></TR>");
                        }
                    }
                }
            }
            //Modified by DSM(Sogeti)-2018x.6 June CW 2022 for PDF Views (Defect-49089/49098) - Ends
            ////Modified by DSM(Sogeti)-2015x.2 for (Defect#8126 ) - Ends
            //TU BOM
            DomainObject doObjFinishedProductPart = DomainObject.newInstance(context, IPSId);
            StringList slObjSelects = new StringList(2);
            slObjSelects.addElement(DomainConstants.SELECT_ID);
            //Modified by DSM(Sogeti)-2015x.4 for PDF Views (Req - 5691) - Starts
            slObjSelects.addElement(DomainConstants.SELECT_TYPE);
            //Modified by DSM(Sogeti)-2015x.4 for PDF Views (Req - 5691) - Ends
            //Modified by DSM(Sogeti)-2015x.4 for PDF Views (Defect - 12926) - Starts
            slObjSelects.addElement(DomainConstants.SELECT_NAME);
            //Modified by DSM(Sogeti)-2015x.4 for PDF Views (Defect - 12926) - Ends
            StringList slRelSelects = new StringList(1);
            slRelSelects.addElement(DomainConstants.SELECT_RELATIONSHIP_ID);
            MapList mlTransportUnits = new MapList();
            MapList mlConnectedEBOMParents = new MapList();
            mlTransportUnits=doObjFinishedProductPart.getRelatedObjects(context,pgV3Constants.RELATIONSHIP_PGTRANSPORTUNIT, pgV3Constants.TYPE_PGTRANSPORTUNITPART, slObjSelects,slRelSelects, false, true, (short) 1, null, null, 0);
            if(mlTransportUnits!=null && mlTransportUnits.size()>0){
                for (int i = 0;i< mlTransportUnits.size(); i++){
                    Map mapObject = (Map) mlTransportUnits.get(i);
                    strid=(String)mapObject.get(DomainConstants.SELECT_ID);
                    //Modified by DSM(Sogeti)-2015x.4 for PDF Views (Defect - 12926) - Starts
                    strTUName = (String)mapObject.get(DomainConstants.SELECT_NAME);
                    //Modified by DSM(Sogeti)-2015x.4 for PDF Views (Defect - 12926) - Ends
                    if(strid!=null) {
                        DomainObject domObject = DomainObject.newInstance(context, strid);
                        //Modify by DSM(Sogeti) 2018x.6.1 Defect #43129 - Starts
                        boolean hasReadAccess = domObject.checkAccess(context, (short) AccessConstants.cRead);
                        if(hasReadAccess){
                            mlConnectedEBOMParents = domObject.getRelatedObjects(context, //Context
                                    DomainConstants.RELATIONSHIP_EBOM, //relPattern
                                    "*", //typePattern
                                    slObjSelects, //objectSelects
                                    slRelSelects,// relationshipSelects
                                    false, //getTo - Get Parent Data
                                    true, //getFrom - Get Child Data
                                    //Modified by DSM-2015x.4(Sogeti) for defect 14033 - Starts
                                    (short)0, //recurseToLevel
                                    //Modified by DSM-2015x.4(Sogeti) for defect 14033 - Ends
                                    "", //objectWhere
                                    ""); //relationshipWhere
                        } else {
                            mlConnectedEBOMParents = new MapList();
                        }
                        //Modify by DSM(Sogeti) 2018x.6.1 Defect #43129 - Ends
                    }


                    if(null!=mlConnectedEBOMParents && mlConnectedEBOMParents.size() > 0){
                        for (int j = 0; j < mlConnectedEBOMParents.size(); j++){
                            Map mpTransportUnit = (Map)mlConnectedEBOMParents.get(j);
                            strParentId =(String)mpTransportUnit.get(DomainObject.SELECT_ID);
                            strParentType =(String)mpTransportUnit.get(DomainObject.SELECT_TYPE);
                            strRelId = (String)mpTransportUnit.get(DomainObject.SELECT_RELATIONSHIP_ID);
                            strlevel = (String)mpTransportUnit.get(DomainConstants.SELECT_LEVEL);
                            String[] relargs = new String[1];
                            relargs[0] = strRelId;
                            MapList mlToId= (MapList)DomainRelationship.getInfo(context, relargs,selectStmtsRel);
                            if(null != mlToId && mlToId.size()>0){
                                //Modified by DSM-2015x.4(Sogeti) for defect 11795 - Starts
                                for(int k=0;k<mlToId.size();k++) {
                                    Map mData = (Map)mlToId.get(k);
                                    //Modified by DSM-2015x.4(Sogeti) for defect 11795 - Ends
                                    strToId = (String)mData.get(DomainRelationship.SELECT_TO_ID);
                                    strpgChange = (String)mData.get(pgV3Constants.SELECT_ATTRIBUTE_PGCHANGE);
                                    strFindNumber = (String)mData.get(pgV3Constants.SELECT_ATTRIBUTE_FINDNUMBER);
                                    strRefDesig = (String)mData.get(pgV3Constants.SELECT_ATTRIBUTE_REFERENCEDESIGNATOR);
                                    strOptComp = (String)mData.get(pgV3Constants.SELECT_ATTRIBUTE_PGOPTIONALCOMPONENT);
                                }
                                dmoBom = DomainObject.newInstance(context, strToId);
                                mpBom = dmoBom.getInfo(context, selectStmt);
                                mpBom.put(pgV3Constants.SELECT_ATTRIBUTE_PGCHANGE, strpgChange);
                                mpBom.put(pgV3Constants.SELECT_ATTRIBUTE_FINDNUMBER, strFindNumber);
                                mpBom.put("id[connection]", strRelId);
                                mpBom.put("level", strlevel);
                                mpBom.put("ParentId", strParentId);
                                //Modified by DSM(Sogeti)-2015x.4 for PDF Views (Req - 5691) - Starts
                                mpBom.put("ParentType", strParentType);
                                //Modified by DSM(Sogeti)-2015x.4 for PDF Views (Req - 5691) - Ends
                                mpBom.put("RefDesig", strRefDesig);
                                mpBom.put("OptComp", strOptComp);
                                //Modified by DSM(Sogeti)-2015x.4 for PDF Views (Defect - 12926) - Starts
                                mpBom.put("TUName", strTUName);
                                //Modified by DSM(Sogeti)-2015x.4 for PDF Views (Defect - 12926) - Ends
                                mlTP.add(mpBom);
                                //Commented by DSM-2015x.1.2(Sogeti) for defect 7921 - Starts
                                // mlTP.addSortKey("attribute[Find Number]", "ascending", "String");
                                // mlTP.sort();
                                //Commented by DSM-2015x.1.2(Sogeti) for defect 7921 - Ends
                            }
                        }
                        //Added by DSM-2015x.1.2(Sogeti) for defect 7921 - Starts
                        //Modified by DSM(Sogeti)-2015x.4 for PDF Views (Defect - 12926) - Starts
                        mlTP.addSortKey("TUName", "ascending", "String");
                        //Modified by DSM(Sogeti)-2015x.4 for PDF Views (Defect - 12926) - Ends
                        mlTP.addSortKey(pgV3Constants.SELECT_ATTRIBUTE_FINDNUMBER, "ascending", "integer");
                        mlTP.sort();
                        //Added by DSM-2015x.1.2(Sogeti) for defect 7921 - Ends
                    }
                    //Modified by DSM-2015x.4(Sogeti) for defect 11795 - Starts
                }
                //Modified by DSM-2015x.4(Sogeti) for defect 11795 - Ends
            }
            if(mlTP != null && mlTP.size()>0) {
                BOMSubstituteSAPBuffer.append("<TR><TD><TABLE class=\"WordWrappdf\" cellspacing=\"0\" width=\"1000px\" id=\"BOM\">");
                BOMSubstituteSAPBuffer.append("<thead><TR>");
                //Modified (colspan) by DSM(Sogeti)-2015x.5.1 for PDF Views (5691)
                //Modified by DSM(Sogeti)-2018x.6 for PDF Views Defect 39959  - Starts
                BOMSubstituteSAPBuffer.append("<TR><TD class=\"new\" colspan='14'><B><font size ='4'>Bill of Materials Transport Unit</font></B></TD></TR>");
                //Modified by DSM(Sogeti)-2018x.6 for PDF Views Defect 39959  - Ends
                //Modified by DSM(Sogeti)-2015x.4 for PDF Views (Req - 5691) - Starts
                //Modified by DSM ( Sogeti) for 2018x.5 PDF Defect - 33102 : Starts
                //Added by DSM Sogeti for 2018x.6 Apr CW 2022 for PDF Views (Req -41367) - Starts
                BOMSubstituteSAPBuffer.append(getBillofMaterialTableHeader(context,mlTP,pdfViewType,IPSId,strContType,strSAPType));
                //Added by DSM Sogeti for 2018x.6 Apr CW 2022 for PDF Views (Req -41367) - Ends
                //Modified by DSM ( Sogeti) for 2018x.5 PDF Defect - 33102 : Ends
                BOMSubstituteSAPBuffer.append("</TR></thead>");
                //Modified by DSM ( Sogeti) for 2018x.5 PDF Defect - 33102 : Starts
                //Added by DSM Sogeti for 2018x.6 Apr CW 2022 for PDF Views (Req -41367) - Starts
                BOMSubstituteSAPBuffer.append(getEBOMTablewithData(context,mlTP,pdfViewType,IPSId,strContType,strSAPType));
                //Added by DSM Sogeti for 2018x.6 Apr CW 2022 for PDF Views (Req -41367) - Ends
                //Modified by DSM ( Sogeti) for 2018x.5 PDF Defect - 33102 : Ends
                //Modified by DSM(Sogeti)-2015x.4 for PDF Views (Req - 5691) - Ends
                BOMSubstituteSAPBuffer.append("</TABLE><TR><TD><br /></TD></TR></TD></TR>");
            }
            //TU Substitute
            cntFPP = 0;
            bFPPTable = false;
            for (Iterator iterator = mlTP.iterator(); iterator.hasNext();){
                Map mapTP = (Map) iterator.next();
                strParentId = (String)mapTP.get("ParentId");
                mlSub = new MapList();
                mlSub = getSubstituteData(context, mapTP);
                if(null != mlSub && mlSub.size()>0){
                    cntFPP++;
                    if( cntFPP == 1){
                        bFPPTable = true;
                        BOMSubstituteSAPBuffer.append("<TR><TD><TABLE class=\"WordWrappdf\" cellspacing=\"0\" width=\"1000px\" id=\"BOM\">");
                        BOMSubstituteSAPBuffer.append("<thead>");
                        //Modified (colspan) by DSM(Sogeti)-2015x.5.1 for PDF Views (5691)
                        //Modified by DSM(Sogeti)-2018x.5 for PDF Views Requirement  - Starts
                        BOMSubstituteSAPBuffer.append("<TR><TD class=\"new\"  colspan='14'><B><font size ='4'>Substitutes <I> Transport Unit</I></font></B></TD></TR>");
                        //Modified by DSM(Sogeti)-2018x.5 for PDF Views Requirement  - Ends
                        //Modified by DSM(Sogeti)-2015x.4 for PDF Views (Req - 5706) - Starts
                        BOMSubstituteSAPBuffer.append(getBOMSubstitueTableHeader(context,mlTP,pdfViewType,IPSId));
                        BOMSubstituteSAPBuffer.append("</TR></thead>");
                        //Modified by DSM(Sogeti)-2015x.4 for PDF Views (Req - 5706) - Ends
                    }
                    for (Iterator objIterator = mlSub.iterator(); objIterator.hasNext();){
                        Map mapSub = (Map) objIterator.next();
                        //Modified by DSM(Sogeti)-2018x.5 for PDF Views Requirement  - Starts
                        //Modified by DSM Sogeti for 2022x.02 May CW for PDF Views (Req -46172) - Starts
                        BOMSubstituteSAPBuffer.append(getSubstituteTablewithData(context, mapSub,strParentId,bGenDoc,pdfViewType));
                     	//Modified by DSM Sogeti for 2022x.02 May CW for PDF Views (Req -46172) - Ends
                    	//Modified by DSM(Sogeti)-2018x.5 for PDF Views Requirement  - Ends
                    }
                }
            }

            //Modified by DSM 2015x.2 (Sogeti) for defect #7417 -Ends
            if(bFPPTable){
                BOMSubstituteSAPBuffer.append("</TABLE><TR><TD><br /></TD></TR></TD></TR>");
            }
            //Added by DSM(Sogeti)-2015x.1.2 for FPP allinfo view defect-7319 on 18-Oct-2016 - Starts
            //Modified by DSM(Sogeti)-2015x.2 for (Defect#8191) - Starts
            //Modified by DSM(Sogeti)-2015x.2 for (Defect#11531) - Starts
            if(!pdfViewType.equalsIgnoreCase("consolidatedpackaging"))
            {
                BOMSubstituteSAPBuffer.append(getMasterBOMandSubstituteData(context, alCUPEBOMMaster, "Master Customer Unit"));
                BOMSubstituteSAPBuffer.append(getMasterBOMandSubstituteData(context, alIPEBOMMaster, "Master Inner Pack"));
                BOMSubstituteSAPBuffer.append(getMasterBOMandSubstituteData(context, alCOPEBOMMaster, "Master Consumer Unit"));
            }
            //Modified by DSM(Sogeti)-2015x.2 for (Defect#11531) - Ends
            //Modified by DSM(Sogeti)-2015x.2 for (Defect#8191) - Ends
            //Added by DSM(Sogeti)-2015x.1.2 for FPP allinfo view defect-7319 on 18-Oct-2016 - Ends
            //Modified by DSM(Sogeti)-2015x.4 for PDF Views (5706) - Ends
        }
        catch (MatrixException e){
            throw new MatrixException(e);
        }
        catch (Exception e){
            throw new MatrixException(e);
        }
        finally{
            if(isPushContext){
                ContextUtil.popContext(context);
                isPushContext = false;
            }
        }
        long endTime = new Date().getTime();
        System.out.println("Total Time has taken by the getBillOfMaterialSubstituteAndSAPBOMDataFPP Method is-->"+(endTime-startTime));
        return BOMSubstituteSAPBuffer;
    }
    /**
     * Retrieve Is ATS information for DSO types
     * @param context
     * @param args
     * @return
     * @throws MatrixException
     */
    private StringBuilder getIsATSDataForDSO(Context context,String[] args,String strObjectId,String pdfViewType){
        long startTime = new Date().getTime();
        StringBuilder objectIsATSBuffer= new StringBuilder();
        try
        {
            if(validateString(strObjectId)){
                MapList mlATS = EnoviaTableUtils.getATSDSO(context, strObjectId);
                if(mlATS != null && !mlATS.isEmpty()){
                    objectIsATSBuffer.append("<TR><TD><TABLE class=\"pdf\" cellspacing=\"0\" width=\"1000px\" id=\"FPPIsATS\">");
                    objectIsATSBuffer.append("<thead>");
                    objectIsATSBuffer.append("<TR><TD class=\"new\" colspan='4'><B><font size ='4'>Related ATS</font></B></TD></TR>");
                    objectIsATSBuffer.append("<TR align='center'><TD width=\"250\" align=\"center\"><B>Name</B></TD>");
                    objectIsATSBuffer.append("<TD width=\"250\" align=\"center\"><B>Type</B></TD>");
                    objectIsATSBuffer.append("<TD width=\"250\" align=\"center\"><B>Title</B></TD>");
                    objectIsATSBuffer.append("<TD width=\"250\" align=\"center\"><B>State</B></TD>");
                    objectIsATSBuffer.append("</TR></thead>");
                    objectIsATSBuffer.append("<tbody>");
                    Map<String,String> mlATSMap;
                    String strType;
                    String strATSType ;
                    for (Iterator iterator = mlATS.iterator(); iterator.hasNext();){
                        mlATSMap = (Map) iterator.next();
                        objectIsATSBuffer.append("<TR>");
                        strType = mlATSMap.get("Type");
                        strATSType = UINavigatorUtil.getAdminI18NString("Type", strType, context.getSession().getLanguage());
                        objectIsATSBuffer.append("<TD width=\"250\" align=\"center\">"+mlATSMap.get("Name")+"</TD>");
                        objectIsATSBuffer.append("<TD width=\"250\" align=\"center\">"+strATSType+"</TD>");
                        objectIsATSBuffer.append("<TD width=\"250\" align=\"center\">"+checkLessThanGreaterThan(mlATSMap.get("Title"))+"</TD>");
                        objectIsATSBuffer.append("<TD width=\"250\" align=\"center\">"+mlATSMap.get("State")+"</TD>");
                        objectIsATSBuffer.append("</TR>");
                    }
                    objectIsATSBuffer.append("</tbody>");
                    objectIsATSBuffer.append("</TABLE><TR><TD><br /></TD></TR></TD></TR>");
                    mlATS.clear();
                }
            }
        }
        catch (Exception e){
            logger.log(Level.WARNING, null, e);
        }
        long endTime = new Date().getTime();
        System.out.println("Total Time has taken by the  getIsATSDataForDSO Method is-->"+(endTime-startTime));
        return objectIsATSBuffer;
    }
    /**
     * Method to get  Performance Characteristics table
     * @param context - matrix Context
     * @param String  - Object Id
     * @param String  - PDFView type
     * @return StringBuilder - String Builder of table data
     * @since DSM 2018x.5
     */
    private  StringBuilder getPerformanceChracteristicDSO(Context context,String strObjectId,String strPDFViewKind) throws MatrixException{
        long startTime = new Date().getTime();
        StringBuilder objectPerformanceChracteristicBuffer= new StringBuilder();
        boolean isPushContext = false;
        try
        {
            //context is pushed to get the characteristics details connected.
            ContextUtil.pushContext(context);
            isPushContext = true;
            MapList mlPerfChar = new MapList();
            String strType = DomainConstants.EMPTY_STRING;
            String strReferenceType = DomainConstants.EMPTY_STRING;
            StringList selectStmt = new StringList(3);
            selectStmt.add(pgV3Constants.SELECT_ATTRIBUTE_REFERENCETYPE);
            selectStmt.add(DomainConstants.SELECT_TYPE);
            selectStmt.add(pgV3Constants.SELECT_ATTRIBUTE_PGORIGINATINGSOURCE);
            if(UIUtil.isNotNullAndNotEmpty(strObjectId)){
                DomainObject doObj = DomainObject.newInstance(context, strObjectId);
                Map <String, String> mpPartDetails = doObj.getInfo(context, selectStmt);
                strType = (String)mpPartDetails.get(DomainConstants.SELECT_TYPE);
                strReferenceType = (String)mpPartDetails.get(pgV3Constants.SELECT_ATTRIBUTE_REFERENCETYPE);
                mlPerfChar= getPerformanceCharDataMap(context,strObjectId,strPDFViewKind);
                if(!mlPerfChar.isEmpty()){
                    String strOS = (String)mpPartDetails.get(pgV3Constants.SELECT_ATTRIBUTE_PGORIGINATINGSOURCE);
                    objectPerformanceChracteristicBuffer.append("<TR><TD><TABLE class=\"WordWrappdf\" cellspacing=\"0\" width=\"1000px\" id=\"FPPIsATS\">");
                    objectPerformanceChracteristicBuffer.append(getPerformanceCharTableHeader(context,strType,strPDFViewKind));
                    objectPerformanceChracteristicBuffer.append(gerPerformanceCharTableData(context,strObjectId,mlPerfChar,strReferenceType,strPDFViewKind,strType,strOS));
                    objectPerformanceChracteristicBuffer.append("</TABLE><TR><TD><br /></TD></TR></TD></TR>");
                }
            }
        }
        catch (Exception e)
        {
            e.printStackTrace();
        }
        finally
        {	//context is poped
            if(isPushContext){
                ContextUtil.popContext(context);
                isPushContext = false;
            }
        }
        long endTime = new Date().getTime();
        System.out.println("Total Time has taken by the getPerformanceChracteristicDSO Method is-->"+(endTime-startTime));
        return objectPerformanceChracteristicBuffer;

    }
    /**
     * Helper method to get  Performance Characteristics table data
     * @param context - matrix Context
     * @param String  - Object Id
     * @param MapList - List of Object details
     * @param String  - Reference Type
     * @param String - object Type
     * @param String - Attribute Value
     * @return String - Performace Char Data
     * @throws Exception 
     * @since DSM 2018x.5
     */
    private String gerPerformanceCharTableData(Context context, String strObjectId,
                                               MapList mlPerfChar, String strReferenceType, String strPDFViewKind, String strType, String strOS) throws Exception {
        StringBuilder objectPerformanceChracteristicBuffer = new StringBuilder();
        try {
            Map<String,String> perfCharList = new HashMap<>();
            String strId = DomainConstants.EMPTY_STRING;
            String sRel = DomainConstants.EMPTY_STRING;
            String strPathForPC = DomainConstants.EMPTY_STRING;
            Map<String,String> mpTMLogic = new HashMap<>();
            String strCharName = DomainConstants.EMPTY_STRING;
            String strChg = DomainConstants.EMPTY_STRING;
            String strCharSpec= DomainConstants.EMPTY_STRING;
            String strTM= DomainConstants.EMPTY_STRING;
            String strTMLogic = DomainConstants.EMPTY_STRING;
            String strOtherTMNumber = DomainConstants.EMPTY_STRING;
            String strTMSpec= DomainConstants.EMPTY_STRING;
            String strOrigin= DomainConstants.EMPTY_STRING;
            String strReferenceDoc= DomainConstants.EMPTY_STRING;
            String strSampling = DomainConstants.EMPTY_STRING;
            String strSubGroup = DomainConstants.EMPTY_STRING;
            String strPlantTestingLvl = DomainConstants.EMPTY_STRING;
            String strRetestingUOM = DomainConstants.EMPTY_STRING;
            String strRetesting = DomainConstants.EMPTY_STRING;
            String strLowerSpecificationLimit = DomainConstants.EMPTY_STRING;
            String strLowerRoutineReleaseLimit = DomainConstants.EMPTY_STRING;
            String strLowerTarget = DomainConstants.EMPTY_STRING;
            String strTarget = DomainConstants.EMPTY_STRING;
            String strUpperTarget = DomainConstants.EMPTY_STRING;
            String strUpperRoutineReleaseLimit = DomainConstants.EMPTY_STRING;
            String strUpperSpecificationLimit = DomainConstants.EMPTY_STRING;
            String strReportToNearest = DomainConstants.EMPTY_STRING;
            String strUnitofMeasureMasterList = DomainConstants.EMPTY_STRING;
            String strReportType = DomainConstants.EMPTY_STRING;
            String strReleaseCriteria = DomainConstants.EMPTY_STRING;
            String strBasis = DomainConstants.EMPTY_STRING;
            String strActionRequiredList=DomainConstants.EMPTY_STRING;
            String strCriticalityFactor=DomainConstants.EMPTY_STRING;
            String strApplication = DomainConstants.EMPTY_STRING;
            String strTestGroup = DomainConstants.EMPTY_STRING;
            String strRegEx = "<[^>]*>";
          //Added by DSM (Sogeti) for 22x.04 (Dec CW 2023) Defect 55289 - Start
            Map<String,String> mpATSMap = new HashMap<>();
            String strConnectionId = DomainConstants.EMPTY_STRING;
            String strATSOperation = DomainConstants.EMPTY_STRING;
            String strATSContextFormula = DomainConstants.EMPTY_STRING;
            String strATSChar = DomainConstants.EMPTY_STRING;
            String strATSCharSpec = DomainConstants.EMPTY_STRING;
            String strATSTM = DomainConstants.EMPTY_STRING;
            String strATSReferenceDoc = DomainConstants.EMPTY_STRING;
            String strATSFormulaCharId = DomainConstants.EMPTY_STRING;
            
           //Added by DSM (Sogeti) for 22x.04 (Dec CW 2023) Defect 55289 - Ends
            //Added by DSM (Sogeti) for 22x.04 (Dec CW 2023) Defect 55877 - Starts
			String strSATSFormula_Add_Id = DomainConstants.EMPTY_STRING;
            //Added by DSM (Sogeti) for 22x.04 (Dec CW 2023) Defect 55877 - Ends
			//Added by DSM (Sogeti) for 22x.04 (Dec CW 2023) Defect 56153 - Starts
			//added code for grouping ATS context formula starts
			if(strType.equals(pgV3Constants.TYPE_STRUCTURED_ATS)) {
			//Modified by DSM (Sogeti) for 22x.05 (April CW 2024) Defect 56153 - Starts
				mlPerfChar = getATSCharacteristicsSortedlist(context, mlPerfChar);
			}
			//added code for grouping ATS context formula Ends
			//Added by DSM (Sogeti) for 22x.04 (Dec CW 2023) Defect 56153 - Ends
			//Modified by DSM (Sogeti) for 22x.04 (Dec CW 2023) Requirement 47656,47667 - Start
            int nPerfCharSize=mlPerfChar.size();
			//int nPerfCharSize = 10;
            //Modified by DSM (Sogeti) for 22x.04 (Dec CW 2023) Requirement 47656,47667 - End
            objectPerformanceChracteristicBuffer.append("<tbody>");
            for (int i=0;i<nPerfCharSize;i++){
                perfCharList = (Map) mlPerfChar.get(i);
                strId = (String)perfCharList.get("id");
                sRel  = (String)perfCharList.get("relationship");
                
                //Added by DSM (Sogeti) for 22x.04 (Dec CW 2023) Defect 55289 - Start
                if(strType.equals(pgV3Constants.TYPE_STRUCTURED_ATS)) {
                	String strAddOper_Formula = strATSContextFormula;
                	strConnectionId = (String)perfCharList.get("id[connection]");
                	
                	Map mpATSContextFormulaCharDetails = getATSContextFormulaCharDetails(context,strType,strConnectionId);
                	if(mpATSContextFormulaCharDetails != null) {
                		//Modified by DSM (Sogeti) for 22x.04 (Dec CW 2023) Defect 55877 - Starts
                		Object objATSOperation = mpATSContextFormulaCharDetails.get("frommid["+pgPDFViewConstants.RELATIONSHIP_PGATSCONTEXT+"].attribute["+pgPDFViewConstants.ATTRIBUTE_PGSTRUCTUREATSACTION+"]");
                		
                		//Modified by DSM (Sogeti) for 22x.05 (April CW 2024) Defect 56153 - Starts
                		if(objATSOperation != null) {

                			StringList slATSOperation = getStringListFromObject(objATSOperation);
                			if(slATSOperation != null) {
                				strATSOperation = slATSOperation.get(0);
                			}
                			//Modified by DSM (Sogeti) for 22x.04 (Dec CW 2023) Defect 56132 - Starts
                			Object objContextFormula = mpATSContextFormulaCharDetails.get("frommid["+pgPDFViewConstants.RELATIONSHIP_PGATSCONTEXT+"].to.to["+pgV3Constants.RELATIONSHIP_CHARACTERISTIC+"].from.name");
                			StringList slATSContextFormula = getStringListFromObject(objContextFormula);

                			if(slATSContextFormula != null) {
                				strATSContextFormula = slATSContextFormula.get(0);
                			}

                			Object objATSFormulaCharId = mpATSContextFormulaCharDetails.get("frommid["+pgPDFViewConstants.RELATIONSHIP_PGATSCONTEXT+"].to.to["+pgV3Constants.RELATIONSHIP_CHARACTERISTIC+"].to.id");

                			StringList slATSFormulaCharId = getStringListFromObject(objATSFormulaCharId);

                			if(slATSFormulaCharId != null) {
                				strATSFormulaCharId = slATSFormulaCharId.get(0);
                			}
                			//Modified by DSM (Sogeti) for 22x.04 (Dec CW 2023) Defect 56132 - Ends

                			if(UIUtil.isNotNullAndNotEmpty(strATSFormulaCharId)) {
                				mpATSMap = getTMDetailsMap(context,strATSFormulaCharId);
                				if(mpATSMap!=null && !mpATSMap.isEmpty()){
                					strATSChar = (String)mpATSMap.get(pgV3Constants.SELECT_ATTRIBUTE_PGCHARACTERISTIC);
                					strATSCharSpec = (String)mpATSMap.get(pgV3Constants.SELECT_ATTRIBUTE_PGCHARACTERISTICSPECIFICS);
                					strATSTM =	getPerformanceChracteristicTestMethodName(context,strObjectId,strOS,strATSFormulaCharId);
                					strATSReferenceDoc= getPerformanceChracteristicRefDocName(context,strObjectId,strATSFormulaCharId);
                				}
                			}
                		}else {
                			strSATSFormula_Add_Id = (String) mpATSContextFormulaCharDetails.get("attribute["+pgPDFViewConstants.ATTRIBUTE_PGSATSCONTEXT_ID+"]");

                			if(UIUtil.isNotNullAndNotEmpty(strSATSFormula_Add_Id)) {
                				strATSContextFormula = (String) getATSContextFormulaName(context,strSATSFormula_Add_Id);
                				strATSOperation = pgPDFViewConstants.CHAR_ADD_OPERATION;
                				strATSChar = DomainConstants.EMPTY_STRING;					  
                				strATSCharSpec = DomainConstants.EMPTY_STRING;					  
                				strATSTM = DomainConstants.EMPTY_STRING;					  
                				strATSReferenceDoc = DomainConstants.EMPTY_STRING;
                			}
                		}
                		//Modified by DSM (Sogeti) for 22x.04 (Dec CW 2023) Defect 55877 - Ends
                		//Modified by DSM (Sogeti) for 22x.05 (April CW 2024) Defect 56153 - Ends
                	}
                }
               //Added by DSM (Sogeti) for 22x.04 (Dec CW 2023) Defect 55289 - Ends
                strPathForPC = getPerformanceChracteristicPath(context,strObjectId,strReferenceType,strPDFViewKind,strId,sRel);
                mpTMLogic	  =	getTMDetailsMap(context,strId);
                if(mpTMLogic!=null && !mpTMLogic.isEmpty()){
                    strCharName = (String)mpTMLogic.get(pgV3Constants.SELECT_ATTRIBUTE_PGCHARACTERISTIC);
                    strChg = (String)mpTMLogic.get(pgV3Constants.SELECT_ATTRIBUTE_PGCHANGE);
                    strCharSpec = (String)mpTMLogic.get(pgV3Constants.SELECT_ATTRIBUTE_PGCHARACTERISTICSPECIFICS);
                    strTM =	getPerformanceChracteristicTestMethodName(context,strObjectId,strOS,strId);
                    strTMLogic = (String)mpTMLogic.get(pgV3Constants.SELECT_ATTRIBUTE_PGTMLOGIC);
                    strOtherTMNumber = (String)mpTMLogic.get(pgV3Constants.SELECT_ATTRIBUTE_PGMETHODNUMBER);
                    if(UIUtil.isNullOrEmpty(strOtherTMNumber)){
                        strOtherTMNumber = DomainConstants.EMPTY_STRING;
                    }
                    strOtherTMNumber = strOtherTMNumber.replaceAll("[<]","#LESS_THAN");
                    strTMSpec = (String)mpTMLogic.get(pgV3Constants.SELECT_ATTRIBUTE_PGMETHODSPECIFICS);
                    if(UIUtil.isNullOrEmpty(strTMSpec)){
                        strTMSpec = DomainConstants.EMPTY_STRING;
                    }
                    strTMSpec = strTMSpec.replaceAll("[<]","#LESS_THAN");
                    strOrigin = (String)mpTMLogic.get(pgV3Constants.SELECT_ATTRIBUTE_PGMETHODORIGIN);
                    strReferenceDoc = getPerformanceChracteristicRefDocName(context,strObjectId,strId);
                    strSampling = (String)mpTMLogic.get(pgV3Constants.SELECT_ATTRIBUTE_PGSAMPLING);
                    if(UIUtil.isNullOrEmpty(strSampling)){
                        strSampling = DomainConstants.EMPTY_STRING;
                    }
                    strSampling = strSampling.replaceAll("[<]","#LESS_THAN");
                    strSubGroup = (String)mpTMLogic.get(pgV3Constants.SELECT_ATTRIBUTE_PGSUBGROUP);
                    if(UIUtil.isNullOrEmpty(strSubGroup)){
                        strSubGroup = DomainConstants.EMPTY_STRING;
                    }
                    strSubGroup = strSubGroup.replaceAll("[<]","#LESS_THAN");
                    strPlantTestingLvl = (String)mpTMLogic.get(pgV3Constants.SELECT_ATTRIBUTE_PGPLANTTESTING);
                    strRetestingUOM = (String)mpTMLogic.get(pgV3Constants.SELECT_ATTRIBUTE_PGRETESTINGUOM);
                    strRetesting = (String)mpTMLogic.get(pgV3Constants.SELECT_ATTRIBUTE_PGPLANTTESTINGRETESTING);
                    strLowerSpecificationLimit = (String)mpTMLogic.get(pgV3Constants.SELECT_ATTRIBUTE_PGLOWERSPECIFICATIONLIMIT);
                    strLowerRoutineReleaseLimit = (String)mpTMLogic.get(pgV3Constants.SELECT_ATTRIBUTE_PGLOWERROUTINRRELEASELIMIT);
                    strLowerTarget = (String)mpTMLogic.get(pgV3Constants.SELECT_ATTRIBUTE_PGLOWERTARGET);
                    strTarget = (String)mpTMLogic.get(pgV3Constants.SELECT_ATTRIBUTE_PGTARGET);
                    strUpperTarget = (String)mpTMLogic.get(pgV3Constants.SELECT_ATTRIBUTE_PGUPPERTARGET);
                    strUpperRoutineReleaseLimit = (String)mpTMLogic.get(pgV3Constants.SELECT_ATTRIBUTE_PGUPPERROUTINERELEASELIMIT);
                    strUpperSpecificationLimit = (String)mpTMLogic.get(pgV3Constants.SELECT_ATTRIBUTE_PGUPPERSPECIFICATIONLIMIT);
                    strReportToNearest = (String)mpTMLogic.get(pgV3Constants.SELECT_ATTRIBUTE_PGREPORTTONEAREST);
                    strUnitofMeasureMasterList = (String)mpTMLogic.get(pgV3Constants.SELECT_ATTRIBUTE_PGUNITOFMEASURE);
                    strReportType = (String)mpTMLogic.get(pgV3Constants.SELECT_ATTRIBUTE_PGREPORTTYPE);
                    strReleaseCriteria = (String)mpTMLogic.get(pgV3Constants.SELECT_ATTRIBUTE_PGRELEASECRITERIA);
                    if(UIUtil.isNullOrEmpty(strReleaseCriteria)){
                        strReleaseCriteria = DomainConstants.EMPTY_STRING;
                    }
                    strReleaseCriteria =strReleaseCriteria.replaceAll("[<]","#LESS_THAN");
                    strReleaseCriteria =strReleaseCriteria.replaceAll("[>]","#GREATER_THAN");
                    strBasis = (String)mpTMLogic.get(pgV3Constants.SELECT_ATTRIBUTE_PGBASIS);
                    if(UIUtil.isNullOrEmpty(strBasis)){
                        strBasis = DomainConstants.EMPTY_STRING;
                    }
                    strBasis =strBasis.replaceAll("[<]","#LESS_THAN");
                    strActionRequiredList=(String)mpTMLogic.get(pgV3Constants.SELECT_ATTRIBUTE_PGACTIONREQUIRED);
                    strCriticalityFactor=(String)mpTMLogic.get(pgV3Constants.SELECT_ATTRIBUTE_PGCRITICALITYFACTOR);
                    strApplication = (String)mpTMLogic.get(pgV3Constants.SELECT_ATTRIBUTE_PGAPPLICATION);
                    if(UIUtil.isNullOrEmpty(strApplication)){
                        strApplication = DomainConstants.EMPTY_STRING;
                    }
                    strApplication =strApplication.replaceAll("[<]","#LESS_THAN");
                    strTestGroup = (String)mpTMLogic.get(pgV3Constants.SELECT_ATTRIBUTE_PGTESTGROUP);
                }
                objectPerformanceChracteristicBuffer.append("<TR>");
                //Added by DSM (Sogeti) for 22x.04 (Dec CW 2023) Requirement 47656,47667 - Start
				if(!pgV3Constants.TYPE_STRUCTURED_ATS.equals(strType)){
                objectPerformanceChracteristicBuffer.append("<TD width=\"30px\" align=\"center\" valign=\"top\">"+validateString1(strChg)+"</TD>");
				}
				//Added by DSM (Sogeti) for 22x.04 (Dec CW 2023) Requirement 47656,47667 - End
                if(strType.contains(pgV3Constants.PGMASTER)){
                    objectPerformanceChracteristicBuffer.append("<TD width=\"170px\" align=\"left\" valign=\"top\"><B>CH: </B>"+validateString1(strCharName)+"<BR></BR><B>CS: </B>"+validateString1(strCharSpec)+"</TD>");
                }
              //Added by DSM (Sogeti) for 22x.04 (Dec CW 2023) Requirement 47656,47667 - Start
				else if(strType.equals(pgV3Constants.TYPE_STRUCTURED_ATS))
				{
					objectPerformanceChracteristicBuffer.append("<TD width=\"170px\" align=\"left\" valign=\"top\"><B>C: </B>"+validateString1(strCharName)+"</TD>");
					objectPerformanceChracteristicBuffer.append("<TD width=\"170px\" align=\"left\" valign=\"top\"><B>CS: </B>"+validateString1(strCharSpec)+"</TD>");
				}	
              //Added by DSM (Sogeti) for 22x.04 (Dec CW 2023) Requirement 47656,47667 - End 
                else{
                    strPathForPC= validateString1(strPathForPC).replaceAll(strRegEx, "");
                    objectPerformanceChracteristicBuffer.append("<TD width=\"170px\" align=\"left\" valign=\"top\"><B>CH: </B>"+validateString1(strCharName)+"<BR></BR><B>CS: </B>"+validateString1(strCharSpec)+"<BR></BR><B>P: </B>"+validateString1(strPathForPC)+"</TD>");
                }
              //Added by DSM (Sogeti) for 22x.04 (Dec CW 2023) Requirement 47656,47667 - Start
				if(strType.equals(pgV3Constants.TYPE_STRUCTURED_ATS)){
					objectPerformanceChracteristicBuffer.append("<TD width=\"170px\" align=\"left\" valign=\"top\">"+validateString1(strTM)+"</TD>");
					objectPerformanceChracteristicBuffer.append("<TD width=\"170px\" align=\"left\" valign=\"top\">"+validateString1(strReferenceDoc)+"</TD>");
				}
				//Added by DSM (Sogeti) for 22x.04 (Dec CW 2023) Requirement 47656,47667 - End
				else{
                objectPerformanceChracteristicBuffer.append("<TD width=\"170px\" align=\"left\" valign=\"top\"><B>NAME: </B>"+validateString1(strTM)+"<BR></BR><B>TML: </B>"+validateString1(strTMLogic)+"<BR></BR><B>TMO: </B>"+validateString1(strOrigin)+"<BR></BR><B>TM#: </B>"+validateString1(strOtherTMNumber)+"<BR></BR><B>SP: </B>"+validateString1(strTMSpec)+"<BR></BR><B>TMRDN: </B>"+validateString1(strReferenceDoc)+"</TD>");

                objectPerformanceChracteristicBuffer.append("<TD width=\"85px\" align=\"left\" valign=\"top\"><B>SM: </B>"+validateString1(strSampling)+"<BR></BR><B>SG: </B>"+validateString1(strSubGroup)+"</TD>");
				}
				//Modified by DSM (Sogeti) for 22x.04 (Dec CW 2023) Requirement 47656,47667 - Start
                if(!strPDFViewKind.contains("supplier") && (!pgV3Constants.TYPE_STRUCTURED_ATS.equals(strType))){
                //Modified by DSM (Sogeti) for 22x.04 (Dec CW 2023) Requirement 47656,47667 - End	
                    objectPerformanceChracteristicBuffer.append("<TD width=\"140px\" align=\"left\" valign=\"top\"><B>LVL: </B>"+validateString1(strPlantTestingLvl)+"<BR></BR><B>RT: </B>"+validateString1(strRetesting)+"<BR></BR><B>UoM: </B>"+validateString1(strRetestingUOM)+"</TD>");
                }
              //Added by DSM (Sogeti) for 22x.04 (Dec CW 2023) Requirement 47656,47667 - Start
				if(strType.equals(pgV3Constants.TYPE_STRUCTURED_ATS)){
					objectPerformanceChracteristicBuffer.append("<TD width=\"170px\" align=\"left\" valign=\"top\">"+validateString1(strPlantTestingLvl)+"</TD>");
				}
				//Added by DSM (Sogeti) for 22x.04 (Dec CW 2023) Requirement 47656,47667 - End
                if(strType.equals(pgV3Constants.TYPE_FINISHEDPRODUCTPART)){
                    if(context.isAssigned(pgV3Constants.ROLE_PGCONTRACTSUPPLIER) || context.isAssigned(pgV3Constants.ROLE_PGCONTRACTMANUFACTURER)) {
                        objectPerformanceChracteristicBuffer.append("<TD width=\"210px\" align=\"left\" valign=\"top\"><B>LSL: </B>"+validateString1(strLowerSpecificationLimit)+"<BR></BR><B>LTGT: </B>"+validateString1(strLowerTarget)+"<BR></BR><B>TGT: </B>"+validateString1(strTarget)+"<BR></BR><B>UTGT: </B>"+validateString1(strUpperTarget)+"<BR></BR><B>USL: </B>"+validateString1(strUpperSpecificationLimit)+"</TD>");
                    } else {
                        objectPerformanceChracteristicBuffer.append("<TD width=\"210px\" align=\"left\" valign=\"top\"><B>LSL: </B>"+validateString1(strLowerSpecificationLimit)+"<BR></BR><B>LRRL: </B>"+validateString1(strLowerRoutineReleaseLimit)+"<BR></BR><B>LTGT: </B>"+validateString1(strLowerTarget)+"<BR></BR><B>TGT: </B>"+validateString1(strTarget)+"<BR></BR><B>UTGT: </B>"+validateString1(strUpperTarget)+"<BR></BR><B>URRL: </B>"+validateString1(strUpperRoutineReleaseLimit)+"<BR></BR><B>USL: </B>"+validateString1(strUpperSpecificationLimit)+"</TD>");
                    }
                }
                else if(pgV3Constants.TYPE_ASSEMBLEDPRODUCTPART.equals(strType) || pgV3Constants.TYPE_PGCONSUMERUNITPART.equals(strType) || pgV3Constants.TYPE_PGCUSTOMERUNITPART.equals(strType) || pgV3Constants.TYPE_DEVICEPRODUCTPART.equals(strType) || pgV3Constants.TYPE_FABRICATEDPART.equals(strType) || pgV3Constants.TYPE_FORMULATIONPART.equals(strType) ||  pgV3Constants.TYPE_PGMASTERCUSTOMERUNITPART.equals(strType) || pgV3Constants.TYPE_PGMASTERCONSUMERUNITPART.equals(strType) || pgV3Constants.TYPE_PGMASTERINNERPACKUNITPART.equals(strType) || pgV3Constants.TYPE_MASTERPRODUCTPART.equals(strType)|| pgV3Constants.TYPE_PGINNERPACKUNITPART.equals(strType)){

                    objectPerformanceChracteristicBuffer.append("<TD width=\"210px\" align=\"left\" valign=\"top\"><B>LSL: </B>"+validateString1(strLowerSpecificationLimit)+"<BR></BR><B>LRRL: </B>"+validateString1(strLowerRoutineReleaseLimit)+"<BR></BR><B>LTGT: </B>"+validateString1(strLowerTarget)+"<BR></BR><B>TGT: </B>"+validateString1(strTarget)+"<BR></BR><B>UTGT: </B>"+validateString1(strUpperTarget)+"<BR></BR><B>URRL: </B>"+validateString1(strUpperRoutineReleaseLimit)+"<BR></BR><B>USL: </B>"+validateString1(strUpperSpecificationLimit)+"</TD>");
                }
              //Added by DSM (Sogeti) for 22x.04 (Dec CW 2023) Requirement 47656,47667 - Start
				else if(strType.equals(pgV3Constants.TYPE_STRUCTURED_ATS)){
					objectPerformanceChracteristicBuffer.append("<TD width=\"170px\" align=\"left\" valign=\"top\"><B>LSL: </B>"+validateString1(strLowerSpecificationLimit)+"</TD>");
					objectPerformanceChracteristicBuffer.append("<TD width=\"170px\" align=\"left\" valign=\"top\"><B>LRRL: </B>"+validateString1(strLowerRoutineReleaseLimit)+"</TD>");
					objectPerformanceChracteristicBuffer.append("<TD width=\"170px\" align=\"left\" valign=\"top\"><B>LT: </B>"+validateString1(strLowerTarget)+"</TD>");
					objectPerformanceChracteristicBuffer.append("<TD width=\"170px\" align=\"left\" valign=\"top\">"+validateString1(strTarget)+"</TD>");
					objectPerformanceChracteristicBuffer.append("<TD width=\"170px\" align=\"left\" valign=\"top\"><B>UT: </B>"+validateString1(strUpperTarget)+"</TD>");
					objectPerformanceChracteristicBuffer.append("<TD width=\"170px\" align=\"left\" valign=\"top\"><B>URRL: </B>"+validateString1(strUpperRoutineReleaseLimit)+"</TD>");
					objectPerformanceChracteristicBuffer.append("<TD width=\"170px\" align=\"left\" valign=\"top\"><B>USL: </B>"+validateString1(strUpperSpecificationLimit)+"</TD>");
				}
              //Added by DSM (Sogeti) for 22x.04 (Dec CW 2023) Requirement 47656,47667 - End
                else{
                    objectPerformanceChracteristicBuffer.append("<TD width=\"210px\" align=\"left\" valign=\"top\"><B>LSL: </B>"+validateString1(strLowerSpecificationLimit)+"<BR></BR><B>LTGT: </B>"+validateString1(strLowerTarget)+"<BR></BR><B>TGT: </B>"+validateString1(strTarget)+"<BR></BR><B>UTGT: </B>"+validateString1(strUpperTarget)+"<BR></BR><B>USL: </B>"+validateString1(strUpperSpecificationLimit)+"</TD>");
                }
              //Added by DSM (Sogeti) for 22x.04 (Dec CW 2023) Requirement 47656,47667 - Start
			  //Modified by DSM (Sogeti) for 22x.04 (Dec CW 2023) Defect 55289 - Start
				if(strType.equals(pgV3Constants.TYPE_STRUCTURED_ATS)) {
                        objectPerformanceChracteristicBuffer.append("<TD width=\"170px\" align=\"left\" valign=\"top\">" + validateString1(strATSOperation) + "</TD>");
                        objectPerformanceChracteristicBuffer.append("<TD width=\"170px\" align=\"left\" valign=\"top\"><B>CFN: </B>" + validateString1(strATSContextFormula) + "</TD>");
                        objectPerformanceChracteristicBuffer.append("<TD width=\"170px\" align=\"left\" valign=\"top\"><B>C: </B>" + validateString1(strATSChar) + "</TD>");
                        objectPerformanceChracteristicBuffer.append("<TD width=\"170px\" align=\"left\" valign=\"top\"><B>CS: </B>" + validateString1(strATSCharSpec) + "</TD>");
                }
				//Modified by DSM (Sogeti) for 22x.04 (Dec CW 2023) Defect 55289 - Ends
				//Added by DSM (Sogeti) for 22x.04 (Dec CW 2023) Requirement 47656,47667 - End
				else{
                objectPerformanceChracteristicBuffer.append("<TD width=\"80px\" align=\"left\" valign=\"top\"><B>UoM: </B>"+validateString1(strUnitofMeasureMasterList)+"<BR></BR><B>RTN: </B>"+validateString1(strReportToNearest)+"<BR></BR><B>RT: </B>"+validateString1(strReportType)+"</TD>");

                objectPerformanceChracteristicBuffer.append("<TD width=\"140px\" align=\"left\" valign=\"top\"><B>RC: </B>"+validateString1(strReleaseCriteria)+"</TD>");

                objectPerformanceChracteristicBuffer.append("<TD width=\"140px\" align=\"left\" valign=\"top\"><B>AC: </B>"+validateString1(strActionRequiredList)+"<BR></BR><B>CR: </B>"+validateString1(strCriticalityFactor)+"<BR></BR><B>BA: </B>"+validateString1(strBasis)+"</TD>");
				}
                if(strType.contains(pgV3Constants.PGMASTER)){
                    objectPerformanceChracteristicBuffer.append("<TD width=\"110px\" align=\"left\" valign=\"top\"><B>TG: </B>"+validateString1(strTestGroup)+"<BR></BR><B>AP: </B>"+validateString1(strApplication)+"</TD>");
                }
              //Added by DSM (Sogeti) for 22x.04 (Dec CW 2023) Requirement 47656,47667 - Start
			  //Modified by DSM (Sogeti) for 22x.04 (Dec CW 2023) Defect 55289 - Start
				else if(strType.equals(pgV3Constants.TYPE_STRUCTURED_ATS)) {
                        objectPerformanceChracteristicBuffer.append("<TD width=\"170px\" align=\"left\" valign=\"top\">" + validateString1(strATSTM) + "</TD>");
                        objectPerformanceChracteristicBuffer.append("<TD width=\"170px\" align=\"left\" valign=\"top\">" + validateString1(strATSReferenceDoc) + "</TD>");
                }
				//Modified by DSM (Sogeti) for 22x.04 (Dec CW 2023) Defect 55289 - Ends
              //Added by DSM (Sogeti) for 22x.04 (Dec CW 2023) Requirement 47656,47667 - End
                else{
                    String strMasterTitle = getPerformanceChracteristicMasterTitle(context,strObjectId,strReferenceType,strPDFViewKind,strId,sRel);
                    objectPerformanceChracteristicBuffer.append("<TD width=\"110px\" align=\"left\" valign=\"top\"><B>TG: </B>"+validateString1(strTestGroup)+"<BR></BR><B>AP: </B>"+validateString1(strApplication)+"<BR></BR><B>MPT: </B>"+validateString1(strMasterTitle)+"</TD>");
                }
                objectPerformanceChracteristicBuffer.append("</TR>");
            }
            objectPerformanceChracteristicBuffer.append("</tbody>");
        } catch (MatrixException e) {
            e.printStackTrace();
        }
        return objectPerformanceChracteristicBuffer.toString();
    }
    /**
     * Helper method to get  Performance Characteristics table, Teste Method data map
     * @param context - matrix Context
     * @param String  - Object Id
     * @return Map - Test method map
     * @since DSM 2018x.5
     */
    private Map<String, String> getTMDetailsMap(Context context, String strId) {
        Map<String,String> mpTMLogic = null;
        StringList selectStmts = new StringList(29);
        selectStmts.add(pgV3Constants.SELECT_ATTRIBUTE_PGTMLOGIC);
        selectStmts.add(pgV3Constants.SELECT_ATTRIBUTE_PGMETHODNUMBER);
        selectStmts.add(pgV3Constants.SELECT_ATTRIBUTE_PGMETHODSPECIFICS);
        selectStmts.add(pgV3Constants.SELECT_ATTRIBUTE_PGSAMPLING);
        selectStmts.add(pgV3Constants.SELECT_ATTRIBUTE_PGSUBGROUP);
        selectStmts.add(pgV3Constants.SELECT_ATTRIBUTE_PGLOWERSPECIFICATIONLIMIT);
        selectStmts.add(pgV3Constants.SELECT_ATTRIBUTE_PGLOWERROUTINRRELEASELIMIT);
        selectStmts.add(pgV3Constants.SELECT_ATTRIBUTE_PGLOWERTARGET);
        selectStmts.add(pgV3Constants.SELECT_ATTRIBUTE_PGTARGET);
        selectStmts.add(pgV3Constants.SELECT_ATTRIBUTE_PGUPPERTARGET);
        selectStmts.add(pgV3Constants.SELECT_ATTRIBUTE_PGUPPERROUTINERELEASELIMIT);
        selectStmts.add(pgV3Constants.SELECT_ATTRIBUTE_PGUPPERSPECIFICATIONLIMIT);
        selectStmts.add(pgV3Constants.SELECT_ATTRIBUTE_PGREPORTTONEAREST);
        selectStmts.add(pgV3Constants.SELECT_ATTRIBUTE_PGROUTINERELEASECRITERIA);
        selectStmts.add(pgV3Constants.SELECT_ATTRIBUTE_PGRELEASECRITERIA);
        selectStmts.add(pgV3Constants.SELECT_ATTRIBUTE_PGBASIS);
        selectStmts.add(pgV3Constants.SELECT_ATTRIBUTE_PGAPPLICATION);
        selectStmts.add(pgV3Constants.SELECT_ATTRIBUTE_PGACTIONREQUIRED);
        selectStmts.add(pgV3Constants.SELECT_ATTRIBUTE_PGUNITOFMEASURE);
        selectStmts.add(pgV3Constants.SELECT_ATTRIBUTE_PGMETHODORIGIN);
        selectStmts.add(pgV3Constants.SELECT_ATTRIBUTE_PGTESTGROUP);
        selectStmts.add(pgV3Constants.SELECT_ATTRIBUTE_PGRETESTINGUOM);
        selectStmts.add(pgV3Constants.SELECT_ATTRIBUTE_PGPLANTTESTINGRETESTING);
        selectStmts.add(pgV3Constants.SELECT_ATTRIBUTE_PGPLANTTESTING);
        selectStmts.add(pgV3Constants.SELECT_ATTRIBUTE_PGREPORTTYPE);
        selectStmts.add(pgV3Constants.SELECT_ATTRIBUTE_PGCRITICALITYFACTOR);
        selectStmts.add(pgV3Constants.SELECT_ATTRIBUTE_PGCHARACTERISTICSPECIFICS);
        selectStmts.add(pgV3Constants.SELECT_ATTRIBUTE_PGCHANGE);
        selectStmts.add(pgV3Constants.SELECT_ATTRIBUTE_PGCHARACTERISTIC);
        try {
            DomainObject domPerfChar = DomainObject.newInstance(context,strId);
            mpTMLogic=domPerfChar.getInfo(context,selectStmts);
        } catch (FrameworkException e) {
            e.printStackTrace();
        }
        return mpTMLogic;
    }
    /**
     * Helper method to get  Performance Characteristics table data map
     * @param context - matrix Context
     * @param String  - Object Id
     * @param String  - PDF View Type
     * @return MapList - MapList of Performce Char Data
     * @since DSM 2018x.5
     */
    private MapList getPerformanceCharDataMap(Context context,String strObjectId,String strPDFViewKind){
        MapList mlPerfChar = new MapList();
        try {
            Map<String, String> mpBOMSubsSST = new HashMap<>();
            mpBOMSubsSST.put("objectId", strObjectId);
            mpBOMSubsSST.put("selectedTable", "pgVPDPerformanceCharacteristicTable");
            if("GenDoc".equals(strPDFViewKind.trim())){
                mpBOMSubsSST.put("pgVPDCPNCharacteristicDerivedFilter", "Local");
            }
            else {
                mpBOMSubsSST.put("pgVPDCPNCharacteristicDerivedFilter", "All");
            }
            mpBOMSubsSST.put("Mode","PDF");
            String[] args = JPO.packArgs(mpBOMSubsSST);

            mlPerfChar = getMicroChar(context, args);
        } catch (Exception e) {
            e.printStackTrace();
        }
        return mlPerfChar;

    }
    /**
     * Helper method to get  Performance Characteristics table data map
     * @param context - matrix Context
     * @param String  - Object Id
     * @param String  - PDF View Type
     * @return String  -  Performce Char Data
     * @since DSM 2018x.5
     */
    private String getPerformanceCharTableHeader(Context context,String strType, String strPDFViewKind){
        StringBuffer objectPerformanceChracteristicBuffer = new StringBuffer();
        try {
            objectPerformanceChracteristicBuffer.append("<thead>");			
          //Added by DSM (Sogeti) for 22x.04 (Dec CW 2023) Requirement 47656,47667 - Start   
			if(pgV3Constants.TYPE_STRUCTURED_ATS.equals(strType)){
			    objectPerformanceChracteristicBuffer.append("<TR><TD class=\"new\" colspan='10'><B><font size ='4'>Characteristic</font></B></TD></TR>");
				objectPerformanceChracteristicBuffer.append("<TR><TH class=\"new\" colspan='12'><B><font size ='4'>ATS</font></B></TH><TH class=\"new\" colspan='6'><B><font size ='4'>Context Formula</font></B></TH></TR>");
			}
			//Added by DSM (Sogeti) for 22x.04 (Dec CW 2023) Requirement 47656,47667 - End
            else{	
				objectPerformanceChracteristicBuffer.append("<TR><TD class=\"new\" colspan='10'><B><font size ='4'>Performance Characteristic</font></B></TD></TR>");
				objectPerformanceChracteristicBuffer.append("<TR align='center'><TH width=\"30px\" align=\"center\"><B>Chg.</B></TH>");
			}
            if(strType.contains(pgV3Constants.PGMASTER)){
                objectPerformanceChracteristicBuffer.append("<TH width=\"170px\" align=\"center\"><B>Characteristic (Ch)<BR/>Characteristic Specifics (CS)<BR/></B></TH>");
            }
          //Added by DSM (Sogeti) for 22x.04 (Dec CW 2023) Requirement 47656,47667 - Start
			else if(pgV3Constants.TYPE_STRUCTURED_ATS.equals(strType)){
				objectPerformanceChracteristicBuffer.append("<TR align='center'><TH width=\"110px\" align=\"center\"><B>Character<BR/>istic</B></TH>");
				objectPerformanceChracteristicBuffer.append("<TH width=\"110px\" align=\"center\"><B>Character<BR/>istic Speci<BR/>fics</B></TH>");
			}
          //Added by DSM (Sogeti) for 22x.04 (Dec CW 2023) Requirement 47656,47667 - End
            else{
                objectPerformanceChracteristicBuffer.append("<TH width=\"170px\" align=\"center\"><B>Characteristic (Ch)<BR/>Characteristic Specifics (CS)<BR/> Path(P)</B></TH>");
            }
          //Added by DSM (Sogeti) for 22x.04 (Dec CW 2023) Requirement 47656,47667 - Start
			if(pgV3Constants.TYPE_STRUCTURED_ATS.equals(strType)){
				objectPerformanceChracteristicBuffer.append("<TH width=\"110px\" align=\"center\"><B>Test Method Name</B></TH>");
				objectPerformanceChracteristicBuffer.append("<TH width=\"110px\" align=\"center\"><B>Test Method Reference Document</B></TH>");
			}
			//Added by DSM (Sogeti) for 22x.04 (Dec CW 2023) Requirement 47656,47667 - End
			else{
            objectPerformanceChracteristicBuffer.append("<TH width=\"170px\" align=\"center\"><B>Test Method (Name)<BR/>Test Method Logic (TML)<BR/>Test Method Origin (TMO) <BR/>Other Test Method Number (TM#)<BR/>Test Method Specifics (Sp)<BR/>Test Method Reference Document Name(TMRDN)</B></TH>");
            objectPerformanceChracteristicBuffer.append("<TH width=\"85px\" align=\"center\"><B>Sampling (SM) <BR/>Subgroup (SG)</B></TH>");
			}
			//Modified by DSM (Sogeti) for 22x.04 (Dec CW 2023) Requirement 47656,47667 - Start
            if(!strPDFViewKind.contains("supplier") && (!pgV3Constants.TYPE_STRUCTURED_ATS.equals(strType))){
            //Modified by DSM (Sogeti) for 22x.04 (Dec CW 2023) Requirement 47656,47667 - End
                objectPerformanceChracteristicBuffer.append("<TH width=\"140px\" align=\"center\"><B>Plant Testing Level (LVL)<BR/>Plant Testing:Retesting (RT)<BR/>Retesting: Unit of Measure (UoM)</B></TH>");
            }
          //Added by DSM (Sogeti) for 22x.04 (Dec CW 2023) Requirement 47656,47667 - Start
			if(pgV3Constants.TYPE_STRUCTURED_ATS.equals(strType))
			{
				objectPerformanceChracteristicBuffer.append("<TH width=\"110px\" align=\"center\"><B>Plant Test<BR/>ing: Retest<BR/>ing</B></TH>");
			}	
			//Added by DSM (Sogeti) for 22x.04 (Dec CW 2023) Requirement 47656,47667 - End
            if(strType.equals(pgV3Constants.TYPE_FINISHEDPRODUCTPART)){
                if(context.isAssigned(pgV3Constants.ROLE_PGCONTRACTSUPPLIER) || context.isAssigned(pgV3Constants.ROLE_PGCONTRACTMANUFACTURER)) {
                    objectPerformanceChracteristicBuffer.append("<TH width=\"210px\" align=\"center\"><B>Lower Specification <BR/> Limit (LSL)<BR></BR>Lower Target (LTGT)<BR></BR>Target (TGT)<BR></BR>Upper Target (UTGT)<BR></BR>Upper Specification <BR/> Limit (USL)</B></TH>");
                } else {
                    objectPerformanceChracteristicBuffer.append("<TH width=\"210px\" align=\"center\"><B>Lower Specification <BR/> Limit (LSL)<BR></BR>Lower Routine Release <BR></BR>Limit (LRRL)<BR></BR>Lower Target (LTGT)<BR></BR>Target (TGT)<BR></BR>Upper Target (UTGT)<BR></BR>Upper Routine Release<BR></BR>Limit (URRL)<BR></BR>Upper Specification <BR/> Limit (USL)</B></TH>");
                }
            }
            else if(pgV3Constants.TYPE_ASSEMBLEDPRODUCTPART.equals(strType) || pgV3Constants.TYPE_PGCONSUMERUNITPART.equals(strType) || pgV3Constants.TYPE_PGCUSTOMERUNITPART.equals(strType) || pgV3Constants.TYPE_DEVICEPRODUCTPART.equals(strType) || pgV3Constants.TYPE_FABRICATEDPART.equals(strType) || pgV3Constants.TYPE_FORMULATIONPART.equals(strType) ||  pgV3Constants.TYPE_PGMASTERCUSTOMERUNITPART.equals(strType) || pgV3Constants.TYPE_PGMASTERCONSUMERUNITPART.equals(strType) || pgV3Constants.TYPE_PGMASTERINNERPACKUNITPART.equals(strType) || pgV3Constants.TYPE_MASTERPRODUCTPART.equals(strType) || pgV3Constants.TYPE_PGINNERPACKUNITPART.equals(strType)){

                objectPerformanceChracteristicBuffer.append("<TH width=\"210px\" align=\"center\"><B>Lower Specification <BR/> Limit (LSL)<BR></BR>Lower Routine Release<BR></BR>Limit (LRRL)<BR></BR>Lower Target (LTGT)<BR></BR>Target (TGT)<BR></BR>Upper Target (UTGT)<BR></BR>Upper Routine Release<BR></BR>Limit (URRL)<BR></BR>Upper Specification <BR/> Limit (USL)</B></TH>");
            }
          //Added by DSM (Sogeti) for 22x.04 (Dec CW 2023) Requirement 47656,47667 - Start
			else if(pgV3Constants.TYPE_STRUCTURED_ATS.equals(strType)){
				objectPerformanceChracteristicBuffer.append("<TH width=\"110px\" align=\"center\"><B>LSL <BR/>(Lower Specifi<BR/>cation Limit)</B></TH>");
				objectPerformanceChracteristicBuffer.append("<TH width=\"110px\" align=\"center\"><B>LRRL <BR/>(Lower Routine Release)</B></TH>");
				objectPerformanceChracteristicBuffer.append("<TH width=\"110px\" align=\"center\"><B>LT <BR/>(Lower Target)</B></TH>");
				objectPerformanceChracteristicBuffer.append("<TH width=\"110px\" align=\"center\"><B>Target</B></TH>");
				objectPerformanceChracteristicBuffer.append("<TH width=\"110px\" align=\"center\"><B>UT<BR/>(Upper Target)</B></TH>");
				objectPerformanceChracteristicBuffer.append("<TH width=\"110px\" align=\"center\"><B>URRL<BR/>(Upper Routine Release Limit)</B></TH>");
				objectPerformanceChracteristicBuffer.append("<TH width=\"110px\" align=\"center\"><B>USL<BR/>(Upper Specifi<BR/>cation Limit)</B></TH>");
			}
          //Added by DSM (Sogeti) for 22x.04 (Dec CW 2023) Requirement 47656,47667 - End
            else{
                objectPerformanceChracteristicBuffer.append("<TH width=\"210px\" align=\"center\"><B>Lower Specification <BR/> Limit (LSL)<BR></BR>Lower Target (LTGT)<BR></BR>Target (TGT)<BR></BR>Upper Target (UTGT)<BR></BR>Upper Specification <BR/> Limit (USL)</B></TH>");
            }
          //Added by DSM (Sogeti) for 22x.04 (Dec CW 2023) Requirement 47656,47667 - Start
			if(pgV3Constants.TYPE_STRUCTURED_ATS.equals(strType)){
				objectPerformanceChracteristicBuffer.append("<TH width=\"110px\" align=\"center\"><B>Operation</B></TH>");
				objectPerformanceChracteristicBuffer.append("<TH width=\"110px\" align=\"center\"><B>Context Formula Name</B></TH>");
				objectPerformanceChracteristicBuffer.append("<TH width=\"110px\" align=\"center\"><B>Character<BR/>istic</B></TH>");
				objectPerformanceChracteristicBuffer.append("<TH width=\"110px\" align=\"center\"><B>Character<BR/>istic Speci<BR/>fics</B></TH>");
			}
			//Added by DSM (Sogeti) for 22x.04 (Dec CW 2023) Requirement 47656,47667 - End
			else{
            objectPerformanceChracteristicBuffer.append("<TH width=\"80px\" align=\"center\"><B>Unit of Measure (UoM)<BR/>Report to Nearest (RTN)<BR/>Report Type(RT)</B></TH>");
            objectPerformanceChracteristicBuffer.append("<TH width=\"150px\" align=\"center\"><B>Release Criteria (RC)</B></TH>");
            objectPerformanceChracteristicBuffer.append("<TH width=\"140px\" align=\"center\"><B>Action Required (AC)<BR/>Criticality Factor (CR)<BR/>Basis (BA)</B></TH>");
			}
            if(strType.contains(pgV3Constants.PGMASTER)){
                objectPerformanceChracteristicBuffer.append("<TH width=\"110px\" align=\"center\"><B>Test Group (TG)<BR/>Application (AP)</B></TH>");
            }
          //Added by DSM (Sogeti) for 22x.04 (Dec CW 2023) Requirement 47656,47667 - Start
			else if(pgV3Constants.TYPE_STRUCTURED_ATS.equals(strType)){
				objectPerformanceChracteristicBuffer.append("<TH width=\"110px\" align=\"center\"><B>Test Method Name</B></TH>");
				objectPerformanceChracteristicBuffer.append("<TH width=\"110px\" align=\"center\"><B>Test Method Reference Document</B></TH>");	
			}
          //Added by DSM (Sogeti) for 22x.04 (Dec CW 2023) Requirement 47656,47667 - End
			else{
                objectPerformanceChracteristicBuffer.append("<TH width=\"110px\" align=\"center\"><B>Test Group (TG)<BR/>Application (AP)<BR/>Master Part Title (MPT)</B></TH>");
            }
            objectPerformanceChracteristicBuffer.append("</TR></thead>");
        } catch (MatrixException e) {
            e.printStackTrace();
        }
        return objectPerformanceChracteristicBuffer.toString();
    }
    /**
     * Helper method to get  Performance Characteristics table, Path value
     * @param context - matrix Context
     * @param String  - Parent Object Id
     * @param String  - Reference Type
     * @param String  - PDF View Type
     * @param String  - Object Id
     * @param String  - Rel Attribute value
     * @return String  - Path
     * @since DSM 2018x.5
     */
    private  String getPerformanceChracteristicPath(Context context, String strParentObjId,String strReferenceType, String strPDFViewKind,String strChildObjId, String sRel){
        String strPathForPC   = DomainConstants.EMPTY_STRING;
        try {
            String[] argsPath = getArguments(context,strParentObjId,strReferenceType,strPDFViewKind,strChildObjId,sRel);
            List<String> lPath =(List)pgPDFViewHelper.executeMainClassMethod(context, "emxCPNCharacteristicList", "getDerivedPathForRow", argsPath);
            if(!lPath.isEmpty()) {
                strPathForPC = (String)lPath.get(0);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return strPathForPC;
    }
    /**
     * Helper method to get  Performance Characteristics table, Master part title value
     * @param context - matrix Context
     * @param String  - Parent Object Id
     * @param String  - Reference Type
     * @param String  - PDF View Type
     * @param String  - Child Object Id
     * @param String  - Rel Attribute value
     * @return String  - Master part title
     * @since DSM 2018x.5
     */
    private  String getPerformanceChracteristicMasterTitle(Context context, String strParentObjId,String strReferenceType, String strPDFViewKind,String strChildObjId, String sRel){
        String strMasterTitle = DomainConstants.EMPTY_STRING;
        try {
            String[] argsPath = getArguments(context,strParentObjId,strReferenceType,strPDFViewKind,strChildObjId,sRel);
            List<String> lMPT = (List)pgPDFViewHelper.executeMainClassMethod(context, "pgDSOUtil", "getDerivedTitleForRow", argsPath);
            if(!lMPT.isEmpty()) {
                strMasterTitle = (String)lMPT.get(0);
                if(UIUtil.isNullOrEmpty(strMasterTitle)){
                    strMasterTitle = DomainConstants.EMPTY_STRING;
                }
                strMasterTitle = strMasterTitle.replaceAll("[<]","#LESS_THAN");
            }
        }
        catch (Exception e) {
            e.printStackTrace();
        }
        return strMasterTitle;
    }
    /**
     * Helper method to get  Performance Characteristics table, Master part title value
     * @param context - matrix Context
     * @param String  - Parent Object Id
     * @param String  - OS Attribute value
     * @param String  - Child Object Id
     * @return String  - Test Method Name
     * @since DSM 2018x.5
     */
    private  String getPerformanceChracteristicTestMethodName(Context context, String strParentObjId,String strOS,String strChildObjId){
        String strTM = DomainConstants.EMPTY_STRING;
        try {
            List<String> lTM = null;
            String[] argsTM = getArguments(strParentObjId,strChildObjId);
            if(pgV3Constants.DSM_ORIGIN.equalsIgnoreCase(strOS)) {
                lTM =(List)pgPDFViewHelper.executeMainClassMethod(context, "pgDSOUtil", "pgGetTestMethods", argsTM);
            }
            else{
                lTM =(List)pgPDFViewHelper.executeMainClassMethod(context, "pgIPMProductData", "pgGetTestMethods", argsTM);
            }
            if(!lTM.isEmpty()) {
                strTM = (String)lTM.get(0);
                if(UIUtil.isNullOrEmpty(strTM)){
                    strTM = DomainConstants.EMPTY_STRING;
                }
                strTM = strTM.replaceAll("\n","|\n");
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return strTM;
    }
    /**
     * Helper method to get  Performance Characteristics table, Reference Doc Name
     * @param context - matrix Context
     * @param String  - Parent Object Id
     * @param String  - Child Object Id
     * @return String  - Reference Doc Name
     * @since DSM 2018x.5
     */
    private  String getPerformanceChracteristicRefDocName(Context context, String strParentObjId,String strChildObjId){
        String strReferenceDoc = DomainConstants.EMPTY_STRING;
        String[] argsTM = getArguments(strParentObjId,strChildObjId);
        List<String> vReferenceDoc;
        try {
            vReferenceDoc = (List)pgPDFViewHelper.executeMainClassMethod(context, "pgIPMProductData", "pgGetReferenceDocGCAS", argsTM);
            strReferenceDoc = (String)vReferenceDoc.get(0);
        } catch (Exception e) {
            e.printStackTrace();
        }
        return strReferenceDoc;
    }
    /**
     * Helper method to get  required arguments for Performance Characteristics table
     * @param context - matrix Context
     * @param String  - Parent Object Id
     * @param String  - Child Object Id
     * @return Args  - Args
     * @since DSM 2018x.5
     */
    private  String[] getArguments(String strParentObjId,String strChildObjId){
        Map<String, String> mpTMName = new HashMap<>();
        Map<String, String> mpParamList = new HashMap<>();
        //Provide the parametized type for this generic. This sonar rule not be applicable to below map
        //as it includes both map and maplist
        Map mpTM = new HashMap();
        MapList objectListTM = new MapList();
        mpTMName.put("id" , strChildObjId);
        mpTMName.put("objReadAccess","TRUE");
        objectListTM.add(mpTMName);
        mpParamList.put("reportFormat", "PDF");
        //Modified by DSM-2018x.5 for PDF Views (Defect -34032) - Starts
        mpParamList.put("parentOID",strParentObjId);
        //Modified by DSM-2018x.5 for PDF Views (Defect -34032) - Ends
        mpTM.put("objectList", objectListTM);
        mpTM.put("paramList", mpParamList);
        String[] argsTM = JPO.packArgs(mpTM);
        return argsTM;
    }
    /**
     * Helper method to get  required arguments for Performance Characteristics table
     * @param context - matrix Context
     * @param String  - Parent Object Id
     * @param String  - Reference Type
     * @param String  - PDF View Type
     * @param String  - Child Object Id
     * @param String  - Rel Attribute value
     * @return Args  - Args
     * @since DSM 2018x.5
     */
    private  String[] getArguments(Context context, String strParentObjId, String strReferenceType, String strPDFViewKind, String strChildObjId, String sRel){
        //Provide the parametized type for this generic. This sonar rule not be applicable to below map
        //as it includes both map and maplist
        Map mpPath            = new HashMap();
        MapList mlObjListPath = new MapList();
        Map<String, String> mObjPath = new HashMap<>();
        Map<String, String> mParamList = new HashMap<>();
        String[] argsPath     = null;
        String sHasReadAcess  = "TRUE";
        boolean hasReadAccess;
        try {
            DomainObject domObj = DomainObject.newInstance(context,strChildObjId);
            hasReadAccess = domObj.checkAccess(context, (short) AccessConstants.cRead);
            if(!hasReadAccess){
                sHasReadAcess = "FALSE";
            }
            mObjPath.put("id" , strChildObjId);
            mObjPath.put("objReadAccess",sHasReadAcess);
            mObjPath.put("relationship",sRel);
            mlObjListPath.add(mObjPath);
            if(UIUtil.isNotNullAndNotEmpty(strReferenceType) && "M".equalsIgnoreCase(strReferenceType)) {
                mParamList.put("selectedTable" , "pgVPDPerformanceCharacteristicMasterPathTable");
            } else {
                mParamList.put("selectedTable" , "pgVPDPerformanceCharacteristicTable");
            }
            mParamList.put("parentOID",strParentObjId);
            mParamList.put("MasterPDF","pdf");
            if("GenDoc".equals(strPDFViewKind.trim())){
                mParamList.put("pgVPDCPNCharacteristicDerivedFilter", "Local");
            }
            else{
                mParamList.put("pgVPDCPNCharacteristicDerivedFilter", "All");
            }
            mpPath.put("objectList", mlObjListPath);
            mpPath.put("paramList", mParamList);
            argsPath = JPO.packArgs(mpPath);
        }
        catch (MatrixException e) {
            e.printStackTrace();
        }
        return argsPath;
    }
    /**
     * Retrieve Performance characteristics information for DSO types
     * @param context
     * @param args
     * @return
     * @throws MatrixException
     */
	/*private  StringBuilder getPerformanceChracteristicDSO(Context context,String strObjectId,String strPDFViewKind) throws MatrixException{
		long startTime = new Date().getTime();
		StringBuilder objectPerformanceChracteristicBuffer= new StringBuilder();
		Map<String,String> perCharaList = null;
		String strRegEx = "<[^>]*>";
		try
		{
			//Modified by DSM(Sogeti) for Code Optimization Start
			//Modified by DSM-2015x.2 for PDF Views for defect 10476- Starts
			ContextUtil.pushContext(context);
			//Modified by DSM-2015x.2 for PDF Views for defect 10476- Ends
			Map mpBOMSubsSST = new HashMap();
			Map mpPath = null;
			Map mParList = null;
			Map mObjPath = null;
			Map mpTMName = null;
			Map<String,String> mpTMLogic = null;
			MapList mlPerChara = new MapList();
			MapList objectListTM = null;
			Map paramList = null;
			Map mpTM = null;
			String strType = DomainConstants.EMPTY_STRING;
			//Modified by DSM-2015x.2 for PDF Views Performance Characteristics Table(Defect-10647) - Starts
			Map mMasData = new HashMap();
			String strMasterId = DomainConstants.EMPTY_STRING;
			String strMasterName = DomainConstants.EMPTY_STRING;
			String strMasterRev = DomainConstants.EMPTY_STRING;
			MapList mlPerCharaofMaster = new MapList();
			MapList mlObjListPath = null;
			Map<String,String> perCharaListMaster = null;
			StringList slId = new StringList();
			String strPathForPC = DomainConstants.EMPTY_STRING;
			String strRevForPC = DomainConstants.EMPTY_STRING;
			//Modified by DSM-2015x.2 for PDF Views Performance Characteristics Table(Defect-10647) - Ends
			String strId = DomainConstants.EMPTY_STRING;
			String sRel = DomainConstants.EMPTY_STRING;
			String strOS = DomainConstants.EMPTY_STRING;
			String strTMLogic = DomainConstants.EMPTY_STRING;
			String strOtherTMNumber = DomainConstants.EMPTY_STRING;
			String strTsetMethodSpe = DomainConstants.EMPTY_STRING;
			String strOrigin = DomainConstants.EMPTY_STRING;
			String strReferenceDoc = DomainConstants.EMPTY_STRING;
			String strSampling = DomainConstants.EMPTY_STRING;
			String strRetestingUOM = DomainConstants.EMPTY_STRING;
			String strRetesting = DomainConstants.EMPTY_STRING;
			String strSSubGroup = DomainConstants.EMPTY_STRING;
			String strPlantTestingLvl = DomainConstants.EMPTY_STRING;
			String strLowerSpecificationLimit =DomainConstants.EMPTY_STRING;
			String strLowerRoutineReleaseLimit = DomainConstants.EMPTY_STRING;
			String strLowerTarget = DomainConstants.EMPTY_STRING;
			String strTarget = DomainConstants.EMPTY_STRING;
			String strUpperTarget = DomainConstants.EMPTY_STRING;
			String strUpperRoutineReleaseLimit = DomainConstants.EMPTY_STRING;
			String strUpperSpecificationLimit = DomainConstants.EMPTY_STRING;
			String strContext = DomainConstants.EMPTY_STRING;
			String strReportToNearest = DomainConstants.EMPTY_STRING;
			String strUnitofMeasureMasterList = DomainConstants.EMPTY_STRING;
			String strReportType = DomainConstants.EMPTY_STRING;
			String strRoutineReleaseCriteria =DomainConstants.EMPTY_STRING;
			String strReleaseCriteria = DomainConstants.EMPTY_STRING;
			String strBasis = DomainConstants.EMPTY_STRING;
			String strActionRequiredList = DomainConstants.EMPTY_STRING;
			String strCharstopgPLICriticalityFactor =DomainConstants.EMPTY_STRING;
			String strApplication = DomainConstants.EMPTY_STRING;
			String strPCharstopgPLITestGroup = DomainConstants.EMPTY_STRING;
			String strTM = DomainConstants.EMPTY_STRING;
			String strChg = DomainConstants.EMPTY_STRING;
			String strChara = DomainConstants.EMPTY_STRING;
			String strCharaSpe = DomainConstants.EMPTY_STRING;
			//Modified by DSM(Sogeti)-2015x.4 for PDF Views (Req -11427,11473,12000) - Starts
			String strMasterTitle = DomainConstants.EMPTY_STRING;
			//Modified by DSM(Sogeti)-2015x.4 for PDF Views (Req -11427,11473,12000) - Ends
			//Modified by DSM(Sogeti) for Code Optimization End
			String sHasReadAcess = "TRUE";
			//Added by DSM(Sogeti)-2018x.3 for PDF Views (Defect -32393)-Starts
			String strReferenceType = DomainConstants.EMPTY_STRING;
			StringList selectStmt = new StringList(2);
			selectStmt.add(pgV3Constants.SELECT_ATTRIBUTE_REFERENCETYPE);
			selectStmt.add(DomainConstants.SELECT_TYPE);
			//Added by DSM(Sogeti)-2018x.3 for PDF Views (Defect -32393)-Ends
			if(null != strObjectId && !"".equals(strObjectId)){
				DomainObject doObj = DomainObject.newInstance(context, strObjectId);
				//Modified by DSM(Sogeti) for Code Optimization
				//Modified by DSM(Sogeti)-2018x.3 for PDF Views (Defect -32393)-Starts
				//strType = doObj.getInfo(context, DomainConstants.SELECT_TYPE);
				Map mpPartDetails = doObj.getInfo(context, selectStmt);
				strType = (String)mpPartDetails.get(DomainConstants.SELECT_TYPE);
				//Modified by DSM(Sogeti)-2018x.3 for PDF Views (Defect -32393)-Ends

				mpBOMSubsSST.put("objectId", strObjectId);
				mpBOMSubsSST.put("selectedTable", "pgVPDPerformanceCharacteristicTable");
				if("GenDoc".equals(strPDFViewKind.trim())){
					mpBOMSubsSST.put("pgVPDCPNCharacteristicDerivedFilter", "Local");
				}
				else {
					mpBOMSubsSST.put("pgVPDCPNCharacteristicDerivedFilter", "All");
				}
				mpBOMSubsSST.put("Mode","PDF");
				String[] args = JPO.packArgs(mpBOMSubsSST);
				//Modified by DSM(Sogeti) for Code Optimization
				mlPerChara = getMicroChar(context, args);
				//Modified by DSM-2015x.2 for PDF Views Performance Characteristics Table(Defect-10647) - Starts
				StringList relSelects = new StringList(4);
				relSelects.add("frommid["+pgV3Constants.RELATIONSHIP_PARTFAMILYREFERENCE+"].torel.to.name");
				relSelects.add("frommid["+pgV3Constants.RELATIONSHIP_PARTFAMILYREFERENCE+"].torel.to.revision");
				relSelects.add("frommid["+pgV3Constants.RELATIONSHIP_PARTFAMILYREFERENCE+"].torel.to.id");
				MapList mlMasterList = doObj.getRelatedObjects(context, //Context
																pgV3Constants.RELATIONSHIP_CLASSIFIEDITEM, //relPattern
																pgV3Constants.TYPE_PARTFAMILY, //typePattern
																null, //objectSelects
																relSelects,// relationshipSelects
																true, //getTo - Get Parent Data
																false, //getFrom - Get Child Data
																(short)1, //recurseToLevel
																"", //objectWhere
																""); //relationshipWhere
				if(null != mlMasterList && mlMasterList.size()>0){
				for (Iterator i = mlMasterList.iterator(); i.hasNext();){
						mMasData = (Map) i.next();
						strMasterName = (String)mMasData.get("frommid["+pgV3Constants.RELATIONSHIP_PARTFAMILYREFERENCE+"].torel.to.name");
						strMasterRev = (String)mMasData.get("frommid["+pgV3Constants.RELATIONSHIP_PARTFAMILYREFERENCE+"].torel.to.revision");
						strMasterId = (String)mMasData.get("frommid["+pgV3Constants.RELATIONSHIP_PARTFAMILYREFERENCE+"].torel.to.id");
				}
				mpBOMSubsSST.put("objectId", strMasterId);
				mpBOMSubsSST.put("selectedTable", "pgVPDPerformanceCharacteristicTable");
				mpBOMSubsSST.put("pgVPDCPNCharacteristicDerivedFilter", "All");
				mpBOMSubsSST.put("Mode","PDF");
				//Modified by DSM-2015x.2 for PDF Views Performance Characteristics Table(Defect-10779) - Starts
				if(!(null==strMasterId || UIUtil.isNullOrEmpty(strMasterId) || strMasterId.equals(DomainConstants.EMPTY_STRING)))
					//Modified by DSM-2015x.2 for PDF Views Performance Characteristics Table(Defect-10779) - End
				{
				String[] args1 = JPO.packArgs(mpBOMSubsSST);
				mlPerCharaofMaster = getMicroChar(context, args1);
				for (Iterator i1 = mlPerCharaofMaster.iterator(); i1.hasNext();){
						perCharaListMaster = (Map) i1.next();
						slId.add((String)perCharaListMaster.get("id"));
				}
				}
				}
				//Added by DSM(Sogeti)-2018x.3 for PDF Views (Defect -32393)-Starts
					strReferenceType = (String)mpPartDetails.get(pgV3Constants.SELECT_ATTRIBUTE_REFERENCETYPE);
					//Added by DSM(Sogeti)-2018x.3 for PDF Views (Defect -32393)-Ends
				//Modified by DSM-2015x.2 for PDF Views Performance Characteristics Table(Defect-10647) - Ends
				int nPerCharaSize = mlPerChara.size();
				//Added by DSM-2015x.1 for PDF Views to remove dependency on picklist and get values from attributes on 26-Feb-2016 - Starts
				StringList selectStmts = new StringList(29);
				//Added by DSM-2015x.1 for PDF Views to remove dependency on picklist and get values from attributes on 26-Feb-2016 - Ends
				selectStmts.add(pgV3Constants.SELECT_ATTRIBUTE_PGTMLOGIC);
				selectStmts.add(pgV3Constants.SELECT_ATTRIBUTE_PGMETHODNUMBER);
				selectStmts.add(pgV3Constants.SELECT_ATTRIBUTE_PGMETHODSPECIFICS);
				selectStmts.add(pgV3Constants.SELECT_ATTRIBUTE_PGSAMPLING);
				selectStmts.add(pgV3Constants.SELECT_ATTRIBUTE_PGSUBGROUP);
				selectStmts.add(pgV3Constants.SELECT_ATTRIBUTE_PGLOWERSPECIFICATIONLIMIT);
				selectStmts.add(pgV3Constants.SELECT_ATTRIBUTE_PGLOWERROUTINRRELEASELIMIT);
				selectStmts.add(pgV3Constants.SELECT_ATTRIBUTE_PGLOWERTARGET);
				selectStmts.add(pgV3Constants.SELECT_ATTRIBUTE_PGTARGET);
				selectStmts.add(pgV3Constants.SELECT_ATTRIBUTE_PGUPPERTARGET);
				selectStmts.add(pgV3Constants.SELECT_ATTRIBUTE_PGUPPERROUTINERELEASELIMIT);
				selectStmts.add(pgV3Constants.SELECT_ATTRIBUTE_PGUPPERSPECIFICATIONLIMIT);
				selectStmts.add(pgV3Constants.SELECT_ATTRIBUTE_PGREPORTTONEAREST);
				selectStmts.add(pgV3Constants.SELECT_ATTRIBUTE_PGROUTINERELEASECRITERIA);
				selectStmts.add(pgV3Constants.SELECT_ATTRIBUTE_PGRELEASECRITERIA);
				selectStmts.add(pgV3Constants.SELECT_ATTRIBUTE_PGBASIS);
				selectStmts.add(pgV3Constants.SELECT_ATTRIBUTE_PGAPPLICATION);
				selectStmts.add(pgV3Constants.SELECT_ATTRIBUTE_PGACTIONREQUIRED);
				selectStmts.add(pgV3Constants.SELECT_ATTRIBUTE_PGUNITOFMEASURE);
				selectStmts.add(pgV3Constants.SELECT_ATTRIBUTE_PGMETHODORIGIN);
				selectStmts.add(pgV3Constants.SELECT_ATTRIBUTE_PGTESTGROUP);
				selectStmts.add(pgV3Constants.SELECT_ATTRIBUTE_PGRETESTINGUOM);
				selectStmts.add(pgV3Constants.SELECT_ATTRIBUTE_PGPLANTTESTINGRETESTING);
				selectStmts.add(pgV3Constants.SELECT_ATTRIBUTE_PGPLANTTESTING);
				selectStmts.add(pgV3Constants.SELECT_ATTRIBUTE_PGREPORTTYPE);
				selectStmts.add(pgV3Constants.SELECT_ATTRIBUTE_PGCRITICALITYFACTOR);
				//Added by DSM-2015x.1 for PDF Views to remove dependency on picklist and get values from attributes on 26-Feb-2016 - Starts
				selectStmts.add(pgV3Constants.SELECT_ATTRIBUTE_PGCHARACTERISTICSPECIFICS);
				selectStmts.add(pgV3Constants.SELECT_ATTRIBUTE_PGCHANGE);
				selectStmts.add(pgV3Constants.SELECT_ATTRIBUTE_PGCHARACTERISTIC);
				//Added by DSM-2015x.1 for PDF Views to remove dependency on picklist and get values from attributes on 26-Feb-2016 - Ends
				if(nPerCharaSize>0){
					objectPerformanceChracteristicBuffer.append("<TR><TD><TABLE class=\"WordWrappdf\" cellspacing=\"0\" width=\"1000px\" id=\"FPPIsATS\">");
					objectPerformanceChracteristicBuffer.append("<thead>");
					objectPerformanceChracteristicBuffer.append("<TR><TD class=\"new\" colspan='10'><B><font size ='4'>Performance Characteristic</font></B></TD></TR>");
					//Modified by DSM(Sogeti)-2015x.4 for PDF Views (Req -14983)-Starts
					objectPerformanceChracteristicBuffer.append("<TR align='center'><TH width=\"30px\" align=\"center\"><B>Chg.</B></TH>");
					//Modified by DSM(Sogeti)-2015x.4 for PDF Views (Req -14983)-Ends
					//Modified by DSM-2015x.1 for PDF Views to remove Path Header on 26-Feb-2016 - Starts
					//Added by DSM(Sogeti)-2015x.4 for PDF Views (Req - 14672,14674,14983) - Starts
					//Added by DSM-2018x.5 for PDF Views (Req -33106) - Starts
					//Added by DSM-2018x.5 for PDF Views (Req -32136) - Starts
					//if(("GenDoc".equals(strPDFViewKind.trim())) && (pgV3Constants.TYPE_INTERMEDIATE_PRODUCT_PART.equals(strType)) ){
					//	objectPerformanceChracteristicBuffer.append("<TH width=\"170px\" align=\"center\"><B>Characteristic (Ch)<BR/>Characteristic Specifics (CS)<BR/></B></TH>");
					//}

					//Modified by DSM-2018x.5 for PDF Views Defect 32025 - Starts
					//else if("GenDoc".equals(strPDFViewKind.trim()) || (pgV3Constants.TYPE_FINISHEDPRODUCTPART.equals(strType) || pgV3Constants.TYPE_FABRICATEDPART.equals(strType) || pgV3Constants.TYPE_ASSEMBLEDPRODUCTPART.equals(strType) || pgV3Constants.TYPE_DEVICEPRODUCTPART.equals(strType) || pgV3Constants.TYPE_FORMULATIONPART.equals(strType) || pgV3Constants.TYPE_PGRAWMATERIAL.equals(strType) || pgV3Constants.TYPE_MASTERPRODUCTPART.equals(strType) ||  pgV3Constants.TYPE_MASTERRAWMATERIALPART.equals(strType) || pgV3Constants.TYPE_RAWMATERIALPART.equals(strType) || pgV3Constants.TYPE_ANCILLARYRAWMATERIALPART.equals(strType))){
					 if(  (pgV3Constants.TYPE_INTERMEDIATE_PRODUCT_PART.equals(strType))  || "GenDoc".equals(strPDFViewKind.trim()) || (pgV3Constants.TYPE_FINISHEDPRODUCTPART.equals(strType) || pgV3Constants.TYPE_FABRICATEDPART.equals(strType) || pgV3Constants.TYPE_ASSEMBLEDPRODUCTPART.equals(strType) || pgV3Constants.TYPE_DEVICEPRODUCTPART.equals(strType) || pgV3Constants.TYPE_FORMULATIONPART.equals(strType) || pgV3Constants.TYPE_PGRAWMATERIAL.equals(strType) || pgV3Constants.TYPE_MASTERPRODUCTPART.equals(strType) ||  pgV3Constants.TYPE_MASTERRAWMATERIALPART.equals(strType) || pgV3Constants.TYPE_RAWMATERIALPART.equals(strType) || pgV3Constants.TYPE_ANCILLARYRAWMATERIALPART.equals(strType) || (pgV3Constants.TYPE_PGCUSTOMERUNITPART.equals(strType)))){
					 //Added by DSM-2018x.5 for PDF Views (Req -32136) - End
					objectPerformanceChracteristicBuffer.append("<TH width=\"170px\" align=\"center\"><B>Characteristic (Ch)<BR/>Characteristic Specifics (CS)<BR/> Path(P)</B></TH>");
					//Added by DSM-2018x.5 for PDF Views (Req -33106) - End
					}
					else{
					objectPerformanceChracteristicBuffer.append("<TH width=\"170px\" align=\"center\"><B>Characteristic (Ch)<BR/>Characteristic Specifics (CS)<BR/></B></TH>");
					}
					//Added by DSM(Sogeti)-2015x.4 for PDF Views (Req - 14672,14674,14983) - Ends
					//Modified by DSM-2015x.1 for PDF Views to remove Path Header on 26-Feb-2016 - Ends
					//Added by DSM-2018x.5 for PDF Views (Req -33106) - Starts
					//Modified by DSM-2018x.5 for PDF Views Defect 32025 - Starts
					if( (pgV3Constants.TYPE_PGCUSTOMERUNITPART.equals(strType)) || (pgV3Constants.TYPE_INTERMEDIATE_PRODUCT_PART.equals(strType)) || (pgV3Constants.TYPE_PGCONSUMERUNITPART.equals(strType))){
						objectPerformanceChracteristicBuffer.append("<TH width=\"170px\" align=\"center\"><B>Test Method (Name)<BR/>Test Method Logic (TML)<BR/>Test method origin(TMO)<BR/>Other Test Method Number (TM#)<BR/>Test Method Specifics (Sp)<BR/>Test Method Reference Document Name(TMRDN)</B></TH>");
					}else{
						objectPerformanceChracteristicBuffer.append("<TH width=\"170px\" align=\"center\"><B>Test Method (Name)<BR/>Test Method Logic (TML)<BR/>Origin (Origin)<BR/>Other Test Method Number (TM#)<BR/>Test Method Specifics (Sp)<BR/>Reference Document (Ref)</B></TH>");
					}
					//Added by DSM-2018x.5 for PDF Views (Req -33106) - End
					objectPerformanceChracteristicBuffer.append("<TH width=\"85px\" align=\"center\"><B>Sampling (SM) <BR/>Subgroup (SG)</B></TH>");
					//DSM(Sogeti) - 2018x.1 Fix for defect #26135 - Starts
					if(!strPDFViewKind.contains("supplier")){
						objectPerformanceChracteristicBuffer.append("<TH width=\"140px\" align=\"center\"><B>Plant Testing Level (LVL)<BR/>Plant Testing:Retesting (RT)<BR/>Retesting: Unit of Measure (UoM)</B></TH>");
					}
					//DSM(Sogeti) - 2018x.1 Fix for defect #26135 - Ends
					if(strType.equals(pgV3Constants.TYPE_FINISHEDPRODUCTPART)){
						strContext = context.getUser();
						if(context.isAssigned(pgV3Constants.ROLE_PGCONTRACTSUPPLIER) || context.isAssigned(pgV3Constants.ROLE_PGCONTRACTMANUFACTURER)) {
							objectPerformanceChracteristicBuffer.append("<TH width=\"210px\" align=\"center\"><B>Lower Spec Limit (LSL)<BR></BR>Lower Target (LTGT)<BR></BR>Target (TGT)<BR></BR>Upper Target (UTGT)<BR></BR>Upper Spec Limit (USL)</B></TH>");
						} else {
							objectPerformanceChracteristicBuffer.append("<TH width=\"210px\" align=\"center\"><B>Lower Spec Limit (LSL)<BR></BR>Lower Routine Release<BR></BR>Limit (LRRL)<BR></BR>Lower Target (LTGT)<BR></BR>Target (TGT)<BR></BR>Upper Target (UTGT)<BR></BR>Upper Routine Release<BR></BR>Limit (URRL)<BR></BR>Upper Spec Limit (USL)</B></TH>");
						}
					}
					//Modified by DSM-2015x.2 for PDF Views to show LRRL and URRL fields - Starts
					//Modified by DSM(Sogeti)-2015x.4 for PDF Views (Req - 14672,14674,14983,7554,7555,7556) - Starts
					else if(strType.equals(pgV3Constants.TYPE_ASSEMBLEDPRODUCTPART) || strType.equals(pgV3Constants.TYPE_DEVICEPRODUCTPART) || strType.equals(pgV3Constants.TYPE_FORMULATIONPART) || strType.equals(pgV3Constants.TYPE_MASTERPRODUCTPART) || strType.equals(pgV3Constants.TYPE_FABRICATEDPART)){
					//Modified by DSM(Sogeti)-2015x.4 for PDF Views (Req - 14672,14674,14983,7554,7555,7556) - Ends
						objectPerformanceChracteristicBuffer.append("<TH width=\"210px\" align=\"center\"><B>Lower Spec Limit (LSL)<BR></BR>Lower Routine Release<BR></BR>Limit (LRRL)<BR></BR>Lower Target (LTGT)<BR></BR>Target (TGT)<BR></BR>Upper Target (UTGT)<BR></BR>Upper Routine Release<BR></BR>Limit (URRL)<BR></BR>Upper Spec Limit (USL)</B></TH>");
					//Added by DSM-2018x.5 for PDF Views (Req -33106) - Starts
					}else if((pgV3Constants.TYPE_INTERMEDIATE_PRODUCT_PART.equals(strType)) ){
						objectPerformanceChracteristicBuffer.append("<TH width=\"210px\" align=\"center\"><B>Lower Specification Limit (LSL)<BR/>Lower Target (LTGT)<BR/>Target (TGT)<BR/>Upper Target (UTGT)<BR/>Upper Specification Limit (USL)</B></TH>");
					//Added by DSM-2018x.5 for PDF Views (Req -33106) - Ends
					}else if(pgV3Constants.TYPE_PGCONSUMERUNITPART.equals(strType)) {
						objectPerformanceChracteristicBuffer.append("<TH width=\"210px\" align=\"center\"><B>Lower Spec Limit (LSL)<BR></BR>Lower Routine Release<BR></BR>Limit (LRRL)<BR></BR>Lower Target (LTGT)<BR></BR>Target (TGT)<BR></BR>Upper Target (UTGT)<BR></BR>Upper Spec Limit (USL)<BR></BR>Upper Routine Release<BR></BR>Limit (URRL)</B></TH>");
					}
					//Added by DSM-2018x.5 for PDF Views (Defect 32025) - Starts
					else if(pgV3Constants.TYPE_PGCUSTOMERUNITPART.equals(strType)) {
						objectPerformanceChracteristicBuffer.append("<TH width=\"210px\" align=\"center\"><B>Lower Spec Limit (LSL)<BR></BR>Lower Routine Release<BR></BR>Limit (LRRL)<BR></BR>Lower Target (LTGT)<BR></BR>Target (TGT)<BR></BR>Upper Target (UTGT)<BR></BR> Upper Routine Release<BR></BR>Limit (URRL)<BR></BR> Upper Spec Limit (USL)</B></TH>");
					}

					//Modified by DSM-2015x.2 for PDF Views to show LRRL and URRL fields - Ends
					else{
					objectPerformanceChracteristicBuffer.append("<TH width=\"210px\" align=\"center\"><B>Lower Spec Limit (LSL)<BR/>Lower Target (LTGT)<BR/>Target (TGT)<BR/>Upper Target (UTGT)<BR/>Upper Spec Limit (USL)</B></TH>");
					}
					objectPerformanceChracteristicBuffer.append("<TH width=\"80px\" align=\"center\"><B>Unit of Measure (UoM)<BR/>Report to Nearest (RTN)<BR/>Report Type(RT)</B></TH>");
					if(strType.equals(pgV3Constants.TYPE_ASSEMBLEDPRODUCTPART)|| strType.equals(pgV3Constants.TYPE_DEVICEPRODUCTPART) ||  strType.equals(pgV3Constants.TYPE_MASTERPRODUCTPART) || strType.equals(pgV3Constants.TYPE_FORMULATIONPART) || strType.equals(pgV3Constants.TYPE_FABRICATEDPART) || (strType.equals(pgV3Constants.TYPE_FINISHEDPRODUCTPART) && ("GenDoc".equals(strPDFViewKind.trim()) || "allinfo".equals(strPDFViewKind.trim())))){
					//Modified by DSM(Sogeti)-2015x.5 for PDF Views (Req -17850) - Starts
					//objectPerformanceChracteristicBuffer.append("<TH width=\"150px\" align=\"center\"><B>Routine Release<BR></BR>Criteria (RRC)<BR></BR><BR></BR>Release Criteria (RC)</B></TH>");
					objectPerformanceChracteristicBuffer.append("<TH width=\"150px\" align=\"center\"><B>Release Criteria (RC)</B></TH>");
					//Modified by DSM(Sogeti)-2015x.5 for PDF Views (Req -17850) - Ends
					}
					else{
					objectPerformanceChracteristicBuffer.append("<TH width=\"150px\" align=\"center\"><B>Release Criteria (RC)</B></TH>");
					}
					objectPerformanceChracteristicBuffer.append("<TH width=\"140px\" align=\"center\"><B>Action Required (AC)<BR/>Criticality Factor (CR)<BR/>Basis (BA)</B></TH>");
					//Modified by DSM(Sogeti)-2015x.4 for PDF Views (Req -11427,11473,12000,11475) - Starts
					//Added by DSM-2018x.5 for PDF Views (Req -33106) - Starts
					if((pgV3Constants.TYPE_PGCONSUMERUNITPART.equals(strType)) || pgV3Constants.TYPE_INTERMEDIATE_PRODUCT_PART.equals(strType) || strType.equals(pgV3Constants.TYPE_MASTERRAWMATERIALPART) || strType.equals(pgV3Constants.TYPE_ANCILLARYRAWMATERIALPART)){
					//Added by DSM-2018x.5 for PDF Views (Req -33106) - End
					objectPerformanceChracteristicBuffer.append("<TH width=\"110px\" align=\"center\"><B>Test Group (TG)<BR/>Application (AP)<BR/>Master Part Title (MPT)</B></TH>");
					}//Added by DSM(Sogeti)- 2018x.1 For Defect 25563 Start
					//Modified by DSM-2018x.5 for PDF Views (Defect 32025) - Starts
					else if(pgV3Constants.TYPE_PGCUSTOMERUNITPART.equals(strType) || strType.equals(pgV3Constants.TYPE_RAWMATERIALPART)|| strType.equals(pgV3Constants.TYPE_PGRAWMATERIAL)){
						objectPerformanceChracteristicBuffer.append("<TH width=\"110px\" align=\"center\"><B>Test Group (TG)<BR/>Application (AP)<BR/>Master Part Title</B></TH>");
					}//Added by DSM(Sogeti)- for 2018x.1 Defect 25563 End
					else{
					objectPerformanceChracteristicBuffer.append("<TH width=\"110px\" align=\"center\"><B>Test Group (TG)<BR/>Application (AP)</B></TH>");
					}
					//Modified by DSM(Sogeti)-2015x.4 for PDF Views (Req -11427,11473,12000,11475) - Ends
					//Removed by DSM(Sogeti)-2015x.4 for PDF Views (Req -11998)
					objectPerformanceChracteristicBuffer.append("</TR></thead>");

					objectPerformanceChracteristicBuffer.append("<tbody>");
					for (Iterator iterator = mlPerChara.iterator(); iterator.hasNext();){
						perCharaList = (Map) iterator.next();
						strId = (String)perCharaList.get("id");
						sRel  = (String)perCharaList.get("relationship");
						DomainObject domPer = DomainObject.newInstance(context,strId);
						mpTMLogic=domPer.getInfo(context,selectStmts);
						boolean hasReadAccess = domPer.checkAccess(context, (short) AccessConstants.cRead);
						if(!hasReadAccess)
							sHasReadAcess = "FALSE";
						mpPath = new HashMap();
						mlObjListPath = new MapList();
						mObjPath = new HashMap();
						mObjPath.put("id" , strId);
						mObjPath.put("objReadAccess",sHasReadAcess);
						mObjPath.put("relationship",sRel);
						mlObjListPath.add(mObjPath);
						mParList = new HashMap();
						//Added by DSM(Sogeti)-2018x.3 for PDF Views (Defect -32393)-Starts
						if(UIUtil.isNotNullAndNotEmpty(strReferenceType) && "M".equalsIgnoreCase(strReferenceType)) {
							mParList.put("selectedTable" , "pgVPDPerformanceCharacteristicMasterPathTable");
						} else {
							mParList.put("selectedTable" , "pgVPDPerformanceCharacteristicTable");
						}
						//Added by DSM(Sogeti)-2018x.3 for PDF Views (Defect -32393)-Ends
						mParList.put("parentOID",strObjectId);
						mParList.put("MasterPDF","pdf");
						if("GenDoc".equals(strPDFViewKind.trim()))
						mParList.put("pgVPDCPNCharacteristicDerivedFilter", "Local");
						else
						mParList.put("pgVPDCPNCharacteristicDerivedFilter", "All");
						mpPath.put("objectList", mlObjListPath);
						mpPath.put("paramList", mParList);
						String[] argsPath = JPO.packArgs(mpPath);
//						emxCPNCharacteristicList_mxJPO objPath = new emxCPNCharacteristicList_mxJPO(context,argsPath);
//						Vector vPath = (Vector)objPath.getDerivedPathForRow(context, argsPath);
	//Added for PDF Refactor
						Vector vPath =(Vector)pgPDFViewHelper.executeMainClassMethod(context, "emxCPNCharacteristicList", "getDerivedPathForRow", argsPath);
						if(!vPath.isEmpty()) {
							strPathForPC = (String)vPath.get(0);
						}
						//Modified by DSM-2015x.2 for PDF Views Performance Characteristics Table(Defect-10647) - Starts
						if(slId.size()>0){
						if(slId.contains(strId)){
							strPathForPC = strMasterName;
							strRevForPC  = strMasterRev;
						}
						else{
							strPathForPC = "";
							strRevForPC  = "";
						}
						}
						//Modified by DSM-2015x.2 for PDF Views Performance Characteristics Table(Defect-10647) - Ends
						//Added by DSM-2015x.1 for PDF Views to remove dependency on picklist and get values from attributes on 26-Feb-2016 - Starts
						strChg = (String)mpTMLogic.get(pgV3Constants.SELECT_ATTRIBUTE_PGCHANGE);
						strChara = (String)mpTMLogic.get(pgV3Constants.SELECT_ATTRIBUTE_PGCHARACTERISTIC);
						strCharaSpe = (String)mpTMLogic.get(pgV3Constants.SELECT_ATTRIBUTE_PGCHARACTERISTICSPECIFICS);
						//Added by DSM-2015x.1 for PDF Views to remove dependency on picklist and get values from attributes on 26-Feb-2016 - Ends
						objectPerformanceChracteristicBuffer.append("<TR>");
						// Modified  by DSM-2018x.3  for PDF Views (Defect id #29066) - Starts
						objectPerformanceChracteristicBuffer.append("<TD width=\"30px\" align=\"center\" valign=\"top\">"+validateString1(strChg)+"</TD>");
						//Added by DSM(Sogeti)-2015x.4 for PDF Views (Req - 14672,14674,14983) - Starts
						//Added by DSM-2018x.5 for PDF Views (Req -33106) - Starts
						//Added by DSM-2018x.5 for PDF Views (Req -32136) - Starts
						//if(("GenDoc".equals(strPDFViewKind.trim())) && (pgV3Constants.TYPE_INTERMEDIATE_PRODUCT_PART.equals(strType)) ){
						//	objectPerformanceChracteristicBuffer.append("<TD width=\"170px\" align=\"left\" valign=\"top\"><B>CH: </B>"+validateString1(strChara))+"<BR></BR><B>CS: </B>"+validateString1(strCharaSpe))+"</TD>");
						//}
						//Modified by DSM-2018x.5 for PDF Views (Defect 32025) - Starts
						//else if("GenDoc".equals(strPDFViewKind.trim()) || (pgV3Constants.TYPE_FINISHEDPRODUCTPART.equals(strType) || pgV3Constants.TYPE_FABRICATEDPART.equals(strType) || pgV3Constants.TYPE_ASSEMBLEDPRODUCTPART.equals(strType) || pgV3Constants.TYPE_DEVICEPRODUCTPART.equals(strType) || pgV3Constants.TYPE_FORMULATIONPART.equals(strType) || pgV3Constants.TYPE_PGRAWMATERIAL.equals(strType) || pgV3Constants.TYPE_MASTERPRODUCTPART.equals(strType) ||  pgV3Constants.TYPE_MASTERRAWMATERIALPART.equals(strType) || pgV3Constants.TYPE_RAWMATERIALPART.equals(strType) || pgV3Constants.TYPE_ANCILLARYRAWMATERIALPART.equals(strType))){
						if( (pgV3Constants.TYPE_INTERMEDIATE_PRODUCT_PART.equals(strType))  || "GenDoc".equals(strPDFViewKind.trim()) || pgV3Constants.TYPE_PGCUSTOMERUNITPART.equals(strType) || (pgV3Constants.TYPE_FINISHEDPRODUCTPART.equals(strType) || pgV3Constants.TYPE_FABRICATEDPART.equals(strType) || pgV3Constants.TYPE_ASSEMBLEDPRODUCTPART.equals(strType) || pgV3Constants.TYPE_DEVICEPRODUCTPART.equals(strType) || pgV3Constants.TYPE_FORMULATIONPART.equals(strType) || pgV3Constants.TYPE_PGRAWMATERIAL.equals(strType) || pgV3Constants.TYPE_MASTERPRODUCTPART.equals(strType) ||  pgV3Constants.TYPE_MASTERRAWMATERIALPART.equals(strType) || pgV3Constants.TYPE_RAWMATERIALPART.equals(strType) || pgV3Constants.TYPE_ANCILLARYRAWMATERIALPART.equals(strType))){
						//Added by DSM-2018x.5 for PDF Views (Req -32136) - End
						//Added by DSM-2018x.5 for PDF Views (Req -33106) - Starts
							strPathForPC= validateString1(strPathForPC).replaceAll(strRegEx, "");
							objectPerformanceChracteristicBuffer.append("<TD width=\"170px\" align=\"left\" valign=\"top\"><B>CH: </B>"+validateString1(strChara)+"<BR></BR><B>CS: </B>"+validateString1(strCharaSpe)+"<BR></BR><B>P: </B>"+validateString1(strPathForPC)+"</TD>");
						}
						else{
						objectPerformanceChracteristicBuffer.append("<TD width=\"170px\" align=\"left\" valign=\"top\"><B>CH: </B>"+validateString1(strChara)+"<BR></BR><B>CS: </B>"+validateString1(strCharaSpe)+"</TD>");
						}
						//Added by DSM(Sogeti)-2015x.4 for PDF Views (Req - 14672,14674,14983) - Ends
						mpTMName = new HashMap();
						mpTMName.put("id" , strId);
						//Added by DSM-2015x.1 for PDF Views Defect 4498 on 8 Jun 2016 - Starts
						mpTMName.put("objReadAccess","TRUE");
						//Added by DSM-2015x.1 for PDF Views Defect 4498 on 8 Jun 2016 - Ends
						objectListTM = new MapList();
						objectListTM.add(mpTMName);
						paramList = new HashMap();
						paramList.put("reportFormat", "PDF");
						//Added by DSM 2015x.1 (Sogeti) for defect #6176 - Starts
						paramList.put("parentOID",strObjectId);
						//Added by DSM 2015x.1 (Sogeti) for defect #6176 - Ends
						mpTM = new HashMap();
						mpTM.put("objectList", objectListTM);
						mpTM.put("paramList", paramList);
						String[] argsTM = JPO.packArgs(mpTM);
						//modified for defect 2920 V4-2013x.4 starts
						strOS = doObj.getAttributeValue(context,pgV3Constants.ATTRIBUTE_PGORIGINATINGSOURCE);
						Vector vTM = null;
						if("DSO".equalsIgnoreCase(strOS)) {
//							pgDSOUtil_mxJPO objCPNCharacteristicListTM = new pgDSOUtil_mxJPO(context,argsTM);
//							 vTM = (Vector)objCPNCharacteristicListTM.pgGetTestMethods(context, argsTM);
	//Added for PDF Refactor
							 vTM =(Vector)pgPDFViewHelper.executeMainClassMethod(context, "pgDSOUtil", "pgGetTestMethods", argsTM);
						}
						else{
//							pgIPMProductData_mxJPO objCPNCharacteristicListTM = new pgIPMProductData_mxJPO(context,argsTM);
//							vTM = (Vector)objCPNCharacteristicListTM.pgGetTestMethods(context, argsTM);
	//Added for PDF Refactor
							 vTM =(Vector)pgPDFViewHelper.executeMainClassMethod(context, "pgIPMProductData", "pgGetTestMethods", argsTM);
					}
						if(!vTM.isEmpty()) {
							strTM = (String)vTM.get(0);
							//Added by DSM(Sogeti)-2015x.5 for PDF Views (Defect ID-16705) - Starts
							if(UIUtil.isNullOrEmpty(strTM)){
								strTM = DomainConstants.EMPTY_STRING;
							}
							//Added by DSM(Sogeti)-2015x.5 for PDF Views (Defect ID-16705) - Ends
							strTM = strTM.replaceAll("\n","|\n");
						}
						//Modified by DSM(Sogeti) for Code Optimization Start
						strTMLogic = (String)mpTMLogic.get(pgV3Constants.SELECT_ATTRIBUTE_PGTMLOGIC);
						strOtherTMNumber = (String)mpTMLogic.get(pgV3Constants.SELECT_ATTRIBUTE_PGMETHODNUMBER);
						//Added by DSM(Sogeti)-2015x.5 for PDF Views (Defect ID-16705) - Starts
						if(UIUtil.isNullOrEmpty(strOtherTMNumber)){
							strOtherTMNumber = DomainConstants.EMPTY_STRING;
						}
						//Modified by DSM-2015x.4 Dec Downtime for INC0532143 PDF Views on Starts
						strOtherTMNumber = strOtherTMNumber.replaceAll("[<]","#LESS_THAN");
						strTsetMethodSpe = (String)mpTMLogic.get(pgV3Constants.SELECT_ATTRIBUTE_PGMETHODSPECIFICS);
						if(UIUtil.isNullOrEmpty(strTsetMethodSpe)){
							strTsetMethodSpe = DomainConstants.EMPTY_STRING;
						}
						//Added by DSM(Sogeti)-2015x.5 for PDF Views (Defect ID-16705) - Ends
						strTsetMethodSpe = strTsetMethodSpe.replaceAll("[<]","#LESS_THAN");
					    //Modified by DSM-2015x.4 Dec Downtime for INC0532143 PDF Views on Ends
						strOrigin = (String)mpTMLogic.get(pgV3Constants.SELECT_ATTRIBUTE_PGMETHODORIGIN);
//						pgIPMProductData_mxJPO objCPNCharacteristicListTM = new pgIPMProductData_mxJPO(context,argsTM);
//						Vector vReferenceDoc = (Vector)objCPNCharacteristicListTM.pgGetReferenceDocGCAS(context, argsTM);
	//Added for PDF Refactor
						Vector vReferenceDoc = (Vector)pgPDFViewHelper.executeMainClassMethod(context, "pgIPMProductData", "pgGetReferenceDocGCAS", argsTM);
						strReferenceDoc = (String)vReferenceDoc.get(0);
						//Modified by DSM-2015x.1 for PDF Views on 2-Feb-2016 - Starts
						//Modified by DSM-2015x.4 for PDF Views (Defect ID-12502) -Starts
						//Added by DSM-2018x.5 for PDF Views (Req -33106) - Starts
						//Modified by DSM-2018x.5 for PDF Views (Defect 32025) - Starts
						if( pgV3Constants.TYPE_PGCUSTOMERUNITPART.equals(strType)  || (pgV3Constants.TYPE_PGCONSUMERUNITPART.equals(strType)) || (pgV3Constants.TYPE_INTERMEDIATE_PRODUCT_PART.equals(strType)) ){
							objectPerformanceChracteristicBuffer.append("<TD width=\"170px\" align=\"left\" valign=\"top\"><B>NAME: </B>"+validateString1(strTM)+"<BR></BR><B>TML: </B>"+validateString1(strTMLogic)+"<BR></BR><B>TMO: </B>"+validateString1(strOrigin)+"<BR></BR><B>TM#: </B>"+validateString1(strOtherTMNumber)+"<BR></BR><B>SP: </B>"+validateString1(strTsetMethodSpe)+"<BR></BR><B>TMRDN: </B>"+validateString1(strReferenceDoc)+"</TD>");
						}else{
							objectPerformanceChracteristicBuffer.append("<TD width=\"170px\" align=\"left\" valign=\"top\"><B>NAME: </B>"+validateString1(strTM)+"<BR></BR><B>TML: </B>"+validateString1(strTMLogic)+"<BR></BR><B>ORIGIN: </B>"+validateString1(strOrigin)+"<BR></BR><B>TM#: </B>"+validateString1(strOtherTMNumber)+"<BR></BR><B>SP: </B>"+validateString1(strTsetMethodSpe)+"<BR></BR><B>REF: </B>"+validateString1(strReferenceDoc)+"</TD>");

						}
						//Added by DSM-2018x.5 for PDF Views (Req -33106) - End
						//Modified by DSM-2015x.4 for PDF Views (Defect ID-12502) -Ends
						//Modified by DSM-2015x.1 for PDF Views on 2-Feb-2016 - Ends

						strSampling = (String)mpTMLogic.get(pgV3Constants.SELECT_ATTRIBUTE_PGSAMPLING);
						//Added by DSM(Sogeti)-2015x.5 for PDF Views (Defect ID-16705) - Starts
						if(UIUtil.isNullOrEmpty(strSampling)){
							strSampling = DomainConstants.EMPTY_STRING;
						}
						//Added by DSM(Sogeti)-2015x.5 for PDF Views (Defect ID-16705) - Ends
						//Modified by DSM-2015x.4 Dec Downtime for INC0532143 PDF Views on Starts
						strSampling = strSampling.replaceAll("[<]","#LESS_THAN");
						//Modified by DSM-2015x.4 Dec Downtime for INC0532143 PDF Views on Ends
						strRetestingUOM = (String)mpTMLogic.get(pgV3Constants.SELECT_ATTRIBUTE_PGRETESTINGUOM);
						strRetesting = (String)mpTMLogic.get(pgV3Constants.SELECT_ATTRIBUTE_PGPLANTTESTINGRETESTING);
						strSSubGroup = (String)mpTMLogic.get(pgV3Constants.SELECT_ATTRIBUTE_PGSUBGROUP);
						//Added by DSM(Sogeti)-2015x.5 for PDF Views (Defect ID-16705) - Starts
						if(UIUtil.isNullOrEmpty(strSSubGroup)){
							strSSubGroup = DomainConstants.EMPTY_STRING;
						}
						//Added by DSM(Sogeti)-2015x.5 for PDF Views (Defect ID-16705) - Ends
						//Modified by DSM-2015x.4 Dec Downtime for INC0532143 PDF Views on Starts
						strSSubGroup = strSSubGroup.replaceAll("[<]","#LESS_THAN");
						//Modified by DSM-2015x.4 Dec Downtime for INC0532143 PDF Views on Ends
						strPlantTestingLvl = (String)mpTMLogic.get(pgV3Constants.SELECT_ATTRIBUTE_PGPLANTTESTING);
						//Modified by DSM-2015x.1 for PDF Views on 2-Feb-2016 - Starts
						objectPerformanceChracteristicBuffer.append("<TD width=\"85px\" align=\"left\" valign=\"top\"><B>SM: </B>"+validateString1(strSampling)+"<BR></BR><B>SG: </B>"+validateString1(strSSubGroup)+"</TD>");
						//Modified by DSM-2015x.1 for PDF Views on 2-Feb-2016 - Ends
						//Modified by V4-IPM/DSO-2013x.5 for Defect-3769 - Starts
						//DSM(Sogeti) - 2018x.1 Fix for defect #26135 - Starts
						if(!strPDFViewKind.contains("supplier")){
							//Modified by DSM-2015x.1 for PDF Views on 2-Feb-2016 - Starts
							objectPerformanceChracteristicBuffer.append("<TD width=\"140px\" align=\"left\" valign=\"top\"><B>LVL: </B>"+validateString1(strPlantTestingLvl)+"<BR></BR><B>RT: </B>"+validateString1(strRetesting)+"<BR></BR><B>UoM: </B>"+validateString1(strRetestingUOM)+"</TD>");
							//Modified by DSM-2015x.1 for PDF Views on 2-Feb-2016 - Ends
						}
						//DSM(Sogeti) - 2018x.1 Fix for defect #26135 - Ends
						//Modified by V4-IPM/DSO-2013x.5 for Defect-3769 - Ends

						strLowerSpecificationLimit = (String)mpTMLogic.get(pgV3Constants.SELECT_ATTRIBUTE_PGLOWERSPECIFICATIONLIMIT);
						strLowerRoutineReleaseLimit = (String)mpTMLogic.get(pgV3Constants.SELECT_ATTRIBUTE_PGLOWERROUTINRRELEASELIMIT);
						strLowerTarget = (String)mpTMLogic.get(pgV3Constants.SELECT_ATTRIBUTE_PGLOWERTARGET);
						strTarget = (String)mpTMLogic.get(pgV3Constants.SELECT_ATTRIBUTE_PGTARGET);
						strUpperTarget = (String)mpTMLogic.get(pgV3Constants.SELECT_ATTRIBUTE_PGUPPERTARGET);
						strUpperRoutineReleaseLimit = (String)mpTMLogic.get(pgV3Constants.SELECT_ATTRIBUTE_PGUPPERROUTINERELEASELIMIT);
						strUpperSpecificationLimit = (String)mpTMLogic.get(pgV3Constants.SELECT_ATTRIBUTE_PGUPPERSPECIFICATIONLIMIT);
						//Modified by DSM(Sogeti) for Code Optimization End
						if(strType.equals(pgV3Constants.TYPE_FINISHEDPRODUCTPART)){
							strContext = context.getUser();
							if(context.isAssigned(pgV3Constants.ROLE_PGCONTRACTSUPPLIER) || context.isAssigned(pgV3Constants.ROLE_PGCONTRACTMANUFACTURER)) {
								objectPerformanceChracteristicBuffer.append("<TD width=\"210px\" align=\"left\" valign=\"top\"><B>LSL: </B>"+validateString1(strLowerSpecificationLimit)+"<BR></BR><B>LTGT: </B>"+validateString1(strLowerTarget)+"<BR></BR><B>TGT: </B>"+validateString1(strTarget)+"<BR></BR><B>UTGT: </B>"+validateString1(strUpperTarget)+"<BR></BR><B>USL: </B>"+validateString1(strUpperSpecificationLimit)+"</TD>");
							} else {
								//Modified by DSM-2015x.1 for PDF Views on 2-Feb-2016 - Starts
								objectPerformanceChracteristicBuffer.append("<TD width=\"210px\" align=\"left\" valign=\"top\"><B>LSL: </B>"+validateString1(strLowerSpecificationLimit)+"<BR></BR><B>LRRL: </B>"+validateString1(strLowerRoutineReleaseLimit)+"<BR></BR><B>LTGT: </B>"+validateString1(strLowerTarget)+"<BR></BR><B>TGT: </B>"+validateString1(strTarget)+"<BR></BR><B>UTGT: </B>"+validateString1(strUpperTarget)+"<BR></BR><B>URRL: </B>"+validateString1(strUpperRoutineReleaseLimit)+"<BR></BR><B>USL: </B>"+validateString1(strUpperSpecificationLimit)+"</TD>");
								//Modified by DSM-2015x.1 for PDF Views on 2-Feb-2016 - Ends
							}
							//Modified by V4-IPM/DSO-2013x.5 for Defect-3553 - Ends
						}
						//Modified by DSM-2015x.2 for PDF Views to show LRRL and URRL fields - Starts
						//Modified by DSM(Sogeti)-2015x.4 for PDF Views (Req - 14672,14674,14983,7554,7555,7556) - Starts
						else if(strType.equals(pgV3Constants.TYPE_ASSEMBLEDPRODUCTPART) || strType.equals(pgV3Constants.TYPE_DEVICEPRODUCTPART) || strType.equals(pgV3Constants.TYPE_FORMULATIONPART) || strType.equals(pgV3Constants.TYPE_MASTERPRODUCTPART) || strType.equals(pgV3Constants.TYPE_FABRICATEDPART)){
						//Modified by DSM(Sogeti)-2015x.4 for PDF Views (Req - 14672,14674,14983,7554,7555,7556) - Ends
						objectPerformanceChracteristicBuffer.append("<TD width=\"210px\" align=\"left\" valign=\"top\"><B>LSL: </B>"+validateString1(strLowerSpecificationLimit)+"<BR></BR><B>LRRL: </B>"+validateString1(strLowerRoutineReleaseLimit)+"<BR></BR><B>LTGT: </B>"+validateString1(strLowerTarget)+"<BR></BR><B>TGT: </B>"+validateString1(strTarget)+"<BR></BR><B>UTGT: </B>"+validateString1(strUpperTarget)+"<BR></BR><B>URRL: </B>"+validateString1(strUpperRoutineReleaseLimit)+"<BR></BR><B>USL: </B>"+validateString1(strUpperSpecificationLimit)+"</TD>");
						}else if(pgV3Constants.TYPE_PGCONSUMERUNITPART.equals(strType)){
							objectPerformanceChracteristicBuffer.append("<TD width=\"210px\" align=\"left\" valign=\"top\"><B>LSL: </B>"+validateString1(strLowerSpecificationLimit)+"<BR></BR><B>LRRL: </B>"+validateString1(strLowerRoutineReleaseLimit)+"<BR></BR><B>LTGT: </B>"+validateString1(strLowerTarget)+"<BR></BR><B>TGT: </B>"+validateString1(strTarget)+"<BR></BR><B>UTGT: </B>"+validateString1(strUpperTarget)+"<BR></BR><B>USL: </B>"+validateString1(strUpperSpecificationLimit)+"<BR></BR><B>URRL: </B>"+validateString1(strUpperRoutineReleaseLimit)+"</TD>");
						}
						//Added by DSM-2018x.5 for PDF Views (Defect 32025) - Starts
						else if(pgV3Constants.TYPE_PGCUSTOMERUNITPART.equals(strType)){
							objectPerformanceChracteristicBuffer.append("<TD width=\"210px\" align=\"left\" valign=\"top\"><B>LSL: </B>"+validateString1(strLowerSpecificationLimit)+"<BR></BR><B>LRRL: </B>"+validateString1(strLowerRoutineReleaseLimit)+"<BR></BR><B>LTGT: </B>"+validateString1(strLowerTarget)+"<BR></BR><B>TGT: </B>"+validateString1(strTarget)+"<BR></BR><B>UTGT: </B>"+validateString1(strUpperTarget)+"<BR></BR><B>URRL: </B>"  +validateString1(strUpperRoutineReleaseLimit)+"<BR></BR><B>USL: </B>"+validateString1(strUpperSpecificationLimit)+"</TD>");
						}
						//Added by DSM-2018x.5 for PDF Views (Defect 32025) - Ends
						//Modified by DSM-2015x.2 for PDF Views to show LRRL and URRL fields - Ends
						else{
						//Modified by DSM-2015x.1 for PDF Views on 2-Feb-2016 - Starts
						objectPerformanceChracteristicBuffer.append("<TD width=\"210px\" align=\"left\" valign=\"top\"><B>LSL: </B>"+validateString1(strLowerSpecificationLimit)+"<BR></BR><B>LTGT: </B>"+validateString1(strLowerTarget)+"<BR></BR><B>TGT: </B>"+validateString1(strTarget)+"<BR></BR><B>UTGT: </B>"+validateString1(strUpperTarget)+"<BR></BR><B>USL: </B>"+validateString1(strUpperSpecificationLimit)+"</TD>");
						//Modified by DSM-2015x.1 for PDF Views on 2-Feb-2016 - Ends
						}
						//Modified by DSM(Sogeti) for Code Optimization Start
						strReportToNearest = (String)mpTMLogic.get(pgV3Constants.SELECT_ATTRIBUTE_PGREPORTTONEAREST);
						strUnitofMeasureMasterList = (String)mpTMLogic.get(pgV3Constants.SELECT_ATTRIBUTE_PGUNITOFMEASURE);
						strReportType = (String)mpTMLogic.get(pgV3Constants.SELECT_ATTRIBUTE_PGREPORTTYPE);
						//Modified by DSM(Sogeti) for Code Optimization End
						//Modified by DSM-2015x.1 for PDF Views on 2-Feb-2016 - Starts
						objectPerformanceChracteristicBuffer.append("<TD width=\"80px\" align=\"left\" valign=\"top\"><B>UoM: </B>"+validateString1(strUnitofMeasureMasterList)+"<BR></BR><B>RTN: </B>"+validateString1(strReportToNearest)+"<BR></BR><B>RT: </B>"+validateString1(strReportType)+"</TD>");
						//Modified by DSM-2015x.1 for PDF Views on 2-Feb-2016 - Ends

						strRoutineReleaseCriteria = (String)mpTMLogic.get(pgV3Constants.SELECT_ATTRIBUTE_PGROUTINERELEASECRITERIA);
						//Added by DSM(Sogeti)-2015x.5 for PDF Views (Defect ID-16705) - Starts
						if(UIUtil.isNullOrEmpty(strRoutineReleaseCriteria)){
							strRoutineReleaseCriteria = DomainConstants.EMPTY_STRING;
						}
						//Added by DSM(Sogeti)-2015x.5 for PDF Views (Defect ID-16705) - Ends
						//Modified by DSM-2015x.4 Dec Downtime for INC0532143 PDF Views on Starts
						strRoutineReleaseCriteria =strRoutineReleaseCriteria.replaceAll("[<]","#LESS_THAN");
						strRoutineReleaseCriteria =strRoutineReleaseCriteria.replaceAll("[>]","#GREATER_THAN");
						//Modified by DSM-2015x.4 Dec Downtime for INC0532143 PDF Views on Ends
						strReleaseCriteria = (String)mpTMLogic.get(pgV3Constants.SELECT_ATTRIBUTE_PGRELEASECRITERIA);
						//Added by DSM(Sogeti)-2015x.5 for PDF Views (Defect ID-16705) - Starts
						if(UIUtil.isNullOrEmpty(strReleaseCriteria)){
							strReleaseCriteria = DomainConstants.EMPTY_STRING;
						}
						//Added by DSM(Sogeti)-2015x.5 for PDF Views (Defect ID-16705) - Ends
						//Modified by DSM-2015x.4 for PDF Views for defect 13737- Starts
						strReleaseCriteria =strReleaseCriteria.replaceAll("[<]","#LESS_THAN");
						strReleaseCriteria =strReleaseCriteria.replaceAll("[>]","#GREATER_THAN");
						//Modified by DSM-2015x.4 for PDF Views for defect 13737- Ends
						if(strType.equals(pgV3Constants.TYPE_ASSEMBLEDPRODUCTPART)|| strType.equals(pgV3Constants.TYPE_DEVICEPRODUCTPART) ||  strType.equals(pgV3Constants.TYPE_MASTERPRODUCTPART) || strType.equals(pgV3Constants.TYPE_FORMULATIONPART) || strType.equals(pgV3Constants.TYPE_FABRICATEDPART) || (strType.equals(pgV3Constants.TYPE_FINISHEDPRODUCTPART) && ("GenDoc".equals(strPDFViewKind.trim()) || "allinfo".equals(strPDFViewKind.trim())))){
						//Modified by DSM(Sogeti)-2015x.5 for PDF Views (Req -17850) - Starts
						//objectPerformanceChracteristicBuffer.append("<TD width=\"140px\" align=\"left\" valign=\"top\"><B>RRC: </B>"+validateString1(strRoutineReleaseCriteria)+"<BR></BR><B>RC: </B>"+validateString1(strReleaseCriteria)+"</TD>");
						objectPerformanceChracteristicBuffer.append("<TD width=\"140px\" align=\"left\" valign=\"top\"><B>RC: </B>"+validateString1(strReleaseCriteria)+"</TD>");
						//Modified by DSM(Sogeti)-2015x.5 for PDF Views (Req -17850) - Ends
						}
						else {
						//Modified by DSM-2015x.1 for PDF Views on 2-Feb-2016 - Starts
						objectPerformanceChracteristicBuffer.append("<TD width=\"140px\" align=\"left\" valign=\"top\"><B>RC: </B>"+validateString1(strReleaseCriteria)+"</TD>");
						//Modified by DSM-2015x.1 for PDF Views on 2-Feb-2016 - Ends
						}
						//Modified by DSM(Sogeti) for Code Optimization Start
						strBasis = (String)mpTMLogic.get(pgV3Constants.SELECT_ATTRIBUTE_PGBASIS);
						//Added by DSM(Sogeti)-2015x.5 for PDF Views (Defect ID-16705) - Starts
						if(UIUtil.isNullOrEmpty(strBasis)){
							strBasis = DomainConstants.EMPTY_STRING;
						}
						//Added by DSM(Sogeti)-2015x.5 for PDF Views (Defect ID-16705) - Ends
						//Modified by DSM-2015x.4 Dec Downtime for INC0532143 PDF Views on Starts
						strBasis =strBasis.replaceAll("[<]","#LESS_THAN");
						//Modified by DSM-2015x.4 Dec Downtime for INC0532143 PDF Views on Ends
						strActionRequiredList=(String)mpTMLogic.get(pgV3Constants.SELECT_ATTRIBUTE_PGACTIONREQUIRED);
						strCharstopgPLICriticalityFactor=(String)mpTMLogic.get(pgV3Constants.SELECT_ATTRIBUTE_PGCRITICALITYFACTOR);
						//Modified by DSM-2015x.1 for PDF Views on 2-Feb-2016 - Starts
						objectPerformanceChracteristicBuffer.append("<TD width=\"140px\" align=\"left\" valign=\"top\"><B>AC: </B>"+validateString1(strActionRequiredList)+"<BR></BR><B>CR: </B>"+validateString1(strCharstopgPLICriticalityFactor)+"<BR></BR><B>BA: </B>"+validateString1(strBasis)+"</TD>");
						//Modified by DSM-2015x.1 for PDF Views on 2-Feb-2016 - Ends
						 strApplication = (String)mpTMLogic.get(pgV3Constants.SELECT_ATTRIBUTE_PGAPPLICATION);
						//Added by DSM(Sogeti)-2015x.5 for PDF Views (Defect ID-16705) - Starts
						if(UIUtil.isNullOrEmpty(strApplication)){
							strApplication = DomainConstants.EMPTY_STRING;
						}
						//Added by DSM(Sogeti)-2015x.5 for PDF Views (Defect ID-16705) - Ends
						 //Modified by DSM-2015x.4 Dec Downtime for INC0532143 PDF Views on Starts
						 strApplication =strApplication.replaceAll("[<]","#LESS_THAN");
						 //Modified by DSM-2015x.4 Dec Downtime for INC0532143 PDF Views on Ends
						strPCharstopgPLITestGroup = (String)mpTMLogic.get(pgV3Constants.SELECT_ATTRIBUTE_PGTESTGROUP);
						//Modified by DSM(Sogeti) for Code Optimization End
						//Modified by DSM-2015x.1 for PDF Views on 2-Feb-2016 - Starts
						//Modified by DSM(Sogeti)-2015x.4 for PDF Views (Req -11427,11473,12000,11475) - Starts
						//Added by DSM-2018x.5 for PDF Views (Req -33106) - Starts
						//Modified by DSM-2018x.5 for PDF Views (Defect 32025) - Starts
						if(pgV3Constants.TYPE_PGCUSTOMERUNITPART.equals(strType) || (pgV3Constants.TYPE_PGCONSUMERUNITPART.equals(strType)) || pgV3Constants.TYPE_INTERMEDIATE_PRODUCT_PART.equals(strType) || strType.equals(pgV3Constants.TYPE_MASTERRAWMATERIALPART)||strType.equals(pgV3Constants.TYPE_PGRAWMATERIAL) || strType.equals(pgV3Constants.TYPE_RAWMATERIALPART) || strType.equals(pgV3Constants.TYPE_ANCILLARYRAWMATERIALPART)){
						//Added by DSM-2018x.5 for PDF Views (Req -33106) - Starts
						if(null != mlMasterList && mlMasterList.size()>0){
						for (Iterator i = mlMasterList.iterator(); i.hasNext();){
						mMasData = (Map) i.next();
						strMasterId = (String)mMasData.get("frommid[Part Family Reference].torel.to.id");
						DomainObject domMastObj = DomainObject.newInstance(context,strMasterId);
						strMasterTitle = domMastObj.getInfo(context,pgV3Constants.SELECT_ATTRIBUTE_TITLE);
						objectPerformanceChracteristicBuffer.append("<TD width=\"87\" align=\"left\" valign=\"top\"><B>TG: </B>"+validateString1(strPCharstopgPLITestGroup)+"<BR></BR><B>AP: </B>"+validateString1(strApplication)+"<BR></BR><B>MPT: </B>"+validateString1(strMasterTitle)+"</TD>");
						}}
						//Added by DSM(Sogeti)-2015x.4 for PDF Views (Req - 11473,12000,11475) - Starts
						else
						//Condition when the master is not attached to the type
						{
							objectPerformanceChracteristicBuffer.append("<TD width=\"87\" align=\"left\" valign=\"top\"><B>TG: </B>"+validateString1(strPCharstopgPLITestGroup)+"<BR></BR><B>AP: </B>"+validateString1(strApplication)+"<BR></BR><B>MPT: </B>"+"</TD>");
						}
						//Added by DSM(Sogeti)-2015x.4 for PDF Views (Req - 11473,12000,11475) - Ends
//						pgDSOUtil_mxJPO objMPT = new pgDSOUtil_mxJPO(context,argsPath);
//						Vector vMPT = (Vector)objMPT.getDerivedTitleForRow(context, argsPath);
	//Added for PDF Refactor
						Vector vMPT = (Vector)pgPDFViewHelper.executeMainClassMethod(context, "pgDSOUtil", "getDerivedTitleForRow", argsPath);
						if(!vMPT.isEmpty()) {
							strMasterTitle = (String)vMPT.get(0);
							//Added by DSM(Sogeti)-2015x.5 for PDF Views (Defect ID-16705) - Starts
							if(UIUtil.isNullOrEmpty(strMasterTitle)){
								strMasterTitle = DomainConstants.EMPTY_STRING;
							}
							//Added by DSM(Sogeti)-2015x.5 for PDF Views (Defect ID-16705) - Ends
							//Modified by DSM-2015x.4 Dec Downtime for INC0532143 PDF Views on Starts
							strMasterTitle = strMasterTitle.replaceAll("[<]","#LESS_THAN");
							//Modified by DSM-2015x.4 Dec Downtime for INC0532143 PDF Views on Ends
						}
						objectPerformanceChracteristicBuffer.append("<TD width=\"110px\" align=\"left\" valign=\"top\"><B>TG: </B>"+validateString1(strPCharstopgPLITestGroup)+"<BR></BR><B>AP: </B>"+validateString1(strApplication)+"<BR></BR><B>MPT: </B>"+validateString1(strMasterTitle)+"</TD>");
						}
						else{
						//Modified by DSM(Sogeti)-2015x.4 for PDF Views (Req - 7554,7555,7556,11427,11473,12000) - Ends
						objectPerformanceChracteristicBuffer.append("<TD width=\"110px\" align=\"left\" valign=\"top\"><B>TG: </B>"+validateString1(strPCharstopgPLITestGroup)+"<BR></BR><B>AP: </B>"+validateString1(strApplication)+"</TD>");
						}
						//Modified by DSM-2015x.1 for PDF Views on 2-Feb-2016 - Ends
						//Removed by DSM(Sogeti)-2015x.4 for PDF Views (Req -11998)
						// Modified  by DSM-2018x.3  for PDF Views (Defect id #29066) - Ends
						objectPerformanceChracteristicBuffer.append("</TR>");
					}
					objectPerformanceChracteristicBuffer.append("</tbody>");
					objectPerformanceChracteristicBuffer.append("</TABLE><TR><TD><br /></TD></TR></TD></TR>");
				}
			}
		}
		catch (Exception e)
		{
			e.printStackTrace();
		}
		//Modified by DSM-2015x.2 for PDF Views for defect 10476- Starts
		finally
      {
     	ContextUtil.popContext(context);
      }
	  //Modified by DSM-2015x.2 for PDF Views for defect 10476- Ends
	  long endTime = new Date().getTime();
		System.out.println("Total Time has taken by the getPerformanceChracteristicDSO Method is-->"+(endTime-startTime));
		return objectPerformanceChracteristicBuffer;

	}*/
    /**
     * Retrieve Ownership information for DSO type
     * @param context
     * @param args
     * @return
     * @throws Exception
     */
    private StringBuilder getDSOONSTable(Context context,String strObjectId) throws Exception{
        long startTime = new Date().getTime();
        StringBuilder objectONSBuffer= new StringBuilder();
        try
        {
            if(validateString(strObjectId)){
                DomainObject domainObject= DomainObject.newInstance(context,strObjectId);
                //Modified by DSM(Sogeti) for Code Optimization Start
                Map Argmap = new HashMap();
                Map mapObject = new HashMap();
                Map mpSettings = null;
                Map columnMap = null;
                Map mpObj = null;
                Map mpSettingsONS = null;
                Map columnMapONS = null;
                Map mpObjONS = null;
                Map mpObjCat = null;
                Map argmapCat = null;
                Map argmapONS = null;
                Map mpSettingsCat = null;
                Map columnMapCat = null;
                Map argmapSegment = null;
                MapList mlObj = null;
                Map mpObjSubs = null;
                Map argmapSubs = null;
                Map mpSettingsSe = null;
                Map columnMapSe = null;
                Map argmapSe = null;
                Map mpSettingsSubS = null;
                Map columnMapSubs = null;
                MapList mlObjONS = null;
                MapList mlObjSubs = null;
                MapList mlObjSe = null;
                MapList mlObjCat = null;
                String strId = DomainConstants.EMPTY_STRING;
                String strSeg = DomainConstants.EMPTY_STRING;
                String strONS = DomainConstants.EMPTY_STRING;
                String stSe = DomainConstants.EMPTY_STRING;
                String stCat = DomainConstants.EMPTY_STRING;
                String stONS = DomainConstants.EMPTY_STRING;
                String strSegment = DomainConstants.EMPTY_STRING;
                //Modified by DSM(Sogeti) for Code Optimization End
                Argmap.put("objectId", strObjectId);
                String[] argsFPP= JPO.packArgs(Argmap);
//				pgDSOOwnershipTablesData_mxJPO objIPM = new pgDSOOwnershipTablesData_mxJPO(context, argsFPP);
//				MapList mlCommonOwnershipSharingAtt = (MapList)objIPM.getOwningSharingTableData(context, argsFPP);
                //Added for PDF Refactor
                MapList mlCommonOwnershipSharingAtt = (MapList)pgPDFViewHelper.executeMainClassMethod(context, "pgDSOOwnershipTablesData", "getOwningSharingTableData", argsFPP);
                objectONSBuffer.append("<TR><TD><TABLE class=\"pdf\" cellspacing=\"0\" width=\"1000px\" id=\"pgFinishedProductTable\">");
                objectONSBuffer.append("<thead>");
                objectONSBuffer.append("<TR><TD class=\"new\" colspan='5' ><font size='3'><b>Ownership and Sharing Attributes</b></font></TD></TR>");
                objectONSBuffer.append("<TR>");
                objectONSBuffer.append("<TD  width=\"200\" align=\"center\"><B>Segment</B></TD>");
                objectONSBuffer.append("<TD  width=\"200\" align=\"center\"><B>Security Category</B></TD>");
                objectONSBuffer.append("<TD  width=\"200\" align=\"center\"><B>Owning or Sharing</B></TD>");
                objectONSBuffer.append("<TD  width=\"200\" align=\"center\"><B>Sub-Sector</B></TD>");
                objectONSBuffer.append("<TD  width=\"200\" align=\"center\"><B>Sector</B></TD>");
                objectONSBuffer.append("</TR></thead>");
                if(mlCommonOwnershipSharingAtt != null && mlCommonOwnershipSharingAtt.size()>0){
                    for (int i = 0;i< mlCommonOwnershipSharingAtt.size(); i++){
                        //Modified by DSM(Sogeti) for Code Optimization Start
                        mapObject = (Map) mlCommonOwnershipSharingAtt.get(i);
                        strId = (String)mapObject.get(DomainConstants.SELECT_ID);
                        Object objCat = (Object)mapObject.get("PLMCategory");
                        Object objSub = (Object)mapObject.get("PLMSubSector");
                        Object objSec = (Object)mapObject.get("PLMSector");
                        strSeg = (String)mapObject.get("PLMSegment");
                        strONS = (String)mapObject.get("PLMOwningOrSharing");
                        mpSettings = new HashMap();
                        mpSettings.put("ColumnName" ,"PLMSegment");
                        columnMap = new HashMap();
                        columnMap.put("settings" ,mpSettings );
                        mpObj = new HashMap();
                        mpObj.put("PLMSegment",strSeg );
                        mlObj = new MapList();
                        mlObj.add(mpObj);
                        argmapSegment = new HashMap();
                        //Modified by DSM(Sogeti) for Code Optimization End
                        argmapSegment.put("objectList", mlObj);
                        argmapSegment.put("columnMap", columnMap);
                        String[] argsFPPSegment = JPO.packArgs(argmapSegment);
//						pgDSOOwnershipTablesData_mxJPO objFPPproductData=new pgDSOOwnershipTablesData_mxJPO(context, argsFPPSegment);
//						Vector vSegment =(Vector)objFPPproductData.getOwnershipDataValue(context, argsFPPSegment);
                        //Added for PDF Refactor
                        Vector vSegment =(Vector)pgPDFViewHelper.executeMainClassMethod(context, "pgDSOOwnershipTablesData", "getOwnershipDataValue", argsFPPSegment);
                        //Modified by DSM-2015x.1(Sogeti) for defect 4210 on 9-June-2016-Starts
                        if((vSegment != null) && (vSegment.size() >0) )
                            strSegment =(String)vSegment.get(0);
                        //Modified by DSM-2015x.1(Sogeti) for defect 4210 on 9-June-2016-Ends
                        objectONSBuffer.append("<TR align=\"center\" class=\"pdf\">");
                        objectONSBuffer.append("<TD align=\"center\" width=\"200\">"+validateString1(strSegment)+"</TD>");
                        //Modified by DSM(Sogeti) for Code Optimization
                        mpObjCat = new HashMap();
                        if (objCat instanceof String){
                            String strCat = (String) objCat;
                            mpObjCat.put("PLMCategory",strCat );
                        }
                        else if(objCat instanceof StringList){
                            StringList strCat = (StringList) objCat;
                            mpObjCat.put("PLMCategory",strCat);
                        }
                        //Modified by DSM(Sogeti) for Code Optimization Start
                        mpSettingsCat = new HashMap();
                        mpSettingsCat.put("ColumnName" ,"PLMCategory");
                        columnMapCat = new HashMap();
                        columnMapCat.put("settings" ,mpSettingsCat );
                        mlObjCat = new MapList();
                        mlObjCat.add(mpObjCat);
                        argmapCat = new HashMap();
                        //Modified by DSM(Sogeti) for Code Optimization End
                        argmapCat.put("objectList", mlObjCat);
                        argmapCat.put("columnMap", columnMapCat);
                        String[] argsFPPCat = JPO.packArgs(argmapCat);
//						pgDSOOwnershipTablesData_mxJPO objFPPproductDataCat=new pgDSOOwnershipTablesData_mxJPO(context, argsFPPCat);
//						Vector vCat =(Vector)objFPPproductDataCat.getOwnershipDataValue(context, argsFPPCat);
                        //Added for PDF Refactor
                        Vector vCat =(Vector)pgPDFViewHelper.executeMainClassMethod(context, "pgDSOOwnershipTablesData", "getOwnershipDataValue", argsFPPCat);
                        //Modified by DSM-2015x.1(Sogeti) for defect 4210 on 9-June-2016-Starts
                        if((vCat != null) && (vCat.size() >0) )
                            stCat = (String)vCat.get(0);
                        //Modified by DSM-2015x.1(Sogeti) for defect 4210 on 9-June-2016-Ends
                        objectONSBuffer.append("<TD align=\"center\" width=\"200\">"+validateString1(stCat)+"</TD>");
                        //Modified by DSM(Sogeti) for Code Optimization Start
                        mpSettingsONS = new HashMap();
                        mpSettingsONS.put("ColumnName" ,"PLMOwningOrSharing");
                        columnMapONS = new HashMap();
                        columnMapONS.put("settings" ,mpSettingsONS );
                        mpObjONS = new HashMap();
                        mpObjONS.put("PLMOwningOrSharing",strONS );
                        mlObjONS = new MapList();
                        mlObjONS.add(mpObjONS);
                        argmapONS = new HashMap();
                        //Modified by DSM(Sogeti) for Code Optimization End
                        argmapONS.put("objectList", mlObjONS);
                        argmapONS.put("columnMap", columnMapONS);
                        String[] argsFPPONS = JPO.packArgs(argmapONS);
//						pgDSOOwnershipTablesData_mxJPO objFPPproductDataONS=new pgDSOOwnershipTablesData_mxJPO(context, argsFPPONS);
//						Vector vONS =(Vector)objFPPproductDataONS.getOwnershipDataValue(context, argsFPPONS);
                        //Added for PDF Refactor
                        Vector vONS =(Vector)pgPDFViewHelper.executeMainClassMethod(context, "pgDSOOwnershipTablesData", "getOwnershipDataValue", argsFPPONS);
                        //Modified by DSM-2015x.1(Sogeti) for defect 4210 on 9-June-2016-Starts
                        if((vONS != null) && (vONS.size() >0) )
                            stONS =(String)vONS.get(0);
                        //Modified by DSM-2015x.1(Sogeti) for defect 4210 on 9-June-2016-Ends
                        objectONSBuffer.append("<TD align=\"center\" width=\"200\">"+validateString1(stONS)+"</TD>");
                        mpObjSubs = new HashMap();
                        if (objSub instanceof String){
                            String strSub = (String) objSub;
                            mpObjSubs.put("PLMSubSector",strSub );
                        }
                        else if(objSub instanceof StringList){
                            StringList strSub = (StringList) objSub;
                            mpObjSubs.put("PLMSubSector",strSub );
                        }
                        mpSettingsSubS = new HashMap();
                        mpSettingsSubS.put("ColumnName" ,"PLMSubSector");
                        columnMapSubs = new HashMap();
                        columnMapSubs.put("settings" ,mpSettingsSubS );
                        mlObjSubs = new MapList();
                        mlObjSubs.add(mpObjSubs);
                        argmapSubs = new HashMap();
                        argmapSubs.put("objectList", mlObjSubs);
                        argmapSubs.put("columnMap", columnMapSubs);
                        String[] argsFPPSubs = JPO.packArgs(argmapSubs);
//						pgDSOOwnershipTablesData_mxJPO objFPPproductDataSubs=new pgDSOOwnershipTablesData_mxJPO(context, argsFPPSubs);
//						Vector vSubs =(Vector)objFPPproductDataSubs.getOwnershipDataValue(context, argsFPPSubs);
                        //Added for PDF Refactor
                        Vector vSubs =(Vector)pgPDFViewHelper.executeMainClassMethod(context, "pgDSOOwnershipTablesData", "getOwnershipDataValue", argsFPPSubs);
                        //Modified by DSM-2015x.1(Sogeti) for defect 4210 on 9-June-2016-Starts
                        String stSubs = null;
                        if((vSubs != null) && (vSubs.size() >0) )
                            stSubs = (String)vSubs.get(0);
                        //Modified by DSM-2015x.1(Sogeti) for defect 4210 on 9-June-2016-Ends
                        objectONSBuffer.append("<TD align=\"center\" width=\"200\">"+validateString1(stSubs)+"</TD>");

                        Map mpObjSe = new HashMap();
                        if (objSec instanceof String){
                            String strSec = (String) objSec;
                            mpObjSe.put("PLMSector",strSec );
                        }
                        else if(objSec instanceof StringList){
                            StringList strSec = (StringList) objSec;
                            mpObjSe.put("PLMSector",strSec );
                        }
                        mpSettingsSe = new HashMap();
                        mpSettingsSe.put("ColumnName" ,"PLMSector");
                        columnMapSe = new HashMap();
                        columnMapSe.put("settings" ,mpSettingsSe );
                        mlObjSe = new MapList();
                        mlObjSe.add(mpObjSe);
                        argmapSe = new HashMap();
                        argmapSe.put("objectList", mlObjSe);
                        argmapSe.put("columnMap", columnMapSe);
                        String[] argsFPPSe = JPO.packArgs(argmapSe);
//						pgDSOOwnershipTablesData_mxJPO objFPPproductDataSe = new pgDSOOwnershipTablesData_mxJPO(context, argsFPPSe);
//						Vector vSe =(Vector)objFPPproductDataSe.getOwnershipDataValue(context, argsFPPSe);
                        //Added for PDF Refactor
                        Vector vSe =(Vector)pgPDFViewHelper.executeMainClassMethod(context, "pgDSOOwnershipTablesData", "getOwnershipDataValue", argsFPPSe);
                        //Modified by DSM-2015x.1(Sogeti) for defect 4210 on 9-June-2016-Starts
                        if((vSe != null) && (vSe.size() >0) )
                            stSe =(String)vSe.get(0);
                        //Modified by DSM-2015x.1(Sogeti) for defect 4210 on 9-June-2016-Ends
                        objectONSBuffer.append("<TD align=\"center\" width=\"200\">"+validateString1(stSe)+"</TD>");
                        objectONSBuffer.append("</TR>");
                    }
                }
                else{
                    objectONSBuffer.append("<TR>");
                    objectONSBuffer.append("<TD width=\"200px\">"+". "+"</TD>");
                    objectONSBuffer.append("<TD width=\"200px\">"+". "+ "</TD>");
                    objectONSBuffer.append("<TD width=\"200px\">"+". "+"</TD>");
                    objectONSBuffer.append("<TD width=\"200px\">"+". "+"</TD>");
                    objectONSBuffer.append("<TD width=\"200px\">"+". "+"</TD>");
                    objectONSBuffer.append("</TR>");
                }
                objectONSBuffer.append("</TABLE><TR><TD><br /></TD></TR></TD></TR>");
                //Modify Code Refactoring
                mlCommonOwnershipSharingAtt.clear();
            }

        }
        catch (Exception e){
            throw new MatrixException(e);
        }
        long endTime = new Date().getTime();
        System.out.println("Total Time has taken by the  getDSOONSTable Method is-->"+(endTime-startTime));
        return objectONSBuffer;
    }
    /**
     * Retrieve BOM and Substitute information for DSO GenDoc
     * @param context
     * @param args
     * @return
     * @throws MatrixException
     */
    private  StringBuilder getBillOfMaterialSubstituteAndSAPBOMDataDSOGenDoc(Context context,String strObjectId,String strPDFViewKind) throws MatrixException{
        long startTime = new Date().getTime();
        //Modified by DSM(Sogeti)-2015x.4 for PDF View Performance improvement - Starts
        //${CLASS:pgV3SecurityUtil} objV3 = new ${CLASS:pgV3SecurityUtil}(context, null);
        //Modified by DSM(Sogeti)-2015x.4 for PDF View Performance improvement - Ends
        StringBuilder BOMSubstituteSAPBuffer=new StringBuilder();
        DomainObject dmoPart = null;
        String strPCTFIL="";
        String SAPDescription1="";
        String strPCTFIL1="";
        String strPCTFIL2="";
        StringList selectStmts = new StringList(30);
        boolean havingSecondLevel = false;
        MapList mlSubstituteData= new MapList();
        boolean firstBreakAllowed=false;
        boolean isPushContext = false;
        if(null != strObjectId && !"".equals(strObjectId)){
            try{
                if(context.isAssigned(pgV3Constants.ROLE_PGCONTRACTSUPPLIER) || context.isAssigned(pgV3Constants.ROLE_PGCONTRACTMANUFACTURER)) {
                    isPushContext = true;
                    ContextUtil.pushContext(context, "User Agent", "", "");
                }
                Map BOMPack=new HashMap();
                BOMPack.put("emxExpandFilter","1" );
                BOMPack.put("ENCBOMRevisionCustomFilter", "As Stored");
                BOMPack.put("objectId", strObjectId);
                //Addded by DSM-2015x.2(Sogeti) for defect#9986,10000 -Start
                BOMPack.put("parentOID",strObjectId);
                //Addded by DSM-2015x.2(Sogeti) for defect #9986,10000 -Ends
                String[] args = JPO.packArgs(BOMPack);
//			emxPart_mxJPO emxPart = new emxPart_mxJPO(context, args);
//			MapList mlEBOM=emxPart.getEBOMsWithRelSelectablesSB(context, args);
                //Added for PDF Refactor
                MapList mlEBOM=(MapList)pgPDFViewHelper.executeMainClassMethod(context, "emxPart", "getEBOMsWithRelSelectablesSB", args);
                dmoPart= DomainObject.newInstance(context,strObjectId);
                //Added by DSM(Sogeti)-2018x.5 for PDF Views Requirement  - Starts
                String strContType = (String) dmoPart.getInfo(context, DomainConstants.SELECT_TYPE);
                strParentObjType = strContType;
                //Added by DSM(Sogeti)-2018x.5 for PDF Views Requirement  - Ends
                StringList selectStmtsRel = new StringList(5);
                selectStmtsRel.add(DomainRelationship.SELECT_TO_ID );
                selectStmtsRel.add(pgV3Constants.SELECT_ATTRIBUTE_PGCHANGE);
                selectStmtsRel.add(pgV3Constants.SELECT_ATTRIBUTE_FINDNUMBER);
                selectStmtsRel.add(pgV3Constants.SELECT_ATTRIBUTE_REFERENCEDESIGNATOR);
                //Modified by DSM(Sogeti)-2015x.4 for PDF Views (Req - 5706) - Starts
                selectStmtsRel.add(pgV3Constants.SELECT_ATTRIBUTE_PGOPTIONALCOMPONENT);
                //Modified by DSM(Sogeti)-2015x.4 for PDF Views (Req - 5706) - Ends
                StringList selectStmt = new StringList(11);
                selectStmt.add(DomainConstants.SELECT_NAME);
                selectStmt.add(DomainConstants.SELECT_TYPE);
                selectStmt.add(DomainConstants.SELECT_ID);
                selectStmt.add(pgV3Constants.SELECT_ATTRIBUTE_TITLE);
                selectStmt.add(DomainConstants.SELECT_CURRENT);
                //Modified for 2018x Upgrade - Stage attribute is replaced by Release Phase attribute in 18x OOTB.
                selectStmt.add(pgV3Constants.SELECT_ATTRIBUTE_RELEASE_PHASE);
                //Added by DSM  2018x.3 PDF Views Defect #32207 - Starts
                selectStmt.add(DomainConstants.SELECT_REVISION);
                //Added by DSM  2018x.3 PDF Views Defect #32207 - Ends
                //Added by DSM(Sogeti)-2018x.5 for PDF Views Requirement  - Starts
                selectStmt.add(DomainConstants.SELECT_POLICY);
                selectStmt.add(pgV3Constants.SELECT_ATTRIBUTE_RELEASE_DATE);
                selectStmt.add(pgV3Constants.SELECT_ATTRIBUTE_PGDENSITYUOM);
                selectStmt.add(pgV3Constants.SELECT_ATTRIBUTE_PGONSHELFPRODUCTDENSITY);
                //Added by DSM(Sogeti)-2018x.5 for PDF Views Requirement  - Ends
                MapList mlcp = new MapList();
                MapList mlCustP = new MapList();
                MapList mlTP = new MapList();
                MapList mlFPP = new MapList();
                MapList mlIP = new MapList();
                if(null!=mlEBOM && mlEBOM.size() > 0){
                    for (Iterator iterator = mlEBOM.iterator(); iterator.hasNext();){
                        Map mapObject = (Map) iterator.next();
                        String strRelId = (String)mapObject.get("id[connection]");
                        String strlevel = (String)mapObject.get(DomainConstants.SELECT_LEVEL);
                        String strParentId = (String)mapObject.get(DomainConstants.SELECT_ID);
                        String[] relargs = new String[1];
                        relargs[0] = strRelId;
                        String strToId = "";
                        String strpgChange = "";
                        String strFindNumber = "";
                        String strRefDesig = "";
                        //Modified by DSM(Sogeti)-2015x.4 for PDF Views (Req - 5706) - Starts
                        String strOptCom = "";
                        //Modified by DSM(Sogeti)-2015x.4 for PDF Views (Req - 5706) - Ends
                        MapList mlToId= (MapList)DomainRelationship.getInfo(context, relargs,selectStmtsRel);
                        if(null != mlToId && mlToId.size()>0){
                            for(int i=0;i<mlToId.size();i++)
                            {
                                Map mData = (Map)mlToId.get(i);
                                strToId = (String)mData.get(DomainRelationship.SELECT_TO_ID );
                                strpgChange = (String)mData.get(pgV3Constants.SELECT_ATTRIBUTE_PGCHANGE);
                                strFindNumber = (String)mData.get(pgV3Constants.SELECT_ATTRIBUTE_FINDNUMBER);
                                strRefDesig = (String)mData.get(pgV3Constants.SELECT_ATTRIBUTE_REFERENCEDESIGNATOR);
                                //Modified by DSM(Sogeti)-2015x.4 for PDF Views (Req - 5706) - Starts
                                strOptCom = (String)mData.get(pgV3Constants.SELECT_ATTRIBUTE_PGOPTIONALCOMPONENT);
                                //Modified by DSM(Sogeti)-2015x.4 for PDF Views (Req - 5706) - Ends
                            }
                        }
                        DomainObject dmoBom = DomainObject.newInstance(context, strToId);
                        Map mpBom = dmoBom.getInfo(context, selectStmt);
                        String strType = (String)mpBom.get(DomainConstants.SELECT_TYPE);
                        String strName = (String)mpBom.get(DomainConstants.SELECT_NAME);
                        mpBom.put("attribute[pgChange]", strpgChange);
                        mpBom.put("attribute[Find Number]", strFindNumber);
                        mpBom.put("id[connection]", strRelId);
                        mpBom.put(DomainConstants.SELECT_LEVEL, strlevel);
                        mpBom.put("ParentId", strParentId);
                        mpBom.put("RefDesig", strRefDesig);
                        //Modified by DSM(Sogeti)-2015x.4 for PDF Views (Req - 5706) - Starts
                        mpBom.put("OptComp", strOptCom);
                        //Modified by DSM(Sogeti)-2015x.4 for PDF Views (Req - 5706) - Ends
                        mlFPP.add(mpBom);
                        mlFPP.addSortKey("attribute[Find Number]", "ascending", "String");
                        mlFPP.sort();
                    }
                    if(null!=mlFPP && mlFPP.size() > 0){
                        BOMSubstituteSAPBuffer.append("<TR><TD><TABLE class=\"WordWrappdf\" cellspacing=\"0\" width=\"1000px\" id=\"BOM\">");
                        BOMSubstituteSAPBuffer.append("<thead>");
                        //Modified by DSM(Sogeti)-2018x.5 for PDF Views Requirement  - Starts
                        BOMSubstituteSAPBuffer.append("<TR><TD class=\"new\" colspan='14'><B><font size ='4'>Bill of Materials</font></B></TD></TR>");
                        //Modified by DSM(Sogeti)-2018x.5 for PDF Views Requirement  - Ends
                        //Modified by DSM  2018x.3 PDF Views Defect #32207 - Starts
                        BOMSubstituteSAPBuffer.append("<TR><TH  align=\"center\" width=\"120\"><B>Name(N)<BR></BR>Rev(R)</B></TH>");
                        //Modified by DSM  2018x.3 PDF Views Defect #32207 - Ends
                        BOMSubstituteSAPBuffer.append("<TH align=\"center\" width=\"45\"><B>Chg</B></TH>");
                        BOMSubstituteSAPBuffer.append("<TH  align=\"center\" width=\"35\"><B>F/N</B></TH>");
                        BOMSubstituteSAPBuffer.append("<TH align=\"center\"  width=\"130\"><B>Title</B></TH>");
                        BOMSubstituteSAPBuffer.append("<TH align=\"center\" width=\"110\"><B>Type</B></TH>");
                        //Modified by DSM(Sogeti)-2018x.5 for PDF Views Requirement  - Starts
                        BOMSubstituteSAPBuffer.append("<TH align=\"center\" width=\"65\"><B>Substitute Parts (SP) </B> <BR></BR><B> Alternate (Alt)</B> </TH>");
                        //Modified by DSM(Sogeti)-2018x.5 for PDF Views Requirement  - Ends
                        BOMSubstituteSAPBuffer.append("<TH align=\"center\" width=\"35\"><B>Qty</B></TH>");
                        BOMSubstituteSAPBuffer.append("<TH align=\"center\" width=\"80\"><B>Base Unit of Measure</B></TH>");
                        //Modified by DSM(Sogeti)-2018x.5 for PDF Views Requirement  - Starts
                        BOMSubstituteSAPBuffer.append("<TH align=\"center\" width=\"180\"><B>EBOM Comments</B></TH>");
                        //Modified by DSM(Sogeti)-2018x.5 for PDF Views Requirement  - Ends
                        //Modified by DSM-2015x.2 for defect 10925 - Starts
                        //Modified by DSM-2018x.1 for defect 25084 - Starts
                        if (UIUtil.isNotNullAndNotEmpty(strPDFViewKind) && !"GenDoc".equalsIgnoreCase(strPDFViewKind.trim()) ) {
                            BOMSubstituteSAPBuffer.append("<TH align=\"center\" width=\"80\"><B>State</B></TH>");
                        }
                        //Modified by DSM-2018x.1 for defect 25084 - Ends
                        //Modified by DSM(Sogeti)-2018x.5 for PDF Views Requirement  - Starts
                        BOMSubstituteSAPBuffer.append("<TH align=\"center\" width=\"75\"><B>Release Date</B></TH>");
                        BOMSubstituteSAPBuffer.append("<TH align=\"center\" width=\"75\"><B>Phase  (Pha)</B><BR></BR> <B>State (St)</B></TH>");
                        //Modified by DSM(Sogeti)-2015x.4 for PDF Views (Req - 5706) - Starts
                        BOMSubstituteSAPBuffer.append("<TH align=\"center\" width=\"95\"><B>Ref Des(RD)</B><BR></BR><B>On-Shelf</B><BR></BR><B>Product</B><BR></BR><B>Density(OSPD)</B></TH>");
                        BOMSubstituteSAPBuffer.append("<TH align=\"center\" width=\"95\"><B>Density Unit Of</B><BR></BR><B>Measure(DUoM)</B> <BR></BR><B>Optional</B><BR></BR><B>Components(OC)</B> </TH>");
                        //Modified by DSM(Sogeti)-2015x.4 for PDF Views (Req - 5706) - Ends
                        //Modified by DSM(Sogeti)-2018x.5 for PDF Views Requirement  - Ends
                        //Modified by DSM-2015x.2 for defect 10925 - Ends
                        BOMSubstituteSAPBuffer.append("</TR></thead>");
                        for (Iterator iterator = mlFPP.iterator(); iterator.hasNext();)
                        {
                            Map mapCP = (Map) iterator.next();
                            String stridConn = (String)mapCP.get("id[connection]");
                            String strid = (String)mapCP.get(DomainConstants.SELECT_ID);
                            String strLevel = (String)mapCP.get(DomainConstants.SELECT_LEVEL);
                            String stParentId = (String)mapCP.get("ParentId");
                            String strState = (String)mapCP.get(DomainConstants.SELECT_CURRENT);
                            //Modified for 2018x Upgrade - Stage attribute is replaced by Release Phase attribute in 18x OOTB.
                            String strStage = (String)mapCP.get(pgV3Constants.SELECT_ATTRIBUTE_RELEASE_PHASE);
                            String strRefDes = (String)mapCP.get("RefDesig");
                            //Modified by DSM(Sogeti)-2015x.4 for PDF Views (Req - 5706) - Starts
                            String strOptComp = (String)mapCP.get("OptComp");
                            //Modified by DSM(Sogeti)-2015x.4 for PDF Views (Req - 5706) - Ends
                            String strName = (String)mapCP.get(DomainConstants.SELECT_NAME);
                            //Added by DSM  2018x.3 PDF Views Defect #32207 - Starts
                            String StrRev = (String)mapCP.get(DomainConstants.SELECT_REVISION);
                            //Added by DSM  2018x.3 PDF Views Defect #32207 - Ends
                            BOMSubstituteSAPBuffer.append("<TR align=\"center\" class=\"pdf\">");
                            //Modified by DSM(Sogeti)-2018x.5 for PDF Views Requirement  - Starts
                            //Modified by DSM  2018x.3 PDF Views Defect #32207 - Starts
                            BOMSubstituteSAPBuffer.append("<TD width=\"120\"><B>N:</B>"+validateString1(strName)+"<BR></BR><B>R:</B>"+validateString1(StrRev)+"</TD>");
                            //Modified by DSM  2018x.3 PDF Views Defect #32207 - Ends
                            //Modified by DSM(Sogeti)-2018x.5 for PDF Views Requirement  - Ends
                            MapList mlObjListChg = new MapList();
                            Map mpObjChg = new HashMap();
                            mpObjChg.put("id[connection]",stridConn);
                            mpObjChg.put(DomainConstants.SELECT_LEVEL,strLevel);
                            mpObjChg.put(DomainConstants.SELECT_ID,strid);
                            mlObjListChg.add(mpObjChg);
                            Map mpBOMChg=new HashMap();
                            mpBOMChg.put("objectList", mlObjListChg);
                            //Modified for PNGUPGRADE 2018x PDF nullpointer  OOTB chnage in  getFindNumberSB START
                            Map mpParamObjMap = new HashMap();
                            mpParamObjMap.put("BOMViewMode","");
                            mpParamObjMap.put("selectedTable","");
                            mpBOMChg.put("paramList", mpParamObjMap);
                            //Modified for PNGUPGRADE 2018x PDF nullpointer  OOTB chnage in  getFindNumberSB END
                            String[] argsChg = JPO.packArgs(mpBOMChg);
//						emxPart_mxJPO objemxPartChg = new emxPart_mxJPO(context, argsChg);
//						Vector vEBOMChg = (Vector)objemxPartChg.getChgColumnData(context, argsChg);
                            //Added for PDF Refactor
                            Vector vEBOMChg = (Vector)pgPDFViewHelper.executeMainClassMethod(context, "emxPart", "getChgColumnData", argsChg);
                            //Modified by DSM-2015x.1(Sogeti) for defect 4210 on 9-June-2016-Starts
                            String strChg = null;
                            if((vEBOMChg !=null) && (vEBOMChg.size()>0))
                                strChg = (String)vEBOMChg.get(0);
                            //Modified by DSM-2015x.1(Sogeti) for defect 4210 on 9-June-2016-Ends
                            BOMSubstituteSAPBuffer.append("<TD width=\"45\">"+validateString1(strChg)+"</TD>");
//						Vector vEBOMFindNumber = (Vector)objemxPartChg.getFindNumberSB(context, argsChg);
                            //Added for PDF Refactor
                            Vector vEBOMFindNumber = (Vector)pgPDFViewHelper.executeMainClassMethod(context, "emxPart", "getFindNumberSB", argsChg);
                            //Modified by DSM-2015x.1(Sogeti) for defect 4210 on 9-June-2016-Starts
                            String strFindNumber = null;
                            if((vEBOMFindNumber !=null) && (vEBOMFindNumber.size()>0))
                                strFindNumber = (String)vEBOMFindNumber.get(0);
                            //Modified by DSM-2015x.1(Sogeti) for defect 4210 on 9-June-2016-Ends
                            BOMSubstituteSAPBuffer.append("<TD width=\"35\">"+validateString1(strFindNumber)+"</TD>");

                            String strTitle1 = (String)mapCP.get(pgV3Constants.SELECT_ATTRIBUTE_TITLE);
                            //Added by DSM(Sogeti)-2015x.5 for PDF Views (Defect ID-16705) - Starts
                            if(UIUtil.isNullOrEmpty(strTitle1)){
                                strTitle1 = DomainConstants.EMPTY_STRING;
                            }
                            if(UIUtil.isNullOrEmpty(strRefDes)){
                                strRefDes = DomainConstants.EMPTY_STRING;
                            }
                            //Added by DSM(Sogeti)-2015x.5 for PDF Views (Defect ID-16705) - Ends
                            strTitle1 =strTitle1.replaceAll("[<]","#LESS_THAN");
                            strTitle1 =strTitle1.replaceAll("[>]","#GREATER_THAN");
                            BOMSubstituteSAPBuffer.append("<TD width=\"130\">"+validateString1(strTitle1)+"</TD>");

                            String strType1 = (String)mapCP.get(DomainConstants.SELECT_TYPE);
                            String strValue = UINavigatorUtil.getAdminI18NString("Type", strType1, context.getSession().getLanguage());
                            BOMSubstituteSAPBuffer.append("<TD width=\"110\">"+validateString1(strValue)+"</TD>");

                            Map mpParam = new HashMap();
                            mpParam.put("reportFormat","pdf");
                            mpParam.put("objectId",stParentId);
                            MapList mlObjList = new MapList();
                            Map mpObj = new HashMap();
                            mpObj.put("id[connection]",stridConn);
                            mpObj.put(DomainConstants.SELECT_ID,strid);
                            mpObj.put(DomainConstants.SELECT_LEVEL,strLevel);
                            mlObjList.add(mpObj);
                            Map mpBOMSubs=new HashMap();
                            mpBOMSubs.put("paramList",mpParam);
                            mpBOMSubs.put("objectList", mlObjList);
                            String[] argsSubs = JPO.packArgs(mpBOMSubs);
//						emxPart_mxJPO objemxPart = new emxPart_mxJPO(context, argsSubs);
//						Vector vEBOMSub = (Vector)objemxPart.getColumnSubstitutePartsFlagData(context, argsSubs);
                            //Added for PDF Refactor
                            Vector vEBOMSub = (Vector)pgPDFViewHelper.executeMainClassMethod(context, "emxPart", "getColumnSubstitutePartsFlagData", argsSubs);
                            String strSub = "";
                            strSub = (String)vEBOMSub.get(0);
                            //Modified by DSM(Sogeti)-2018x.5 for PDF Views Requirement  - Starts
                            StringList slSubPartNames = getSubstitutePartName(context,mapCP,pgV3Constants.RELATIONSHIP_EBOM);
                            String strSubPartName = DomainConstants.EMPTY_STRING;
                            if(slSubPartNames != null && slSubPartNames.size()>0)
                            {
                                strSubPartName = FrameworkUtil.join(slSubPartNames,",");
                            }

                            String strAlternate= getAlternatePart(context,strObjectId,stParentId);
                            BOMSubstituteSAPBuffer.append("<TD width=\"85\"><B>SP:</B>"+validateString1(strSubPartName)+"<BR></BR><B>Alt:</B>"+validateString1(strAlternate)+"</TD>");
                            //Modified by DSM(Sogeti)-2018x.5 for PDF Views Requirement  - Ends
                            Map mpParamQty = new HashMap();
                            mpParamQty.put("reportFormat","emxPart:getEBOMsWithRelSelectablesSB");
                            MapList mlObjListQty = new MapList();
                            Map mpObjQty = new HashMap();
                            mpObjQty.put("id[connection]",stridConn);
                            mlObjListQty.add(mpObjQty);
                            Map mpBOMQty=new HashMap();
                            mpBOMQty.put("paramList",mpParamQty);
                            mpBOMQty.put("objectList", mlObjListQty);
                            String[] argsQty = JPO.packArgs(mpBOMQty);
//						emxPart_mxJPO objemxPartQty = new emxPart_mxJPO(context, argsQty);
//						Vector vEBOMQty = (Vector)objemxPartQty.getQuantity(context, argsQty);
                            //Added for PDF Refactor
                            Vector vEBOMQty = (Vector)pgPDFViewHelper.executeMainClassMethod(context, "emxPart", "getQuantity", argsQty);
                            //Modified by DSM-2015x.1(Sogeti) for defect 4210 on 9-June-2016-Starts
                            String strQty = null;
                            if((vEBOMQty !=null) && (vEBOMQty.size()>0))
                                strQty = (String)vEBOMQty.get(0);
                            //Modified by DSM-2015x.1(Sogeti) for defect 4210 on 9-June-2016-Ends
                            BOMSubstituteSAPBuffer.append("<TD width=\"35\">"+validateString1(strQty)+"</TD>");
                            Map settingsMap = new HashMap();
                            settingsMap.put("DSOPickListRelationshipName","relationship_pgPDTemplatestopgPLIBUOM");
                            settingsMap.put("DSOPickListAttribute","attribute_pgBaseUnitOfMeasure");
                            Map columnMap = new HashMap();
                            columnMap.put("settings",settingsMap);
                            MapList mlObjListBUOM = new MapList();
                            Map mpObjBUOM = new HashMap();
                            mpObjBUOM.put(DomainConstants.SELECT_ID,strid);
                            mlObjListBUOM.add(mpObjBUOM);
                            Map paramMap=new HashMap();
                            Map mpBOMBUOM=new HashMap();
                            mpBOMBUOM.put("columnMap",columnMap);
                            mpBOMBUOM.put("objectList", mlObjListBUOM);
                            mpBOMBUOM.put("paramList", paramMap);
                            String[] argsBUOM = JPO.packArgs(mpBOMBUOM);
//						emxCPNProductData_mxJPO objemxPartBUOM = new emxCPNProductData_mxJPO(context, argsBUOM);
//						Vector vEBOMBUOM = (Vector)objemxPartBUOM.getColumnPickListData(context, argsBUOM);
                            //Added for PDF Refactor
                            Vector vEBOMBUOM = (Vector)pgPDFViewHelper.executeMainClassMethod(context, "emxCPNProductData", "getColumnPickListData", argsBUOM);
                            //Modified by DSM-2015x.1(Sogeti) for defect 4210 on 9-June-2016-Starts
                            String strBUOM = null;
                            if((vEBOMBUOM !=null) && (vEBOMBUOM.size()>0))
                                strBUOM = (String)vEBOMBUOM.get(0);
                            //Modified by DSM-2015x.1(Sogeti) for defect 4210 on 9-June-2016-Ends
                            BOMSubstituteSAPBuffer.append("<TD width=\"80\">"+validateString1(strBUOM)+"</TD>");
//						Vector vEBOMComments = (Vector)objemxPartChg.getCommentColumnDataFinishedProductForDSO(context, argsChg);
                            //Added for PDF Refactor
                            Vector vEBOMComments = (Vector)pgPDFViewHelper.executeMainClassMethod(context, "emxPart", "getCommentColumnDataFinishedProductForDSO", argsChg);
                            //Modified by DSM-2015x.1(Sogeti) for defect 4210 on 9-June-2016-Starts
                            String strComments = null;
                            if((vEBOMComments !=null) && (vEBOMComments.size()>0))
                                strComments = (String)vEBOMComments.get(0);
                            //Added by DSM(Sogeti)-2015x.5 for PDF Views (Defect ID-16705) - Starts
                            if(UIUtil.isNullOrEmpty(strComments)){
                                strComments = DomainConstants.EMPTY_STRING;
                            }
                            //Added by DSM(Sogeti)-2015x.5 for PDF Views (Defect ID-16705) - Ends
                            if(UIUtil.isNotNullAndNotEmpty(strComments)) {
                                strComments =strComments.replaceAll("[<]","#LESS_THAN");
                                strComments =strComments.replaceAll("[>]","#GREATER_THAN");
                            }
                            //Modified by DSM-2015x.1(Sogeti) for defect 4210 on 9-June-2016-Ends
                            BOMSubstituteSAPBuffer.append("<TD width=\"180\">"+validateString1(strComments)+"</TD>");
                            //Modified by DSM-2015x.2 for defect 10925 - Starts
                            //Modified by DSM-2018x.1 for defect 25084 - Starts
                            if (UIUtil.isNotNullAndNotEmpty(strPDFViewKind) && !"GenDoc".equalsIgnoreCase(strPDFViewKind.trim())) {
                                BOMSubstituteSAPBuffer.append("<TD width=\"80\">"+validateString1(strState)+"</TD>");
                            }

                            //Modified by DSM-2018x.1 for defect 25084 - Ends
                            String strRefDe = strRefDes.replaceAll("[<]","#LESS_THAN");
                            strRefDe = strRefDe.replaceAll("[>]","#GREATER_THAN");
                            //Modified by DSM(Sogeti)-2015x.4 for PDF Views (Req - 5706) - Starts
                            //Modified by DSM(Sogeti)-2018x.5 for PDF Views Requirement  - Starts
                            String strReleaseDate = pgIPMPDFViewUtil_mxJPO.getFormattedDate((String) mapCP.get(pgV3Constants.SELECT_ATTRIBUTE_RELEASE_DATE));
                            String strPolicy = (String)mapCP.get(DomainConstants.SELECT_POLICY);
                            String strCurrentState = EnoviaResourceBundle.getStateI18NString(context, strPolicy, strState,context.getLocale().getLanguage());
                            String strProductDensity = (String)mapCP.get(pgV3Constants.SELECT_ATTRIBUTE_PGONSHELFPRODUCTDENSITY);
                            String strDensityUOM = (String)mapCP.get(pgV3Constants.SELECT_ATTRIBUTE_PGDENSITYUOM);
                            BOMSubstituteSAPBuffer.append("<TD width=\"160\" align=\"left\" valign=\"top\">"+validateString1(strReleaseDate)+"</TD>");
                            BOMSubstituteSAPBuffer.append("<TD width=\"75\"><B>Pha:</B>"+validateString1(strStage)+"<BR></BR><B>St:</B>"+validateString1(strCurrentState)+"</TD>");
                            BOMSubstituteSAPBuffer.append("<TD width=\"95\" align=\"left\" valign=\"top\"><B>RD:</B>"+validateString1(strRefDe)+"<BR></BR><B>OSPD:</B>"+validateString1(strProductDensity)+"</TD>");
                            BOMSubstituteSAPBuffer.append("<TD width=\"95\" align=\"left\" valign=\"top\"><B>DUoM:</B>"+validateString1(strDensityUOM)+"<BR></BR><B>OC:</B>"+validateString1(strOptComp)+"</TD>");
                            //Modified by DSM(Sogeti)-2018x.5 for PDF Views Requirement  - Ends
                            //Modified by DSM(Sogeti)-2015x.4 for PDF Views (Req - 5706) - Ends
                            //Modified by DSM-2015x.2 for defect 10925 - Ends
                            BOMSubstituteSAPBuffer.append("</TR>");
                        }
                        BOMSubstituteSAPBuffer.append("</TABLE><TR><TD><br /></TD></TR></TD></TR>");
                        //Substitute
                        int cntFPP = 0;
                        boolean bFPPTable = false;
                        //Modified by DSM(Sogeti) for Code Optimization Start
                        MapList mlSub = new MapList();
                        String strParentId =  DomainConstants.EMPTY_STRING;
                        //Modified by DSM(Sogeti) for Code Optimization End
                        for (Iterator iterator = mlFPP.iterator(); iterator.hasNext();){
                            Map mapFPP = (Map) iterator.next();
                            strParentId = (String)mapFPP.get("ParentId");
                            mlSub = new MapList();
                            mlSub = getSubstituteData(context, mapFPP);
                            if(null != mlSub && mlSub.size()>0){
                                cntFPP++;
                                if( cntFPP == 1) {
                                    bFPPTable = true;
                                    BOMSubstituteSAPBuffer.append("<TR><TD><TABLE class=\"WordWrappdf\" cellspacing=\"0\" width=\"1000px\" id=\"BOM\">");
                                    BOMSubstituteSAPBuffer.append("<thead>");
                                    //Modified by DSM(Sogeti)-2018x.5 for PDF Views Requirement  - Starts
                                    BOMSubstituteSAPBuffer.append("<TR><TD class=\"new\"  colspan='14'><B><font size ='4'>Substitutes</font></B></TD></TR>");
                                    //Modified by DSM(Sogeti)-2018x.5 for PDF Views Requirement  - Ends
                                    //Modified by DSM(Sogeti)-2015x.4 for PDF Views (Req - 5706) - Starts
                                    BOMSubstituteSAPBuffer.append(getBOMSubstitueTableHeader(context,mlFPP,strPDFViewKind,strObjectId));
                                    //Modified by DSM(Sogeti)-2015x.4 for PDF Views (Req - 5706) - Ends
                                    BOMSubstituteSAPBuffer.append("</TR></thead>");
                                }
                                for (Iterator objIterator = mlSub.iterator(); objIterator.hasNext();){
                                    Map mapSub = (Map) objIterator.next();
                                    //Modified by DSM(Sogeti) for Code Optimization
                                    //Modified by DSM(Sogeti)-2018x.5 for PDF Views Requirement  - Starts
                                    //Modified by DSM Sogeti for 2022x.02 May CW for PDF Views (Req -46172) - Starts
                                    BOMSubstituteSAPBuffer.append(getSubstituteTablewithData(context, mapSub,strParentId,true,strPDFViewKind));
                                    //Modified by DSM Sogeti for 2022x.02 May CW for PDF Views (Req -46172) - Ends
                                	//Modified by DSM(Sogeti)-2018x.5 for PDF Views Requirement  - Ends
                                }
                            }
                        }
                        if(bFPPTable) {
                            BOMSubstituteSAPBuffer.append("</TABLE><TR><TD><br /></TD></TR></TD></TR>");
                        }
                    }
                }
                //Modify Code Refactoring
                mlEBOM.clear();
            }
            catch (MatrixException e){
                throw new MatrixException(e);
            }
            catch (Exception e){
                throw new MatrixException(e);
            }
            finally{
                if(isPushContext){
                    ContextUtil.popContext(context);
                    isPushContext = false;
                }
            }
        }
        long endTime = new Date().getTime();
        System.out.println("Total Time has taken by the getBillOfMaterialSubstituteAndSAPBOMDataDSOGenDoc Method is-->"+(endTime-startTime));
        return BOMSubstituteSAPBuffer;
    }
    /**
     * Retrieve Notes tab information
     * @param context
     * @param args
     * @return
     * @throws Exception
     */
    private StringBuilder getNotesDSO(Context context,String strObjectId){
        long startTime = new Date().getTime();
        StringBuilder objectNotesBuffer= new StringBuilder();
        try{
            if(validateString(strObjectId)){
                MapList mlNotesAtt = EnoviaTableUtils.getNotesTableData(context, strObjectId);
                if(mlNotesAtt != null && !mlNotesAtt.isEmpty()){
                    objectNotesBuffer.append("<TR><TD><TABLE class=\"WordWrappdf\" cellspacing=\"0\" width=\"1000px\" id=\"pgFinishedProductTable\">");
                    objectNotesBuffer.append("<thead>");
                    objectNotesBuffer.append("<TR><TD class=\"new\" colspan='2'><font size='4'><b>Notes</b></font></TD></TR>");
                    objectNotesBuffer.append("<TR>");
                    objectNotesBuffer.append("<TH  width=\"150\" align=\"center\"><B>Number</B></TH>");
                    objectNotesBuffer.append("<TH  width=\"850\" align=\"center\"><B>Notes</B></TH>");
                    objectNotesBuffer.append("</TR>");
                    objectNotesBuffer.append("</thead>");
                    objectNotesBuffer.append("<tbody>");
                    int iSize = mlNotesAtt.size();
                    Map mapObject;
                    String strDescription;
                    for (int i = 0;i< iSize; i++){
                        mapObject = (Map) mlNotesAtt.get(i);
                        strDescription = (String)mapObject.get("Description");
                        objectNotesBuffer.append("<TR align=\"center\" class=\"pdf\">");
                        objectNotesBuffer.append("<TD align=\"center\" width=\"150\">"+validateString1(mapObject.get("Sequence"))+"</TD>");
                        if(UIUtil.isNotNullAndNotEmpty(strDescription)) {
                            //strDescription = pgPDFViewHelper.getNoteDescription(strDescription);
                            strDescription = checkLessThanGreaterThan(strDescription);
                        } else{
                            strDescription = DomainConstants.EMPTY_STRING;
                        }
                        objectNotesBuffer.append("<TD align=\"center\" width=\"850\">"+validateString1(strDescription)+"</TD>");
                        objectNotesBuffer.append("</TR>");
                    }
                    objectNotesBuffer.append("</tbody>");
                    objectNotesBuffer.append("</TABLE><TR><TD><br /></TD></TR></TD></TR>");
                    mlNotesAtt.clear();
                }
            }
        }
        catch (Exception e){
            logger.log(Level.WARNING, null, e);
        }
        long endTime = new Date().getTime();
        System.out.println("Total Time has taken by the getNotesDSO Method is-->"+(endTime-startTime));
        return objectNotesBuffer;
    }
    /**
     * Retrieve BOM and substitutes data information for DSO type other than FPP
     * @param context
     * @param args
     * @return
     * @throws MatrixException
     */
    //Method Modified by DSM(Sogeti)-2018.5 for PDF Views Requirements
    private  StringBuilder getBillOfMaterialSubstituteAndSAPBOMDataDSOTypes(Context context,String strObjectId,String strPDFViewKind) throws MatrixException{
        long startTime = new Date().getTime();
        //Modified by DSM(Sogeti)-2015x.4 for PDF Views (11470) - Starts
        //Modified by DSM(Sogeti)-2015x.4 for PDF View Performance improvement - Starts
        //${CLASS:pgV3SecurityUtil} objV3 = new ${CLASS:pgV3SecurityUtil}(context, null);
        //Modified by DSM(Sogeti)-2015x.4 for PDF View Performance improvement - Ends
        StringBuilder BOMSubstituteSAPBuffer=new StringBuilder();
        DomainObject dmoPart = null;
        String strPCTFIL = DomainConstants.EMPTY_STRING;
        String SAPDescription1 = DomainConstants.EMPTY_STRING;
        String strPCTFIL1 = DomainConstants.EMPTY_STRING;
        String strPCTFIL2 = DomainConstants.EMPTY_STRING;
        String strid = DomainConstants.EMPTY_STRING;
        String strpgChange = DomainConstants.EMPTY_STRING;
        String strRefDesig = DomainConstants.EMPTY_STRING;
        String strFindNumber= DomainConstants.EMPTY_STRING;
        String stridConn = DomainConstants.EMPTY_STRING;
        String strLevel = DomainConstants.EMPTY_STRING;
        String stParentId = DomainConstants.EMPTY_STRING;
        String strName = DomainConstants.EMPTY_STRING;
        String strState = DomainConstants.EMPTY_STRING;
        String strStage = DomainConstants.EMPTY_STRING;
        String strTitle = DomainConstants.EMPTY_STRING;
        String strSub = DomainConstants.EMPTY_STRING;
        String strType = DomainConstants.EMPTY_STRING;
        String strValue = DomainConstants.EMPTY_STRING;
        String strComments = DomainConstants.EMPTY_STRING;
        String strBUOM = DomainConstants.EMPTY_STRING;
        //Modified by DSM(Sogeti)-2015x.4 for PDF Views (Req - 14983) - Starts
        String strNet=DomainConstants.EMPTY_STRING;
        String strLoss =DomainConstants.EMPTY_STRING;
        String strNetWeight=DomainConstants.EMPTY_STRING;
        String strNetWeightUOM=DomainConstants.EMPTY_STRING;
        String strOptCom = DomainConstants.EMPTY_STRING;
        //Modified by DSM(Sogeti)-2015x.4 for PDF Views (Req - 14983) - Ends
        String strChkType = DomainConstants.EMPTY_STRING;
        String strProductDensity = DomainConstants.EMPTY_STRING;
        String strDensityUOM = DomainConstants.EMPTY_STRING;
        String strMax = DomainConstants.EMPTY_STRING;
        String strMin = DomainConstants.EMPTY_STRING;
        String strOnlinePrinting = DomainConstants.EMPTY_STRING;
        String strMinimum = DomainConstants.EMPTY_STRING;
        String strMaximum = DomainConstants.EMPTY_STRING;
        //Added by DSM(Sogeti)-2018x.1.1 for PDF Views Defect 24953 Starts
        String strPolicy = DomainConstants.EMPTY_STRING;
        String strCurrentState = DomainConstants.EMPTY_STRING;
        //Added by DSM(Sogeti)-2018x.3 for PDF Views Req 32593 Starts
        String strRev = DomainConstants.EMPTY_STRING;
        //Added by DSM(Sogeti)-2018x.3 for PDF Views Req 32593 Ends
        //Added by DSM(Sogeti)-2018x.1.1 for PDF Views Defect 24953 Ends
        //Added by DSM-2018x.5 for PDF Views (Req -32136) - Starts
        String strReportedFunction = DomainConstants.EMPTY_STRING;
        //Added by DSM-2018x.5 for PDF Views (Req -32136) - Starts
        StringList selectStmts = new StringList(30);
        StringList selectStmtsRel = new StringList(4);
        selectStmtsRel.add(DomainRelationship.SELECT_TO_ID );
        selectStmtsRel.add(pgV3Constants.SELECT_ATTRIBUTE_PGCHANGE);
        selectStmtsRel.add(pgV3Constants.SELECT_ATTRIBUTE_FINDNUMBER);
        selectStmtsRel.add(pgV3Constants.SELECT_ATTRIBUTE_REFERENCEDESIGNATOR);
        selectStmtsRel.add(pgV3Constants.SELECT_ATTRIBUTE_MINACTUAL_PERCENTWET);
        selectStmtsRel.add(pgV3Constants.SELECT_ATTRIBUTE_MAXACTUALPERCENTWET);
        //Modified by DSM(Sogeti)-2015x.4 for PDF Views (Req - 14983) - Starts
        selectStmtsRel.add(pgV3Constants.SELECT_ATTRIBUTE_TOTAL );
        selectStmtsRel.add(pgV3Constants.SELECT_ATTRIBUTE_LOSS);
        selectStmtsRel.add(pgV3Constants.SELECT_ATTRIBUTE_PGOPTIONALCOMPONENT);
        selectStmtsRel.add(pgV3Constants.SELECT_ATTRIBUTE_PGNETWEIGHT);
        selectStmtsRel.add(pgV3Constants.SELECT_ATTRIBUTE_PGNETWEIGHTUOM);
        //Modified by DSM(Sogeti)-2015x.4 for PDF Views (Req - 14983) - Starts
        //Modified by DSM-2018x.1 for PDF Views (Req Id #11471) - Starts
        selectStmtsRel.add(pgV3Constants.SELECT_ATTRIBUTE_PGGROSSWEIGHT);
        //Modified by DSM-2018x.6 for PDF Views (Req Id #38412) - Starts
        selectStmtsRel.add(pgPDFViewConstants.SELECT_ATTRIBUTE_PGCOMPONENTQUANTITY);
        //Modified by DSM-2018x.6 for PDF Views (Req Id #38412) - Ends
        //Modified by DSM-2018x.1 for PDF Views (Req Id #11471) - Ends
        //Added by DSM Sogeti for 2018x.6 Apr CW 2022 for PDF Views (Req -41367) - Starts
        selectStmtsRel.add(pgPDFViewConstants.SELECT_ATTRIBUTE_PGNSPCG);
        //Added by DSM Sogeti for 2018x.6 Apr CW 2022 for PDF Views (Req -41367) - Ends
        //Modified by DSM(Sogeti)-2018x.1.1for PDF Views Defect 24953
        StringList selectStmt = new StringList(12);
        selectStmt.add(DomainConstants.SELECT_NAME);
        selectStmt.add(DomainConstants.SELECT_TYPE);
        selectStmt.add(DomainConstants.SELECT_ID);
        selectStmt.add(pgV3Constants.SELECT_ATTRIBUTE_TITLE);
        selectStmt.add(DomainConstants.SELECT_CURRENT);
        //Added by DSM(Sogeti)-2018x.1.1 for PDF Views Defect 24953 Starts
        selectStmt.add(DomainConstants.SELECT_POLICY);
        //Added by DSM(Sogeti)-2018x.3 for PDF Views Req 32593 Starts
        selectStmt.add(DomainConstants.SELECT_REVISION);
        //Added by DSM(Sogeti)-2018x.3 for PDF Views Req 32593 Ends
        //Added by DSM(Sogeti)-2018x.1.1 for PDF Views Defect 24953 Ends
        //Modified for 2018x Upgrade - Stage attribute is replaced by Release Phase attribute in 18x OOTB.
        selectStmt.add(pgV3Constants.SELECT_ATTRIBUTE_RELEASE_PHASE);
        selectStmt.add(pgV3Constants.SELECT_ATTRIBUTE_PGORIGINATINGSOURCE);
        selectStmt.add(pgV3Constants.SELECT_ATTRIBUTE_PGDENSITYUOM);
        selectStmt.add(pgV3Constants.SELECT_ATTRIBUTE_PGONSHELFPRODUCTDENSITY);
        //Added by DSM-2018x.1.1 for PDF Views Numeric Attribute - Starts
        selectStmt.add(pgV3Constants.SELECT_ATTRIBUTE_PGONSHELFPRODUCTDENSITY+".inputvalue");
        //Added by DSM-2018x.1.1 for PDF Views Numeric Attribute - Ends
        //Modified by DSM-2015x.4.1 Feb downtime for PDF Views (Defect Id #15263) - Starts
        selectStmt.add("current.access[read]");
        //Modified by DSM-2015x.4.1 Feb downtime for PDF Views (Defect Id #15263) - Ends
        //Added by DSM-2018x.5 for PDF Views (Req -32136) - Starts
        selectStmt.add("from["+pgV3Constants.RELATIONSHIP_PGPDTEMPLATESTOPGPLIREPORTEDFUNCTION+"].to.name");
        //Added by DSM Sogeti for 2018x.6 Apr CW 2022 for PDF Views (Req -42293) - Starts
        selectStmt.add(pgV3Constants.SELECT_ATTRIBUTE_PGLIFECYCLESTATUS);
        selectStmt.add(pgPDFViewConstants.SELECT_ATTRIBUTE_PGMATERIALRESTRICTION);
        selectStmt.add(pgPDFViewConstants.SELECT_ATTRIBUTE_PGMATERIALRESTRICTIONCOMMENT);
        //Added by DSM Sogeti for 2018x.6 Apr CW 2022 for PDF Views (Req -42293) - Ends
        //Added by DSM(Sogeti) - for 2022x.02 May CW PDF Views Req#46172 - Starts
        selectStmt.add(pgPDFViewConstants.SELECT_ATTRIBUTE_PGRELATIONSHIPRESTRICTION);
        selectStmt.add(pgPDFViewConstants.SELECT_ATTRIBUTE_PGRELATIONSHIPRESTRICTIONCOMMENTS);
        //Added by DSM(Sogeti) - for 2022x.02 May CW PDF Views Req#46172 - Ends
        //Added by DSM-2018x.5 for PDF Views (Req -32136) - Starts
        Map mData = new HashMap();
        Map BOMPack = new HashMap();
        Map mapObject = new HashMap();
        Map mpBom = null;
        Map mpObjChg = null;
        Map mpBOMChg = null;
        Map mpParam = null;
        MapList mlObjList = null;
        Map mpObj = null;
        Map mpParamQty = null;
        Map mpBOMSubs = null;
        Map mpObjQty = null;
        Map mpBOMQty=null;
        Map settingsMap = null;
        Map columnMap = null;
        Map paramMap=null;
        Map mpBOMBUOM= null;
        Map mpObjBUOM = null;
        MapList mlSubstituteData= new MapList();
        MapList mlObjListChg = null;
        MapList mlObjListQty = null;
        MapList mlObjListBUOM = null;
        MapList mlMain = new MapList();
        MapList mlToId = null;
        boolean havingSecondLevel = false;
        String strAlternate = DomainConstants.EMPTY_STRING;
        Map mpAlternate =null;
        MapList mlObjListAlternate =null;
        Map mpObjAlternate = null;
        Map mpBOMAlternate = null;
        boolean firstBreakAllowed=false;
        boolean isPushContext = false;
        String sMatFunValue 		= DomainConstants.EMPTY_STRING;
        String strOriginatingSource = DomainConstants.EMPTY_STRING;
        String strObjId 			= DomainConstants.EMPTY_STRING;
        String strObjType 			= DomainConstants.EMPTY_STRING;
        //Modified by DSM-2018x.1 for PDF Views (Req Id #11471) - Starts
        String strGrossWeight		= DomainConstants.EMPTY_STRING;
        //Modified by DSM-2018x.6 for PDF Views (Req Id #38412) - Starts
        String strpgComponentQuantity		= DomainConstants.EMPTY_STRING;
        //Modified by DSM-2018x.6 for PDF Views (Req Id #38412) - Ends
        //Modified by DSM-2018x.1 for PDF Views (Req Id #11471) - Ends
        //Modified by DSM-2015x.4.1 Feb downtime for PDF Views (Defect Id #15263) - Starts
        String strHasAccess = DomainConstants.EMPTY_STRING;
        //Modified by DSM-2015x.4.1 Feb downtime for PDF Views (Defect Id #15263) - Ends
        //Added by DSM Sogeti for 2018x.6 Apr CW 2022 for PDF Views (Req -41367) - Starts
        String strNSPCG 			= DomainConstants.EMPTY_STRING;
        //Added by DSM Sogeti for 2018x.6 Apr CW 2022 for PDF Views (Req -41367) - Ends
        //Modified by DSM(Sogeti) - for 2015x.5 PDF Views Defect# 16396 - Starts
        DomainObject domObject = null;
        boolean hasReadAccess =  false;
        String strChg = null;
        boolean isCatiAPP = false;
        String strLayerName = DomainConstants.EMPTY_STRING;
        String strLayerGroupName = DomainConstants.EMPTY_STRING;
        StringList slSubPart = new StringList();
        //Modified by DSM(Sogeti) - for 2015x.5 PDF Views Defect# 16396 - Ends
        //Added by DSM Sogeti for 2022x.02 May CW for PDF Views (Req -46172) - Starts
      //Modified by DSM (Sogeti) for 22x.04 (Dec CW 2023) Requirement 47656,47667 - Start
        StringList typeList = new StringList(7);
      //Modified by DSM (Sogeti) for 22x.04 (Dec CW 2023) Requirement 47656,47667 - End
        typeList.add(pgV3Constants.TYPE_PGCONSUMERUNITPART);
        typeList.add(pgV3Constants.TYPE_PGCUSTOMERUNITPART);
        typeList.add(pgV3Constants.TYPE_FABRICATEDPART);
        typeList.add(pgV3Constants.TYPE_PGINNERPACKUNITPART);
        typeList.add(pgV3Constants.TYPE_INTERMEDIATE_PRODUCT_PART);
        typeList.add(pgV3Constants.TYPE_PACKAGINGASSEMBLYPART);
      
		//Added by DSM (Sogeti) for 22x.04 (Dec CW 2023) Requirement 47656,47667 - End
        boolean showRestrictionData = false;
        //Added by DSM Sogeti for 2022x.02 May CW for PDF Views (Req -46172) - Ends
       //Added by DSM (Sogeti) for 22x.04 (Dec CW 2023) Defect 55289 - Start
        Map mapStructuredATSObject = new HashMap();
        Map mapStructuredATSFormulaDetails = null;
        Map mapStructuredATSAttributeDetails = null; 
        String StrStructuredATSFormulaName = DomainConstants.EMPTY_STRING;
        String StrStructuredATSFormulaRev = DomainConstants.EMPTY_STRING;
        String strOperation = DomainConstants.EMPTY_STRING;
       
	   //Added by DSM (Sogeti) for 22x.04 (Dec CW 2023) Defect 55638 - Start
        String strSATSReplaceMinPercentWetWet = DomainConstants.EMPTY_STRING;
        String strSATSQuantity = DomainConstants.EMPTY_STRING;
        String strSATSReplaceMaxPercentWetWet = DomainConstants.EMPTY_STRING;
        String strSATSReplaceTargetWetWeight = DomainConstants.EMPTY_STRING;
        String strSATSReplaceWetWetMin = DomainConstants.EMPTY_STRING;
        String strSATSReplaceWetWetMax = DomainConstants.EMPTY_STRING;
        
        String strSATSReplaceDryWeight = DomainConstants.EMPTY_STRING;
        String strSATSReplaceTargetDryWeight = DomainConstants.EMPTY_STRING;
        String strSATSReplaceProcessingLoss = DomainConstants.EMPTY_STRING;
        
        String strSATSReplaceProcessingNote = DomainConstants.EMPTY_STRING;
        
        String strReplacedPrimaryName = DomainConstants.EMPTY_STRING;
        String strReplacedPrimaryQty = DomainConstants.EMPTY_STRING;
        
        String strSTASReplaceQty = DomainConstants.EMPTY_STRING;
        StringList slReplaceSusbQty = new StringList();
        String strReplacedSubstituteQty = DomainConstants.EMPTY_STRING;
        
        String strReplacedType = DomainConstants.EMPTY_STRING;
        String strReplacedName = DomainConstants.EMPTY_STRING;
        String strReplacedRevision = DomainConstants.EMPTY_STRING;
        String strReplacedstate = DomainConstants.EMPTY_STRING;
        String strSATSReplacedLevel = DomainConstants.EMPTY_STRING;
        Object objATSOperation = null;
        Object objSATSFormulaname = null;
        Object objSATSFormulaRev = null;
        Object objSATSReplacedPrimaryName = null;
        Object objSATSReplacedPrimaryQty = null;
        Object objSATSReplacedSubsQty = null;
        
        StringList slATSOperation = new StringList();
        StringList slSATSFormulaName = new StringList();
        StringList slSATSFormulaRev = new StringList();
        StringList slSATSReplacedPrimaryName = new StringList();
        StringList slSATSReplacedPrimaryQty = new StringList();
        StringList slSATSReplacedSubsQty = new StringList();
        int iReplacedSubQty = 0;
        
        //Added by DSM (Sogeti) for 22x.04 (Dec CW 2023) Defect 55638 - Ends

        //Added by DSM (Sogeti) for 22x.04 (Dec CW 2023) Defect 55289 - Ends
        if(null != strObjectId && !"".equals(strObjectId)){
            try{
                if(context.isAssigned(pgV3Constants.ROLE_PGCONTRACTSUPPLIER) || context.isAssigned(pgV3Constants.ROLE_PGCONTRACTMANUFACTURER)) {
                    isPushContext = true;
                    ContextUtil.pushContext(context, "User Agent", "", "");
                }
                BOMPack.put("emxExpandFilter","1" );
                BOMPack.put("ENCBOMRevisionCustomFilter", "As Stored");
                BOMPack.put("objectId", strObjectId);
                BOMPack.put("parentOID",strObjectId);
                String[] args = JPO.packArgs(BOMPack);
                //Added by DSM (Sogeti) for 22x.04 (Dec CW 2023) Defect 55289 - Start
                DomainObject dmoChkType = DomainObject.newInstance(context, strObjectId);
                strChkType = dmoChkType.getInfo(context, DomainConstants.SELECT_TYPE);
                //Added by DSM (Sogeti) for 22x.04 (Dec CW 2023) Defect 55289 - Ends
//			emxPart_mxJPO emxPart = new emxPart_mxJPO(context, args);
//			MapList mlEBOM=emxPart.getEBOMsWithRelSelectablesSB(context, args);
                //Added for PDF Refactor
                MapList mlEBOM = (MapList)pgPDFViewHelper.executeMainClassMethod(context, "emxPart", "getEBOMsWithRelSelectablesSB", args);
                dmoPart= DomainObject.newInstance(context,strObjectId);
                if(null!=mlEBOM && mlEBOM.size() > 0){
				 //Modified by DSM (Sogeti) for 22x.04 (Dec CW 2023) Defect 55289 - Start
                    //DomainObject dmoChkType = DomainObject.newInstance(context, strObjectId);
                    //strChkType = dmoChkType.getInfo(context, DomainConstants.SELECT_TYPE);
				  //Modified by DSM (Sogeti) for 22x.04 (Dec CW 2023) Defect 55289 - Ends
                    isCatiAPP = isCatia(context, strObjectId);
                   	//Added by DSM Sogeti for 2022x.02 May CW for PDF Views (Req -46172) - Starts
                    showRestrictionData = typeList.contains(strChkType);
                    //Added by DSM Sogeti for 2022x.02 May CW for PDF Views (Req -46172)  - Ends
                    if(!(pgV3Constants.TYPE_PGANCILLARYPACKAGINGMATERIALPART.equals(strChkType)) || pgV3Constants.TYPE_PGMASTERPACKAGINGMATERIALPART.equals(strChkType) || pgV3Constants.TYPE_PACKAGINGMATERIALPART.equals(strChkType) || pgV3Constants.TYPE_PGONLINEPRINTINGPART.equals(strChkType)){
                        for (Iterator iterator = mlEBOM.iterator(); iterator.hasNext();){
                            mapObject = (Map) iterator.next();
                            stridConn = (String)mapObject.get("id[connection]");
                            strLevel = (String)mapObject.get(DomainConstants.SELECT_LEVEL);
                            stParentId = (String)mapObject.get("id");
                            String[] relargs = new String[1];
                            relargs[0] = stridConn;
                            mlToId = new MapList();
                            mlToId = (MapList)DomainRelationship.getInfo(context, relargs,selectStmtsRel);
                            mlToId.addSortKey(pgV3Constants.SELECT_ATTRIBUTE_FINDNUMBER, "ascending", "String");
                            mlToId.sort();
                            if(null != mlToId && mlToId.size()>0){
                                for(int i=0;i<mlToId.size();i++){
                                    mData = (Map)mlToId.get(i);
                                    strid = (String)mData.get(DomainRelationship.SELECT_TO_ID );
                                    strpgChange = (String)mData.get(pgV3Constants.SELECT_ATTRIBUTE_PGCHANGE);
                                    strRefDesig = (String)mData.get(pgV3Constants.SELECT_ATTRIBUTE_REFERENCEDESIGNATOR);
                                    strFindNumber = (String)mData.get(pgV3Constants.SELECT_ATTRIBUTE_FINDNUMBER);
                                    //Modified by DSM(Sogeti)-2015x.4 for PDF Views (Req - 14983) - Starts
                                    strNet =(String)mData.get(pgV3Constants.SELECT_ATTRIBUTE_TOTAL);
                                    strLoss =(String)mData.get(pgV3Constants.SELECT_ATTRIBUTE_LOSS);
                                    strOptCom = (String)mData.get(pgV3Constants.SELECT_ATTRIBUTE_PGOPTIONALCOMPONENT);
                                    strNetWeight = (String)mData.get(pgV3Constants.SELECT_ATTRIBUTE_PGNETWEIGHT);
                                    strNetWeightUOM = (String)mData.get(pgV3Constants.SELECT_ATTRIBUTE_PGNETWEIGHTUOM);
                                    //Modified by DSM(Sogeti)-2015x.4 for PDF Views (Req - 14983) - Ends
                                    strMinimum = (String)mData.get(pgV3Constants.SELECT_ATTRIBUTE_MINACTUAL_PERCENTWET);
                                    strMaximum = (String)mData.get(pgV3Constants.SELECT_ATTRIBUTE_MAXACTUALPERCENTWET);
                                    //Modified by DSM-2018x.1 for PDF Views (Req Id #11471) - Starts
                                    strGrossWeight=(String)mData.get(pgV3Constants.SELECT_ATTRIBUTE_PGGROSSWEIGHT);
                                    //Modified by DSM-2018x.6 for PDF Views (Req Id #38412) - Starts
                                    strpgComponentQuantity=(String)mData.get(pgPDFViewConstants.SELECT_ATTRIBUTE_PGCOMPONENTQUANTITY);
                                    //Modified by DSM-2018x.6 for PDF Views (Req Id #38412) - Ends
                                    //Modified by DSM-2018x.1 for PDF Views (Req Id #11471) - Ends
                                    strNSPCG = (String)mData.get(pgPDFViewConstants.SELECT_ATTRIBUTE_PGNSPCG);
                                }
                            }
                            DomainObject dmoBom = DomainObject.newInstance(context, strid);
                            mpBom = new HashMap();
                            //Modified by DSM(Sogeti) - for 2015x.5 PDF Views Defect# 16396 - Starts
                            ContextUtil.pushContext(context);
                            mpBom = dmoBom.getInfo(context, selectStmt);
                            ContextUtil.popContext(context);
                            //Modified by DSM(Sogeti) - for 2015x.5 PDF Views Defect# 16396 - Ends
                            mpBom.put("attribute[pgChange]", strpgChange);
                            mpBom.put("attribute[Find Number]", strFindNumber);
                            mpBom.put("id[connection]", stridConn);
                            mpBom.put(DomainConstants.SELECT_LEVEL, strLevel);
                            mpBom.put("ParentId", stParentId);
                            mpBom.put("RefDesig", strRefDesig);
                            //Modified by DSM(Sogeti)-2015x.4 for PDF Views (Req - 14983) - Starts
                            mpBom.put(pgV3Constants.SELECT_ATTRIBUTE_TOTAL, strNet);
                            mpBom.put(pgV3Constants.SELECT_ATTRIBUTE_LOSS, strLoss);
                            mpBom.put("OptComp", strOptCom);
                            mpBom.put("NetWeight", strNetWeight);
                            mpBom.put("NetWeightUOM", strNetWeightUOM);
                            //Modified by DSM(Sogeti)-2015x.4 for PDF Views (Req - 14983) - Starts
                            mpBom.put("strMaximum", strMaximum);
                            mpBom.put("strMinimum", strMinimum);
                            //Modified by DSM(Sogeti)-2018x.1.1 for PDF Views Defect 26216  - Starts
                            mpBom.put(pgV3Constants.SELECT_ATTRIBUTE_PGGROSSWEIGHT,strGrossWeight);
                            //Modified by DSM-2018x.6 for PDF Views (Req Id #38412) - Starts
                            mpBom.put(pgPDFViewConstants.SELECT_ATTRIBUTE_PGCOMPONENTQUANTITY,strpgComponentQuantity);
                            //Modified by DSM-2018x.6 for PDF Views (Req Id #38412) - Ends
                            //Modified by DSM(Sogeti)-2018x.1.1 for PDF Views Defect 26216  - End
                            //Added by DSM Sogeti for 2018x.6 Apr CW 2022 for PDF Views (Req -41367) - Starts
                            mpBom.put(pgPDFViewConstants.SELECT_ATTRIBUTE_PGNSPCG, strNSPCG);
                            //Added by DSM Sogeti for 2018x.6 Apr CW 2022 for PDF Views (Req -41367) - Ends
                            mlMain.add(mpBom);
                        }
                        mlMain.addSortKey("attribute[Find Number]", "ascending", "integer");
                        mlMain.sort();
                    }
                }
                
             
              //Added by DSM (Sogeti) for 22x.04 (Dec CW 2023) Defect 55638 - Starts
                MapList mlATSEBOMandSubsData = new MapList();
                mlATSEBOMandSubsData = getATSBOMandSubstituteData(context, strChkType, strObjectId);
                
                if(null!=mlATSEBOMandSubsData && mlATSEBOMandSubsData.size() > 0){
                	mlMain.addAll(mlATSEBOMandSubsData);
                }
                
              
              //Added by DSM (Sogeti) for 22x.04 (Dec CW 2023) Defect 55638 - Starts
              
               //Added by DSM (Sogeti) for 22x.04 (Dec CW 2023) Requirement 47656,47667 - End	
                if(null!=mlMain && mlMain.size() > 0){
                    BOMSubstituteSAPBuffer.append("<TR><TD><TABLE class=\"WordWrappdf\" cellspacing=\"0\" width=\"1000px\" id=\"BOM\">");
                    BOMSubstituteSAPBuffer.append("<thead>");
                    BOMSubstituteSAPBuffer.append("<TR><TD class=\"new\" colspan='20'><B><font size ='4'>Bill of Materials </font></B></TD></TR>");
                    //Added by DSM Sogeti for 2018x.6 Apr CW 2022 for PDF Views (Req -42293) - Starts
                    if(pgV3Constants.TYPE_ASSEMBLEDPRODUCTPART.equals(strChkType) || pgV3Constants.TYPE_DEVICEPRODUCTPART.equals(strChkType)) {
                        BOMSubstituteSAPBuffer.append("<TR><TH align=\"center\" width=\"120\"><B>Type(T)</B><BR></BR><B>Name(N)</B><BR></BR><B>Rev(R)</B></TH>");
                        BOMSubstituteSAPBuffer.append("<TH align=\"center\" width=\"70\"><B>Chg(C)</B><BR></BR><B>F/N(F)</B></TH>");
                        BOMSubstituteSAPBuffer.append("<TH align=\"center\"  width=\"120\"><B>Title</B></TH>");
                    //Added by DSM (Sogeti) for 22x.04 (Dec CW 2023) Requirement 47656,47667 - Start
                    }else if(pgV3Constants.TYPE_STRUCTURED_ATS.equals(strChkType))
					{
						BOMSubstituteSAPBuffer.append("<TR><TH align=\"center\" width=\"120\"><B>Name(N)</B><BR></BR><B>Type(T)</B><BR></BR><B>Rev(R)</B><BR></BR><B>State(S)</B></TH>");
						BOMSubstituteSAPBuffer.append("<TH align=\"center\" width=\"70\"><B>Title</B></TH>");
						BOMSubstituteSAPBuffer.append("<TH align=\"center\"  width=\"120\"><B>Operation</B></TH>");
					//Added by DSM (Sogeti) for 22x.04 (Dec CW 2023) Requirement 47656,47667 - End
					}	
					else {
                        //Modified by DSM(Sogeti)-2018x.3 for PDF Views Req 32593 Starts
                        BOMSubstituteSAPBuffer.append("<TR><TH align=\"center\" width=\"100\"><B>Name(N)</B><BR></BR><B>Rev(R)</B></TH>");
                        //Modified by DSM(Sogeti)-2018x.3 for PDF Views Req 32593 Ends
                        //Added by DSM Sogeti for 2022x.02 May CW for PDF Views (Req -46172) - Starts
                		if(showRestrictionData && pgV3Constants.PDFVIEW_ALLINFO.equalsIgnoreCase(strPDFViewKind)){
                			BOMSubstituteSAPBuffer.append("<TH align=\"center\" width=\"70\"><B> Chg</B><BR></BR><B>(C)</B><BR></BR><B>F/N(</B><BR></BR><B>F)</B></TH>");			
                		}
                		else
                		{
                			BOMSubstituteSAPBuffer.append("<TH align=\"center\" width=\"70\"><B> Chg</B></TH>");
                			BOMSubstituteSAPBuffer.append("<TH align=\"center\" width=\"70\"><B>F/N</B></TH>");
                		}	
                		//Added by DSM Sogeti for 2022x.02 May CW for PDF Views (Req -46172) - Ends
                        BOMSubstituteSAPBuffer.append("<TH align=\"center\"  width=\"120\"><B>Title</B></TH>");
                        BOMSubstituteSAPBuffer.append("<TH align=\"center\" width=\"150\"><B>Type</B></TH>");
                    } //Added by DSM Sogeti for 2018x.6 Apr CW 2022 for PDF Views (Req -42293) - Ends
                    //Added by DSM-2018x.5 for PDF Views (Req -32025) - Starts
                    if(isCatiAPP){
                        //Added by DSM-2018x.5 for PDF Views (Req -32025) - Ends
                        BOMSubstituteSAPBuffer.append("<TH align=\"center\" width=\"70\"><B>Substitute Parts(SP)<BR></BR>Alternate(Alt)<BR></BR>Layer Name(LN)</B></TH>");
                    }
                  //Added by DSM (Sogeti) for 22x.04 (Dec CW 2023) Requirement 47656,47667 - Start
                    else if(pgV3Constants.TYPE_STRUCTURED_ATS.equals(strChkType)){
						BOMSubstituteSAPBuffer.append("<TH align=\"center\"  width=\"120\"><B>Primary Part</B></TH>");
					}
                  //Added by DSM (Sogeti) for 22x.04 (Dec CW 2023) Requirement 47656,47667 - End
                    else{
                        BOMSubstituteSAPBuffer.append("<TH align=\"center\" width=\"100\"><B>Substitute Parts(SP)<BR></BR>Alternate(Alt)</B></TH>");
                    }
                    if (pgV3Constants.TYPE_INTERMEDIATE_PRODUCT_PART.equals(strChkType) || pgV3Constants.TYPE_FABRICATEDPART.equals(strChkType) || pgV3Constants.TYPE_ASSEMBLEDPRODUCTPART.equals(strChkType) || pgV3Constants.TYPE_DEVICEPRODUCTPART.equals(strChkType))
                    {
                        //Modified by DSM(Sogeti)-2015x.4 for PDF Views (Req -14983)-Starts
                        // Modified by DSM-2018x.5 for PDF Views (Req Id #32662) : Starts
                        if(pgV3Constants.TYPE_FABRICATEDPART.equals(strChkType)){
                            BOMSubstituteSAPBuffer.append("<TH width=\"100px\" align=\"center\"><B>Quantity(Qty)<BR></BR>Base UofM(UoM)</B></TH>");
                            // Modified by DSM-2018x.5 for PDF Views (Req Id #33106) : Starts
                        }else if(pgV3Constants.TYPE_INTERMEDIATE_PRODUCT_PART.equals(strChkType)){
                            BOMSubstituteSAPBuffer.append("<TH width=\"100px\" align=\"center\"><B>Qty<BR></BR>(Qty)<BR></BR>Base Unit of Measure<BR></BR>(BUoM)</B></TH>");
                            // Modified by DSM-2018x.5 for PDF Views (Req Id #33106) : Starts
                        } else{
                            BOMSubstituteSAPBuffer.append("<TH width=\"100px\" align=\"center\"><B>Mininum(Min)<BR></BR> Quantity(Qty)<BR></BR>Maximum(Max)<BR></BR>Base UoM(UoM)</B></TH>");
                        }
                        // Modified by DSM-2018x.5 for PDF Views (Req Id #32662) : End
                        //Modified by DSM(Sogeti)-2018x.1 for PDF Views (Req -11471)-Starts
                        //Modified by DSM(Sogeti)-2018x.2 for PDF Views (Req FAB - 7554,7555) - Starts
                        //Modified by DSM-2018x.5 for PDF Views (Req Id #32662) : Starts
                        //Modified by DSM-2018x.6 for PDF Views (Req Id #38412) - Starts
                        if(pgV3Constants.TYPE_DEVICEPRODUCTPART.equals(strChkType) )
                        //Modified by DSM-2018x.5 for PDF Views (Req Id #32662) : End
                        {
                            //Modified by DSM(Sogeti)-2018x.2 for PDF Views (Req FAB - 7554,7555) - Ends
                            //Commented/Modified by DSM(Sogeti)-2018x.1 for PDF Views (Req Id #25368) - Starts
                            //BOMSubstituteSAPBuffer.append("<TH width=\"100px\" align=\"left\"><B>Net(N)<BR></BR>Loss(L)<BR></BR>Gross Weight (GW)<BR></BR>Net<BR></BR>Weight(NW)<BR></BR>Weight <BR></BR>UoM(UoM)</B></TH>");
                            BOMSubstituteSAPBuffer.append("<TH width=\"100px\" align=\"left\"><B>Net(N)<BR></BR>Loss(L)<BR></BR>Net Weight(NW)<BR></BR>Weight  UoM(UoM)</B></TH>");
                            //Commented/Modified  by DSM(Sogeti)-2018x.1 for PDF Views (Req Id #25368) - Ends
                            //Modified by DSM-2018x.5 for PDF Views (Req Id #32662) : Starts
                        } else if (pgV3Constants.TYPE_ASSEMBLEDPRODUCTPART.equals(strChkType)) {
                            BOMSubstituteSAPBuffer.append("<TH width=\"100px\" align=\"left\"><B>Net(N)<BR></BR>Loss(L)<BR></BR>Component Count (CC)<BR/>Net Weight(NW)</B></TH>");
                            //Modified by DSM-2018x.6 for PDF Views (Req Id #38412) - Ends
                        }else if(pgV3Constants.TYPE_FABRICATEDPART.equals(strChkType)){
                            BOMSubstituteSAPBuffer.append("<TH width=\"100px\" align=\"left\"><B>Loss(L)<BR></BR>Net(N)<BR></BR>Net Weight(NW)<BR></BR>Weight  UoM(UoM)</B></TH>");
                            //Modified by DSM-2018x.5 for PDF Views (Req Id #32662) : End
                            // Modified by DSM-2018x.5 for PDF Views (Req Id #33106) : Starts
                        }else if(pgV3Constants.TYPE_INTERMEDIATE_PRODUCT_PART.equals(strChkType)){
                            BOMSubstituteSAPBuffer.append("<TH width=\"100px\" align=\"left\"><B>Net(N)<BR></BR>Loss(L)<BR></BR>Net<BR></BR>Weight(NW)<BR></BR>Weight Unit<BR></BR>Of Measure<BR></BR>(WUoM)</B></TH>");
                            // Modified by DSM-2018x.5 for PDF Views (Req Id #33106) : End
                        }
                        else
                        {
                            BOMSubstituteSAPBuffer.append("<TH width=\"100px\" align=\"left\"><B>Net(N)<BR></BR>Loss(L)<BR></BR>Gross Weight(GW)<BR></BR>Net<BR></BR>Weight(NW)<BR></BR>Weight <BR></BR>UoM(UoM)</B></TH>");
                        }

                        //Modified by DSM(Sogeti)-2018x.1 for PDF Views (Req -11471)-Ends
                        //Modified by DSM(Sogeti)-2015x.4 for PDF Views (Req -14983)-Ends
                    }
                    else if (pgV3Constants.TYPE_MASTERPRODUCTPART.equals(strChkType)){
                        BOMSubstituteSAPBuffer.append("<TH width=\"180px\" align=\"center\"><B>Quantity(Qty)<BR></BR>Base UofM(UoM)</B></TH>");
                    }
                  //Added by DSM (Sogeti) for 22x.04 (Dec CW 2023) Requirement 47656,47667 - Start
                    else if(pgV3Constants.TYPE_STRUCTURED_ATS.equals(strChkType)){
						BOMSubstituteSAPBuffer.append("<TH align=\"center\"  width=\"120\"><B>Primary Qty</B></TH>");	
						BOMSubstituteSAPBuffer.append("<TH align=\"center\"  width=\"120\"><B>Substitute Qty</B></TH>");	
					}
                  //Added by DSM (Sogeti) for 22x.04 (Dec CW 2023) Requirement 47656,47667 - End
                    else{
                        BOMSubstituteSAPBuffer.append("<TH align=\"center\" width=\"70\"><B>Qty</B></TH>");
                    }
                  //Modified by DSM (Sogeti) for 22x.04 (Dec CW 2023) Requirement 47656,47667 - Start
                    if(!(pgV3Constants.TYPE_INTERMEDIATE_PRODUCT_PART.equals(strChkType) || pgV3Constants.TYPE_FABRICATEDPART.equals(strChkType) || pgV3Constants.TYPE_ASSEMBLEDPRODUCTPART.equals(strChkType) || pgV3Constants.TYPE_DEVICEPRODUCTPART.equals(strChkType) || pgV3Constants.TYPE_MASTERPRODUCTPART.equals(strChkType) || pgV3Constants.TYPE_STRUCTURED_ATS.equals(strChkType))){
                  //Modified by DSM (Sogeti) for 22x.04 (Dec CW 2023) Requirement 47656,47667 - End      
                    	BOMSubstituteSAPBuffer.append("<TH align=\"center\" width=\"70\"><B>Base<BR></BR>Unit of<BR></BR>Measure</B></TH>");
                    }
                  //Added by DSM (Sogeti) for 22x.04 (Dec CW 2023) Requirement 47656,47667 - Start
					if(pgV3Constants.TYPE_STRUCTURED_ATS.equals(strChkType))
					{
						 BOMSubstituteSAPBuffer.append("<TH align=\"center\"  width=\"120\"><B>Min % (w/w)(Min)<br/>Quantity/Wet% <br/>Max % (w/w)(Max) </B></TH>");
						 BOMSubstituteSAPBuffer.append("<TH align=\"center\"  width=\"120\"><B>Target Wet Weight (TWW)<br/>Wet Weight Min (WEM)<br/>Wet Weight Max(WWM)</B></TH>");
						 BOMSubstituteSAPBuffer.append("<TH align=\"center\"  width=\"120\"><B>Dry % (w/w) (Dry)<br/>Target Dry Weight (TWD)<br/>Processing Loss % (PL)</B></TH>");
					}
				 //Added by DSM (Sogeti) for 22x.04 (Dec CW 2023) Requirement 47656,47667 - End
                    //Modified by DSM(Sogeti)-2018x.1 for PDF Views (Defect - 25084) - Starts

                    //Modified by DSM(Sogeti)-2018x.1 for PDF Views (Defect - 25084) - Ends
                    //Added by DSM-2018x.5 for PDF Views (Req -32136) - Starts
                    //if(pgV3Constants.TYPE_DEVICEPRODUCTPART.equals(strChkType) && "GenDoc".equalsIgnoreCase(strPDFViewKind.trim()))
                    //Added by DSM-2018x.5 for PDF Views (Req -32136) - Ends
                    //{
                    //	BOMSubstituteSAPBuffer.append("<TH align=\"center\" width=\"80\"><B>Material <BR></BR>Function</B></TH>");
                    //Modified by DSM(Sogeti)-2018x.2 for PDF Views (Req FAB - 7554,7555) - Starts
                    // Modified by DSM-2018x.5 for PDF Views (Req Id #32662) : Starts
                    //}
                    if(pgV3Constants.TYPE_FABRICATEDPART.equals(strChkType)) {
                        BOMSubstituteSAPBuffer.append("<TH width=\"75px\" align=\"center\"><b>Function</b></TH>");
                        // Modified by DSM-2018x.5 for PDF Views (Req Id #32662) : End
                        //Added by DSM-2018x.5 for PDF Views (Req -32136) - Starts
                    }else if(pgV3Constants.TYPE_INTERMEDIATE_PRODUCT_PART.equals(strChkType)) {
                        BOMSubstituteSAPBuffer.append("<TH width=\"75px\" align=\"center\"><b>Function</b></TH>");
                        BOMSubstituteSAPBuffer.append("<TH width=\"75px\" align=\"center\"><b>Reported<BR></BR>Function</b></TH>");
                        //Added by DSM-2018x.5 for PDF Views (Req -32136) - Ends
                        //Modified by DSM-2018x.6 for PDF Views (Req Id #38412) - Starts
                    } else if( pgV3Constants.TYPE_DEVICEPRODUCTPART.equals(strChkType)) {
                        BOMSubstituteSAPBuffer.append("<TH width=\"75px\" align=\"center\"><b>Function(F)<BR></BR>Reported<BR></BR>Function(RF)</b></TH>");
                    } else if((pgV3Constants.TYPE_ASSEMBLEDPRODUCTPART.equals(strChkType) && !isCatiAPP)) {
                        BOMSubstituteSAPBuffer.append("<TH width=\"75px\" align=\"center\"><b>Weight  UoM(UoM)<BR/>Function(F)<BR></BR>Reported<BR></BR>Function(RF)</b></TH>");
                    } else if(isCatiAPP) {
                        BOMSubstituteSAPBuffer.append("<TH width=\"75px\" align=\"center\"><b>Weight  UoM(UoM)<BR/>Reported<BR></BR>Function(RF)<BR></BR>Layer<BR></BR>Group(LG)</b></TH>");
                        //Modified by DSM-2018x.6 for PDF Views (Req Id #38412) - Ends
                        //Added by DSM Sogeti for 2018x.6 Apr CW 2022 for PDF Views (Req -42293) - Starts
                        //Modified by DSM-2022x.2 for PDF Views (Req:46173,46174) : Starts
                        if( pgV3Constants.PDFVIEW_GENDOC.equalsIgnoreCase(strPDFViewKind)) {
                        BOMSubstituteSAPBuffer.append("<TH align=\"center\" width=\"95\"><B>Manufacturing<BR></BR>Status</B></TH>");
                        }
                        else {
                        	BOMSubstituteSAPBuffer.append("<TH align=\"center\" width=\"95\"><B>Manufacturing<BR></BR>Status(MS)<BR></BR>Relationship<BR></BR>Restriction(RR)</B></TH>");
                            BOMSubstituteSAPBuffer.append("<TH align=\"center\" width=\"95\"><B>Relationship<BR></BR>Restriction<BR></BR>Comment</B></TH>");
                        	
                        }
                        //Modified by DSM-2022x.2 for PDF Views (Req:46173,46174) : Ends               
                        //Added by DSM Sogeti for 2018x.6 Apr CW 2022 for PDF Views (Req -42293) - Ends
                    }
                    //Added by DSM Sogeti for 2018x.6 Apr CW 2022 for PDF Views (Req -41367) - Starts
                    if(pgV3Constants.PDFVIEW_ALLINFO.equalsIgnoreCase(strPDFViewKind) && (pgV3Constants.TYPE_PGCUSTOMERUNITPART.equals(strChkType) || pgV3Constants.TYPE_PGCONSUMERUNITPART.equals(strChkType) || pgV3Constants.TYPE_PACKAGINGASSEMBLYPART.equals(strChkType) || pgV3Constants.TYPE_FABRICATEDPART.equals(strChkType) || (pgV3Constants.TYPE_PGINNERPACKUNITPART.equals(strChkType)))) {
                        BOMSubstituteSAPBuffer.append("<TH align=\"center\" width=\"75px\"><B>NSPCG</B></TH>");
                    }
                    //Added by DSM Sogeti for 2018x.6 Apr CW 2022 for PDF Views (Req -41367) - Ends
                    //Modified by DSM -2018x.5 for PDF Views 32025 - Starts
                    //Added by DSM(Sogeti)-2018x.2 for PDF Views (Req FAB - 7554,7555) - Ends
                    // Modified by DSM-2018x.5 for PDF Views (Def Id #32662 , 33106) : Starts
                    if( pgV3Constants.TYPE_PGCUSTOMERUNITPART.equals(strChkType) ||pgV3Constants.TYPE_FABRICATEDPART.equals(strChkType) || (pgV3Constants.TYPE_INTERMEDIATE_PRODUCT_PART.equals(strChkType))) {
                        BOMSubstituteSAPBuffer.append("<TH align=\"center\" width=\"120\"><B>EBOM <BR></BR> Comments</B></TH>");
                    }
                  //Added by DSM (Sogeti) for 22x.04 (Dec CW 2023) Requirement 47656,47667 - Start
                    else if(pgV3Constants.TYPE_STRUCTURED_ATS.equals(strChkType)){
						BOMSubstituteSAPBuffer.append("<TH align=\"center\"  width=\"120\"><B>Processing Note</B></TH>");
					}
                  //Added by DSM (Sogeti) for 22x.04 (Dec CW 2023) Requirement 47656,47667 - End
                    else {
                        //Modified by DSM -2018x.5 for PDF Views 32025 - Ends
                        //Modified by DSM-2018x.5 for PDF Views (Def Id #32662 , 33106) : Ends
                        //Added by DSM(Sogeti)-2018x.2 for PDF Views (Req FAB - 7554,7555) - Ends
                        BOMSubstituteSAPBuffer.append("<TH align=\"center\" width=\"120\"><B>EBOM <BR></BR> Comments</B></TH>");
                    }
                    if(pgV3Constants.TYPE_MASTERPRODUCTPART.equals(strChkType)){
                        BOMSubstituteSAPBuffer.append("<TH align=\"center\" width=\"65\"><B>State</B></TH>");
                    }
                    // Modified by DSM-2018x.5 for PDF Views (Req Id #32662 , 33106) : End
                    if (pgV3Constants.TYPE_INTERMEDIATE_PRODUCT_PART.equals(strChkType) || pgV3Constants.TYPE_FABRICATEDPART.equals(strChkType) || pgV3Constants.TYPE_ASSEMBLEDPRODUCTPART.equals(strChkType) || pgV3Constants.TYPE_DEVICEPRODUCTPART.equals(strChkType) ){
                        //Modified by DSM(Sogeti)-2018x.1 for PDF Views (Defect - 25084) - Starts
                        if (UIUtil.isNotNullAndNotEmpty(strPDFViewKind) && !"GenDoc".equalsIgnoreCase(strPDFViewKind.trim())){
                            //Added by DSM(Sogeti)-2018x.2 for PDF Views Requirements - Starts
                            //BOMSubstituteSAPBuffer.append("<TH align=\"center\" width=\"150\"><B>Phase (Pha)<BR></BR>State(St)</B></TH>");
                            if((pgV3Constants.TYPE_DEVICEPRODUCTPART.equals(strChkType) || pgV3Constants.TYPE_ASSEMBLEDPRODUCTPART.equals(strChkType)) && "allinfo".equalsIgnoreCase(strPDFViewKind.trim())) {
                                BOMSubstituteSAPBuffer.append("<TH align=\"center\" width=\"150\"><B>Certifications(C) <BR></BR> Phase (Pha)<BR></BR>State(St)</B></TH>");
                            }else {
                                BOMSubstituteSAPBuffer.append("<TH align=\"center\" width=\"150\"><B>Phase (Pha)<BR></BR>State(St)</B></TH>");
                            }
                            //Added by DSM(Sogeti)-2018x.2 for PDF Views Requirements - Ends
                        } else {
                            //Added by DSM(Sogeti)-2018x.2 for PDF Views Requirements - Starts
                            //BOMSubstituteSAPBuffer.append("<TH align=\"center\" width=\"150\"><B>Phase (Pha)</B></TH>");
                            if(pgV3Constants.TYPE_DEVICEPRODUCTPART.equals(strChkType) || pgV3Constants.TYPE_ASSEMBLEDPRODUCTPART.equals(strChkType)) {
                                //Modified by DSM ( Sogeti) for 2018x.5 PDF Defect - 34749 : Starts
                                BOMSubstituteSAPBuffer.append("<TH align=\"center\" width=\"150\"><B>Certifications(C) <BR></BR> Phase (Pha)<BR></BR>State(St)</B></TH>");
                                //Modified by DSM ( Sogeti) for 2018x.5 PDF Defect - 34749 : Ends
                            }else {
                                // Modified by DSM-2018x.5 for PDF Views (Req Id #33106) : Starts
                                if(pgV3Constants.TYPE_INTERMEDIATE_PRODUCT_PART.equals(strChkType) || pgV3Constants.TYPE_FABRICATEDPART.equals(strChkType)){
                                    BOMSubstituteSAPBuffer.append("<TH align=\"center\" width=\"150\"><B>Phase (Pha)<BR></BR>State(St)</B></TH>");
                                }else{
                                    BOMSubstituteSAPBuffer.append("<TH align=\"center\" width=\"150\"><B>Phase (Pha)</B></TH>");
                                }
                                // Modified by DSM-2018x.5 for PDF Views (Req Id #33106) : End
                            }
                            //Added by DSM(Sogeti)-2018x.2 for PDF Views Requirements - Ends
                        }
                        //Modified by DSM(Sogeti)-2018x.1 for PDF Views (Defect - 25084) - Ends
                    }
                    else if ((pgV3Constants.TYPE_MASTERPRODUCTPART.equals(strChkType))){
                        BOMSubstituteSAPBuffer.append("<TH align=\"center\" width=\"70\"><B>Phase</B></TH>");
                    }
                  //Added by DSM (Sogeti) for 22x.04 (Dec CW 2023) Requirement 47656,47667 - Start
                    else if(pgV3Constants.TYPE_STRUCTURED_ATS.equals(strChkType)){
						BOMSubstituteSAPBuffer.append("<TH align=\"center\"  width=\"120\"><B>Context Formula Name<br/>Rev(R)</B></TH>");
                    }
                  //Added by DSM (Sogeti) for 22x.04 (Dec CW 2023) Requirement 47656,47667 - End
                    else{
                        //Modified by DSM(Sogeti)-2018x.1 for PDF Views (Defect - 25084) - Starts
                        if (UIUtil.isNotNullAndNotEmpty(strPDFViewKind) && ("GenDoc".equalsIgnoreCase(strPDFViewKind.trim()) || "allinfo".equalsIgnoreCase(strPDFViewKind.trim()))){
                            //Added/Modified by DSM(Sogeti)-2018x.5 for PDF Views Requirement and Defect 34398- Starts
                            if("GenDoc".equalsIgnoreCase(strPDFViewKind.trim()) && (pgV3Constants.TYPE_PGMASTERINNERPACKUNITPART.equals(strChkType) || pgV3Constants.TYPE_PGMASTERCUSTOMERUNITPART.equals(strChkType))) {
                                BOMSubstituteSAPBuffer.append("<TH align=\"center\" width=\"150\"><B>Phase</B></TH>");
                            }else {
                                //Added/Modified by DSM(Sogeti)-2018x.5 for PDF Views Requirement and Defect 34398  - Ends
                                BOMSubstituteSAPBuffer.append("<TH align=\"center\" width=\"150\"><B>State</B></TH>");
                                BOMSubstituteSAPBuffer.append("<TH align=\"center\" width=\"150\"><B>Phase</B></TH>");
                            }
                        } else {
                            //Added by DSM(Sogeti)-2018x.5 for PDF Views Requirement  - Starts
                            if (UIUtil.isNotNullAndNotEmpty(strPDFViewKind) && ("supplier".equalsIgnoreCase(strPDFViewKind.trim()) && pgV3Constants.TYPE_PACKAGINGASSEMBLYPART.equals(strChkType))){
                                BOMSubstituteSAPBuffer.append("<TH align=\"center\" width=\"150\"><B>State</B></TH>");
                            }
                            //Added by DSM(Sogeti)-2018x.5 for PDF Views Requirement  - Ends
                            BOMSubstituteSAPBuffer.append("<TH align=\"center\" width=\"150\"><B>Phase</B></TH>");
                        }
                        //Modified by DSM(Sogeti)-2018x.1 for PDF Views (Defect - 25084) - Ends
                    }
                    //Modified by DSM(Sogeti)-2015x.4 for PDF Views (Req -14983,5694,11471,11425) - Starts
                    //Added by DSM Sogeti for 2022x.02 May CW for PDF Views (Req -46172) - Starts
                    if((pgV3Constants.TYPE_ASSEMBLEDPRODUCTPART.equals(strChkType) && !isCatiAPP) || (pgV3Constants.TYPE_DEVICEPRODUCTPART.equals(strChkType) && !"GenDoc".equalsIgnoreCase(strPDFViewKind.trim()))){
                    	// Modified by DSM-2018x.5 for PDF Views (Req Id #32662) : Starts
                    	BOMSubstituteSAPBuffer.append("<TH align=\"center\" width=\"90\"><B>Ref Des</B></TH>");
                    	// Modified by DSM-2018x.5 for PDF Views (Req Id #32662) : End
                    	//Added by DSM Sogeti for 2022x.02 May CW for PDF Views (Req -46172) - Ends
                    } else if (pgV3Constants.TYPE_ASSEMBLEDPRODUCTPART.equals(strChkType) && isCatiAPP) {
                        BOMSubstituteSAPBuffer.append("<TH align=\"center\" width=\"90\"><B>Ref Des(RD)<BR></BR>Material<BR></BR>Function(MF)</B></TH>");
                    }
                    //Modified by DSM(Sogeti)-2015x.4 for PDF Views (Req-14983,5694) - Starts
                    else if((pgV3Constants.TYPE_DEVICEPRODUCTPART.equals(strChkType) && !"GenDoc".equalsIgnoreCase(strPDFViewKind.trim()))){
                        BOMSubstituteSAPBuffer.append("");
                        //Added by DSM-2018x.5 for PDF Views (Req -33106) - Starts
                        //Added by DSM-2018x.5 for PDF Views (Req -32136) - Starts
                    }else if((pgV3Constants.TYPE_INTERMEDIATE_PRODUCT_PART.equals(strChkType))){
                        BOMSubstituteSAPBuffer.append("<TH align=\"center\" width=\"90\"><B>Ref Des</B></TH>");
                        //Added by DSM-2018x.5 for PDF Views (Req -32136) - Ends
                    }
                    //Added by DSM-2018x.5 for PDF Views (Req -33106) - End
                    //Modified by DSM(Sogeti)-2015x.4 for PDF Views (Req-5696,5711,5692,5693) - Starts
                    //Added by DSM Sogeti for 2022x.02 May CW for PDF Views (Req -46172) - Starts
                  //Modified by DSM (Sogeti) for 22x.04 (Dec CW 2023) Requirement 47656,47667 - Start
                    else if (!((pgV3Constants.TYPE_PACKAGINGASSEMBLYPART.equals(strChkType))||
                            pgV3Constants.TYPE_PGCONSUMERUNITPART.equals(strChkType) ||
                            pgV3Constants.TYPE_PGCUSTOMERUNITPART.equals(strChkType) ||
                            pgV3Constants.TYPE_FINISHEDPRODUCTPART.equals(strChkType) ||
                            pgV3Constants.TYPE_PGINNERPACKUNITPART.equals(strChkType) ||
                            pgV3Constants.TYPE_PGTRANSPORTUNITPART.equals(strChkType) || pgV3Constants.TYPE_PGMASTERCONSUMERUNITPART.equals(strChkType) || pgV3Constants.TYPE_FABRICATEDPART.equals(strChkType) || pgV3Constants.TYPE_STRUCTURED_ATS.equals(strChkType))){
                  //Modified by DSM (Sogeti) for 22x.04 (Dec CW 2023) Requirement 47656,47667 - End    
                    	BOMSubstituteSAPBuffer.append("<TH align=\"center\" width=\"90\"><B>Ref Des</B></TH>");
                    }
                    //Modified by DSM(Sogeti)-2015x.4 for PDF Views (Req-5696,5711,5692,5693) - Ends
                    //Modified by DSM(Sogeti)-2015x.4 for PDF Views (Req -14983,5694,11471,11425) - Ends
                    if(pgV3Constants.TYPE_FABRICATEDPART.equals(strChkType)  || (!pgV3Constants.TYPE_INTERMEDIATE_PRODUCT_PART.equals(strChkType) && (showRestrictionData && pgV3Constants.PDFVIEW_ALLINFO.equalsIgnoreCase(strPDFViewKind)))){
                    	BOMSubstituteSAPBuffer.append("<TH align=\"center\" width=\"90\"><B>Ref Des</B></TH>");
                    	BOMSubstituteSAPBuffer.append("<TH width=\"95px\" align=\"center\"><B>On-Shelf<BR></BR>Product<BR></BR>Density(OSPD)<BR></BR>Density Unit Of<BR></BR>Measure(DUoM)<BR></BR>Optional<BR></BR>Components(OC)</B></TH>");
                    }
                    //Added by DSM Sogeti for 2022x.02 May CW for PDF Views (Req -46172) - Ends
                    else if(pgV3Constants.TYPE_INTERMEDIATE_PRODUCT_PART.equals(strChkType) ||pgV3Constants.TYPE_ASSEMBLEDPRODUCTPART.equals(strChkType) || pgV3Constants.TYPE_DEVICEPRODUCTPART.equals(strChkType) || pgV3Constants.TYPE_MASTERPRODUCTPART.equals(strChkType) || pgV3Constants.TYPE_PGMASTERINNERPACKUNITPART.equals(strChkType) || pgV3Constants.TYPE_PGMASTERPACKAGINGASSEMBLYPART.equals(strChkType) ||  pgV3Constants.TYPE_PGMASTERCUSTOMERUNITPART.equals(strChkType)){
                        //Added by DSM(Sogeti)-2018x.5 for PDF Views Requirements and Defect 34398- Starts
                        if(pgV3Constants.TYPE_PGMASTERCUSTOMERUNITPART.equals(strChkType)) {
                            BOMSubstituteSAPBuffer.append("<TH width=\"95\" align=\"center\"><B>On-Shelf<BR></BR>Product<BR></BR>Density(OSPD)<BR></BR>Density Unit Of<BR></BR>Measure(DUOM)</B></TH>");
                        }else {
                            //Added by DSM(Sogeti)-2018x.5 for PDF Views Requirements and Defect 34398 - Ends
                            BOMSubstituteSAPBuffer.append("<TH width=\"95\" align=\"center\"><B>On-Shelf<BR></BR>Product<BR></BR>Density(OSPD)<BR></BR>Density Unit Of<BR></BR>Measure(DUoM)</B></TH>");
                        }
                    }
                    //Modified by DSM-2015x.4 for PDF Views  - Starts
                    else if (pgV3Constants.TYPE_FINISHEDPRODUCTPART.equals(strChkType) || pgV3Constants.TYPE_PGTRANSPORTUNITPART.equals(strChkType)){
                        BOMSubstituteSAPBuffer.append("<TH align=\"center\" width=\"95\"><B>Ref Des(RD)<BR></BR>Optional<BR></BR>Components(OC)</B></TH>");
                    }
                    //Modified by DSM-2015x.4 for PDF Views  - Ends
                    //Modified by DSM-2018x.5 for PDF Views  - Starts
                    else if(pgV3Constants.TYPE_PGCUSTOMERUNITPART.equals(strChkType) || pgV3Constants.TYPE_PGCONSUMERUNITPART.equals(strChkType) || pgV3Constants.TYPE_PGINNERPACKUNITPART.equals(strChkType) || pgV3Constants.TYPE_PGMASTERCONSUMERUNITPART.equals(strChkType) || pgV3Constants.TYPE_PACKAGINGASSEMBLYPART.equals(strChkType)) {
                        BOMSubstituteSAPBuffer.append("<TH align=\"center\" width=\"95\"><B>Ref Des</B></TH>");
                        BOMSubstituteSAPBuffer.append("<TH align=\"center\" width=\"95\"><B>On-Shelf Product<BR></BR>Density(OSPD)<BR></BR>Density Unit Of<BR></BR>Measure(DUoM)</B></TH>");
                        BOMSubstituteSAPBuffer.append("<TH align=\"center\" width=\"95\"><B>Optional<BR></BR>Components</B></TH>");
                    }
                    //Modified by DSM-2018x.5 for PDF Views  - Ends
                    //Added/Modified  by DSM-Sogeti for (2018x.6 Apr CW 2022) PDF Views Req 42293-Starts
                    
                    if(((pgV3Constants.TYPE_ASSEMBLEDPRODUCTPART.equals(strChkType) && !isCatiAPP)  || pgV3Constants.TYPE_DEVICEPRODUCTPART.equals(strChkType)) ){
						//Modified by DSM-2022x.2 for PDF Views (Req:46173,46174) : Starts 
                    	if((pgV3Constants.PDFVIEW_GENDOC.equalsIgnoreCase(strPDFViewKind))) {
                    		BOMSubstituteSAPBuffer.append("<TH align=\"center\" width=\"95\"><B>Manufacturing<BR></BR>Status</B></TH>");
                    	} //Added/Modified  by DSM-Sogeti for (2018x.6 Apr CW 2022) PDF Views Req 42293-Ends
                    	else {
                    		BOMSubstituteSAPBuffer.append("<TH align=\"center\" width=\"95\"><B>Manufacturing<BR></BR>Status(MS)<BR></BR>Relationship<BR></BR>Restriction(RR)</B></TH>");
                    		BOMSubstituteSAPBuffer.append("<TH align=\"center\" width=\"95\"><B>Relationship<BR></BR>Restriction<BR></BR>Comment</B></TH>");

                    	}
                    	//Modified by DSM-2022x.2 for PDF Views (Req:46173,46174) : Starts
                    }         
                    //Added by DSM Sogeti for 2022x.02 May CW for PDF Views (Req -46172) - Starts
                    if(showRestrictionData && pgV3Constants.PDFVIEW_ALLINFO.equalsIgnoreCase(strPDFViewKind)){
                    	BOMSubstituteSAPBuffer.append("<TH align=\"center\" width=\"95\"><B>Relationship Restriction(RR)</B><BR></BR><B>Relationship Restriction</B><BR></BR><B>Comment(RRC)</B></TH>");
                    }
                    //Added by DSM Sogeti for 2022x.02 May CW for PDF Views (Req -46172) - Ends
          	
                    BOMSubstituteSAPBuffer.append("</TR></thead>");

                    mapObject = new HashMap();
                    for (Iterator iterator = mlMain.iterator(); iterator.hasNext();){
                        mapObject = (Map) iterator.next();
                        strName = (String)mapObject.get(DomainConstants.SELECT_NAME);
                        strState = (String)mapObject.get(DomainConstants.SELECT_CURRENT);
                        //Added by DSM(Sogeti)-2018x.1.1 for PDF Views Defect 24953 Starts
                        strPolicy = (String)mapObject.get(DomainConstants.SELECT_POLICY);
                        strCurrentState=EnoviaResourceBundle.getStateI18NString(context, strPolicy, strState,context.getLocale().getLanguage());
                        //Added by DSM(Sogeti)-2018x.1.1 for PDF Views Defect 24953 Ends
                        //Added by DSM(Sogeti)-2018x.3 for PDF Views Req 32593 Starts
                        strRev=(String)mapObject.get(DomainConstants.SELECT_REVISION);
                        //Added by DSM(Sogeti)-2018x.3 for PDF Views Req 32593 Ends
                        //Modified for 2018x Upgrade - Stage attribute is replaced by Release Phase attribute in 18x OOTB.
                        strStage = (String)mapObject.get(pgV3Constants.SELECT_ATTRIBUTE_RELEASE_PHASE);
                        
                        
                        //Added by DSM(Sogeti)-2015x.5 for PDF Views (Defect ID-16705) - Starts
                        //Added by DSM-2018x.5 for PDF Views (Req -32136) - Starts
                        if(mapObject.containsKey("from["+pgV3Constants.RELATIONSHIP_PGPDTEMPLATESTOPGPLIREPORTEDFUNCTION+"].to.name")) {
                            strReportedFunction = (String) mapObject.get("from["+pgV3Constants.RELATIONSHIP_PGPDTEMPLATESTOPGPLIREPORTEDFUNCTION+"].to.name");
                        }else {
                            strReportedFunction = DomainConstants.EMPTY_STRING;
                        }
                        //Added by DSM-2018x.5 for PDF Views (Req -32136) - Ends
                        if(UIUtil.isNullOrEmpty(strStage)){
                            strStage = DomainConstants.EMPTY_STRING;
                        }
                        //Added by DSM(Sogeti)-2015x.5 for PDF Views (Defect ID-16705) - Ends
                        //Modified by DSM-2015x.4.1 Feb downtime for PDF Views (Defect Id #15263) - Starts
                        strHasAccess = (String)mapObject.get("current.access[read]");
                        //strState =strState.replaceAll("#DENIED!","No Access");
                        strStage =strStage.replaceAll("#DENIED!","No Access");
                        //Modified by DSM-2015x.4.1 Feb downtime for PDF Views (Defect Id #15263) - Ends
                        //Modified by DSM-2018x.1.1 for PDF Views Numeric Attribute - Starts
                        if(strObjType.equalsIgnoreCase(pgV3Constants.TYPE_FORMULATIONPART)){
                            strProductDensity = (String)mapObject.get(pgV3Constants.SELECT_ATTRIBUTE_PGONSHELFPRODUCTDENSITY+".inputvalue");
                        } else {
                            strProductDensity = (String)mapObject.get(pgV3Constants.SELECT_ATTRIBUTE_PGONSHELFPRODUCTDENSITY);
                        }
                        //Modified by DSM-2018x.1.1 for PDF Views Numeric Attribute - Ends
                        strDensityUOM = (String)mapObject.get(pgV3Constants.SELECT_ATTRIBUTE_PGDENSITYUOM);
                        stridConn = (String)mapObject.get("id[connection]");
                        strLevel = (String)mapObject.get(DomainConstants.SELECT_LEVEL);
                        strid = (String)mapObject.get(DomainConstants.SELECT_ID);
                        //Modified by DSM(Sogeti) - for 2015x.5 PDF Views Defect# 16396 - Starts
                        domObject = DomainObject.newInstance(context);
                        strid = (String)mapObject.get(DomainConstants.SELECT_ID);
                        domObject.setId(strid);
                        hasReadAccess = domObject.checkAccess(context, (short) AccessConstants.cRead);
                        //Modified by DSM(Sogeti) - for 2015x.5 PDF Views Defect# 16396 - Ends
                        stParentId = (String)mapObject.get("ParentId");
                        strRefDesig = (String)mapObject.get("RefDesig");
                        //Modified by DSM(Sogeti)-2015x.4 for PDF Views (Req - 14983) - Starts
                        strNet = (String)mapObject.get(pgV3Constants.SELECT_ATTRIBUTE_TOTAL);
                        strLoss = (String)mapObject.get(pgV3Constants.SELECT_ATTRIBUTE_LOSS);
                        String strOptComp = (String)mapObject.get("OptComp");
                        strNetWeight = (String)mapObject.get("NetWeight");
                        strNetWeightUOM = (String)mapObject.get("NetWeightUOM");
                        //Modified by DSM(Sogeti)-2015x.4 for PDF Views (Req - 14983) - Ends
                        //Modified by DSM(Sogeti)-2018x.1.1 for PDF Views Defect 26216  - Starts
                        strGrossWeight=(String)mapObject.get(pgV3Constants.SELECT_ATTRIBUTE_PGGROSSWEIGHT);
                        //Modified by DSM(Sogeti)-2018x.1.1 for PDF Views Defect 26216  - End
                        strMax = (String)mapObject.get("strMaximum");
                        strMin = (String)mapObject.get("strMinimum");
                        if (isCatiAPP) {
                            strLayerName = getLayerName(context, stridConn, pgPDFViewConstants.ATTRIBUTE_LN, pgPDFViewConstants.COLUMN_PGLAYER_NAME);
                            strLayerGroupName = getLayerName(context, stridConn, pgPDFViewConstants.ATTRIBUTE_LGN,pgPDFViewConstants.COLUMN_PGLAYER_GROUP_NAME);
                        }
                    
                        //Modified by DSM(Sogeti)-2018x.3 for PDF Views Req 32593 Starts
                        //Modified by DSM(Sogeti)-2018x.3 for PDF Views Req 32593 Ends
                        mlObjListChg = new MapList();
                        mpObjChg = new HashMap();
                        mpObjChg.put("id[connection]",stridConn);
                        mpObjChg.put(DomainConstants.SELECT_LEVEL,strLevel);
                        mpObjChg.put(DomainConstants.SELECT_ID,strid);
                        mlObjListChg.add(mpObjChg);
                        mpBOMChg=new HashMap();
                        mpBOMChg.put("objectList", mlObjListChg);
                        //Modified for PNGUPGRADE 2018x PDF nullpointer  OOTB chnage in  getFindNumberSB START
                        Map mpParamObjMap = new HashMap();
                        mpParamObjMap.put("BOMViewMode","");
                        mpParamObjMap.put("selectedTable","");
                        mpBOMChg.put("paramList", mpParamObjMap);
                        //Modified for PNGUPGRADE 2018x PDF nullpointer  OOTB chnage in  getFindNumberSB END
                        String[] argsChg = JPO.packArgs(mpBOMChg);
//						emxPart_mxJPO objemxPartChg = new emxPart_mxJPO(context, argsChg);
//						Vector vEBOMChg = (Vector)objemxPartChg.getChgColumnData(context, argsChg);
                        //Added for PDF Refactor
                        Vector vEBOMChg = (Vector)pgPDFViewHelper.executeMainClassMethod(context, "emxPart", "getChgColumnData", argsChg);
                        //Modified by DSM(Sogeti) - for 2015x.5 PDF Views Defect# 16396 - Starts
                        // Modified by DSM-2018x.5 for PDF Views (Id #33396): Starts
						/*if(hasReadAccess)
						{
							if((vEBOMChg !=null) && (vEBOMChg.size() >0))
						{
							strChg = (String)vEBOMChg.get(0);
						}
						}else{
							strChg = pgV3Constants.NO_ACCESS;
						}*/
                        if((vEBOMChg !=null) && (vEBOMChg.size() >0))
                        {
                            strChg = (String)vEBOMChg.get(0);
                        }else {
                            strChg = "";
                        }

                        //Modified by DSM-2018x.5 for PDF Views (Id #34905): Starts
                        //if(hasReadAccess)
                        //{
                        strStage = (String)mapObject.get(pgV3Constants.SELECT_ATTRIBUTE_RELEASE_PHASE);
                        //}else{
                        //	strStage = pgV3Constants.NO_ACCESS;
                        //}
                        //Modified by DSM-2018x.5 for PDF Views (Id #34905): Ends
                        // Modified by DSM-2018x.5 for PDF Views (Id #33396): Ends
                        //Modified by DSM(Sogeti) - for 2015x.5 PDF Views Defect# 16396 - Ends
//						Vector vEBOMFindNumber = (Vector)objemxPartChg.getFindNumberSB(context, argsChg);
                        //Added for PDF Refactor
                        Vector vEBOMFindNumber = (Vector)pgPDFViewHelper.executeMainClassMethod(context, "emxPart", "getFindNumberSB", argsChg);
                        if((vEBOMFindNumber !=null) && (vEBOMFindNumber.size() >0) )
                            strFindNumber = (String)vEBOMFindNumber.get(0);
                        strTitle = (String)mapObject.get(pgV3Constants.SELECT_ATTRIBUTE_TITLE);
                        //Added by DSM(Sogeti)-2015x.5 for PDF Views (Defect ID-16705) - Starts
                        if(UIUtil.isNullOrEmpty(strTitle)){
                            strTitle = DomainConstants.EMPTY_STRING;
                        }
                        if(UIUtil.isNullOrEmpty(strRefDesig)){
                            strRefDesig = DomainConstants.EMPTY_STRING;
                        }
                        //Added by DSM(Sogeti)-2015x.5 for PDF Views (Defect ID-16705) - Ends
                        strTitle =strTitle.replaceAll("[<]","#LESS_THAN");
                        strTitle =strTitle.replaceAll("[>]","#GREATER_THAN");
                        //Modified by DSM-2015x.4.1 Feb downtime for PDF Views (Defect Id #15263) - Starts
                        //strTitle =strTitle.replaceAll("#DENIED!","No Access");
                        //Modified by DSM-2015x.4.1 Feb downtime for PDF Views (Defect Id #15263) - Ends
                        strType = (String)mapObject.get(DomainConstants.SELECT_TYPE);
                        strValue = UINavigatorUtil.getAdminI18NString("Type", strType, context.getSession().getLanguage());
						/*mpParam = new HashMap();
						mpParam.put("reportFormat","pdf");
						mpParam.put("objectId",stParentId);
						mlObjList = new MapList();
						mpObj = new HashMap();
						mpObj.put("id[connection]",stridConn);
						mpObj.put(DomainConstants.SELECT_ID,strid);
						mpObj.put(DomainConstants.SELECT_LEVEL,strLevel);
						mlObjList.add(mpObj);
						mpBOMSubs=new HashMap();
						mpBOMSubs.put("paramList",mpParam);
						mpBOMSubs.put("objectList", mlObjList);
						String[] argsSubs = JPO.packArgs(mpBOMSubs);
//						emxPart_mxJPO objemxPart = new emxPart_mxJPO(context, argsSubs);
//						Vector vEBOMSub = (Vector)objemxPart.getColumnSubstitutePartsFlagData(context, argsSubs);
	//Added for PDF Refactor
						Vector vEBOMSub = (Vector)pgPDFViewHelper.executeMainClassMethod(context, "emxPart", "getColumnSubstitutePartsFlagData", argsSubs);
						if((vEBOMSub !=null) && (vEBOMSub.size() >0) )
							sbtrSub = (String)vEBOMSub.get(0);*/
                        
                        //Added by DSM (Sogeti) for 22x.04 (Dec CW 2023) Defect 55638 - Starts
                        if(strLevel.equals("1") && strType.equalsIgnoreCase(pgV3Constants.TYPE_PARENTSUB)) {
                        	iReplacedSubQty =0;
                        	continue;
                        }
                      //Modified by DSM (Sogeti) for 22x.04 (Dec CW 2023) Defect 56132 - Starts
                        if("1".equals(strLevel) && (strType.equalsIgnoreCase(pgV3Constants.TYPE_RAWMATERIALPART) || strType.equalsIgnoreCase(pgV3Constants.TYPE_FORMULATIONPART))) {
                      //Modified by DSM (Sogeti) for 22x.04 (Dec CW 2023) Defect 56132 - Ends

                        	objATSOperation = (Object)mapObject.get("frommid["+pgPDFViewConstants.RELATIONSHIP_PGATSCONTEXT+"].attribute["+pgPDFViewConstants.ATTRIBUTE_PGSTRUCTUREATSACTION+"].value");

                        	if(objATSOperation!=null) {
                        		slATSOperation = getStringListFromObject(objATSOperation);

                        		if(slATSOperation != null) {
                        			strOperation = slATSOperation.get(0);
                        		}
                        	}
                        	//Modified by DSM (Sogeti) for 22x.04 (Dec CW 2023) Defect 55877 - Starts
                        	if(UIUtil.isNotNullAndNotEmpty(strOperation) && (strOperation.equalsIgnoreCase(pgPDFViewConstants.EBOM_KEY) || strOperation.equalsIgnoreCase(pgPDFViewConstants.ALTERNATE_KEY))) {
                        		objSATSFormulaname = (Object)mapObject.get("frommid["+pgPDFViewConstants.RELATIONSHIP_PGATSCONTEXT+"].torel.from."+DomainConstants.SELECT_NAME+"");

                        		if(objSATSFormulaname != null) {
                        			slSATSFormulaName = getStringListFromObject(objSATSFormulaname);

                        			if(slSATSFormulaName != null) {
                        				StrStructuredATSFormulaName = slSATSFormulaName.get(0);
                        				strReplacedPrimaryName = DomainConstants.EMPTY_STRING;
                        				strReplacedPrimaryQty = DomainConstants.EMPTY_STRING;
                        				strReplacedSubstituteQty = DomainConstants.EMPTY_STRING;
                        				
                        			}
                        		}
                        	//Modified by DSM (Sogeti) for 22x.04 (Dec CW 2023) Defect 55877 - Ends
                        		objSATSFormulaRev = (Object)mapObject.get("frommid["+pgPDFViewConstants.RELATIONSHIP_PGATSCONTEXT+"].torel.from."+DomainConstants.SELECT_REVISION+"");

                        		if(objSATSFormulaRev !=null) {
                        			slSATSFormulaRev = getStringListFromObject(objSATSFormulaRev);

                        			if(slSATSFormulaRev != null) {
                        				StrStructuredATSFormulaRev = slSATSFormulaRev.get(0);
                        			}
                        		}
                        	}
                        	if(UIUtil.isNotNullAndNotEmpty(strOperation) && strOperation.equalsIgnoreCase(pgPDFViewConstants.EBOM_SUBSTITUTE_KEY)) {
                        		objSATSFormulaname = (Object)mapObject.get("frommid["+pgPDFViewConstants.RELATIONSHIP_PGATSCONTEXT+"].torel.fromrel.from."+DomainConstants.SELECT_NAME+"");

                        		if(objSATSFormulaname != null) {
                        			slSATSFormulaName = getStringListFromObject(objSATSFormulaname);

                        			if(slSATSFormulaName != null) {
                        				StrStructuredATSFormulaName = slSATSFormulaName.get(0);
                        			}
                        		}

                        		objSATSFormulaRev = (Object)mapObject.get("frommid["+pgPDFViewConstants.RELATIONSHIP_PGATSCONTEXT+"].torel.fromrel.from."+DomainConstants.SELECT_REVISION+"");

                        		if(objSATSFormulaRev !=null) {
                        			slSATSFormulaRev = getStringListFromObject(objSATSFormulaRev);

                        			if(slSATSFormulaRev != null) {
                        				StrStructuredATSFormulaRev = slSATSFormulaRev.get(0);
                        			}
                        		}
                        		objSATSReplacedPrimaryName = (Object)mapObject.get("frommid["+pgPDFViewConstants.RELATIONSHIP_PGATSCONTEXT+"].torel.fromrel.to."+DomainConstants.SELECT_NAME+"");

                        		if(objSATSReplacedPrimaryName!=null) {
                        			slSATSReplacedPrimaryName = getStringListFromObject(objSATSReplacedPrimaryName);

                        			if(slSATSReplacedPrimaryName != null) {
                        				strReplacedPrimaryName = slSATSReplacedPrimaryName.get(0);
                        			}
                        		}

                        		objSATSReplacedPrimaryQty = (String)mapObject.get("frommid["+pgPDFViewConstants.RELATIONSHIP_PGATSCONTEXT+"].torel.fromrel."+pgV3Constants.SELECT_ATTRIBUTE_QUANTITY+"");

                        		if(objSATSReplacedPrimaryQty != null) {
                        			slSATSReplacedPrimaryQty = getStringListFromObject(objSATSReplacedPrimaryQty);

                        			if(slSATSReplacedPrimaryQty != null) {
                        				strReplacedPrimaryQty = slSATSReplacedPrimaryQty.get(0);
                        			}
                        		}

                        		objSATSReplacedSubsQty = (String)mapObject.get("frommid["+pgPDFViewConstants.RELATIONSHIP_PGATSCONTEXT+"].torel."+pgV3Constants.SELECT_ATTRIBUTE_QUANTITY+"");

                        		if(objSATSReplacedSubsQty != null) {
                        			slSATSReplacedSubsQty = getStringListFromObject(objSATSReplacedSubsQty);

                        			if(slSATSReplacedSubsQty != null) {
                        				strReplacedSubstituteQty = slSATSReplacedSubsQty.get(0);
                        			}
                        		}
                        	}
                        }
                      //Modified by DSM (Sogeti) for 22x.04 (Dec CW 2023) Defect 56132 - Starts
                        if("2".equals(strLevel) && (strType.equalsIgnoreCase(pgV3Constants.TYPE_RAWMATERIALPART) || strType.equalsIgnoreCase(pgV3Constants.TYPE_FORMULATIONPART))) {
                      //Modified by DSM (Sogeti) for 22x.04 (Dec CW 2023) Defect 56132 - Ends
                        	objATSOperation = (Object)mapObject.get("from.to["+pgV3Constants.RELATIONSHIP_PGATSOPERATION+"].frommid["+pgPDFViewConstants.RELATIONSHIP_PGATSCONTEXT+"].attribute["+pgPDFViewConstants.ATTRIBUTE_PGSTRUCTUREATSACTION+"].value");

                        	if(objATSOperation!=null) {
                        		slATSOperation = getStringListFromObject(objATSOperation);

                        		if(slATSOperation != null) {
                        			strOperation = slATSOperation.get(0);
                        		}
                        	}
                        	//Modified by DSM (Sogeti) for 22x.04 (Dec CW 2023) Defect 55877 - Starts
                        	if(UIUtil.isNotNullAndNotEmpty(strOperation) && strOperation.equalsIgnoreCase(pgPDFViewConstants.EBOM_KEY)) {

                        		objSATSFormulaname = (Object)mapObject.get("from.to["+pgV3Constants.RELATIONSHIP_PGATSOPERATION+"].frommid["+pgPDFViewConstants.RELATIONSHIP_PGATSCONTEXT+"].torel.from.to["+pgV3Constants.RELATIONSHIP_PLBOM+"].from.to["+pgV3Constants.RELATIONSHIP_PLANNEDFOR+"].from."+DomainConstants.SELECT_NAME+"");
                        		if(objSATSFormulaname != null) {
                        			slSATSFormulaName = getStringListFromObject(objSATSFormulaname);

                        			if(slSATSFormulaName != null) {
                        				StrStructuredATSFormulaName = slSATSFormulaName.get(0);
                        				strReplacedPrimaryName = DomainConstants.EMPTY_STRING;
                        				strReplacedPrimaryQty = DomainConstants.EMPTY_STRING;
                        				strReplacedSubstituteQty = DomainConstants.EMPTY_STRING;
                        			}
                        		}
                        		//Modified by DSM (Sogeti) for 22x.04 (Dec CW 2023) Defect 55877 - Ends
                        		objSATSFormulaRev = (Object)mapObject.get("from.to["+pgV3Constants.RELATIONSHIP_PGATSOPERATION+"].frommid["+pgPDFViewConstants.RELATIONSHIP_PGATSCONTEXT+"].torel.from.to["+pgV3Constants.RELATIONSHIP_PLBOM+"].from.to["+pgV3Constants.RELATIONSHIP_PLANNEDFOR+"].from."+DomainConstants.SELECT_REVISION+"");

                        		if(objSATSFormulaRev !=null) {
                        			slSATSFormulaRev = getStringListFromObject(objSATSFormulaRev);

                        			if(slSATSFormulaRev != null) {
                        				StrStructuredATSFormulaRev = slSATSFormulaRev.get(0);
                        			}
                        		}
                        	}

                        	if(UIUtil.isNotNullAndNotEmpty(strOperation) && strOperation.equalsIgnoreCase(pgPDFViewConstants.EBOM_SUBSTITUTE_KEY)) {


                        		objSATSFormulaname = (Object)mapObject.get("from.to["+pgV3Constants.RELATIONSHIP_PGATSOPERATION+"].frommid["+pgPDFViewConstants.RELATIONSHIP_PGATSCONTEXT+"].to.to["+pgV3Constants.RELATIONSHIP_PLBOMSUBSTITUTE+"].fromrel.from.to["+pgV3Constants.RELATIONSHIP_PLBOM+"].from.to["+pgV3Constants.RELATIONSHIP_PLANNEDFOR+"].from."+DomainConstants.SELECT_NAME+"");

                        		if (objSATSFormulaname !=null) {
                        			slSATSFormulaName = getStringListFromObject(objSATSFormulaname);

                        			if(slSATSFormulaName != null) {
                        				StrStructuredATSFormulaName = slSATSFormulaName.get(0);
                        			}
                        		}

                        		objSATSFormulaRev = (Object)mapObject.get("from.to["+pgV3Constants.RELATIONSHIP_PGATSOPERATION+"].frommid["+pgPDFViewConstants.RELATIONSHIP_PGATSCONTEXT+"].to.to["+pgV3Constants.RELATIONSHIP_PLBOMSUBSTITUTE+"].fromrel.from.to["+pgV3Constants.RELATIONSHIP_PLBOM+"].from.to["+pgV3Constants.RELATIONSHIP_PLANNEDFOR+"].from."+DomainConstants.SELECT_REVISION+"");

                        		if(objSATSFormulaRev != null) {
                        			slSATSFormulaRev = getStringListFromObject(objSATSFormulaRev);

                        			if(slSATSFormulaRev != null) {
                        				StrStructuredATSFormulaRev = slSATSFormulaRev.get(0);
                        			}
                        		}
                        		objSATSReplacedPrimaryName = (Object)mapObject.get("from.to["+pgV3Constants.RELATIONSHIP_PGATSOPERATION+"].frommid["+pgPDFViewConstants.RELATIONSHIP_PGATSCONTEXT+"].to.to["+pgV3Constants.RELATIONSHIP_PLBOMSUBSTITUTE+"].fromrel.to."+DomainConstants.SELECT_NAME+"");

                        		if(objSATSReplacedPrimaryName!=null) {
                        			slSATSReplacedPrimaryName = getStringListFromObject(objSATSReplacedPrimaryName);

                        			if(slSATSReplacedPrimaryName != null) {
                        				strReplacedPrimaryName = slSATSReplacedPrimaryName.get(0);
                        			}
                        		}

                        		objSATSReplacedPrimaryQty = (Object)mapObject.get("from.to["+pgV3Constants.RELATIONSHIP_PGATSOPERATION+"].frommid["+pgPDFViewConstants.RELATIONSHIP_PGATSCONTEXT+"].to.to["+pgV3Constants.RELATIONSHIP_PLBOMSUBSTITUTE+"]."+pgV3Constants.SELECT_ATTRIBUTE_QUANTITY_ADJUSTMENT+"");

                        		if(objSATSReplacedPrimaryQty != null) {
                        			slSATSReplacedPrimaryQty = getStringListFromObject(objSATSReplacedPrimaryQty);

                        			if(slSATSReplacedPrimaryQty != null) {
                        				strReplacedPrimaryQty = slSATSReplacedPrimaryQty.get(0);
                        			}
                        		}
                        		//Modified by DSM (Sogeti) for 22x.04 (Dec CW 2023) Defect 55877 - Starts
                        		objSATSReplacedSubsQty = (Object)mapObject.get("from.to["+pgV3Constants.RELATIONSHIP_PGATSOPERATION+"].frommid["+pgPDFViewConstants.RELATIONSHIP_PGATSCONTEXT+"].to.from["+pgV3Constants.RELATIONSHIP_PLBOM+"]."+pgV3Constants.SELECT_ATTRIBUTE_QUANTITY+"");

                    			if(objSATSReplacedSubsQty != null) {
                    				slReplaceSusbQty = getStringListFromObject(objSATSReplacedSubsQty);

                    				if(slReplaceSusbQty.size()>0) {
                    					strReplacedSubstituteQty = getReplacedSubstituteQuantity(context,iReplacedSubQty,slReplaceSusbQty);
                    					iReplacedSubQty++;
                    					if(iReplacedSubQty > 1) {
                    						strReplacedPrimaryQty = DomainConstants.EMPTY_STRING;
                    					}
                    				} 
                    			}
                    			//Modified by DSM (Sogeti) for 22x.04 (Dec CW 2023) Defect 55877 - Ends
                        	}
                        } 

                        strSATSReplaceMinPercentWetWet = (String) mapObject.get(pgV3Constants.SELECT_ATTRIBUTE_MINACTUAL_PERCENTWET);
                        strSTASReplaceQty = (String) mapObject.get(pgV3Constants.SELECT_ATTRIBUTE_QUANTITY);
                        strSATSReplaceMaxPercentWetWet = (String) mapObject.get(pgV3Constants.SELECT_ATTRIBUTE_MAXACTUALPERCENTWET);

                        strSATSReplaceTargetWetWeight = (String) mapObject.get(pgV3Constants.SELECT_ATTRIBUTE_TARGETWETWEIGHT);
                        strSATSReplaceWetWetMin = (String) mapObject.get(pgV3Constants.SELECT_ATTRIBUTE_PGMINIMUMACTUALWEIGHTWET);
                        strSATSReplaceWetWetMax = (String) mapObject.get(pgV3Constants.SELECT_ATTRIBUTE_PGMAXIMUMACTUALWEIGHTWET);


                        strSATSReplaceDryWeight = (String) mapObject.get(pgV3Constants.SELECT_ATTRIBUTE_TOTAL);
                        strSATSReplaceTargetDryWeight = (String) mapObject.get(pgV3Constants.SELECT_ATTRIBUTE_TARGETWEIGHTDRY);
                        strSATSReplaceProcessingLoss = (String) mapObject.get(pgV3Constants.SELECT_ATTRIBUTE_LOSS);

                        strSATSReplaceProcessingNote = (String) mapObject.get(pgV3Constants.SELECT_ATTRIBUTE_PROCESSINGNOTE);

                      //Added by DSM (Sogeti) for 22x.04 (Dec CW 2023) Defect 55638 - Ends
                        
                        slSubPart = getSubstitutePartName(context, mapObject, pgV3Constants.RELATIONSHIP_EBOM);
                        if(slSubPart != null && !slSubPart.isEmpty()) {
                            strSub = StringUtils.join(slSubPart,",");
                        }
                        mpAlternate = new HashMap();
                        mpAlternate.put("reportFormat","pdf");
                        mpAlternate.put("objectId",strObjectId);
                        mlObjListAlternate = new MapList();
                        mpObjAlternate = new HashMap();
                        mpObjAlternate.put("id",stParentId);
                        mlObjListAlternate.add(mpObjAlternate);
                        mpBOMAlternate=new HashMap();
                        mpBOMAlternate.put("paramList",mpAlternate);
                        mpBOMAlternate.put("objectList", mlObjListAlternate);
                        String[] argsAlt = JPO.packArgs(mpBOMAlternate);
//						emxPart_mxJPO objemxPartAlt = new emxPart_mxJPO(context, argsAlt);
//						Vector vEBOMAlternate = (Vector)objemxPartAlt.getColumnAlternateData(context, argsAlt);
                        //Added for PDF Refactor
                        Vector vEBOMAlternate = (Vector)pgPDFViewHelper.executeMainClassMethod(context, "emxPart", "getColumnAlternateData", argsAlt);
                       //Added by DSM (Sogeti) for 22x.04 (Dec CW 2023) Defect 55638 - Start
					    BOMSubstituteSAPBuffer.append("<TR align=\"center\" class=\"pdf\">");
						//Added by DSM (Sogeti) for 22x.04 (Dec CW 2023) Defect 55638 - Ends
                        if((vEBOMAlternate !=null) && (vEBOMAlternate.size() >0) )
                            strAlternate = (String)vEBOMAlternate.get(0);
                        //Modified by DSM - for 2018x.5 PDF Views Defect# 32025 Starts
                        //comV: if ( pgV3Constants.TYPE_PGCUSTOMERUNITPART.equals(strChkType) || pgV3Constants.TYPE_INTERMEDIATE_PRODUCT_PART.equals(strChkType) || pgV3Constants.TYPE_FABRICATEDPART.equals(strChkType) || pgV3Constants.TYPE_ASSEMBLEDPRODUCTPART.equals(strChkType) || pgV3Constants.TYPE_DEVICEPRODUCTPART.equals(strChkType) || pgV3Constants.TYPE_MASTERPRODUCTPART.equals(strChkType)){
                        //Added/Modified  by DSM-Sogeti for (2018x.6 Apr CW 2022) PDF Views Req 42293-Starts
                        if(pgV3Constants.TYPE_ASSEMBLEDPRODUCTPART.equals(strChkType) || pgV3Constants.TYPE_DEVICEPRODUCTPART.equals(strChkType)) {
                            BOMSubstituteSAPBuffer.append("<TD width=\"120\"><B>T:</B>"+validateString1(wrapCharTable(strValue,10))+"<BR></BR><B>N:</B>"+validateString1(strName)+"<BR></BR><B>R:</B>"+validateString1(strRev)+" </TD>");
                            BOMSubstituteSAPBuffer.append("<TD width=\"70\"><B>C:</B>"+validateString1(strChg)+"<BR></BR><B>F:</B>"+validateString1(strFindNumber)+"</TD>");
                            BOMSubstituteSAPBuffer.append("<TD width=\"120\">"+validateString1(wrapCharTable(strTitle,10))+"</TD>");
                        }
                      //Added by DSM (Sogeti) for 22x.04 (Dec CW 2023) Requirement 47656,47667 - Start
                        else if(pgV3Constants.TYPE_STRUCTURED_ATS.equals(strChkType)){
							BOMSubstituteSAPBuffer.append("<TD width=\"120\"><B>N:</B>"+validateString1(strName)+"<BR></BR><B>T:</B>"+validateString1(wrapCharTable(strValue,10))+"<BR></BR><B>R:</B>"+validateString1(strRev)+"<BR></BR><B>S:</B>"+validateString1(strState)+"</TD>");
							BOMSubstituteSAPBuffer.append("<TD width=\"120\">"+validateString1(wrapCharTable(strTitle,10))+"</TD>");
							BOMSubstituteSAPBuffer.append("<TD width=\"120\">"+validateString1(wrapCharTable(strOperation,10))+"</TD>");
						}
                      //Added by DSM (Sogeti) for 22x.04 (Dec CW 2023) Requirement 47656,47667 - End
                        else {
                            BOMSubstituteSAPBuffer.append("<TD width=\"100\"><B> N:</B>"+validateString1(strName)+"<BR></BR><B>R:</B>"+validateString1(strRev)+" </TD>");
                            //Added by DSM Sogeti for 2022x.02 May CW for PDF Views (Req -46172) - Starts
                            if(showRestrictionData && pgV3Constants.PDFVIEW_ALLINFO.equalsIgnoreCase(strPDFViewKind)){
                    			BOMSubstituteSAPBuffer.append("<TD width=\"70\"><B>C:</B>"+validateString1(strChg)+"<BR></BR><B>F:</B>"+validateString1(strFindNumber)+"</TD>");
                    		}else {
                    			BOMSubstituteSAPBuffer.append("<TD width=\"70\">"+validateString1(strChg)+"</TD>");
                    			BOMSubstituteSAPBuffer.append("<TD width=\"70\">"+validateString1(strFindNumber)+"</TD>");              			
                    		}//Added by DSM Sogeti for 2022x.02 May CW for PDF Views (Req -46172)  - Ends                           
                            BOMSubstituteSAPBuffer.append("<TD width=\"120\">"+validateString1(wrapCharTable(strTitle,10))+"</TD>");
                            BOMSubstituteSAPBuffer.append("<TD width=\"150\">"+validateString1(wrapCharTable(strValue,10))+"</TD>");
                        } //Added/Modified  by DSM-Sogeti for (2018x.6 Apr CW 2022) PDF Views Req 42293-Ends
                        if(isCatiAPP){
                            BOMSubstituteSAPBuffer.append("<TD width=\"70\" align=\"left\" valign=\"top\"><B>SP:</B>"+validateString1(strSub)+"<BR></BR><B>Alt:</B>"+validateString1(strAlternate)+"<BR></BR><B>LN:</B>"+validateString1(wrapCharTable(strLayerName,10))+"</TD>");
                        }
                      //Added by DSM (Sogeti) for 22x.04 (Dec CW 2023) Requirement 47656,47667 - Start
					  //Modified by DSM (Sogeti) for 22x.04 (Dec CW 2023) Defect 55289 - Start
					  //Modified by DSM (Sogeti) for 22x.04 (Dec CW 2023) Defect 55638 - Start
                        else if(pgV3Constants.TYPE_STRUCTURED_ATS.equals(strChkType)){
							BOMSubstituteSAPBuffer.append("<TD width=\"120\">"+validateString1(wrapCharTable(strReplacedPrimaryName,10))+"</TD>");
						}
						 //Modified by DSM (Sogeti) for 22x.04 (Dec CW 2023) Defect 55638 - Ends
						//Modified by DSM (Sogeti) for 22x.04 (Dec CW 2023) Defect 55289 - Ends
                      //Added by DSM (Sogeti) for 22x.04 (Dec CW 2023) Requirement 47656,47667 - End
                        else{
                            BOMSubstituteSAPBuffer.append("<TD width=\"70\" align=\"left\" valign=\"top\"><B>SP:</B>"+validateString1(strSub)+"<BR></BR><B>Alt:</B>"+validateString1(strAlternate)+"</TD>");
                        }

                        mpParamQty = new HashMap();
                        mpParamQty.put("reportFormat","emxPart:getEBOMsWithRelSelectablesSB");
                        mlObjListQty = new MapList();
                        mpObjQty = new HashMap();
                        mpObjQty.put("id[connection]",stridConn);
                        mlObjListQty.add(mpObjQty);
                        mpBOMQty=new HashMap();
                        mpBOMQty.put("paramList",mpParamQty);
                        mpBOMQty.put("objectList", mlObjListQty);
                        String[] argsQty = JPO.packArgs(mpBOMQty);
//						emxPart_mxJPO objemxPartQty = new emxPart_mxJPO(context, argsQty);
//						Vector vEBOMQty = (Vector)objemxPartQty.getQuantity(context, argsQty);
                        //Added for PDF Refactor
                        Vector vEBOMQty = (Vector)pgPDFViewHelper.executeMainClassMethod(context, "emxPart", "getQuantity", argsQty);
                        String strQty = null;
                        if((vEBOMQty !=null) && (vEBOMQty.size() >0) )
                            strQty = (String)vEBOMQty.get(0);
                        //Addeded by DSM(Sogeti)-2018x.3 for PDF Views (Defect Id #32213) - Starts
                       //Modified by DSM (Sogeti) for 22x.04 (Dec CW 2023) Defect 55289 - Start
                        if(UIUtil.isNotNullAndNotEmpty(strQty)) {
                        Double dQty = new Double(strQty);
                        BigDecimal bdQty = BigDecimal.valueOf(dQty);
                        String strNum = bdQty.stripTrailingZeros().toPlainString();
                        int index = strNum.indexOf(".");
                        int iDecimalPlacesCount = index < 0 ? 0 : strNum.length() - index - 1;
                        if (iDecimalPlacesCount > 9) {
                            bdQty = bdQty.setScale(9, BigDecimal.ROUND_HALF_UP);
                        }
                        strQty = bdQty.toPlainString();
                        }
                        //Modified by DSM (Sogeti) for 22x.04 (Dec CW 2023) Defect 55289 - Ends
                        //Addeded by DSM(Sogeti)-2018x.3 for PDF Views (Defect Id #32213) - Ends
						/*if(pgV3Constants.TYPE_MASTERPRODUCTPART.equals(strChkType))
						{
							BOMSubstituteSAPBuffer.append("<TD width=\"65\">"+validateString1(strMin)+"</TD>");
							BOMSubstituteSAPBuffer.append("<TD width=\"75\">"+validateString1(strMax)+"</TD>");
						}*/
                        settingsMap = new HashMap();
                        settingsMap.put("DSOPickListRelationshipName","relationship_pgPDTemplatestopgPLIBUOM");
                        settingsMap.put("DSOPickListAttribute","attribute_pgBaseUnitOfMeasure");
                        columnMap = new HashMap();
                        columnMap.put("settings",settingsMap);
                        mlObjListBUOM = new MapList();
                        mpObjBUOM = new HashMap();
                        mpObjBUOM.put(DomainConstants.SELECT_ID,strid);
                        mlObjListBUOM.add(mpObjBUOM);
                        paramMap=new HashMap();
                        mpBOMBUOM=new HashMap();
                        mpBOMBUOM.put("columnMap",columnMap);
                        mpBOMBUOM.put("objectList", mlObjListBUOM);
                        mpBOMBUOM.put("paramList", paramMap);
                        String[] argsBUOM = JPO.packArgs(mpBOMBUOM);
                        //Modified by DSM(Sogeti) - for 2015x.5 PDF Views Defect# 16396 - Starts
                        ContextUtil.pushContext(context);
//						emxCPNProductData_mxJPO objemxPartBUOM = new emxCPNProductData_mxJPO(context, argsBUOM);
//						Vector vEBOMBUOM = (Vector)objemxPartBUOM.getColumnPickListData(context, argsBUOM);
                        //Added for PDF Refactor
                        Vector vEBOMBUOM = (Vector)pgPDFViewHelper.executeMainClassMethod(context, "emxCPNProductData", "getColumnPickListData", argsBUOM);
                        ContextUtil.popContext(context);
                        if((vEBOMBUOM !=null) && (vEBOMBUOM.size() >0) )
                            strBUOM = (String)vEBOMBUOM.get(0);
                        //Modified by DSM-2015x.4.1 Feb downtime for PDF Views (Defect Id #15263) - Starts
                        //strBUOM =strBUOM.replaceAll("#DENIED!","No Access");
                        //Modified by DSM-2015x.4.1 Feb downtime for PDF Views (Defect Id #15263) - Ends
                        //Modified by DSM(Sogeti) - for 2015x.5 PDF Views Defect# 16396 - Ends
                        if(pgV3Constants.TYPE_INTERMEDIATE_PRODUCT_PART.equals(strChkType) || pgV3Constants.TYPE_FABRICATEDPART.equals(strChkType) || pgV3Constants.TYPE_ASSEMBLEDPRODUCTPART.equals(strChkType) || pgV3Constants.TYPE_DEVICEPRODUCTPART.equals(strChkType)){
                            // Modified by DSM-2018x.5 for PDF Views (Req Id #32662) : Starts
                            if(pgV3Constants.TYPE_FABRICATEDPART.equals(strChkType) ){
                                BOMSubstituteSAPBuffer.append("<TD width=\"100\" align=\"left\" valign=\"top\"><B>Qty: </B>"+validateString1(strQty)+"<BR></BR><B>UoM:</B>"+validateString1(strBUOM)+"</TD>");
                                // Modified by DSM-2018x.5 for PDF Views (Req Id #33106) : Starts
                            }else if(pgV3Constants.TYPE_INTERMEDIATE_PRODUCT_PART.equals(strChkType) ){
                                BOMSubstituteSAPBuffer.append("<TD width=\"100\" align=\"left\" valign=\"top\"><B>Qty: </B>"+validateString1(strQty)+"<BR></BR><B>BUoM:</B>"+validateString1(strBUOM)+"</TD>");
                                // Modified by DSM-2018x.5 for PDF Views (Req Id #33106) : End
                            }else{
                                BOMSubstituteSAPBuffer.append("<TD width=\"100\" align=\"left\" valign=\"top\"><B>Min: </B>"+validateString1(strMin)+"<BR></BR><B>Qty: </B>"+validateString1(strQty)+"<BR></BR><B>Max: </B>"+validateString1(strMax)+"<BR></BR><B>UoM:</B>"+validateString1(strBUOM)+"</TD>");
                            }
                            // Modified by DSM-2018x.5 for PDF Views (Req Id #32662) : End
                            //Modified by DSM(Sogeti)-2018x.1 for PDF Views (Req Id #11471) - Starts
                            //Modified by DSM(Sogeti)-2018x.2 for PDF Views (Req FAB - 7554,7555) - Starts
                            //Modified by DSM-2018x.6 for PDF Views (Req Id #38412) - Starts
                            if(pgV3Constants.TYPE_DEVICEPRODUCTPART.equals(strChkType)  || pgV3Constants.TYPE_FABRICATEDPART.equals(strChkType))
                            {
                                //Modified by DSM(Sogeti)-2018x.2 for PDF Views (Req FAB - 7554,7555) - Ends
                                //Modified/Commented by DSM(Sogeti)-2018x.1 for PDF Views (Req Id #25368) - Starts
                                //BOMSubstituteSAPBuffer.append("<TD width=\"100\" align=\"left\" valign=\"top\"><B>N:</B>"+validateString1(strNet)+"<BR></BR><B>L:</B>"+validateString1(strLoss)+"<BR></BR><B>GW:</B>"+validateString1(strGrossWeight)+"<BR></BR><B>NW:</B>"+validateString1(strNetWeight)+"<BR></BR><B>NUoM:</B>"+validateString1(strNetWeightUOM)+"</TD>");
                                BOMSubstituteSAPBuffer.append("<TD width=\"100\" align=\"left\" valign=\"top\"><B>N:</B>"+validateString1(strNet)+"<BR></BR><B>L:</B>"+validateString1(strLoss)+"<BR></BR><B>NW:</B>"+validateString1(strNetWeight)+"<BR></BR><B>UoM:</B>"+validateString1(strNetWeightUOM)+"</TD>");
                                //Modified/Commented by DSM(Sogeti)-2018x.1 for PDF Views (Req Id #25368) - Starts
                                // Modified by DSM-2018x.5 for PDF Views (Req Id #33106) : Starts
                            }else if(pgV3Constants.TYPE_ASSEMBLEDPRODUCTPART.equals(strChkType)) {
                                BOMSubstituteSAPBuffer.append("<TD width=\"100\" align=\"left\" valign=\"top\"><B>N:</B>"+validateString1(strNet)+"<BR></BR><B>L:</B>"+validateString1(strLoss)+"<BR></BR><B>CC:</B>"+ validateString1(mapObject.get(pgPDFViewConstants.SELECT_ATTRIBUTE_PGCOMPONENTQUANTITY)) +"<BR/><B>NW:</B>"+validateString1(strNetWeight)+"</TD>");
                                //Modified by DSM-2018x.6 for PDF Views (Req Id #38412) - Ends
                            }else if(pgV3Constants.TYPE_INTERMEDIATE_PRODUCT_PART.equals(strChkType)){
                                BOMSubstituteSAPBuffer.append("<TD width=\"100\" align=\"left\" valign=\"top\"><B>N:</B>"+validateString1(strNet)+"<BR></BR><B>L:</B>"+validateString1(strLoss)+"<BR></BR><B>NW:</B>"+validateString1(strNetWeight)+"<BR></BR><B>WUoM:</B>"+validateString1(strNetWeightUOM)+"</TD>");
                                // Modified by DSM-2018x.5 for PDF Views (Req Id #33106) : End
                            }
                            else {
                                //Modified by DSM(Sogeti)-2018x.1.1 for PDF Views Defect 26216  - Starts
                                BOMSubstituteSAPBuffer.append("<TD width=\"100\" align=\"left\" valign=\"top\"><B>N:</B>"+validateString1(strNet)+"<BR></BR><B>L:</B>"+validateString1(strLoss)+"<BR></BR><B>GW:</B>"+validateString1(strGrossWeight)+"<BR></BR><B>NW:</B>"+validateString1(strNetWeight)+"<BR></BR><B>UoM:</B>"+validateString1(strNetWeightUOM)+"</TD>");
                                //Modified by DSM(Sogeti)-2018x.1.1 for PDF Views Defect 26216  - Ends
                            }
                            //Modified by DSM(Sogeti)-2018x.1 for PDF Views (Req Id #11471) - Ends
                            //BOMSubstituteSAPBuffer.append("<TD width=\"35\">"+validateString1(strQty)+"</TD>");
                        }
                        else if (pgV3Constants.TYPE_MASTERPRODUCTPART.equals(strChkType)){
                            //comv:BOMSubstituteSAPBuffer.append("<TD width=\"180\" align=\"left\" valign=\"top\"><B>Min: </B>"+validateString1(strMin)+"<BR></BR><B>Qty: </B>"+validateString1(strQty)+"<BR></BR><B>Max: </B>"+validateString1(strMax)+"<BR></BR><B>UoM:</B>"+validateString1(strBUOM)+"</TD>");
                            BOMSubstituteSAPBuffer.append("<TD width=\"180\" align=\"left\" valign=\"top\"><B>Qty:</B>"+validateString1(strQty)+"<BR></BR><B>UoM:</B>"+validateString1(strBUOM)+"</TD>");
                        }
                      //Added by DSM (Sogeti) for 22x.04 (Dec CW 2023) Requirement 47656,47667 - Start
                        //Modified by DSM (Sogeti) for 22x.04 (Dec CW 2023) Defect 55289 - Start
                        //Modified by DSM (Sogeti) for 22x.04 (Dec CW 2023) Defect 55638 - Start
					    else if(pgV3Constants.TYPE_STRUCTURED_ATS.equals(strChkType)) {
							BOMSubstituteSAPBuffer.append("<TD width=\"120\">"+validateString1(wrapCharTable(strReplacedPrimaryQty,10))+"</TD>");
							BOMSubstituteSAPBuffer.append("<TD width=\"120\">"+validateString1(wrapCharTable(strReplacedSubstituteQty,10))+"</TD>");
                        }
						 //Modified by DSM (Sogeti) for 22x.04 (Dec CW 2023) Defect 55638 - Ends
                        
                      //Modified by DSM (Sogeti) for 22x.04 (Dec CW 2023) Defect 55289 - Ends
                      //Added by DSM (Sogeti) for 22x.04 (Dec CW 2023) Requirement 47656,47667 - End
                        else{
                            BOMSubstituteSAPBuffer.append("<TD width=\"70\">"+validateString1(strQty)+"</TD>");
                        }
                        if(!(pgV3Constants.TYPE_INTERMEDIATE_PRODUCT_PART.equals(strChkType) || pgV3Constants.TYPE_FABRICATEDPART.equals(strChkType) || pgV3Constants.TYPE_ASSEMBLEDPRODUCTPART.equals(strChkType) || pgV3Constants.TYPE_DEVICEPRODUCTPART.equals(strChkType) || pgV3Constants.TYPE_MASTERPRODUCTPART.equals(strChkType) || pgV3Constants.TYPE_STRUCTURED_ATS.equals(strChkType))){
                            BOMSubstituteSAPBuffer.append("<TD width=\"70\">"+validateString1(strBUOM)+"</TD>");

                        }
                      //Added by DSM (Sogeti) for 22x.04 (Dec CW 2023) Requirement 47656,47667 - Start
					  //Modified by DSM (Sogeti) for 22x.04 (Dec CW 2023) Defect 55289 - Start
					  //Modified by DSM (Sogeti) for 22x.04 (Dec CW 2023) Defect 55638 - Start
						if(pgV3Constants.TYPE_STRUCTURED_ATS.equals(strChkType))
						{
							BOMSubstituteSAPBuffer.append("<td align=\"left\" width=\"155\"><B>Min: </B>"+validateString1(strSATSReplaceMinPercentWetWet)+"<BR/><B>Quantity/Wet: </B>"+validateString1(strSTASReplaceQty)+"<BR/><B>Max: </B>"+validateString1(strSATSReplaceMaxPercentWetWet)+"</td>");
							BOMSubstituteSAPBuffer.append("<td align=\"left\" width=\"135\"><B>TWW: </B>"+validateString1(strSATSReplaceTargetWetWeight)+"<BR/><B>WEM: </B>"+validateString1(strSATSReplaceWetWetMin)+"<br/> <B>WWM: </B>"+validateString1(strSATSReplaceWetWetMax)+"</td>");
							BOMSubstituteSAPBuffer.append("<td align=\"left\" width=\"95\"><B>Dry: </B>"+validateString1(strSATSReplaceDryWeight)+"<BR/><B>TDW: </B>"+validateString1(strSATSReplaceTargetDryWeight)+"<BR/><B>PL:</B>"+validateString1(strSATSReplaceProcessingLoss)+"</td>");
						}
						 //Modified by DSM (Sogeti) for 22x.04 (Dec CW 2023) Defect 55638 - Ends
						//Modified by DSM (Sogeti) for 22x.04 (Dec CW 2023) Defect 55289 - Ends
						//Added by DSM (Sogeti) for 22x.04 (Dec CW 2023) Requirement 47656,47667 - End
                        //Modified by DSM-2015x.4 for PDF Views (Req Id #15016) - Starts
                        //Modified by DSM-2015x.4.1 Feb downtime for PDF Views (Defect Id #15263) - Starts
                        if((pgV3Constants.TYPE_FABRICATEDPART.equals(strChkType) || pgV3Constants.TYPE_ASSEMBLEDPRODUCTPART.equals(strChkType) || (pgV3Constants.TYPE_DEVICEPRODUCTPART.equals(strChkType) || pgV3Constants.TYPE_MASTERPRODUCTPART.equals(strChkType) || pgV3Constants.TYPE_INTERMEDIATE_PRODUCT_PART.equals(strChkType))) && "TRUE".equals(strHasAccess)){
                            sMatFunValue = getMaterialFunction(context,stridConn);
                        }
                        //Modified by DSM-2015x.4.1 Feb downtime for PDF Views (Defect Id #15263) - Ends
                        //Modified by DSM-2015x.4 for PDF Views (Req Id #15016) - Ends
                        //Modified by DSM-2018x.1 for PDF Views (Defect 25084) - Starts

                        //Modified by DSM-2018x.1 for PDF Views (Defect 25084) - ends
                        // Modified by DSM-2018x.5 for PDF Views (Req Id #32662) : Starts
                        //Modified by DSM-2018x.5 for PDF Views (Req -32136) - Starts
                        //if(pgV3Constants.TYPE_FABRICATEDPART.equals(strChkType) || (pgV3Constants.TYPE_DEVICEPRODUCTPART.equals(strChkType) && "GenDoc".equalsIgnoreCase(strPDFViewKind.trim())))
                        if(pgV3Constants.TYPE_FABRICATEDPART.equals(strChkType))
                        //Modified by DSM-2018x.5 for PDF Views (Req -32136) - Ends
                        // Modified by DSM-2018x.5 for PDF Views (Req Id #32662) : End
                        {
                            BOMSubstituteSAPBuffer.append("<TD width=\"80\">"+validateString1(sMatFunValue)+"</TD>");
                            //Modified by DSM(Sogeti)-2018x.2 for PDF Views (Req FAB - 7554,7555) - Starts
                        } else if(pgV3Constants.TYPE_FABRICATEDPART.equals(strChkType) && !strPDFViewKind.contains("supplier")){
                            BOMSubstituteSAPBuffer.append("<TD width=\"80\" align=\"left\" valign=\"top\"><B>I:</B>"+validateString1(sMatFunValue)+"</TD>");
                            //Added by DSM-2018x.5 for PDF Views (Req -32136) - Starts
                        }else if(pgV3Constants.TYPE_INTERMEDIATE_PRODUCT_PART.equals(strChkType)) {
                            BOMSubstituteSAPBuffer.append("<TD width=\"80\">"+validateString1(sMatFunValue)+"</TD>");
                            BOMSubstituteSAPBuffer.append("<TD width=\"80\">"+strReportedFunction+"</TD>");
                            //Added by DSM-2018x.5 for PDF Views (Req -32136) - Ends
                            //Modified by DSM-2018x.6 for PDF Views (Req Id #38412) - Starts
                        } else if ( pgV3Constants.TYPE_DEVICEPRODUCTPART.equals(strChkType)){
                            BOMSubstituteSAPBuffer.append("<TD width=\"80\"><B>F:</B>"+validateString1(sMatFunValue)+"<br/><B>RF:</B>"+validateString1(strReportedFunction)+"</TD>");
                        } else if ((pgV3Constants.TYPE_ASSEMBLEDPRODUCTPART.equals(strChkType) && !isCatiAPP)){
                            //Added/Modified  by DSM-Sogeti for (2018x.6 Apr CW 2022) PDF Views Req 42293-Starts
                            BOMSubstituteSAPBuffer.append("<TD width=\"80\" valign=\"top\">"+"<B>UoM:</B>"+validateString1(strNetWeightUOM)+"<BR></BR><B>F:</B>"+validateString1(sMatFunValue)+"<br/><B>RF:</B>"+validateString1(strReportedFunction)+"</TD>");
                        } else if(isCatiAPP) {
                        	BOMSubstituteSAPBuffer.append("<TD width=\"80\" valign=\"top\">"+"<B>UoM:</B>"+validateString1(strNetWeightUOM)+"<BR></BR><B>RF:</B>"+validateString1(strReportedFunction)+"<BR></BR><B>LG:</B>"+validateString1(wrapCharTable(strLayerGroupName,10))+"</TD>");
                        	// Modified by DSM-2022x.2 for PDF Views (Req:46173,46174) : Starts
                        	if(pgV3Constants.PDFVIEW_GENDOC.equalsIgnoreCase(strPDFViewKind)) {
                        		BOMSubstituteSAPBuffer.append("<TD width=\"95\" align=\"left\" valign=\"top\">"+validateString1(mapObject.get(pgV3Constants.SELECT_ATTRIBUTE_PGLIFECYCLESTATUS))+"</TD>");
                        		//Added/Modified  by DSM-Sogeti for (2018x.6 Apr CW 2022) PDF Views Req 42293-Ends
                        		//Modified by DSM-2018x.6 for PDF Views (Req Id #38412) - Ends
                        	}
                        	else {
                        		BOMSubstituteSAPBuffer.append("<TD width=\"95\" align=\"left\" valign=\"top\"><B>MS:</B>"+validateString1(mapObject.get(pgV3Constants.SELECT_ATTRIBUTE_PGLIFECYCLESTATUS))+"<BR></BR><B>RR:</B>"+validateString1(mapObject.get(pgPDFViewConstants.SELECT_ATTRIBUTE_PGMATERIALRESTRICTION))+"</TD>");
                        		BOMSubstituteSAPBuffer.append("<TD width=\"95\" align=\"left\" valign=\"top\">"+validateString1(wrapCharTable((String)mapObject.get(pgPDFViewConstants.SELECT_ATTRIBUTE_PGMATERIALRESTRICTIONCOMMENT),10))+"</TD>");

                        	}
                        	// Modified by DSM-2022x.2 for PDF Views (Req:46173,46174) : Ends


                        }
                        //Modified by DSM(Sogeti)-2018x.2 for PDF Views (Req FAB - 7554,7555) - Ends
                        //Added by DSM Sogeti for 2018x.6 Apr CW 2022 for PDF Views (Req -41367) - Starts
                        if(pgV3Constants.PDFVIEW_ALLINFO.equalsIgnoreCase(strPDFViewKind) && (pgV3Constants.TYPE_PGCUSTOMERUNITPART.equals(strChkType) || pgV3Constants.TYPE_PGCONSUMERUNITPART.equals(strChkType) || pgV3Constants.TYPE_PACKAGINGASSEMBLYPART.equals(strChkType) || pgV3Constants.TYPE_FABRICATEDPART.equals(strChkType) || (pgV3Constants.TYPE_PGINNERPACKUNITPART.equals(strChkType)))) {
                            BOMSubstituteSAPBuffer.append("<TD width=\"75\">"+validateString1(mapObject.get(pgPDFViewConstants.SELECT_ATTRIBUTE_PGNSPCG))+"</TD>");
                        }
                        //Added by DSM Sogeti for 2018x.6 Apr CW 2022 for PDF Views (Req -41367) - Ends
//						Vector vEBOMComments = (Vector)objemxPartChg.getCommentColumnDataFinishedProductForDSO(context, argsChg);
                        //Added for PDF Refactor
                        Vector vEBOMComments = (Vector)pgPDFViewHelper.executeMainClassMethod(context, "emxPart", "getCommentColumnDataFinishedProductForDSO", argsChg);
                        if((vEBOMComments !=null) && (vEBOMComments.size() >0) )
                            strComments = (String)vEBOMComments.get(0);
                        if(UIUtil.isNotNullAndNotEmpty(strComments)) {
                            strComments =strComments.replaceAll("[<]","#LESS_THAN");
                            strComments =strComments.replaceAll("[>]","#GREATER_THAN");
                        }
                        //Added by DSM(Sogeti)-2015x.5 for PDF Views (Defect ID-16705) - Starts
                        else{
                            strComments = DomainConstants.EMPTY_STRING;
                        }
                      //Added by DSM (Sogeti) for 22x.04 (Dec CW 2023) Requirement 47656,47667 - Start
					  //Modified by DSM (Sogeti) for 22x.04 (Dec CW 2023) Defect 55289 - Start
					   //Modified by DSM (Sogeti) for 22x.04 (Dec CW 2023) Defect 55638 - Start
						if(pgV3Constants.TYPE_STRUCTURED_ATS.equals(strChkType)){
						BOMSubstituteSAPBuffer.append("<TD width=\"120\">"+validateString1(wrapCharTable(strSATSReplaceProcessingNote,10))+"</TD>");		
						}
						 //Modified by DSM (Sogeti) for 22x.04 (Dec CW 2023) Defect 55638 - Ends
						//Modified by DSM (Sogeti) for 22x.04 (Dec CW 2023) Defect 55289 - Ends
					  //Added by DSM (Sogeti) for 22x.04 (Dec CW 2023) Requirement 47656,47667 - End
                        //Added by DSM(Sogeti)-2015x.5 for PDF Views (Defect ID-16705) - Ends
                        //Added/Modified  by DSM-Sogeti for (2018x.6 Apr CW 2022) PDF Views Req 42293
						else{
                        BOMSubstituteSAPBuffer.append("<TD width=\"120\">"+validateString1(wrapCharTable(strComments,10))+"</TD>");
						} 
                        //Modified by DSM-2018x.1 for defect 25084 - Starts
                        if (pgV3Constants.TYPE_MASTERPRODUCTPART.equals(strChkType)){
                            //Modified by DSM-2018x.1 for PDF Views (Defect 24953) - Starts
                            BOMSubstituteSAPBuffer.append("<TD width=\"65\">"+validateString1(strCurrentState)+"</TD>");
                            //Modified by DSM-2018x.1 for PDF Views (Defect 24953) - Starts
                        }
                        if(pgV3Constants.TYPE_INTERMEDIATE_PRODUCT_PART.equals(strChkType) || pgV3Constants.TYPE_FABRICATEDPART.equals(strChkType) || pgV3Constants.TYPE_ASSEMBLEDPRODUCTPART.equals(strChkType) || pgV3Constants.TYPE_DEVICEPRODUCTPART.equals(strChkType)){
                            if (UIUtil.isNotNullAndNotEmpty(strPDFViewKind) && !"GenDoc".equalsIgnoreCase(strPDFViewKind.trim())){
                                //Added by DSM(Sogeti)-2018x.2 for PDF Views Requirements - Starts
                                //BOMSubstituteSAPBuffer.append("<TD width=\"150\" align=\"left\" valign=\"top\"><B>Pha: </B>"+validateString1(strStage)+"<BR></BR><B>St:</B>"+validateString1(strState)+"</TD>");
                                if((pgV3Constants.TYPE_DEVICEPRODUCTPART.equals(strChkType) || pgV3Constants.TYPE_ASSEMBLEDPRODUCTPART.equals(strChkType)) && "allinfo".equalsIgnoreCase(strPDFViewKind.trim())) {
                                    //Modified by DSM-2018x.1.1 for defect 24953 - Starts
                                    BOMSubstituteSAPBuffer.append("<TD width=\"150\" align=\"left\" valign=\"top\"><B>C: </B>"+getPLIMaterialCertifications(context, strid)+"<BR></BR><B>Pha: </B>"+validateString1(strStage)+"<BR></BR><B>St:</B>"+validateString1(strCurrentState)+"</TD>");
                                    //Modified by DSM-2018x.1.1 for defect 24953 - Ends
                                }else {
                                    //Modified by DSM-2018x.1.1 for defect 24953 - Starts
                                    BOMSubstituteSAPBuffer.append("<TD width=\"150\" align=\"left\" valign=\"top\"><B>Pha: </B>"+validateString1(strStage)+"<BR></BR><B>St:</B>"+validateString1(strCurrentState)+"</TD>");
                                    //Modified by DSM-2018x.1.1 for defect 24953 - Ends
                                }
                                //Added by DSM(Sogeti)-2018x.2 for PDF Views Requirements - Ends
                            } else {
                                //Added by DSM(Sogeti)-2018x.2 for PDF Views Requirements - Starts
                                //BOMSubstituteSAPBuffer.append("<TD width=\"150\" align=\"left\" valign=\"top\"><B>Pha: </B>"+validateString1(strStage)+"</TD>");
                                if(pgV3Constants.TYPE_DEVICEPRODUCTPART.equals(strChkType) || pgV3Constants.TYPE_ASSEMBLEDPRODUCTPART.equals(strChkType)) {
                                    //Modified by DSM ( Sogeti) for 2018x.5 PDF Defect - 34749 : Starts
                                    BOMSubstituteSAPBuffer.append("<TD width=\"150\" align=\"left\" valign=\"top\"><B>C: </B>"+getPLIMaterialCertifications(context, strid)+"<BR></BR><B>Pha: </B>"+validateString1(strStage)+"<BR></BR><B>St: </B>"+validateString1(strCurrentState)+"</TD>");
                                    //Modified by DSM ( Sogeti) for 2018x.5 PDF Defect - 34749 : Ends
                                }else {
                                    // Modified by DSM-2018x.5 for PDF Views (Req Id #33106) : Starts
                                    if(pgV3Constants.TYPE_INTERMEDIATE_PRODUCT_PART.equals(strChkType) || pgV3Constants.TYPE_FABRICATEDPART.equals(strChkType)){
                                        BOMSubstituteSAPBuffer.append("<TD width=\"150\" align=\"left\" valign=\"top\"><B>Pha: </B>"+validateString1(strStage)+"<BR></BR><B>St:</B>"+validateString1(strCurrentState)+"</TD>");

                                    }else{
                                        BOMSubstituteSAPBuffer.append("<TD width=\"150\" align=\"left\" valign=\"top\"><B>Pha: </B>"+validateString1(strStage)+"</TD>");
                                    }
                                    // Modified by DSM-2018x.5 for PDF Views (Req Id #33106) : Starts
                                }

                                //Added by DSM(Sogeti)-2018x.2 for PDF Views Requirements - Ends
                            }
                            //Modified by DSM-2018x.1 for defect 25084 - Ends
                        }
                        //else if ((pgV3Constants.TYPE_MASTERPRODUCTPART.equals(strChkType)) || ((pgV3Constants.TYPE_PGMASTERPACKAGINGASSEMBLYPART.equals(strChkType)) && "GenDoc".equalsIgnoreCase(strPDFViewKind.trim()))){
                        else if (pgV3Constants.TYPE_MASTERPRODUCTPART.equals(strChkType)){
                            BOMSubstituteSAPBuffer.append("<TD width=\"70\">"+validateString1(strStage)+"</TD>");
                        }
                      //Added by DSM (Sogeti) for 22x.04 (Dec CW 2023) Requirement 47656,47667 - Start
					  //Modified by DSM (Sogeti) for 22x.04 (Dec CW 2023) Defect 55289 - Start
                        else if(pgV3Constants.TYPE_STRUCTURED_ATS.equals(strChkType)){
								BOMSubstituteSAPBuffer.append("<TD width=\"120\"><B>N:</B>"+validateString1(StrStructuredATSFormulaName)+"<BR></BR><B>R:</B>"+validateString1(StrStructuredATSFormulaRev)+"</TD>");
						}
						//Modified by DSM (Sogeti) for 22x.04 (Dec CW 2023) Defect 55289 - Ends
                      //Added by DSM (Sogeti) for 22x.04 (Dec CW 2023) Requirement 47656,47667 - End
                        else{
                            //Modified by DSM-2018x.1 for defect 25084 - Starts
                            //if (UIUtil.isNotNullAndNotEmpty(strPDFViewKind) && !"GenDoc".equalsIgnoreCase(strPDFViewKind.trim())){
                            if (UIUtil.isNotNullAndNotEmpty(strPDFViewKind) && ("GenDoc".equalsIgnoreCase(strPDFViewKind.trim()) || "allinfo".equalsIgnoreCase(strPDFViewKind.trim()))){
                                //Added/Modified by DSM(Sogeti)-2018x.5 for PDF Views Requirement and Defect 34398  - Starts
                                if("GenDoc".equalsIgnoreCase(strPDFViewKind.trim()) && (pgV3Constants.TYPE_PGMASTERINNERPACKUNITPART.equals(strChkType) || pgV3Constants.TYPE_PGMASTERCUSTOMERUNITPART.equals(strChkType))) {
                                    BOMSubstituteSAPBuffer.append("<TD width=\"150\">"+validateString1(strStage)+"</TD>");
                                }else {
                                    //Added/Modified by DSM(Sogeti)-2018x.5 for PDF Views Requirement and Defect 34398 - Ends
                                    //Modified by DSM(Sogeti)-2018x.1.1 for PDF Views Defect 24953 Starts
                                    BOMSubstituteSAPBuffer.append("<TD width=\"150\">"+validateString1(strCurrentState)+"</TD>");
                                    //Modified by DSM(Sogeti)-2018x.1.1 for PDF Views Defect 24953 Ends
                                    //Modified by DSM-2018x.5 for PDF Views Defect 32025 Starts
                                    //if (pgV3Constants.TYPE_PGCUSTOMERUNITPART.equals(strChkType)){
                                    BOMSubstituteSAPBuffer.append("<TD width=\"150\">"+validateString1(strStage)+"</TD>");
                                }
                                //}
                                //Modified by DSM-2018x.5 for PDF Views Defect 32025 Ends
                            } else {
                                //Added by DSM(Sogeti)-2018x.5 for PDF Views Requirement  - Starts
                                if (UIUtil.isNotNullAndNotEmpty(strPDFViewKind) && ("supplier".equalsIgnoreCase(strPDFViewKind.trim()) && pgV3Constants.TYPE_PACKAGINGASSEMBLYPART.equals(strChkType))){
                                    BOMSubstituteSAPBuffer.append("<TD width=\"150\">"+validateString1(strCurrentState)+"</TD>");
                                }
                                //Added by DSM(Sogeti)-2018x.5 for PDF Views Requirement  - Ends
                                BOMSubstituteSAPBuffer.append("<TD width=\"150\">"+validateString1(strStage)+"</TD>");
                            }
                            //Modified by DSM-2018x.1 for defect 25084 - Ends
                        }

                        String strRefDe = strRefDesig.replaceAll("[<]","#LESS_THAN");
                        strRefDe = strRefDe.replaceAll("[>]","#GREATER_THAN");
                        //Modified by DSM(Sogeti)-2015x.4 for PDF Views (Req - 14983,5691,11471,11425) - Starts
                        //Added by DSM Sogeti for 2022x.02 May CW for PDF Views (Req -46172) - Starts
                        if((pgV3Constants.TYPE_ASSEMBLEDPRODUCTPART.equals(strChkType) && !isCatiAPP) || (pgV3Constants.TYPE_DEVICEPRODUCTPART.equals(strChkType) && !"GenDoc".equalsIgnoreCase(strPDFViewKind.trim()))){
                            // Modified by DSM-2018x.5 for PDF Views (Req Id #32662) : Starts                        	
                        	BOMSubstituteSAPBuffer.append("<TD width=\"90\" align=\"left\" valign=\"top\">"+validateString1(wrapCharTable(strRefDe,10))+"</TD>");
                        	//Added by DSM Sogeti for 2022x.02 May CW for PDF Views (Req -46172) - Ends
                        	// Modified by DSM-2018x.5 for PDF Views (Req Id #32662) : End
                        } else if (pgV3Constants.TYPE_ASSEMBLEDPRODUCTPART.equals(strChkType) && isCatiAPP) {
                            BOMSubstituteSAPBuffer.append("<TD width=\"90\"><B>RD:</B>"+validateString1(wrapCharTable(strRefDe,10))+"<BR></BR><B>MF:</B>"+validateString1(sMatFunValue)+"</TD>");
                        }
                        else if((pgV3Constants.TYPE_DEVICEPRODUCTPART.equals(strChkType) && !"GenDoc".equalsIgnoreCase(strPDFViewKind.trim()))){
                            BOMSubstituteSAPBuffer.append("");
                        }
                        //Modified by DSM(Sogeti)-2015x.4 for PDF Views (Req -5696,5711,5692,5693)-Starts
                        //Modified by DSM-2018x.5 for PDF Views Defect 32025 Starts
                        //Modified by DSM Sogeti for 2018x.6 Apr CW 2022 for PDF Views (Req -46172) - Starts
                      //Modified by DSM (Sogeti) for 22x.04 (Dec CW 2023) Requirement 47656,47667 - Start
                        else if (!(pgV3Constants.TYPE_PGCUSTOMERUNITPART.equals(strChkType)) && !(pgV3Constants.TYPE_PGCONSUMERUNITPART.equals(strChkType))
                                && !((pgV3Constants.TYPE_PACKAGINGASSEMBLYPART.equals(strChkType))||
                                pgV3Constants.TYPE_FINISHEDPRODUCTPART.equals(strChkType) ||
                                pgV3Constants.TYPE_PGINNERPACKUNITPART.equals(strChkType) ||
                                pgV3Constants.TYPE_PGTRANSPORTUNITPART.equals(strChkType) || pgV3Constants.TYPE_PGMASTERCONSUMERUNITPART.equals(strChkType) || pgV3Constants.TYPE_FABRICATEDPART.equals(strChkType) || pgV3Constants.TYPE_STRUCTURED_ATS.equals(strChkType))){
                       //Modified by DSM (Sogeti) for 22x.04 (Dec CW 2023) Requirement 47656,47667 - End    
                        	//Modified by DSM-2018x.5 for PDF Views Defect 32025 Ends
                            BOMSubstituteSAPBuffer.append("<TD width=\"90\">"+validateString1(wrapCharTable(strRefDe,10))+"</TD>");
                        }
                        //Modified by DSM(Sogeti)-2015x.4 for PDF Views (Req -5696,5711,5692,5693)-Ends
                        //Modified by DSM(Sogeti)-2015x.4 for PDF Views (Req -14983,5691,11471,11425)-Ends
                        if(pgV3Constants.TYPE_FABRICATEDPART.equals(strChkType) || (!pgV3Constants.TYPE_INTERMEDIATE_PRODUCT_PART.equals(strChkType) && (showRestrictionData && pgV3Constants.PDFVIEW_ALLINFO.equalsIgnoreCase(strPDFViewKind)))){
                        	BOMSubstituteSAPBuffer.append("<TD width=\"90\" align=\"left\" valign=\"top\">"+validateString1(wrapCharTable(strRefDe,10))+"</TD>");
                            BOMSubstituteSAPBuffer.append("<TD width=\"95\" align=\"left\" valign=\"top\"><B>OSPD:</B>"+validateString1(strProductDensity)+"<BR></BR><B>DUoM:</B>"+validateString1(strDensityUOM)+"<BR></BR><B>OC:</B>"+validateString1(strOptComp)+"</TD>");
                        }//Added by DSM Sogeti for 2022x.02 May CW for PDF Views (Req -46172) - Ends
                        else if(pgV3Constants.TYPE_INTERMEDIATE_PRODUCT_PART.equals(strChkType) || pgV3Constants.TYPE_ASSEMBLEDPRODUCTPART.equals(strChkType) || pgV3Constants.TYPE_DEVICEPRODUCTPART.equals(strChkType) || pgV3Constants.TYPE_MASTERPRODUCTPART.equals(strChkType) ||  pgV3Constants.TYPE_PGMASTERINNERPACKUNITPART.equals(strChkType) || pgV3Constants.TYPE_PGMASTERPACKAGINGASSEMBLYPART.equals(strChkType) || pgV3Constants.TYPE_PGMASTERCUSTOMERUNITPART.equals(strChkType)){
                            //Added by DSM(Sogeti)-2018x.5 for PDF Views Requirements and Defect 34398 - Starts
                            if(pgV3Constants.TYPE_PGMASTERCUSTOMERUNITPART.equals(strChkType)) {
                                BOMSubstituteSAPBuffer.append("<TD width=\"95\" align=\"left\" valign=\"top\"><B>OSPD:</B>"+validateString1(strProductDensity)+"<BR></BR><B>DUOM:</B>"+validateString1(strDensityUOM)+"</TD>");
                            }else {
                                //Added by DSM(Sogeti)-2018x.5 for PDF Views Requirements and Defect 34398 - Ends
                                BOMSubstituteSAPBuffer.append("<TD width=\"95\" align=\"left\" valign=\"top\"><B>OSPD:</B>"+validateString1(strProductDensity)+"<BR></BR><B>DUoM:</B>"+validateString1(strDensityUOM)+"</TD>");
                            }
                        }
                        //Modified by DSM-2015x.4 for PDF Views  - Starts
                        //Modified by DSM-2018x.5 for PDF Views Defect 32025 Starts
                        //else if ((pgV3Constants.TYPE_PACKAGINGASSEMBLYPART.equals(strChkType) && !strPDFViewKind.contains("supplier"))|| pgV3Constants.TYPE_PGCONSUMERUNITPART.equals(strChkType)  || pgV3Constants.TYPE_FINISHEDPRODUCTPART.equals(strChkType) || pgV3Constants.TYPE_PGINNERPACKUNITPART.equals(strChkType) ||  pgV3Constants.TYPE_PGTRANSPORTUNITPART.equals(strChkType)){
                        else if (pgV3Constants.TYPE_FINISHEDPRODUCTPART.equals(strChkType) ||  pgV3Constants.TYPE_PGTRANSPORTUNITPART.equals(strChkType)){
                            BOMSubstituteSAPBuffer.append("<TD width=\"95\" align=\"left\" valign=\"top\"><B>RD:</B>"+validateString1(wrapCharTable(strRefDe,10))+"<BR></BR><B>OC:</B>"+validateString1(strOptComp)+"</TD>");
                        } else if( pgV3Constants.TYPE_PGCUSTOMERUNITPART.equals(strChkType) || pgV3Constants.TYPE_PGCONSUMERUNITPART.equals(strChkType) || pgV3Constants.TYPE_PGINNERPACKUNITPART.equals(strChkType) || pgV3Constants.TYPE_PGMASTERCONSUMERUNITPART.equals(strChkType) || pgV3Constants.TYPE_PACKAGINGASSEMBLYPART.equals(strChkType)) {
                            BOMSubstituteSAPBuffer.append("<TD width=\"95\" align=\"left\" valign=\"top\">"+validateString1(wrapCharTable(strRefDe,10))+"</TD>");
                            BOMSubstituteSAPBuffer.append("<TD width=\"95\" align=\"left\" valign=\"top\"><B>OSPD:</B>"+validateString1(strProductDensity)+"<BR></BR><B>DUoM:</B>"+validateString1(strDensityUOM)+"</TD>");
                            BOMSubstituteSAPBuffer.append("<TD width=\"95\" align=\"left\" valign=\"top\">"+validateString1(strOptComp)+"</TD>");
                        }
                        //Added/Modified  by DSM-Sogeti for (2018x.6 Apr CW 2022) PDF Views Req 42293-Starts
                        
                        if((pgV3Constants.TYPE_ASSEMBLEDPRODUCTPART.equals(strChkType) && !isCatiAPP) || pgV3Constants.TYPE_DEVICEPRODUCTPART.equals(strChkType) ){
                        	
                        	// Modified by DSM-2022x.2 for PDF Views (Req:46173,46174) : Starts
                        	if((pgV3Constants.PDFVIEW_GENDOC.equalsIgnoreCase(strPDFViewKind))) {
                        		BOMSubstituteSAPBuffer.append("<TD width=\"95\" align=\"left\" valign=\"top\">"+validateString1(mapObject.get(pgV3Constants.SELECT_ATTRIBUTE_PGLIFECYCLESTATUS))+"</TD>");
                        	}
                        	else {
                        		BOMSubstituteSAPBuffer.append("<TD width=\"95\" align=\"left\" valign=\"top\"><B>MS:</B>"+validateString1(mapObject.get(pgV3Constants.SELECT_ATTRIBUTE_PGLIFECYCLESTATUS))+"<BR></BR><B>RR:</B>"+validateString1( mapObject.get(pgPDFViewConstants.SELECT_ATTRIBUTE_PGMATERIALRESTRICTION))+"</TD>");
                        		BOMSubstituteSAPBuffer.append("<TD width=\"95\" align=\"left\" valign=\"top\">"+validateString1(wrapCharTable((String)mapObject.get(pgPDFViewConstants.SELECT_ATTRIBUTE_PGMATERIALRESTRICTIONCOMMENT),10))+"</TD>");
                        	}
                        	// Modified by DSM-2022x.2 for PDF Views (Req:46173,46174) : Ends
                            
                        }
                        //Added/Modified  by DSM-Sogeti for (2018x.6 Apr CW 2022) PDF Views Req 42293-Ends
                        //else if (pgV3Constants.TYPE_PGCUSTOMERUNITPART.equals(strChkType)){
                        //	BOMSubstituteSAPBuffer.append("<TD width=\"95\" align=\"left\" valign=\"top\"><B>RD:</B>"+validateString1(strRefDe)+"<BR></BR><B>OSPD:</B>"+validateString1(strProductDensity)+"</TD>");
                        //	BOMSubstituteSAPBuffer.append("<TD width=\"95\" align=\"left\" valign=\"top\"><B>DUoM:</B>"+validateString1(strDensityUOM)+"<BR></BR><B>OC:</B>"+validateString1(strOptComp)+"</TD>");
                        //}
                        //Modified by DSM-2018x.5 for PDF Views Defect 32025 Ends
                        //Modified by DSM-2015x.4 for PDF Views  - Ends
                        //Added by DSM Sogeti for 2022x.02 May CW for PDF Views (Req -46172) - Starts
                        if(showRestrictionData && pgV3Constants.PDFVIEW_ALLINFO.equalsIgnoreCase(strPDFViewKind))
                        {		
                        	BOMSubstituteSAPBuffer.append("<TD width=\"95\" align=\"left\" valign=\"top\"><B>RR:</B>"+validateString1(mapObject.get(pgPDFViewConstants.SELECT_ATTRIBUTE_PGRELATIONSHIPRESTRICTION))
                        	+"<BR></BR><B>RRC:</B>"+validateString1(wrapCharTable((String)mapObject.get(pgPDFViewConstants.SELECT_ATTRIBUTE_PGRELATIONSHIPRESTRICTIONCOMMENTS),10))+"</TD>");
                        }
                        //Added by DSM Sogeti for 2022x.02 May CW for PDF Views (Req -46172) - Ends
                        BOMSubstituteSAPBuffer.append("</TR>");
                    }
                    BOMSubstituteSAPBuffer.append("</TABLE><TR><TD><br /></TD></TR></TD></TR>");
                    //Form Substitutes table
					/*if("contractpackaging".equalsIgnoreCase(strPDFViewKind.trim()))
					{
					if(!(pgV3Constants.TYPE_ASSEMBLEDPRODUCTPART.equals(strChkType) || pgV3Constants.TYPE_DEVICEPRODUCTPART.equals(strChkType) || pgV3Constants.TYPE_FORMULATIONPART.equals(strChkType) || pgV3Constants.TYPE_INTERMEDIATE_PRODUCT_PART.equals(strChkType)))
					{
					StringBuilder sbBOMSubstituteData=new StringBuilder();
					sbBOMSubstituteData = getDSOSubstitutes(context,strObjectId,mlMain,strPDFViewKind);
					BOMSubstituteSAPBuffer.append(sbBOMSubstituteData);
					}
					}
					else*/
                    if(!("contractpackaging".equalsIgnoreCase(strPDFViewKind.trim()))){
                        StringBuilder sbBOMSubstituteData=new StringBuilder();
                        sbBOMSubstituteData = getDSOSubstitutes(context,strObjectId,mlMain,strPDFViewKind);
                        BOMSubstituteSAPBuffer.append(sbBOMSubstituteData);
                    }
                }
                //Modified by DSM(Sogeti)-2015x.4 for PDF Views (11470) - Ends
            }
            catch (MatrixException e){
                throw new MatrixException(e);
            }
            catch (Exception e){
                e.printStackTrace();
                throw new MatrixException(e);
            }finally{
                if(isPushContext){
                    ContextUtil.popContext(context);
                    isPushContext = false;
                }

            }
        }
        //Modoify Code Refactoring
        mlMain.clear();
        long endTime = new Date().getTime();
        System.out.println("Total Time has taken by the getBillOfMaterialSubstituteAndSAPBOMDataDSOTypes Method is-->"+(endTime-startTime));
        return BOMSubstituteSAPBuffer;
    }
    /**
     * Retrieve Reach statement information
     * @param context
     * @param args
     * @return
     * @throws Exception
     */
    private StringBuilder getReachStatement(Context context) throws Exception{
        long startTime = new Date().getTime();
        StringBuilder objectReachStatement= new StringBuilder();
        try{
            StringList slSelectObject = new StringList(1);
            slSelectObject.add(pgV3Constants.SELECT_ATTRIBUTE_PGPDFREACHSTATEMENT);
            MapList mlConfigObjectList = DomainObject.findObjects(context, pgV3Constants.TYPE_PGCONFIGURATIONADMIN,"pgV3ConfigurationMapping", "-", "*", pgV3Constants.VAULT_ESERVICEPRODUCTION, "", false, slSelectObject);
            if(null != mlConfigObjectList && mlConfigObjectList.size()>0){
                Map mConfigObjectMap = (Map)mlConfigObjectList.get(0);
                String strPGReachStatement = (String)mConfigObjectMap.get(pgV3Constants.SELECT_ATTRIBUTE_PGPDFREACHSTATEMENT);
                objectReachStatement.append("<TR><TD><br /></TD></TR>");
                objectReachStatement.append("<TR><TD class=\"new\"><TABLE cellspacing=\"0\" style=\"line-height: 16px;\" id=\"pgFinishedProductTable\">");
                objectReachStatement.append("<TR><TD><DIV  align=\"center\"><H3 style=\"font-size: 10pt;font-family:Arial;\">"+strPGReachStatement+"</H3></DIV></TD></TR>");
                objectReachStatement.append("</TABLE></TD></TR>");
            }
        }
        catch (Exception e){
            throw new MatrixException(e);
        }
        long endTime = new Date().getTime();
        System.out.println("Total Time has taken by the getReachStatement Method is-->"+(endTime-startTime));
        return objectReachStatement;
    }
    /**
     * Retrieve Material tab information for DSO types
     * @param context
     * @param args
     * @return
     * @throws Exception
     */
    //Modified by DSM(Sogeti)-2018x.5 for PDF Views Requirement  - Starts
    private StringBuilder getDSOMaterial(Context context,String strObjectId,String pdfViewType) throws Exception{
        long startTime = new Date().getTime();
        StringBuilder objectMaterialBuffer= new StringBuilder();
        try{
            Map Argmap = new HashMap();
            Argmap.put("objectId", strObjectId);
            //Modified by DSM-2015.2(Sogeti) for Defect 10063 on 13-June-2016-Starts
            Argmap.put("expandLevel", "0");
            String[] argsMat= JPO.packArgs(Argmap);
            //Modified by DSM-2015.1(Sogeti) for Defect 4210 on 13-June-2016-Starts
            //${CLASS:emxCPNMaterialBase} objMaterial = new ${CLASS:emxCPNMaterialBase}(context, argsMat);
            //modified  by DSM 2015x.2 PDF Views Defect 10789-Starts
            String strContext = context.getUser();
            boolean checkuser=false;
            if(pgV3Constants.PERSON_USER_AGENT.equals(strContext)){
                checkuser=true;
                ContextUtil.popContext(context);
            }
            //emxCPNMaterial_mxJPO objMaterial = new emxCPNMaterial_mxJPO(context, argsMat);
            //Modified by DSM-2015.1(Sogeti) for Defect 4210 on 13-June-2016-Ends
            //Modified by DSM-2015.2(Sogeti) for Defect 10063 on 13-June-2016-Ends
            //			MapList mlMaterial = (MapList)objMaterial.getAllRelatedMaterials(context, argsMat);
            //Added for PDF Refactor
            //Modified by DSM (Sogeti) 2018x.5 Requirement - Starts
            DomainObject domObj = DomainObject.newInstance(context, strObjectId);
            String partType = domObj.getInfo(context, DomainConstants.SELECT_TYPE);
            MapList mlMaterial = null;
            if(pgV3Constants.TYPE_PGANCILLARYPACKAGINGMATERIALPART.equals(partType)) {
				mlMaterial = (MapList)pgPDFViewHelper.executeMainClassMethod(context, "emxCPNMaterial", "getAllRelatedMaterials", argsMat);
            } else {
                mlMaterial = (MapList)pgPDFViewHelper.executeMainClassMethod(context, "emxCPNMaterial", "getAllRelatedMaterials", argsMat);
            }
            //Modified by DSM (Sogeti) 2018x.5 Requirement - Ends
            if(checkuser){
                ContextUtil.pushContext(context);
            }
            //modified  by DSM 2015x.2 PDF Views Defect 10789-Ends
            boolean havingMaterialData=false;
            if(mlMaterial!=null && mlMaterial.size()>0){
                havingMaterialData=true;
            }
            if(havingMaterialData){
                objectMaterialBuffer.append("<TR><TD><TABLE class=\"WordWrappdf\" cellspacing=\"0\" width=\"1000px\" id=\"pgFinishedProductTable\">");
                objectMaterialBuffer.append("<thead>");
                //Added/Modified  by DSM-Sogeti for (2018x.6 Apr CW 2022) PDF Views Req 41366-Starts
                if(pgPDFViewConstants.CONST_ALLINFO.equalsIgnoreCase(pdfViewType) && (pgV3Constants.TYPE_PGANCILLARYPACKAGINGMATERIALPART.equals(partType) || pgV3Constants.TYPE_PACKAGINGMATERIALPART.equals(partType))) {
                    objectMaterialBuffer.append("<TR><TD colspan='15' class=\"new\" ><font size='4'><b>Substances & Materials <br /></b></font></TD></TR>");
                    objectMaterialBuffer.append("<TR>");
                    objectMaterialBuffer.append("<TH  width=\"90px\" align=\"center\"><B>Name</B></TH>");
                    objectMaterialBuffer.append("<TH  width=\"60px\" align=\"center\"><B>Quantity UoM</B></TH>");
                    objectMaterialBuffer.append("<TH  width=\"75px\" align=\"center\"><B>Target<BR></BR>Percentage<BR></BR>Weight by<BR></BR>Weight</B></TH>");
                    objectMaterialBuffer.append("<TH  width=\"90px\" align=\"center\"><B>NSPCG</B></TH>");
                }else {
                    objectMaterialBuffer.append("<TR><TD colspan='14' class=\"new\" ><font size='4'><b>Substances & Materials <br /></b></font></TD></TR>");
                    objectMaterialBuffer.append("<TR>");
                    objectMaterialBuffer.append("<TH  width=\"90px\" align=\"center\"><B>Name</B></TH>");
                    objectMaterialBuffer.append("<TH  width=\"60px\" align=\"center\"><B>Quantity UoM</B></TH>");
                    objectMaterialBuffer.append("<TH  width=\"75px\" align=\"center\"><B>Target<BR></BR>Percentage<BR></BR>Weight by<BR></BR>Weight</B></TH>");
                } //Added/Modified  by DSM-Sogeti for (2018x.6 Apr CW 2022) PDF Views Req 41366-Ends
                objectMaterialBuffer.append("<TH  width=\"60px\" align=\"center\"><B>Manufacturer</B></TH>");
                objectMaterialBuffer.append("<TH  width=\"100px\" align=\"center\"><B>Title(T)<BR></BR>Type(TY)</B></TH>");
                objectMaterialBuffer.append("<TH  width=\"60px\" align=\"center\"><B>Seq</B></TH>");
                objectMaterialBuffer.append("<TH  width=\"90px\" align=\"center\"><B>Description</B></TH>");
                //Modified by DSM(Sogeti)-2018x.6 May CW 2022 for PDF Views (Req-42935) - Starts
                if(pgV3Constants.TYPE_DEVICEPRODUCTPART.equals(partType)) {
                    objectMaterialBuffer.append("<TH  width=\"60px\" align=\"center\"><B>Minimum<BR></BR>Percentage<BR></BR>Weight by<BR></BR>Weight</B></TH>");
                    objectMaterialBuffer.append("<TH  width=\"60px\" align=\"center\"><B>Maximum<BR></BR>Percentage<BR></BR>Weight by<BR></BR>Weight</B></TH>");
                    objectMaterialBuffer.append("<TH  width=\"60px\" align=\"center\"><B>Material Legacy<BR></BR>Environmental<BR></BR>Class</B></TH>");
                    objectMaterialBuffer.append("<TH  width=\"75px\" align=\"center\"><B>Post-<BR></BR>Consumer<BR></BR>Recycled<BR></BR>Content (%)(Con)</B><BR></BR><b>Post-<BR/>Industrial<BR/>Recycled<BR/>Content(%)(Ind)</b></TH>");
                    objectMaterialBuffer.append("<TH  width=\"75px\" align=\"center\"><B>Additional<BR></BR>Information (AI)<BR></BR>State(St)</B></TH>");
                } else {
                    objectMaterialBuffer.append("<TH  width=\"75px\" align=\"center\"><B>Trade Name</B></TH>");
                    
					objectMaterialBuffer.append("<TH  width=\"85px\" align=\"center\"><B>Layer /<BR></BR>Composition<BR></BR>Description</B></TH>");
                    objectMaterialBuffer.append("<TH  width=\"60px\" align=\"center\"><B>Minimum<BR></BR>Percentage<BR></BR>Weight by<BR></BR>Weight</B></TH>");
                    objectMaterialBuffer.append("<TH  width=\"60px\" align=\"center\"><B>Maximum<BR></BR>Percentage<BR></BR>Weight by<BR></BR>Weight</B></TH>");
                    objectMaterialBuffer.append("<TH  width=\"75px\" align=\"center\"><B>Post-<BR></BR>Consumer<BR></BR>Recycled<BR></BR>Content (%)(Con)</B><BR></BR><b>Post-<BR/>Industrial<BR/>Recycled<BR/>Content(%)(Ind)</b></TH>");
                    objectMaterialBuffer.append("<TH  width=\"100px\" align=\"center\"><B>Comments(C)<BR></BR>State(St)</B></TH>");
                }
                //Modified by DSM(Sogeti)-2018x.6 May CW 2022 for PDF Views (Req-42935) - Ends
                objectMaterialBuffer.append("</TR></thead>");
                //mlMaterial.addSortKey("name", "ascending", "String");
                //mlMaterial.sort();
                //Modified by DSM 2015x.5 (Sogeti) for Defect-16593 -Starts
                int nMapMPP = mlMaterial.size();
                Map mpMaterials=null;
                //Modified by DSM (Sogeti) 2018x.5 Requirement - Starts
                String strConId = null;
                String strArrIds[] = new String[1];
                String strSequenceNumber = null;
                MapList mlConnectedObjTypes = null;
                Map mapInfo = null;
                MapList mlMaterialsSort=new MapList();
                for (int i = 0; i <nMapMPP; i++){
                    mpMaterials = (Map) mlMaterial.get(i);
                    //Modified by DSM 2015x.5.1 October Downtime (Sogeti) for Defect-20462 -Starts
                    if(pgV3Constants.TYPE_PGANCILLARYPACKAGINGMATERIALPART.equals(partType)) {
                        strConId =(String)mpMaterials.get("id[connection]");
                        strArrIds[0]=strConId;
                        mlConnectedObjTypes = DomainRelationship.getInfo(context, strArrIds, StringList.create(pgV3Constants.SELECT_ATTRIBUTE_PGSEQUENCE));
                        if(mlConnectedObjTypes!=null && !mlConnectedObjTypes.isEmpty()) {
                            mapInfo=(Map)mlConnectedObjTypes.get(0);
                            strSequenceNumber = (String) mapInfo.get(pgV3Constants.SELECT_ATTRIBUTE_PGSEQUENCE);
                        }
                    } else {
                        strSequenceNumber=(String)mpMaterials.get("attribute["+pgPDFViewConstants.strSequence1+"]");
                    }
                    mpMaterials.put("Sequence Number", strSequenceNumber);
                    mlMaterialsSort.add(mpMaterials);
                }
                //Modified by DSM (Sogeti) 2018x.5 Requirement - Ends
                mlMaterialsSort.addSortKey("Sequence Number", "ascending", "String");
                mlMaterialsSort.sortStructure();
                //Modified by DSM 2015x.5 (Sogeti) for Defect-16593 -Ends
                //Modified by DSM 2015x.5.1 October Downtime (Sogeti) for Defect-20462 -Ends

                //Added by DSM 2018x.5 for Defect-33188 -Starts
                StringList selectStmtMat = new StringList(9);
                selectStmtMat.add(DomainConstants.SELECT_TYPE);
                //Added by DSM 2018x.5 for Defect-33188 -Ends
                selectStmtMat.add(DomainConstants.SELECT_NAME);
                selectStmtMat.add(DomainConstants.SELECT_DESCRIPTION);
                selectStmtMat.add(pgV3Constants.SELECT_ATTRIBUTE_TITLE);
                selectStmtMat.add(pgV3Constants.SELECT_ATTRIBUTE_MARKETINGNAME);
                selectStmtMat.add(pgV3Constants.SELECT_ATTRIBUTE_PGPOSTCONSUMERRECYCLEDCONTENT);
                selectStmtMat.add(pgV3Constants.SELECT_ATTRIBUTE_PGMATERIALLEGACYENVCLASS);
                //Added  by DSM(Sogeti)-2018x.3 for PDF Views Req (5699,5729,7554,5698,5728,8196,5705,5695,5725) - Starts
                selectStmtMat.add(pgPDFViewConstants.SELECT_ATTRIBUTE_PERCENTPOSTINDUSTRIALRECYCLATE);
                //Added  by DSM(Sogeti)-2018x.3 for PDF Views Req (5699,5729,7554,5698,5728,8196,5705,5695,5725) - Ends
                //Modified by DSM 2015x.1.2 (Sogeti) for defect-7983 -Starts
                selectStmtMat.add(pgV3Constants.SELECT_ATTRIBUTE_MANUFACTURER);
                //Modified by DSM 2015x.1.2 (Sogeti) for defect-7983 -Ends
                //Modified DSM-2018x.5 for PDF Views (Req Id #32001) : Starts
                selectStmtMat.add("from["+pgV3Constants.RELATIONSHIP_PGMATERIALTOPGPLIENVIRONMENTALCLASS+"].to.name");
                //Modified DSM-2018x.5 for PDF Views (Req Id #32405) : Starts
                selectStmtMat.add(DomainConstants.SELECT_TYPE);
                selectStmtMat.add(DomainConstants.SELECT_CURRENT);
                selectStmtMat.add(DomainConstants.SELECT_POLICY);
                //Modified DSM-2018x.5 for PDF Views (Req Id #32405) : Ends
                //Modified DSM-2018x.5 for PDF Views (Req Id #32001) : End
                StringList selectStmtsRel = new StringList(6);
                selectStmtsRel.add(pgV3Constants.SELECT_ATTRIBUTE_PGMATERIALLAYER);
                selectStmtsRel.add(pgV3Constants.SELECT_ATTRIBUTE_PGMINIMUMPERCENTWEIGHTBYWEIGHT);
                selectStmtsRel.add(pgV3Constants.SELECT_ATTRIBUTE_PGMAXIMUMPERCENTWEIGHTBYWEIGHT);
                selectStmtsRel.add(pgV3Constants.SELECT_ATTRIBUTE_QUANTITY);
                selectStmtsRel.add(pgV3Constants.SELECT_ATTRIBUTE_COMMENT);
                //Modified by DSM 2015x.5 (Sogeti) for Defect-16593 -starts
                selectStmtsRel.add(pgV3Constants.SELECT_ATTRIBUTE_PGSEQUENCE);
                //Modified by DSM 2015x.5 (Sogeti) for Defect-16593 -Ends


                //Modified by DSM 2018x.5 for Defect-33188 : Starts
                selectStmtsRel.add(pgV3Constants.SELECT_ATTRIBUTE_QUANTITYUNITOFMEASURE);
                //Added/Modified  by DSM-Sogeti for (2018x.6 Apr CW 2022) PDF Views Req 41366-Starts
                selectStmtsRel.add(pgPDFViewConstants.SELECT_ATTRIBUTE_PGNSPCG);
                //Added/Modified  by DSM-Sogeti for (2018x.6 Apr CW 2022) PDF Views Req 41366-End
                String strType = null;
                //Modified by DSM 2018x.5 for Defect-33188 : Ends
                String strpgMinimumPercentWeightbyWeight = "";
                String strpgMaximumPercentWeightbyWeight = "";
                String strQuantity="";
                String strMatlLayer="";
                String strObjId = null;
                String strRelId = null;
                String strMaterialName = null;
                String strMaterialTitle = null;
                String strMaterialDesc = null;
                String strTradeName = null;
                String strMatlPCRC = null;

                //Modified by DSM 2018x.5 for Defect-33188 - Starts
                String strQuantityUoM = null;
                String strState = null;
                //Modified by DSM 2018x.5 for Defect-33188 -Ends

                //Added  by DSM(Sogeti)-2018x.3 for PDF Views Req (5699,5729,7554,5698,5728,8196,5705,5695,5725) - Starts
                String strMatlPPIR = null;
                //Added  by DSM(Sogeti)-2018x.3 for PDF Views Req (5699,5729,7554,5698,5728,8196,5705,5695,5725) - Ends
                String strMatlComm = null;
                String strmtrl = null;
                //Modified by DSM 2015x.5 (Sogeti) for Defect-16593 -Starts
                String strMatlSeq = null;
                //Modified DSM-2018x.5 for PDF Views (Req Id #32405) : Starts
                String strCurrent = null;
                String strPolicy = null;
                //Added by DSM-Sogeti for (2018x.6 Apr CW 2022) PDF Views Req 41366-Starts
                String strpgNSPCG = DomainConstants.EMPTY_STRING;
                //Added by DSM-Sogeti for (2018x.6 Apr CW 2022) PDF Views Req 41366-Ends
                //Modified DSM-2018x.5 for PDF Views (Req Id #32405) : Starts
                //Modified by DSM 2015x.5 (Sogeti) for Defect-16593 -Ends
                //Commented by DSM 2015x.1.2 (Sogeti) for defect-7983 -Starts
				/*
					StringList busSelects = new StringList(2);
					busSelects.addElement(DomainConstants.SELECT_NAME);
					busSelects.addElement(pgV3Constants.SELECT_ATTRIBUTE_PGSHORTCODE);
					MapList mlConnectedMaterial = new MapList();
				 */
                //Commented by DSM 2015x.1.2 (Sogeti) for defect-7983 -Ends
                MapList mlToId = new MapList();
                //Modified by DSM 2018x.5 for DEF 33188 -Starts
                MapList mlObjDetails = new MapList();
                //Modified by DSM 2018x.5 for DEF 33188 -End
                Map mapObject = new HashMap();
                Map mpMatl = new HashMap();
                Map mData = new HashMap();
                StringList busSelect = new StringList(1);
                busSelect.add(DomainConstants.SELECT_NAME);
                //Modified by DSM 2018x.5 for DEF 33188 -Starts
                busSelect.add(DomainConstants.SELECT_CURRENT);
                //Modified by DSM 2018x.5 for DEF 33188 -End
                Map mpConnectedEBOMParents = new HashMap();
                //Modified by DSM 2015x.5 (Sogeti) for Defect-16593 -Starts
                for (int i = 0;i< mlMaterialsSort.size(); i++){
                    mapObject = (Map) mlMaterialsSort.get(i);
                    //Modified by DSM 2015x.5 (Sogeti) for Defect-16593 -Ends
                    strObjId = (String)mapObject.get(DomainConstants.SELECT_ID);
                    DomainObject doObj = DomainObject.newInstance(context, strObjId);
                    mpMatl =  (Map)doObj.getInfo(context, selectStmtMat);
                    strRelId = (String)mapObject.get("id[connection]");
                    String[] relargs = new String[1];
                    relargs[0] = strRelId;
                    mlToId = (MapList)DomainRelationship.getInfo(context, relargs,selectStmtsRel);
                    //Modified DSM-2018x.5 for PDF Views (Req Id #32405) : Starts
                    String attrQUoM = PropertyUtil.getSchemaProperty(context, DomainSymbolicConstants.SYMBOLIC_attribute_QuantityUnitOfMeasure);
                    String sQUoMVal = DomainRelationship.getAttributeValue(context, strRelId, attrQUoM);
                    //Modified DSM-2018x.5 for PDF Views (Req Id #32405) : Ends
                    //Modified by DSM 2018x.5 for DEF 33188 -Starts
                    mlObjDetails =(MapList)DomainObject.getInfo(context,relargs,busSelect);
                    //Modified by DSM 2018x.5 for DEF 33188 -Ends
                    if(null != mlToId && mlToId.size()>0){
                        for(int j=0;j<mlToId.size();j++){
                            mData = (Map)mlToId.get(j);
                            //Modified by DSM 2018x.5 for DEF 33188 -Starts
                            mlToId = (MapList)DomainRelationship.getInfo(context, relargs,selectStmtsRel);
                            //Modified by DSM 2018x.5 for DEF 33188 -Ends

                            strMatlLayer = (String)mData.get(pgV3Constants.SELECT_ATTRIBUTE_PGMATERIALLAYER);
                            strpgMinimumPercentWeightbyWeight=(String)mData.get(pgV3Constants.SELECT_ATTRIBUTE_PGMINIMUMPERCENTWEIGHTBYWEIGHT);
                            strpgMaximumPercentWeightbyWeight=(String)mData.get(pgV3Constants.SELECT_ATTRIBUTE_PGMAXIMUMPERCENTWEIGHTBYWEIGHT);
                            strQuantity = (String)mData.get(pgV3Constants.SELECT_ATTRIBUTE_QUANTITY);
                            strMatlComm = (String)mData.get(pgV3Constants.SELECT_ATTRIBUTE_COMMENT);
                            //Modified by DSM 2015x.5 (Sogeti) for Defect-16593 -Starts
                            strMatlSeq = (String)mData.get(pgV3Constants.SELECT_ATTRIBUTE_PGSEQUENCE);
                            //Modified by DSM 2015x.5 (Sogeti) for Defect-16593 -Ends

                            //Modified by DSM 2018x.5 for DEF 33188 -Starts
                            strQuantityUoM = (String)mData.get(pgV3Constants.SELECT_ATTRIBUTE_QUANTITYUNITOFMEASURE);
                            //Modified by DSM 2018x.5 for DEF 33188 -Ends
                            //Added  by DSM-Sogeti for (2018x.6 Apr CW 2022) PDF Views Req 41366-Starts
                            strpgNSPCG = (String)mData.get(pgPDFViewConstants.SELECT_ATTRIBUTE_PGNSPCG);
                            //Added by DSM-Sogeti for (2018x.6 Apr CW 2022) PDF Views Req 41366-End

                        }
                    }
                    objectMaterialBuffer.append("<TR align=\"centre\" class=\"WordWrappdf\">");

                    //Modified by DSM 2018x.5 for DEF 33188 -Starts
                    strState = (String)mpMatl.get(DomainConstants.SELECT_CURRENT);
                    //Modified by DSM 2018x.5 for DEF 33188 -Ends

                    strType = (String)mpMatl.get(DomainConstants.SELECT_TYPE);

                    strMaterialName = (String)mpMatl.get(DomainConstants.SELECT_NAME);
                    strMaterialTitle = (String)mpMatl.get(pgV3Constants.SELECT_ATTRIBUTE_TITLE);
                    strMaterialDesc = (String)mpMatl.get(DomainConstants.SELECT_DESCRIPTION);
                    //Modified DSM-2018x.5 for PDF Views (Req Id #32405) : Starts
                    strType = (String)mpMatl.get(DomainConstants.SELECT_TYPE);
                    strCurrent = (String)mpMatl.get(DomainConstants.SELECT_CURRENT);
                    //Modified DSM-2018x.5 for PDF Views (Req Id #32405) : Starts
                    strPolicy = (String)mpMatl.get(DomainConstants.SELECT_POLICY);
                    String strObjectCurrentDisplay = EnoviaResourceBundle.getStateI18NString(context, strPolicy,strCurrent, context.getLocale().getLanguage());
                    //Modified DSM-2018x.5 for PDF Views (Req Id #32405) : Ends
                    //Modified DSM-2018x.5 for PDF Views (Req Id #32405) : Ends
                    //Added by DSM(Sogeti)-2015x.5 for PDF Views (Defect ID-16705) - Starts
                    if(UIUtil.isNullOrEmpty(strMaterialDesc)){
                        strMaterialDesc = DomainConstants.EMPTY_STRING;
                    }
                    if(UIUtil.isNullOrEmpty(strMatlComm)){
                        strMatlComm = DomainConstants.EMPTY_STRING;
                    }
                    if(UIUtil.isNullOrEmpty(strMatlSeq)){
                        strMatlSeq = DomainConstants.EMPTY_STRING;
                    }
                    //Added by DSM(Sogeti)-2015x.5 for PDF Views (Defect ID-16705) - Ends
                    strTradeName = (String)mpMatl.get(pgV3Constants.SELECT_ATTRIBUTE_MARKETINGNAME);
                    strMatlPCRC = (String)mpMatl.get(pgV3Constants.SELECT_ATTRIBUTE_PGPOSTCONSUMERRECYCLEDCONTENT);
                    //Modified  by DSM(Sogeti)-2018x.3 for PDF Views Req (5699,5729,7554,5698,5728,8196,5705,5695,5725) - Starts
                    strMatlPPIR = (String)mpMatl.get(pgPDFViewConstants.SELECT_ATTRIBUTE_PERCENTPOSTINDUSTRIALRECYCLATE);
                    //Modified  by DSM(Sogeti)-2018x.3 for PDF Views Req (5699,5729,7554,5698,5728,8196,5705,5695,5725) - Ends
                    //Modified DSM-2018x.5 for PDF Views (Req Id #32001) : Starts
                    strmtrl = (String)mpMatl.get("from["+pgV3Constants.RELATIONSHIP_PGMATERIALTOPGPLIENVIRONMENTALCLASS+"].to.name");
                    //Modified DSM-2018x.5 for PDF Views (Req Id #32001) : End
                    //Modified by DSM 2015x.1.2 (Sogeti) for defect-7983 -Starts
                    String sManufacturer = (String)mpMatl.get(pgV3Constants.SELECT_ATTRIBUTE_MANUFACTURER);
					/*
							mlConnectedMaterial = new MapList();
							mlConnectedMaterial = doObj.getRelatedObjects(context, //Context
																pgV3Constants.RELATIONSHIP_PGMATERIALTOCOMPANY, //relPattern
																"*", //typePattern
																busSelects, //objectSelects
																null,// relationshipSelects
																false, //getTo - Get Parent Data
																true, //getFrom - Get Child Data
																(short)1, //recurseToLevel
																"", //objectWhere
																""); //relationshipWhere
							StringList slCmpName = new StringList();
							StringList slCmpID  = new StringList();
							String strCmpName = "";
							String strCmpID  = "";

						 if(mlConnectedMaterial != null && mlConnectedMaterial.size() > 0) {
							for(Iterator connectedMatItr = mlConnectedMaterial.iterator(); connectedMatItr.hasNext();) {
								 Map mpConnectedEBOMParents = (Map)connectedMatItr.next();
								 strCmpName = (String)mpConnectedEBOMParents.get(DomainConstants.SELECT_NAME);
								 strCmpID = (String)mpConnectedEBOMParents.get(pgV3Constants.SELECT_ATTRIBUTE_PGSHORTCODE);
								 slCmpName.add(strCmpName);
								 slCmpID.add(strCmpID);
								}
						}
					 */
                    //Modified by DSM 2018x.5 for Defect 33188 -Starts

                    if(UIUtil.isNullOrEmpty(strQuantityUoM)){
                        strQuantityUoM = DomainConstants.EMPTY_STRING;
                    }
                    if(UIUtil.isNullOrEmpty(strState)){
                        strState = DomainConstants.EMPTY_STRING;
                    }
                    objectMaterialBuffer.append("<TD align=\"center\" width=\"90px\">"+validateString1(strMaterialName)+"</TD>");
                    objectMaterialBuffer.append("<TD align=\"center\" width=\"60px\">"+validateString1(strQuantityUoM)+"</TD>");
                    objectMaterialBuffer.append("<TD align=\"center\" width=\"75px\">"+validateString1(strQuantity)+"</TD>");
                    //Added by DSM-Sogeti for (2018x.6 Apr CW 2022) PDF Views Req 41366-Starts
                    if(pgPDFViewConstants.CONST_ALLINFO.equalsIgnoreCase(pdfViewType) && (pgV3Constants.TYPE_PGANCILLARYPACKAGINGMATERIALPART.equals(partType) || pgV3Constants.TYPE_PACKAGINGMATERIALPART.equals(partType))) {
                        objectMaterialBuffer.append("<TD align=\"center\" width=\"90px\">"+validateString1(strpgNSPCG)+"</TD>");
                    }
                    //Added/Modified  by DSM-Sogeti for (2018x.6 Apr CW 2022) PDF Views Req 41366-Ends
                    objectMaterialBuffer.append("<TD align=\"center\" width=\"60px\">"+validateString1(wrapCharTable(sManufacturer,10))+"</TD>");
                    objectMaterialBuffer.append("<TD align=\"left\" width=\"100px\"><B>T:</B>"+validateString1(wrapCharTable(strMaterialTitle,10))+"<BR></BR><B>TY:</B>"+validateString1(strType)+"</TD>");
                    objectMaterialBuffer.append("<TD align=\"center\" style=\"max-width:120px\" width=\"60px\">"+validateString1(strMatlSeq)+"</TD>");
                    strMaterialDesc =strMaterialDesc.replaceAll("[<]","#LESS_THAN");
                    strMaterialDesc=strMaterialDesc.replaceAll("[>]","#GREATER_THAN");
                    objectMaterialBuffer.append("<TD align=\"center\" width=\"90px\">"+validateString1(wrapCharTable(strMaterialDesc,10))+"</TD>");
                    //Modified by DSM(Sogeti)-2018x.6 May CW 2022 for PDF Views (Req-42935) - Starts
                    strMatlComm =strMatlComm.replaceAll("[<]","#LESS_THAN");
                    strMatlComm=strMatlComm.replaceAll("[>]","#GREATER_THAN");
                    if(pgV3Constants.TYPE_DEVICEPRODUCTPART.equals(partType)) {
                        objectMaterialBuffer.append("<TD align=\"center\" width=\"60px\">"+validateString1(strpgMinimumPercentWeightbyWeight)+"</TD>");
                        objectMaterialBuffer.append("<TD align=\"center\" width=\"60px\">"+validateString1(strpgMaximumPercentWeightbyWeight)+"</TD>");
                        objectMaterialBuffer.append("<TD align=\"center\" width=\"60px\">"+validateString1(wrapCharTable(strmtrl,10))+"</TD>");
                        objectMaterialBuffer.append("<TD align=\"center\" width=\"75px\"><B>Con:</B>"+validateString1(strMatlPCRC)+"<BR></BR><B>Ind:</B>"+validateString1(strMatlPPIR)+"</TD>");
                        objectMaterialBuffer.append("<TD align=\"left\" width=\"90px\"><B>AI:</B>"+validateString1(wrapCharTable(strMatlComm,10))+"<BR></BR><B>St:</B>"+validateString1(strState)+"</TD>");
                    }else {
                        objectMaterialBuffer.append("<TD align=\"center\" width=\"75px\">"+validateString1(wrapCharTable(strTradeName,10))+"</TD>");
                        
						objectMaterialBuffer.append("<TD align=\"center\" width=\"85px\">"+validateString1(wrapCharTable(strMatlLayer,10))+"</TD>");
                        objectMaterialBuffer.append("<TD align=\"center\" width=\"60px\">"+validateString1(strpgMinimumPercentWeightbyWeight)+"</TD>");
                        objectMaterialBuffer.append("<TD align=\"center\" width=\"60px\">"+validateString1(strpgMaximumPercentWeightbyWeight)+"</TD>");
                        objectMaterialBuffer.append("<TD align=\"center\" width=\"75px\"><B>Con:</B>"+validateString1(strMatlPCRC)+"<BR></BR><B>Ind:</B>"+validateString1(strMatlPPIR)+"</TD>");
                        objectMaterialBuffer.append("<TD align=\"left\" width=\"90px\"><B>C:</B>"+validateString1(wrapCharTable(strMatlComm,10))+"<BR></BR><B>St:</B>"+validateString1(strState)+"</TD>");
                    }
                    //Modified by DSM(Sogeti)-2018x.6 May CW 2022 for PDF Views (Req-42935) - Ends
                    objectMaterialBuffer.append("</TR>");
                }
                objectMaterialBuffer.append("</TABLE><TR><TD><br /></TD></TR></TD></TR>");
            }
            //Modoify Code Refactoring
            mlMaterial.clear();
        }
        catch (Exception e){
            e.printStackTrace();
            throw new MatrixException(e);
        }
        long endTime = new Date().getTime();
        System.out.println("Total Time has taken by the getDSOMaterial Method is-->"+(endTime-startTime));
        return objectMaterialBuffer;
    }
    //Modified by DSM(Sogeti)-2018x.5 for PDF Views Requirement  - Ends
    //Added by DSM-2015x.1 for PDF Views (Req ID-8196,8197) on 15-Jan-2016 - Starts
    /**
     * This method gets Enterprise and Equivalent Parts Table for MEP and SEP
     * @param Context - Context user
     * @param String - ObjectID, Dynamic tableIdString for Dynamic tables
     * @return StringBuilder - returns list of Enterprise and Equivalent Parts
     * @throws Exception if fails
     **/
    private StringBuilder getManufactureEquivalentTable(Context context,String strObjectId,String tableIdString) throws Exception{
        long startTime = new Date().getTime();
        StringBuilder sbEnterprisePartsTable= new StringBuilder();
        StringList objectSelects = new StringList(8);
        objectSelects.add(DomainConstants.SELECT_ID);
        objectSelects.add(DomainConstants.SELECT_NAME);
        objectSelects.add(DomainConstants.SELECT_REVISION);
        objectSelects.add(DomainConstants.SELECT_TYPE);
        objectSelects.add(DomainConstants.SELECT_DESCRIPTION);
        objectSelects.add(DomainConstants.SELECT_CURRENT);
        objectSelects.add(DomainConstants.SELECT_POLICY);
        objectSelects.add(pgV3Constants.SELECT_ATTRIBUTE_PGLIFECYCLESTATUS);
        StringList relSelect = new StringList();
        relSelect.add(DomainRelationship.SELECT_ID);

        //Modified by DSM(Sogeti) - 2015x.5.1 fix for PDF Views defect 11268  - Starts
        String strObjectWhere = DomainConstants.SELECT_CURRENT +"!=" + pgV3Constants.STATE_OBSOLETE;
        //Modified by DSM(Sogeti) - 2015x.5.1 fix for PDF Views defect 11268  - Ends
        //Added/Modified by DSM(Sogeti)-2018x.5 for PDF Views Defect #35683 : Starts
        boolean isContextPushed = false;
        try{
            ContextUtil.pushContext(context, pgV3Constants.PERSON_USER_AGENT, DomainConstants.EMPTY_STRING, DomainConstants.EMPTY_STRING);
            isContextPushed = true;
            DomainObject domObjectId = DomainObject.newInstance(context,strObjectId);
            MapList mlManufactureEquivalentData = domObjectId.getRelatedObjects(
                    context,   //Context
                    pgV3Constants.RELATIONSHIP_MANUFACTUREREQUIVALENT, //Relationship Pattern
                    TYPE_PART, //Type Pattern
                    objectSelects,  //Object select
                    relSelect,  //Relationship select
                    true,	//getTo
                    true,	//getFrom
                    (short)1,	//recurseToLevel
                    //Modified by DSM(Sogeti) - 2015x.5.1 fix for PDF Views defect 11268
                    strObjectWhere, //objectWhere
                    ""  //relationshipWhere
            );
            if(isContextPushed) {
                ContextUtil.popContext(context);
                isContextPushed = false;
            }
            //Added/Modified by DSM(Sogeti)-2018x.5 for PDF Views Defect #35683 : Ends
            boolean havingEnterprisePartData = false;
            if(mlManufactureEquivalentData != null && mlManufactureEquivalentData.size()>0){
                havingEnterprisePartData = true;
            }
            if(havingEnterprisePartData){
                if("DSOEQSEP".equalsIgnoreCase(tableIdString)){
                    sbEnterprisePartsTable = getMEPTableForSEP(context,mlManufactureEquivalentData);
                }else{

                    sbEnterprisePartsTable = getEquivalentPartTableForMEP(context,mlManufactureEquivalentData,strObjectId);
                }
            }
        }catch(Exception exception){
            throw exception;
        }
        //Added by DSM(Sogeti)-2018x.5 for PDF Views Defect #35683 : Starts
        finally{
            if(isContextPushed) {
                ContextUtil.popContext(context);
                isContextPushed = false;
            }
        }
        //Added by DSM(Sogeti)-2018x.5 for PDF Views Defect #35683 : Ends
        long endTime = new Date().getTime();
        System.out.println("Total Time has taken by the  getManufactureEquivalentTable Method is-->"+(endTime-startTime));
        return sbEnterprisePartsTable;
    }

    /**
     * This method gets Equivalent MEP Table for SEP
     * @param Context - Context user
     * @param Map - MapList
     * @return StringBuilder - returns list of equivalent MEP connected to SEP
     **/
    //Modified by DSM(Sogeti)-2018x.1.1 for PDF Views Defect 26211
    //Modified by DSM(Sogeti)-2018x.5 for PDF Views requirements
    private StringBuilder getMEPTableForSEP(Context context,MapList mlManufactureEquivalentData) throws Exception {
        StringBuilder sbEnterprisePartsTable = new StringBuilder();
        DomainObject doObj = null;
        String strEqMEPTableHeader = UINavigatorUtil.getI18nString("emxCPN.PDFViews.EqMEP.TableHeader", "emxCPNStringResource", context.getLocale().getLanguage());
        sbEnterprisePartsTable.append("<tr><td><table class=\"WordWrappdf\" cellspacing=\"0\" width=\"1000px\" id=\"pgFinishedProductTable\">");
        sbEnterprisePartsTable.append("<thead>");
        sbEnterprisePartsTable.append("<tr><td colspan='6' class=\"new\" ><font size='4'><b>").append(strEqMEPTableHeader).append("</b></font></td></tr>");
        sbEnterprisePartsTable.append("<tr>");
        //Modified by DSM(Sogeti) - 2015x.5.1 fix for PDF Views defects 11269  - Starts
        sbEnterprisePartsTable.append("<td width=\"125\" align=\"center\"><b>Name</b></td>");
        sbEnterprisePartsTable.append("<td width=\"75\" align=\"center\"><b>Revision</b></td>");
        sbEnterprisePartsTable.append("<td width=\"175\" align=\"center\"><b>Type</b></td>");
        sbEnterprisePartsTable.append("<td width=\"325\" align=\"center\"><b>Description</b></td>");

        sbEnterprisePartsTable.append("<td width=\"175\" align=\"center\"><b>Manufacturer</b></td>");
        sbEnterprisePartsTable.append("<td width=\"125\" align=\"center\"><b>State</b></td>");
        //Modified by DSM(Sogeti) - 2015x.5.1 fix for PDF Views defects 11269  - Ends
        sbEnterprisePartsTable.append("</tr>");
        sbEnterprisePartsTable.append("</thead>");
        int nMEqData = mlManufactureEquivalentData.size();
        String strPartName = "";
        String strPartRevision = "";
        String strPartType = "";
        String strPartDescription = "";
        String strPartState = "";
        String strPartId ="";
        StringList slManufacturer = new StringList();
        //Added by DSM(Sogeti)-2018x.1.1 for PDF Views Defect 26211  - Starts
        String strPartPolicy = "";
        String strPartCurrentState = "";
        //Added by DSM(Sogeti)-2018x.1.1 for PDF Views Defect 26211  - Ends
        Map mpConnectedEnterpriseParts = new HashMap();
        for(int i=0; i<nMEqData; i++){
            mpConnectedEnterpriseParts = (Map)mlManufactureEquivalentData.get(i);
            strPartName = (String)mpConnectedEnterpriseParts.get(DomainConstants.SELECT_NAME);
            strPartRevision = (String)mpConnectedEnterpriseParts.get(pgV3Constants.SELECT_REVISION);
            strPartType = (String)mpConnectedEnterpriseParts.get(pgV3Constants.SELECT_TYPE);
            strPartType = EnoviaResourceBundle.getTypeI18NString(context, strPartType, context.getSession().getLanguage());
            strPartDescription = (String)mpConnectedEnterpriseParts.get(DomainConstants.SELECT_DESCRIPTION);
            //Added by DSM(Sogeti) - 2015x.5.1 fix for PDF Views defects 11269  - Starts
            strPartState = (String)mpConnectedEnterpriseParts.get(DomainConstants.SELECT_CURRENT);
            //Added by DSM(Sogeti) - 2015x.5.1 fix for PDF Views defects 11269  - Ends
            //Added by DSM(Sogeti)-2018x.1.1 for PDF Views Defect 26211  - Starts
            strPartPolicy = (String)mpConnectedEnterpriseParts.get(DomainConstants.SELECT_POLICY);
            strPartId =  (String)mpConnectedEnterpriseParts.get(DomainConstants.SELECT_ID);
            strPartCurrentState=EnoviaResourceBundle.getStateI18NString(context, strPartPolicy, strPartState,context.getLocale().getLanguage());
            //Added by DSM(Sogeti)-2018x.1.1 for PDF Views Defect 26211  - Ends
            doObj = DomainObject.newInstance(context,strPartId);
            //Added/Modified by DSM(Sogeti)-2018x.5 for PDF Views Defect #35683 : Starts
            boolean isAccess = doObj.checkAccess(context, (short)0);
            if(!isAccess) {
                strPartCurrentState=pgV3Constants.NO_ACCESS;
                strPartDescription=pgV3Constants.NO_ACCESS;
                slManufacturer=convertObjectToStringList(pgV3Constants.NO_ACCESS);
            }else {
                slManufacturer = doObj.getInfoList(context,"to["+pgV3Constants.RELATIONSHIP_MANUFACTURINGRESPONSIBILITY+"].from.name");
            }
            //Added/Modified by DSM(Sogeti)-2018x.5 for PDF Views Defect #35683 : Ends


            sbEnterprisePartsTable.append("<tr>");
            //Modified by DSM(Sogeti) - 2015x.5.1 fix for PDF Views defects 11269  - Starts
            sbEnterprisePartsTable.append("<td align=\"center\" width=\"125\">").append(validateString1(strPartName)).append("</td>");
            sbEnterprisePartsTable.append("<td align=\"center\" width=\"75\">").append(validateString1(strPartRevision)).append("</td>");
            sbEnterprisePartsTable.append("<td align=\"center\" width=\"175\">").append(validateString1(strPartType)).append("</td>");
            sbEnterprisePartsTable.append("<td align=\"center\" width=\"325\">").append(validateString1(strPartDescription)).append("</td>");
            sbEnterprisePartsTable.append("<td align=\"center\" width=\"325\">").append(validateString1(slManufacturer)).append("</td>");
            //Added by DSM(Sogeti)-2018x.1.1 for PDF Views Defect 26211  - Starts
            sbEnterprisePartsTable.append("<td align=\"center\" width=\"125\">").append(validateString1(strPartCurrentState)).append("</td>");
            //Added by DSM(Sogeti)-2018x.1.1 for PDF Views Defect 26211  - Ends
            //Commented by DSM(Sogeti)-2018x.1.1 for PDF Views Defect 26211  - Starts
            //sbEnterprisePartsTable.append("<td align=\"center\" width=\"125\">").append(validateString1(strPartState)).append("</td>");
            //Commented by DSM(Sogeti)-2018x.1.1 for PDF Views Defect 26211  - Ends
            //Modified by DSM(Sogeti) - 2015x.5.1 fix for PDF Views defects 11269  - Ends
            sbEnterprisePartsTable.append("</tr>");
        }
        sbEnterprisePartsTable.append("</table><tr><td><br/></td></tr></td></tr>");
        return sbEnterprisePartsTable;
    }

    /**
     * This method gets Enterprise Parts and Equivalent SEP Table for MEP
     * @param Context context
     * @param Map - MapList
     * @param - String
     * @return StringBuilder - returns list of Enterprise Parts and Equivalent Parts connected to MEP
     **/
    //Modified by DSM(Sogeti)-2018x.1.1 for PDF Views Defect 26211
    //Modified by DSM(Sogeti)-2018x.5 for PDF Views Requirement
    private StringBuilder getEquivalentPartTableForMEP(Context context,MapList mlManufactureEquivalentData,String strObjectId) throws Exception {
        StringBuilder sbCommonTable = new StringBuilder();
        StringBuilder sbCommonTable2 = new StringBuilder();
        StringBuilder sbEnterprisePartsTable =  new StringBuilder();
        StringBuilder sbSEPPartTable = new StringBuilder();
        Map mpConnectedEnterpriseParts = null;
        StringList slName = new StringList();
        StringList slRevision = new StringList();
        StringList slCurrent = new StringList();
        StringList slId = new StringList();
        Map mdata = null;
        MapList mlPQRData = null;
        String sName =DomainConstants.EMPTY_STRING;
        String sCurrent =DomainConstants.EMPTY_STRING;
        String sRevision =DomainConstants.EMPTY_STRING;
        DomainObject doObj = null;
        StringList slSupplier = new StringList();
        boolean isPQRDataPresent = false;
        Map mObject= null;
        String sPolicy = null;
        sbCommonTable.append("<tr><td><table class=\"WordWrappdf\" cellspacing=\"0\" width=\"1000px\" id=\"pgFinishedProductTable\">");
        //sbCommonTable.append("<thead>");
        sbEnterprisePartsTable.append(sbCommonTable);
        sbSEPPartTable.append(sbCommonTable);
        String strEnterprisePartHeader = UINavigatorUtil.getI18nString("emxCPN.PDFViews.EnterprisePart.TableHeader", "emxCPNStringResource", context.getLocale().getLanguage());
        sbEnterprisePartsTable.append("<tr><td colspan='8' class=\"new\" ><font size='4'><b>").append(strEnterprisePartHeader).append("</b></font></td></tr>");
        String strEqSEPHeader = UINavigatorUtil.getI18nString("emxCPN.PDFViews.EqSEP.TableHeader", "emxCPNStringResource", context.getLocale().getLanguage());
        sbSEPPartTable.append("<tr><td colspan='6' class=\"new\" ><font size='4'><b>").append(strEqSEPHeader).append("</b></font></td></tr>");
        sbEnterprisePartsTable.append("<tr>");
        sbEnterprisePartsTable.append("<th colspan='5' width=\"500px\"></th>");
        sbEnterprisePartsTable.append("<th colspan='3' width=\"500px\"><font size='2'>PQRs</font></th>");
        sbEnterprisePartsTable.append("</tr>");
        sbCommonTable = new StringBuilder();
        sbCommonTable.append("<tr>");
        sbCommonTable.append("<td width=\"100\" align=\"center\"><b>Name</b></td>");
        sbCommonTable.append("<td width=\"75\" align=\"center\"><b>Revision</b></td>");
        sbCommonTable.append("<td width=\"150\" align=\"center\"><b>Type</b></td>");
        sbCommonTable.append("<td width=\"100\" align=\"center\"><b>Description</b></td>");
        sbCommonTable.append("<td width=\"175\" align=\"center\"><b>State</b></td>");
        sbCommonTable.append("<td width=\"125\" align=\"center\"><b>Name</b></td>");
        sbCommonTable.append("<td width=\"125\" align=\"center\"><b>State</b></td>");
        sbCommonTable.append("<td width=\"125\" align=\"center\"><b>Revision</b></td>");
        sbCommonTable.append("</tr>");
        //sbCommonTable.append("</thead>");

        sbEnterprisePartsTable.append(sbCommonTable);


        sbCommonTable2 = new StringBuilder();
        sbCommonTable2.append("<tr>");
        sbCommonTable2.append("<td width=\"100\" align=\"center\"><b>Name</b></td>");
        sbCommonTable2.append("<td width=\"75\" align=\"center\"><b>Revision</b></td>");
        sbCommonTable2.append("<td width=\"150\" align=\"center\"><b>Type</b></td>");
        sbCommonTable2.append("<td width=\"100\" align=\"center\"><b>Description</b></td>");
        sbCommonTable2.append("<td width=\"100\" align=\"center\"><b>Supplier</b></td>");
        sbCommonTable2.append("<td width=\"175\" align=\"center\"><b>State</b></td>");
        sbCommonTable2.append("</tr>");
        sbSEPPartTable.append(sbCommonTable2);
        boolean isMEPartDataPresent = false;
        boolean isSEPPartDataPresent = false;

        int nMLSize = mlManufactureEquivalentData.size();
        String strPartName = "";
        String strPartRevision  = "";
        String strPartType  = "";
        String strPartDescription  = "";
        String strPartState  = "";
        String strPolicy = "";
        //Added by DSM(Sogeti)-2018x.1.1 for PDF Views Defect 26211  - Starts
        String strPartCurrentState = "";
        String strPartId = "";
        //Added by DSM(Sogeti)-2018x.1.1 for PDF Views Defect 26211  - Ends
        sbCommonTable = new StringBuilder();
        sbCommonTable2 = new StringBuilder();
        //Added by DSM(Sogeti)-2018x.5 for PDF Views Defect #35683 : Starts
        boolean isContextPushed = false;
        //Added by DSM(Sogeti)-2018x.5 for PDF Views Defect #35683 : Ends
        try {
            for(int i=0; i<nMLSize; i++){
                mpConnectedEnterpriseParts = (Map)mlManufactureEquivalentData.get(i);
                strPartName = (String)mpConnectedEnterpriseParts.get(DomainConstants.SELECT_NAME);
                strPartRevision = (String)mpConnectedEnterpriseParts.get(pgV3Constants.SELECT_REVISION);
                strPartType = (String)mpConnectedEnterpriseParts.get(pgV3Constants.SELECT_TYPE);
                strPartType = EnoviaResourceBundle.getTypeI18NString(context, strPartType, context.getSession().getLanguage());
                strPartId = (String)mpConnectedEnterpriseParts.get(DomainConstants.SELECT_ID);
                strPolicy = (String)mpConnectedEnterpriseParts.get(DomainConstants.SELECT_POLICY);
                doObj = DomainObject.newInstance(context,strPartId);
                //Added/Modified by DSM(Sogeti)-2018x.5 for PDF Views Defect #35683 : Starts
                boolean isAccess = doObj.checkAccess(context, (short)0);
                if(!isAccess) {
                    strPartCurrentState=pgV3Constants.NO_ACCESS;
                    strPartDescription=pgV3Constants.NO_ACCESS;
                }else {
                    //Added by DSM(Sogeti) - 2015x.5.1 fix for PDF Views defects 11269  - Starts
                    strPartState = (String)mpConnectedEnterpriseParts.get(DomainConstants.SELECT_CURRENT);
                    //Added by DSM(Sogeti) - 2015x.5.1 fix for PDF Views defects 11269  - Starts
                    //Added by DSM(Sogeti)-2018x.1.1 for PDF Views Defect 26211  - Starts
                    strPartCurrentState=EnoviaResourceBundle.getStateI18NString(context, strPolicy, strPartState,context.getLocale().getLanguage());
                    //Added by DSM(Sogeti)-2018x.1.1 for PDF Views Defect 26211  - Ends
                    strPartDescription = (String)mpConnectedEnterpriseParts.get(DomainConstants.SELECT_DESCRIPTION);

                    //Added by DSM-2015x.5.1 for defect related to Special character (< > preventing PDF generation) - Start
                    strPartDescription =strPartDescription.replaceAll("[<]","#LESS_THAN");
                    strPartDescription =strPartDescription.replaceAll("[>]","#GREATER_THAN");
                    //Added by DSM-2015x.5.1 for defect related to Special character (< > preventing PDF generation) -End
                }
                //Added/Modified by DSM(Sogeti)-2018x.5 for PDF Views Defect #35683 : Ends
                if(validateString(strPartId)) {
                    StringList busSelect = new StringList(2);
                    busSelect.add(DomainConstants.SELECT_NAME);
                    busSelect.add(DomainConstants.SELECT_ID);
                    StringList relSelect = new StringList(2);
                    relSelect.add(DomainRelationship.SELECT_NAME);
                    relSelect.add(DomainRelationship.SELECT_ID);
                    sName = "tomid["+pgV3Constants.RELATIONSHIP_QUALIFICATION+"].from.name";
                    sRevision = "tomid["+pgV3Constants.RELATIONSHIP_QUALIFICATION+"].from.revision";
                    sCurrent = "tomid["+pgV3Constants.RELATIONSHIP_QUALIFICATION+"].from.current";
                    String sId = "tomid["+pgV3Constants.RELATIONSHIP_QUALIFICATION+"].from.id";
                    relSelect.add(sName);
                    relSelect.add(sRevision);
                    relSelect.add(sCurrent);
                    relSelect.add(sId);
                    //Added/Modified by DSM(Sogeti)-2018x.5 for PDF Views Defect #35683 : Starts
                    ContextUtil.pushContext(context, pgV3Constants.PERSON_USER_AGENT, DomainConstants.EMPTY_STRING, DomainConstants.EMPTY_STRING);
                    isContextPushed = true;
                    mlPQRData = doObj.getRelatedObjects(context, //Context
                            pgV3Constants.RELATIONSHIP_MANUFACTUREREQUIVALENT, //Relationship Pattern
                            TYPE_PART, //Type Pattern
                            busSelect, //Object select
                            relSelect, //Relationship select
                            false,     //getTo
                            true, //getFrom
                            (short)1, //recurseToLevel
                            null, //objectWhere
                            null, //relationshipWhere
                            0);
                    if(isContextPushed) {
                        ContextUtil.popContext(context);
                        isContextPushed=false;
                    }
                    //Added/Modified by DSM(Sogeti)-2018x.5 for PDF Views Defect #35683 : Ends
                    int iSize = mlPQRData.size();
                    if( mlPQRData!=null && mlPQRData.size()>0  )
                    {
                        for(int k = 0; k <iSize; k++)
                        {
                            mdata = (Map) mlPQRData.get(k);
                            if(mdata.containsValue(strObjectId)) {
                                if( mdata!=null && !mdata.isEmpty()) {
                                    slId =  convertObjectToStringList(mdata.get(sId));
                                    if((slId!=null && slId.size()>0) || !isAccess) {
                                        //Added/Modified by DSM(Sogeti)-2018x.5 for PDF Views Defect #35683 : Starts
                                        if(!isAccess) {
                                            slName =  convertObjectToStringList(pgV3Constants.NO_ACCESS);
                                            slRevision =  convertObjectToStringList(pgV3Constants.NO_ACCESS);
                                            slCurrent =  convertObjectToStringList(pgV3Constants.NO_ACCESS);
                                        }else {
                                            slName =  convertObjectToStringList(mdata.get(sName));
                                            slRevision =  convertObjectToStringList(mdata.get(sRevision));
                                            slCurrent =  convertObjectToStringList(mdata.get(sCurrent));
                                        }
                                        //Added/Modified by DSM(Sogeti)-2018x.5 for PDF Views Defect #35683 : Ends
                                        sbCommonTable.append("<tr>");
                                        sbCommonTable.append("<td align=\"center\" width=\"125\">"+validateString1(strPartName)+"</td>");
                                        sbCommonTable.append("<td align=\"center\" width=\"75\">"+validateString1(strPartRevision)+"</td>");
                                        sbCommonTable.append("<td align=\"center\" width=\"175\">"+validateString1(strPartType)+"</td>");
                                        sbCommonTable.append("<td align=\"center\" width=\"100\">"+validateString1(strPartDescription)+"</td>");
                                        sbCommonTable.append("<td align=\"center\" width=\"125\">"+validateString1(strPartCurrentState)+"</td>");
                                        sbCommonTable.append("<td align=\"center\" width=\"125\">"+validateString1(slName)+"</td>");
                                        sbCommonTable.append("<td align=\"center\" width=\"125\">"+validateString1(slCurrent)+"</td>");
                                        sbCommonTable.append("<td align=\"center\" width=\"125\">"+validateString1(slRevision)+"</td>");
                                        sbCommonTable.append("</tr>");
                                    }else {
                                        sbCommonTable.append("<tr>");
                                        sbCommonTable.append("<td align=\"center\" width=\"125\">"+validateString1(strPartName)+"</td>");
                                        sbCommonTable.append("<td align=\"center\" width=\"75\">"+validateString1(strPartRevision)+"</td>");
                                        sbCommonTable.append("<td align=\"center\" width=\"175\">"+validateString1(strPartType)+"</td>");
                                        sbCommonTable.append("<td align=\"center\" width=\"100\">"+validateString1(strPartDescription)+"</td>");
                                        sbCommonTable.append("<td align=\"center\" width=\"125\">"+validateString1(strPartCurrentState)+"</td>");
                                        sbCommonTable.append("<td align=\"center\" width=\"125\">").append("</td>");
                                        sbCommonTable.append("<td align=\"center\" width=\"125\">").append("</td>");
                                        sbCommonTable.append("<td align=\"center\" width=\"125\">").append("</td>");
                                        sbCommonTable.append("</tr>");
                                    }

                                }
                            }
                        }
                    }
                }
                if(pgV3Constants.POLICY_SUPPLIEREQUIVALENT.equalsIgnoreCase(strPolicy)){
                    //Added/Modified by DSM(Sogeti)-2018x.5 for PDF Views Defect #35683 : Starts
                    if(!isAccess)
                        slSupplier =convertObjectToStringList(pgV3Constants.NO_ACCESS);
                    else
                        slSupplier = doObj.getInfoList(context,"to["+pgV3Constants.RELATIONSHIP_SUPPLYRESPONSIBILITY+"].from.name");
                    //Added/Modified by DSM(Sogeti)-2018x.5 for PDF Views Defect #35683 : Ends
                    sbCommonTable2.append("<tr>");
                    sbCommonTable2.append("<td align=\"center\" width=\"125\">"+validateString1(strPartName)+"</td>");
                    sbCommonTable2.append("<td align=\"center\" width=\"75\">"+validateString1(strPartRevision)+"</td>");
                    sbCommonTable2.append("<td align=\"center\" width=\"175\">"+validateString1(strPartType)+"</td>");
                    sbCommonTable2.append("<td align=\"center\" width=\"100\">"+validateString1(strPartDescription)+"</td>");
                    sbCommonTable2.append("<td align=\"center\" width=\"100\">"+validateString1(slSupplier)+"</td>");
                    sbCommonTable2.append("<td align=\"center\" width=\"125\">"+validateString1(strPartCurrentState)+"</td>");
                    sbCommonTable2.append("</tr>");
                    isSEPPartDataPresent = true;
                } else {
                    sbEnterprisePartsTable.append(sbCommonTable);
                    isMEPartDataPresent = true;
                }
                sbCommonTable = new StringBuilder();
            }
            sbCommonTable.append("</table><tr><td><br /></td></tr></td></tr>");
            sbSEPPartTable.append(sbCommonTable2);
            sbSEPPartTable.append(sbCommonTable);
            sbEnterprisePartsTable.append(sbCommonTable);
            sbCommonTable = new StringBuilder();
            if(isMEPartDataPresent){
                sbCommonTable.append(sbEnterprisePartsTable);
            }
            if(isSEPPartDataPresent){
                sbCommonTable.append(sbSEPPartTable);
            }
            //Added by DSM(Sogeti)-2018x.5 for PDF Views Defect #35683 : Starts
        }catch(Exception ex) {
            ex.printStackTrace();
        }
        finally{
            if(isContextPushed) {
                ContextUtil.popContext(context);
                isContextPushed = false;
            }
        }
        //Added by DSM(Sogeti)-2018x.5 for PDF Views Defect #35683 : Ends

        return sbCommonTable;
    }

    /**
     * This method gets Enterprise Parts Table for SEP
     * @param Context - Context user
     * @param String - ObjectID, Dynamic tableIdString for Dynamic tables
     * @return StringBuilder - returns list of Enterprise Parts connected to SEP
     * @throws Exception if fails
     **/
    //Modified by DSM(Sogeti)-2018x.5 for PDF Views Requirement
    private StringBuilder getSupplierEquivalentTable(Context context, String strObjectId, String tableIdString) throws Exception {
        long startTime = new Date().getTime();
        StringBuilder sbEnterprisePartsTable = new StringBuilder();
        StringList objectSelects = new StringList(8);
        objectSelects.add(DomainConstants.SELECT_NAME);
        objectSelects.add(DomainConstants.SELECT_ID);
        objectSelects.add(DomainConstants.SELECT_REVISION);
        objectSelects.add(DomainConstants.SELECT_TYPE);
        objectSelects.add(DomainConstants.SELECT_DESCRIPTION);
        objectSelects.add(DomainConstants.SELECT_CURRENT);
        objectSelects.add(pgV3Constants.SELECT_ATTRIBUTE_PGLIFECYCLESTATUS);
        //Added by DSM(Sogeti)-2018x.5 for PDF Views Defect #35683 : Starts
        objectSelects.add(pgV3Constants.SELECT_POLICY);
        //Added by DSM(Sogeti)-2018x.5 for PDF Views Defect #35683 : Ends
        //PQRDetails
        DomainObject doObj = null;
        StringList slName = new StringList();
        StringList slRevision = new StringList();
        StringList slCurrent = new StringList();
        StringList slId = new StringList();
        Map mdata = null;
        MapList mlPQRData = null;
        String sName =DomainConstants.EMPTY_STRING;
        String sCurrent =DomainConstants.EMPTY_STRING;
        String sRevision =DomainConstants.EMPTY_STRING;
        //Added by DSM(Sogeti)-2018x.5 for PDF Views Defect #35683 : Starts
        boolean isContextPushed = false;
        //Added by DSM(Sogeti)-2018x.5 for PDF Views Defect #35683 : Ends
        try{
            //Added/Modified by DSM(Sogeti)-2018x.5 for PDF Views Defect #35683 : Starts
            ContextUtil.pushContext(context, pgV3Constants.PERSON_USER_AGENT, DomainConstants.EMPTY_STRING, DomainConstants.EMPTY_STRING);
            isContextPushed = true;
            DomainObject domObjectId = DomainObject.newInstance(context,strObjectId);
            MapList mlEnterpisePart = domObjectId.getRelatedObjects(
                    context,   //Context
                    pgV3Constants.RELATIONSHIP_SUPPLIEREQUIVALENT, //Relationship Pattern
                    TYPE_PART, //Type Pattern
                    objectSelects,  //Object select
                    null,  //Relationship select
                    true,	//getTo
                    true,	//getFrom
                    (short)1,	//recurseToLevel
                    "",	//objectWhere
                    ""  //relationshipWhere
            );
            if(isContextPushed) {
                ContextUtil.popContext(context);
                isContextPushed = false;
            }
            //Added/Modified by DSM(Sogeti)-2018x.5 for PDF Views Defect #35683 : Ends
            boolean havingEnterpriseParts = false;
            if(mlEnterpisePart != null && mlEnterpisePart.size()>0 ){
                havingEnterpriseParts = true;
            }
            if(havingEnterpriseParts){

                sbEnterprisePartsTable.append("<tr><td><table class=\"WordWrappdf\" cellspacing=\"0\" width=\"1000px\" id=\"pgFinishedProductTable\">");
                sbEnterprisePartsTable.append("<thead>");
                sbEnterprisePartsTable.append("<tr><td colspan='8' class=\"new\" ><font size='4'><b>Enterprise Parts</b></font></td></tr>");
                sbEnterprisePartsTable.append("<tr>");
                sbEnterprisePartsTable.append("<th colspan='5' width=\"500px\"></th>");
                sbEnterprisePartsTable.append("<th colspan='3' width=\"500px\"><font size='2'>PQRs</font></th>");
                sbEnterprisePartsTable.append("</tr>");
                //Modified by DSM(Sogeti) - 2015x.5.1 fix for PDF Views defects 11269  - Starts
                sbEnterprisePartsTable.append("<tr>");
                sbEnterprisePartsTable.append("<td width=\"125\" align=\"center\"><b>Name</b></td>");
                sbEnterprisePartsTable.append("<td width=\"75\" align=\"center\"><b>Revision</b></td>");
                sbEnterprisePartsTable.append("<td width=\"175\" align=\"center\"><b>Type</b></td>");
                sbEnterprisePartsTable.append("<td width=\"100\" align=\"center\"><b>Description</b></td>");
                sbEnterprisePartsTable.append("<td width=\"125\" align=\"center\"><b>State</b></td>");

                sbEnterprisePartsTable.append("<td width=\"125\" align=\"center\"><b>Name</b></td>");
                sbEnterprisePartsTable.append("<td width=\"125\" align=\"center\"><b>State</b></td>");
                sbEnterprisePartsTable.append("<td width=\"125\" align=\"center\"><b>Revision</b></td>");
                //Modified by DSM(Sogeti) - 2015x.5.1 fix for PDF Views defects 11269  - Ends
                sbEnterprisePartsTable.append("</tr>");
                sbEnterprisePartsTable.append("</thead>");
                int nMapEnterprise = mlEnterpisePart.size();
                String strPartName = "";
                String strPartRevision  = "";
                String strPartType  = "";
                String strPartDescription  = "";
                //String strPartStatus  = "";
                String strPartState  = "";
                String strPartId = "";
                //Added by DSM(Sogeti)-2018x.5 for PDF Views Defect #35683 : Starts
                String strPartPolicy=DomainConstants.EMPTY_STRING;
                //Added by DSM(Sogeti)-2018x.5 for PDF Views Defect #35683 : Ends
                Map mpConnectedEnterpriseParts = null;
                for (int i = 0; i <nMapEnterprise; i++){
                    mpConnectedEnterpriseParts = (Map)mlEnterpisePart.get(i);

                    strPartState = (String)mpConnectedEnterpriseParts.get(DomainConstants.SELECT_CURRENT);
                    //Below condition added by DSM(Sogeti) for 2018x.1 Defect 25703
                    if(UIUtil.isNotNullAndNotEmpty(strPartState) && !strPartState.equals(pgV3Constants.STATE_OBSOLETE)){
                        strPartName = (String)mpConnectedEnterpriseParts.get(DomainConstants.SELECT_NAME);
                        strPartRevision = (String)mpConnectedEnterpriseParts.get(pgV3Constants.SELECT_REVISION);
                        strPartType = (String)mpConnectedEnterpriseParts.get(pgV3Constants.SELECT_TYPE);
                        strPartType = EnoviaResourceBundle.getTypeI18NString(context, strPartType, context.getSession().getLanguage());
                        //Modified by DSM(Sogeti) - 2015x.5.1 fix for PDF Views defects 11269  - Starts
                        //strPartStatus = (String)mpConnectedEnterpriseParts.get(pgV3Constants.SELECT_ATTRIBUTE_PGLIFECYCLESTATUS);
                        strPartId = (String)mpConnectedEnterpriseParts.get(DomainConstants.SELECT_ID);
                        doObj = DomainObject.newInstance(context,strPartId);
                        //Added/Modified by DSM(Sogeti)-2018x.5 for PDF Views Defect #35683 : Starts
                        boolean isAccess = doObj.checkAccess(context, (short)0);
                        if(!isAccess) {
                            strPartState=pgV3Constants.NO_ACCESS;
                            strPartDescription=pgV3Constants.NO_ACCESS;
                        }else {
                            strPartPolicy=(String)mpConnectedEnterpriseParts.get(pgV3Constants.SELECT_POLICY);
                            strPartState=EnoviaResourceBundle.getStateI18NString(context, strPartPolicy, strPartState,context.getLocale().getLanguage());
                            strPartDescription = (String)mpConnectedEnterpriseParts.get(DomainConstants.SELECT_DESCRIPTION);
                        }
                        //Added/Modified by DSM(Sogeti)-2018x.5 for PDF Views Defect #35683 : Ends
                        if(validateString(strPartId)) {
                            StringList busSelect = new StringList(2);
                            busSelect.add(DomainConstants.SELECT_NAME);
                            busSelect.add(DomainConstants.SELECT_ID);
                            StringList relSelect = new StringList(2);
                            relSelect.add(DomainRelationship.SELECT_NAME);
                            relSelect.add(DomainRelationship.SELECT_ID);
                            sName = "tomid["+pgV3Constants.RELATIONSHIP_QUALIFICATION+"].from.name";
                            sRevision = "tomid["+pgV3Constants.RELATIONSHIP_QUALIFICATION+"].from.revision";
                            sCurrent = "tomid["+pgV3Constants.RELATIONSHIP_QUALIFICATION+"].from.current";
                            String sId = "tomid["+pgV3Constants.RELATIONSHIP_QUALIFICATION+"].from.id";
                            relSelect.add(sName);
                            relSelect.add(sRevision);
                            relSelect.add(sCurrent);
                            relSelect.add(sId);
                            //Added/Modified by DSM(Sogeti)-2018x.5 for PDF Views Defect #35683 : Starts
                            ContextUtil.pushContext(context, pgV3Constants.PERSON_USER_AGENT, DomainConstants.EMPTY_STRING, DomainConstants.EMPTY_STRING);
                            isContextPushed = true;
                            mlPQRData = doObj.getRelatedObjects(context,
                                    pgV3Constants.RELATIONSHIP_SUPPLIEREQUIVALENT, //Relationship Pattern
                                    TYPE_PART, //Type Pattern
                                    busSelect, //Object select
                                    relSelect, //Relationship select
                                    false, //getTo
                                    true, //getFrom
                                    (short) 1, //recurseToLevel
                                    null, //objectWhere
                                    null, //relationshipWhere
                                    0 //limit
                            );
                            if(isContextPushed) {
                                ContextUtil.popContext(context);
                                isContextPushed = false;
                            }
                            //Added/Modified by DSM(Sogeti)-2018x.5 for PDF Views Defect #35683 : Ends
                            int iSize = mlPQRData.size();
                            if(mlPQRData!=null && mlPQRData.size()>0)
                            {
                                for(int k = 0; k < iSize; k++)
                                {
                                    mdata = (Map) mlPQRData.get(k);
                                    if(mdata.containsValue(strObjectId)) {
                                        if( mdata!=null && !mdata.isEmpty()) {
                                            slId =  convertObjectToStringList(mdata.get(sId));
                                            if((slId!=null && slId.size()>0) || !isAccess) {
                                                //Added by DSM(Sogeti)-2018x.5 for PDF Views Defect #35683 : Starts
                                                if(!isAccess) {
                                                    slName =  convertObjectToStringList(pgV3Constants.NO_ACCESS);
                                                    slRevision =  convertObjectToStringList(pgV3Constants.NO_ACCESS);
                                                    slCurrent =  convertObjectToStringList(pgV3Constants.NO_ACCESS);
                                                }else {
                                                    //Added by DSM(Sogeti)-2018x.5 for PDF Views Defect #35683 : Ends
                                                    slName =  convertObjectToStringList(mdata.get(sName));
                                                    slRevision =  convertObjectToStringList(mdata.get(sRevision));
                                                    slCurrent =  convertObjectToStringList(mdata.get(sCurrent));
                                                }
                                                sbEnterprisePartsTable.append("<tr>");
                                                sbEnterprisePartsTable.append("<td align=\"center\" width=\"125\">"+validateString1(strPartName)+"</td>");
                                                sbEnterprisePartsTable.append("<td align=\"center\" width=\"75\">"+validateString1(strPartRevision)+"</td>");
                                                sbEnterprisePartsTable.append("<td align=\"center\" width=\"175\">"+validateString1(strPartType)+"</td>");
                                                sbEnterprisePartsTable.append("<td align=\"center\" width=\"100\">"+validateString1(strPartDescription)+"</td>");
                                                sbEnterprisePartsTable.append("<td align=\"center\" width=\"125\">"+validateString1(strPartState)+"</td>");
                                                sbEnterprisePartsTable.append("<td align=\"center\" width=\"125\">"+validateString1(slName)+"</td>");
                                                sbEnterprisePartsTable.append("<td align=\"center\" width=\"125\">"+validateString1(slCurrent)+"</td>");
                                                sbEnterprisePartsTable.append("<td align=\"center\" width=\"125\">"+validateString1(slRevision)+"</td>");
                                                sbEnterprisePartsTable.append("</tr>");
                                            }else {
                                                sbEnterprisePartsTable.append("<tr>");
                                                sbEnterprisePartsTable.append("<td align=\"center\" width=\"125\">"+validateString1(strPartName)+"</td>");
                                                sbEnterprisePartsTable.append("<td align=\"center\" width=\"75\">"+validateString1(strPartRevision)+"</td>");
                                                sbEnterprisePartsTable.append("<td align=\"center\" width=\"175\">"+validateString1(strPartType)+"</td>");
                                                sbEnterprisePartsTable.append("<td align=\"center\" width=\"100\">"+validateString1(strPartDescription)+"</td>");
                                                sbEnterprisePartsTable.append("<td align=\"center\" width=\"125\">"+validateString1(strPartState)+"</td>");
                                                sbEnterprisePartsTable.append("<td align=\"center\" width=\"125\">").append("</td>");
                                                sbEnterprisePartsTable.append("<td align=\"center\" width=\"125\">").append("</td>");
                                                sbEnterprisePartsTable.append("<td align=\"center\" width=\"125\">").append("</td>");
                                                sbEnterprisePartsTable.append("</tr>");
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                sbEnterprisePartsTable.append("</table><tr><td><br /></td></tr></td></tr>");
            }
        }catch(Exception exception){
            throw exception;
        }
        //Added by DSM(Sogeti)-2018x.5 for PDF Views Defect #35683 : Starts
        finally{
            if(isContextPushed) {
                ContextUtil.popContext(context);
                isContextPushed = false;
            }
        }
        //Added by DSM(Sogeti)-2018x.5 for PDF Views Defect #35683 : Ends
        long endTime = new Date().getTime();
        System.out.println("Total Time has taken by the  getSupplierEquivalentTable Method is-->"+(endTime-startTime));
        return sbEnterprisePartsTable;
    }
    //Added by DSM-2015x.1 for PDF Views (Req ID-8196,8197) on 15-Jan-2016 - Ends
    /**
     * Retrieve substance information for DSO types
     * @param context
     * @param args
     * @return
     * @throws Exception
     */
    private StringBuilder getDSOSubstance(Context context,String strObjectId) throws Exception{
        long startTime = new Date().getTime();
        StringBuilder objectSubstanceBuffer= new StringBuilder();
        try{
            //Modified by DSM(Sogeti) for Code Optimization Start
            MapList mlToId = null;
            Map Argmap = new HashMap();
            Argmap.put("objectId", strObjectId);
            Map mData = new HashMap();
            Map mapObject = new HashMap();
            Map mpSub = new HashMap();
            String strSubType = DomainConstants.EMPTY_STRING;
            String strSubDesc = DomainConstants.EMPTY_STRING;
            String strSubRRS = DomainConstants.EMPTY_STRING;
            String strSubRPRS = DomainConstants.EMPTY_STRING;
            String strSubstanceName = DomainConstants.EMPTY_STRING;
            String strSubCAS = DomainConstants.EMPTY_STRING;
            String strSubECN = DomainConstants.EMPTY_STRING;
            String strRelId = DomainConstants.EMPTY_STRING;
            String strObjId = DomainConstants.EMPTY_STRING;
            StringList selectStmtSub = new StringList(7);
            selectStmtSub.add(DomainConstants.SELECT_TYPE);
            selectStmtSub.add(DomainConstants.SELECT_NAME);
            selectStmtSub.add(DomainConstants.SELECT_DESCRIPTION);
            selectStmtSub.add(pgV3Constants.SELECT_ATTRIBUTE_CASNUMBER);
            selectStmtSub.add(pgV3Constants.SELECT_ATTRIBUTE_ECNUMBER) ;
            selectStmtSub.add(pgV3Constants.SELECT_ATTRIBUTE_REACHREGISTRATIONSTATUS) ;
            selectStmtSub.add(pgV3Constants.SELECT_ATTRIBUTE_REACHPREREGISTRATIONSTATUS) ;
            StringList selectStmtsRel = new StringList(1);
            selectStmtsRel.add(pgV3Constants.SELECT_ATTRIBUTE_QUANTITY);
            String strSubQuan=DomainConstants.EMPTY_STRING;
            //Modified by DSM(Sogeti) for Code Optimization End
            String[] argsSub= JPO.packArgs(Argmap);
//			emxCPNMaterialBase_mxJPO objSubstance = new emxCPNMaterialBase_mxJPO(context, argsSub);
//			MapList mlSubstance = (MapList)objSubstance.getComponentSubstances(context, argsSub);
            //Added for PDF Refactor
			MapList mlSubstance = (MapList)pgPDFViewHelper.executeMainClassMethod(context, "jpo.materialscompliance.MaterialBase", "getComponentSubstances", argsSub);
            boolean havingSubstanceData=false;
            if(mlSubstance!=null && mlSubstance.size()>0){
                havingSubstanceData=true;
            }
            if(havingSubstanceData){
                objectSubstanceBuffer.append("<TR><TD><TABLE class=\"pdf\" cellspacing=\"0\" width=\"1000px\" id=\"pgFinishedProductTable\">");
                objectSubstanceBuffer.append("<thead>");
                //Modified by DSM-2015x.1 for PDF Views on 1-Feb-2016 - Starts
                objectSubstanceBuffer.append("<TR><TD colspan='8' class=\"new\" ><font size='4'><b>Substances<br /></b></font></TD></TR>");
                //Modified by DSM-2015x.1 for PDF Views on 1-Feb-2016 - Ends
                objectSubstanceBuffer.append("<TR>");
                objectSubstanceBuffer.append("<TD  width=\"125\" align=\"center\"><B>Name</B></TD>");
                objectSubstanceBuffer.append("<TD  width=\"125\" align=\"center\"><B>CAS Number</B></TD>");
                objectSubstanceBuffer.append("<TD  width=\"125\" align=\"center\"><B>EC number</B></TD>");
                objectSubstanceBuffer.append("<TD  width=\"125\" align=\"center\"><B>Quantity %</B></TD>");
                objectSubstanceBuffer.append("<TD  width=\"125\" align=\"center\"><B>Type</B></TD>");
                objectSubstanceBuffer.append("<TD  width=\"125\" align=\"center\"><B>Description</B></TD>");
                objectSubstanceBuffer.append("<TD  width=\"125\" align=\"center\"><B>REACH Registration Status</B></TD>");
                objectSubstanceBuffer.append("<TD  width=\"125\" align=\"center\"><B>REACH Pre-Registration Status</B></TD>");
                objectSubstanceBuffer.append("</TR></thead>");
                mlSubstance.addSortKey("name", "ascending", "String");
                mlSubstance.sort();

                for (int i = 0;i< mlSubstance.size(); i++)
                {
                    mapObject = (Map) mlSubstance.get(i);
                    strObjId = (String)mapObject.get(DomainConstants.SELECT_ID);
                    DomainObject doObj = DomainObject.newInstance(context, strObjId);
                    mpSub =  (Map)doObj.getInfo(context, selectStmtSub);
                    //Modified for V4-2013x.4 - Defect-7180 - Starts
                    objectSubstanceBuffer.append("<TR align=\"centre\" class=\"pdf\">");
                    //Modified for V4-2013x.4 - Defect-7180 - Ends
                    strSubstanceName = (String)mpSub.get(DomainConstants.SELECT_NAME);
                    strSubCAS = (String)mpSub.get(pgV3Constants.SELECT_ATTRIBUTE_CASNUMBER);
                    strSubECN = (String)mpSub.get(pgV3Constants.SELECT_ATTRIBUTE_ECNUMBER);
                    strRelId = (String)mapObject.get("id[connection]");
                    String[] relargs = new String[1];
                    relargs[0] = strRelId;
                    String strToId = "";
                    //Modified by DSM(Sogeti) for Code Optimization Start
                    mlToId = new MapList();
                    mlToId = (MapList)DomainRelationship.getInfo(context, relargs,selectStmtsRel);
                    //Modified by DSM(Sogeti) for Code Optimization End
                    if(null != mlToId && mlToId.size()>0){
                        for(int j=0;j<mlToId.size();j++){
                            mData = (Map)mlToId.get(j);
                            strSubQuan = (String)mData.get(pgV3Constants.SELECT_ATTRIBUTE_QUANTITY);
                        }
                    }
                    strSubType = (String)mpSub.get(DomainConstants.SELECT_TYPE);
                    strSubDesc = (String)mpSub.get(DomainConstants.SELECT_DESCRIPTION);
                    strSubRRS = (String)mpSub.get(pgV3Constants.SELECT_ATTRIBUTE_REACHREGISTRATIONSTATUS);
                    strSubRPRS = (String)mpSub.get(pgV3Constants.SELECT_ATTRIBUTE_REACHPREREGISTRATIONSTATUS);
                    objectSubstanceBuffer.append("<TD align=\"center\" width=\"125\">"+validateString1(strSubstanceName)+"</TD>");
                    objectSubstanceBuffer.append("<TD align=\"center\" width=\"125\">"+validateString1(strSubCAS)+"</TD>");
                    objectSubstanceBuffer.append("<TD align=\"center\" width=\"125\">"+validateString1(strSubECN)+"</TD>");
                    objectSubstanceBuffer.append("<TD align=\"center\" width=\"125\">"+validateString1(strSubQuan)+"</TD>");
                    objectSubstanceBuffer.append("<TD align=\"center\" width=\"125\">"+validateString1(strSubType)+"</TD>");
                    objectSubstanceBuffer.append("<TD align=\"center\" width=\"125\">"+validateString1(strSubDesc)+"</TD>");
                    objectSubstanceBuffer.append("<TD align=\"center\" width=\"125\">"+validateString1(strSubRRS)+"</TD>");
                    objectSubstanceBuffer.append("<TD align=\"center\" width=\"125\">"+validateString1(strSubRPRS)+"</TD>");
                    objectSubstanceBuffer.append("</TR>");
                }
                objectSubstanceBuffer.append("</TABLE><TR><TD><br /></TD></TR></TD></TR>");
                //Modoify Code Refactoring
                mlSubstance.clear();
            }
        }
        catch (Exception e){
            throw new MatrixException(e);
        }
        long endTime = new Date().getTime();
        System.out.println("Total Time has taken by the getDSOSubstance Method is-->"+(endTime-startTime));
        return objectSubstanceBuffer;
    }
    /**
     * Wrap column value in PDF if any specified special character is encountered
     * @param columnName
     * @param columnValue
     * @return
     */
    /*This method is used to wrap the words of given column*/
    private String wrapColumnValue(Context context,String columnName,String columnValue){
        try{
            columnName = columnName.replace(" ","_");
            columnName = columnName.concat("_width");
            String specialCharacterString = EnoviaResourceBundle.getProperty(context,"emxCPN.PDF.SpecialCharacters");
            String[] specialCharacterArray = specialCharacterString.split(",");
            StringBuffer tempBuffer = new StringBuffer();
            int width = Integer.parseInt(EnoviaResourceBundle.getProperty(context,"emxCPN.PDF."+columnName));
            int fromIndex = 0;
            int beginIndex = 0;
            int endIndex = width;
            columnValue = columnValue.replaceAll("#GREATER_THAN", "<");
            columnValue = columnValue.replaceAll("#LESS_THAN", ">");
            int strLength = columnValue.length();
            Set<Integer> indexList = new TreeSet<Integer>();
            String tempValue = null;
            String temp = null;
            for(String specialCharacter : specialCharacterArray){
                tempValue = columnValue;
                while(tempValue.indexOf(specialCharacter) != -1) {
                    int index = columnValue.indexOf(specialCharacter, fromIndex++);
                    indexList.add(index);
                    tempValue = columnValue.substring(index+1);
                }
            }
            if(strLength > (width)){
                while (strLength > endIndex ) {
                    int count =0;
                    Iterator<Integer> indexTreeIterator=indexList.iterator();
                    while (indexTreeIterator.hasNext()) {
                        int tempcount =indexTreeIterator.next();
                        if(endIndex > tempcount){
                            count = tempcount+1;
                            indexTreeIterator.remove();
                        }
                    }
                    if( count == 0) {
                        count = endIndex;
                    }
                    temp = columnValue.substring(beginIndex, count);
                    tempBuffer.append(temp);
                    tempBuffer.append("#LINE_BREAK");
                    beginIndex = count;
                    if(strLength > (beginIndex + width)){
                        endIndex = beginIndex + width;
                    }
                    else {
                        endIndex = strLength;
                    }
                }
                if(strLength <= endIndex ){
                    tempBuffer.append(columnValue.substring(beginIndex, endIndex));
                }
                columnValue = tempBuffer.toString();
            }else{
                tempBuffer.append(columnValue);
                columnValue = tempBuffer.toString();
            }
            columnValue = columnValue.replaceAll("<", "#GREATER_THAN");
            columnValue = columnValue.replaceAll(">", "#LESS_THAN");
        }catch(Exception e){
            e.printStackTrace();
        }
        return columnValue ;
    }
    /** - Master Characteristics Enhancements(Display Master Characteristics on the Performance Characteristic Table) :
     * @param context
     * @param args
     * @return MapList with Product Data and it's EBOM and their Master characteristics
     * @throws Exception
     */
    public MapList getMicroChar(Context context, String[] args) throws Exception{
        if (args.length == 0) {
            throw new IllegalArgumentException();
        }
        MapList objList = null;
        HashMap paramMap = (HashMap) JPO.unpackArgs(args);
        String objectId = (String) paramMap.get("objectId");
        DomainObject doObj = DomainObject.newInstance(context, objectId);
        //Added by DSM-2015x.1(Sogeti) for Defect - 4798 on 17-June-2016- Starts
        boolean hasReadAccess = doObj.checkAccess(context, (short) AccessConstants.cRead);
        if(hasReadAccess) {
            //Added by DSM-2015x.1(Sogeti) for Defect - 4798 on 17-June-2016- Ends
            String partType=null;
            StringList objectSelects = new StringList();
            objectSelects.add(DomainConstants.SELECT_ID);
            objectSelects.add(DomainObject.SELECT_NAME);
            objectSelects.add(DomainObject.SELECT_TYPE);
            objectSelects.add(DomainObject.SELECT_POLICY);
            objectSelects.add(CPNCommonConstants.SELECT_ATTRIBUTE_SHAREDTTABLECHARACTERISTICTYPE);
            //Modified by DSM(Sogeti) for Defect #37590 for 2018x.5_December PDF Views - Starts
            //objectSelects.add(pgV3Constants.ATTR_REFERENCE_TYPE);
            //Modified by DSM(Sogeti) for Defect #37590 for 2018x.5_December PDF Views - Ends
            //Added by DSM (Sogeti) for 22x.04 (Dec CW 2023) Defect 56153 - Starts
            String strContextFormulaName = "frommid["+pgPDFViewConstants.RELATIONSHIP_PGATSCONTEXT+"].to.to["+pgV3Constants.RELATIONSHIP_CHARACTERISTIC+"].from.name";
            String strSATSFormula_Add_Id = "attribute["+pgPDFViewConstants.ATTRIBUTE_PGSATSCONTEXT_ID+"]";
            //Added by DSM (Sogeti) for 22x.04 (Dec CW 2023) Defect 56153 - Ends
            StringList relSelects = new StringList();
            relSelects.add(DomainObject.SELECT_RELATIONSHIP_ID);
            relSelects.add(pgV3Constants.SELECT_ATTRIBUTE_SHAREDTABLECHARACTERISTICSEQUENCE);
            //Modified by DSM (Sogeti) for 22x.04 (Dec CW 2023) Defect 56153 - Starts
            relSelects.add(strContextFormulaName);
            relSelects.add(strSATSFormula_Add_Id);
            //Modified by DSM (Sogeti) for 22x.04 (Dec CW 2023) Defect 56153 - Ends
            String addNewRow = (String) paramMap.get("AddRow");
            String strSwitchMode = (String) paramMap.get("SwitchMode");
            String strSelectedTable = (String) paramMap.get("selectedTable");
            strSelectedTable = strSelectedTable.substring(strSelectedTable
                    .lastIndexOf('~') + 1, strSelectedTable.length());
            //Modify Code Refatoring
//				String strTypeSym = FrameworkProperties
//			   .getProperty("emxCPN.Characteristic.table." + strSelectedTable);
            String strTypeSym = EnoviaResourceBundle.getProperty(context,"emxCPN.Characteristic.table." + strSelectedTable);
            String type = PropertyUtil.getSchemaProperty(context, strTypeSym);

            final String derivedFilterSelection = (String) paramMap.get("pgVPDCPNCharacteristicDerivedFilter");
            String rangeAll = EnoviaResourceBundle.getProperty(context, "emxCPN.MasterCharacteristics.DerivedRange.All");
            String rangeLocal = EnoviaResourceBundle.getProperty(context, "emxCPN.MasterCharacteristics.DerivedRange.Local");
            String rangeReferenced = EnoviaResourceBundle.getProperty(context, "emxCPN.MasterCharacteristics.DerivedRange.Referenced");
            if (rangeAll.equalsIgnoreCase(derivedFilterSelection)|| rangeLocal.equalsIgnoreCase(derivedFilterSelection))
            {
                //Added by DSM (Sogeti) for 22x.04 (Dec CW 2023) Requirement 47656,47667 - Start
                String relPattern = CPNCommonConstants.RELATIONSHIP_CHARACTERISTIC+ "," +pgV3Constants.RELATIONSHIP_SHARED_TABLE+ "," +pgV3Constants.RELATIONSHIP_PGATSOPERATION;
                //Added by DSM (Sogeti) for 22x.04 (Dec CW 2023) Requirement 47656,47667 - End                String typePattern = CPNCommonConstants.TYPE_SHARED_TABLE + ","
				String typePattern = CPNCommonConstants.TYPE_SHARED_TABLE + ","+ type;
                objList = new MapList();
                objList = doObj.getRelatedObjects(context, relPattern, typePattern,
                        objectSelects, relSelects, false, true, (short) 1, null,
                        null);
                Map mpTemp = new HashMap();
                String strCharType = null;
                for (int x = objList.size() - 1; x >= 0; x--) {
                    mpTemp = (Map) objList.get(x);
                    String strType = (String) mpTemp
                            .get(DomainConstants.SELECT_TYPE);
                    if (strType != null
                            && strType.equals(CPNCommonConstants.TYPE_SHARED_TABLE)) {
                        strCharType = (String) mpTemp
                                .get(CPNCommonConstants.SELECT_ATTRIBUTE_SHAREDTTABLECHARACTERISTICTYPE);
                        if (strCharType != null && !strCharType.equals(type)) {
                            objList.remove(x);
                        }
                    }
                }
                objList.sort(pgV3Constants.SELECT_ATTRIBUTE_SHAREDTABLECHARACTERISTICSEQUENCE,"ascending", "integer");

                if(objList!=null && objList.size()>0){
                    //pgIPMProductData_mxJPO pgIPMProductData = new pgIPMProductData_mxJPO(context, args);
                    //objList = pgIPMProductData.pgGetCharacteristicList(context,objList);
                    //Added for PDF Refactor
                    Map objListPack = new HashMap();
                    objListPack.put("objList", objList);
                    String argsobjList[] = JPO.packArgs(objListPack);
                    objList = (MapList)pgPDFViewHelper.executeIntermediatorClassMethod(context,"pgGetCharacteristicList",argsobjList);
                }

                if (addNewRow != null && addNewRow.equals("true")
                        && (strSwitchMode == null || "".equals(strSwitchMode))) {
                    HashMap m = new HashMap();
                    m.put(SELECT_ID, "BLANK");
                    objList.add(m);
                }
                MapList mlTempList = new MapList();;
                Map mpTempList = new HashMap();
                for (int iSeq = 0; iSeq < objList.size(); iSeq++) {
                    mpTempList = new HashMap();
                    mpTempList = (Map) objList.get(iSeq);
                    mpTempList.put("Sequence", Integer.toString(iSeq + 1));
                    mlTempList.add(mpTempList);
                }
                objList.clear();
                objList.addAll(mlTempList);
            }
            String strReferenceType = (String)doObj.getInfo(context, "attribute[" + pgV3Constants.ATTR_REFERENCE_TYPE + "]");
            if (rangeAll.equalsIgnoreCase(derivedFilterSelection)
                    || rangeReferenced.equalsIgnoreCase(derivedFilterSelection)) {
                if(UIUtil.isNotNullAndNotEmpty(strReferenceType) && "R".equalsIgnoreCase(strReferenceType))
                {

                    MapList charList = getMasterCharacteristics(context, args);
                    Map charMap = new HashMap();
                    String strType = null;
                    String strCharType = null;
                    Iterator charListItrtr = charList.iterator();
                    while (charListItrtr.hasNext()) {
                        charMap = (Map) charListItrtr.next();
                        if(charMap != null && !charMap.isEmpty())
                        {
                            strType = (String) charMap
                                    .get(DomainConstants.SELECT_TYPE);
                            if (strType != null && strType.equals(type)) {
                                objList.add(charMap);
                            }
                            if (strType != null
                                    && strType.equals(CPNCommonConstants.TYPE_SHARED_TABLE)) {
                                strCharType = (String) charMap
                                        .get(CPNCommonConstants.SELECT_ATTRIBUTE_SHAREDTTABLECHARACTERISTICTYPE);
                                if (strCharType != null && strCharType.equals(type)) {
                                    objList.add(charMap);

                                }
                            }
                        }
                    }
                }
            }
            makeCharacteristicsAddedBySharedTableReadonly(context, objList);
            partType = doObj.getInfo(context, DomainConstants.SELECT_TYPE);
            if (pgV3Constants.TYPE_FINISHEDPRODUCTPART.equals(partType) && (rangeAll.equalsIgnoreCase(derivedFilterSelection) || rangeReferenced.equalsIgnoreCase(derivedFilterSelection) ))
            {
                objList=getEbomPartsCharacterstics(context,paramMap,doObj,objList,derivedFilterSelection);
            }
            //Added by DSM (Sogeti) for 22x.04 (Dec CW 2023) Requirement 47656,47667 - Start
			else if(pgV3Constants.TYPE_STRUCTURED_ATS.equals(partType) && (rangeAll.equalsIgnoreCase(derivedFilterSelection) || rangeReferenced.equalsIgnoreCase(derivedFilterSelection) ))
			{
				objList=getEbomPartsCharacterstics(context,paramMap,doObj,objList,derivedFilterSelection);
			}
        }   //Added by DSM (Sogeti) for 22x.04 (Dec CW 2023) Requirement 47656,47667 - End
       
        return objList;
    }
    /**
     * Code for getting master characteristics from the context of Reference
     * @param context
     * @param args
     * @return MapList with master characteristics from the context of Reference
     * @throws Exception
     */
    public MapList getMasterCharacteristics(Context context, String[] args) throws Exception {
        if (args.length == 0) {
            throw new IllegalArgumentException();
        }
        MapList objList = new MapList();
        //Added for PDF Refactor
        String objectId = (String) pgPDFViewHelper.executepgDSOCommonUtilsMethod(context,args, "objectId");
        String addNewRow = (String) pgPDFViewHelper.executepgDSOCommonUtilsMethod(context,args, "AddRow");
        String strSwitchMode = (String) pgPDFViewHelper.executepgDSOCommonUtilsMethod(context,args, "SwitchMode");
        String strSelectedTable = (String) pgPDFViewHelper.executepgDSOCommonUtilsMethod(context,args, "selectedTable");
        strSelectedTable = strSelectedTable.substring(strSelectedTable.lastIndexOf('~') + 1, strSelectedTable.length());
        String strTypeSym = EnoviaResourceBundle.getProperty(context,"emxCPN.Characteristic.table." + strSelectedTable);
        String type = PropertyUtil.getSchemaProperty(context, strTypeSym);
        if(UIUtil.isNotNullAndNotEmpty(objectId)){
            DomainObject doObj = DomainObject.newInstance(context, objectId);
            String masterPartIdSelect = getMasterPartSelect(context, SELECT_ID);
            String masterPartNameSelect = getMasterPartSelect(context, SELECT_NAME);
            String masterPartTypeSelect=getMasterPartSelect(context, SELECT_TYPE);
            String masterPartCurrentSelect=getMasterPartSelect(context, SELECT_CURRENT);
            //Modified for 2018x Upgrade - Stage attribute is replaced by Release Phase attribute in 18x OOTB.
            StringList objSelects = (StringList)pgPDFViewHelper.createSelects(SELECT_ID,SELECT_NAME,"attribute["+pgV3Constants.STR_RELEASE_PHASE+"]",masterPartIdSelect, masterPartNameSelect,masterPartTypeSelect, masterPartCurrentSelect);
            String strRefPartStage = DomainConstants.EMPTY_STRING;
            Map objAndMasterMap = doObj.getInfo(context, objSelects);
            if(objAndMasterMap != null && !objAndMasterMap.isEmpty()){
                String masterPartId = (String)objAndMasterMap.get(masterPartIdSelect);
                String strMasterPartType="";
                String strisFPP ="";
                if (UIUtil.isNotNullAndNotEmpty(masterPartId)){
                    strMasterPartType = (String)objAndMasterMap.get(masterPartTypeSelect);
                } else {
                    //Added for PDF Refactor
                    strMasterPartType = pgV3Constants.TYPE_FINISHEDPRODUCTPART;
                }
                //Modified for 2018x Upgrade - Stage attribute is replaced by Release Phase attribute in 18x OOTB.
                strRefPartStage = (String)objAndMasterMap.get("attribute["+pgV3Constants.STR_RELEASE_PHASE+"]");
                String strMasterCurrent = (String)objAndMasterMap.get(masterPartCurrentSelect);
                if(pgV3Constants.STATE_RELEASE.equalsIgnoreCase(strMasterCurrent)
                        || pgV3Constants.STATE_COMPLETE.equalsIgnoreCase(strMasterCurrent) || pgV3Constants.STATE_OBSOLETE.equalsIgnoreCase(strMasterCurrent))
                {
                    if (UIUtil.isNotNullAndNotEmpty(masterPartId)) {
                        objList = getCharacteristicsList(context, masterPartId, type,
                                addNewRow, strSwitchMode);
                    }
                    objList = updatePathForImmediateMaster(context, objList, objAndMasterMap);
                }
                String classifiedItemRel = PropertyUtil.getSchemaProperty(context,"relationship_ClassifiedItem");
                String partFamilyId = doObj.getInfo(context,"to["+classifiedItemRel+"].from.id");
                if (partFamilyId != null || "".equals(partFamilyId)) {
                    MapList parentCharacteristicsList = new MapList();
                    parentCharacteristicsList = getParentPartFamilyCharacteristicsForPDF(context, partFamilyId, strMasterPartType);
                    objList.addAll(parentCharacteristicsList);
                    objList = markDerivedCharacteristics(objList);
                    objList = disableCheckBoxForDerivedChars(objList);
                    objList = makeDerivedCharsNonEditable(objList);
                }
            }
        }
        return objList;
    }

    private MapList markDerivedCharacteristics(MapList objList) {
        return addSettingToObjects(objList, "derivedCharacteristic", "true");
    }
    private MapList disableCheckBoxForDerivedChars(MapList objList) {
        return addSettingToObjects(objList, "disableSelection", "true");
    }
    private MapList makeDerivedCharsNonEditable(MapList objList) {
        return addSettingToObjects(objList, "RowEditable", "readonly");
    }
    /**
     * Retrieve Characteristics information for the selected types
     * @param context
     * @param args
     * @return
     * @throws MatrixException
     */

    private MapList getCharacteristicsList(Context context, String objectId, String type,String addNewRow, String strSwitchMode) throws Exception {
        String relPattern = CPNCommonConstants.RELATIONSHIP_CHARACTERISTIC + "," + pgV3Constants.RELATIONSHIP_SHARED_TABLE;
        MapList objList = new MapList();
        String typePattern = CPNCommonConstants.TYPE_SHARED_TABLE + "," + type;
        StringList objectSelects = (StringList)pgPDFViewHelper.createSelects(SELECT_ID,SELECT_NAME,SELECT_TYPE,CPNCommonConstants.SELECT_ATTRIBUTE_SHAREDTTABLECHARACTERISTICTYPE);
        StringList relSelects = (StringList)pgPDFViewHelper.createSelects(SELECT_RELATIONSHIP_ID,pgV3Constants.SELECT_ATTRIBUTE_SHAREDTABLECHARACTERISTICSEQUENCE);
        DomainObject doMasterPart = DomainObject.newInstance(context,objectId);
        objList = doMasterPart.getRelatedObjects(context,
                relPattern,
                typePattern,
                objectSelects,
                relSelects,
                false,
                true,
                (short)1,
                null,
                null);
        Map mpTemp = new HashMap();
        MapList mlTemp = new MapList();
        String strType = null;
        String strCharType = null;
        for(int x=objList.size()-1 ; x >= 0 ; x--){
            mpTemp = (Map)objList.get(x);
            strType = (String) mpTemp.get(DomainConstants.SELECT_TYPE);
            if(strType != null && strType.equals(CPNCommonConstants.TYPE_SHARED_TABLE)){
                strCharType = (String) mpTemp.get(CPNCommonConstants.SELECT_ATTRIBUTE_SHAREDTTABLECHARACTERISTICTYPE);
                if(strCharType != null && !strCharType.equals(type)){
                    objList.remove(x);
                }
            }
        }
        objList.sort(pgV3Constants.SELECT_ATTRIBUTE_SHAREDTABLECHARACTERISTICSEQUENCE,"ascending", "integer");
        if (addNewRow != null && addNewRow.equals("true") && (strSwitchMode == null || "".equals(strSwitchMode))){
            HashMap m = new HashMap();
            m.put(SELECT_ID, "BLANK");
            objList.add(m);
        }
        MapList mlTempList = new MapList();
        Map mpTempList  = new HashMap();
        for(int iSeq = 0 ; iSeq < objList.size() ; iSeq++){
            mpTempList = (Map) objList.get(iSeq);
            mpTempList.put("Sequence",Integer.toString(iSeq+1));
            mlTempList.add(mpTempList);
        }
        objList.clear();
        objList.addAll(mlTempList);
        makeCharacteristicsAddedBySharedTableReadonly(context, objList);
        return objList;
    }
    /**
     * Create Master Part Select
     * @param context
     * @param args
     * @return
     * @throws MatrixException
     */
    private String getMasterPartSelect(Context context, String finalSelect) {
        String classifiedItemRel = PropertyUtil.getSchemaProperty(context,"relationship_ClassifiedItem");
        String partFamilyReferenceRel = PropertyUtil.getSchemaProperty(context,"relationship_PartFamilyReference");
        StringBuffer masterPartSelectBuf = new StringBuffer();
        masterPartSelectBuf.append("to[")
                .append(classifiedItemRel)
                .append("].frommid[")
                .append(partFamilyReferenceRel)
                .append("].torel.to.")
                .append(finalSelect);
        return masterPartSelectBuf.toString();
    }
    /**
     *  Update the Derived path for the Immediate Master of the Product Data Part (Reference)
     * @param context
     * @param characteristics
     * @param objAndMasterMap
     * @return MapList
     */
    private MapList updatePathForImmediateMaster(Context context, MapList characteristics, Map objAndMasterMap) {
        String path = "";
        String strPathId = "";
        try{
            String masterPartIdSelect = getMasterPartSelect(context, SELECT_ID);
            String masterPartNameSelect = getMasterPartSelect(context, SELECT_NAME);
            String strMode = (String)objAndMasterMap.get("Mode");
            String objLink = "";
            String masterLink = "";
            if(UIUtil.isNotNullAndNotEmpty(strMode) && "PDF".equals(strMode))
            {
                objLink = (String)objAndMasterMap.get(SELECT_NAME);
                String strid = (String)objAndMasterMap.get(SELECT_ID);
                String strMasterPFId = (String)objAndMasterMap.get(masterPartIdSelect);
                String strMasterPFName = (String)objAndMasterMap.get(masterPartNameSelect);
                if(UIUtil.isNotNullAndNotEmpty(strMasterPFId)){
                    DomainObject doObj = DomainObject.newInstance(context, strMasterPFId);
                    String classifiedItemRel = PropertyUtil.getSchemaProperty(context,"relationship_ClassifiedItem");
                    String partFamilyId = doObj.getInfo(context,"to["+classifiedItemRel+"].from.id");
                    String partFamilyName = doObj.getInfo(context,"to["+classifiedItemRel+"].from.name");
                    masterLink = strMasterPFName;
                    String PFLink = partFamilyName;
                    path = objLink + "->" + masterLink;
                    strPathId = strid+"~"+strMasterPFId;
                    if(UIUtil.isNotNullAndNotEmpty(partFamilyId)){
                        path = PFLink + "->" + masterLink;
                        strPathId = partFamilyId+"~"+strMasterPFId;
                    }
                    else{
                        path = masterLink;
                        strPathId = strMasterPFId;
                    }
                }
            }
        }
        catch(Exception e)
        {
            e.printStackTrace();
        }

        return addPathToIndividualCharacteristics(characteristics, path,strPathId);
    }
    /**
     * Add path information to characteristics
     * @param context
     * @param args
     * @return
     * @throws MatrixException
     */
    private MapList addPathToIndividualCharacteristics(MapList characteristics, String path, String strPathId) {
        MapList mlPath = addSettingToObjects(characteristics, "derivedPathId", strPathId);
        return addSettingToObjects(mlPath, "derivedPath", path);
    }
    /**
     * Create setting list
     * @param context
     * @param args
     * @return
     * @throws MatrixException
     */
    private MapList addSettingToObjects(MapList objList, String settingName, String settingValue) {
        MapList returnList = new MapList();
        Iterator charIterator = objList.iterator();
        Map objMap = null;
        while(charIterator.hasNext()) {
            objMap = new HashMap();
            objMap = (Map)charIterator.next();
            objMap.put(settingName, settingValue);
            returnList.add(objMap);
        }
        return returnList;
    }
    /**
     * Get Part Family Characteristics For PDF
     * @param context
     * @param partFamilyId
     * @param strMode
     * @return MapList with parent Characteristics
     * @throws Exception
     */
    private MapList getParentPartFamilyCharacteristicsForPDF(Context context, String partFamilyId,String strMasterPartType) throws Exception{
        MapList partFamilyList = getAllParentPartFamiliesForPDF(context, partFamilyId, "", "");
        MapList parentCharacteristicsList = getValidCharacteristicsFromParentPFsForPDF(context, partFamilyList, strMasterPartType );
        return parentCharacteristicsList;
    }

    /**
     * Get All the Parent Parts Part Families For PDF
     * @param context
     * @param partFamilyId
     * @param path
     * @param strMode
     * @return MapList
     * @throws Exception
     */
    public MapList getAllParentPartFamiliesForPDF(Context context, String partFamilyId, String path, String strId ) throws Exception{
        StringList objectSelects = (StringList)pgPDFViewHelper.createSelects(SELECT_NAME, SELECT_ID);
        MapList partFamilyList = new MapList();
        Map pfMap = null;
        String pfId = null;
        String pfName = null;
        if(UIUtil.isNotNullAndNotEmpty(partFamilyId)){
            DomainObject doPartFamily = DomainObject.newInstance(context,partFamilyId);
            String inputPFName = doPartFamily.getInfo(context, SELECT_NAME);
            String partFamilyType = pgV3Constants.TYPE_PARTFAMILY;
            String subClassRel = pgV3Constants.RELATIONSHIP_SUBCLASS;
            String localPath = "";
            String strPathId = "";
            if (UIUtil.isNullOrEmpty(path)) {
                localPath = inputPFName;
                strPathId = partFamilyId;
            }
            else{
                localPath = path;
                strPathId =strId;
            }
            partFamilyList = doPartFamily.getRelatedObjects(context,
                    subClassRel,
                    partFamilyType,
                    objectSelects,
                    null,
                    true,
                    false,
                    (short)1,
                    null,
                    null,
                    0);
            MapList tempList = new MapList();
            Iterator pfIterator = partFamilyList.iterator();
            while(pfIterator.hasNext()) {
                pfMap = new HashMap();
                pfMap = (Map)pfIterator.next();
                pfId = (String)pfMap.get(SELECT_ID);
                pfName = (String)pfMap.get(SELECT_NAME);
                localPath += "->" + pfName;
                strPathId += "~" + pfId;
                pfMap.put("path", localPath);
                pfMap.put("pathId", strPathId);
                tempList.addAll(getAllParentPartFamiliesForPDF(context, pfId, localPath,strPathId ));
            }
            partFamilyList.addAll(tempList);
        }
        return partFamilyList;
    }
    /**
     * Retrieve Parent Part Family Characteristics information for path
     * @param context
     * @param args
     * @return
     * @throws Exception
     */
    private MapList getValidCharacteristicsFromParentPFsForPDF(Context context, MapList partFamilyList, String strMasterPartType) throws Exception{
        MapList validCharacteristics = new MapList();
        MapList classifiedItems = new MapList();
        MapList characteristics  = new MapList();
        Map partFamilyMap = new HashMap();
        Map classifiedItemMap = new HashMap();
        String strClassfiedItemType = null;
        String strMasterPartCurrent = null;
        for (int i=0; i< partFamilyList.size(); i++) {
            partFamilyMap = (Map)partFamilyList.get(i);
            StringList objectSelects = (StringList)pgPDFViewHelper.createSelects(SELECT_NAME, SELECT_ID, SELECT_TYPE, SELECT_POLICY,SELECT_CURRENT);
            classifiedItems = getClassifiedItems(context, objectSelects, partFamilyMap);
            objectSelects.add(CPNCommonConstants.SELECT_ATTRIBUTE_SHAREDTTABLECHARACTERISTICTYPE);
            if(classifiedItems != null && !classifiedItems.isEmpty()){
                for (int j = 0; j < classifiedItems.size(); j++) {
                    classifiedItemMap = (Map)classifiedItems.get(j);
                    if(classifiedItemMap != null && !classifiedItemMap.isEmpty()){
                        strClassfiedItemType = (String)classifiedItemMap.get(SELECT_TYPE);
                        strMasterPartCurrent = (String)classifiedItemMap.get(SELECT_CURRENT);
                        if (pgV3Constants.STATE_RELEASE.equalsIgnoreCase(strMasterPartCurrent)
                                || pgV3Constants.STATE_COMPLETE.equalsIgnoreCase(strMasterPartCurrent)){
                            if (UIUtil.isNotNullAndNotEmpty(strMasterPartType)
                                    && strClassfiedItemType
                                    .equalsIgnoreCase(strMasterPartType)) {
                                characteristics = getCharacteristicsForPD(
                                        context, objectSelects, classifiedItemMap);
                                characteristics = addPathToCharacteristics(
                                        partFamilyMap, classifiedItemMap,
                                        characteristics);
                                validCharacteristics.addAll(characteristics);
                            } else if (pgV3Constants.TYPE_FINISHEDPRODUCTPART
                                    .equalsIgnoreCase(strMasterPartType)) {
                                characteristics = getCharacteristicsForPD(
                                        context, objectSelects, classifiedItemMap);
                                characteristics = addPathToCharacteristics(
                                        partFamilyMap, classifiedItemMap,
                                        characteristics);
                                validCharacteristics.addAll(characteristics);
                            }
                        }
                    }
                }
            }
        }
        return validCharacteristics;
    }

    // Get Classified Item from the Part Family
    private MapList getClassifiedItems(Context context,StringList objectSelects, Map partFamilyMap) throws FrameworkException {
        String pfId = (String)partFamilyMap.get(SELECT_ID);
        DomainObject parentPartFamily = DomainObject.newInstance(context, pfId);
        String classifiedItemRel = PropertyUtil.getSchemaProperty(context,"relationship_ClassifiedItem");
        String productDataType = PropertyUtil.getSchemaProperty(context,"type_ProductData");
        String referenceTypeAttribute = PropertyUtil.getSchemaProperty(context,"attribute_ReferenceType");
        MapList classifiedItems = parentPartFamily.getRelatedObjects(context,
                classifiedItemRel,productDataType,objectSelects, null,
                false, true, (short)1, "attribute["+referenceTypeAttribute+"] == 'M'", null);
        return classifiedItems;
    }

    // Get all performance Characteristics of the Product Data Part
    private MapList getCharacteristicsForPD(Context context,StringList objectSelects, Map classifiedItemMap) throws Exception {
        String classifiedItemId = (String) classifiedItemMap.get(SELECT_ID);
        DomainObject classifiedItem = DomainObject.newInstance(context,	classifiedItemId);
        StringList relSelects = (StringList)pgPDFViewHelper.createSelects(DomainObject.SELECT_RELATIONSHIP_ID,pgV3Constants.SELECT_ATTRIBUTE_SHAREDTABLECHARACTERISTICSEQUENCE);
        String characteristicsType = PropertyUtil.getSchemaProperty(context, "type_Characteristic");
        String sharedTableType = PropertyUtil.getSchemaProperty(context, "type_SharedTable");
        String typePattern = characteristicsType + "," +sharedTableType;
        String characteristicsRel = PropertyUtil.getSchemaProperty(context, "relationship_Characteristic");
        String sharedTableRel = PropertyUtil.getSchemaProperty(context, "relationship_SharedTable");
        String relPattern = characteristicsRel + "," +sharedTableRel;
        MapList characteristics = classifiedItem.getRelatedObjects(context,
                relPattern, typePattern, objectSelects, relSelects,
                false, true, (short) 1, null, null);
        return characteristics;
    }

    /**
     Added the code to fix the Part family Issue
     * @param partFamilyMap
     * @param classifiedItemMap
     * @param characteristics
     * @return MapList with Characteristics and it's Path
     * @throws Exception
     */
    private MapList addPathToCharacteristics(Map partFamilyMap,Map classifiedItemMap, MapList characteristics) throws Exception{
        String path = getPartFamilyPath(partFamilyMap, classifiedItemMap);
        StringList slPath = new StringList();
        slPath = FrameworkUtil.splitString(path, "|");
        String strPath = (String)slPath.get(0);
        String strPathId = (String)slPath.get(1);
        MapList characteristicsWithPath = addPathToIndividualCharacteristics(characteristics, strPath, strPathId);
        return characteristicsWithPath;
    }
    /**
     * Used to create part family path
     * @param partFamilyMap
     * @param classifiedItemMap
     * @param characteristics
     * @return MapList with Characteristics and it's Path
     * @throws Exception
     */
    private String getPartFamilyPath(Map partFamilyMap, Map classifiedItemMap) {
        String returnPath = "";
        String returnPathId = "";
        try{
            String strMode = (String)partFamilyMap.get("Mode");
            String pfId = (String)partFamilyMap.get(SELECT_ID);
            String pfName = (String)partFamilyMap.get(SELECT_NAME);
            String classifiedItemId = (String)classifiedItemMap.get(SELECT_ID);
            String classifiedItemName = (String)classifiedItemMap.get(SELECT_NAME);
            String previousPath = (String)partFamilyMap.get("path");
            String previousPathId = (String)partFamilyMap.get("pathId");
            if (UIUtil.isNotNullAndNotEmpty(previousPath)) {
                returnPath = previousPath + "->" + classifiedItemName;
                returnPathId = previousPathId +"~"+classifiedItemId;
            } else {
                returnPath =  pfName + "->" + classifiedItemName;
                returnPathId = pfId +"~"+classifiedItemId;
            }
            returnPath = returnPath+"|"+returnPathId;
        }
        catch(Exception e)
        {
            e.printStackTrace();
        }
        return returnPath;
    }
    /**
     * Add Shared table characteristics
     * @param
     * @param objList
     * @throws Exception
     */
    private void makeCharacteristicsAddedBySharedTableReadonly(Context context, MapList objList) throws Exception{
        Map objMap = null;
        String strType = null;
        for(int i=0;i<objList.size();i++) {
            objMap = new HashMap();
            objMap = (Map)objList.get(i);
            strType = (String)objMap.get(DomainConstants.SELECT_TYPE);
            if (strType != null && strType.equals(CPNCommonConstants.TYPE_SHARED_TABLE)){
                objMap.put("RowEditable","readonly");
            }
        }
    }
    /**
     Function Added  to traverse through the Product Data EBOM Structure and return it's Customer , Inner Pack and Consumer unit and their Master's Characterstics.
     * @param context
     * @param paramMap
     * @param finishedPartDO
     * @param objList
     * @param derivedFilterSelection
     * @return MapList with the connected EBOM Part and their Masters Characterstics
     * @throws Exception
     */
    private MapList getEbomPartsCharacterstics(Context context, Map paramMap,DomainObject finishedPartDO, MapList objList,String derivedFilterSelection ) throws Exception{
        MapList ebomCharList=new MapList();
        MapList returnList=new MapList();
        MapList tempMapList = null;
        Map partMap = new HashMap();
        Map ebomCharListMap = null;
        String [] newArguments=null;
        StringList strlObjectSelectable = new StringList(3);
        strlObjectSelectable.add(DomainConstants.SELECT_ID);
        strlObjectSelectable.add(DomainConstants.SELECT_TYPE);
        strlObjectSelectable.add(DomainConstants.SELECT_NAME);
        StringList strlRelSelectable = new StringList(3);
        strlRelSelectable.add(DomainRelationship.SELECT_FROM_TYPE);
        strlRelSelectable.add(DomainRelationship.SELECT_TO_TYPE);
        strlRelSelectable.add(DomainRelationship.SELECT_FROM_ID);
        String ebomPartId = null;
        String ebomPartName = null;
        String strDerivedPath = null;
        String relFromType = null;
        String relToType = null;
        String relFromId = null;
        String relFromName = null;
        String strParse  = DomainConstants.EMPTY_STRING;
        String strParseId = DomainConstants.EMPTY_STRING;
        String sOid = DomainConstants.EMPTY_STRING;
        String rangeAll=EnoviaResourceBundle.getProperty(context,"emxCPN.MasterCharacteristics.DerivedRange.All");
        if (objList != null && objList.size() > 0 && rangeAll.equalsIgnoreCase(derivedFilterSelection)){
            returnList.addAll(objList);
        }
        MapList conectedEBOMPartList = finishedPartDO.getRelatedObjects(context,
                DomainObject.RELATIONSHIP_EBOM,
                //Modified by DSM 2015x.4 (Sogeti) For Defect #14300 - Starts
              //Modified by DSM (Sogeti) for 22x.04 (Dec CW 2023) Requirement 47656,47667 - Start
                pgV3Constants.TYPE_PGCUSTOMERUNITPART+ ","+ pgV3Constants.TYPE_PGINNERPACKUNITPART+ ","+ pgV3Constants.TYPE_PGCONSUMERUNITPART+ ","+ pgV3Constants.TYPE_STRUCTURED_ATS,
              //Modified by DSM (Sogeti) for 22x.04 (Dec CW 2023) Requirement 47656,47667 - End  
                //Modified by DSM 2015x.4 (Sogeti) For Defect #14300 - Ends
                strlObjectSelectable,//Object Select
                strlRelSelectable, //rel Select
                false,//get To
                true,//get From
                (short)0,//recurse level
                "",//where Clause
                null,//relationshipWhere Clause
                0);//return all
        Iterator ebomItr=conectedEBOMPartList.iterator();
        while(ebomItr.hasNext()){
            partMap = (Map)ebomItr.next();
            ebomPartId=(String)partMap.get(DomainConstants.SELECT_ID);
            ebomPartName=(String)partMap.get(DomainConstants.SELECT_NAME);
            relFromType=(String)partMap.get(DomainRelationship.SELECT_FROM_TYPE);
            relToType=(String)partMap.get(DomainRelationship.SELECT_TO_TYPE);
            relFromId=(String)partMap.get(DomainRelationship.SELECT_FROM_ID);
            if(pgV3Constants.TYPE_PGCONSUMERUNITPART.equals(relFromType) && (pgV3Constants.TYPE_PGCONSUMERUNITPART.equals(relToType) || pgV3Constants.TYPE_FINISHEDPRODUCTPART.equals(relToType))){
                continue;
            }
          //Added DSM for Requirement 47656,47667 2022x.04 Dec CW 2023 - Start
            else if(pgV3Constants.TYPE_STRUCTURED_ATS.equals(relToType)) {
            	   continue;
            }
          //Added DSM for Requirement 47656,47667 2022x.04 Dec CW 2023 - End  
            if(pgV3Constants.TYPE_PGCUSTOMERUNITPART.equals(relFromType) && pgV3Constants.TYPE_FINISHEDPRODUCTPART.equals(relToType)){
                //Modified by DSM 2015x.4 (Sogeti) For Defect #14300 - Starts
                returnList.clear();
                ebomPartId=relFromId;
                if(UIUtil.isNotNullAndNotEmpty(ebomPartId))
                {
                    ebomPartName=new DomainObject(ebomPartId).getInfo(context,DomainConstants.SELECT_NAME);
                }
                //continue;
                //Modified by DSM 2015x.4 (Sogeti) For Defect #14300 - Ends
            }

            paramMap.put(pgV3Constants.OBJECT_ID,ebomPartId);
            paramMap.put("pgVPDCPNCharacteristicDerivedFilter",rangeAll);
            newArguments = JPO.packArgs(paramMap);
            ebomCharList.addAll(getMicroChar(context,newArguments));
            Iterator ebomCharListItr=ebomCharList.iterator();
            while(ebomCharListItr.hasNext())
            {
                tempMapList = new MapList();
                StringList tempList = new StringList();
                ebomCharListMap = new HashMap();
                ebomCharListMap = (Map)ebomCharListItr.next();
                strDerivedPath=(String)ebomCharListMap.get("derivedPath");

                if(null==strDerivedPath){
                    ebomCharListMap.put("derivedPath", ebomPartName);
                    ebomCharListMap.put("derivedPathId", ebomPartId);
                    ebomCharListMap.put("disableSelection", "true");
                    ebomCharListMap.put("RowEditable", "readonly");
                    ebomCharListMap.put("derivedCharacteristic", "true");
                    returnList.add(ebomCharListMap);
                }
                else{
                    strParse  = (String)ebomCharListMap.get("derivedPath");
                    strParseId = (String)ebomCharListMap.get("derivedPathId");
                    sOid = strParseId.substring(strParseId.lastIndexOf("'")+1,strParseId.length());
                    if(tempList.isEmpty()){
                        tempList.addElement(sOid);
                    }
                    if(tempList.contains(sOid)){
                        tempMapList.add(ebomCharListMap);
                    }
                    //tempMapList.sort(CPNCommonConstants.SELECT_ATTRIBUTE_SHAREDTABLECHARACTERISTICSEQUENCE,"ascending", "integer");
                    tempMapList.sort(pgV3Constants.SELECT_ATTRIBUTE_SHAREDTABLECHARACTERISTICSEQUENCE,"ascending", "integer");
                    for(int j=0;j<tempMapList.size();j++){
                        returnList.add((Map)tempMapList.get(j));
                    }
                }
            }
            ebomCharList.clear();
            if(relFromType.equals(pgV3Constants.TYPE_PGCUSTOMERUNITPART) && relToType.equals(pgV3Constants.TYPE_FINISHEDPRODUCTPART)){
                break;
            }
        }
        return returnList;
    }
    /**
     * This method is used to form the Substitute table for Object
     * @param Context - context
     * @param String  - strObjectId
     * @param MapList - mlMain
     * @return StringBuilder which contains the data to form the substitutes table
     */
    //Modified by DSM(Sogeti)-2015x.4 for PDF Views (DSOSubstitute Table) - Starts
    ///Method Modified by DSM(Sogeti)-2018.5 for PDF Views Requirements
    private  StringBuilder getDSOSubstitutes(Context context,String strObjectId,MapList mlMain,String strPDFViewKind) throws MatrixException{
        long startTime = new Date().getTime();
        boolean isPushContext = false;
        DomainObject dmoPart = null;
        StringBuilder BOMSubstituteSAPBuffer=new StringBuilder();
        boolean isCatiAPP = false;
        if(UIUtil.isNotNullAndNotEmpty(strObjectId)){
            try{
                dmoPart= DomainObject.newInstance(context,strObjectId);
                MapList mlToId = new MapList();
                String strChkType = dmoPart.getInfo(context,DomainConstants.SELECT_TYPE);
                isCatiAPP = isCatia(context, strObjectId);
                // check if mlmain is empty or not
                if((mlMain == null)) {
                    if(context.isAssigned(pgV3Constants.ROLE_PGCONTRACTSUPPLIER) || context.isAssigned(pgV3Constants.ROLE_PGCONTRACTMANUFACTURER)){
                        ContextUtil.pushContext(context, pgV3Constants.PERSON_USER_AGENT, "", "");
                        isPushContext = true;
                    }
                    Map BOMPack=new HashMap();
                    BOMPack.put("emxExpandFilter","1" );
                    BOMPack.put("ENCBOMRevisionCustomFilter", "As Stored");
                    BOMPack.put("objectId", strObjectId);
                    BOMPack.put("parentOID",strObjectId);
                    String[] args = JPO.packArgs(BOMPack);
//				emxPart_mxJPO emxPart = new emxPart_mxJPO(context, args);
//				MapList mlEBOM=emxPart.getEBOMsWithRelSelectablesSB(context, args);
//Added for PDF Refactor
                    MapList mlEBOM=(MapList)pgPDFViewHelper.executeMainClassMethod(context, "emxPart", "getEBOMsWithRelSelectablesSB", args);
                    StringList selectStmtsRel = new StringList(5);
                    selectStmtsRel.add(DomainRelationship.SELECT_TO_ID );
                    selectStmtsRel.add(pgV3Constants.SELECT_ATTRIBUTE_PGCHANGE);
                    selectStmtsRel.add(pgV3Constants.SELECT_ATTRIBUTE_FINDNUMBER);
                    selectStmtsRel.add(pgV3Constants.SELECT_ATTRIBUTE_REFERENCEDESIGNATOR);
                    selectStmtsRel.add(pgV3Constants.SELECT_ATTRIBUTE_PGOPTIONALCOMPONENT);
                    StringList selectStmt = new StringList(7);
                    selectStmt.add(DomainConstants.SELECT_NAME);
                    selectStmt.add(DomainConstants.SELECT_TYPE);
                    selectStmt.add(DomainConstants.SELECT_ID);
                    selectStmt.add(pgV3Constants.SELECT_ATTRIBUTE_TITLE);
                    selectStmt.add(DomainConstants.SELECT_CURRENT);
                    //Modified for 2018x Upgrade - Stage attribute is replaced by Release Phase attribute in 18x OOTB.
                    selectStmt.add(pgV3Constants.SELECT_ATTRIBUTE_RELEASE_PHASE);
                    //Modified by DSM-2015x.4.1 Feb downtime for PDF Views (Defect Id #15263) - Starts
                    selectStmt.add("current.access[read]");
                    //Modified by DSM-2015x.4.1 Feb downtime for PDF Views (Defect Id #15263) - Ends
                    mlMain = new MapList();
                    if(null!=mlEBOM && mlEBOM.size() > 0) {
                        if(!(pgV3Constants.TYPE_PGANCILLARYPACKAGINGMATERIALPART.equals(strChkType)) || pgV3Constants.TYPE_PGMASTERPACKAGINGMATERIALPART.equals(strChkType) || pgV3Constants.TYPE_PACKAGINGMATERIALPART.equals(strChkType) || pgV3Constants.TYPE_PGONLINEPRINTINGPART.equals(strChkType)) {
                            Map mapObject = null;
                            Map mData = new HashMap();
                            Map mpBom = null;
                            String[] relargs = new String[1];
                            String stridConn = DomainConstants.EMPTY_STRING;
                            String strLevel = DomainConstants.EMPTY_STRING;
                            String stParentId  = DomainConstants.EMPTY_STRING;
                            String strid  = DomainConstants.EMPTY_STRING;
                            String strpgChange  = DomainConstants.EMPTY_STRING;
                            String strRefDesig  = DomainConstants.EMPTY_STRING;
                            String strFindNumber  = DomainConstants.EMPTY_STRING;
                            String strOptComponent = DomainConstants.EMPTY_STRING;
                            for (Iterator iterator = mlEBOM.iterator(); iterator.hasNext();) {
                                mapObject = (Map) iterator.next();
                                strLevel = (String)mapObject.get(DomainConstants.SELECT_LEVEL);
                                stridConn = (String)mapObject.get(DomainConstants.SELECT_RELATIONSHIP_ID);
                                stParentId = (String)mapObject.get(DomainConstants.SELECT_ID);
                                relargs[0] = stridConn;
                                mlToId = (MapList)DomainRelationship.getInfo(context, relargs,selectStmtsRel);
                                mlToId.addSortKey(pgV3Constants.SELECT_ATTRIBUTE_FINDNUMBER, "ascending", "String");
                                mlToId.sort();
                                if(null != mlToId && mlToId.size()>0) {
                                    for(Iterator itrmlToId = mlToId.iterator(); itrmlToId.hasNext();) {
                                        mData = (Map)itrmlToId.next();
                                        strid = (String)mData.get(DomainRelationship.SELECT_TO_ID );
                                        strpgChange = (String)mData.get(pgV3Constants.SELECT_ATTRIBUTE_PGCHANGE);
                                        strRefDesig = (String)mData.get(pgV3Constants.SELECT_ATTRIBUTE_REFERENCEDESIGNATOR);
                                        strFindNumber = (String)mData.get(pgV3Constants.SELECT_ATTRIBUTE_FINDNUMBER);
                                        strOptComponent = (String)mData.get(pgV3Constants.SELECT_ATTRIBUTE_PGOPTIONALCOMPONENT);
                                    }
                                }
                                DomainObject dmoBom = DomainObject.newInstance(context, strid);
                                mpBom = new HashMap();
                                mpBom = dmoBom.getInfo(context, selectStmt);
                                mpBom.put(pgV3Constants.SELECT_ATTRIBUTE_PGCHANGE, strpgChange);
                                mpBom.put(pgV3Constants.SELECT_ATTRIBUTE_FINDNUMBER, strFindNumber);
                                mpBom.put(DomainConstants.SELECT_LEVEL, strLevel);
                                mpBom.put(DomainConstants.SELECT_RELATIONSHIP_ID, stridConn);
                                mpBom.put("ParentId", stParentId);
                                mpBom.put("RefDesig", strRefDesig);
                                mpBom.put("OptComp", strOptComponent);
                                mlMain.add(mpBom);
                                mlMain.addSortKey(pgV3Constants.SELECT_ATTRIBUTE_FINDNUMBER, "ascending", "String");
                                mlMain.sort();
                            }
                        }
                    }
                }
                //Added by DSM(Sogeti)-2018x.5 for PDF Views Requirement  - Starts
                if(!(pgV3Constants.TYPE_MASTERPRODUCTPART.equals(strChkType) || pgV3Constants.TYPE_PGMASTERCUSTOMERUNITPART.equals(strChkType))){
                    //Added by DSM(Sogeti)-2018x.5 for PDF Views Requirement  - Ends
                    if(null!=mlMain && mlMain.size() > 0) {
                        //Substitute
                        int cntFPP = 0;
                        boolean bFPPTable = false;
                        String stridConn = DomainConstants.EMPTY_STRING;
                        String strLevel = DomainConstants.EMPTY_STRING;
                        String strid = DomainConstants.EMPTY_STRING;
                        String stParentId = DomainConstants.EMPTY_STRING;
                        Map mapObject = null;
                        Map mpParam = null;
                        Map mpObj = null;
                        Map mpObjSl = null;
                        Map mpBOMSubsSCN = null;
                        MapList mlObjList = null;
                        MapList mlSub = null;
                        Map mpBOMSubs = null;
                        Map mapSub = null;
                        Map mpParamName = null;
                        Map mpObjNameSCN = null;
                        Map mpObjName = null;
                        Map mpBomSub = null;
                        Map mpObjNameSST = null;
                        Map mpBOMSubsName = null;
                        Map mpBOMSubsSST = null;
                        Map mpObjNameQty = null;
                        Map mpBOMSubsQty = null;
                        Map mpObjNameUoM = null;
                        Map mpObjNameValidStart = null;
                        Map mpBOMSubsUoM = null;
                        Map mpBOMSubsValidStart = null;
                        Map mpObjNameValidUntil = null;
                        Map mpBOMSubsValidUntil = null;
                        Map mpObjNameRefDes = null;
                        Map mpBOMSubsRefDes = null;
                        Map mpObjNameComments = null;
                        Map mpBOMSubsComments = null;
                        Map mpBom = null;
                        Map mpObjNameSSTBOM  = null;
                        Map mpSettings = null;
                        Map mpcolumnMap = null;
                        Map mpBOMSubsSSTBOM = null;
                        Map mpColumnName = null;
                        Map mpSettingsMap = null;
                        MapList mlObjListName = null;
                        MapList mlObjListSCN = null;
                        MapList mlObjListNameSST = null;
                        MapList mlObjListQty = null;
                        MapList mlObjListValidStart = null;
                        MapList mlObjListNameSSTBOM = null;
                        MapList mlObjListComments = null;
                        MapList mlObjListRefDes = null;
                        MapList mlObjListValidUntil = null;
                        MapList mlObjListUom = null;
                        String strSub = DomainConstants.EMPTY_STRING;
                        String strSubId = DomainConstants.EMPTY_STRING;
                        DomainRelationship relObj = null;
                        String strSubType = DomainConstants.EMPTY_STRING;
                        String strSubQty = DomainConstants.EMPTY_STRING;
                        String strSubComments = DomainConstants.EMPTY_STRING;
                        String strSubReferenceDesignator = DomainConstants.EMPTY_STRING;
                        String strSubOptionalComponent = DomainConstants.EMPTY_STRING;
                        String strOriginatingSource = DomainConstants.EMPTY_STRING;
                        String strBaseUnitOfMeasure = DomainConstants.EMPTY_STRING;
                        String strEBOMSubstituteRelId = DomainConstants.EMPTY_STRING;
                        String strBaseUnitOfMeasurePickList = DomainConstants.EMPTY_STRING;
                        String strSubUoM = DomainConstants.EMPTY_STRING;
                        String strSubValidUntil = DomainConstants.EMPTY_STRING;
                        String strSubSCN = DomainConstants.EMPTY_STRING;
                        String strType = DomainConstants.EMPTY_STRING;
                        String strValue = DomainConstants.EMPTY_STRING;
                        String strBomName = DomainConstants.EMPTY_STRING;
                        String strBomRev = DomainConstants.EMPTY_STRING;
                        String strBomTitle = DomainConstants.EMPTY_STRING;
                        String strBomType = DomainConstants.EMPTY_STRING;
                        String strBOMValue = DomainConstants.EMPTY_STRING;
                        String strRev = null;
                        String strTitle = null;
                        String strMin = DomainConstants.EMPTY_STRING;
                        String strMax = DomainConstants.EMPTY_STRING;
                        String strChg = DomainConstants.EMPTY_STRING;
                        String strLayerName = DomainConstants.EMPTY_STRING;
                        String strLayerGroupName = DomainConstants.EMPTY_STRING;
                        String strReportedFunction = DomainConstants.EMPTY_STRING;
                        StringList selectStmtSub = new StringList(7);
                        selectStmtSub.add(DomainConstants.SELECT_TYPE);
                        selectStmtSub.add(DomainConstants.SELECT_REVISION);
                        selectStmtSub.add(DomainConstants.SELECT_NAME);
                        //Modified for 2018x Upgrade - Stage attribute is replaced by Release Phase attribute in 18x OOTB.
                        selectStmtSub.add(pgV3Constants.SELECT_ATTRIBUTE_RELEASE_PHASE);
                        selectStmtSub.add(pgV3Constants.SELECT_ATTRIBUTE_TITLE);
                        selectStmtSub.add(pgV3Constants.SELECT_ATTRIBUTE_PGORIGINATINGSOURCE);
                        selectStmtSub.add("from["+pgV3Constants.RELATIONSHIP_PGPDTEMPLATESTOPGPLIREPORTEDFUNCTION+"].to.name");
                        //Added/Modified  by DSM-Sogeti for (2018x.6 Apr CW 2022) PDF Views Req 42293-Starts
                        selectStmtSub.add(pgV3Constants.SELECT_ATTRIBUTE_PGLIFECYCLESTATUS);
                        selectStmtSub.add(pgPDFViewConstants.SELECT_ATTRIBUTE_PGMATERIALRESTRICTION);
                        selectStmtSub.add(pgPDFViewConstants.SELECT_ATTRIBUTE_PGMATERIALRESTRICTIONCOMMENT);
                        //Added by DSM(Sogeti) - for 2022x.02 May CW PDF Views Req#46172 - Starts
                        selectStmtSub.add(pgPDFViewConstants.SELECT_ATTRIBUTE_PGRELATIONSHIPRESTRICTION);
                        selectStmtSub.add(pgPDFViewConstants.SELECT_ATTRIBUTE_PGRELATIONSHIPRESTRICTIONCOMMENTS);
                        //Added by DSM(Sogeti) - for 2022x.02 May CW PDF Views Req#46172 - Ends
                        //Added/Modified  by DSM-Sogeti for (2018x.6 Apr CW 2022) PDF Views Req 42293-Ends
                        String strMaterialFunctionvalue		= DomainConstants.EMPTY_STRING;
                        String strOrigSource 				= DomainConstants.EMPTY_STRING;
                        //Modified by DSM-2015x.4.1 Feb downtime for PDF Views (Defect Id #15263) - Starts
                        String strHasAccess = DomainConstants.EMPTY_STRING;
                        //Modified by DSM-2015x.4.1 Feb downtime for PDF Views (Defect Id #15263) - Ends
                        //Added by DSM Sogeti for 2022x.02 May CW for PDF Views (Req -46172) - Starts
                        StringList typeList = new StringList(6);
                        typeList.add(pgV3Constants.TYPE_PGCONSUMERUNITPART);
                        typeList.add(pgV3Constants.TYPE_PGCUSTOMERUNITPART);
                        typeList.add(pgV3Constants.TYPE_FABRICATEDPART);
                        typeList.add(pgV3Constants.TYPE_PGINNERPACKUNITPART);
                        typeList.add(pgV3Constants.TYPE_INTERMEDIATE_PRODUCT_PART);
                        typeList.add(pgV3Constants.TYPE_PACKAGINGASSEMBLYPART);
                        boolean showRestrictionData = typeList.contains(strChkType);
                        //Added by DSM Sogeti for 2022x.02 May CW for PDF Views (Req -46172) - Ends
                        for (Iterator iterator = mlMain.iterator(); iterator.hasNext();) {
                            mapObject = (Map) iterator.next();
                            String strParentId = (String)mapObject.get("ParentId");
                            strid = (String)mapObject.get(DomainConstants.SELECT_ID);
                            //Modified by DSM-2015x.4.1 Feb downtime for PDF Views (Defect Id #15263) - Starts
                            strHasAccess = (String)mapObject.get("current.access[read]");
                            //Modified by DSM-2015x.4.1 Feb downtime for PDF Views (Defect Id #15263) - Ends
                            mlSub = new MapList();
                            mlSub = getSubstituteData(context, mapObject);
                            if(null != mlSub && mlSub.size()>0){
                                cntFPP++;
                                //Modified by DSM(Sogeti)-2015x.4 for PDF View (Code Optimisation) - Starts
                                //if(pgV3Constants.TYPE_ASSEMBLEDPRODUCTPART.equals(strChkType) || pgV3Constants.TYPE_DEVICEPRODUCTPART.equals(strChkType) || pgV3Constants.TYPE_FABRICATEDPART.equals(strChkType)){
                                //Commented by DSM(Sogeti)-2018x.5 for PDF Views Requirement  - Starts
                                //						if(!pgV3Constants.TYPE_MASTERPRODUCTPART.equals(strChkType) && !pgV3Constants.TYPE_PGMASTERCUSTOMERUNITPART.equals(strChkType)){
                                //Commented by DSM(Sogeti)-2018x.5 for PDF Views Requirement  - Ends
                                //Modified by DSM(Sogeti)-2015x.4 for PDF View (Code Optimisation) - Ends
                                if( cntFPP == 1) {
                                    bFPPTable = true;
                                    BOMSubstituteSAPBuffer.append("<TR><TD><TABLE class=\"WordWrappdf\" cellspacing=\"0\" width=\"1000px\" id=\"Substitutes\">");
                                    BOMSubstituteSAPBuffer.append("<thead>");
                                    //Added/Modified  by DSM-Sogeti for (2018x.6 Apr CW 2022) PDF Views Req 42293-Starts
                                    if(pgV3Constants.TYPE_ASSEMBLEDPRODUCTPART.equals(strChkType) || pgV3Constants.TYPE_DEVICEPRODUCTPART.equals(strChkType)) {
                                    	BOMSubstituteSAPBuffer.append("<TR><TD class=\"new\" colspan='12' ><B><font size ='4'>Substitutes</font></B></TD></TR>");
                                    	if(!"GenDoc".equalsIgnoreCase(strPDFViewKind.trim())) {
                                    		BOMSubstituteSAPBuffer.append("<TR align='center'><TH align ='left' width=\"60\"><B>Substitute<br />Parts(SP)<br />Rev(R)</B><br /><B>Chg(C)</B></TH>");
                                    	} else {
                                    		BOMSubstituteSAPBuffer.append("<TR align='center'><TH align ='left' width=\"60\"><B>Substitute<br />Parts(SP)<br /><B>Chg(C)</B></B></TH>");
                                    	}
                                    	BOMSubstituteSAPBuffer.append("<TH align ='center' width=\"60\"><B>Substitution<br/>Combination<br/>Number<br/>(SCN)<br/>Title</B></TH>");
                                    	BOMSubstituteSAPBuffer.append("<TH align ='left' width=\"100px\"><B>Type(T)<br />Specification<br />SubType(SST)<br /><B>QTY(Q)</B></B></TH>");
                                    	if(isCatiAPP) {
                                    		BOMSubstituteSAPBuffer.append("<TH width=\"50\"><B>Min(Min)<br/>Max(Max)<br/>Layer<br/>Name(LN)</B></TH>");
                                    		BOMSubstituteSAPBuffer.append("<TH width=\"50\"><B>Material<br/>Function(MF)<br/>Reported Function<br/>(RF)</B></TH>");
                                    		BOMSubstituteSAPBuffer.append("<TH width=\"100px\"><B>Base Unit<br />of Measure<br />(BUOM)<br />Valid Start<br />Date (VSD)<br />Valid Until<br />Date (VUD)</B></TH>");
                                    		BOMSubstituteSAPBuffer.append("<TH width=\"60\"><B>Ref Des(RD)<br/>Layer<br/>Group(LG)</B></TH>");

                                    		// Modified by DSM-2022x.2 for PDF Views (Req:46173,46174) : Starts
                                    		if(pgV3Constants.PDFVIEW_GENDOC.equalsIgnoreCase(strPDFViewKind)) {
                                    			BOMSubstituteSAPBuffer.append("<TH align=\"center\" width=\"95\"><B>Manufacturing<BR></BR>Status</B></TH>");
                                    		}
                                    		else {
                                    			BOMSubstituteSAPBuffer.append("<TH align=\"center\" width=\"95\"><B>Manufacturing<BR></BR>Status(MS)<BR></BR>Relationship<BR></BR>Restriction<br />(RR)</B></TH>");
                                    			BOMSubstituteSAPBuffer.append("<TH align=\"center\" width=\"95\"><B>Relationship<BR></BR>Restriction<BR></BR>Comment</B></TH>");

                                    		}
                                    		// Modified by DSM-2022x.2 for PDF Views (Req:46173,46174) : Ends                                		


                                    		BOMSubstituteSAPBuffer.append("<TH align=\"center\" width=\"95\"><B>Comments<br />(C)<br />Component<br /> Count (CC)<br />Certifications<br />(Cert)</B></TH>");



                                    	}
                                    	else {
                                    		BOMSubstituteSAPBuffer.append("<TH width=\"50\"><B>Min(Min)<br/>Max(Max)</B></TH>");
                                    		BOMSubstituteSAPBuffer.append("<TH width=\"50\"><B>Function(F)<br/>Reported Function<br/>(RF)</B></TH>");
                                    		BOMSubstituteSAPBuffer.append("<TH width=\"100px\"><B>Base Unit<br />of Measure<br />(BUOM)<br />Valid Start<br />Date (VSD)<br />Valid Until<br />Date (VUD)</B></TH>");
                                    		if(pgV3Constants.TYPE_ASSEMBLEDPRODUCTPART.equals(strChkType)){
                                    			BOMSubstituteSAPBuffer.append("<TH width=\"60\"><B>Ref Des<br />(RD)<br />Comments(C)<br />Component<br /> Count (CC)<br />Certifications<br />(Cert)</B></TH>");

                                    		}else {
                                    			BOMSubstituteSAPBuffer.append("<TH width=\"60\"><B>Ref Des<br />(RD)<br />Comments<br />(C)<br />Certifications<br />(Cert)</B></TH>");

                                    		}

                                    		// Modified by DSM-2022x.2 for PDF Views (Req:46173,46174) : Starts                               
                                    		if(pgV3Constants.PDFVIEW_GENDOC.equalsIgnoreCase(strPDFViewKind)) {
                                    			BOMSubstituteSAPBuffer.append("<TH align=\"center\" width=\"95\"><B>Manufacturing<BR></BR>Status</B></TH>");
                                    		}
                                    		else {
                                    			BOMSubstituteSAPBuffer.append("<TH align=\"center\" width=\"95\"><B>Manufacturing<BR></BR>Status(MS)<BR></BR>Relationship<BR></BR>Restriction<br />(RR)</B></TH>");
                                    			BOMSubstituteSAPBuffer.append("<TH align=\"center\" width=\"95\"><B>Relationship<BR></BR>Restriction<BR></BR>Comment</B></TH>");

                                    		}
                                    		// Modified by DSM-2022x.2 for PDF Views (Req:46173,46174) : Ends             

                                    	}

                                    }else {
                                        BOMSubstituteSAPBuffer.append("<TR><TD class=\"new\" colspan='16' ><B><font size ='4'>Substitutes</font></B></TD></TR>");
                                        if(!"GenDoc".equalsIgnoreCase(strPDFViewKind.trim())) {
                                            BOMSubstituteSAPBuffer.append("<TR align='center'><TH align ='left' width=\"60\"><B>Substitute<br />Parts(SP)<br />Rev(R)</B></TH>");
                                        } else
                                            BOMSubstituteSAPBuffer.append("<TR align='center'><TH align ='left' width=\"60\"><B>Substitute<br />Parts</B></TH>");
                                        BOMSubstituteSAPBuffer.append("<TH align ='center' width=\"60\"><B>Chg</B></TH>");
                                        BOMSubstituteSAPBuffer.append("<TH align ='center' width=\"60\"><B>Substitution<br/>Combination<br/>Number<br/>(SCN)<br/>Title</B></TH>");
                                        //Modified by DSM(Sogeti)-2015x.4 for PDF Views (Req - 7554) - Ends
                                        BOMSubstituteSAPBuffer.append("<TH align ='left' width=\"140\"><B>Type(T)<br />Specification<br />SubType(SST)</B></TH>");
                                        //Modified by DSM(Sogeti)-2015x.4 for PDF Views (Req - 7554) - Ends
                                        BOMSubstituteSAPBuffer.append("<TH width=\"50\"><B>QTY</B></TH>");
                                        if (pgV3Constants.TYPE_INTERMEDIATE_PRODUCT_PART.equals(strChkType)) {
                                            BOMSubstituteSAPBuffer.append("<TH width=\"50\"><B>Function(F)<br/>Reported Function<br/>(RF)</B></TH>");
                                        }

                                        BOMSubstituteSAPBuffer.append("<TH width=\"50\"><B>Base<br />Unit<br />of<br />Measure</B></TH>");
                                        //Modified by DSM(Sogeti)-2018x.2 for PDF Views (Req FAB 7554,7555) - Starts
                                        if(pgV3Constants.TYPE_FABRICATEDPART.equals(strChkType)){
                                            BOMSubstituteSAPBuffer.append("<th width=\"75px\" align=\"center\"><b>Function</b></th>");
                                        }
                                        //Modified by DSM(Sogeti)-2018x.2 for PDF Views (Req FAB 7554,7555) - Ends
                                        //Added by DSM Sogeti for 2022x.02 May CW for PDF Views (Req -46172) - Starts
                                        if(showRestrictionData && pgV3Constants.PDFVIEW_ALLINFO.equalsIgnoreCase(strPDFViewKind))
                                        {
                                            BOMSubstituteSAPBuffer.append("<TH width=\"50\"><B>Valid<br />Start<br />Date<br />(VSD)<br />Valid<br />Until<br />Date(<br />VUD)</B></TH>");
                                            BOMSubstituteSAPBuffer.append("<TH width=\"60\"><B>Ref Des</B></TH>");
                                            BOMSubstituteSAPBuffer.append("<TH width=\"120\"><B>Comments</B></TH>");
                                            BOMSubstituteSAPBuffer.append("<TH align=\"center\" width=\"95\"><B>Relationship Restriction(RR)</B><BR></BR><B>Relationship Restriction</B><BR></BR><B>Comment(RRC)</B></TH>");
                                        }else {
                                            BOMSubstituteSAPBuffer.append("<TH width=\"50\"><B>Valid<br />Start<br />Date</B></TH>");
                                            BOMSubstituteSAPBuffer.append("<TH width=\"50\"><B>Valid<br />Until<br />Date</B></TH>");
                                            BOMSubstituteSAPBuffer.append("<TH width=\"60\"><B>Ref Des</B></TH>");
                                            BOMSubstituteSAPBuffer.append("<TH width=\"120\"><B>Comments</B></TH>");
                                        }//Added by DSM Sogeti for 2022x.02 May CW for PDF Views (Req -46172) - Ends
                                    }
                                    //Added/Modified  by DSM-Sogeti for (2018x.6 Apr CW 2022) PDF Views Req 42293-Ends
							/*if(pgV3Constants.TYPE_ASSEMBLEDPRODUCTPART.equals(strChkType) || (pgV3Constants.TYPE_DEVICEPRODUCTPART.equals(strChkType) && !("GenDoc".equalsIgnoreCase(strPDFViewKind.trim()))) || pgV3Constants.TYPE_FABRICATEDPART.equals(strChkType)){
							BOMSubstituteSAPBuffer.append("<TH width=\"60\"><B>Ref Des(RD)<br />Material<br />Function(MF)</B></TH>");
							}
							else if(pgV3Constants.TYPE_DEVICEPRODUCTPART.equals(strChkType) && ("GenDoc".equalsIgnoreCase(strPDFViewKind.trim())))
							{
							BOMSubstituteSAPBuffer.append("<TH width=\"60\"><B>Ref Des</B></TH>");
							}*/
                                    //else{
                                    //BOMSubstituteSAPBuffer.append("<TD width=\"50\"><B>Ref Des(RD)<BR></BR>Optional Components(OC)</B></TD>");
                                    //}
                                    //Modified by DSM-2018x.6 for PDF Views (Req Id #38412) - Starts

                                    //Modified by DSM-2018x.6 for PDF Views (Req Id #38412) - Ends
                                    //Added by DSM(Sogeti)-2018x.2 for PDF Views Requirements - Starts

                                    //Added by DSM(Sogeti)-2018x.2 for PDF Views Requirements - Ends
                                    if(!"GenDoc".equalsIgnoreCase(strPDFViewKind.trim())) {
                                        BOMSubstituteSAPBuffer.append("<TH align ='left' width=\"60\"><B>Substitute<br />For(SF)<br />Rev(R)</B></TH>");
                                    } else {
                                        BOMSubstituteSAPBuffer.append("<TH align ='left' width=\"60\"><B>Substitute<br />For</B></TH>");
                                    }
                                    if(pgV3Constants.TYPE_FABRICATEDPART.equals(strChkType) || pgV3Constants.TYPE_PGINNERPACKUNITPART.equals(strChkType) || pgV3Constants.TYPE_PACKAGINGASSEMBLYPART.equals(strChkType) || pgV3Constants.TYPE_PGCUSTOMERUNITPART.equals(strChkType) || pgV3Constants.TYPE_PGCONSUMERUNITPART.equals(strChkType) || pgV3Constants.TYPE_PGTRANSPORTUNITPART.equals(strChkType)) {
                                        BOMSubstituteSAPBuffer.append("<TH width=\"80\"><B>Type(T)<br/>Title(Ti)</B></TH>");
                                        BOMSubstituteSAPBuffer.append("<TH width=\"80\"><B>Specification<br/>Sub Type(SST)<br/>Optional <br/>Components(OC)</B></TH>");
                                        //Modified by DSM(Sogeti)-2018x.5 for PDF Views Defect #34514,#34695 : Starts
                                    } else if(pgV3Constants.TYPE_PGMASTERPACKAGINGASSEMBLYPART.equals(strChkType) || pgV3Constants.TYPE_PGMASTERCUSTOMERUNITPART.equals(strChkType) || pgV3Constants.TYPE_INTERMEDIATE_PRODUCT_PART.equals(strChkType)|| pgV3Constants.TYPE_PGMASTERCONSUMERUNITPART.equals(strChkType)) {
                                        BOMSubstituteSAPBuffer.append("<TH width=\"80\"><B>Type(T)<br/>Title(Ti)</B></TH>");
                                        BOMSubstituteSAPBuffer.append("<TH width=\"80\"><B>Specification<br/>Sub Type</B></TH>");
                                        //Modified by DSM(Sogeti)-2018x.5 for PDF Views Defect #34514,#34695 : Ends
                                    }else {
                                        BOMSubstituteSAPBuffer.append("<TH width=\"80\"><B>Title</B></TH>");
                                        BOMSubstituteSAPBuffer.append("<TH width=\"80\"><B>Type(T)<br/>Specification<br/>SubType<br/>(SST)</B></TH>");
                                    }
                                    BOMSubstituteSAPBuffer.append("</TR></thead>");
                                }
                                //Commented by DSM(Sogeti)-2018x.5 for PDF Views Requirement  - Starts
                                //						}
                                //Commented by DSM(Sogeti)-2018x.5 for PDF Views Requirement  - Ends
                                //Commented by DSM-2018x.5 requirement - Starts
							/*else{
								if( cntFPP == 1) {
								bFPPTable = true;
								BOMSubstituteSAPBuffer.append("<TR><TD><TABLE class=\"WordWrappdf\" cellspacing=\"0\" width=\"1000px\" id=\"Substitutes\">");
								BOMSubstituteSAPBuffer.append("<thead>");
								BOMSubstituteSAPBuffer.append("<TR><TD class=\"new\" colspan='11' ><B><font size ='4'>Substitutes</font></B></TD></TR>");*/
								/*if(pgV3Constants.TYPE_PACKAGINGASSEMBLYPART.equals(strChkType) || pgV3Constants.TYPE_INTERMEDIATE_PRODUCT_PART.equals(strChkType)) {
									//Modified by DSM(Sogeti)-2015x.4 for PDF Views (Req - 5706) - Starts
									BOMSubstituteSAPBuffer.append(getBOMSubstitueTableHeader(context,mlMain,strPDFViewKind,strObjectId));
									//Modified by DSM(Sogeti)-2015x.4 for PDF Views (Req - 5706) - Ends
								} else {
									//Modified by DSM(Sogeti)-2015x.4 for PDF Views (Req - 5706) - Starts
									BOMSubstituteSAPBuffer.append(getBOMSubstitueTableHeader(context,mlMain,strPDFViewKind,strObjectId));
									//Modified by DSM(Sogeti)-2015x.4 for PDF Views (Req - 5706) - Ends
								}*/
								/*BOMSubstituteSAPBuffer.append(getBOMSubstitueTableHeader(context,mlMain,strPDFViewKind,strObjectId));
								BOMSubstituteSAPBuffer.append("</TR></thead>");
							}
							}*/
                                //Commented by DSM-2018x.5 requirement - Ends
                                for (Iterator objIterator = mlSub.iterator(); objIterator.hasNext();) {
                                    mapSub = (Map) objIterator.next();
                                    strSubId = (String)mapSub.get(DomainConstants.SELECT_ID);
                                    strSubType = (String)mapSub.get(DomainConstants.SELECT_TYPE);
                                    //Modified by DSM-2015x.4.1 Feb downtime for PDF Views (Defect Id #15263) - Starts
                                    strSubQty = (String)mapSub.get(pgV3Constants.ATTRIBUTE_QUANTITY);
                                    //Modified by DSM-2015x.4.1 Feb downtime for PDF Views (Defect Id #15263) - Ends
                                    strSubComments = (String)mapSub.get(pgV3Constants.ATTRIBUTE_COMMENT);
                                    strSubReferenceDesignator = (String)mapSub.get(pgV3Constants.ATTRIBUTE_REFERENCEDESIGNATOR);
                                    strOriginatingSource = (String)mapSub.get(pgV3Constants.ATTRIBUTE_PGORIGINATINGSOURCE);
                                    strBaseUnitOfMeasure = (String)mapSub.get(pgV3Constants.ATTRIBUTE_PGBASEUNITOFMEASURE);
                                    strEBOMSubstituteRelId = (String)mapSub.get("EBOMSubstituteRelId");
                                    strChg = (String)mapSub.get("Chg");
                                    relObj = new DomainRelationship(strEBOMSubstituteRelId);
                                    strSubOptionalComponent = relObj.getAttributeValue(context,pgV3Constants.ATTRIBUTE_PGOPTIONALCOMPONENT);
                                    strBaseUnitOfMeasurePickList = (String)mapSub.get("pgBaseUnitOfMeasurePickList");
                                    strSubUoM = (String)mapSub.get("UoM");
                                    strSubValidUntil = (String)mapSub.get("ValidUntil");
                                    strSubSCN = (String)mapSub.get("SCN");
                                    BOMSubstituteSAPBuffer.append("<TR align=\"center\" class=\"pdf\">");
                                    mpParamName = new HashMap();
                                    mpParamName.put("reportFormat","pdf");
                                    mlObjListName = new MapList();
                                    mpObjName = new HashMap();
                                    mpObjName.put(DomainConstants.SELECT_ID,strSubId);
                                    mlObjListName.add(mpObjName);
                                    mpBOMSubsName=new HashMap();
                                    mpBOMSubsName.put("paramList",mpParamName);
                                    mpBOMSubsName.put("objectList", mlObjListName);
                                    String[] argsSubsName = JPO.packArgs(mpBOMSubsName);
                                    //							emxPart_mxJPO objemxPartName = new emxPart_mxJPO(context, argsSubsName);
                                    //							Vector vEBOMSubName = (Vector)objemxPartName.getModifiedName(context, argsSubsName);
                                    //Added for PDF Refactor
                                    Vector vEBOMSubName = (Vector)pgPDFViewHelper.executeMainClassMethod(context, "emxPart", "getModifiedName", argsSubsName);
                                    String strSubName = null;
                                    if((vEBOMSubName !=null) && (vEBOMSubName.size() >0))
                                        strSubName =(String)vEBOMSubName.get(0);
                                    DomainObject dmoBomSub = DomainObject.newInstance(context, strSubId);
                                    mpBomSub = dmoBomSub.getInfo(context, selectStmtSub);
                                    strRev = (String)mpBomSub.get(DomainConstants.SELECT_REVISION);
                                    strReportedFunction = (String)mpBomSub.get("from["+pgV3Constants.RELATIONSHIP_PGPDTEMPLATESTOPGPLIREPORTEDFUNCTION+"].to.name");
                                    if(UIUtil.isNullOrEmpty(strSubOptionalComponent))
                                        strSubOptionalComponent = "No";



                                    mlObjListSCN = new MapList();
                                    mpObjNameSCN = new HashMap();
                                    mpObjNameSCN.put("SCN",strSubSCN);

                                    mlObjListSCN.add(mpObjNameSCN);
                                    mpBOMSubsSCN = new HashMap();
                                    mpBOMSubsSCN.put("objectList", mlObjListSCN);
                                    String[] argsSubsSCN = JPO.packArgs(mpBOMSubsSCN);
                                    //							pgIPMTablesJPO_mxJPO objIPMTableSCN = new pgIPMTablesJPO_mxJPO(context, argsSubsSCN);
                                    //							Vector vEBOMSubSCN = (Vector)objIPMTableSCN.getSCNColumnData(context, argsSubsSCN);
                                    //Added for PDF Refactor
                                    Vector vEBOMSubSCN = (Vector)pgPDFViewHelper.executeMainClassMethod(context, "pgIPMTablesJPO", "getSCNColumnData", argsSubsSCN);
                                    String strSCN = null;
                                    if((vEBOMSubSCN !=null) && (vEBOMSubSCN.size() >0))
                                        strSCN =(String)vEBOMSubSCN.get(0);
                                    if(UIUtil.isNotNullAndNotEmpty(strSCN)) {
                                        strSCN = strSCN.replaceAll("[<]","#LESS_THAN");
                                        strSCN = strSCN.replaceAll("[>]","#GREATER_THAN");
                                    }
                                    //Added by DSM(Sogeti)-2015x.5 for PDF Views (Defect ID-16705) - Starts
                                    else{
                                        strSCN = DomainConstants.EMPTY_STRING;
                                    }
                                    strTitle = (String)mapSub.get("SAPDesc");
                                    if(UIUtil.isNullOrEmpty(strTitle)){
                                        strTitle = DomainConstants.EMPTY_STRING;
                                    }
                                    //Added by DSM(Sogeti)-2015x.5 for PDF Views (Defect ID-16705) - Ends
                                    strTitle =strTitle.replaceAll("[<]","#LESS_THAN");
                                    strTitle =strTitle.replaceAll("[>]","#GREATER_THAN");
                                    strType = (String)mpBomSub.get(DomainConstants.SELECT_TYPE);
                                    //Commented by DSM(Sogeti) for the 2018x.3 PDF Views (Defect - 30368) - Strats
								/*if(( pgV3Constants.TYPE_INTERMEDIATE_PRODUCT_PART.equals(strChkType)) || (("gendoc".equalsIgnoreCase(strPDFViewKind.trim()) || ("supplier".equalsIgnoreCase(strPDFViewKind.trim()) )) &&  ((pgV3Constants.TYPE_FINISHEDPRODUCTPART.equals(strChkType)) ||(pgV3Constants.TYPE_PACKAGINGASSEMBLYPART.equals(strChkType)) ))){
									BOMSubstituteSAPBuffer.append("<TD align ='left' width=\"80px\"><B>Title: </B>"+validateString1(strTitle)+"</TD>");
								} */
                                    //Commented by DSM(Sogeti) for the 2018x.3 PDF Views (Defect - 30368) - Ends
                                    //Modified by DSM(Sogeti) for the 2018x.3 PDF Views (Defect - 30368) - Starts
                                    //if(pgV3Constants.TYPE_INTERMEDIATE_PRODUCT_PART.equals(strChkType)) {
                                    //	BOMSubstituteSAPBuffer.append("<TD align ='left' width=\"80px\"><B>Title: </B>"+validateString1(strTitle)+"</TD>");
                                    //}
                                    //else if(("gendoc".equalsIgnoreCase(strPDFViewKind.trim()) || ("supplier".equalsIgnoreCase(strPDFViewKind.trim()) )) &&  ((pgV3Constants.TYPE_FINISHEDPRODUCTPART.equals(strChkType)) ||(pgV3Constants.TYPE_PACKAGINGASSEMBLYPART.equals(strChkType)))){
                                    //	BOMSubstituteSAPBuffer.append("<TD align ='left' width=\"80px\">"+validateString1(strTitle)+"</TD>");
                                    //}
                                    //Modified by DSM(Sogeti) for the 2018x.3 PDF Views (Defect - 30368) - Ends
                                    //else {
                                    //}
                                    mpColumnName = new HashMap();
                                    mpColumnName.put("Column Name", "");
                                    mpSettingsMap = new HashMap();
                                    mpSettingsMap.put("settings", mpColumnName);
                                    mpObjNameSST = new HashMap();
                                    mpObjNameSST.put(DomainConstants.SELECT_ID,strSubId);
                                    mpObjNameSST.put(DomainConstants.SELECT_TYPE,strSubType);
                                    mlObjListNameSST = new MapList();
                                    mlObjListNameSST.add(mpObjNameSST);
                                    mpBOMSubsSST = new HashMap();
                                    mpBOMSubsSST.put("objectList", mlObjListNameSST);
                                    mpBOMSubsSST.put("columnMap", mpSettingsMap);
                                    String[] argsSubsSST = JPO.packArgs(mpBOMSubsSST);
                                    //							emxPart_mxJPO objIPMTable = new emxPart_mxJPO(context, argsSubsSST);
                                    //							Vector vEBOMSubSpecSubType = (Vector)objIPMTable.getSpecificationSubtype(context, argsSubsSST);
                                    //Added for PDF Refactor
                                    Vector vEBOMSubSpecSubType = (Vector)pgPDFViewHelper.executeMainClassMethod(context, "emxPart", "getSpecificationSubtype", argsSubsSST);
                                    String strSpecSubType = null;
                                    if((vEBOMSubSpecSubType !=null) && (vEBOMSubSpecSubType.size() >0))
                                        strSpecSubType =(String)vEBOMSubSpecSubType.get(0);
                                    strValue = UINavigatorUtil.getAdminI18NString("Type", strType, context.getSession().getLanguage());
                                    //Modified by DSM(Sogeti)-2015x.4 for PDF Views (Req - 7554) - starts
                                    //if(pgV3Constants.TYPE_FABRICATEDPART.equals(strChkType) || ("gendoc".equalsIgnoreCase(strPDFViewKind.trim()) && pgV3Constants.TYPE_FINISHEDPRODUCTPART.equals(strChkType))){
                                    //BOMSubstituteSAPBuffer.append("<TD align ='left' width=\"140px\"><B>T: </B>"+validateString1(strValue)+"<br /><B>SST: </B>" +validateString1(strSpecSubType)+"<BR /><B>OC:</B>"+validateString1(strSubOptionalComponent)+"</TD>");
                                    //}
                                    //else{
                                    //}
                                    //Modified by DSM(Sogeti)-2015x.4 for PDF Views (Req - 7554) - Ends
                                    //Modified by DSM-2015x.4.1 Feb downtime for PDF Views (Defect Id #15263) - Starts
								/*mlObjListQty = new MapList();
								mpObjNameQty = new HashMap();
								mpObjNameQty.put(pgV3Constants.ATTRIBUTE_QUANTITY,strSubQty);
								mpObjNameQty.put("EBOMSubstituteRelId",strEBOMSubstituteRelId);
								mlObjListQty.add(mpObjNameQty);
								mpBOMSubsQty = new HashMap();
								mpBOMSubsQty.put("objectList", mlObjListQty);
								String[] argsSubsQty = JPO.packArgs(mpBOMSubsQty);
								${CLASS:pgIPMTablesJPO} objIPMTableQty = new ${CLASS:pgIPMTablesJPO}(context, argsSubsQty);
								Vector vEBOMSubQty = (Vector)objIPMTableQty.getSubstitutePartQuantityColumnDataForViews(context, argsSubsQty);
								String strQty = null;
								if((vEBOMSubQty !=null) && (vEBOMSubQty.size() >0))
									strQty =(String)vEBOMSubQty.get(0);*/
                                    strMin =  getMinMaxForSubstitute(context,strEBOMSubstituteRelId,pgPDFViewConstants.ATTRIBUTE_MIN_ACTUAL_PERCENT_WET, pgPDFViewConstants.COLUMN_MIN_SUB);
                                    strMax =  getMinMaxForSubstitute(context,strEBOMSubstituteRelId,pgPDFViewConstants.ATTRIBUTE_MAX_ACTUAL_PERCENT_WET, pgPDFViewConstants.COLUMN_MAX_SUB);
                                    if(isCatiAPP) {
                                        strLayerName = getLayerDetailsSubstitute(context, strEBOMSubstituteRelId,pgPDFViewConstants.METHOD_LAYER_NAME);
                                        strLayerGroupName = getLayerDetailsSubstitute(context, strEBOMSubstituteRelId,pgPDFViewConstants.METHOD_LAYER_GROUP_NAME);
                                    }
                                    if("TRUE".equals(strHasAccess)) {
                                        strMaterialFunctionvalue = getMaterialFunction(context,strEBOMSubstituteRelId);
                                    }


                                    //Modified by DSM-2015x.4.1 Feb downtime for PDF Views (Defect Id #15263) - Ends
                                    mlObjListUom = new MapList();
                                    mpObjNameUoM = new HashMap();
                                    mpObjNameUoM.put(pgV3Constants.ATTRIBUTE_PGORIGINATINGSOURCE,strOriginatingSource);
                                    mpObjNameUoM.put("pgBaseUnitOfMeasurePickList",strBaseUnitOfMeasurePickList);
                                    mpObjNameUoM.put("pgBaseUnitOfMeasure",strBaseUnitOfMeasure);
                                    mlObjListUom.add(mpObjNameUoM);

                                    mpBOMSubsUoM = new HashMap();
                                    mpBOMSubsUoM.put("objectList", mlObjListUom);
                                    String[] argsSubsUoM = JPO.packArgs(mpBOMSubsUoM);
                                    //							pgDSOCPNProductData_mxJPO objIPMTableUoM = new pgDSOCPNProductData_mxJPO(context, argsSubsUoM);
                                    //							Vector vEBOMSubUoM = (Vector)objIPMTableUoM.getSubstitutePartBaseUnitOfMeasureColumnData(context, argsSubsUoM);
                                    //Added for PDF Refactor
                                    Vector vEBOMSubUoM = (Vector)pgPDFViewHelper.executeMainClassMethod(context, "pgDSOCPNProductData", "getSubstitutePartBaseUnitOfMeasureColumnData", argsSubsUoM);
                                    String strUoM = null;
                                    if((vEBOMSubUoM !=null) && (vEBOMSubUoM.size() >0))
                                        strUoM =(String)vEBOMSubUoM.get(0);
                                    //Modified by DSM-2015x.4.1 Feb downtime for PDF Views (Defect Id #15263) - Starts
                                    //if((pgV3Constants.TYPE_ASSEMBLEDPRODUCTPART.equals(strChkType) || (pgV3Constants.TYPE_DEVICEPRODUCTPART.equals(strChkType) && !("GenDoc".equalsIgnoreCase(strPDFViewKind.trim()))) || pgV3Constants.TYPE_FABRICATEDPART.equals(strChkType)) && "TRUE".equals(strHasAccess)){
                                    //strMaterialFunctionvalue = getMaterialFunction(context,strEBOMSubstituteRelId);
                                    //}
                                    //Modified by DSM(Sogeti)-2018x.2 for PDF Views (Req FAB - 7554, 7555) - Starts

                                    //Modified by DSM(Sogeti)-2018x.2 for PDF Views (Req FAB - 7554,7555) - Ends
                                    //Modified by DSM-2015x.4.1 Feb downtime for PDF Views (Defect Id #15263) - Ends
                                    //Modified by DSM-2015x.4 for PDF Views (Req Id #15016) - Ends
                                    mlObjListValidStart = new MapList();
                                    mpObjNameValidStart = new HashMap();
                                    // Modified	for Defect fix 18834 by DSM 2015x.5.1(Sogeti) Starts
                                    mpObjNameValidStart.put(DomainRelationship.SELECT_ID,strEBOMSubstituteRelId);
                                    // Modified	for Defect fix 18834 by DSM 2015x.5.1(Sogeti) Ends
                                    mlObjListValidStart.add(mpObjNameValidStart);
                                    mpBOMSubsValidStart = new HashMap();
                                    mpBOMSubsValidStart.put("objectList", mlObjListValidStart);
                                    String[] argsSubsValidStart = JPO.packArgs(mpBOMSubsValidStart);
                                    //Modified by DSM-2015x.4.1 Feb downtime for PDF Views (Defect Id #15263) - Starts
                                    //pgDSOAltSubsTable_mxJPO objIPMTableValidStart = new pgDSOAltSubsTable_mxJPO();
                                    //Modified by DSM-2015x.4.1 Feb downtime for PDF Views (Defect Id #15263) - Ends
                                    //Vector vEBOMSubValidStart = (Vector)objIPMTableValidStart.getValidStartDateColumnDataForDSO(context, argsSubsValidStart);
                                    //Added for PDF Refactor
                                    Vector vEBOMSubValidStart = (Vector)pgPDFViewHelper.executeMainClassMethod(context, "pgDSOAltSubsTable", "getValidStartDateColumnDataForDSO", argsSubsValidStart);
                                    String strValidStart = null;
                                    if((vEBOMSubValidStart !=null) && (vEBOMSubValidStart.size() >0))
                                        strValidStart =(String)vEBOMSubValidStart.get(0);
                                    if(UIUtil.isNotNullAndNotEmpty(strValidStart))
                                    {
                                        strValidStart=pgIPMPDFViewUtil_mxJPO.getFormattedDate(strValidStart);
                                    } else {
                                        strValidStart="See Release Date";
                                    }
                                    //Modified by DSM-2015x.4.1 Feb downtime for PDF Views (Defect Id #15263) - Starts
								/*mlObjListValidUntil = new MapList();
								mpObjNameValidUntil = new HashMap();
								mpObjNameValidUntil.put("ValidUntil",strSubValidUntil);
								mpObjNameValidUntil.put("EBOMSubstituteRelId",strEBOMSubstituteRelId);
								mlObjListValidUntil.add(mpObjNameValidUntil);
								mpBOMSubsValidUntil = new HashMap();
								mpBOMSubsValidUntil.put("objectList", mlObjListValidUntil);
								String[] argsSubsValidUntil = JPO.packArgs(mpBOMSubsValidUntil);*/
                                    //pgDSOAltSubsTable_mxJPO objIPMTableValidUntil = new pgDSOAltSubsTable_mxJPO();
                                    //Modified by DSM-2015x.4.1 Feb downtime for PDF Views (Defect Id #15263) - Ends
                                    //Vector vEBOMSubValidUntil = (Vector)objIPMTableValidUntil.getValidUntilDateColumnDataForDSO(context, argsSubsValidStart);
                                    //Added for PDF Refactor
                                    Vector vEBOMSubValidUntil = (Vector)pgPDFViewHelper.executeMainClassMethod(context, "pgDSOAltSubsTable", "getValidUntilDateColumnDataForDSO", argsSubsValidStart);
                                    String strValidUntil = null;
                                    if((vEBOMSubValidUntil !=null) && (vEBOMSubValidUntil.size() >0))
                                        strValidUntil =(String)vEBOMSubValidUntil.get(0);
                                    if(UIUtil.isNotNullAndNotEmpty(strValidUntil))
                                        strValidUntil=pgIPMPDFViewUtil_mxJPO.getFormattedDate(strValidUntil);
                                    mlObjListRefDes = new MapList();
                                    mpObjNameRefDes = new HashMap();
                                    mpObjNameRefDes.put(pgV3Constants.ATTRIBUTE_REFERENCEDESIGNATOR,strSubReferenceDesignator);

                                    mlObjListRefDes.add(mpObjNameRefDes);
                                    mpBOMSubsRefDes = new HashMap();
                                    mpBOMSubsRefDes.put("objectList", mlObjListRefDes);
                                    String[] argsSubsRefDes = JPO.packArgs(mpBOMSubsRefDes);
                                    //pgDSOCPNProductData_mxJPO objIPMTableRefDes = new pgDSOCPNProductData_mxJPO(context, argsSubsRefDes);
                                    //Vector vEBOMSubRefDes = (Vector)objIPMTableRefDes.getSubstitutePartReferenceDesignatorColumnData(context, argsSubsRefDes);
                                    //Added for PDF Refactor
                                    Vector vEBOMSubRefDes = (Vector)pgPDFViewHelper.executeMainClassMethod(context, "pgDSOCPNProductData", "getSubstitutePartReferenceDesignatorColumnData", argsSubsRefDes);
                                    String strRefDes = null;
                                    if((vEBOMSubRefDes !=null) && (vEBOMSubRefDes.size() >0))
                                        strRefDes =(String)vEBOMSubRefDes.get(0);
                                    if(UIUtil.isNotNullAndNotEmpty(strRefDes)){
                                        strRefDes = strRefDes.replaceAll("[<]","#LESS_THAN");
                                        strRefDes = strRefDes.replaceAll("[>]","#GREATER_THAN");
                                    }
                                    //Added by DSM(Sogeti)-2015x.5 for PDF Views (Defect ID-16705) - Starts
                                    else{
                                        strRefDes = DomainConstants.EMPTY_STRING;
                                    }
                                    //Added by DSM(Sogeti)-2015x.5 for PDF Views (Defect ID-16705) - Ends

								/*if(pgV3Constants.TYPE_ASSEMBLEDPRODUCTPART.equals(strChkType) || (pgV3Constants.TYPE_DEVICEPRODUCTPART.equals(strChkType) && !("GenDoc".equalsIgnoreCase(strPDFViewKind.trim()))) || pgV3Constants.TYPE_FABRICATEDPART.equals(strChkType)){
								BOMSubstituteSAPBuffer.append("<TD width=\"50px\" align=\"left\"><B>RD:</B>"+validateString1(strRefDes)+"<BR></BR><B>MF:</B>"+validateString1(strMaterialFunctionvalue.toString())+"</TD>");
								}
								else if(pgV3Constants.TYPE_PACKAGINGMATERIALPART.equals(strChkType) || pgV3Constants.TYPE_INTERMEDIATE_PRODUCT_PART.equals(strChkType) || pgV3Constants.TYPE_PGANCILLARYPACKAGINGMATERIALPART.equals(strChkType) || pgV3Constants.TYPE_PGMASTERCUSTOMERUNITPART.equals(strChkType) || pgV3Constants.TYPE_PGMASTERPACKAGINGASSEMBLYPART.equals(strChkType) || pgV3Constants.TYPE_PGMASTERINNERPACKUNITPART.equals(strChkType)|| pgV3Constants.TYPE_PGMASTERCONSUMERUNITPART.equals(strChkType) || (pgV3Constants.TYPE_MASTERPRODUCTPART.equals(strChkType)) || pgV3Constants.TYPE_PGMASTERPACKAGINGMATERIALPART.equals(strChkType) || pgV3Constants.TYPE_PGONLINEPRINTINGPART.equals(strChkType) || (("supplier".equalsIgnoreCase(strPDFViewKind.trim())) && pgV3Constants.TYPE_PACKAGINGASSEMBLYPART.equals(strChkType)) || (pgV3Constants.TYPE_DEVICEPRODUCTPART.equals(strChkType) && ("GenDoc".equalsIgnoreCase(strPDFViewKind.trim())))){
								BOMSubstituteSAPBuffer.append("<TD width=\"50px\" align=\"left\">"+validateString1(strRefDes)+"</TD>");
								}
								else{
								BOMSubstituteSAPBuffer.append("<TD width=\"50px\" align=\"left\"><B>RD:</B>"+validateString1(strRefDes)+"<BR></BR><B>OC:</B>"+validateString1(strSubOptionalComponent)+"</TD>");
								}*/
                                    mlObjListComments = new MapList();
                                    mpObjNameComments = new HashMap();
                                    mpObjNameComments.put("Comment",strSubComments);
                                    mlObjListComments.add(mpObjNameComments);
                                    mpBOMSubsComments = new HashMap();
                                    mpBOMSubsComments.put("objectList", mlObjListComments);
                                    String[] argsSubsComments = JPO.packArgs(mpBOMSubsComments);
                                    //pgIPMTablesJPO_mxJPO objIPMTableComments = new pgIPMTablesJPO_mxJPO(context, argsSubsComments);
                                    //Vector vEBOMSubComments = (Vector)objIPMTableComments.getSubstitutePartCommentsColumnData(context, argsSubsComments);
                                    //Added for PDF Refactor
                                    Vector vEBOMSubComments = (Vector)pgPDFViewHelper.executeMainClassMethod(context, "pgIPMTablesJPO", "getSubstitutePartCommentsColumnData", argsSubsComments);
                                    String strComment = null;
                                    if((vEBOMSubComments !=null) && (vEBOMSubComments.size() >0))
                                        strComment =(String)vEBOMSubComments.get(0);
                                    if(UIUtil.isNotNullAndNotEmpty(strComment)){
                                        strComment = strComment.replaceAll("[<]","#LESS_THAN");
                                        strComment = strComment.replaceAll("[>]","#GREATER_THAN");
                                    }
                                    //Added by DSM(Sogeti)-2015x.5 for PDF Views (Defect ID-16705) - Starts
                                    else{
                                        strComment = DomainConstants.EMPTY_STRING;
                                    }
                                    //Added by DSM(Sogeti)-2015x.5 for PDF Views (Defect ID-16705) - Ends
                                    //Modified by DSM-2018x.6 for PDF Views (Req Id #38412) - Starts
                                    //Added/Modified  by DSM-Sogeti for (2018x.6 Apr CW 2022) PDF Views Req 42293-Starts
                                    if(pgV3Constants.TYPE_ASSEMBLEDPRODUCTPART.equals(strChkType) || pgV3Constants.TYPE_DEVICEPRODUCTPART.equals(strChkType)) {
                                        if(!"GenDoc".equalsIgnoreCase(strPDFViewKind.trim())) {
                                            BOMSubstituteSAPBuffer.append("<TD align ='left' width=\"60px\"><B>SP: </B>"+validateString1(strSubName)+"<br /><B>R: </B>"+validateString1(strRev)+"<br /><B>C: </B>"+validateString1(strChg)+"</TD>");
                                        } else {
                                            //Added/Modified  by DSM-Sogeti for (2018x.6 Apr CW 2022) Req 42293 PDF Views(Added SP for GenDoc) -Starts
                                            BOMSubstituteSAPBuffer.append("<TD align ='left' width=\"60px\"><B>SP: </B>"+validateString1(strSubName)+"<br /><B>C: </B>"+validateString1(strChg)+"</TD>");
                                            //Added/Modified  by DSM-Sogeti for (2018x.6 Apr CW 2022) Req 42293 PDF Views -Ends
                                        }
                                        BOMSubstituteSAPBuffer.append("<TD align ='left' width=\"80px\"><B>SCN: </B>"+validateString1(strSCN)+"<br /><B>Title: </B>"+validateString1(wrapCharTable(strTitle,10))+"</TD>");
                                        BOMSubstituteSAPBuffer.append("<TD align ='left' width=\"100px\"><B>T: </B>"+validateString1(wrapCharTable(strValue,10))+"<br /><B>SST: </B>"+validateString1(strSpecSubType)+"<br /><B>Q: </B>"+validateString1(strSubQty)+"</TD>");

                                        if(isCatiAPP) {
                                            BOMSubstituteSAPBuffer.append("<TD width=\"50px\"><B>Min:</B>"+validateString1(strMin)+"<br/><B>Max:</B>"+validateString1(strMax)+"<br/><B>LN:</B>"+validateString1(wrapCharTable(strLayerName,10))+"</TD>");
                                            BOMSubstituteSAPBuffer.append("<TD width=\"50px\"><B>MF:</B>"+validateString1(wrapCharTable(strMaterialFunctionvalue.toString(),10))+"<br/><B>RF:</B>"+validateString1(wrapCharTable(strReportedFunction,10))+"</TD>");
                                            BOMSubstituteSAPBuffer.append("<TD width=\"100px\"><B>BUOM:</B>"+validateString1(strUoM)+"<br/><B>VSD:</B>"+validateString1(strValidStart)+"<br/><B>VUD:</B>"+validateString1(strValidUntil)+"</TD>");
                                            BOMSubstituteSAPBuffer.append("<TD width=\"50px\" align=\"left\"><B>RD:</B>"+validateString1(wrapCharTable(strRefDes,10))+"<br/><B>LG:</B>"+validateString1(wrapCharTable(strLayerGroupName,10))+"</TD>");
                                            
                                            // Modified by DSM-2022x.2 for PDF Views (Req:46173,46174) : Starts                   
                                            if(pgV3Constants.PDFVIEW_GENDOC.equalsIgnoreCase(strPDFViewKind)) {
                                            	BOMSubstituteSAPBuffer.append("<TD width=\"95\" align=\"left\" valign=\"top\">"+validateString1(mpBomSub.get(pgV3Constants.SELECT_ATTRIBUTE_PGLIFECYCLESTATUS))+"</TD>");
                                            }
                                            else {
                                            	 BOMSubstituteSAPBuffer.append("<TD width=\"95\" align=\"left\" valign=\"top\"><B>MS:</B>"+validateString1(mpBomSub.get(pgV3Constants.SELECT_ATTRIBUTE_PGLIFECYCLESTATUS))+"<BR></BR><B>RR:</B>"+validateString1(mpBomSub.get(pgPDFViewConstants.SELECT_ATTRIBUTE_PGMATERIALRESTRICTION))+"</TD>");
                                            	 BOMSubstituteSAPBuffer.append("<TD width=\"95\" align=\"left\" valign=\"top\">"+validateString1(wrapCharTable((String)mpBomSub.get(pgPDFViewConstants.SELECT_ATTRIBUTE_PGMATERIALRESTRICTIONCOMMENT),10))+"</TD>");
                                                 
                                            }
                                            // Modified by DSM-2022x.2 for PDF Views (Req:46173,46174) : Ends      
                                            
                                            
                                            BOMSubstituteSAPBuffer.append("<TD width=\"190px\"><B>C:</B>"+validateString1(wrapCharTable(strComment,10))+"<BR/><B>CC:</B>"+validateString1(mapObject.get(pgPDFViewConstants.SELECT_ATTRIBUTE_PGCOMPONENTQUANTITY))+"<BR></BR><B>Cert:</B>"+getPLIMaterialCertifications(context, strid)+"</TD>");

                                        }else {
                                        	BOMSubstituteSAPBuffer.append("<TD width=\"50px\"><B>Min:</B>"+validateString1(strMin)+"<br/><B>Max:</B>"+validateString1(strMax)+"</TD>");
                                        	BOMSubstituteSAPBuffer.append("<TD width=\"50px\"><B>F:</B>"+validateString1(wrapCharTable(strMaterialFunctionvalue.toString(),10))+"<br/><B>RF:</B>"+validateString1(wrapCharTable(strReportedFunction,10))+"</TD>");
                                        	BOMSubstituteSAPBuffer.append("<TD width=\"100px\"><B>BUOM:</B>"+validateString1(strUoM)+"<br/><B>VSD:</B>"+validateString1(strValidStart)+"<br/><B>VUD:</B>"+validateString1(strValidUntil)+"</TD>");
                                        	if(pgV3Constants.TYPE_ASSEMBLEDPRODUCTPART.equals(strChkType)){
                                        		BOMSubstituteSAPBuffer.append("<TD width=\"50px\" align=\"left\"><B>RD:</B>"+validateString1(wrapCharTable(strRefDes,10))+"<br/><B>C:</B>"+validateString1(wrapCharTable(strComment,10))+"<BR/><B>CC:</B>"+validateString1(mapObject.get(pgPDFViewConstants.SELECT_ATTRIBUTE_PGCOMPONENTQUANTITY))+"<BR></BR><B>Cert:</B>"+getPLIMaterialCertifications(context, strid)+"</TD>");

                                        	}else {
                                        		BOMSubstituteSAPBuffer.append("<TD width=\"50px\" align=\"left\"><B>RD:</B>"+validateString1(wrapCharTable(strRefDes,10))+"<br/><B>C:</B>"+validateString1(wrapCharTable(strComment,10))+"<BR></BR><B>Cert:</B>"+getPLIMaterialCertifications(context, strid)+"</TD>");
                                        	}
                                        	
                                        	// Modified by DSM-2022x.2 for PDF Views (Req:46173,46174) : Starts                                        	
                                        	if(pgV3Constants.PDFVIEW_GENDOC.equalsIgnoreCase(strPDFViewKind)) {
                                        		BOMSubstituteSAPBuffer.append("<TD width=\"95\" align=\"left\" valign=\"top\">"+validateString1(mpBomSub.get(pgV3Constants.SELECT_ATTRIBUTE_PGLIFECYCLESTATUS))+"</TD>");
                                        	}
                                        	else {
                                        		BOMSubstituteSAPBuffer.append("<TD width=\"95\" align=\"left\" valign=\"top\"><B>MS:</B>"+validateString1(mpBomSub.get(pgV3Constants.SELECT_ATTRIBUTE_PGLIFECYCLESTATUS))+"<BR></BR><B>RR:</B>"+validateString1(mpBomSub.get(pgPDFViewConstants.SELECT_ATTRIBUTE_PGMATERIALRESTRICTION))+"</TD>");
                                        		BOMSubstituteSAPBuffer.append("<TD width=\"95\" align=\"left\" valign=\"top\">"+validateString1(wrapCharTable((String)mpBomSub.get(pgPDFViewConstants.SELECT_ATTRIBUTE_PGMATERIALRESTRICTIONCOMMENT),10))+"</TD>");
                                        	}
                                        	// Modified by DSM-2022x.2 for PDF Views (Req:46173,46174) : Ends                                        	
                                        	//BOMSubstituteSAPBuffer.append("<TD width=\"190px\"><B>C:</B>"+validateString1(wrapCharTable(strComment,10))+"<BR/><B>CC:</B>"+validateString1(mapObject.get(pgPDFViewConstants.SELECT_ATTRIBUTE_PGCOMPONENTQUANTITY))+"<BR></BR><B>Cert:</B>"+getPLIMaterialCertifications(context, strid)+"</TD>");         
                                        }
                                    }
                                    else {
                                        if(!"GenDoc".equalsIgnoreCase(strPDFViewKind.trim())) {
                                            BOMSubstituteSAPBuffer.append("<TD align ='left' width=\"60px\"><B>SP: </B>"+validateString1(strSubName)+"<br /><B>R: </B>"+validateString1(strRev)+"</TD>");
                                        } else {
                                            BOMSubstituteSAPBuffer.append("<TD align ='left' width=\"60px\">"+validateString1(strSubName)+"</TD>");

                                        }
                                        BOMSubstituteSAPBuffer.append("<TD align ='left' width=\"80px\">"+validateString1(strChg)+"</TD>");
                                        BOMSubstituteSAPBuffer.append("<TD align ='left' width=\"80px\"><B>SCN: </B>"+validateString1(strSCN)+"<br /><B>Title: </B>"+validateString1(wrapCharTable(strTitle,10))+"</TD>");
                                        BOMSubstituteSAPBuffer.append("<TD align ='left' width=\"140px\"><B>T: </B>"+validateString1(strValue)+"<br /><B>SST: </B>" +validateString1(strSpecSubType)+"</TD>");
                                        BOMSubstituteSAPBuffer.append("<TD width=\"50px\">"+validateString1(strSubQty)+"</TD>");
                                        if (pgV3Constants.TYPE_INTERMEDIATE_PRODUCT_PART.equals(strChkType)){
                                            BOMSubstituteSAPBuffer.append("<TD width=\"50px\"><B>F:</B>"+validateString1(wrapCharTable(strMaterialFunctionvalue.toString(),10))+"<br/><B>RF:</B>"+validateString1(wrapCharTable(strReportedFunction,10))+"</TD>");
                                        }
                                        BOMSubstituteSAPBuffer.append("<TD width=\"50px\">"+validateString1(strUoM)+"</TD>");//Modified by DSM-2015x.4 for PDF Views (Req Id #15016) - Starts
                                        if(pgV3Constants.TYPE_FABRICATEDPART.equals(strChkType)){
                                            BOMSubstituteSAPBuffer.append("<TD width=\"50px\">"+validateString1(strMaterialFunctionvalue.toString())+"</TD>");
                                        }
                                        //Added by DSM Sogeti for 2022x.02 May CW for PDF Views (Req -46172) - Starts
                                        if(showRestrictionData && pgV3Constants.PDFVIEW_ALLINFO.equalsIgnoreCase(strPDFViewKind))
                                        {
                                        	BOMSubstituteSAPBuffer.append("<TD width=\"100px\"><B>VSD:</B>"+validateString1(strValidStart)+"<br/><B>VUD:</B>"+validateString1(strValidUntil)+"</TD>");
											BOMSubstituteSAPBuffer.append("<TD width=\"50px\" align=\"left\">"+validateString1(wrapCharTable(strRefDes,10))+"</TD>");
											BOMSubstituteSAPBuffer.append("<TD width=\"120px\">"+validateString1(wrapCharTable(strComment,10))+"</TD>");
											BOMSubstituteSAPBuffer.append("<TD width=\"95\" align=\"left\" valign=\"top\"><B>RR:</B>"+validateString1(mpBomSub.get(pgPDFViewConstants.SELECT_ATTRIBUTE_PGRELATIONSHIPRESTRICTION))+"<BR></BR><B>RRC:</B>"+validateString1(wrapCharTable((String)mpBomSub.get(pgPDFViewConstants.SELECT_ATTRIBUTE_PGRELATIONSHIPRESTRICTIONCOMMENTS),10))
+"</TD>");									
                                        }else {
                                        	BOMSubstituteSAPBuffer.append("<TD width=\"50px\">"+validateString1(strValidStart)+"</TD>");
                                            BOMSubstituteSAPBuffer.append("<TD width=\"50px\">"+validateString1(strValidUntil)+"</TD>");
                                            BOMSubstituteSAPBuffer.append("<TD width=\"50px\" align=\"left\">"+validateString1(wrapCharTable(strRefDes,10))+"</TD>");
                                            BOMSubstituteSAPBuffer.append("<TD width=\"120px\">"+validateString1(wrapCharTable(strComment,10))+"</TD>");
                                        }
                                        //Added by DSM Sogeti for 2022x.02 May CW for PDF Views (Req -46172) - Ends
                                        //Added/Modified  by DSM-Sogeti for (2018x.6 Apr CW 2022) PDF Views Req 42293-Ends
                                    }
                                    //Added by DSM(Sogeti)-2018x.2 for PDF Views Requirements - Ends
                                    DomainObject dmoBom = DomainObject.newInstance(context, strid);
                                    mpBom = new HashMap();
                                    //Modified by DSM-2015x.5 for PDF Views (Defect Id #14783) - Starts
                                    ContextUtil.pushContext(context);
                                    mpBom = dmoBom.getInfo(context, selectStmtSub);
                                    ContextUtil.popContext(context);
                                    //Modified by DSM-2015x.5 for PDF Views (Defect Id #14783) - Ends
                                    strBomName = (String)mpBom.get(DomainConstants.SELECT_NAME);
                                    strBomRev = (String)mpBom.get(DomainConstants.SELECT_REVISION);
                                    if(!"GenDoc".equalsIgnoreCase(strPDFViewKind.trim())) {
                                        BOMSubstituteSAPBuffer.append("<TD align ='left' width=\"60px\"><B>SF: </B>"+validateString1(strBomName)+"<br /><B>R: </B>"+validateString1(strBomRev)+"</TD>");
                                    } else {
                                        BOMSubstituteSAPBuffer.append("<TD align ='left' width=\"60px\">"+validateString1(strBomName)+"</TD>");
                                    }
                                    strBomTitle = (String)mpBom.get(pgV3Constants.SELECT_ATTRIBUTE_TITLE);
                                    //Added by DSM(Sogeti)-2015x.5 for PDF Views (Defect ID-16705) - Starts
                                    if(UIUtil.isNullOrEmpty(strBomTitle)){
                                        strBomTitle = DomainConstants.EMPTY_STRING;
                                    }
                                    //Added by DSM(Sogeti)-2015x.5 for PDF Views (Defect ID-16705) - Ends
                                    strBomTitle =strBomTitle.replaceAll("[<]","#LESS_THAN");
                                    strBomTitle =strBomTitle.replaceAll("[>]","#GREATER_THAN");;
                                    strBomType = (String)mpBom.get(DomainConstants.SELECT_TYPE);
                                    mpObjNameSSTBOM = new HashMap();
                                    mpObjNameSSTBOM.put(DomainConstants.SELECT_ID,strid);
                                    mpObjNameSSTBOM.put(DomainConstants.SELECT_TYPE,strBomType);
                                    mlObjListNameSSTBOM = new MapList();
                                    mlObjListNameSSTBOM.add(mpObjNameSSTBOM);
                                    mpSettings = new HashMap();
                                    mpSettings.put("Column Name","");
                                    mpcolumnMap = new HashMap();
                                    mpcolumnMap.put("settings",mpSettings);
                                    mpBOMSubsSSTBOM = new HashMap();
                                    mpBOMSubsSSTBOM.put("objectList", mlObjListNameSSTBOM);
                                    mpBOMSubsSSTBOM.put("columnMap", mpcolumnMap);

                                    String[] argsSubsSSTBOM = JPO.packArgs(mpBOMSubsSSTBOM);
                                    //emxPart_mxJPO objEmxPartBom = new emxPart_mxJPO(context, argsSubsSSTBOM);
                                    //Vector vEBOMSubSpecSubTypeBOM = (Vector)objEmxPartBom.getSpecificationSubtype(context, argsSubsSSTBOM);
                                    //Added for PDF Refactor
                                    Vector vEBOMSubSpecSubTypeBOM = (Vector)pgPDFViewHelper.executeMainClassMethod(context, "emxPart", "getSpecificationSubtype", argsSubsSSTBOM);
                                    String strSpecSubTypeBOM = null;
                                    if((vEBOMSubSpecSubTypeBOM !=null) && (vEBOMSubSpecSubTypeBOM.size() >0))
                                        strSpecSubTypeBOM =(String)vEBOMSubSpecSubTypeBOM.get(0);
                                    strBOMValue = UINavigatorUtil.getAdminI18NString("Type", strBomType, context.getSession().getLanguage());
                                    if(pgV3Constants.TYPE_FABRICATEDPART.equals(strChkType) || pgV3Constants.TYPE_PGINNERPACKUNITPART.equals(strChkType) || pgV3Constants.TYPE_PACKAGINGASSEMBLYPART.equals(strChkType) || pgV3Constants.TYPE_PGCUSTOMERUNITPART.equals(strChkType) || pgV3Constants.TYPE_PGCONSUMERUNITPART.equals(strChkType) || pgV3Constants.TYPE_PGTRANSPORTUNITPART.equals(strChkType)) {
                                        BOMSubstituteSAPBuffer.append("<TD width=\"80px\"><B>T:</B>"+validateString1(strBOMValue)+"<br/><B>Ti:</B>"+validateString1(wrapCharTable(strBomTitle,10))+"</TD>");
                                        BOMSubstituteSAPBuffer.append("<TD width=\"80px\"><B>SST:</B>"+validateString1(strSpecSubTypeBOM)+"<br/><B>OC:</B>"+validateString1(strSubOptionalComponent)+"</TD>");
                                        //Modified by DSM(Sogeti)-2018x.5 for PDF Views Defect #34514,34695 : Starts
                                    } else if(pgV3Constants.TYPE_PGMASTERPACKAGINGASSEMBLYPART.equals(strChkType) || pgV3Constants.TYPE_PGMASTERCUSTOMERUNITPART.equals(strChkType) || pgV3Constants.TYPE_INTERMEDIATE_PRODUCT_PART.equals(strChkType) || pgV3Constants.TYPE_PGMASTERCONSUMERUNITPART.equals(strChkType)) {
                                        BOMSubstituteSAPBuffer.append("<TD width=\"80px\"><B>T:</B>"+validateString1(strBOMValue)+"<br/><B>Ti:</B>"+validateString1(wrapCharTable(strBomTitle,10))+"</TD>");
                                        BOMSubstituteSAPBuffer.append("<TD width=\"80px\">"+validateString1(strSpecSubTypeBOM)+"</TD>");
                                        //Modified by DSM(Sogeti)-2018x.5 for PDF Views Defect #34514,34695 : Ends
                                    } else {
                                        BOMSubstituteSAPBuffer.append("<TD width=\"80px\">"+validateString1(wrapCharTable(strBomTitle,10))+"</TD>");
                                        BOMSubstituteSAPBuffer.append("<TD width=\"80px\"><B>T:</B>"+validateString1(strBOMValue)+"<br/><B>SST:</B>"+validateString1(strSpecSubTypeBOM)+"</TD>");
                                    }
                                    BOMSubstituteSAPBuffer.append("</TR>");
                                }
                            }
                        }
                        if(bFPPTable) {
                            BOMSubstituteSAPBuffer.append("</TABLE><TR><TD><br /></TD></TR></TD></TR>");
                        }
                        //Modified by DSM(Sogeti)-2015x.4 for PDF Views (DSOSubstitute Table) - Ends
                    }
                    //Added by DSM(Sogeti)-2018x.5 for PDF Views Requirement  - Starts
                }
                //Added by DSM(Sogeti)-2018x.5 for PDF Views Requirement  - Ends
            } catch (MatrixException e) {
                throw new MatrixException(e);
            } catch (Exception e) {
                throw new MatrixException(e);
            } finally {
                if(isPushContext){
                    ContextUtil.popContext(context);
                    isPushContext = false;
                }
            }
        }
        long endTime = new Date().getTime();
        System.out.println("Total Time has taken by the  getDSOSubstitutes Method is-->"+(endTime-startTime));
        return BOMSubstituteSAPBuffer;
    }



    //Added by DSM-2015x.1 for PDF Views (Req ID-5691,5692,5693,5694,5696,5697,5698,5699,5700,5701,5702,5703,5704,10146,10151,10158,10160)on 22-03-2016 - Starts
    /**
     * This method gets Security Classes table data
     * @param Context - Context user
     * @param String - strObjectId, strHeader,tableIdString
     * @return StringBuilder - returns list of Security Classes
     * @throws Exception if fails
     **/
    private StringBuilder getSecurityClassTableData(Context context, String strObjectId, String strHeader, String tableIdString) {
        StringBuilder sbSecurityClassesTable = new StringBuilder();
        try{
            if(UIUtil.isNotNullAndNotEmpty(strObjectId))
            {
                DomainObject domObjectId = DomainObject.newInstance(context,strObjectId);
                String strType = domObjectId.getInfo(context,DomainConstants.SELECT_TYPE);
                if(pgV3Constants.TYPE_FORMULATIONPART.equals(strType)) {
                    MapList mlFormulationPropagate =null;
                    Map mConnectedFormulationPropagate=null;
                    StringList objectFormulationSelects = new StringList(1);
                    objectFormulationSelects.add(DomainConstants.SELECT_ID);
                    mlFormulationPropagate = domObjectId.getRelatedObjects(context,   //Context
                            pgV3Constants.RELATIONSHIP_FORMULATIONPROPAGATE, //Relationship Pattern
                            pgV3Constants.TYPE_COSMETICFORMULATION,//Type Pattern
                            objectFormulationSelects,  //Object select
                            null,  			//Relationship select
                            true,			//getTo
                            false,			//getFrom
                            (short)1,		//recurseToLevel
                            null,			//objectWhere
                            null);		//relationshipWhere
                    if(mlFormulationPropagate!=null && !mlFormulationPropagate.isEmpty()) {
                        mConnectedFormulationPropagate = (Map)mlFormulationPropagate.get(0);
                        strObjectId = (String)mConnectedFormulationPropagate.get(DomainConstants.SELECT_ID);
                        domObjectId = DomainObject.newInstance(context,strObjectId);
                    }
                }
                boolean isAccess = domObjectId.checkAccess(context, (short)0);
                MapList mlSecurityClasses;
                if (pgPDFViewConstants.CONST_SECURITYCLASS.equalsIgnoreCase(tableIdString)) {
                    if(isAccess) {
                        mlSecurityClasses = EnoviaTableUtils.getSecurityControl(context, strObjectId);
                    } else{
                        mlSecurityClasses = getNoAccessML();
                    }
                }
                else {
                    if(isAccess) {
                        mlSecurityClasses = EnoviaTableUtils.getIPSecurity(context, strObjectId);
                    } else {
                        mlSecurityClasses = getNoAccessML();
                    }
                }
                if(mlSecurityClasses != null && !mlSecurityClasses.isEmpty()){
                    sbSecurityClassesTable.append("<tr><td><table class=\"pdf\" cellspacing=\"0\" width=\"1000px\" id=\"pgSecurityClassTable\">");
                    sbSecurityClassesTable.append("<thead>");
                    sbSecurityClassesTable.append("<tr><td colspan='7' class=\"new\" ><font size='4'><b>" +validateString1(strHeader)+"</b></font></td></tr>");
                    sbSecurityClassesTable.append("<tr>");
                    sbSecurityClassesTable.append("<td width=\"160\" align=\"center\"><b>").append(EnoviaResourceBundle.getProperty(context,"emxCPNStringResource",context.getLocale(),"emxCPN.PDFViews.SecurityClasses.ColName.Name")).append("</b></td>");
                    sbSecurityClassesTable.append("<td width=\"160\" align=\"center\"><b>").append(EnoviaResourceBundle.getProperty(context,"emxCPNStringResource",context.getLocale(),"emxCPN.PDFViews.SecurityClasses.ColName.Type")).append("</b></td>");
                    sbSecurityClassesTable.append("<td width=\"270\" align=\"center\"><b>").append(EnoviaResourceBundle.getProperty(context,"emxCPNStringResource",context.getLocale(),"emxCPN.PDFViews.SecurityClasses.ColName.Description")).append("</b></td>");
                    sbSecurityClassesTable.append("<td width=\"70\" align=\"center\"><b>").append(EnoviaResourceBundle.getProperty(context,"emxCPNStringResource",context.getLocale(),"emxCPN.PDFViews.SecurityClasses.ColName.State")).append("</b></td>");
                    sbSecurityClassesTable.append("<td width=\"220\" align=\"center\"><b>").append(EnoviaResourceBundle.getProperty(context,"emxCPNStringResource",context.getLocale(),"emxCPN.PDFViews.SecurityClasses.ColName.Classification_Path")).append("</b></td>");
                    sbSecurityClassesTable.append("</tr>");
                    sbSecurityClassesTable.append("</thead>");
                    int nMapSecurityClassSize = mlSecurityClasses.size();
                    Map mConnectedSecurityClass;
                    for (int i = 0; i <nMapSecurityClassSize; i++){
                        mConnectedSecurityClass = (Map)mlSecurityClasses.get(i);
                        sbSecurityClassesTable.append("<tr>");
                        sbSecurityClassesTable.append("<td align=\"center\" width=\"160\">"+validateString1(mConnectedSecurityClass.get("Name"))+"</td>");
                        sbSecurityClassesTable.append("<td align=\"center\" width=\"160\">"+validateString1(mConnectedSecurityClass.get("Type"))+"</td>");
                        sbSecurityClassesTable.append("<td align=\"center\" width=\"270\">"+checkLessThanGreaterThan(validateString1(mConnectedSecurityClass.get("Description")))+"</td>");
                        sbSecurityClassesTable.append("<td align=\"center\" width=\"70\">"+validateString1(mConnectedSecurityClass.get("POLICYCURRENT"))+"</td>");
                        sbSecurityClassesTable.append("<td align=\"center\" width=\"220\">").append(validateString1(mConnectedSecurityClass.get("Classification Path"))).append("</td>");
                        sbSecurityClassesTable.append("</tr>");
                    }
                    sbSecurityClassesTable.append("</table><tr><td><br /></td></tr></td></tr>");
                    mlSecurityClasses.clear();
                }
            }
        }catch(Exception e){
            logger.log(Level.WARNING, null, e);
        }
        return sbSecurityClassesTable;
    }

    /**
     * @return
     */
    public MapList getNoAccessML(){
        Map mp = new HashMap();
        mp.put("Name",pgPDFViewConstants.CONST_NO_ACCESS);
        mp.put("Type",pgPDFViewConstants.CONST_NO_ACCESS);
        mp.put("Description",pgPDFViewConstants.CONST_NO_ACCESS);
        mp.put("POLICYCURRENT",pgPDFViewConstants.CONST_NO_ACCESS);
        mp.put("Library",pgPDFViewConstants.CONST_NO_ACCESS);
        MapList mlSecurityClasses = new MapList();
        mlSecurityClasses.add(mp);
        return mlSecurityClasses;
    }

    /**
     * This method gets Table Header for Security Classes table
     * @param Context - Context user
     * @param String - strType,strViewType,tableIdString
     * @return String - Table header
     * @throws Exception if fails
     **/
    //Modified DSM-2018x.5 for PDF Views (Req Id 33188) : Starts
    private String getTableHeader(Context context, String strType, String strViewType,String tableIdString) throws Exception {
        String strLanguage = context.getSession().getLanguage();
        String strTableHeader = i18nNow.getI18nString("emxCPN.PDFViews.SecurityClasses.Common.TableHeader", "emxCPNStringResource",strLanguage);
        try{

            if(tableIdString.equalsIgnoreCase("DSOSecurityClass")) {

                if((pgPDFViewConstants.CONST_COMBINEDWITHMASTER).equals(strViewType))
                {
                    if(((pgV3Constants.TYPE_PGRAWMATERIAL).equals(strType)) || ((pgV3Constants.TYPE_PGPACKINGMATERIAL).equals(strType))){
                        strTableHeader = i18nNow.getI18nString("emxCPN.PDFViews.SecurityClasses.RawMaterialOrPackingMaterial.TableHeader", "emxCPNStringResource",strLanguage);
                    }else if(((pgV3Constants.TYPE_PGFINISHEDPRODUCT).equals(strType))|| ((pgV3Constants.TYPE_PGPACKINGSUBASSEMBLY).equals(strType))){
                        strTableHeader = i18nNow.getI18nString("emxCPN.PDFViews.SecurityClasses.FinishedProductOrPackingSubAss.TableHeader", "emxCPNStringResource",strLanguage);
                    }
                }
                //Modified by DSM(Sogeti)-2015x.5 for PDF Views (Defect ID-16171) -Starts
                else if (("allinfo").equals(strViewType) && (pgV3Constants.TYPE_PGPACKINGMATERIAL.equals(strType) || pgV3Constants.TYPE_PGFINISHEDPRODUCT.equals(strType) || pgV3Constants.TYPE_PGPACKINGSUBASSEMBLY.equals(strType)))
                {
                    strTableHeader = "Security Classes";
                }
            }
            else
            {
                strTableHeader = "IP Classes";

            }
            //Modified by DSM(Sogeti)-2015x.5 for PDF Views (Defect ID-16171) -Ends
        }catch(Exception exception){
            throw exception;
        }
        return strTableHeader;
    }
    //Modified DSM-2018x.5 for PDF Views (Req Id #33188) : End

    /**
     * This method gets Security Classes
     * @param Context - Context user
     * @param String - ObjectID, strViewType,tableIdString
     * @return StringBuilder - returns list of Security Classes
     * @throws Exception if fails
     **/
    //Modified DSM-2018x.5 for PDF Views (Req Id #33188) : Start
    private StringBuilder getSecurityClassTable(Context context, String strObjectId,String strViewType,String tableIdString) throws Exception {
        //Modified DSM-2018x.5 for PDF Views (Req Id #33188) : End
        long startTime = new Date().getTime();
        StringBuilder sbSecurityClassesTable = new StringBuilder();
        try{
            DomainObject domObjectId = DomainObject.newInstance(context,strObjectId);
            String strType = domObjectId.getInfo(context,DomainConstants.SELECT_TYPE);
            //Modified DSM-2018x.5 for PDF Views (Req Id #33188) : Start
            String strTableHeader = getTableHeader(context,strType,strViewType,tableIdString);
            sbSecurityClassesTable = getSecurityClassTableData(context,strObjectId,strTableHeader,tableIdString);
            //Modified DSM-2018x.5 for PDF Views (Req Id #33188) : End

            //Check if it has master connected to it and check if it is a "combined with master view"
            if((pgPDFViewConstants.CONST_COMBINEDWITHMASTER).equals(strViewType) && (((pgV3Constants.TYPE_PGRAWMATERIAL).equals(strType)) ||
                    ((pgV3Constants.TYPE_PGFINISHEDPRODUCT).equals(strType)) ||
                    ((pgV3Constants.TYPE_PGPACKINGSUBASSEMBLY).equals(strType)) ||
                    ((pgV3Constants.TYPE_PGPACKINGMATERIAL).equals(strType)))){
                Map mMasterData = domObjectId.getRelatedObject(context,
                        pgV3Constants.RELATIONSHIP_PGMASTER,            // Rel Pattern
                        true,                                           // direction of expansion
                        new StringList(DomainConstants.SELECT_ID),      // Bus select
                        null);										  // Rel Select
                if(mMasterData !=null){
                    //Modified by DSM(Sogeti)-2015x.4 for PDF views For defect 14101 - Starts
                    //String strMasterLastRevId = FrameworkUtil.getLastRevision(context,(String)mMasterData.get(DomainConstants.SELECT_ID));
                    String strMasterLastRevId =(String)mMasterData.get(DomainConstants.SELECT_ID);
                    String []arry = pgIPMPDFViewUtil_mxJPO.getLatestRelease(context,strMasterLastRevId);
                    if(null !=arry && arry.length>1){
                        strMasterLastRevId  =  arry[0];
                    }
                    //Modified by DSM(Sogeti)-2015x.4 for PDF views For defect 14101 - Ends
                    sbSecurityClassesTable.append(getSecurityClassTableData(context,strMasterLastRevId,"MASTER SECURITY CLASSES",tableIdString));
                }
            }

        }catch(Exception exception){
            throw exception;
        }
        long endTime = new Date().getTime();
        System.out.println("Total Time has taken by the  getSecurityClassTable Method is-->"+(endTime-startTime));
        return sbSecurityClassesTable;
    }
    /**
     * Generate BOM and Substitute for TUP
     * @param IPSId
     * @param pdfViewType
     * @return BOMSubstituteSAPBuffer
     * @throws Exception
     */
    //Added by DSM-2015x.1 for PDF Views (Req ID-5691,5692,5693,5694,5696,5697,5698,5699,5700,5701,5702,5703,5704,10146,10151,10158,10160)on 22-03-2016 - Ends
    //Added for defect #456 by DSM 2015x.1 (Sogeti) - Starts
    private StringBuilder getBillOfMaterialSubstituteAndBOMDataTUP(Context context, String IPSId, String pdfViewType) throws MatrixException {
        long startTime = new Date().getTime();
        boolean isPushContext = false;
        StringBuilder BOMSubstituteSAPBuffer=new StringBuilder();
        try{
            //Modified by DSM(Sogeti)-2015x.4 for PDF Views (Req - 5700) - Starts
            StringList selectStmtsRel = new StringList(5);
            //Modified by DSM(Sogeti)-2015x.4 for PDF Views (Req - 5700) - Ends
            selectStmtsRel.add(DomainRelationship.SELECT_TO_ID );
            selectStmtsRel.add(pgV3Constants.SELECT_ATTRIBUTE_PGCHANGE);
            selectStmtsRel.add(pgV3Constants.SELECT_ATTRIBUTE_FINDNUMBER);
            selectStmtsRel.add(pgV3Constants.SELECT_ATTRIBUTE_REFERENCEDESIGNATOR);
            //Modified by DSM(Sogeti)-2015x.4 for PDF Views (Req - 5700) - Starts
            selectStmtsRel.add(pgV3Constants.SELECT_ATTRIBUTE_PGOPTIONALCOMPONENT);
            //Modified by DSM(Sogeti)-2015x.4 for PDF Views (Req - 5700) - Ends
            StringList selectStmt = new StringList(6);
            selectStmt.add(DomainConstants.SELECT_NAME);
            selectStmt.add(DomainConstants.SELECT_TYPE);
            selectStmt.add(DomainConstants.SELECT_ID);
            selectStmt.add(pgV3Constants.SELECT_ATTRIBUTE_TITLE);
            selectStmt.add(DomainConstants.SELECT_CURRENT);
            //Modified for 2018x Upgrade - Stage attribute is replaced by Release Phase attribute in 18x OOTB.
            selectStmt.add(pgV3Constants.SELECT_ATTRIBUTE_RELEASE_PHASE);
            //Added by DSM ( Sogeti) for 2018x.5 PDF Defect - 33102 : Starts
            //Added by DSM Sogeti for 2018x.6 Apr CW 2022 for PDF Views (Req -41367) - Starts
            StringList objectSelects = new StringList(2);
            objectSelects.addElement(DomainConstants.SELECT_TYPE);
            objectSelects.addElement(pgV3Constants.SELECT_ATTRIBUTE_PGSAPTYPE);
            DomainObject dob = DomainObject.newInstance(context,IPSId);

            //Added by DSM Sogeti 2018x.6 Apr CW 2022 for PDF Views (Defect - 47501) - Start
            Map dataMap = dob.getInfo(context, objectSelects);
            //Added by DSM Sogeti 2018x.6 Apr CW 2022 for PDF Views (Defect - 47501) - End

            String strContType = (String) dataMap.get(DomainConstants.SELECT_TYPE);
            String strSAPType = (String) dataMap.get(pgV3Constants.SELECT_ATTRIBUTE_PGSAPTYPE);
            //Added by DSM Sogeti for 2018x.6 Apr CW 2022 for PDF Views (Req -41367) - Ends
            //Modified by DSM(Sogeti)-2018x.5 for PDF Views Requirement  - Starts
            strParentObjType = strContType;
            //Modified by DSM(Sogeti)-2018x.5 for PDF Views Requirement  - Ends
            //Added by DSM ( Sogeti) for 2018x.5 PDF Defect - 33102 : Ends
            ArrayList alEBOMParents = getParentEBOMsIntermediateObjects(context, IPSId, new ArrayList(), "First");
            //Added by DSM(Sogeti) for Code Optimization Start
            String strParentId = DomainConstants.EMPTY_STRING;
            String strRelId = DomainConstants.EMPTY_STRING;
            String strType=DomainConstants.EMPTY_STRING;
            String strToId = DomainConstants.EMPTY_STRING;
            String strpgChange = DomainConstants.EMPTY_STRING;
            String strFindNumber = DomainConstants.EMPTY_STRING;
            String strRefDesig = DomainConstants.EMPTY_STRING;
            //Modified by DSM(Sogeti)-2015x.4 for PDF Views (Req - 5700) - Starts
            String strSubOptionalComponent = DomainConstants.EMPTY_STRING;
            //Modified by DSM(Sogeti)-2015x.4 for PDF Views (Req - 5700) - Ends
            String strlevel = DomainConstants.EMPTY_STRING;
            //Added by DSM(Sogeti)-2018x.5 for PDF Views Requirements - Starts
            String strIntermediatePartId = DomainConstants.EMPTY_STRING;
            //Added by DSM(Sogeti)-2018x.5 for PDF Views Requirements - Ends
            StringList slMainEBOM = new StringList();
            StringList slMCOPEBOM = new StringList();
            StringList slMCUPEBOM = new StringList();
            StringList slMIPEBOM = new StringList();
            MapList mlMain = null;
            //Added by DSM(Sogeti) for Code Optimization End
            int cntTUP = 0;
            boolean bTUPTable = false;
            //Added by DSM(Sogeti)-2018x.5 for PDF Views Requirement  - Starts
            boolean bGenDoc = false;
            if("GenDoc".equalsIgnoreCase(pdfViewType)){
                bGenDoc = true;
            }
            //Added by DSM(Sogeti)-2018x.5 for PDF Views Requirement  - Ends
            for (int i = 0; i < alEBOMParents.size(); i++) {
                String strEBOMData = (String)alEBOMParents.get(i);
                StringTokenizer stEBOMData = new StringTokenizer(strEBOMData, "|");
                if(stEBOMData.hasMoreTokens()) {
                    strType = (String)stEBOMData.nextToken();
                    strParentId = (String)stEBOMData.nextToken();
                    strRelId = (String)stEBOMData.nextToken();
                    strlevel = (String)stEBOMData.nextToken();
                    //Modified by DSM(Sogeti)-2018x.5 for PDF Views Requirements - Starts
                    strIntermediatePartId = (String)stEBOMData.nextToken();
                    if("MAIN".equals(strType)) {
                        slMainEBOM.add(strParentId+"|"+strType+"|"+strRelId+"|"+strlevel+pgV3Constants.DUMP_CHARACTER+strIntermediatePartId);
                    } else if("MCOP".equals(strType)) {
                        slMCOPEBOM.add(strParentId+"|"+strType+"|"+strRelId+"|"+strlevel+pgV3Constants.DUMP_CHARACTER+strIntermediatePartId);
                    } else if("MCUP".equals(strType)) {
                        slMCUPEBOM.add(strParentId+"|"+strType+"|"+strRelId+"|"+strlevel+pgV3Constants.DUMP_CHARACTER+strIntermediatePartId);
                    } else if("MIP".equals(strType)) {
                        slMIPEBOM.add(strParentId+"|"+strType+"|"+strRelId+"|"+strlevel+pgV3Constants.DUMP_CHARACTER+strIntermediatePartId);
                    }
                    //Modified by DSM(Sogeti)-2018x.5 for PDF Views Requirements - Ends
                }
            }
            if(null!=slMainEBOM && slMainEBOM.size() > 0){
                mlMain = new MapList();
                mlMain = getBOMRelData(context,slMainEBOM);
                //Modified by DSM-2015x.2 for Defect 8635 - Starts
                //}
                if(null!=mlMain && mlMain.size() > 0){
                    BOMSubstituteSAPBuffer.append("<TR><TD><TABLE class=\"WordWrappdf\" cellspacing=\"0\" width=\"1000px\" id=\"BOM\">");
                    BOMSubstituteSAPBuffer.append("<thead><TR>");
                    BOMSubstituteSAPBuffer.append("<TR><TD class=\"new\" colspan='15'><B><font size ='4'>Bill of Materials</font></B></TD></TR>");
                    //Modified by DSM(Sogeti)-2015x.4 for PDF Views (Req - 5700) - Starts
                    //Modified by DSM ( Sogeti) for 2018x.5 PDF Defect - 33102 : Starts
                    //Added by DSM Sogeti for 2018x.6 Apr CW 2022 for PDF Views (Req -41367) - Starts
                    BOMSubstituteSAPBuffer.append(getBillofMaterialTableHeader(context,mlMain,pdfViewType,IPSId,strContType,strSAPType));
                    //Added by DSM Sogeti for 2018x.6 Apr CW 2022 for PDF Views (Req -41367) - Ends
                    //Modified by DSM ( Sogeti) for 2018x.5 PDF Defect - 33102 : Ends
                    //Modified by DSM(Sogeti)-2015x.4 for PDF Views (Req - 5700) - Ends
                    BOMSubstituteSAPBuffer.append("</TR></thead>");
                    //Modified by DSM(Sogeti)-2015x.4 for PDF Views (Req - 5700) - Starts
                    //Modified by DSM ( Sogeti) for 2018x.5 PDF Defect - 33102 : Starts
                    //Added by DSM Sogeti for 2018x.6 Apr CW 2022 for PDF Views (Req -41367) - Starts
                    BOMSubstituteSAPBuffer.append(getEBOMTablewithData(context,mlMain,pdfViewType,IPSId,strContType,strSAPType));
                    //Added by DSM Sogeti for 2018x.6 Apr CW 2022 for PDF Views (Req -41367) - Ends
                    //Modified by DSM ( Sogeti) for 2018x.5 PDF Defect - 33102 : Ends
                    //Modified by DSM(Sogeti)-2015x.4 for PDF Views (Req - 5700) - Ends
                    BOMSubstituteSAPBuffer.append("</TABLE><TR><TD><br /></TD></TR></TD></TR>");
                    //Substitute
                    cntTUP = 0;
                    bTUPTable = false;
                    //Modified by DSM(Sogeti) for Code Optimization
                    MapList mlSub = null;
                    for (Iterator iterator = mlMain.iterator(); iterator.hasNext();){
                        Map mapFPP = (Map) iterator.next();
                        strParentId = (String)mapFPP.get("ParentId");
                        mlSub = new MapList();
                        mlSub = getSubstituteData(context, mapFPP);
                        if(null != mlSub && mlSub.size()>0){
                            cntTUP++;
                            if( cntTUP == 1){
                                bTUPTable = true;
                                BOMSubstituteSAPBuffer.append("<TR><TD><TABLE class=\"WordWrappdf\" cellspacing=\"0\" width=\"1000px\" id=\"BOM\">");
                                BOMSubstituteSAPBuffer.append("<thead>");
                                BOMSubstituteSAPBuffer.append("<TR><TD class=\"new\"  colspan='15'><B><font size ='4'>Substitutes </font></B></TD></TR>");
                                //Modified by DSM(Sogeti)-2015x.4 for PDF Views (Req - 5706) - Starts
                                BOMSubstituteSAPBuffer.append(getBOMSubstitueTableHeader(context,mlMain,pdfViewType,IPSId));
                                //Modified by DSM(Sogeti)-2015x.4 for PDF Views (Req - 5706) - Ends
                                BOMSubstituteSAPBuffer.append("</TR></thead>");
                            }
                            for (Iterator objIterator = mlSub.iterator(); objIterator.hasNext();){
                                Map mapSub = (Map) objIterator.next();
                                //Modified by DSM(Sogeti)-2018x.5 for PDF Views Requirement  - Starts
                                //Added by DSM(Sogeti) - for 2022x.02 May CW PDF Views Req#46172 - Starts
                                BOMSubstituteSAPBuffer.append(getSubstituteTablewithData(context, mapSub,strParentId,bGenDoc,pdfViewType));
                                //Added by DSM(Sogeti) - for 2022x.02 May CW PDF Views Req#46172 - Ends
                                //Modified by DSM(Sogeti)-2018x.5 for PDF Views Requirement  - Ends
                            }
                        }
                    }
                    if(bTUPTable){
                        BOMSubstituteSAPBuffer.append("</TABLE><TR><TD><br /></TD></TR></TD></TR>");
                    }
                }
            }//Modified by DSM-2015x.2 for Defect 8635  - Ends
            //Modified by DSM(Sogeti)-2018x.5 for PDF Views Requirement  - Starts
            if(!pdfViewType.equalsIgnoreCase("GenDoc"))
            {
                //MCUP BOM
                if(null!=slMCUPEBOM && slMCUPEBOM.size() > 0){
                    mlMain = new MapList();
                    mlMain = getBOMRelData(context,slMCUPEBOM);
                    //Modified by DSM-2015x.2 for Defect 8635  - Starts
                    //}
                    if(null!= mlMain && mlMain.size() > 0){
                        BOMSubstituteSAPBuffer.append("<TR><TD><TABLE class=\"WordWrappdf\" cellspacing=\"0\" width=\"1000px\" id=\"BOM\">");
                        BOMSubstituteSAPBuffer.append("<thead><TR>");
                        BOMSubstituteSAPBuffer.append("<TR><TD class=\"new\" colspan='15'><B><font size ='4'>Bill of Materials - Master Customer Unit</font></B></TD></TR>");
                        //Modified by DSM(Sogeti)-2015x.4 for PDF Views (Req - 5691,5700) - Starts
                        //Modified by DSM ( Sogeti) for 2018x.5 PDF Defect - 33102 : Starts
                        //Added by DSM Sogeti for 2018x.6 Apr CW 2022 for PDF Views (Req -41367) - Starts
                        BOMSubstituteSAPBuffer.append(getBillofMaterialTableHeader(context,mlMain,pdfViewType,IPSId,strContType,strSAPType));
                        //Added by DSM Sogeti for 2018x.6 Apr CW 2022 for PDF Views (Req -41367) - Ends
                        //Modified by DSM ( Sogeti) for 2018x.5 PDF Defect - 33102 : Ends
                        //Modified by DSM(Sogeti)-2015x.4 for PDF Views (Req - 5691,5700) - Ends
                        BOMSubstituteSAPBuffer.append("</TR></thead>");
                        //Modified by DSM(Sogeti)-2015x.4 for PDF Views (Req - 5691) - Starts
                        //Modified by DSM ( Sogeti) for 2018x.5 PDF Defect - 33102 : Starts
                        //Added by DSM Sogeti for 2018x.6 Apr CW 2022 for PDF Views (Req -41367) - Starts
                        BOMSubstituteSAPBuffer.append(getEBOMTablewithData(context,mlMain,pdfViewType,IPSId,strContType,strSAPType));
                        //Added by DSM Sogeti for 2018x.6 Apr CW 2022 for PDF Views (Req -41367) - Ends
                        //Modified by DSM ( Sogeti) for 2018x.5 PDF Defect - 33102 : Starts
                        //Modified by DSM(Sogeti)-2015x.4 for PDF Views (Req - 5691) - Ends
                        BOMSubstituteSAPBuffer.append("</TABLE><TR><TD><br /></TD></TR></TD></TR>");
                        // MCUP Substitute
                        //Commented by DSM(Sogeti)-2018x.5 for PDF Views Defect #35750  - Starts
				/*cntTUP = 0;
				bTUPTable = false;
				MapList mlSub = new MapList();
				for (Iterator iterator = mlMain.iterator(); iterator.hasNext();){
					Map mapFPP = (Map) iterator.next();
					strParentId = (String)mapFPP.get("ParentId");
					mlSub = new MapList();
					mlSub = getSubstituteData(context, mapFPP);
					if(null != mlSub && mlSub.size()>0){
						cntTUP++;
						if( cntTUP == 1){
							bTUPTable = true;
							BOMSubstituteSAPBuffer.append("<TR><TD><TABLE class=\"WordWrappdf\" cellspacing=\"0\" width=\"1000px\" id=\"BOM\">");
							BOMSubstituteSAPBuffer.append("<thead>");
							BOMSubstituteSAPBuffer.append("<TR><TD class=\"new\"  colspan='15'><B><font size ='4'>Substitutes - Master Customer Unit </font></B></TD></TR>");
							//Modified by DSM(Sogeti)-2015x.4 for PDF Views (Req - 5706) - Starts
							BOMSubstituteSAPBuffer.append(getBOMSubstitueTableHeader(context,mlMain,pdfViewType,IPSId));
							//Modified by DSM(Sogeti)-2015x.4 for PDF Views (Req - 5706) - Ends
							BOMSubstituteSAPBuffer.append("</TR></thead>");
						}
						for (Iterator objIterator = mlSub.iterator(); objIterator.hasNext();){
							Map mapSub = (Map) objIterator.next();
							//Modified by DSM(Sogeti)-2018x.5 for PDF Views Requirement  - Starts
							BOMSubstituteSAPBuffer.append(getSubstituteTablewithData(context, mapSub,strParentId,bGenDoc));
							//Modified by DSM(Sogeti)-2018x.5 for PDF Views Requirement  - Ends
						}
					}
				}
				if(bTUPTable)
				{
					BOMSubstituteSAPBuffer.append("</TABLE><TR><TD><br /></TD></TR></TD></TR>");
				}*/
                        //Commented by DSM(Sogeti)-2018x.5 for PDF Views Defect #35750  - Ends
                    }
                }//Modified by DSM-2015x.2 for Defect 8635  - Ends
                //MIP BOM
                if(null!=slMIPEBOM && slMIPEBOM.size() > 0){
                    mlMain = new MapList();
                    mlMain = getBOMRelData(context,slMIPEBOM);
                    //Modified by DSM-2015x.2 for Defect 8635  - Starts
                    //}
                    if(null!=mlMain && mlMain.size() > 0){
                        BOMSubstituteSAPBuffer.append("<TR><TD><TABLE class=\"WordWrappdf\" cellspacing=\"0\" width=\"1000px\" id=\"BOM\">");
                        BOMSubstituteSAPBuffer.append("<thead><TR>");
                        BOMSubstituteSAPBuffer.append("<TR><TD class=\"new\" colspan='15'><B><font size ='4'>Bill of Materials - Master Inner Pack</font></B></TD></TR>");
                        //Modified by DSM(Sogeti)-2015x.4 for PDF Views (Req - 5691,5700) - Starts
                        //Modified by DSM ( Sogeti) for 2018x.5 PDF Defect - 33102 : Starts
                        //Added by DSM Sogeti for 2018x.6 Apr CW 2022 for PDF Views (Req -41367) - Starts
                        BOMSubstituteSAPBuffer.append(getBillofMaterialTableHeader(context,mlMain,pdfViewType,IPSId,strContType,strSAPType));
                        //Added by DSM Sogeti for 2018x.6 Apr CW 2022 for PDF Views (Req -41367) - Ends
                        //Modified by DSM ( Sogeti) for 2018x.5 PDF Defect - 33102 : Ends
                        //Modified by DSM(Sogeti)-2015x.4 for PDF Views (Req - 5691,5700) - Ends
                        BOMSubstituteSAPBuffer.append("</TR></thead>");
                        //Modified by DSM(Sogeti)-2015x.4 for PDF Views (Req - 5691) - Starts
                        //Modified by DSM ( Sogeti) for 2018x.5 PDF Defect - 33102 : Starts
                        //Added by DSM Sogeti for 2018x.6 Apr CW 2022 for PDF Views (Req -41367) - Starts
                        BOMSubstituteSAPBuffer.append(getEBOMTablewithData(context,mlMain,pdfViewType,IPSId,strContType,strSAPType));
                        //Added by DSM Sogeti for 2018x.6 Apr CW 2022 for PDF Views (Req -41367) - Ends
                        //Modified by DSM ( Sogeti) for 2018x.5 PDF Defect - 33102 : Ends
                        //Modified by DSM(Sogeti)-2015x.4 for PDF Views (Req - 5691) - Ends
                        BOMSubstituteSAPBuffer.append("</TABLE><TR><TD><br /></TD></TR></TD></TR>");
                        //MIP Substitute
                        //Commented by DSM(Sogeti)-2018x.5 for PDF Views Defect #35750  - Starts
				/*cntTUP = 0;
				bTUPTable = false;
				MapList mlSub = new MapList();
				for (Iterator iterator = mlMain.iterator(); iterator.hasNext();){
					Map mapFPP = (Map) iterator.next();
					strParentId = (String)mapFPP.get("ParentId");
					mlSub = new MapList();
					mlSub = getSubstituteData(context, mapFPP);
					if(null != mlSub && mlSub.size()>0){
						cntTUP++;
						if( cntTUP == 1){
						bTUPTable = true;
						BOMSubstituteSAPBuffer.append("<TR><TD><TABLE class=\"WordWrappdf\" cellspacing=\"0\" width=\"1000px\" id=\"BOM\">");
						BOMSubstituteSAPBuffer.append("<thead>");
						BOMSubstituteSAPBuffer.append("<TR><TD class=\"new\"  colspan='15'><B><font size ='4'>Substitutes - Master Inner Pack</font></B></TD></TR>");
						//Modified by DSM(Sogeti)-2015x.4 for PDF Views (Req - 5706) - Starts
						BOMSubstituteSAPBuffer.append(getBOMSubstitueTableHeader(context,mlMain,pdfViewType,IPSId));
						//Modified by DSM(Sogeti)-2015x.4 for PDF Views (Req - 5706) - Ends
						BOMSubstituteSAPBuffer.append("</TR></thead>");
						}
						for (Iterator objIterator = mlSub.iterator(); objIterator.hasNext();){
							Map mapSub = (Map) objIterator.next();
							//Modified by DSM(Sogeti)-2018x.5 for PDF Views Requirement  - Starts
							BOMSubstituteSAPBuffer.append(getSubstituteTablewithData(context, mapSub,strParentId,bGenDoc));
							//Modified by DSM(Sogeti)-2018x.5 for PDF Views Requirement  - Ends
						}
					}
				}
				if(bTUPTable)
				{
					BOMSubstituteSAPBuffer.append("</TABLE><TR><TD><br /></TD></TR></TD></TR>");
				}*/
                        //Commented by DSM(Sogeti)-2018x.5 for PDF Views Defect #35750  - Ends
                    }
                }//Modified by DSM-2015x.2 for Defect8635  - Defect#8635 Ends
                //MCOP BOM
                if(null!=slMCOPEBOM && slMCOPEBOM.size() > 0){
                    mlMain = new MapList();
                    mlMain = getBOMRelData(context,slMCOPEBOM);
                    //Modified by DSM-2015x.2 for Defect 8635  - Starts
                    //}
                    if(null!=mlMain && mlMain.size() > 0){
                        BOMSubstituteSAPBuffer.append("<TR><TD><TABLE class=\"WordWrappdf\" cellspacing=\"0\" width=\"1000px\" id=\"BOM\">");
                        BOMSubstituteSAPBuffer.append("<thead><TR>");
                        BOMSubstituteSAPBuffer.append("<TR><TD class=\"new\" colspan='15'><B><font size ='4'>Bill of Materials - Master Consumer Unit </font></B></TD></TR>");
                        //Modified by DSM(Sogeti)-2015x.4 for PDF Views (Req - 5691,5700) - Starts
                        //Modified by DSM ( Sogeti) for 2018x.5 PDF Defect - 33102 : Starts
                        //Added by DSM Sogeti for 2018x.6 Apr CW 2022 for PDF Views (Req -41367) - Starts
                        BOMSubstituteSAPBuffer.append(getBillofMaterialTableHeader(context,mlMain,pdfViewType,IPSId,strContType,strSAPType));
                        //Added by DSM Sogeti for 2018x.6 Apr CW 2022 for PDF Views (Req -41367) - Ends
                        //Modified by DSM ( Sogeti) for 2018x.5 PDF Defect - 33102 : Ends
                        //Modified by DSM(Sogeti)-2015x.4 for PDF Views (Req - 5691,5700) - Ends
                        BOMSubstituteSAPBuffer.append("</TR></thead>");
                        //Modified by DSM(Sogeti)-2015x.4 for PDF Views (Req - 5691) - Starts
                        //Modified by DSM ( Sogeti) for 2018x.5 PDF Defect - 33102 : Starts
                        //Added by DSM Sogeti for 2018x.6 Apr CW 2022 for PDF Views (Req -41367) - Starts
                        BOMSubstituteSAPBuffer.append(getEBOMTablewithData(context,mlMain,pdfViewType,IPSId,strContType,strSAPType));
                        //Added by DSM Sogeti for 2018x.6 Apr CW 2022 for PDF Views (Req -41367) - Ends
                        //Modified by DSM ( Sogeti) for 2018x.5 PDF Defect - 33102 : Ends
                        //Modified by DSM(Sogeti)-2015x.4 for PDF Views (Req - 5691) - Ends
                        BOMSubstituteSAPBuffer.append("</TABLE><TR><TD><br /></TD></TR></TD></TR>");
                        //MCOP Substitute
                        //Commented by DSM(Sogeti)-2018x.5 for PDF Views Defect #35750  - Starts
				/*cntTUP = 0;
				bTUPTable = false;
				MapList mlSub = new MapList();
				for (Iterator iterator = mlMain.iterator(); iterator.hasNext();){
					Map mapFPP = (Map) iterator.next();
					strParentId = (String)mapFPP.get("ParentId");
					mlSub = new MapList();
					mlSub = getSubstituteData(context, mapFPP);
					if(null != mlSub && mlSub.size()>0){
						cntTUP++;
						if( cntTUP == 1){
							bTUPTable = true;
							BOMSubstituteSAPBuffer.append("<TR><TD><TABLE class=\"WordWrappdf\" cellspacing=\"0\" width=\"1000px\" id=\"BOM\">");
							BOMSubstituteSAPBuffer.append("<thead>");
							BOMSubstituteSAPBuffer.append("<TR><TD class=\"new\"  colspan='15'><B><font size ='4'>Substitutes - Master Consumer Unit </font></B></TD></TR>");
							//Modified by DSM(Sogeti)-2015x.4 for PDF Views (Req - 5706) - Starts
							BOMSubstituteSAPBuffer.append(getBOMSubstitueTableHeader(context,mlMain,pdfViewType,IPSId));
							//Modified by DSM(Sogeti)-2015x.4 for PDF Views (Req - 5706) - Ends
							BOMSubstituteSAPBuffer.append("</TR></thead>");
						}
						for (Iterator objIterator = mlSub.iterator(); objIterator.hasNext();){
							Map mapSub = (Map) objIterator.next();
							//Modified by DSM(Sogeti)-2018x.5 for PDF Views Requirement  - Starts
							BOMSubstituteSAPBuffer.append(getSubstituteTablewithData(context, mapSub,strParentId,bGenDoc));
							//Modified by DSM(Sogeti)-2018x.5 for PDF Views Requirement  - Ends
						}
					}
				}
				if(bTUPTable)
					BOMSubstituteSAPBuffer.append("</TABLE><TR><TD><br /></TD></TR></TD></TR>");*/
                        //Commented by DSM(Sogeti)-2018x.5 for PDF Views Defect #35750  - Ends
                    }
                }//Modified by DSM-2015x.2 for Defect 8635 - Ends
            }//Modified by DSM(Sogeti)-2018x.5 for PDF Views Requirement  - Ends
        }
        catch (MatrixException e){
            throw new MatrixException(e);
        }
        catch (Exception e){
            throw new MatrixException(e);
        }
        finally{
            if(isPushContext){
                try {
                    ContextUtil.popContext(context);
                } catch (FrameworkException e) {
                    e.printStackTrace();
                }
                isPushContext = false;
            }
        }
        long endTime = new Date().getTime();
        System.out.println("Total Time has taken by the getBillOfMaterialSubstituteAndBOMDataTUP Method is-->"+(endTime-startTime));
        return BOMSubstituteSAPBuffer;
    }
    /**
     * Retrieve EBOM with Intermediate Objects
     * @param strObjectId
     * @param alEBOMParents
     * @param strLevel
     * @return ArrayList alEBOMParents
     */
    private ArrayList getParentEBOMsIntermediateObjects(Context context,String strObjectId, ArrayList alEBOMParents, String strLevel) {
        long startTime = new Date().getTime();
        MapList mlConnectedEBOMParents = new MapList();
        try {
            StringList busSelects = new StringList(1);
            StringList relSelects = new StringList(1);
            Map mpConnectedEBOMParents = null;
            String strParentId = DomainConstants.EMPTY_STRING;
            String strRelId = DomainConstants.EMPTY_STRING;
            String strBomLeveL = DomainConstants.EMPTY_STRING;
            busSelects.addElement(DomainConstants.SELECT_ID);
            relSelects.addElement(DomainConstants.SELECT_RELATIONSHIP_ID);

            DomainObject domObject = DomainObject.newInstance(context, strObjectId);
            String strParentType = domObject.getInfo(context, DomainConstants.SELECT_TYPE);
            mlConnectedEBOMParents = domObject.getRelatedObjects(context, //Context
                    DomainConstants.RELATIONSHIP_EBOM, //relPattern
                    "*", //typePattern
                    busSelects, //objectSelects
                    relSelects,// relationshipSelects
                    false, //getTo - Get Parent Data
                    true, //getFrom - Get Child Data
                    (short)1, //recurseToLevel
                    "", //objectWhere
                    ""); //relationshipWhere
            if(mlConnectedEBOMParents != null && mlConnectedEBOMParents.size() > 0) {
                for(Iterator connectedEBOMParentsItr = mlConnectedEBOMParents.iterator(); connectedEBOMParentsItr.hasNext();) {
                    mpConnectedEBOMParents = new HashMap();
                    mpConnectedEBOMParents = (Map)connectedEBOMParentsItr.next();
                    strParentId = (String)mpConnectedEBOMParents.get(DomainConstants.SELECT_ID);
                    strRelId = (String)mpConnectedEBOMParents.get(DomainConstants.SELECT_RELATIONSHIP_ID);
                    strBomLeveL = (String)mpConnectedEBOMParents.get(DomainConstants.SELECT_LEVEL);
                    if("First".equals(strLevel)) {
                        //Modified by DSM(Sogeti)-2018x.5 for PDF Views Requirements - Starts
                        alEBOMParents.add("MAIN|"+strParentId+"|"+strRelId+"|"+strBomLeveL+"|"+strObjectId);
                        alEBOMParents = getParentEBOMsIntermediateObjects(context, strParentId, alEBOMParents, "NotFirst");
                    } else {
                        if(pgV3Constants.TYPE_PGMASTERCONSUMERUNITPART.equals(strParentType)) {
                            alEBOMParents.add("MCOP|"+strParentId+"|"+strRelId+"|"+strBomLeveL+"|"+strObjectId);
                            alEBOMParents = getParentEBOMsIntermediateObjects(context, strParentId, alEBOMParents, "NotFirst");
                        } else if(pgV3Constants.TYPE_PGMASTERCUSTOMERUNITPART.equals(strParentType)) {
                            alEBOMParents.add("MCUP|"+strParentId+"|"+strRelId+"|"+strBomLeveL+"|"+strObjectId);
                            alEBOMParents = getParentEBOMsIntermediateObjects(context, strParentId, alEBOMParents, "NotFirst");
                        } else if( pgV3Constants.TYPE_PGMASTERINNERPACKUNITPART.equals(strParentType)) {
                            alEBOMParents.add("MIP|"+strParentId+"|"+strRelId+"|"+strBomLeveL+"|"+strObjectId);
                            //Modified by DSM(Sogeti)-2018x.5 for PDF Views Requirements - Ends
                            alEBOMParents = getParentEBOMsIntermediateObjects(context, strParentId, alEBOMParents, "NotFirst");
                        }
                    }
                }
            }
        } catch(Exception ex) {
            ex.printStackTrace();
        }
        long endTime = new Date().getTime();
        System.out.println("Total Time has taken by the getParentEBOMsIntermediateObjects Method is-->"+(endTime-startTime));
        return alEBOMParents;
    }
    //Added for defect #456 by DSM 2015x.1 (Sogeti) - Ends

    //Added by DSM-2015x.2 (Sogeti) for PDF Views (Req Id-11473,11998,12002,11999,11470,11471) - Starts
    /**
     * Retrieve Starting Material information
     * @param context
     *            the eMatrix <code>Context</code> object
     * @param String
     *            ObjectId is context Object
     * @return StringBuilder which contains table for materials
     * @throws Exception
     *             if the operation fails
     */
    // Modified method perameter by DSM(Sogeti) for 2018x.5 PDF Views Requirement
    private StringBuilder getStartingMaterialsTable(Context context, String strObjectId, String pdfViewType) throws Exception {
        long startTime = new Date().getTime();
        StringBuilder sbStartingMaterialTable= new StringBuilder();
        try{
            if(validateString(strObjectId)){
                //Modified by DSM(Sogeti) based on Review Comments Start
                Map mpArgs = new HashMap();
                mpArgs.put("objectId", strObjectId);
                String[] strArgsDSO= JPO.packArgs(mpArgs);
//				pgDSOMaterialComposition_mxJPO objCP=new pgDSOMaterialComposition_mxJPO(context, strArgsDSO);
//				MapList mlStartingMaterialsObjects=(MapList)objCP.getAllRelatedStartingMaterials(context, strArgsDSO);
//Added for PDF Refactor
                MapList mlStartingMaterialsObjects= (MapList)pgPDFViewHelper.executeMainClassMethod(context, "pgDSOMaterialComposition", "getAllRelatedStartingMaterials", strArgsDSO);
                //Modified by DSM(Sogeti) based on Review Comments End

                if(mlStartingMaterialsObjects != null && mlStartingMaterialsObjects.size()>0 ){
                    String strName = null;
                    String strRev = null;
                    String strType = null;
                    String strId = null;
                    String strTitle = null;
                    String strState = null;
                    String strValue = null;
                    String strPolicy = DomainConstants.EMPTY_STRING;;
                    //Modified by DSM-2015x.4 for PDF Views(Req Id-11998 ) - Starts
                    String strStage = null;
                    //Modified by DSM-2015x.4 for PDF Views(Req Id-11998 ) - Ends
                    //Modified by DSM(Sogeti) based on Review Comments
                    Map mapObjDetails = null;
                    Map mapObject = null;
                    DomainObject doObj = null;
                    StringList objectSelects = new StringList();
                    objectSelects.add(DomainConstants.SELECT_NAME);
                    objectSelects.add(DomainConstants.SELECT_REVISION);
                    objectSelects.add(DomainConstants.SELECT_TYPE);
                    objectSelects.add(pgV3Constants.SELECT_ATTRIBUTE_TITLE);
                    //Modified by DSM(Sogeti) - 2015x.5.1 fix for PDF Views defects 17427 - Starts
                    objectSelects.add(pgV3Constants.SELECT_ATTRIBUTE_STAGE);
                    //Modified by DSM(Sogeti) - 2015x.5.1 fix for PDF Views defects 17427 - Ends
                    //Modified by DSM-2015x.2 for PDF Views (Defect #9183) - Starts
                    //objectSelects.add(pgV3Constants.SELECT_ATTRIBUTE_PGLIFECYCLESTATUS);
                    objectSelects.add(DomainConstants.SELECT_CURRENT);
                    objectSelects.add(DomainConstants.SELECT_POLICY);
                    //Modified by DSM-2015x.2 for PDF Views (Defect #9183) - Ends
                    sbStartingMaterialTable.append("<tr><td><table class=\"pdf\" cellspacing=\"0\" width=\"1000px\" id=\"pgFinishedProductTable\">");
                    sbStartingMaterialTable.append("<thead>");
                    sbStartingMaterialTable.append("<tr><td colspan='6' class=\"new\" ><font size='4'><b>Starting Materials</b></font></td></tr>");
                    sbStartingMaterialTable.append("<tr>");
                    sbStartingMaterialTable.append("<td width=\"200\" align=\"center\"><b>Name</b></td>");
                    // Modified by DSM(Sogeti) for 2018x.5 PDF Views : Starts
                    if(!("gendoc".equalsIgnoreCase(pdfViewType.trim()))){
                        sbStartingMaterialTable.append("<td width=\"200\" align=\"center\"><b>Revision</b></td>");
                    }
                    // Modified by DSM(Sogeti) for 2018x.5 PDF Views : Ends
                    //Modified by DSM-2015x.4 for PDF Views(Req Id-11998 ) - Starts
                    sbStartingMaterialTable.append("<td width=\"200\" align=\"center\"><b>Type</b></td>");
                    sbStartingMaterialTable.append("<td width=\"200\" align=\"center\"><b>Phase</b></td>");
                    //Modified by DSM-2015x.4 for PDF Views(Req Id-11998 ) - Ends
                    sbStartingMaterialTable.append("<td width=\"200\" align=\"center\"><b>Title</b></td>");
                    sbStartingMaterialTable.append("<td width=\"200\" align=\"center\"><b>State</b></td>");
                    sbStartingMaterialTable.append("</tr>");
                    sbStartingMaterialTable.append("</thead>");

                    for (int i = 0;i< mlStartingMaterialsObjects.size(); i++){
                        //Modified by DSM(Sogeti) based on Review Comments
                        mapObject = new HashMap();
                        mapObject = (Map) mlStartingMaterialsObjects.get(i);
                        strId = (String)mapObject.get(DomainConstants.SELECT_ID);
                        if(UIUtil.isNotNullAndNotEmpty(strId)){
                            doObj = DomainObject.newInstance(context,strId);
                            //Modified by DSM(Sogeti) based on Review Comments
                            mapObjDetails = new HashMap();
                            mapObjDetails = (Map) doObj.getInfo(context, objectSelects);
                            strName = (String) mapObjDetails.get(DomainConstants.SELECT_NAME);
                            strRev = (String) mapObjDetails.get(DomainConstants.SELECT_REVISION);
                            strType = (String) mapObjDetails.get(DomainConstants.SELECT_TYPE);
                            strTitle = (String) mapObjDetails.get(pgV3Constants.SELECT_ATTRIBUTE_TITLE);
                            //Modified by DSM-2015x.4 for PDF Views(Req Id-11998 ) - Starts
                            //Modified for 2018x Upgrade - Stage attribute is replaced by Release Phase attribute in 18x OOTB.
                            strStage = (String) mapObjDetails.get(pgV3Constants.SELECT_ATTRIBUTE_RELEASE_PHASE);
                            //Modified by DSM-2015x.4 for PDF Views(Req Id-11998 ) - Ends
                            //Modified by DSM-2015x.2 for PDF Views (Defect #9183) - Starts
                            //strState = (String) mapObjDetails.get(pgV3Constants.SELECT_ATTRIBUTE_PGLIFECYCLESTATUS);
                            strState = (String) mapObjDetails.get(DomainConstants.SELECT_CURRENT);
                            strPolicy = (String) mapObjDetails.get(DomainConstants.SELECT_POLICY);
                            strState = EnoviaResourceBundle.getStateI18NString(context, strPolicy, strState,context.getLocale().getLanguage());
                            //Modified by DSM-2015x.2 for PDF Views (Defect #9183) - Ends
                            strValue = UINavigatorUtil.getAdminI18NString("Type", strType, context.getSession().getLanguage());
                            sbStartingMaterialTable.append("<tr>");
                            sbStartingMaterialTable.append("<td align=\"center\" width=\"200\">"+validateString1(strName)+"</td>");
                            // Modified by DSM(Sogeti) for 2018x.5 PDF Views : Starts
                            if(!("gendoc".equalsIgnoreCase(pdfViewType.trim()))){
                                sbStartingMaterialTable.append("<td align=\"center\" width=\"200\">"+validateString1(strRev)+"</td>");
                            }
                            // Modified by DSM(Sogeti) for 2018x.5 PDF Views : Ends
                            //Modified by DSM-2015x.4 for PDF Views(Req Id-11998 ) - Starts
                            sbStartingMaterialTable.append("<td align=\"center\" width=\"200\">"+validateString1(strValue)+"</td>");
                            sbStartingMaterialTable.append("<td align=\"center\" width=\"200\">"+validateString1(strStage)+"</td>");
                            //Modified by DSM-2015x.4 for PDF Views(Req Id-11998 ) - Ends
                            sbStartingMaterialTable.append("<td align=\"center\" width=\"200\">"+validateString1(strTitle)+"</td>");
                            sbStartingMaterialTable.append("<td align=\"center\" width=\"200\">"+validateString1(strState)+"</td>");
                            sbStartingMaterialTable.append("</tr>");
                        }
                    }
                    sbStartingMaterialTable.append("</table><tr><td><br /></td></tr></td></tr>");
                }
                //Modify Code Refactoring
                mlStartingMaterialsObjects.clear();
            }
        }catch(Exception ex) {
            ex.printStackTrace();
        }
        long endTime = new Date().getTime();
        System.out.println("Total Time has taken by the  getStartingMaterialsTable Method is-->"+(endTime-startTime));
        return sbStartingMaterialTable;
    }

    /**
     * @Desc Method to Generate Alternate Table
     * @param Context
     *            the eMatrix <code>Context</code> object
     * @param String
     *            objectid holds the context object
     * @returns StringBuilder contains Alternate Table
     * @throws Exception
     *             if the operation fails
     */
    public StringBuilder getPrimaryAlternate(Context context, String strObjId, String pdfViewType){
        long startTime = new Date().getTime();
        StringBuilder sbAlternatesTable = new StringBuilder();
        try{
            DomainObject domObject = DomainObject.newInstance(context, strObjId);
            String sObjType = domObject.getInfo(context,DomainConstants.SELECT_TYPE);
            MapList mlPrimariesAlt = EnoviaTableUtils.getAlternate(context, strObjId);
            if(mlPrimariesAlt != null && !mlPrimariesAlt.isEmpty()){
                sbAlternatesTable.append("<tr><td><table class=\"pdf\" cellspacing=\"0\" width=\"1000px\" id=\"pgFinishedProductTable\">");
                sbAlternatesTable.append("<thead>");
                // Added by DSM-2018x.6 for PDF Views Req_36210 Start
                if((pgV3Constants.TYPE_PACKAGINGMATERIALPART.equals(sObjType))
                        || pgV3Constants.TYPE_PACKAGINGASSEMBLYPART.equals(sObjType)
                        || pgV3Constants.TYPE_FABRICATEDPART.equals(sObjType)
                        || pgV3Constants.TYPE_PGANCILLARYPACKAGINGMATERIALPART.equals(sObjType) ) {
                    sbAlternatesTable.append("<tr><td colspan='5' class=\"new\" ><font size='4'><b>Alternate Parts</b></font></td></tr>");
                }else {
                    sbAlternatesTable.append("<tr><td colspan='6' class=\"new\" ><font size='4'><b>Alternate Parts</b></font></td></tr>");
                }
                // Added by DSM-2018x.6 for PDF Views Req_36210 Start
                sbAlternatesTable.append("<tr>");
                sbAlternatesTable.append("<td width=\"200px\" align=\"left\"><b>Name</b></td>");
                // Modified by DSM(Sogeti) for 2018x.5 PDF Views : Starts
                if(!(pgPDFViewConstants.CONS_GENDOC.equalsIgnoreCase(pdfViewType.trim()))){
                    sbAlternatesTable.append("<td width=\"200px\" align=\"left\"><b>Rev</b></td>");
                }
                // Modified by DSM(Sogeti) for 2018x.5 PDF Views : Ends
                sbAlternatesTable.append("<td width=\"200px\" align=\"left\"><b>Type</b></td>");
                sbAlternatesTable.append("<td width=\"200px\" align=\"left\"><b>Description</b></td>");
                sbAlternatesTable.append("<td width=\"200px\" align=\"left\"><b>State</b></td>");
                if(pgV3Constants.TYPE_RAWMATERIALPART.equals(sObjType)) {
                    sbAlternatesTable.append("<td width=\"200px\" align=\"left\"><b>Certifications</b></td>");
                }
                sbAlternatesTable.append("</tr>");
                sbAlternatesTable.append("</thead>");
                int inMapAlternates = mlPrimariesAlt.size();
                Map<String,String> mpConnectedAlternates;
                String strPartType;
                String strValue;
                String strPartCurrent;
                String strPartPolicy;
                for (int i = 0; i <inMapAlternates; i++){
                    mpConnectedAlternates = (Map) mlPrimariesAlt.get(i);
                    strPartType = mpConnectedAlternates.get("Type");
                    strValue = UINavigatorUtil.getAdminI18NString("Type", strPartType, context.getSession().getLanguage());
                    strPartCurrent = mpConnectedAlternates.get("State");
                    strPartPolicy = mpConnectedAlternates.get("Policy");
                    strPartCurrent = EnoviaResourceBundle.getStateI18NString(context, strPartPolicy, strPartCurrent,context.getLocale().getLanguage());
                    // Added by DSM-2018x.6 for PDF Views Req_36210 Start
                    if((pgV3Constants.TYPE_PACKAGINGMATERIALPART.equals(sObjType))
                            || pgV3Constants.TYPE_PACKAGINGASSEMBLYPART.equals(sObjType)
                            || pgV3Constants.TYPE_FABRICATEDPART.equals(sObjType)
                            || pgV3Constants.TYPE_PGANCILLARYPACKAGINGMATERIALPART.equals(sObjType) || pgV3Constants.TYPE_RAWMATERIALPART.equals(sObjType)) {
                        sbAlternatesTable.append("<tr>");
                        sbAlternatesTable.append("<td align=\"left\" width=\"200px\">"+validateString1(mpConnectedAlternates.get("Name"))+"</td>");
                        // Modified by DSM(Sogeti) for 2018x.5 PDF Views : Starts
                        if(!(pgPDFViewConstants.CONS_GENDOC.equalsIgnoreCase(pdfViewType.trim()))){
                            sbAlternatesTable.append("<td align=\"left\" width=\"200px\">"+validateString1(mpConnectedAlternates.get("Revision"))+"</td>");
                        }
                        // Modified by DSM(Sogeti) for 2018x.5 PDF Views : Ends
                        sbAlternatesTable.append("<td align=\"left\" width=\"200px\">"+validateString1(strValue)+"</td>");
                        sbAlternatesTable.append("<td align=\"left\" width=\"200px\">"+checkLessThanGreaterThan(validateString1(mpConnectedAlternates.get("Description")))+"</td>");
                        sbAlternatesTable.append("<td align=\"left\" width=\"200px\">"+validateString1(strPartCurrent)+"</td>");
                        if(pgV3Constants.TYPE_RAWMATERIALPART.equals(sObjType)) {
                            sbAlternatesTable.append("<td align=\"left\" width=\"200px\">"+validateString1(mpConnectedAlternates.get("Certifications"))+"</td>");
                        }
                        sbAlternatesTable.append("</tr>");
                    }
                    // Added by DSM-2018x.6 for PDF Views Req_36210 Start
                }
                sbAlternatesTable.append("</table><tr><td><br /></td></tr></td></tr>");
            }
            mlPrimariesAlt.clear();
        }catch(Exception exception){
            exception.printStackTrace();
        }
        long endTime = new Date().getTime();
        System.out.println("Total Time has taken by the getPrimaryAlternate Method is-->"+(endTime-startTime));
        return sbAlternatesTable;
    }

    /**
     * @Desc Method to Generate Materials Produced
     * @param Context
     *            the eMatrix <code>Context</code> object
     * @param String
     *            ObjectId holds context Object
     * @return StringBuilder which contains the Table
     * @throws Exception
     *             if the operation fails
     */
    public StringBuilder getRelatedDefineMaterials(Context context, String strObjId, String pdfViewType) {
        long startTime = new Date().getTime();
        StringBuilder sbMaterialsProducedTable = new StringBuilder();
        try{
            if(validateString(strObjId)){
                MapList mlMaterialsProduced = EnoviaTableUtils.getMaterialProduced(context, strObjId);
                if(mlMaterialsProduced != null && !mlMaterialsProduced.isEmpty()){
                    sbMaterialsProducedTable.append("<tr><td><table class=\"WordWrappdf\" cellspacing=\"0\" width=\"1000px\" id=\"pgFinishedProductTable\">");
                    sbMaterialsProducedTable.append("<thead>");
                    if(!(pgPDFViewConstants.CONS_GENDOC.equalsIgnoreCase(pdfViewType.trim()))){
                        sbMaterialsProducedTable.append("<tr><td colspan='7' class=\"new\" ><font size='4'><b>Materials Produced</b></font></td></tr>");
                    } else {
                        sbMaterialsProducedTable.append("<tr><td colspan='6' class=\"new\" ><font size='4'><b>Materials Produced</b></font></td></tr>");
                    }
                    sbMaterialsProducedTable.append("<tr>");
                    sbMaterialsProducedTable.append("<td width=\"75\" align=\"center\"><b>Name</b></td>");
                    if(!(pgPDFViewConstants.CONS_GENDOC.equalsIgnoreCase(pdfViewType.trim()))){
                        sbMaterialsProducedTable.append("<td width=\"75\" align=\"center\"><b>Revision</b></td>");
                    }
                    sbMaterialsProducedTable.append("<td width=\"75\" align=\"center\"><b>Type</b></td>");
                    sbMaterialsProducedTable.append("<td width=\"75\" align=\"center\"><b>Description</b></td>");
                    sbMaterialsProducedTable.append("<td width=\"75\" align=\"center\"><b>Phase</b></td>");
                    sbMaterialsProducedTable.append("<td width=\"75\" align=\"center\"><b>Title</b></td>");
                    sbMaterialsProducedTable.append("<td width=\"75\" align=\"center\"><b>State</b></td>");
                    sbMaterialsProducedTable.append("</tr>");
                    sbMaterialsProducedTable.append("</thead>");
                    int iSize = mlMaterialsProduced.size();
                    Map mpMaterialsProduced;
                    String strType ;
                    String strValue ;
                    for (int i = 0; i <iSize; i++){
                        mpMaterialsProduced = (Map) mlMaterialsProduced.get(i);
                        strType = (String) mpMaterialsProduced.get("Type");
                        strValue = UINavigatorUtil.getAdminI18NString("Type", strType, context.getSession().getLanguage());
                        sbMaterialsProducedTable.append("<tr>");
                        sbMaterialsProducedTable.append("<td align=\"center\" width=\"75\">"+validateString1(mpMaterialsProduced.get("Name"))+"</td>");
                        if(!(pgPDFViewConstants.CONS_GENDOC.equalsIgnoreCase(pdfViewType.trim()))){
                            sbMaterialsProducedTable.append("<td align=\"center\" width=\"75\">"+validateString1(mpMaterialsProduced.get("Revision"))+"</td>");
                        }
                        sbMaterialsProducedTable.append("<td align=\"center\" width=\"75\">"+validateString1(strValue)+"</td>");
                        sbMaterialsProducedTable.append("<td align=\"center\" width=\"75\">"+checkLessThanGreaterThan(validateString1(mpMaterialsProduced.get("Description")))+"</td>");
                        sbMaterialsProducedTable.append("<td align=\"center\" width=\"75\">"+validateString1(mpMaterialsProduced.get("Stage"))+"</td>");
                        sbMaterialsProducedTable.append("<td align=\"center\" width=\"75\">"+validateString1(mpMaterialsProduced.get("Title"))+"</td>");
                        sbMaterialsProducedTable.append("<td align=\"center\" width=\"75\">"+validateString1(mpMaterialsProduced.get("State"))+"</td>");
                        sbMaterialsProducedTable.append("</tr>");
                    }
                    sbMaterialsProducedTable.append("</table><tr><td><br /></td></tr></td></tr>");
                    mlMaterialsProduced.clear();
                }
            }
        }catch(Exception e){
            logger.log(Level.WARNING, null, e);
        }
        long endTime = new Date().getTime();
        System.out.println("Total Time has taken by the  getRelatedDefineMaterials Method is-->"+(endTime-startTime));
        return sbMaterialsProducedTable;
    }
    /**
     * This public method will be executed to generate BOM Table header
     * returns String contains table
     * @throws Exception
     *             if the operation fails
     */
    //Modified by DSM(Sogeti)-2015x.4 for PDF Views (Req - 5691) - Starts
    //Added Extra parameter in method by DSM ( Sogeti) for 2018x.5 PDF Defect - 33102
    //Modified by DSM Sogeti for 2018x.6 Apr CW 2022 for PDF Views (Req -41367)
    public String getBillofMaterialTableHeader(Context context, MapList mlMain,String pdfViewType,String sActualParentId, String sActualType, String strSAPType)throws Exception {
        long startTime = new Date().getTime();
        //Modified by DSM(Sogeti) based on Review Comments Start
        Map mObject= null;
        String strParentType = null;
        String strTU = null;
        if(null != mlMain && mlMain.size()>0){
            mObject = (Map)mlMain.get(0);
            strTU = (String)mObject.get("TUName");
            strParentType = (String)mObject.get("ParentType");
        }
        //Modified by DSM(Sogeti)-2015x.4 for PDF Views (Req - 5691) - Ends
        StringBuilder sbBOMSubstituteSAPBuffer = new StringBuilder();
        //Modified by DSM(Sogeti)-2018x.5 for PDF Views Defect #35021 - Starts
        //Modified by DSM(Sogeti)-2018x.3 for PDF Views (Req - 32593) - Starts
        sbBOMSubstituteSAPBuffer.append("<TH  align=\"center\" width=\"100\"><B>Name(N)<BR></BR> Rev (R) </B></TH>");
        //Modified by DSM(Sogeti)-2018x.3 for PDF Views (Req - 32593) - Ends
        //Modified by DSM(Sogeti)-2015x.4 for PDF Views (Defect - 12926) - Starts
        if(UIUtil.isNotNullAndNotEmpty(strTU))
            sbBOMSubstituteSAPBuffer.append("<TH align=\"center\" width=\"700\"><B>TUP Name</B></TH>");
        //Modified by DSM(Sogeti)-2018x.5 for PDF Views Defect #35021 - Ends
        //Modified by DSM(Sogeti)-2015x.4 for PDF Views (Defect - 12926) - Ends
        //Modified by DSM Sogeti for 2022x.02 May CW for PDF Views (Req -46172) - Starts	
        if(pgV3Constants.PDFVIEW_ALLINFO.equalsIgnoreCase(pdfViewType) && (!("MCUP".equalsIgnoreCase(strParentType) || "MCOP".equalsIgnoreCase(strParentType) || "MIP".equalsIgnoreCase(strParentType)))){
        	sbBOMSubstituteSAPBuffer.append("<TH align=\"center\" width=\"45\"><B>Chg</B> <BR></BR><B>(C)</B><BR></BR><B>F/N(</B><BR></BR><B>F)</B></TH>");
        }else {        	
            	sbBOMSubstituteSAPBuffer.append("<TH align=\"center\" width=\"45\"><B>Chg</B></TH>");
    			sbBOMSubstituteSAPBuffer.append("<TH  align=\"center\" width=\"35\"><B>F/N</B></TH>");
        }        
        //Modified by DSM Sogeti for 2022x.02 May CW for PDF Views (Req -46172) - Ends
        sbBOMSubstituteSAPBuffer.append("<TH align=\"center\"  width=\"130\"><B>Title</B></TH>");
        sbBOMSubstituteSAPBuffer.append("<TH align=\"center\" width=\"90\"><B>Type</B></TH>");
        //Modified by DSM(Sogeti)-2018x.5 for PDF Views Requirement TUP Template - Starts
        //Modified by DSM(Sogeti)-2018x.5 for PDF Views Requirement  - Starts
        sbBOMSubstituteSAPBuffer.append("<TH align=\"center\" width=\"65\"><B>Substitute Parts(SP)</B> <BR></BR><B> Alternate (Alt)</B> </TH>");
        //Modified by DSM(Sogeti)-2018x.5 for PDF Views Requirement  - Ends
        //Modified by DSM(Sogeti)-2018x.5 for PDF Views Requirement TUP Template - Ends
        sbBOMSubstituteSAPBuffer.append("<TH align=\"center\" width=\"35\"><B>Qty</B></TH>");
        sbBOMSubstituteSAPBuffer.append("<TH align=\"center\" width=\"100\"><B>Base Unit of Measure</B></TH>");
        //Added by DSM Sogeti for 2018x.6 Apr CW 2022 for PDF Views (Req -41367) - Starts
        //Added by DSM Sogeti 2018x.6 Apr CW 2022 for PDF Views (Defect - 47501) - Start
        if(!pgPDFViewConstants.CONS_HALB.equals(strSAPType) && pgV3Constants.PDFVIEW_ALLINFO.equalsIgnoreCase(pdfViewType) && UIUtil.isNullOrEmpty(strTU) && !pgV3Constants.TYPE_PGTRANSPORTUNITPART.equals(sActualType)) {
            //Added by DSM Sogeti 2018x.6 Apr CW 2022 for PDF Views (Defect - 47501) - End
            sbBOMSubstituteSAPBuffer.append("<TH align=\"center\" width=\"100\"><B>NSPCG</B></TH>");
        }
        //Added by DSM Sogeti for 2018x.6 Apr CW 2022 for PDF Views (Req -41367) - Ends
        sbBOMSubstituteSAPBuffer.append("<TH align=\"center\" width=\"180\"><B>EBOM Comments</B></TH>");

        //Modified by DSM(Sogeti)-2015x.5.1 for PDF Views (Req - 5691) - Starts
        //Modified by DSM(Sogeti)-2015x.5.1 for PDF Views (Def - 17089) - Starts
        //Modified by DSM(Sogeti)-2018x.5 for PDF Views Requirement  - Starts
        if(strParentObjType.equals(pgV3Constants.TYPE_FINISHEDPRODUCTPART)|| pgV3Constants.TYPE_PGTRANSPORTUNITPART.equals(sActualType)) {
            //Modified by DSM(Sogeti)-2018x.3 for PDF Views (Req - 32593) - Starts
            sbBOMSubstituteSAPBuffer.append("<TH align=\"center\" width=\"75\"><B>Release Date</B></TH>");
            //Modified by DSM(Sogeti)-2018x.3 for PDF Views (Req - 32593) - Ends
        }
        //Modified by DSM(Sogeti)-2018x.5 for PDF Views Requirement  - Ends
        //Modified by DSM(Sogeti)-2015x.5.1 for PDF Views (Def - 17089) - Ends
        //Modified by DSM(Sogeti)-2015x.5.1 for PDF Views (Req - 5691) - Ends

        //Modified by DSM 2018x.5 for PDF Views Requirement TUP Template - Starts
        //Modified by DSM 2018x.5 for PDF Views Defect 32590 - Starts
        if(sActualType.equals(pgV3Constants.TYPE_PGTRANSPORTUNITPART) || sActualType.equals(pgV3Constants.TYPE_FINISHEDPRODUCTPART) ) {
            sbBOMSubstituteSAPBuffer.append("<TH align=\"center\" width=\"75\"><B>Phase  (Pha)</B><BR></BR> <B>State (St)</B></TH>");
        }
        //Modified by DSM(Sogeti)-2018x.5 for PDF Views Requirement TUP Template - Ends
        else {
            sbBOMSubstituteSAPBuffer.append("<TH align=\"center\" width=\"75\"><B>State</B></TH>");
            sbBOMSubstituteSAPBuffer.append("<TH align=\"center\" width=\"75\"><B>Phase</B></TH>");
        }
        //Modified by DSM(Sogeti)-2015x.4 for PDF Views (Req - 5691) - Starts
        //Modified by DSM(Sogeti)-2018x.1.1 for PDF Views (Defect - 26849) - Starts
        //Modified by DSM(Sogeti)-2018x.5 for PDF Views Requirement TUP Template - Starts
        //Modified by DSM 2018x.5 for PDF Views Defect 32590 - Starts
        if(sActualType.equals(pgV3Constants.TYPE_PGTRANSPORTUNITPART) || sActualType.equals(pgV3Constants.TYPE_FINISHEDPRODUCTPART)){
            sbBOMSubstituteSAPBuffer.append("<TH align=\"center\" width=\"95\"><B>Ref Des(RD)</B><BR></BR><B>On-Shelf</B><BR></BR><B>Product</B><BR></BR><B>Density(OSPD)</B></TH>");
            sbBOMSubstituteSAPBuffer.append("<TH align=\"center\" width=\"95\"><B>Density Unit Of</B><BR></BR><B>Measure(DUoM)</B> <BR></BR><B>Optional</B><BR></BR><B>Components(OC)</B> </TH>");
        }
        else if(pgV3Constants.TYPE_PGMASTERCONSUMERUNITPART.equals(strParentType)||pgV3Constants.TYPE_PGMASTERINNERPACKUNITPART.equals(strParentType) || (pgV3Constants.TYPE_PGMASTERCUSTOMERUNITPART.equals(strParentType))|| (!("MAIN".equalsIgnoreCase(strParentType)))){
            //Modified by DSM(Sogeti)-2018x.1.1 for PDF Views (Defect - 26849) - Ends
            sbBOMSubstituteSAPBuffer.append("<TH align=\"center\" width=\"80\"><B>Ref Des</B></TH>");
        }
        else{
            sbBOMSubstituteSAPBuffer.append("<TH align=\"center\" width=\"70\"><B>Ref Des(RD)<BR></BR>Optional Components(OC)</B></TH>");
        }
        //Modified by DSM(Sogeti)-2018x.5 for PDF Views Requirement TUP Template - Ends
        //Modified by DSM(Sogeti)-2015x.4 for PDF Views (Req - 5691) - Ends
        //Added by DSM Sogeti for 2022x.02 May CW for PDF Views (Req -46172) - Starts
        if(!("MCUP".equalsIgnoreCase(strParentType) || "MCOP".equalsIgnoreCase(strParentType) || "MIP".equalsIgnoreCase(strParentType)) && (pgV3Constants.PDFVIEW_ALLINFO.equalsIgnoreCase(pdfViewType)))
        {
            sbBOMSubstituteSAPBuffer.append("<TH align=\"center\" width=\"95\"><B>Relationship Restriction(RR)</B><BR></BR><B>Relationship Restriction</B><BR></BR><B>Comment(RRC)</B></TH>");
        }	
       	//Added by DSM Sogeti for 2022x.02 May CW for PDF Views (Req -46172) - Ends
        long endTime = new Date().getTime();
        System.out.println("Total Time has taken by the getBillofMaterialTableHeader Method is-->"+(endTime-startTime));
        return sbBOMSubstituteSAPBuffer.toString();
        //Modified by DSM(Sogeti) based on Review Comments End
    }
    /**
     * This public method will be executed to generate Substitute Table header
     * @param boolean bGenDoc
     * returns String contains table
     * @throws Exception
     *             if the operation fails
     */
    //Modified by DSM(Sogeti)-2015x.4 for PDF Views (Req - 5706) - Starts
    public String getBOMSubstitueTableHeader(Context context, MapList mlMain,String pdfViewType, String sActualParentId)throws Exception {
        long startTime = new Date().getTime();
        //Modified by DSM(Sogeti) based on Review Comments Start
        Map mObject= null;
        String strParentType = null;
        if(null != mlMain && mlMain.size()>0){
            mObject = (Map)mlMain.get(0);
            strParentType = (String)mObject.get("ParentType");
        }
        String sActualType = null;
        DomainObject doObjActual = DomainObject.newInstance(context, sActualParentId);
        sActualType = doObjActual.getInfo(context,DomainConstants.SELECT_TYPE);
        //Modified by DSM(Sogeti)-2015x.4 for PDF Views (Req - 5706) - Ends
        StringBuilder sbBOMSubstituteSAPBuffer = new StringBuilder();
        //Modified by DSM 2018x.5 for PDF Views Requirement - Starts
        //Modified by DSM(Sogeti)-2018x.5 for PDF Views Defect #35021 - Starts
        if("GenDoc".equalsIgnoreCase(pdfViewType)&&(pgV3Constants.TYPE_PGTRANSPORTUNITPART.equals(sActualType)|| pgV3Constants.TYPE_FINISHEDPRODUCTPART.equals(sActualType)))
        {
            sbBOMSubstituteSAPBuffer.append("<TR align='center'><TH align ='left' width=\"45\"><B>Substitute<br />Parts</B></TH>");
        }
        else{
            sbBOMSubstituteSAPBuffer.append("<TR align='center'><TH align ='left' width=\"45\"><B>Substitute<br />Parts(SP)<br />Rev(R)</B></TH>");
        }
        //Modified by DSM(Sogeti)-2018x.5 for PDF Views Defect #35021 - Ends
        //Modified by DSM 2018x.5 for PDF Views Requirement - Start
        //Modified by DSM(Sogeti)-2015x.4 for PDF Views (Req - 14672,14674) - Starts
        if(pgV3Constants.TYPE_PGTRANSPORTUNITPART.equals(sActualType)|| pgV3Constants.TYPE_FINISHEDPRODUCTPART.equals(sActualType)) {
            sbBOMSubstituteSAPBuffer.append("<TH align ='left' width=\"60\"><B>Chg</B></TH>");
        }
        //Modified by DSM 2018x.5 for PDF Views Requirement -Ends

        if(( pgV3Constants.TYPE_INTERMEDIATE_PRODUCT_PART.equals(sActualType)) || (("gendoc".equalsIgnoreCase(pdfViewType.trim()) || ("supplier".equalsIgnoreCase(pdfViewType.trim()) )) && ((pgV3Constants.TYPE_PACKAGINGASSEMBLYPART.equals(sActualType))))){
            //Modified by DSM(Sogeti)-2015x.4 for PDF Views (Req - 14672,14674) - Ends
            sbBOMSubstituteSAPBuffer.append("<TH width=\"90\"><B>Title</B></TH>");
        }
        //Modified by DSM(Sogeti)-2018x.1.1 for PDF View defect - 24953 - Starts
        else if(pgV3Constants.TYPE_FINISHEDPRODUCTPART.equals(sActualType)) {
            //Modified by DSM 2018x.5 for PDF Views Requirement - Starts
            sbBOMSubstituteSAPBuffer.append("<TH width=\"60px\"><B>Substitution<br />Combination<br/>Number<br />(SCN)<br />Title</B></TH>");
            //Modified by DSM 2018x.5 for PDF Views Requirement - Ends
        }
        //Modified by DSM(Sogeti)-2018x.1.1 for PDF View defect - 24953 - Ends
        else{
            sbBOMSubstituteSAPBuffer.append("<TH align ='center' width=\"60\"><B>Substitution<br/>Combination<br/>Number<br/>(SCN)<br/>Title</B></TH>");
        }
        if("gendoc".equalsIgnoreCase(pdfViewType.trim()) && pgV3Constants.TYPE_FINISHEDPRODUCTPART.equals(sActualType)){
            //Modified by DSM 2018x.5 for PDF Views Requirement - Starts
            sbBOMSubstituteSAPBuffer.append("<TH align ='left' width=\"140\"><B>Type(T)<br />Specification<br />SubType(SST)</B></TH>");
            //Modified by DSM 2018x.5 for PDF Views Requirement - Ends
        }else{
            sbBOMSubstituteSAPBuffer.append("<TH align ='left' width=\"140\"><B>Type(T)<br />Specification<br />SubType(SST)</B></TH>");
        }
        sbBOMSubstituteSAPBuffer.append("<TH width=\"50\"><B>QTY</B></TH>");
        //Modified by DSM(Sogeti)-2015x.4 for PDF Views (Req - 5706) - Starts
        sbBOMSubstituteSAPBuffer.append("<TH width=\"50\"><B>Base<br />Unit of<br />Measure</B></TH>");
        //Modified by DSM(Sogeti)-2015x.4 for PDF Views (Req - 5706) - Ends
        //Added by DSM Sogeti for 2022x.02 May CW for PDF Views (Req -46172) - Starts      
        if(pgV3Constants.PDFVIEW_ALLINFO.equalsIgnoreCase(pdfViewType) && (!("MCUP".equalsIgnoreCase(strParentType) || "MCOP".equalsIgnoreCase(strParentType) || "MIP".equalsIgnoreCase(strParentType)))){	
        	sbBOMSubstituteSAPBuffer.append("<TH width=\"50\"><B>Valid<br />Start<br />Date<br />(VSD)<br />Valid<br />Until<br />Date(<br />VUD)</B></TH>");
        }else {
        	sbBOMSubstituteSAPBuffer.append("<TH width=\"50\"><B>Valid<br />Start<br />Date</B></TH>");
        	sbBOMSubstituteSAPBuffer.append("<TH width=\"50\"><B>Valid<br />Until<br />Date</B></TH>");
        }
        //Added by DSM Sogeti for 2022x.02 May CW for PDF Views (Req -46172) - Ends        
        //Modified by DSM(Sogeti)-2015x.4 for PDF Views (Req - 5706) - Starts
        //Modified by DSM 2018x.5 for PDF Views Requirement -Starts
        //Modified by DSM(Sogeti)-2018x.1.1 for PDF Views (Defect - 26849) - Starts
        if(pgV3Constants.TYPE_PACKAGINGMATERIALPART.equals(sActualType) || pgV3Constants.TYPE_INTERMEDIATE_PRODUCT_PART.equals(sActualType) || pgV3Constants.TYPE_PGANCILLARYPACKAGINGMATERIALPART.equals(sActualType) || pgV3Constants.TYPE_PGMASTERCUSTOMERUNITPART.equals(sActualType) || pgV3Constants.TYPE_PGMASTERPACKAGINGASSEMBLYPART.equals(sActualType) || pgV3Constants.TYPE_PGMASTERINNERPACKUNITPART.equals(sActualType)|| pgV3Constants.TYPE_PGMASTERCONSUMERUNITPART.equals(sActualType) || (pgV3Constants.TYPE_MASTERPRODUCTPART.equals(sActualType)) || pgV3Constants.TYPE_PGMASTERPACKAGINGMATERIALPART.equals(sActualType) || pgV3Constants.TYPE_PGONLINEPRINTINGPART.equals(sActualType) || (("supplier".equalsIgnoreCase(pdfViewType.trim())) && pgV3Constants.TYPE_PACKAGINGASSEMBLYPART.equals(sActualType))){
            //Modified by DSM(Sogeti)-2018x.1.1 for PDF Views (Defect - 26849) - Ends
            sbBOMSubstituteSAPBuffer.append("<TH width=\"50\"><B>Ref Des (RD)</B></TH>");
            //Modified by DSM 2018x.5 for PDF Views Requirement -Ends
        }
        //Modified by DSM 2018x.5 for PDF Views Requirement - Ends
        //Added by DSM 2018x.5 for PDF Views Requirement -Starts
        else if(pgV3Constants.TYPE_FINISHEDPRODUCTPART.equals(sActualType)|| pgV3Constants.TYPE_PGTRANSPORTUNITPART.equals(sActualType)){
            sbBOMSubstituteSAPBuffer.append("<TH width=\"50\"><B>Ref Des </B></TH>");
        }
        //Added by DSM 2018x.5 for PDF Views Requirement -Ends
        else{
            sbBOMSubstituteSAPBuffer.append("<TH width=\"50\"><B>Ref Des(RD)<br />Optional<br />Components(OC)</B></TH>");
        }
        sbBOMSubstituteSAPBuffer.append("<TH width=\"180\"><B>Comments</B></TH>");


        //Commented by DSM 2018x.5 for PDF Views Requirement - Starts
		/*if(pgV3Constants.TYPE_PGTRANSPORTUNITPART.equals(sActualType) && pdfViewType.equalsIgnoreCase("Gendoc")) {
					sbBOMSubstituteSAPBuffer.append("<TH width=\"180\"><B>Policy</B></TH>");
		}*/
        //Commented by DSM 2018x.5 for PDF Views Requirement - Ends

        //Added by DSM(Sogeti)-2015x.5.1 for PDF Views (Defect ID-5691) - Starts
        //Modified by DSM(Sogeti)-2015x.5.1 for PDF Views (Def - 17089) - Starts
        //Modified by DSM(Sogeti)-2018x.1 for PDF Views (Defect #24958) - Starts
        //if(strParentObjType.equals(pgV3Constants.TYPE_FINISHEDPRODUCTPART) && pdfViewType.equals("allinfo")) {
        //Modified by DSM 2018x.5 for PDF Views Requirement -Starts
        if(UIUtil.isNotNullAndNotEmpty(sActualType) && (pgV3Constants.TYPE_FINISHEDPRODUCTPART).equalsIgnoreCase(sActualType)) {
            //Modified by DSM(Sogeti)-2018x.1 for PDF Views (Defect #24958) - Ends
            //Modified by DSM(Sogeti)-2018x.3 for PDF Views (Requirement #32592) - Starts
            sbBOMSubstituteSAPBuffer.append("<TH align=\"center\" width=\"70\"><B>Release Date</B></TH>");
            //Modified by DSM 2018x.5 for PDF Views Requirement -Ends
            //Modified by DSM(Sogeti)-2018x.3 for PDF Views (Requirement #32592) - Ends
        } //Modified by DSM(Sogeti)-2015x.5.1 for PDF Views (Def - 17089) - Ends
        //Added by DSM(Sogeti)-2015x.5.1 for PDF Views (Defect ID-5691) - Ends\
        //Added by DSM Sogeti for 2022x.02 May CW for PDF Views (Req -46172) - Starts
        if(!("MCUP".equalsIgnoreCase(strParentType) || "MCOP".equalsIgnoreCase(strParentType) || "MIP".equalsIgnoreCase(strParentType)) && pgV3Constants.PDFVIEW_ALLINFO.equalsIgnoreCase(pdfViewType)){
        		sbBOMSubstituteSAPBuffer.append("<TH align=\"center\" width=\"95\"><B>Relationship Restriction(RR)</B><BR></BR><B>Relationship Restriction</B><BR></BR><B>Comment(RRC)</B></TH>");	
        }	
        //Added by DSM Sogeti for 2022x.02 May CW for PDF Views (Req -46172) - Ends
        
        //Modified by DSM 2018x.5 for PDF Views Requirement - Starts
        if("GenDoc".equalsIgnoreCase(pdfViewType)&&(pgV3Constants.TYPE_PGTRANSPORTUNITPART.equals(sActualType)|| pgV3Constants.TYPE_FINISHEDPRODUCTPART.equals(sActualType)))
        {
            sbBOMSubstituteSAPBuffer.append("<TH align ='left' width=\"60\"><B>Substitute<br />For</B></TH>");
        }
        else{
            sbBOMSubstituteSAPBuffer.append("<TH align ='left' width=\"60\"><B>Substitute<br />For(SF)<br />Rev(R)</B></TH>");
        }
        //Modified by DSM 2018x.5 for PDF Views Requirement - Ends
        if(pgV3Constants.TYPE_PGTRANSPORTUNITPART.equals(sActualType)|| pgV3Constants.TYPE_FINISHEDPRODUCTPART.equals(sActualType)){
            sbBOMSubstituteSAPBuffer.append("<TH width=\"80\"><B>Type (T)</B>  <BR></BR><B>Title (Ti)</B></TH>");
        }
        else {
            sbBOMSubstituteSAPBuffer.append("<TH width=\"80\"><B>Title</B></TH>");
        }
        //Modified by DSM 2018x.5 for PDF Views Requirement - Starts
        if(pgV3Constants.TYPE_PGTRANSPORTUNITPART.equals(sActualType)|| pgV3Constants.TYPE_FINISHEDPRODUCTPART.equals(sActualType)){
            //Modified by DSM 2018x.5 for PDF Views Requirement - Ends
            sbBOMSubstituteSAPBuffer.append("<TH align ='left' width=\"140\"><B>Specification<br />SubType(SST) <br /> Optional<br />Components(OC)</B></TH>");
        }
        //Modified by DSM 2018x.5 for PDF Views Requirement - Ends
        //Modified by DSM(Sogeti)-2015x.4 for PDF Views (Req - 5706) - Ends
        long endTime = new Date().getTime();
        System.out.println("Total Time has taken by the getBOMSubstitueTableHeader Method is-->"+(endTime-startTime));
        return sbBOMSubstituteSAPBuffer.toString();
        //Modified by DSM(Sogeti) based on Review Comments End
    }
    /**
     * This Provate method will be executed to retrive BOM Relationship Data
     * @param context
     *            the eMatrix <code>Context</code> object
     * @param StringList
     *			slMainEBOM holds the ID's
     * @return MapList mlMain contains the Relationship data
     * @throws Exception
     *             if the operation fails
     */
    private MapList getBOMRelData(Context context,StringList slMainEBOM){
        long startTime = new Date().getTime();
        MapList mlMain = new MapList();
        try{
            String strParentId = null;
            String strRelId = null;
            String strlevel = null;
            //Added by DSM(Sogeti)-2018x.5 for PDF Views Requirements - Starts
            String strIntermediatePartId = DomainConstants.EMPTY_STRING;
            //Added by DSM(Sogeti)-2018x.5 for PDF Views Requirements - Ends
            String strToId = null;
            String strpgChange = null;
            String strFindNumber = null;
            String strRefDesig = null;
            //Modified by DSM(Sogeti)-2015x.4 for PDF Views (Req - 5700) - Starts
            String strOptComponents =null;
            String strParentType = null;
            //Modified by DSM(Sogeti)-2015x.4 for PDF Views (Req - 5700) - Ends
            //Added by DSM Sogeti for 2018x.6 Apr CW 2022 for PDF Views (Req -41367) - Starts
            String strNSPCG = DomainConstants.EMPTY_STRING;
            //Added by DSM Sogeti for 2018x.6 Apr CW 2022 for PDF Views (Req -41367) - Ends
            String strMainData = null;
            MapList mlToId = new MapList();
            Map mData = new HashMap();
            Map mpBom = new HashMap();
            DomainObject dmoBom = null;
            StringList selectStmtsRel = new StringList(4);
            selectStmtsRel.add(DomainRelationship.SELECT_TO_ID );
            selectStmtsRel.add(pgV3Constants.SELECT_ATTRIBUTE_PGCHANGE);
            selectStmtsRel.add(pgV3Constants.SELECT_ATTRIBUTE_FINDNUMBER);
            selectStmtsRel.add(pgV3Constants.SELECT_ATTRIBUTE_REFERENCEDESIGNATOR);
            //Modified by DSM(Sogeti)-2015x.4 for PDF Views (Req - 5700) - Starts
            selectStmtsRel.add(pgV3Constants.SELECT_ATTRIBUTE_PGOPTIONALCOMPONENT);
            //Modified by DSM(Sogeti)-2015x.4 for PDF Views (Req - 5700) - Ends
            //Added by DSM Sogeti for 2018x.6 Apr CW 2022 for PDF Views (Req -41367) - Starts
            selectStmtsRel.add(pgPDFViewConstants.SELECT_ATTRIBUTE_PGNSPCG);
            //Added by DSM Sogeti for 2018x.6 Apr CW 2022 for PDF Views (Req -41367) - Ends
            StringList selectStmt = new StringList(7);
            selectStmt.add(DomainConstants.SELECT_NAME);
            selectStmt.add(DomainConstants.SELECT_TYPE);
            selectStmt.add(DomainConstants.SELECT_ID);
            selectStmt.add(DomainConstants.SELECT_POLICY);
            selectStmt.add(pgV3Constants.SELECT_ATTRIBUTE_TITLE);
            selectStmt.add(DomainConstants.SELECT_CURRENT);
            //Modified for 2018x Upgrade - Stage attribute is replaced by Release Phase attribute in 18x OOTB.
            selectStmt.add(pgV3Constants.SELECT_ATTRIBUTE_RELEASE_PHASE);

            //Added by DSM(Sogeti)-2015x.5.1 for PDF Views (Defect ID-5691) - Starts
            selectStmt.add(DomainConstants.SELECT_REVISION);
            selectStmt.add(pgV3Constants.SELECT_ATTRIBUTE_RELEASE_DATE);
            //Added by DSM(Sogeti)-2015x.5.1 for PDF Views (Defect ID-5691) - Ends
            //Added by DSM 2018x.5 for PDF View Requirement - Starts
            selectStmt.add(pgV3Constants.SELECT_ATTRIBUTE_PGDENSITYUOM);
            selectStmt.add(pgV3Constants.SELECT_ATTRIBUTE_PGONSHELFPRODUCTDENSITY);
            //Added by DSM 2018x.5 for PDF View Requirement - ends
            //Modified by DSM(Sogeti) based on Review Comments
			//Added by DSM(Sogeti) - for 2022x.02 May CW PDF Views Req#46172 - Starts
			selectStmt.add(pgPDFViewConstants.SELECT_ATTRIBUTE_PGRELATIONSHIPRESTRICTION);
            selectStmt.add(pgPDFViewConstants.SELECT_ATTRIBUTE_PGRELATIONSHIPRESTRICTIONCOMMENTS);
			//Added by DSM(Sogeti) - for 2022x.02 May CW PDF Views Req#46172 - Ends
            int islMainEBOMSize = slMainEBOM.size();
            for (int j = 0; j < islMainEBOMSize; j++){
                strMainData = (String)slMainEBOM.get(j);
                StringTokenizer stMainData = new StringTokenizer(strMainData, "|");
                if(stMainData.hasMoreTokens()){
                    strParentId = (String)stMainData.nextToken();
                    strParentType = (String)stMainData.nextToken();
                    strRelId = (String)stMainData.nextToken();
                    strlevel = (String)stMainData.nextToken();
                    //Added by DSM(Sogeti)-2018x.5 for PDF Views Requirements - Starts
                    strIntermediatePartId = (String)stMainData.nextToken();
                    //Added by DSM(Sogeti)-2018x.5 for PDF Views Requirements - Ends
                    String[] relargs = new String[1];
                    relargs[0] = strRelId;
                    mlToId = new MapList();
                    mlToId = (MapList)DomainRelationship.getInfo(context, relargs,selectStmtsRel);
                    if(null != mlToId && mlToId.size()>0){
                        for(int i=0;i<mlToId.size();i++) {
                            mData = (Map)mlToId.get(i);
                            strToId = (String)mData.get(DomainRelationship.SELECT_TO_ID );
                            strpgChange = (String)mData.get(pgV3Constants.SELECT_ATTRIBUTE_PGCHANGE);
                            strFindNumber = (String)mData.get(pgV3Constants.SELECT_ATTRIBUTE_FINDNUMBER);
                            strRefDesig = (String)mData.get(pgV3Constants.SELECT_ATTRIBUTE_REFERENCEDESIGNATOR);
                            //Modified by DSM(Sogeti)-2015x.4 for PDF Views (Req - 5700) - Starts
                            strOptComponents= (String)mData.get(pgV3Constants.SELECT_ATTRIBUTE_PGOPTIONALCOMPONENT);
                            //Modified by DSM(Sogeti)-2015x.4 for PDF Views (Req - 5700) - Ends
                            //Added by DSM Sogeti for 2018x.6 Apr CW 2022 for PDF Views (Req -41367) - Starts
                            strNSPCG = (String)mData.get(pgPDFViewConstants.SELECT_ATTRIBUTE_PGNSPCG);
                            //Added by DSM Sogeti for 2018x.6 Apr CW 2022 for PDF Views (Req -41367) - Ends
                        }
                    }
                    dmoBom = DomainObject.newInstance(context, strToId);
                    mpBom = new HashMap();
                    //Added by DSM 2015x.1 (Sogeti) for defect #7552 - Start
                    ContextUtil.pushContext(context,"User Agent", "", "");
                    mpBom = dmoBom.getInfo(context, selectStmt);
                    ContextUtil.popContext(context);
                    //Added by DSM 2015x.1 (Sogeti) for defect #7552 - End
                    mpBom.put("attribute[pgChange]", strpgChange);
                    mpBom.put("attribute[Find Number]", strFindNumber);
                    mpBom.put("id[connection]", strRelId);
                    mpBom.put(DomainConstants.SELECT_LEVEL, strlevel);
                    mpBom.put("ParentId", strParentId);
                    //Added by DSM(Sogeti)-2018x.5 for PDF Views Requirements - Starts
                    mpBom.put("IntermediatePartId", strIntermediatePartId);
                    //Added by DSM(Sogeti)-2018x.5 for PDF Views Requirements - Ends
                    mpBom.put("RefDesig", strRefDesig);
                    //Modified by DSM(Sogeti)-2015x.4 for PDF Views (Req - 5700) - Starts
                    mpBom.put("ParentType", strParentType);
                    mpBom.put("Type", strOptComponents);
                    mpBom.put("OptComp", strOptComponents);
                    //Modified by DSM(Sogeti)-2015x.4 for PDF Views (Req - 5700) - Ends
                    //Added by DSM Sogeti for 2018x.6 Apr CW 2022 for PDF Views (Req -41367) - Starts
                    mpBom.put(pgPDFViewConstants.SELECT_ATTRIBUTE_PGNSPCG, strNSPCG);
                    //Added by DSM Sogeti for 2018x.6 Apr CW 2022 for PDF Views (Req -41367) - Ends
                    mlMain.add(mpBom);
                    //Added by DSM-2015x.1.2(Sogeti) for defect 7921 - Starts
                    mlMain.addSortKey("attribute[Find Number]", "ascending", "integer");
                    mlMain.sort();
                    //Added by DSM-2015x.1.2(Sogeti) for defect 7921 - Ends
                }
            }
        }catch (Exception e){
            e.printStackTrace();
        }
        long endTime = new Date().getTime();
        System.out.println("Total Time has taken by the getBOMRelData Method is-->"+(endTime-startTime));
        return mlMain;
    }
    /**
     * This Private method will be executed to generate BOM Data
     * @param context
     *            the eMatrix <code>Context</code> object
     * @param MaplList
     *			mlMain holds the relationship data
     * @return String contains the BOM Data
     * @throws Exception
     *             if the operation fails
     */
    //Modified by DSM(Sogeti)-2015x.4 for PDF Views (Req - 5691) - Starts
    //Added Extra parameter in method by DSM ( Sogeti) for 2018x.5 PDF Defect - 33102
    //Modified by DSM Sogeti for 2018x.6 Apr CW 2022 for PDF Views (Req -41367)
    private String getEBOMTablewithData(Context context, MapList mlMain,String sPDFViewType,String sActualParentId, String sActualType, String strSAPType){
        long startTime = new Date().getTime();
        StringBuilder BOMSubstituteSAPBuffer = new StringBuilder();
        try{
            Map mObject= null;
            String strParentType = null;
            if(null != mlMain && mlMain.size()>0){
                mObject = (Map)mlMain.get(0);
                strParentType = (String)mObject.get("ParentType");
            }
            //Modified by DSM(Sogeti)-2015x.4 for PDF Views (Req - 5691) - Ends
            String stridConn = null;
            String strid = null;
            String strLevel = null;
            String stParentId = null;
            String strState = null;
            String strStage = null;
            String strRefDes = null;
            //Modified by DSM(Sogeti)-2015x.4 for PDF Views (Req - 5700) - Starts
            String strOptComp = null;
            //Modified by DSM(Sogeti)-2015x.4 for PDF Views (Req - 5700) - Ends
            //Modified by DSM(Sogeti)-2015x.4 for PDF Views (Defect - 12926) - Starts
            String strTUName = null;
            //Modified by DSM(Sogeti)-2015x.4 for PDF Views (Defect - 12926) - Ends
            String strName = null;
            String strChg = null;
            String strTitle = null;
            String strType1 = null;
            String strValue = null;
            String strSub = null;
            String strFindNumber = null;
            String strQty = null;
            String strBUOM = null;
            String strRefDe = null;
            String strComments = null;
            //Added by DSM Sogeti for 2018x.6 Apr CW 2022 for PDF Views (Req -41367) - Starts
            String strNSPCG = DomainConstants.EMPTY_STRING;
            //Added by DSM Sogeti for 2018x.6 Apr CW 2022 for PDF Views (Req -41367) - Ends
            //Modified by DSM(Sogeti) based on Review Comments Start
            Map mpParamMap=null;
            Map mpBOMBUOM = null;
            Map mpBOMChg = null;
            Map mpObjChg = null;
            Map mpObj = null;
            Map mpBOMSubs=null;
            Map mpParam = null;
            Map mpObjBUOM = null;
            Map mpBOMQty = null;
            Map mpParamQty = null;
            Map mpObjQty = null;
            Map mpSettingsMap = null;
            Map mpColumnMap = null;
            MapList mlObjList = null;
            MapList mlObjListQty = null;
            MapList mlObjListBUOM = null;
            MapList mlObjListChg = null;
            String strCurrentState = null;
            String strPolicy = null;

            //Added by DSM 2018x.5 for PDF View Requirement - Starts
            String strAlternate = null;
            Map mpAlternate = null;
            Map mpBOMAlternate = null;
            MapList mlObjListAlternate = null;
            Map mpObjAlternate =null;
            //Added by DSM 2018x.5 for PDF View Requirement - End
            //Modified by DSM(Sogeti) - for 2015x.5.1 PDF Views Defect# 5691 - Starts
            String strRev = "";
            String strReleaseDate = "";
            //Modified by DSM(Sogeti) - for 2015x.5.1 PDF Views Defect# 5691 - Ends

            //Modified by DSM(Sogeti) - for 2015x.5 PDF Views Defect# 16396 - Starts
            boolean hasReadAccess =  false;
            //Modified by DSM(Sogeti) - for 2015x.5 PDF Views Defect# 16396 - Ends
            //Modified by DSM(Sogeti) based on Review Comments End
            for (Iterator iterator = mlMain.iterator(); iterator.hasNext();){
                Map mapMain = (Map) iterator.next();
                stridConn = (String)mapMain.get("id[connection]");
                //Modified by DSM(Sogeti) - for 2015x.5 PDF Views Defect# 16396 - Starts
                DomainObject domObject = DomainObject.newInstance(context);
                strid = (String)mapMain.get(DomainConstants.SELECT_ID);
                domObject.setId(strid);
                hasReadAccess = domObject.checkAccess(context, (short) AccessConstants.cRead);
                //Modified by DSM(Sogeti) - for 2015x.5 PDF Views Defect# 16396 - Ends
                strLevel = (String)mapMain.get(DomainConstants.SELECT_LEVEL);
                stParentId = (String)mapMain.get("ParentId");
                strState = (String)mapMain.get(DomainConstants.SELECT_CURRENT);
                strPolicy = (String)mapMain.get(DomainConstants.SELECT_POLICY);
                strCurrentState = EnoviaResourceBundle.getStateI18NString(context, strPolicy, strState,context.getLocale().getLanguage());
                //Modified for 2018x Upgrade - Stage attribute is replaced by Release Phase attribute in 18x OOTB.
                strStage = (String)mapMain.get(pgV3Constants.SELECT_ATTRIBUTE_RELEASE_PHASE);
                strRefDes = (String)mapMain.get("RefDesig");
                //Modified by DSM(Sogeti)-2015x.4 for PDF Views (Req - 5700) - Starts
                strOptComp = (String)mapMain.get("OptComp");
                //Modified by DSM(Sogeti)-2015x.4 for PDF Views (Req - 5700) - Ends
                strName = (String)mapMain.get(DomainConstants.SELECT_NAME);
                //Modified by DSM(Sogeti)-2015x.4 for PDF Views (Defect - 12926) - Starts
                strTUName = (String)mapMain.get("TUName");
                //Modified by DSM(Sogeti)-2015x.4 for PDF Views (Defect - 12926) - Ends
                //Modified by DSM(Sogeti)-2015x.5.1 for PDF Views (Defect - 5691) - Starts
                strRev = (String) mapMain.get(DomainConstants.SELECT_REVISION);
                strReleaseDate = pgIPMPDFViewUtil_mxJPO.getFormattedDate((String) mapMain.get(pgV3Constants.SELECT_ATTRIBUTE_RELEASE_DATE));
                //Modified by DSM(Sogeti)-2015x.5.1 for PDF Views (Defect - 5691) - Ends

                //Added by DSM 2018x.5 for PDF View Requirement - Starts
                String strDensityUOM = (String)mapMain.get(pgV3Constants.SELECT_ATTRIBUTE_PGDENSITYUOM);
                String  strProductDensity = (String)mapMain.get(pgV3Constants.SELECT_ATTRIBUTE_PGONSHELFPRODUCTDENSITY);
                //Added by DSM Sogeti for 2018x.6 Apr CW 2022 for PDF Views (Req -41367) - Starts
                strNSPCG = (String)mapMain.get(pgPDFViewConstants.SELECT_ATTRIBUTE_PGNSPCG);
                //Added by DSM Sogeti for 2018x.6 Apr CW 2022 for PDF Views (Req -41367) - Ends
                //Added by DSM 2018x.5 for PDF View Requirement - ends

                BOMSubstituteSAPBuffer.append("<TR align=\"center\" class=\"pdf\">");
                //Modified by DSM(Sogeti)-2018x.5 for PDF Views Defect #35021 - Starts
                //Modified by DSM(Sogeti)-2018x.3 for PDF Views (Req - 32593) - Starts
                BOMSubstituteSAPBuffer.append("<TD width=\"100\"><B> N: </B>"+validateString1(strName)+"<BR></BR><B>R:</B>"+validateString1(strRev)+"</TD>");
                //Modified by DSM(Sogeti)-2018x.3 for PDF Views (Req - 32593) - Ends
                //Modified by DSM(Sogeti)-2015x.4 for PDF Views (Defect - 12926) - Starts
                if(UIUtil.isNotNullAndNotEmpty(strTUName))
                    BOMSubstituteSAPBuffer.append("<TD width=\"700\">"+validateString1(strTUName)+"</TD>");
                //Modified by DSM(Sogeti)-2015x.4 for PDF Views (Defect - 12926) - Ends
                //Modified by DSM(Sogeti)-2018x.5 for PDF Views Defect #35021 - Starts
                mlObjListChg = new MapList();
                mpObjChg = new HashMap();
                mpObjChg.put("id[connection]",stridConn);
                mpObjChg.put(DomainConstants.SELECT_LEVEL,strLevel);
                mpObjChg.put(DomainConstants.SELECT_ID,strid);
                mlObjListChg.add(mpObjChg);
                mpBOMChg=new HashMap();
                mpBOMChg.put("objectList", mlObjListChg);
                //Modified for PNGUPGRADE 2018x PDF nullpointer  OOTB chnage in  getFindNumberSB START
                Map mpParamObjMap = new HashMap();
                mpParamObjMap.put("BOMViewMode","");
                mpParamObjMap.put("selectedTable","");
                mpBOMChg.put("paramList", mpParamObjMap);
                //Modified for PNGUPGRADE 2018x PDF nullpointer  OOTB chnage in  getFindNumberSB END
                String[] argsChg = JPO.packArgs(mpBOMChg);
                //emxPart_mxJPO objemxPartChg = new emxPart_mxJPO(context, argsChg);
                //Vector vEBOMChg = (Vector)objemxPartChg.getChgColumnData(context, argsChg);
                //Added for PDF Refactor
                Vector vEBOMChg = (Vector)pgPDFViewHelper.executeMainClassMethod(context, "emxPart", "getChgColumnData", argsChg);
                //Modified by DSM(Sogeti) - for 2015x.5 PDF Views Defect# 16396 - Starts
                //Modified by DSM(Sogeti) - for 2018x.5 PDF Views Defect# 35488 - Starts
                //if(hasReadAccess)
                //{
                //strChg ="";
                if((vEBOMChg !=null) && (vEBOMChg.size() >0))
                {
                    strChg = (String)vEBOMChg.get(0);
                } else {
                    strChg = DomainConstants.EMPTY_STRING;
                }
                //}else{
                //	strChg = pgV3Constants.NO_ACCESS;
                //}
                //Modified by DSM(Sogeti) - for 2018x.5 PDF Views Defect# 35488 - Starts
                //Modified by DSM(Sogeti) - for 2015x.5 PDF Views Defect# 16396 - Ends
                //Vector vEBOMFindNumber = (Vector)objemxPartChg.getFindNumberSB(context, argsChg);
                //Added for PDF Refactor
                Vector vEBOMFindNumber = (Vector)pgPDFViewHelper.executeMainClassMethod(context, "emxPart", "getFindNumberSB", argsChg);
                if((vEBOMFindNumber !=null) && (vEBOMFindNumber.size() >0))
                    strFindNumber = (String)vEBOMFindNumber.get(0);
              	//Added by DSM Sogeti for 2022x.02 May CW for PDF Views (Req -46172) - Starts
				if(pgV3Constants.PDFVIEW_ALLINFO.equalsIgnoreCase(sPDFViewType) && (!("MCUP".equalsIgnoreCase(strParentType) || "MCOP".equalsIgnoreCase(strParentType) || "MIP".equalsIgnoreCase(strParentType)))){
					BOMSubstituteSAPBuffer.append("<TD width=\"45\"><B> C: </B>"+validateString1(strChg)+"<BR></BR><B>F: </B>"+validateString1(strFindNumber)+"</TD>");
				}else {        	
		        	BOMSubstituteSAPBuffer.append("<TD width=\"45\">"+validateString1(strChg)+"</TD>");
					 BOMSubstituteSAPBuffer.append("<TD width=\"35\">"+validateString1(strFindNumber)+"</TD>");
		        }
				//Added by DSM Sogeti for 2022x.02 May CW for PDF Views (Req -46172) - Ends
                strTitle = (String)mapMain.get(pgV3Constants.SELECT_ATTRIBUTE_TITLE);
                //Added by DSM(Sogeti)-2015x.5 for PDF Views (Defect ID-16705) - Starts
                if(UIUtil.isNullOrEmpty(strTitle)){
                    strTitle = DomainConstants.EMPTY_STRING;
                }
                if(UIUtil.isNullOrEmpty(strRefDes)){
                    strRefDes = DomainConstants.EMPTY_STRING;
                }
                //Added by DSM(Sogeti)-2015x.5 for PDF Views (Defect ID-16705) - Ends
                strTitle =strTitle.replaceAll("[<]","#LESS_THAN");
                strTitle =strTitle.replaceAll("[>]","#GREATER_THAN");
                BOMSubstituteSAPBuffer.append("<TD width=\"120\">"+validateString1(wrapCharTable(strTitle,10))+"</TD>");
                strType1 = (String)mapMain.get(DomainConstants.SELECT_TYPE);
                strValue = UINavigatorUtil.getAdminI18NString("Type", strType1, context.getSession().getLanguage());
                BOMSubstituteSAPBuffer.append("<TD width=\"70\">"+validateString1(wrapCharTable(strValue,10))+"</TD>");
                mpParam = new HashMap();
                mpParam.put("reportFormat","pdf");
                mpParam.put("objectId",stParentId);
                mlObjList = new MapList();
                mpObj = new HashMap();
                mpObj.put("id[connection]",stridConn);
                mpObj.put(DomainConstants.SELECT_ID,strid);
                mpObj.put(DomainConstants.SELECT_LEVEL,strLevel);
                mlObjList.add(mpObj);
                mpBOMSubs = new HashMap();
                mpBOMSubs.put("paramList",mpParam);
                mpBOMSubs.put("objectList", mlObjList);
                String[] argsSubs = JPO.packArgs(mpBOMSubs);
                //emxPart_mxJPO objemxPart = new emxPart_mxJPO(context, argsSubs);
                //Vector vEBOMSub = (Vector)objemxPart.getColumnSubstitutePartsFlagData(context, argsSubs);
                //Added for PDF Refactor
                Vector vEBOMSub = (Vector)pgPDFViewHelper.executeMainClassMethod(context, "emxPart", "getColumnSubstitutePartsFlagData", argsSubs);
                strSub = null;
                if((vEBOMSub !=null) && (vEBOMSub.size() >0))
                    strSub = (String)vEBOMSub.get(0);
                //Modified by DSM(Sogeti)-2018x.5 for PDF Views Requirement  - Starts
                String strSubPartName = DomainConstants.EMPTY_STRING;
                StringList slSubPartNames = getSubstitutePartName(context,mapMain,pgV3Constants.RELATIONSHIP_EBOM);
                if(slSubPartNames != null && slSubPartNames.size()>0)
                {
                    strSubPartName = FrameworkUtil.join(slSubPartNames,",");
                }
                //Modified by DSM(Sogeti)-2018x.5 for PDF Views Requirement  - Ends
                //Modified for Substitute Alernate for PDF View Requirement - Starts
                mpAlternate = new HashMap();
                mpAlternate.put("reportFormat","pdf");
                mpAlternate.put("objectId",sActualParentId);
                mlObjListAlternate = new MapList();
                mpObjAlternate = new HashMap();
                mpObjAlternate.put("id",stParentId);
                mlObjListAlternate.add(mpObjAlternate);
                mpBOMAlternate=new HashMap();
                mpBOMAlternate.put("paramList",mpAlternate);
                mpBOMAlternate.put("objectList", mlObjListAlternate);
                String[] argsAlt = JPO.packArgs(mpBOMAlternate);
                Vector vEBOMAlternate = (Vector)pgPDFViewHelper.executeMainClassMethod(context, "emxPart", "getColumnAlternateData", argsAlt);
                if((vEBOMAlternate !=null) && (vEBOMAlternate.size() >0) )
                    strAlternate = (String)vEBOMAlternate.get(0);
                //Modified for Substitute Alernate for PDF View Requirement - End
                //Added by DSM 2018x.5 for PDF View Requirement - Starts
                //Modified by DSM 2018x.5 for PDF Views Defect 32590 - Starts
                //Modified by DSM(Sogeti)-2018x.5 for PDF Views Requirement  - Starts
                BOMSubstituteSAPBuffer.append("<TD width=\"85\"><B>SP:</B>"+validateString1(strSubPartName)+"<BR></BR><B>Alt:</B>"+validateString1(strAlternate)+"</TD>");
                //Modified by DSM(Sogeti)-2018x.5 for PDF Views Requirement  - Ends
                //Modified by DSM 2018x.5 for PDF Views Defect 32590 - Ends
                //Added by DSM 2018x.5 for PDF View Requirement - Ends
                mpParamQty = new HashMap();
                mpParamQty.put("reportFormat","emxPart:getEBOMsWithRelSelectablesSB");
                mlObjListQty = new MapList();
                mpObjQty = new HashMap();
                mpObjQty.put("id[connection]",stridConn);
                mlObjListQty.add(mpObjQty);
                mpBOMQty = new HashMap();
                mpBOMQty.put("paramList",mpParamQty);
                mpBOMQty.put("objectList", mlObjListQty);
                String[] argsQty = JPO.packArgs(mpBOMQty);
                //emxPart_mxJPO objemxPartQty = new emxPart_mxJPO(context, argsQty);
                //Vector vEBOMQty = (Vector)objemxPartQty.getQuantity(context, argsQty);
                //Added for PDF Refactor
                Vector vEBOMQty = (Vector)pgPDFViewHelper.executeMainClassMethod(context, "emxPart", "getQuantity", argsQty);
                strQty = null;
                if((vEBOMQty !=null) && (vEBOMQty.size() >0))
                    strQty = (String)vEBOMQty.get(0);
                BOMSubstituteSAPBuffer.append("<TD width=\"35\">"+validateString1(strQty)+"</TD>");
                //Modified by DSM(Sogeti) based on Review Comments Start
                mpSettingsMap = new HashMap();
                mpSettingsMap.put("DSOPickListRelationshipName","relationship_pgPDTemplatestopgPLIBUOM");
                mpSettingsMap.put("DSOPickListAttribute","attribute_pgBaseUnitOfMeasure");
                mpColumnMap = new HashMap();
                mpColumnMap.put("settings",mpSettingsMap);
                //Modified by DSM(Sogeti) based on Review Comments End
                mlObjListBUOM = new MapList();
                mpObjBUOM = new HashMap();
                mpObjBUOM.put(DomainConstants.SELECT_ID,strid);
                mlObjListBUOM.add(mpObjBUOM);
                //Modified by DSM(Sogeti) based on Review Comments Start
                mpParamMap=new HashMap();
                mpBOMBUOM=new HashMap();
                mpBOMBUOM.put("columnMap",mpColumnMap);
                mpBOMBUOM.put("objectList", mlObjListBUOM);
                mpBOMBUOM.put("paramList", mpParamMap);
                //Modified by DSM(Sogeti) based on Review Comments End
                String[] argsBUOM = JPO.packArgs(mpBOMBUOM);
                //emxCPNProductData_mxJPO objemxPartBUOM = new emxCPNProductData_mxJPO(context, argsBUOM);
                //Added by DSM 2015x.1 (Sogeti) for defect #7552 - Start
                ContextUtil.pushContext(context,"User Agent", "", "");
                //Vector vEBOMBUOM = (Vector)objemxPartBUOM.getColumnPickListData(context, argsBUOM);
                //Added for PDF Refactor
                Vector vEBOMBUOM = (Vector)pgPDFViewHelper.executeMainClassMethod(context, "emxCPNProductData", "getColumnPickListData", argsBUOM);
                ContextUtil.popContext(context);
                //Added by DSM 2015x.1 (Sogeti) for defect #7552 - End
                strBUOM = null;
                if((vEBOMBUOM !=null) && (vEBOMBUOM.size() >0))
                    strBUOM = (String)vEBOMBUOM.get(0);
                BOMSubstituteSAPBuffer.append("<TD width=\"140\">"+validateString1(strBUOM)+"</TD>");
                //Added by DSM Sogeti for 2018x.6 Apr CW 2022 for PDF Views (Req -41367) - Starts
                //Added by DSM Sogeti 2018x.6 Apr CW 2022 for PDF Views (Defect - 47501) - Start
                if(!pgPDFViewConstants.CONS_HALB.equals(strSAPType) && pgV3Constants.PDFVIEW_ALLINFO.equalsIgnoreCase(sPDFViewType) && UIUtil.isNullOrEmpty(strTUName) && !pgV3Constants.TYPE_PGTRANSPORTUNITPART.equals(sActualType)) {
                    //Added by DSM Sogeti 2018x.6 Apr CW 2022 for PDF Views (Defect - 47501) - End
                    BOMSubstituteSAPBuffer.append("<TD width=\"140\">"+validateString1(strNSPCG)+"</TD>");
                }
                //Added by DSM Sogeti for 2018x.6 Apr CW 2022 for PDF Views (Req -41367) - Ends
                //Added by DSM 2015x.1 (Sogeti) for defect #7552 - Start
                ContextUtil.pushContext(context,"User Agent", "", "");
                //Vector vEBOMComments = (Vector)objemxPartChg.getCommentColumnDataFinishedProductForDSO(context, argsChg);
                //Added for PDF Refactor
                Vector vEBOMComments = (Vector)pgPDFViewHelper.executeMainClassMethod(context, "emxPart", "getCommentColumnDataFinishedProductForDSO", argsChg);
                ContextUtil.popContext(context);
                //Added by DSM 2015x.1 (Sogeti) for defect #7552 - End
                if((vEBOMComments !=null) && (vEBOMComments.size() >0))
                    strComments = (String)vEBOMComments.get(0);
                if(UIUtil.isNotNullAndNotEmpty(strComments)) {
                    strComments =strComments.replaceAll("[<]","#LESS_THAN");
                    strComments =strComments.replaceAll("[>]","#GREATER_THAN");
                }
                //Added by DSM(Sogeti)-2015x.5 for PDF Views (Defect ID-16705) - Starts
                else{
                    strComments = DomainConstants.EMPTY_STRING;
                }
                //Added by DSM(Sogeti)-2015x.5 for PDF Views (Defect ID-16705) - Ends
                BOMSubstituteSAPBuffer.append("<TD width=\"180\">"+validateString1(wrapCharTable(strComments,10))+"</TD>");
                //Added by DSM(Sogeti)-2015x.5.1 for PDF Views (Defect ID-5691) - Starts
                //Modified by DSM(Sogeti)-2015x.5.1 for PDF Views (Def - 17089) - Starts
                //Added by DSM 2018x.5 for PDF View Requirement - Starts
                //Modified by DSM(Sogeti)-2018x.5 for PDF Views Requirement  - Starts
                if((strParentObjType.equals(pgV3Constants.TYPE_FINISHEDPRODUCTPART))|| pgV3Constants.TYPE_PGTRANSPORTUNITPART.equalsIgnoreCase(sActualType)) {
                    //Modified by DSM(Sogeti)-2018x.3 for PDF Views (Req - 32593) - Starts
                    BOMSubstituteSAPBuffer.append("<TD width=\"160\">"+validateString1(strReleaseDate)+"</TD>");
                    //Modified by DSM(Sogeti)-2018x.3 for PDF Views (Req - 32593) - Ends
                    //Modified by DSM(Sogeti)-2018x.5 for PDF Views Requirement  - Ends
                }
                //Added by DSM 2018x.5 for PDF View Requirement - Ends
                //Modified by DSM(Sogeti)-2015x.5.1 for PDF Views (Def - 17089) - Ends
                //Added by DSM(Sogeti)-2015x.5.1 for PDF Views (Defect ID-5691) - Ends
                //Added by DSM 2018x.5 for PDF View Requirement - Starts
                //Modified by DSM 2018x.5 for PDF Views Defect 32590 - Starts
                if(sActualType.equalsIgnoreCase( pgV3Constants.TYPE_PGTRANSPORTUNITPART) ||  sActualType.equals(pgV3Constants.TYPE_FINISHEDPRODUCTPART)) {
                    BOMSubstituteSAPBuffer.append("<TD width=\"75\"><B>Pha:</B>"+validateString1(strStage)+"<BR></BR><B>St:</B>"+validateString1(strCurrentState)+"</TD>");
                }
                else {
                    BOMSubstituteSAPBuffer.append("<TD width=\"65\">"+validateString1(strCurrentState)+"</TD>");
                    BOMSubstituteSAPBuffer.append("<TD width=\"75\">"+validateString1(strStage)+"</TD>");
                }
                //Added by DSM 2018x.5 for PDF View Requirement - Ends
                strRefDe  =strRefDes.replaceAll("[<]","#LESS_THAN");
                strRefDe = strRefDe.replaceAll("[>]","#GREATER_THAN");
                //Modified by DSM(Sogeti)-2015x.4 for PDF Views (Req - 5700) - Starts
                //Modified by DSM(Sogeti)-2018x.1.1 for PDF Views (Defect - 26849) - Starts
                //if(pgV3Constants.TYPE_PGMASTERCONSUMERUNITPART.equals(strParentType)||pgV3Constants.TYPE_PGMASTERINNERPACKUNITPART.equals(strParentType) || (pgV3Constants.TYPE_PGTRANSPORTUNITPART.equals(sActualType) && pgV3Constants.TYPE_PGMASTERCUSTOMERUNITPART.equals(strParentType)) || (!("MAIN".equalsIgnoreCase(strParentType)) && pgV3Constants.TYPE_PGTRANSPORTUNITPART.equals(sActualType))){
                //Modified by DSM 2018x.5 for PDF View Requirement - Starts
                //Added by DSM 2018x.5 for PDF View Requirement - Starts
                //Modified by DSM 2018x.5 for PDF Views Defect 32590 - Starts
                if(sActualType.equalsIgnoreCase( pgV3Constants.TYPE_PGTRANSPORTUNITPART) ||  sActualType.equals(pgV3Constants.TYPE_FINISHEDPRODUCTPART) ){
                    BOMSubstituteSAPBuffer.append("<TD width=\"95\" align=\"left\" valign=\"top\"><B>RD:</B>"+validateString1(strRefDe)+"<BR></BR><B>OSPD:</B>"+validateString1(strProductDensity)+"</TD>");
                    BOMSubstituteSAPBuffer.append("<TD width=\"95\" align=\"left\" valign=\"top\"><B>DUoM:</B>"+validateString1(strDensityUOM)+"<BR></BR><B>OC:</B>"+validateString1(strOptComp)+"</TD>");
                }
                else if(pgV3Constants.TYPE_PGMASTERCONSUMERUNITPART.equals(strParentType)||pgV3Constants.TYPE_PGMASTERINNERPACKUNITPART.equals(strParentType)  && pgV3Constants.TYPE_PGMASTERCUSTOMERUNITPART.equals(strParentType) || (!("MAIN".equalsIgnoreCase(strParentType)) )){
                    //Added by DSM 2018x.5 for PDF View Requirement - Ends
                    //Modified by DSM(Sogeti)-2018x.1.1 for PDF Views (Defect - 26849) - Ends
                    BOMSubstituteSAPBuffer.append("<TD width=\"160\">"+validateString1(strRefDe)+"</TD>");
                }
                //Added by DSM 2018x.5 for PDF View Requirement - Ends
                else{
                    BOMSubstituteSAPBuffer.append("<TD width=\"160\" align=\"left\" valign=\"top\"><B>RD:</B>"+ validateString1(strRefDe)+"<BR></BR><B>OC:</B>"+validateString1(strOptComp)+"</TD>");
                }
                //Modified by DSM(Sogeti)-2015x.4 for PDF Views (Req - 5700) - Ends
            	//Added by DSM Sogeti for 2022x.02 May CW for PDF Views (Req -46172) - Starts
				if(!("MCUP".equalsIgnoreCase(strParentType) || "MCOP".equalsIgnoreCase(strParentType) || "MIP".equalsIgnoreCase(strParentType)) && (pgV3Constants.PDFVIEW_ALLINFO.equalsIgnoreCase(sPDFViewType)))
				{
					BOMSubstituteSAPBuffer.append("<TD width=\"95\" align=\"left\" valign=\"top\"><B>RR:</B>"+validateString1(mapMain.get(pgPDFViewConstants.SELECT_ATTRIBUTE_PGRELATIONSHIPRESTRICTION))+"<BR></BR><B>RRC:</B>"+validateString1(mapMain.get(pgPDFViewConstants.SELECT_ATTRIBUTE_PGRELATIONSHIPRESTRICTIONCOMMENTS))+"</TD>");
				}
				//Added by DSM Sogeti for 2022x.02 May CW for PDF Views (Req -46172) - Ends
                BOMSubstituteSAPBuffer.append("</TR>");
            }
        }catch (Exception e){
            e.printStackTrace();
        }
        long endTime = new Date().getTime();
        System.out.println("Total Time has taken by the getEBOMTablewithData Method is-->"+(endTime-startTime));
        return BOMSubstituteSAPBuffer.toString();
    }
    /**
     * Helper method to get Substitute Part Names  for BOM table
     * @param context - matrix context
     * @param Map  - BOM Map
     * @param String -  Relationship Name
     * @return StringList  - Substitute part names
     * @since DSM 2018x.5
     */
    private StringList getSubstitutePartName(Context context,Map<String, String> mapBOM, String strEBOM){
        StringList slSubstituteList = new StringList();
        try {
            String strParentObjId = (String)mapBOM.get("ParentId");
            String stridConn = (String)mapBOM.get("id[connection]");
            String strId = (String)mapBOM.get(DomainConstants.SELECT_ID);
            String strType = (String)mapBOM.get(DomainConstants.SELECT_TYPE);
            //The sonar lint comment to generalise the map is not applicable here, as the below mentioned map including both map and maplist.
            Map mParamMap = new HashMap();
            Map<String, String> mParamList = new HashMap<>();

            mParamList.put("objectId",strParentObjId);
            mParamList.put("columnMap","");
            mParamList.put("reportFormat","pdf");
            mParamList.put("suiteKey","");
            Map<String , Map<String, String>> mColumnMap = new HashMap<>();
            Map<String, String> mColumnSettingsMap = new HashMap();
            mColumnSettingsMap.put("pgBOMType",strEBOM);
            mColumnMap.put("settings",mColumnSettingsMap);
            mParamMap.put("paramList", mParamList);
            mParamMap.put("columnMap", mColumnMap);
            MapList mlObjectList = new MapList();
            Map<String , String> mBOMChildObjInfo = new HashMap<>();
            mBOMChildObjInfo.put(DomainConstants.SELECT_RELATIONSHIP_ID, stridConn);
            mBOMChildObjInfo.put(DomainConstants.SELECT_ID,strId);
            mBOMChildObjInfo.put(DomainConstants.SELECT_TYPE,strType);
            mlObjectList.add(mBOMChildObjInfo);
            mParamMap.put("objectList",mlObjectList);
            String[] argsSubName = JPO.packArgs(mParamMap);
            slSubstituteList = (StringList) pgPDFViewHelper.executeMainClassMethod(context, "pgDSMBOMUtil", "getSubstitutesColumnForEBOMAndFBOM" , argsSubName);
        } catch (Exception e) {
            e.printStackTrace();
        }
        return slSubstituteList;
    }
    /**
     * Helper method to get Alternate field  for BOM table
     * @param context - matrix context
     * @param String  - object Id
     * @param String -  object Id
     * @return StringList  - Altername field
     * @since DSM 2018x.5
     */
    private String getAlternatePart(Context context, String sActualParentId,String stParentId) {
        String strAlternate = DomainConstants.EMPTY_STRING;
        try {
            Map<String, String> mpAlternate = new HashMap<>();
            mpAlternate.put("reportFormat","pdf");
            mpAlternate.put("objectId",sActualParentId);
            MapList mlObjListAlternate = new MapList();
            Map<String, String> mpObjAlternate = new HashMap();
            mpObjAlternate.put("id",stParentId);
            mlObjListAlternate.add(mpObjAlternate);
            //The sonar lint comment to generalise the map is not applicable here, as the below mentioned map including both map and maplist.
            Map mpBOMAlternate=new HashMap();
            mpBOMAlternate.put("paramList",mpAlternate);
            mpBOMAlternate.put("objectList", mlObjListAlternate);
            String[] argsAlt = JPO.packArgs(mpBOMAlternate);
            List<String> lEBOMAlternate = (List)pgPDFViewHelper.executeMainClassMethod(context, "emxPart", "getColumnAlternateData", argsAlt);
            if((lEBOMAlternate !=null) && (lEBOMAlternate.size() >0) )
                strAlternate = (String)lEBOMAlternate.get(0);
        } catch (Exception e) {
            e.printStackTrace();
        }
        return strAlternate;
    }

    /**
     * Get substitute data
     * @param Map mapFPP
     * @return MapList mlSub
     * @throws Exception
     */
    //Modified by DSM-2015x.4.1 Feb downtime for PDF Views (Defect Id #15263) - Starts
    private MapList getSubstituteData(Context context,Map mapFPP) throws Exception{
        //Modified by DSM-2015x.4.1 Feb downtime for PDF Views (Defect Id #15263) - Ends
        long startTime = new Date().getTime();
        MapList mlSub = new MapList();
        //Modified by DSM-2015x.4.1 Feb downtime for PDF Views (Defect Id #15263) - Starts
        boolean isPushContext = false;
        //Modified by DSM-2015x.4.1 Feb downtime for PDF Views (Defect Id #15263) - Ends
        try	{
            String stridConn = (String)mapFPP.get("id[connection]");
            String strLevel = (String)mapFPP.get(DomainConstants.SELECT_LEVEL);
            String strParentId = (String)mapFPP.get("ParentId");
            String strid = strParentId;
            Map mpParam = new HashMap();
            mpParam.put("reportFormat","pdf");
            mpParam.put("objectId",strid);
            MapList mlObjList = new MapList();
            Map mpObj = new HashMap();
            mpObj.put("id[connection]",stridConn);
            mpObj.put(DomainConstants.SELECT_ID,strid);
            mpObj.put(DomainConstants.SELECT_LEVEL,strLevel);
            mlObjList.add(mpObj);
            Map mpBOMSubs=new HashMap();
            mpBOMSubs.put("paramList",mpParam);
            mpBOMSubs.put("objectList", mlObjList);
            String[] argsSubs = JPO.packArgs(mpBOMSubs);
            //emxPart_mxJPO objemxPart = new emxPart_mxJPO(context, argsSubs);
            //Vector vEBOMSub = (Vector)objemxPart.getColumnSubstitutePartsFlagData(context, argsSubs);
            //Added for PDF Refactor
            Vector vEBOMSub = (Vector)pgPDFViewHelper.executeMainClassMethod(context, "emxPart", "getColumnSubstitutePartsFlagData", argsSubs);
            String strSub = null;
            if((vEBOMSub != null) && (vEBOMSub.size() > 0) )
                strSub = (String)vEBOMSub.get(0);
            if("Yes".equalsIgnoreCase(strSub)){
                //Modified by DSM-2015x.4.1 Feb downtime for PDF Views (Defect Id #15263) - Starts
                isPushContext = true;
                ContextUtil.pushContext(context, "User Agent", "", "");
                //Modified by DSM-2015x.4.1 Feb downtime for PDF Views (Defect Id #15263) - Ends
                Map mpObjSl = new HashMap();mpObjSl.put("relId",stridConn);
                String[] argSubs = JPO.packArgs(mpObjSl);
                //emxPart_mxJPO obemxPart = new emxPart_mxJPO(context, argSubs);
                //mlSub = (MapList)obemxPart.getTableEBOMPartsSubstituteList(context, argSubs);
                //Added for PDF Refactor
                mlSub = (MapList)pgPDFViewHelper.executeMainClassMethod(context, "emxPart", "getTableEBOMPartsSubstituteList", argSubs);
            }
        }catch (Exception e){
            e.printStackTrace();
        }
        //Modified by DSM-2015x.4.1 Feb downtime for PDF Views (Defect Id #15263) - Starts
        finally{
            if(isPushContext){
                ContextUtil.popContext(context);
                isPushContext = false;
            }

        }
        //Modified by DSM-2015x.4.1 Feb downtime for PDF Views (Defect Id #15263) - Ends
        long endTime = new Date().getTime();
        System.out.println("Total Time has taken by the getSubstituteData Method is-->"+(endTime-startTime));
        return mlSub;
    }
    /**
     * Generate substitute table with actual substitute content
     * @param mapSub Substitute Map
     * @param strId Substitute object Id
     * @param bGenDoc check Gendoc
     * @return BOMSubstituteSAPBuffer.toString string with data
     * @throws Exception
     */
    //Modified by DSM Sogeti for 2022x.02 May CW for PDF Views (Req -46172) - Starts
    private String getSubstituteTablewithData(Context context,Map mapSub,String strId,boolean bGenDoc,String sPDFViewType){
    	//Modified by DSM Sogeti for 2022x.02 May CW for PDF Views (Req -46172) - Ends
    	long startTime = new Date().getTime();
        StringBuilder BOMSubstituteSAPBuffer = new StringBuilder();
        try{
            StringList selectStmtSub = new StringList(5);
            selectStmtSub.add(DomainConstants.SELECT_TYPE);
            selectStmtSub.add(DomainConstants.SELECT_REVISION);
            selectStmtSub.add(DomainConstants.SELECT_NAME);
            //Modified for 2018x Upgrade - Stage attribute is replaced by Release Phase attribute in 18x OOTB.
            selectStmtSub.add(pgV3Constants.SELECT_ATTRIBUTE_RELEASE_PHASE);
            selectStmtSub.add(pgV3Constants.SELECT_ATTRIBUTE_TITLE);

            //Added by DSM(Sogeti)-2015x.5.1 for PDF Views (Defect ID-5691) - Starts
            selectStmtSub.add(pgV3Constants.SELECT_ATTRIBUTE_RELEASE_DATE);
            //Added by DSM(Sogeti)-2015x.5.1 for PDF Views (Defect ID-5691) - Ends
          	//Added by DSM Sogeti for 2022x.02 May CW for PDF Views (Req -46172) - Starts
            selectStmtSub.add(pgPDFViewConstants.SELECT_ATTRIBUTE_PGRELATIONSHIPRESTRICTION);
            selectStmtSub.add(pgPDFViewConstants.SELECT_ATTRIBUTE_PGRELATIONSHIPRESTRICTIONCOMMENTS);
          	//Added by DSM Sogeti for 2022x.02 May CW for PDF Views (Req -46172) - Ends
            

            String strSubId = (String)mapSub.get("id");
            String strSubQty = (String)mapSub.get("Quantity");
            String strSubUoM = (String)mapSub.get("UoM");
            String strSubValidUntil = (String)mapSub.get("ValidUntil");
            String strSubSCN = (String)mapSub.get("SCN");
            String strSubComments = (String)mapSub.get("Comment");
            String strSubReferenceDesignator = (String)mapSub.get("Reference Designator");
            String strOriginatingSource = (String)mapSub.get("pgOriginatingSource");
            String strBaseUnitOfMeasurePickList = (String)mapSub.get("pgBaseUnitOfMeasurePickList");
            String strBaseUnitOfMeasure = (String)mapSub.get("pgBaseUnitOfMeasure");
            String strEBOMSubstituteRelId = (String)mapSub.get("EBOMSubstituteRelId");
            //Added by DSM 2018x.5 for PDF View Requirement - Starts
            String strEBOMSubPolicy = (String)mapSub.get("policy");
            //Added by DSM 2018x.5 for PDF Views Requirement - Starts
            String strChg = (String) mapSub.get("Chg");
            //Modified by DSM 2018x.5 for PDF Views Requirement - Ends
            //Added by DSM 2018x.5 for PDF View Requirement - End
            BOMSubstituteSAPBuffer.append("<TR align=\"center\" class=\"pdf\">");
            Map mpParamName = new HashMap();
            mpParamName.put("reportFormat","pdf");
            MapList mlObjListName = new MapList();
            Map mpObjName = new HashMap();
            mpObjName.put("id",strSubId);
            mlObjListName.add(mpObjName);
            Map mpBOMSubsName=new HashMap();
            mpBOMSubsName.put("paramList",mpParamName);
            mpBOMSubsName.put("objectList", mlObjListName);
            String[] argsSubsName = JPO.packArgs(mpBOMSubsName);
            //emxPart_mxJPO objemxPartName = new emxPart_mxJPO(context, argsSubsName);
            //Vector vEBOMSubName = (Vector)objemxPartName.getModifiedName(context, argsSubsName);
            //Added for PDF Refactor
            Vector vEBOMSubName = (Vector)pgPDFViewHelper.executeMainClassMethod(context, "emxPart", "getModifiedName", argsSubsName);
            String strSubName = null;
            if((vEBOMSubName != null) && (vEBOMSubName.size() > 0) )
                strSubName = (String)vEBOMSubName.get(0);
            DomainRelationship relObj = new DomainRelationship(strEBOMSubstituteRelId);
            String strOptComponent = relObj.getAttributeValue(context,pgV3Constants.ATTRIBUTE_PGOPTIONALCOMPONENT);
            DomainObject dmoBomSub = DomainObject.newInstance(context, strSubId);
            Map mpBomSub = dmoBomSub.getInfo(context, selectStmtSub);
            String strRev = (String)mpBomSub.get(DomainConstants.SELECT_REVISION);

            //Added by DSM(Sogeti)-2015x.5.1 for PDF Views (Defect ID-5691) - Starts
            String strReleaseDate = pgIPMPDFViewUtil_mxJPO.getFormattedDate((String )mpBomSub.get(pgV3Constants.SELECT_ATTRIBUTE_RELEASE_DATE));
            //Added by DSM(Sogeti)-2015x.5.1 for PDF Views (Defect ID-5691) - End
            //Modified by DSM(Sogeti)-2018x.5 for PDF Views Requirement  - Starts
            //Modified by DSM(Sogeti)-2018x.5 for PDF Views Defect #35021 - Starts
            if(bGenDoc)
            {
                BOMSubstituteSAPBuffer.append("<TD align ='left'  width=\"45\">"+validateString1(strSubName)+"</TD>");
            }
            else{
                BOMSubstituteSAPBuffer.append("<TD align ='left' width=\"45\"><B>SP: </B>"+validateString1(strSubName)+"<br /><B>R: </B>"+validateString1(strRev)+"</TD>");
            }
            //Modified by DSM(Sogeti)-2018x.5 for PDF Views Defect #35021 - Ends
            BOMSubstituteSAPBuffer.append("<TD  width=\"60px\">" +strChg+"</TD>");
            //Modified by DSM(Sogeti)-2018x.5 for PDF Views Requirement  - Ends
            MapList mlObjListSCN = new MapList();
            Map mpObjNameSCN = new HashMap();
            mpObjNameSCN.put("SCN",strSubSCN);
            mlObjListSCN.add(mpObjNameSCN);
            Map mpBOMSubsSCN = new HashMap();
            mpBOMSubsSCN.put("objectList", mlObjListSCN);
            String[] argsSubsSCN = JPO.packArgs(mpBOMSubsSCN);
            //pgIPMTablesJPO_mxJPO objIPMTableSCN = new pgIPMTablesJPO_mxJPO(context, argsSubsSCN);
            //Vector vEBOMSubSCN = (Vector)objIPMTableSCN.getSCNColumnData(context, argsSubsSCN);
            //Added for PDF Refactor
            Vector vEBOMSubSCN = (Vector)pgPDFViewHelper.executeMainClassMethod(context, "pgIPMTablesJPO", "getSCNColumnData", argsSubsSCN);
            String strSCN = null;
            if((vEBOMSubSCN != null) && (vEBOMSubSCN.size() > 0) )
                strSCN = (String)vEBOMSubSCN.get(0);
            if(UIUtil.isNotNullAndNotEmpty(strSCN)) {
                strSCN = strSCN.replaceAll("[<]","#LESS_THAN");
                strSCN = strSCN.replaceAll("[>]","#GREATER_THAN");
            }
            //Added by DSM(Sogeti)-2015x.5 for PDF Views (Defect ID-16705) - Starts
            else{
                strSCN = DomainConstants.EMPTY_STRING;
            }
            String strTitle = (String)mapSub.get("SAPDesc");
            if(UIUtil.isNullOrEmpty(strTitle)){
                strTitle = DomainConstants.EMPTY_STRING;
            }
            //Added by DSM(Sogeti)-2015x.5 for PDF Views (Defect ID-16705) - Ends
            strTitle =strTitle.replaceAll("[<]","#LESS_THAN");
            strTitle =strTitle.replaceAll("[>]","#GREATER_THAN");
            //Modified by DSM-2015x.2 for PDF Views FOP Type(Defect-10084) - Starts
            if(!bGenDoc){
                //Modified by DSM-2015x.2 for PDF Views FOP Type(Defect-10084) - Ends
                //Modified by DSM(Sogeti)-2018x.5 for PDF Views Requirement  - Starts
                BOMSubstituteSAPBuffer.append("<TD align ='left' width=\"60px\"><B>SCN: </B>"+validateString1(strSCN)+"<br /><B>Title: </B>" +validateString1(wrapCharTable(strTitle,10))+"</TD>");
                //Modified by DSM(Sogeti)-2018x.5 for PDF Views Requirement  - Ends
            } else{
                //Commented by DSM-2018x.1.1 for PDF Views defect - 24953 - Starts
                //BOMSubstituteSAPBuffer.append("<TD align ='left' width=\"60px\"><B>SCN: </B>"+validateString1(strSCN)+"<br /><B>Title: </B>" +validateString1(strTitle)+"</TD>");
                //Added by DSM-2018x.5 for PDF View Requirement - Starts
                //BOMSubstituteSAPBuffer.append("<TD align ='left' width=\"60px\"><B>Title: </B>" +validateString1(strTitle)+"</TD>");
                BOMSubstituteSAPBuffer.append("<TD align ='left' width=\"60px\"><B>SCN: </B>"+validateString1(strSCN)+"<br /><B>Title: </B>" +validateString1(wrapCharTable(strTitle,10))+"</TD>");
                //Added by DSM-2018x.5 for PDF View Requirement - Ends
                //Commented by DSM-2018x.1.1 for PDF Views defect - 24953 - Ends
            }
            String strType2 = (String)mpBomSub.get(DomainConstants.SELECT_TYPE);
            String strValue = UINavigatorUtil.getAdminI18NString("Type", strType2, context.getSession().getLanguage());
            Map mpObjNameSST = new HashMap();
            mpObjNameSST.put("id",strSubId);
            MapList mlObjListNameSST = new MapList();
            mlObjListNameSST.add(mpObjNameSST);
            //Modified by DSM(Sogeti)-2015x.2 for defect 10001 on 08 Feb 2017- Starts
            Map mpSettingsSub = new HashMap();
            mpSettingsSub.put("Column Name","");
            Map mpColumnMap = new HashMap();
            mpColumnMap.put("settings",mpSettingsSub);
            Map mpBOMSubsSST = new HashMap();
            mpBOMSubsSST.put("objectList", mlObjListNameSST);
            mpBOMSubsSST.put("columnMap", mpColumnMap);
            //Modified by DSM(Sogeti)-2015x.2 for defect 10001 on 08 Feb 2017 - Ends
            String[] argsSubsSST = JPO.packArgs(mpBOMSubsSST);
            //Modified by DSM(Sogeti)-2015x.2 for defect 10001 on 08 Feb 2017 - Starts
            //emxPart_mxJPO objPartBom = new emxPart_mxJPO(context, argsSubsSST);
            //Vector vEBOMSubSpecSubType = (Vector)objPartBom.getSpecificationSubtype(context, argsSubsSST);
            //Added for PDF Refactor
            Vector vEBOMSubSpecSubType = (Vector)pgPDFViewHelper.executeMainClassMethod(context, "emxPart", "getSpecificationSubtype", argsSubsSST);
            //Modified by DSM(Sogeti)-2015x.2 for defect 10001 on 08 Feb 2017 - Ends
            String strSpecSubType = null;
            if((vEBOMSubSpecSubType != null) && (vEBOMSubSpecSubType.size() > 0) )
                strSpecSubType = (String)vEBOMSubSpecSubType.get(0);
            BOMSubstituteSAPBuffer.append("<TD align ='left' width=\"140px\"><B>T: </B>"+validateString1(strValue)+"<br /><B>SST: </B>" +validateString1(strSpecSubType)+"</TD>");
            MapList mlObjListQty = new MapList();
            Map mpObjNameQty = new HashMap();
            mpObjNameQty.put("Quantity",strSubQty);
            mpObjNameQty.put("EBOMSubstituteRelId",strEBOMSubstituteRelId);
            mlObjListQty.add(mpObjNameQty);
            Map mpBOMSubsQty=new HashMap();
            mpBOMSubsQty.put("objectList", mlObjListQty);
            String[] argsSubsQty = JPO.packArgs(mpBOMSubsQty);
            //pgIPMTablesJPO_mxJPO objIPMTableQty = new pgIPMTablesJPO_mxJPO(context, argsSubsQty);
            //Vector vEBOMSubQty = (Vector)objIPMTableQty.getSubstitutePartQuantityColumnData(context, argsSubsQty);
            //Added for PDF Refactor
            Vector vEBOMSubQty = (Vector)pgPDFViewHelper.executeMainClassMethod(context, "pgIPMTablesJPO", "getSubstitutePartQuantityColumnData", argsSubsQty);
            String strQty = null;
            if((vEBOMSubQty != null) && (vEBOMSubQty.size() > 0) )
                strQty =(String)vEBOMSubQty.get(0);
            strQty = (String)mapSub.get(pgV3Constants.ATTRIBUTE_QUANTITY);
            BOMSubstituteSAPBuffer.append("<TD width=\"50px\">"+validateString1(strQty)+"</TD>");
            MapList mlObjListUom = new MapList();
            Map mpObjNameUoM = new HashMap();
            mpObjNameUoM.put("pgOriginatingSource",strOriginatingSource);
            mpObjNameUoM.put("pgBaseUnitOfMeasurePickList",strBaseUnitOfMeasure);
            mpObjNameUoM.put("pgBaseUnitOfMeasure",strBaseUnitOfMeasure);
            mlObjListUom.add(mpObjNameUoM);
            Map mpBOMSubsUoM=new HashMap();
            mpBOMSubsUoM.put("objectList", mlObjListUom);
            String[] argsSubsUoM = JPO.packArgs(mpBOMSubsUoM);
            //pgDSOCPNProductData_mxJPO objIPMTableUoM = new pgDSOCPNProductData_mxJPO(context, argsSubsUoM);
            //Vector vEBOMSubUoM = (Vector)objIPMTableUoM.getSubstitutePartBaseUnitOfMeasureColumnData(context, argsSubsUoM);
            //Added for PDF Refactor
            Vector vEBOMSubUoM = (Vector)pgPDFViewHelper.executeMainClassMethod(context, "pgDSOCPNProductData", "getSubstitutePartBaseUnitOfMeasureColumnData", argsSubsUoM);
            String strUoM = null;
            if((vEBOMSubUoM != null) && (vEBOMSubUoM.size() > 0) )
                strUoM = (String)vEBOMSubUoM.get(0);
            BOMSubstituteSAPBuffer.append("<TD width=\"50px\">"+validateString1(strUoM)+"</TD>");
            MapList mlObjListValidStart = new MapList();
            Map mpObjNameValidStart = new HashMap();
            mpObjNameValidStart.put("EBOMSubstituteRelId",strEBOMSubstituteRelId);
            mlObjListValidStart.add(mpObjNameValidStart);
            Map mpBOMSubsValidStart = new HashMap();
            mpBOMSubsValidStart.put("objectList", mlObjListValidStart);
            String[] argsSubsValidStart = JPO.packArgs(mpBOMSubsValidStart);
            //pgDSOCPNProductData_mxJPO objIPMTableValidStart = new pgDSOCPNProductData_mxJPO(context, argsSubsValidStart);
            //Vector vEBOMSubValidStart = (Vector)objIPMTableValidStart.getValidStartDateColumnDataForDSO(context, argsSubsValidStart);
            //Added for PDF Refactor
            Vector vEBOMSubValidStart = (Vector)pgPDFViewHelper.executeMainClassMethod(context, "pgDSOCPNProductData", "getValidStartDateColumnDataForDSO", argsSubsValidStart);
            String strValidStart = null;
            if((vEBOMSubValidStart != null) && (vEBOMSubValidStart.size() > 0) )
                strValidStart = (String)vEBOMSubValidStart.get(0);
            if(UIUtil.isNotNullAndNotEmpty(strValidStart))
                strValidStart=pgIPMPDFViewUtil_mxJPO.getFormattedDate(strValidStart);

            MapList mlObjListValidUntil = new MapList();
            Map mpObjNameValidUntil = new HashMap();
            mpObjNameValidUntil.put("ValidUntil",strSubValidUntil);
            mpObjNameValidUntil.put("EBOMSubstituteRelId",strEBOMSubstituteRelId);
            mlObjListValidUntil.add(mpObjNameValidUntil);
            Map mpBOMSubsValidUntil = new HashMap();
            mpBOMSubsValidUntil.put("objectList", mlObjListValidUntil);
            String[] argsSubsValidUntil = JPO.packArgs(mpBOMSubsValidUntil);
            //pgDSOCPNProductData_mxJPO objIPMTableValidUntil = new pgDSOCPNProductData_mxJPO(context, argsSubsValidUntil);
            //Vector vEBOMSubValidUntil = (Vector)objIPMTableValidUntil.getValidUntilDateColumnDataForDSO(context, argsSubsValidUntil);
            //Added for PDF Refactor
            Vector vEBOMSubValidUntil = (Vector)pgPDFViewHelper.executeMainClassMethod(context, "pgDSOCPNProductData", "getValidUntilDateColumnDataForDSO", argsSubsValidUntil);
            String strValidUntil = null;
            if((vEBOMSubValidUntil != null) && (vEBOMSubValidUntil.size() > 0) )
                strValidUntil = (String)vEBOMSubValidUntil.get(0);
            if(UIUtil.isNotNullAndNotEmpty(strValidUntil))
                strValidUntil=pgIPMPDFViewUtil_mxJPO.getFormattedDate(strValidUntil);
            //Added by DSM Sogeti for 2022x.02 May CW for PDF Views (Req -46172) - Starts
            if(pgV3Constants.PDFVIEW_ALLINFO.equalsIgnoreCase(sPDFViewType) && (!("MCUP".equalsIgnoreCase(strParentObjType) || "MCOP".equalsIgnoreCase(strParentObjType) || "MIP".equalsIgnoreCase(strParentObjType)))){	
            	BOMSubstituteSAPBuffer.append("<TD width=\"50px\"><B>VSD: </B>"+validateString1(strValidStart)+"<BR></BR><B>VUD: </B>"+validateString1(strValidUntil)+"</TD>");
            }else {
            	BOMSubstituteSAPBuffer.append("<TD width=\"50px\">"+validateString1(strValidStart)+"</TD>");
            	BOMSubstituteSAPBuffer.append("<TD width=\"50px\">"+validateString1(strValidUntil)+"</TD>");
            }
            //Added by DSM Sogeti for 2022x.02 May CW for PDF Views (Req -46172) - Ends
            MapList mlObjListRefDes = new MapList();
            Map mpObjNameRefDes = new HashMap();
            mpObjNameRefDes.put("Reference Designator",strSubReferenceDesignator);
            mlObjListRefDes.add(mpObjNameRefDes);
            Map mpBOMSubsRefDes = new HashMap();
            mpBOMSubsRefDes.put("objectList", mlObjListRefDes);
            String[] argsSubsRefDes = JPO.packArgs(mpBOMSubsRefDes);
            //pgDSOCPNProductData_mxJPO objIPMTableRefDes = new pgDSOCPNProductData_mxJPO(context, argsSubsRefDes);
            //Vector vEBOMSubRefDes = (Vector)objIPMTableRefDes.getSubstitutePartReferenceDesignatorColumnData(context, argsSubsRefDes);
            //Added for PDF Refactor
            Vector vEBOMSubRefDes = (Vector)pgPDFViewHelper.executeMainClassMethod(context, "pgDSOCPNProductData", "getSubstitutePartReferenceDesignatorColumnData", argsSubsRefDes);
            String strRefDes = null;
            if((vEBOMSubRefDes != null) && (vEBOMSubRefDes.size() > 0) )
                strRefDes =(String)vEBOMSubRefDes.get(0);
            if(UIUtil.isNotNullAndNotEmpty(strRefDes)) {
                strRefDes  = strRefDes.replaceAll("[<]","#LESS_THAN");
                strRefDes = strRefDes.replaceAll("[>]","#GREATER_THAN");
            }
            //Added by DSM(Sogeti)-2015x.5 for PDF Views (Defect ID-16705) - Starts
            else{
                strRefDes = DomainConstants.EMPTY_STRING;
            }
            //Added by DSM(Sogeti)-2015x.5 for PDF Views (Defect ID-16705) - Ends
            //Modified by DSM(Sogeti)-2015x.4 for PDF Views (Req - 5706) - Starts
            //BOMSubstituteSAPBuffer.append("<TD width=\"50px\">"+validateString1(strRefDes)+"</TD>");
            //Modified by DSM(Sogeti)-2018x.5 for PDF Views Requirement  - Starts
            BOMSubstituteSAPBuffer.append("<TD align ='left' width=\"140px\">"+validateString1(strRefDes)+"</TD>");
            //Modified by DSM(Sogeti)-2018x.5 for PDF Views Requirement  - Ends
            //Modified by DSM(Sogeti)-2015x.4 for PDF Views (Req - 5706) - Ends
            MapList mlObjListComments = new MapList();
            Map mpObjNameComments = new HashMap();
            mpObjNameComments.put("Comment",strSubComments);
            mlObjListComments.add(mpObjNameComments);
            Map mpBOMSubsComments = new HashMap();
            mpBOMSubsComments.put("objectList", mlObjListComments);
            String[] argsSubsComments = JPO.packArgs(mpBOMSubsComments);
            //pgIPMTablesJPO_mxJPO objIPMTableComments = new pgIPMTablesJPO_mxJPO(context, argsSubsComments);
            //Vector vEBOMSubComments = (Vector)objIPMTableComments.getSubstitutePartCommentsColumnData(context, argsSubsComments);
            //Added for PDF Refactor
            Vector vEBOMSubComments = (Vector)pgPDFViewHelper.executeMainClassMethod(context, "pgIPMTablesJPO", "getSubstitutePartCommentsColumnData", argsSubsComments);
            String strComment = null;
            if((vEBOMSubComments != null) && (vEBOMSubComments.size() > 0) )
                strComment = (String)vEBOMSubComments.get(0);
            if(UIUtil.isNotNullAndNotEmpty(strComment)) {
                strComment = strComment.replaceAll("[<]","#LESS_THAN");
                strComment = strComment.replaceAll("[>]","#GREATER_THAN");
            }
            //Added by DSM(Sogeti)-2015x.5 for PDF Views (Defect ID-16705) - Starts
            else{
                strComment = DomainConstants.EMPTY_STRING;
            }
            //Added by DSM(Sogeti)-2015x.5 for PDF Views (Defect ID-16705) - Ends
            //Modified by DSM-2015x.2 for PDF Views FOP Type(Defect-10084) - Starts
            BOMSubstituteSAPBuffer.append("<TD width=\"180px\">"+validateString1(wrapCharTable(strComment,10))+"</TD>");
            //Modified by DSM-2015x.2 for PDF Views FOP Type(Defect-10084) - Ends

            //Added by DSM(Sogeti)-2015x.5.1 for PDF Views (Defect ID-5691) - Starts
            //Modified by DSM(Sogeti)-2015x.5.1 for PDF Views (Def - 17089) - Starts
            //Modified by DSM(Sogeti)-2018x.5 for PDF Views Requirement  - Starts
            if(strParentObjType.equals(pgV3Constants.TYPE_FINISHEDPRODUCTPART)) {
                //Modified by DSM(Sogeti)-2018x.3 for PDF Views (Requirement #32592) - Starts
                BOMSubstituteSAPBuffer.append("<TD width=\"160\" align=\"left\" valign=\"top\">"+validateString1(strReleaseDate)+"</TD>");
                //Modified by DSM(Sogeti)-2018x.3 for PDF Views (Requirement #32592) - Ends
                //Modified by DSM(Sogeti)-2018x.5 for PDF Views Requirement  - Ends
            } //Modified by DSM(Sogeti)-2015x.5.1 for PDF Views (Def - 17089) - Ends
            //Added by DSM(Sogeti)-2015x.5.1 for PDF Views (Defect ID-5691) - Ends
           	//Added by DSM Sogeti for 2022x.02 May CW for PDF Views (Req -46172) - Starts
            if(!("MCUP".equalsIgnoreCase(strParentObjType) || "MCOP".equalsIgnoreCase(strParentObjType) || "MIP".equalsIgnoreCase(strParentObjType)) && pgV3Constants.PDFVIEW_ALLINFO.equalsIgnoreCase(sPDFViewType)){
            	BOMSubstituteSAPBuffer.append("<TD width=\"95\" align=\"left\" valign=\"top\"><B>RR:</B>"+validateString1(mpBomSub.get(pgPDFViewConstants.SELECT_ATTRIBUTE_PGRELATIONSHIPRESTRICTION))+"<BR/><B>RRC:</B>"+validateString1(wrapCharTable((String)mpBomSub.get(pgPDFViewConstants.SELECT_ATTRIBUTE_PGRELATIONSHIPRESTRICTIONCOMMENTS),10))+"</TD>");
			}
			//Added by DSM Sogeti for 2022x.02 May CW for PDF Views (Req -46172) - Ends
            DomainObject dmoBom = DomainObject.newInstance(context, strId);
            //Modified by DSM-2015x.5 for PDF Views (Defect Id #14783) - Starts
            ContextUtil.pushContext(context);
            Map mpBom = dmoBom.getInfo(context, selectStmtSub);
            ContextUtil.popContext(context);
            //Modified by DSM-2015x.5 for PDF Views (Defect Id #14783) - Ends
            String strBomName = (String)mpBom.get(DomainConstants.SELECT_NAME);
            String strBomRev = (String)mpBom.get(DomainConstants.SELECT_REVISION);
            //Modified by DSM(Sogeti)-2018x.5 for PDF Views Requirement  - Starts
            if(bGenDoc){
                BOMSubstituteSAPBuffer.append("<TD align ='left' width=\"60px\">"+validateString1(strBomName)+"</TD>");
            }
            else{
                BOMSubstituteSAPBuffer.append("<TD align ='left' width=\"60px\"><B>SF: </B>"+validateString1(strBomName)+"<br /><B>R: </B>"+validateString1(strBomRev)+"</TD>");
            }
            //Modified by DSM(Sogeti)-2018x.5 for PDF Views Requirement  - Ends
            String strBomTitle = (String)mpBom.get(pgV3Constants.SELECT_ATTRIBUTE_TITLE);
            //Added by DSM(Sogeti)-2015x.5 for PDF Views (Defect ID-16705) - Starts
            if(UIUtil.isNullOrEmpty(strBomTitle)){
                strBomTitle = DomainConstants.EMPTY_STRING;
            }
            //Added by DSM(Sogeti)-2015x.5 for PDF Views (Defect ID-16705) - Ends
            strBomTitle =strBomTitle.replaceAll("[<]","#LESS_THAN");
            strBomTitle =strBomTitle.replaceAll("[>]","#GREATER_THAN");
            //Modified by DSM-2015x.5 for PDF Views (Defect Id #14783) - Starts
            //strBomTitle =strBomTitle.replaceAll("#DENIED!","No Access");
            //Modified by DSM-2015x.5 for PDF Views (Defect Id #14783) - Ends
            //Modified by DSM(Sogeti)-2018x.5 for PDF Views Requirement  - Starts
            String strBomType = (String)mpBom.get(DomainConstants.SELECT_TYPE);
            String strBOMTypeValue = UINavigatorUtil.getAdminI18NString("Type", strBomType, context.getSession().getLanguage());
            String strBomId = (String)mpBom.get(DomainConstants.SELECT_ID);
            String strBOMSpecSubType = getSpecificationSubType(context,strBomId);
            BOMSubstituteSAPBuffer.append("<TD  width=\"80px\"><B>T: </B>"+validateString1(wrapCharTable(strBOMTypeValue,10))+"<br /><B>Ti: </B>"+validateString1(wrapCharTable(strBomTitle,10))+"</TD>");
            BOMSubstituteSAPBuffer.append("<TD  width=\"140px\"><B>SST: </B>"+validateString1(strBOMSpecSubType)+"<br /><B>OC: </B>" +validateString1(strOptComponent)+"</TD>");
            //Modified by DSM(Sogeti)-2018x.5 for PDF Views Requirement  - Endss
            BOMSubstituteSAPBuffer.append("</TR>");
        }catch (Exception e){
            e.printStackTrace();
        }
        long endTime = new Date().getTime();
        System.out.println("Total Time has taken by the getSubstituteTablewithData Method is-->"+(endTime-startTime));
        return BOMSubstituteSAPBuffer.toString();
    }
    //Added by DSM-2015x.2 for PDF Views (Req Id-11473,11998,12002,11999,11470,11471) - Ends
    //Added by DSM(Sogeti)-2015x.1.2 for FPP allinfo view defect-7319 on 18-Oct-2016 - Starts
    /**
     * This method is used to get connected Master Type for DSO objects
     * @param Context - context
     * @param String - Object Id
     * @return ArrayList - Connected Master objects
     * @throws Exception
     * */
    //Modified by DSM(Sogeti)-2018x.6 June CW 2022 for PDF Views (Defect-49089/49098) - Starts
    public static ArrayList getMasterObjectsForDSO(Context context, String strObjectId, String strObjectName) throws Exception {
        long startTime = new Date().getTime();
        ArrayList alMaster = null;
        String strConnectedIntermediateName = null;
        StringList slConnectedIntermediateIds = null;
        try {
            DomainObject domObject = DomainObject.newInstance(context, strObjectId);
            StringList slRelSels = new StringList(1);
            slRelSels.add(DomainConstants.SELECT_RELATIONSHIP_ID);
            //Modify by DSM(Sogeti) 2018x.6.1 Defect #43129 - Starts
            boolean hasReadAccess = domObject.checkAccess(context, (short) AccessConstants.cRead);
            if(hasReadAccess) {
                MapList mlBusObjectData = domObject.getRelatedObjects(context,
                        pgV3Constants.RELATIONSHIP_CLASSIFIEDITEM,  // Rel Pattern
                        pgV3Constants.TYPE_PARTFAMILY,    // Type Pattern
                        null,    // Object select
                        slRelSels,         // Rel select
                        true,        // to direction
                        false,        // from direction
                        (short)1,     // recursion level
                        null,        // object where clause
                        null);       // rel where clause
                if((null != mlBusObjectData) && (mlBusObjectData.size() >0 )) {
                    String strConnectionId = (String)((Map)mlBusObjectData.get(0)).get(DomainConstants.SELECT_RELATIONSHIP_ID);
                    String strMQLStmt = "print connection $1 select $2 dump $3;";
                    String slSelectable = "frommid["+pgV3Constants.RELATIONSHIP_PARTFAMILYREFERENCE+"].torel.to.id";
                    if(strConnectionId != null && !"".equals(strConnectionId)){
                        strConnectedIntermediateName = MqlUtil.mqlCommand(context, strMQLStmt, strConnectionId, slSelectable, "|");
                    }
                    if((UIUtil.isNotNullAndNotEmpty(strConnectedIntermediateName))){
                        slConnectedIntermediateIds = FrameworkUtil.split(strConnectedIntermediateName, "|");
                    }
                    if(slConnectedIntermediateIds != null) {
                        int iSize = slConnectedIntermediateIds.size();
                        if(iSize > 0) {
                            alMaster = new ArrayList(iSize);
                            for (int i=0; i < iSize; i++) {
                                alMaster.add((String)slConnectedIntermediateIds.get(i) + pgV3Constants.DUMP_CHARACTER + strObjectName);
                                //Modified by DSM(Sogeti)-2018x.6 June CW 2022 for PDF Views (Defect-49089/49098) - Ends
                            }
                        }
                    }
                }
            }
            //Modify by DSM(Sogeti) 2018x.6.1 Defect #43129 - Ends
        } catch(Exception ex) {
            ex.printStackTrace();
            throw ex;
        }
        long endTime = new Date().getTime();
        System.out.println("Total Time has taken by the getMasterObjectsForDSO Method is-->"+(endTime-startTime));
        return alMaster;
    }
    /**
     * This method is used to form the EBOM andSubstitute table for Object
     * @param iPSId
     * @param Context - context
     * @param ArrayList  - alMasterEBOM List of the Objects for which BOM and Substitute table needs to be created
     * @param String - strSubHeader SubHeader to be Added to table
     * @return StringBuilder which contains the data to form the EBOM and substitutes table
     */
    private  StringBuilder  getMasterBOMandSubstituteData(Context context, ArrayList alMasterEBOM, String  strSubHeader) throws Exception {
        long startTime = new Date().getTime();
        StringBuilder BOMSubstituteSAPBuffer=new StringBuilder();
        MapList mlMaster = new MapList();
        String strParentId = "";
        String strRelId = "";
        String strToId = "";
        String strpgChange = "";
        String strFindNumber = "";
        String strRefDesig = "";
        String strlevel = "";

        //Added by DSM-2018x.5 for PDF Views (Defect ID 32590) - Starts
        MapList mlObjListAlternate =null;
        Map<String,String> mpObjAlternate = null;
        //Provide the parametized type for this generic. This sonar rule not be applicable to below map
        //as it added map and maplist both types
        Map mpBOMAlternate = null;
        Map<String, String> mpAlternate = null;
        String strAlternate = null;
        //Added by DSM-2018x.5 for PDF Views (Defect ID 32590) - Ends

        //Added by DSM(Sogeti)-2015x.5.1 for PDF Views (Defect ID-5691) - Starts
        String strReleaseDate = "";
        String ctxRev = "";
        //Added by DSM(Sogeti)-2015x.5.1 for PDF Views (Defect ID-5691) - Ends

        StringList selectStmt = new StringList(6);
        selectStmt.add(DomainConstants.SELECT_NAME);
        selectStmt.add(DomainConstants.SELECT_TYPE);
        selectStmt.add(DomainConstants.SELECT_ID);
        selectStmt.add(pgV3Constants.SELECT_ATTRIBUTE_TITLE);
        selectStmt.add(DomainConstants.SELECT_CURRENT);
        //Modified for 2018x Upgrade - Stage attribute is replaced by Release Phase attribute in 18x OOTB.
        selectStmt.add(pgV3Constants.SELECT_ATTRIBUTE_RELEASE_PHASE);

        //Added by DSM(Sogeti)-2015x.5.1 for PDF Views (Defect ID-5691) - Starts
        selectStmt.add(DomainConstants.SELECT_REVISION);
        selectStmt.add(pgV3Constants.SELECT_ATTRIBUTE_RELEASE_DATE);
        //Added by DSM(Sogeti)-2015x.5.1 for PDF Views (Defect ID-5691) - Ends

        StringList selectStmtsRel = new StringList(7);
        selectStmtsRel.add(DomainRelationship.SELECT_TO_ID);
        selectStmtsRel.add(pgV3Constants.SELECT_ATTRIBUTE_PGCHANGE);
        selectStmtsRel.add(pgV3Constants.SELECT_ATTRIBUTE_FINDNUMBER);
        selectStmtsRel.add(pgV3Constants.SELECT_ATTRIBUTE_REFERENCEDESIGNATOR);
        selectStmtsRel.add(pgV3Constants.SELECT_ATTRIBUTE_PGOPTIONALCOMPONENT);
        //Added by DSM 2018x.5 for PDF Views Defect 32590 - Starts
        selectStmtsRel.add(pgV3Constants.SELECT_ATTRIBUTE_PGDENSITYUOM);
        selectStmtsRel.add(pgV3Constants.SELECT_ATTRIBUTE_PGONSHELFPRODUCTDENSITY);
        //Added by DSM(Sogeti)-2018x.6 June CW 2022 for PDF Views (Defect-49089/49098) - Starts
        selectStmtsRel.add(DomainConstants.SELECT_FROM_NAME);
        //Added by DSM(Sogeti)-2018x.6 June CW 2022 for PDF Views (Defect-49089/49098) - Ends
        String strOptComp = "";
        String strDensityUOM = DomainConstants.EMPTY_STRING;
        String  strProductDensity = DomainConstants.EMPTY_STRING;
        //Added by DSM 2018x.5 for PDF Views Defect 32590 - Ends
        //Added by DSM(Sogeti)-2018x.6 June CW 2022 for PDF Views (Defect-49089/49098) - Starts
        MapList tempList = new MapList();
        Map<String,MapList> datamap = new LinkedHashMap<>();
        String strMasterName = DomainConstants.EMPTY_STRING;
        //Added by DSM(Sogeti)-2018x.6 June CW 2022 for PDF Views (Defect-49089/49098) - Starts

        //Modified by DSM(Sogeti)-2018x.6 June CW 2022 for PDF Views (Defect-49089/49098) - Starts
        Set set = new LinkedHashSet();
        set.addAll(alMasterEBOM);
        alMasterEBOM.clear();
        alMasterEBOM.addAll(set);
        String strObjectId = DomainConstants.EMPTY_STRING;
        String strObjectName = DomainConstants.EMPTY_STRING;
        String data = DomainConstants.EMPTY_STRING;
        StringList list;
        //Modified by DSM(Sogeti)-2018x.6 June CW 2022 for PDF Views (Defect-49089/49098) - Ends
        try {
            if(null!=alMasterEBOM && alMasterEBOM.size() > 0) {
                for(int b=0; b<alMasterEBOM.size(); b++) {
                    //Modified by DSM(Sogeti)-2018x.6 June CW 2022 for PDF Views (Defect-49089/49098) - Starts
                    data =(String) alMasterEBOM.get(b);
                    list = StringUtil.split(data, pgV3Constants.DUMP_CHARACTER);
                    if(list.size() > 1) {
                        strObjectId = list.get(0);
                        strObjectName = list.get(1);
                    }	else {
                        strObjectId = DomainConstants.EMPTY_STRING;
                        strObjectName = DomainConstants.EMPTY_STRING;
                    }
                    //Modified by DSM(Sogeti)-2018x.6 June CW 2022 for PDF Views (Defect-49089/49098) - Ends
                    Map BOMPack=new HashMap();
                    BOMPack.put("emxExpandFilter","1");
                    BOMPack.put("ENCBOMRevisionCustomFilter", "As Stored");
                    BOMPack.put("objectId", strObjectId);
                    //Addded by DSM-2015x.2(Sogeti) for defect#9986,10000,10092 -Start
                    BOMPack.put("parentOID",strObjectId);
                    //Addded by DSM-2015x.2(Sogeti) for defect#9986,10000,10092 -Ends
                    String[] args = JPO.packArgs(BOMPack);
//					emxPart_mxJPO emxPart = new emxPart_mxJPO(context, args);
//					MapList mlEBOM=emxPart.getEBOMsWithRelSelectablesSB(context, args);
//Added for PDF Refactor
                    MapList mlEBOM =  (MapList)pgPDFViewHelper.executeMainClassMethod(context, "emxPart", "getEBOMsWithRelSelectablesSB", args);


                    for (Iterator iterator = mlEBOM.iterator(); iterator.hasNext();) {
                        Map mapObject = (Map) iterator.next();
                        strRelId = (String)mapObject.get(DomainRelationship.SELECT_ID);
                        strlevel = (String)mapObject.get(DomainConstants.SELECT_LEVEL);
                        strParentId = (String)mapObject.get(DomainConstants.SELECT_ID);
                        String[] relargs = new String[1];
                        relargs[0] = strRelId;
                        MapList mlToId= (MapList)DomainRelationship.getInfo(context, relargs,selectStmtsRel);
                        if(null != mlToId && mlToId.size()>0){
                            mlToId.addSortKey(pgV3Constants.SELECT_ATTRIBUTE_FINDNUMBER, "ascending", "String");
                            mlToId.sort();
                            for(int i=0;i<mlToId.size();i++) {
                                Map mData = (Map)mlToId.get(i);
                                strToId = (String)mData.get(DomainRelationship.SELECT_TO_ID);
                                strpgChange = (String)mData.get(pgV3Constants.SELECT_ATTRIBUTE_PGCHANGE);
                                strRefDesig = (String)mData.get(pgV3Constants.SELECT_ATTRIBUTE_REFERENCEDESIGNATOR);
                                strFindNumber = (String)mData.get(pgV3Constants.SELECT_ATTRIBUTE_FINDNUMBER);
                                strOptComp = (String)mData.get(pgV3Constants.SELECT_ATTRIBUTE_PGOPTIONALCOMPONENT);
                                //Added by DSM 2018x.5 for PDF Defect 32590- Starts
                                strDensityUOM = (String)mData.get(pgV3Constants.SELECT_ATTRIBUTE_PGDENSITYUOM);
                                strProductDensity = (String)mData.get(pgV3Constants.SELECT_ATTRIBUTE_PGONSHELFPRODUCTDENSITY);
                                //Added by DSM 2018x.5 for PDF Defect 32590- Ends
                                //Added by DSM(Sogeti)-2018x.6 June CW 2022 for PDF Views (Defect-49089/49098) - Starts
                                strMasterName = (String) mData.get(DomainConstants.SELECT_FROM_NAME);
                                //Added by DSM(Sogeti)-2018x.6 June CW 2022 for PDF Views (Defect-49089/49098) - Ends
                            }
                        }
                        DomainObject dmoBom = DomainObject.newInstance(context, strToId);
                        Map mpBom = dmoBom.getInfo(context, selectStmt);
                        mpBom.put(pgV3Constants.SELECT_ATTRIBUTE_PGCHANGE, strpgChange);
                        mpBom.put(pgV3Constants.SELECT_ATTRIBUTE_FINDNUMBER, strFindNumber);
                        mpBom.put(DomainRelationship.SELECT_ID, strRelId);
                        mpBom.put(DomainConstants.SELECT_LEVEL, strlevel);
                        mpBom.put("ParentId", strParentId);
                        mpBom.put("RefDesig", strRefDesig);
                        mpBom.put("OC", strOptComp);
                        //Added by DSM(Sogeti)-2018x.6 June CW 2022 for PDF Views (Defect-49089/49098) - Starts
                        tempList = datamap.getOrDefault( (strMasterName + pgV3Constants.DUMP_CHARACTER + strObjectName), new MapList());
                        tempList.add(mpBom);
                        tempList.addSortKey(pgV3Constants.SELECT_ATTRIBUTE_FINDNUMBER, pgPDFViewConstants.CONST_ASCENDING, pgPDFViewConstants.CONST_STRING);
                        tempList.sort();
                        datamap.put((strMasterName + pgV3Constants.DUMP_CHARACTER + strObjectName), tempList);
                        //Added by DSM(Sogeti)-2018x.6 June CW 2022 for PDF Views (Defect-49089/49098) - Ends
                    }
                }
            }

            //Added by DSM(Sogeti)-2018x.6 June CW 2022 for PDF Views (Defect-49089/49098) - Starts
            Iterator iterators = datamap.entrySet().iterator();
            Map.Entry mapEntry;
            String headerName;
            MapList dataList;
            StringList objectName;
            while (iterators.hasNext())
            {
                mapEntry = (Map.Entry) iterators.next();
                headerName = (String) mapEntry.getKey();
                dataList =  (MapList) mapEntry.getValue();
                objectName = StringUtil.split(headerName,pgV3Constants.DUMP_CHARACTER);
                if(objectName.size() > 1){
                    headerName = "(" + objectName.get(0) + " - Master of " + objectName.get(1) + ")";
                }
                else{
                    headerName = DomainConstants.EMPTY_STRING;
                }


                if(null!=dataList && !dataList.isEmpty()) {
                    BOMSubstituteSAPBuffer.append("<TR><TD><TABLE class=\"WordWrappdf\" cellspacing=\"0\" width=\"1000px\" id=\"BOM\">");
                    BOMSubstituteSAPBuffer.append("<thead><TR>");
                    //Modified (colspan) by DSM(Sogeti)-2015x.5.1 for PDF Views (5691)
                    //Modified by DSM(Sogeti)-2018x.1.1 for PDF Views (Defect - 26220) - Starts
                    //Modified by DSM(Sogeti)-2018x.6 June CW 2022 for PDF Views (Defect-49089/49098) - Starts
                    BOMSubstituteSAPBuffer.append("<TR><TD class=\"new\" colspan='13'><B><font size ='4'>Bill of Materials "+strSubHeader + " "+ headerName +" </font></B></TD></TR>");
                    //Modified by DSM(Sogeti)-2018x.6 June CW 2022 for PDF Views (Defect-49089/49098) - Ends
                    //Modified by DSM(Sogeti)-2018x.1.1 for PDF Views (Defect - 26220) - Ends
                    //Modified by DSM(Sogeti)-2018x.3 for PDF Views Req 32593 Starts
                    //Modified by DSM(Sogeti)-2018x.5 for PDF Views Defect #35021 - Starts
                    BOMSubstituteSAPBuffer.append("<TH  align=\"center\" width=\"700\"><B>Name(N)</B><BR></BR><B>Rev(R)</B></TH>");
                    //Modified by DSM(Sogeti)-2018x.5 for PDF Views Defect #35021 - Ends
                    //Modified by DSM(Sogeti)-2018x.3 for PDF Views Req 32593 Ends
                    BOMSubstituteSAPBuffer.append("<TH align=\"center\" width=\"45\"><B>Chg</B></TH>");
                    BOMSubstituteSAPBuffer.append("<TH  align=\"center\" width=\"35\"><B>F/N</B></TH>");
                    BOMSubstituteSAPBuffer.append("<TH align=\"center\"  width=\"130\"><B>Title</B></TH>");
                    BOMSubstituteSAPBuffer.append("<TH align=\"center\" width=\"90\"><B>Type</B></TH>");
                    //Modified by DSM 2018x.5 for PDF Views Defect 32590 - Starts
                    //Modified by DSM(Sogeti)-2018x.5 for PDF Views Requirement  - Starts
                    BOMSubstituteSAPBuffer.append("<TH align=\"center\" width=\"65\"><B>Substitute Parts (SP)</B> <BR></BR> <B>Alternate (Alt)</B></TH>");
                    //Modified by DSM(Sogeti)-2018x.5 for PDF Views Requirement  - Ends
                    //Modified by DSM 2018x.5 for PDF Views Defect 32590 - End
                    BOMSubstituteSAPBuffer.append("<TH align=\"center\" width=\"35\"><B>Qty</B></TH>");
                    BOMSubstituteSAPBuffer.append("<TH align=\"center\" width=\"100\"><B>Base Unit of Measure</B></TH>");
                    //Modified by DSM 2018x.5 for PDF Views Defect 32590 - Starts
                    BOMSubstituteSAPBuffer.append("<TH align=\"center\" width=\"180\"><B>EBOM Comments</B></TH>");
                    //Modified by DSM 2018x.5 for PDF Views Defect 32590 - End
                    //Added by DSM(Sogeti)-2015x.5.1 for PDF Views (Defect ID-5691) - Starts
                    //Modified by DSM(Sogeti)-2015x.5.1 for PDF Views (Def - 17089) - Starts
                    if(strParentObjType.equals(pgV3Constants.TYPE_FINISHEDPRODUCTPART) && strFPPviewType.equals("allinfo")) {
                        //Modified by DSM(Sogeti)-2018x.3 for PDF Views Req 32593 Starts
                        //Modified by DSM(Sogeti)-2018x.5 for PDF Views Requirement  - Starts
                        BOMSubstituteSAPBuffer.append("<TH align=\"center\" width=\"75\"><B>Release Date</B></TH>");
                        //Modified by DSM(Sogeti)-2018x.5 for PDF Views Requirement  - Ends
                        //Modified by DSM(Sogeti)-2018x.3 for PDF Views Req 32593 Ends
                    } //Modified by DSM(Sogeti)-2015x.5.1 for PDF Views (Def - 17089) - Ends
                    //Added by DSM(Sogeti)-2015x.5.1 for PDF Views (Defect ID-5691) - Ends
                    //Modified by DSM 2018x.5 for PDF Views Defect 32590 - Starts
                    if(strParentObjType.equals(pgV3Constants.TYPE_FINISHEDPRODUCTPART) ) {
                        BOMSubstituteSAPBuffer.append("<TH align=\"center\" width=\"75\"><B>Phase  (Pha)</B><BR></BR> <B>State (St)</B></TH>");
                    }
                    else {
                        BOMSubstituteSAPBuffer.append("<TH align=\"center\" width=\"75\"><B>State</B></TH>");
                        BOMSubstituteSAPBuffer.append("<TH align=\"center\" width=\"75\"><B>Phase</B></TH>");
                    }
                    //Modified by DSM 2018x.5 for PDF Views Defect 32590 - Starts
                    if(strParentObjType.equals(pgV3Constants.TYPE_FINISHEDPRODUCTPART)){
                        BOMSubstituteSAPBuffer.append("<TH align=\"center\" width=\"95\"><B>Ref Des(RD)</B><BR></BR><B>On-Shelf</B><BR></BR><B>Product</B><BR></BR><B>Density(OSPD)</B></TH>");
                        BOMSubstituteSAPBuffer.append("<TH align=\"center\" width=\"95\"><B>Density Unit Of</B><BR></BR><B>Measure(DUoM)</B> <BR></BR><B>Optional</B><BR></BR><B>Components(OC)</B> </TH>");
                    }
                    else {
                        if(strSubHeader.equals("Master Customer Unit")){
                            BOMSubstituteSAPBuffer.append("<TH align=\"center\" width=\"80\"><B>Ref Des(RD)<BR></BR>Optional<BR></BR>Components(OC)</B></TH>");
                        }
                        else{
                            BOMSubstituteSAPBuffer.append("<TH align=\"center\" width=\"70\"><B>Ref Des</B></TH>");
                        }
                    }
                    //Modified by DSM 2018x.5 for PDF Views Defect 32590 - Ends
                    BOMSubstituteSAPBuffer.append("</TR></thead>");
                    for (Iterator iterator = dataList.iterator(); iterator.hasNext();) {
                        Map mapCUP = (Map) iterator.next();
                        String stridConn = (String)mapCUP.get("id[connection]");
                        String strid = (String)mapCUP.get(DomainConstants.SELECT_ID);
                        String strLevel = (String)mapCUP.get(DomainConstants.SELECT_LEVEL);
                        String stParentId = (String)mapCUP.get("ParentId");
                        String strState = (String)mapCUP.get(DomainConstants.SELECT_CURRENT);
                        //Modified for 2018x Upgrade - Stage attribute is replaced by Release Phase attribute in 18x OOTB.
                        String strStage = (String)mapCUP.get(pgV3Constants.SELECT_ATTRIBUTE_RELEASE_PHASE);
                        String strRefDes = (String)mapCUP.get("RefDesig");
                        String strOC = (String)mapCUP.get("OC");
                        //Added by DSM(Sogeti)-2015x.5.1 for PDF Views (Defect ID-5691) - Starts
                        strReleaseDate =  pgIPMPDFViewUtil_mxJPO.getFormattedDate((String) mapCUP.get(pgV3Constants.SELECT_ATTRIBUTE_RELEASE_DATE));
                        ctxRev = (String) mapCUP.get(DomainConstants.SELECT_REVISION);
                        //Added by DSM(Sogeti)-2015x.5.1 for PDF Views (Defect ID-5691) - Ends

                        //Name
                        String strName = (String)mapCUP.get(DomainConstants.SELECT_NAME);
                        BOMSubstituteSAPBuffer.append("<TR align=\"center\" class=\"pdf\">");
                        //Modified by DSM(Sogeti)-2018x.3 for PDF Views Req 32593 Starts
                        //Modified by DSM(Sogeti)-2018x.5 for PDF Views Defect #35021 - Starts
                        BOMSubstituteSAPBuffer.append("<TD width=\"700\"><B> N:</B>"+validateString1(strName)+"<BR></BR><B>R:</B>"+validateString1(ctxRev)+"</TD>");
                        //Modified by DSM(Sogeti)-2018x.5 for PDF Views Defect #35021 - Ends
                        //Modified by DSM(Sogeti)-2018x.3 for PDF Views Req 32593 Ends
                        //Chg
                        MapList mlObjListChg = new MapList();
                        Map mpObjChg = new HashMap();
                        mpObjChg.put("id[connection]",stridConn);
                        mpObjChg.put(DomainConstants.SELECT_LEVEL,strLevel);
                        mpObjChg.put(DomainConstants.SELECT_ID,strid);
                        mlObjListChg.add(mpObjChg);
                        Map mpBOMChg=new HashMap();
                        mpBOMChg.put("objectList", mlObjListChg);
                        //Modified for PNGUPGRADE 2018x PDF nullpointer  OOTB chnage in  getFindNumberSB START
                        Map mpParamObjMap = new HashMap();
                        mpParamObjMap.put("BOMViewMode","");
                        mpParamObjMap.put("selectedTable","");
                        mpBOMChg.put("paramList", mpParamObjMap);
                        //Modified for PNGUPGRADE 2018x PDF nullpointer  OOTB chnage in  getFindNumberSB END
                        String[] argsChg = JPO.packArgs(mpBOMChg);
//					emxPart_mxJPO objemxPartChg = new emxPart_mxJPO(context, argsChg);
//					Vector vEBOMChg = (Vector)objemxPartChg.getChgColumnData(context, argsChg);
//Added for PDF Refactor
                        Vector vEBOMChg = (Vector)pgPDFViewHelper.executeMainClassMethod(context, "emxPart", "getChgColumnData", argsChg);
                        String strChg = null;
                        if((vEBOMChg !=null) && (vEBOMChg.size() >0))
                            strChg = (String)vEBOMChg.get(0);
                        BOMSubstituteSAPBuffer.append("<TD width=\"45\">"+validateString1(strChg)+"</TD>");
                        //Seq
//					Vector vEBOMFindNumber = (Vector)objemxPartChg.getFindNumberSB(context, argsChg);
//Added for PDF Refactor
                        Vector vEBOMFindNumber = (Vector)pgPDFViewHelper.executeMainClassMethod(context, "emxPart", "getFindNumberSB", argsChg);
                        if((vEBOMFindNumber !=null) && (vEBOMFindNumber.size() >0))
                            strFindNumber = (String)vEBOMFindNumber.get(0);
                        BOMSubstituteSAPBuffer.append("<TD width=\"35\">"+validateString1(strFindNumber)+"</TD>");
                        //Title
                        String strTitle = (String)mapCUP.get(pgV3Constants.SELECT_ATTRIBUTE_TITLE);
                        //Added by DSM(Sogeti)-2015x.5 for PDF Views (Defect ID-16705) - Starts
                        if(UIUtil.isNullOrEmpty(strTitle)){
                            strTitle = DomainConstants.EMPTY_STRING;
                        }
                        if(UIUtil.isNullOrEmpty(strRefDes)){
                            strRefDes = DomainConstants.EMPTY_STRING;
                        }
                        //Added by DSM(Sogeti)-2015x.5 for PDF Views (Defect ID-16705) - Ends
                        strTitle =strTitle.replaceAll("[<]","#LESS_THAN");
                        strTitle =strTitle.replaceAll("[>]","#GREATER_THAN");
                        BOMSubstituteSAPBuffer.append("<TD width=\"130\">"+validateString1(strTitle)+"</TD>");
                        //Type
                        String strType1 = (String)mapCUP.get(DomainConstants.SELECT_TYPE);
                        String strValue = UINavigatorUtil.getAdminI18NString("Type", strType1, context.getSession().getLanguage());
                        BOMSubstituteSAPBuffer.append("<TD width=\"90\">"+validateString1(strValue)+"</TD>");
                        //Substitution
                        Map mpParam = new HashMap();
                        mpParam.put("reportFormat","pdf");
                        mpParam.put("objectId",stParentId);
                        MapList mlObjList = new MapList();
                        Map mpObj = new HashMap();
                        mpObj.put("id[connection]",stridConn);
                        mpObj.put(DomainConstants.SELECT_ID,strid);
                        mpObj.put(DomainConstants.SELECT_LEVEL,strLevel);
                        mlObjList.add(mpObj);
                        Map mpBOMSubs=new HashMap();
                        mpBOMSubs.put("paramList",mpParam);
                        mpBOMSubs.put("objectList", mlObjList);
                        String[] argsSubs = JPO.packArgs(mpBOMSubs);
//					emxPart_mxJPO objemxPart = new emxPart_mxJPO(context, argsSubs);
//					Vector vEBOMSub = (Vector)objemxPart.getColumnSubstitutePartsFlagData(context, argsSubs);
//Added for PDF Refactor
                        Vector vEBOMSub = (Vector)pgPDFViewHelper.executeMainClassMethod(context, "emxPart", "getColumnSubstitutePartsFlagData", argsSubs);
                        String strSub = null;
                        if((vEBOMSub !=null) && (vEBOMSub.size() >0))
                            strSub = (String)vEBOMSub.get(0);

                        //Modified by DSM 2018x.5 for PDF Views Defect 32590 - Starts
                        mpAlternate = new HashMap<String,String>();
                        mpAlternate.put("reportFormat","pdf");
                        mpAlternate.put("objectId",stParentId);
                        mlObjListAlternate = new MapList();
                        mpObjAlternate = new HashMap<String,String>();
                        mpObjAlternate.put("id",strid);
                        mlObjListAlternate.add(mpObjAlternate);
                        mpBOMAlternate=new HashMap();
                        mpBOMAlternate.put("paramList",mpAlternate);
                        mpBOMAlternate.put("objectList", mlObjListAlternate);
                        String[] argsAlt = JPO.packArgs(mpBOMAlternate);
                        Vector vEBOMAlternate = (Vector)pgPDFViewHelper.executeMainClassMethod(context, "emxPart", "getColumnAlternateData", argsAlt);
                        if((vEBOMAlternate !=null) && (vEBOMAlternate.size() >0) )
                            strAlternate = (String)vEBOMAlternate.get(0);
                        //Modified by DSM 2018x.5 for PDF Views Defect 32590 - Starts -ENDS
                        //Modified by DSM(Sogeti)-2018x.5 for PDF Views Requirement  - Starts
                        String strSubPartName = DomainConstants.EMPTY_STRING;
                        StringList slSubPartNames = getSubstitutePartName(context,mapCUP,pgV3Constants.RELATIONSHIP_EBOM);
                        if(slSubPartNames != null && slSubPartNames.size()>0)
                        {
                            strSubPartName = FrameworkUtil.join(slSubPartNames,",");
                        }
                        //Modified by DSM(Sogeti)-2018x.5 for PDF Views Requirement  - Ends
                        //Modified by DSM 2018x.5 for PDF Views Defect 32590 - Starts
                        if( strParentObjType.equals(pgV3Constants.TYPE_FINISHEDPRODUCTPART) ) {
                            //Modified by DSM(Sogeti)-2018x.5 for PDF Views Requirement  - Starts
                            BOMSubstituteSAPBuffer.append("<TD width=\"85\"><B>SP:</B>"+validateString1(strSubPartName)+"<BR></BR><B>Alt:</B>"+validateString1(strAlternate)+"</TD>");
                            //Modified by DSM(Sogeti)-2018x.5 for PDF Views Requirement  - Ends
                        }
                        else {
                            BOMSubstituteSAPBuffer.append("<TD width=\"65\">"+validateString1(strSub)+"</TD>");
                        }
                        //Modified by DSM 2018x.5 for PDF Views Defect 32590 - Ends
                        //Qty
                        Map mpParamQty = new HashMap();
                        mpParamQty.put("reportFormat","emxPart:getEBOMsWithRelSelectablesSB");
                        MapList mlObjListQty = new MapList();
                        Map mpObjQty = new HashMap();
                        mpObjQty.put("id[connection]",stridConn);
                        mlObjListQty.add(mpObjQty);
                        Map mpBOMQty=new HashMap();
                        mpBOMQty.put("paramList",mpParamQty);
                        mpBOMQty.put("objectList", mlObjListQty);
                        String[] argsQty = JPO.packArgs(mpBOMQty);
//					emxPart_mxJPO objemxPartQty = new emxPart_mxJPO(context, argsQty);
//					Vector vEBOMQty = (Vector)objemxPartQty.getQuantity(context, argsQty);
//Added for PDF Refactor
                        Vector vEBOMQty = (Vector)pgPDFViewHelper.executeMainClassMethod(context, "emxPart", "getQuantity", argsQty);
                        String strQty = null;
                        if((vEBOMQty !=null) && (vEBOMQty.size() >0))
                            strQty = (String)vEBOMQty.get(0);
                        BOMSubstituteSAPBuffer.append("<TD width=\"35\">"+validateString1(strQty)+"</TD>");
                        //Base Unit of Measure
                        Map settingsMap = new HashMap();
                        settingsMap.put("DSOPickListRelationshipName","relationship_pgPDTemplatestopgPLIBUOM");
                        settingsMap.put("DSOPickListAttribute","attribute_pgBaseUnitOfMeasure");
                        Map columnMap = new HashMap();
                        columnMap.put("settings",settingsMap);
                        MapList mlObjListBUOM = new MapList();
                        Map mpObjBUOM = new HashMap();
                        mpObjBUOM.put(DomainConstants.SELECT_ID,strid);
                        mlObjListBUOM.add(mpObjBUOM);
                        Map paramMap=new HashMap();
                        Map mpBOMBUOM=new HashMap();
                        mpBOMBUOM.put("columnMap",columnMap);
                        mpBOMBUOM.put("objectList", mlObjListBUOM);
                        mpBOMBUOM.put("paramList", paramMap);
                        String[] argsBUOM = JPO.packArgs(mpBOMBUOM);
//					emxCPNProductData_mxJPO objemxPartBUOM = new emxCPNProductData_mxJPO(context, argsBUOM);
//					Vector vEBOMBUOM = (Vector)objemxPartBUOM.getColumnPickListData(context, argsBUOM);
//Added for PDF Refactor
                        Vector vEBOMBUOM = (Vector)pgPDFViewHelper.executeMainClassMethod(context, "emxCPNProductData", "getColumnPickListData", argsBUOM);
                        String strBUOM = null;
                        if((vEBOMBUOM !=null) && (vEBOMBUOM.size() >0))
                            strBUOM = (String)vEBOMBUOM.get(0);
                        BOMSubstituteSAPBuffer.append("<TD width=\"100\">"+validateString1(strBUOM)+"</TD>");
                        //Comments
//					Vector vEBOMComments = (Vector)objemxPartChg.getCommentColumnDataFinishedProductForDSO(context, argsChg);
//Added for PDF Refactor
                        Vector vEBOMComments = (Vector)pgPDFViewHelper.executeMainClassMethod(context, "emxPart", "getCommentColumnDataFinishedProductForDSO", argsChg);
                        String strComments = null;
                        if((vEBOMComments !=null) && (vEBOMComments.size() >0))
                            strComments = (String)vEBOMComments.get(0);
                        if(UIUtil.isNotNullAndNotEmpty(strComments)) {
                            strComments =strComments.replaceAll("[<]","#LESS_THAN");
                            strComments =strComments.replaceAll("[>]","#GREATER_THAN");
                        }
                        //Added by DSM(Sogeti)-2015x.5 for PDF Views (Defect ID-16705) - Ends
                        else{
                            strRefDes = DomainConstants.EMPTY_STRING;
                        }
                        //Added by DSM(Sogeti)-2015x.5 for PDF Views (Defect ID-16705) - Ends
                        BOMSubstituteSAPBuffer.append("<TD width=\"180\">"+validateString1(strComments)+"</TD>");
                        //Added by DSM(Sogeti)-2015x.5.1 for PDF Views (Defect ID-5691) - Starts
                        //Modified by DSM(Sogeti)-2015x.5.1 for PDF Views (Def - 17089) - Starts
                        if(strParentObjType.equals(pgV3Constants.TYPE_FINISHEDPRODUCTPART) && strFPPviewType.equals("allinfo")) {
                            //Modified by DSM(Sogeti)-2018x.3 for PDF Views Req 32593 Starts
                            //Modified by DSM(Sogeti)-2018x.5 for PDF Views Requirement  - Starts
                            BOMSubstituteSAPBuffer.append("<TD width=\"160\">"+validateString1(strReleaseDate)+"</TD>");
                            //Modified by DSM(Sogeti)-2018x.5 for PDF Views Requirement  - Ends
                            //Modified by DSM(Sogeti)-2018x.3 for PDF Views Req 32593 Ends
                        } //Modified by DSM(Sogeti)-2015x.5.1 for PDF Views (Def - 17089) - Ends
                        //Added by DSM(Sogeti)-2015x.5.1 for PDF Views (Defect ID-5691) - Ends
                        //State

                        //Modified by DSM 2018x.5 for PDF Views Defect 32590 - Starts
                        if(strParentObjType.equals(pgV3Constants.TYPE_FINISHEDPRODUCTPART)) {
                            BOMSubstituteSAPBuffer.append("<TD width=\"75\"><B>Pha:</B>"+validateString1(strStage)+"<BR></BR><B>St:</B>"+validateString1(strState)+"</TD>");
                        }
                        else {
                            BOMSubstituteSAPBuffer.append("<TD width=\"75\">"+validateString1(strState)+"</TD>");
                            //Stage
                            BOMSubstituteSAPBuffer.append("<TD width=\"75\">"+validateString1(strStage)+"</TD>");
                        }
                        //Modified by DSM 2018x.5 for PDF Views Defect 32590 - Ends
                        //Ref Des
                        String strRefDe  =strRefDes.replaceAll("[<]","#LESS_THAN");
                        strRefDe = strRefDe.replaceAll("[>]","#GREATER_THAN");


                        //Modified by DSM 2018x.5 for PDF Views Defect 32590 - Starts
                        if( strParentObjType.equals(pgV3Constants.TYPE_FINISHEDPRODUCTPART) ){
                            BOMSubstituteSAPBuffer.append("<TD width=\"95\" align=\"left\" valign=\"top\"><B>RD:</B>"+validateString1(strRefDe)+"<BR></BR><B>OSPD:</B>"+validateString1(strProductDensity)+"</TD>");
                            BOMSubstituteSAPBuffer.append("<TD width=\"95\" align=\"left\" valign=\"top\"><B>DUoM:</B>"+validateString1(strDensityUOM)+"<BR></BR><B>OC:</B>"+validateString1(strOptComp)+"</TD>");
                        }
                        else {
                            if(strSubHeader.equals("Master Customer Unit")){
                                BOMSubstituteSAPBuffer.append("<TD width=\"80\" align=\"left\" valign=\"top\"><B>RD:</B>"+validateString1(strRefDe)+"<BR></BR><B>OC:</B>"+validateString1(strOC)+"</TD>");
                            }
                            else{
                                BOMSubstituteSAPBuffer.append("<TD width=\"70\">"+validateString1(strRefDe)+"</TD>");
                            }
                        }
                        //Modified by DSM 2018x.5 for PDF Views Defect 32590 - Ends
                        BOMSubstituteSAPBuffer.append("</TR>");
                    }
                    BOMSubstituteSAPBuffer.append("</TABLE><TR><TD><br /></TD></TR></TD></TR>");
                    // MCUP Substitute
                    int cntTUP = 0;
                    boolean bTUPTable = false;
                    for (Iterator iterator = dataList.iterator(); iterator.hasNext();) {
                        Map mapFPP = (Map) iterator.next();
                        String stridConn = (String)mapFPP.get("id[connection]");
                        String strLevel = (String)mapFPP.get(DomainConstants.SELECT_LEVEL);
                        strParentId = (String)mapFPP.get("ParentId");
                        String strid = strParentId;
                        Map mpParam = new HashMap();
                        mpParam.put("reportFormat","pdf");
                        mpParam.put("objectId",strid);
                        MapList mlObjList = new MapList();
                        Map mpObj = new HashMap();
                        mpObj.put("id[connection]",stridConn);
                        mpObj.put(DomainConstants.SELECT_ID,strid);
                        mpObj.put(DomainConstants.SELECT_LEVEL,strLevel);
                        mlObjList.add(mpObj);
                        Map mpBOMSubs=new HashMap();
                        mpBOMSubs.put("paramList",mpParam);
                        mpBOMSubs.put("objectList", mlObjList);
                        String[] argsSubs = JPO.packArgs(mpBOMSubs);
//					emxPart_mxJPO objemxPart = new emxPart_mxJPO(context, argsSubs);
//					Vector vEBOMSub = (Vector)objemxPart.getColumnSubstitutePartsFlagData(context, argsSubs);
//Added for PDF Refactor
                        Vector vEBOMSub = (Vector)pgPDFViewHelper.executeMainClassMethod(context, "emxPart", "getColumnSubstitutePartsFlagData", argsSubs);
                        String strSub = null;
                        if((vEBOMSub !=null) && (vEBOMSub.size() >0))
                            strSub = (String)vEBOMSub.get(0);
                        if("Yes".equalsIgnoreCase(strSub)) {
                            Map mpObjSl = new HashMap();mpObjSl.put("relId",stridConn);
                            String[] argSubs = JPO.packArgs(mpObjSl);
//						emxPart_mxJPO obemxPart = new emxPart_mxJPO(context, argSubs);
//						MapList mlSub = (MapList)obemxPart.getTableEBOMPartsSubstituteList(context, argSubs);
//Added for PDF Refactor
                            MapList mlSub = (MapList)pgPDFViewHelper.executeMainClassMethod(context, "emxPart", "getTableEBOMPartsSubstituteList", argSubs);
                            cntTUP++;
                            if( cntTUP == 1)
                            {
                                bTUPTable = true;
                                BOMSubstituteSAPBuffer.append("<TR><TD><TABLE class=\"WordWrappdf\" cellspacing=\"0\" width=\"1000px\" id=\"BOM\">");
                                BOMSubstituteSAPBuffer.append("<thead>");
                                //Modified by DSM(Sogeti)-2018x.1.1 for PDF Views Defect 26220  - Starts
                                //Modified by DSM(Sogeti)-2018x.5 for PDF Views Requirement  - Starts
                                //Modified by DSM(Sogeti)-2018x.6 June CW 2022 for PDF Views (Defect-49089/49098) - Starts
                                BOMSubstituteSAPBuffer.append("<TR><TD class=\"new\"  colspan='14'><B><font size ='4'>Substitutes - "+strSubHeader+ " " + headerName+" </font></B></TD></TR>");
                                //Modified by DSM(Sogeti)-2018x.6 June CW 2022 for PDF Views (Defect-49089/49098) - Ends
                                //Modified by DSM(Sogeti)-2018x.5 for PDF Views Requirement  - Ends
                                //Modified by DSM(Sogeti)-2018x.1.1 for PDF Views Defect 26220  - Ends
                                //Modified by DSM(Sogeti)-2018x.5 for PDF Views Defect #35021 - Starts
                                BOMSubstituteSAPBuffer.append("<TR align='center'><TH align ='left' width=\"700\"><B>Substitute<br />Parts(SP)<br />Rev(R)</B></TH>");
                                //Modified by DSM(Sogeti)-2018x.5 for PDF Views Defect #35021 - Ends
                                //Added by DSM(Sogeti)-2018x.5 for PDF Views Requirement  - Starts
                                BOMSubstituteSAPBuffer.append("<TH width=\"60px\"><B>Chg</B></TH>");
                                //Added by DSM(Sogeti)-2018x.5 for PDF Views Requirement  - Ends
                                BOMSubstituteSAPBuffer.append("<TH align ='center' width=\"60\"><B>Substitution<br/>Combination<br/>Number<br/>(SCN)<br/>Title</B></TH>");
                                BOMSubstituteSAPBuffer.append("<TH align ='left' width=\"140\"><B>Type(T)<br />Specification<br />SubType(SST)</B></TH>");
                                BOMSubstituteSAPBuffer.append("<TH width=\"50\"><B>QTY</B></TH>");
                                BOMSubstituteSAPBuffer.append("<TH width=\"50\"><B>Base<br />Unit<br />of<br />Measure</B></TH>");
                                BOMSubstituteSAPBuffer.append("<TH width=\"50\"><B>Valid<br />Start<br />Date</B></TH>");
                                BOMSubstituteSAPBuffer.append("<TH width=\"50\"><B>Valid<br />Until<br />Date</B></TH>");
                                //Modified by DSM(Sogeti)-2018x.1.1 for PDF Views (Defect - 26220) - Starts
                                //BOMSubstituteSAPBuffer.append("<TH width=\"50\"><B>Ref<br />Des</B></TH>");
                                //Modified by DSM(Sogeti)-2018x.5 for PDF Views Requirement  - Starts
                                BOMSubstituteSAPBuffer.append("<TH align=\"center\" width=\"80\"><B>Ref Des</B></TH>");
                                //Modified by DSM(Sogeti)-2018x.5 for PDF Views Requirement  - Ends
                                // Modified by DSM(Sogeti)-2018x.1.1 for PDF Views (Defect - 26220) - Ends
                                BOMSubstituteSAPBuffer.append("<TH width=\"180\"><B>Comments</B></TH>");
                                //Added by DSM(Sogeti)-2018x.1.1 for PDF Views (Defect - 26220) - Starts
                                //Modified by DSM(Sogeti)-2018x.3 for PDF Views (Requirement #32592) - Starts
                                //Modified by DSM(Sogeti)-2018x.5 for PDF Views Requirement  - Starts
                                BOMSubstituteSAPBuffer.append("<TH align=\"center\" width=\"50\"><B>Release Date</B></TH>");
                                //Modified by DSM(Sogeti)-2018x.5 for PDF Views Requirement  - Ends
                                //Modified by DSM(Sogeti)-2018x.3 for PDF Views (Requirement #32592) - Ends
                                //Added by DSM(Sogeti)-2018x.1.1 for PDF Views (Defect - 26220) - Ends
                                BOMSubstituteSAPBuffer.append("<TH align ='left' width=\"60\"><B>Substitute<br />For(SF)<br />Rev(R)</B></TH>");
                                //Modified by DSM(Sogeti)-2018x.5 for PDF Views Requirement  - Starts
                                BOMSubstituteSAPBuffer.append("<TH width=\"80px\"><B>Type (T)</B>  <BR></BR><B>Title (Ti)</B></TH>");
                                BOMSubstituteSAPBuffer.append("<TH width=\"140px\"><B>Specification<br />SubType(SST) <br /> Optional<br />Components(OC)</B></TH>");
                                //Modified by DSM(Sogeti)-2018x.5 for PDF Views Requirement  - Ends
                                //Commented by DSM(Sogeti)-2018x.1.1 for PDF Views (Defect - 26220) - Starts
                                //BOMSubstituteSAPBuffer.append("<TH align ='left' width=\"140\"><B>Type(T)<br />Specification<br />SubType(SST)</B></TH>");
                                //Commented by DSM(Sogeti)-2018x.1.1 for PDF Views (Defect - 26220) - Ends
                                BOMSubstituteSAPBuffer.append("</TR></thead>");
                            }
                            StringList selectStmtSub = new StringList(5);
                            selectStmtSub.add(DomainConstants.SELECT_TYPE);
                            selectStmtSub.add(DomainConstants.SELECT_REVISION);
                            selectStmtSub.add(DomainConstants.SELECT_NAME);
                            //Modified for 2018x Upgrade - Stage attribute is replaced by Release Phase attribute in 18x OOTB.
                            selectStmtSub.add(pgV3Constants.SELECT_ATTRIBUTE_RELEASE_PHASE);
                            selectStmtSub.add(pgV3Constants.SELECT_ATTRIBUTE_TITLE);
                            for (Iterator objIterator = mlSub.iterator(); objIterator.hasNext();) {
                                Map mapSub = (Map) objIterator.next();
                                String strSubId = (String)mapSub.get(DomainConstants.SELECT_ID);
                                String strSubQty = (String)mapSub.get(pgV3Constants.SELECT_ATTRIBUTE_QUANTITY);
                                String strSubComments = (String)mapSub.get(pgV3Constants.SELECT_ATTRIBUTE_COMMENT);
                                String strSubReferenceDesignator = (String)mapSub.get(pgV3Constants.SELECT_ATTRIBUTE_REFERENCEDESIGNATOR);
                                String strOriginatingSource = (String)mapSub.get(pgV3Constants.SELECT_ATTRIBUTE_PGORIGINATINGSOURCE);
                                String strBaseUnitOfMeasure = (String)mapSub.get(pgV3Constants.SELECT_ATTRIBUTE_PGBASEUNITOFMEASURE);
                                String strSubUoM = (String)mapSub.get("UoM");
                                String strSubValidUntil = (String)mapSub.get("ValidUntil");
                                String strSubSCN = (String)mapSub.get("SCN");
                                String strEBOMSubstituteRelId = (String)mapSub.get("EBOMSubstituteRelId");
                                String strBaseUnitOfMeasurePickList = (String)mapSub.get("pgBaseUnitOfMeasurePickList");
                                //Added by DSM(Sogeti)-2018x.5 for PDF Views Requirement  - Starts
                                String strChg = (String) mapSub.get("Chg");
                                //Added by DSM(Sogeti)-2018x.5 for PDF Views Requirement  - Starts
                                BOMSubstituteSAPBuffer.append("<TR align=\"center\" class=\"pdf\">");
                                //Name Rev
                                Map mpParamName = new HashMap();
                                mpParamName.put("reportFormat","pdf");
                                MapList mlObjListName = new MapList();
                                Map mpObjName = new HashMap();
                                mpObjName.put("id",strSubId);
                                mlObjListName.add(mpObjName);
                                Map mpBOMSubsName=new HashMap();
                                mpBOMSubsName.put("paramList",mpParamName);
                                mpBOMSubsName.put("objectList", mlObjListName);
                                String[] argsSubsName = JPO.packArgs(mpBOMSubsName);
                                //emxPart_mxJPO objemxPartName = new emxPart_mxJPO(context, argsSubsName);
                                //Vector vEBOMSubName = (Vector)objemxPartName.getModifiedName(context, argsSubsName);
                                //Added for PDF Refactor
                                Vector vEBOMSubName = (Vector)pgPDFViewHelper.executeMainClassMethod(context, "emxPart", "getModifiedName", argsSubsName);
                                String strSubName = null;
                                //Added by DSM(Sogeti)-2018x.1.1 for PDF Views (Defect - 26220) - Starts
                                String strReleaseDate1 = null;
                                //Added by DSM(Sogeti)-2018x.1.1 for PDF Views (Defect - 26220) - Ends
                                if((vEBOMSubName !=null) && (vEBOMSubName.size() >0))
                                    strSubName=(String)vEBOMSubName.get(0);
                                DomainObject dmoBomSub = DomainObject.newInstance(context, strSubId);
                                Map mpBomSub = dmoBomSub.getInfo(context, selectStmtSub);
                                String strRev = (String)mpBomSub.get(DomainConstants.SELECT_REVISION);
                                //Modified by DSM(Sogeti)-2018x.5 for PDF Views Defect #35021 - Starts
                                BOMSubstituteSAPBuffer.append("<TD align ='left' width=\"700\"><B>SP: </B>"+validateString1(strSubName)+"<br /><B>R: </B>"+validateString1(strRev)+"</TD>");
                                //Modified by DSM(Sogeti)-2018x.5 for PDF Views Defect #35021 - Ends
                                //Added by DSM(Sogeti)-2018x.5 for PDF Views Requirement  - Starts
                                BOMSubstituteSAPBuffer.append("<TD  width=\"60px\">" +strChg+"</TD>");
                                //Added by DSM(Sogeti)-2018x.5 for PDF Views Requirement  - Ends
                                //Added by DSM(Sogeti)-2018x.1.1 for PDF Views (Defect - 26220) - Starts
                                strReleaseDate1 = pgIPMPDFViewUtil_mxJPO.getFormattedDate((String )mapFPP.get(pgV3Constants.SELECT_ATTRIBUTE_RELEASE_DATE));
                                String strOC = (String)mapFPP.get("OC");
                                //Added by DSM(Sogeti)-2018x.1.1 for PDF Views (Defect - 26220) - Ends
                                //SCN Title
                                MapList mlObjListSCN = new MapList();
                                Map mpObjNameSCN = new HashMap();
                                mpObjNameSCN.put("SCN",strSubSCN);
                                mlObjListSCN.add(mpObjNameSCN);
                                Map mpBOMSubsSCN = new HashMap();
                                mpBOMSubsSCN.put("objectList", mlObjListSCN);
                                String[] argsSubsSCN = JPO.packArgs(mpBOMSubsSCN);
                                //pgIPMTablesJPO_mxJPO objIPMTableSCN = new pgIPMTablesJPO_mxJPO(context, argsSubsSCN);
                                //Vector vEBOMSubSCN = (Vector)objIPMTableSCN.getSCNColumnData(context, argsSubsSCN);
                                //Added for PDF Refactor
                                Vector vEBOMSubSCN = (Vector)pgPDFViewHelper.executeMainClassMethod(context, "pgIPMTablesJPO", "getSCNColumnData", argsSubsSCN);
                                String strSCN = null;
                                if((vEBOMSubSCN !=null) && (vEBOMSubSCN.size() >0))
                                    strSCN=(String)vEBOMSubSCN.get(0);
                                if(UIUtil.isNotNullAndNotEmpty(strSCN)) {
                                    strSCN = strSCN.replaceAll("[<]","#LESS_THAN");
                                    strSCN = strSCN.replaceAll("[>]","#GREATER_THAN");
                                }
                                //Added by DSM(Sogeti)-2015x.5 for PDF Views (Defect ID-16705) - Starts
                                else{
                                    strSCN = DomainConstants.EMPTY_STRING;
                                }
                                String strTitle = (String)mapSub.get("SAPDesc");
                                if(UIUtil.isNullOrEmpty(strTitle)){
                                    strTitle = DomainConstants.EMPTY_STRING;
                                }
                                //Added by DSM(Sogeti)-2015x.5 for PDF Views (Defect ID-16705) - Ends
                                strTitle =strTitle.replaceAll("[<]","#LESS_THAN");
                                strTitle =strTitle.replaceAll("[>]","#GREATER_THAN");
                                BOMSubstituteSAPBuffer.append("<TD align ='left' width=\"60px\"><B>SCN: </B>"+validateString1(strSCN)+"<br /><B>Title: </B>" +validateString1(strTitle)+"</TD>");
                                //Type SubType
                                String strType2 = (String)mpBomSub.get(DomainConstants.SELECT_TYPE);
                                String strValue = UINavigatorUtil.getAdminI18NString("Type", strType2, context.getSession().getLanguage());
                                Map mpObjNameSST = new HashMap();
                                mpObjNameSST.put("id",strSubId);
                                MapList mlObjListNameSST = new MapList();
                                mlObjListNameSST.add(mpObjNameSST);
                                Map mpBOMSubsSST = new HashMap();
                                mpBOMSubsSST.put("objectList", mlObjListNameSST);
                                String[] argsSubsSST = JPO.packArgs(mpBOMSubsSST);
                                //pgIPMTablesJPO_mxJPO objIPMTable = new pgIPMTablesJPO_mxJPO(context, argsSubsSST);
                                //Vector vEBOMSubSpecSubType = (Vector)objIPMTable.getSpecificationSubtype(context, argsSubsSST);
                                //Added for PDF Refactor
                                Vector vEBOMSubSpecSubType = (Vector)pgPDFViewHelper.executeMainClassMethod(context, "pgIPMTablesJPO", "getSpecificationSubtype", argsSubsSST);
                                String strSpecSubType = null;
                                if((vEBOMSubSpecSubType !=null) && (vEBOMSubSpecSubType.size() >0))
                                    strSpecSubType =(String)vEBOMSubSpecSubType.get(0);
                                BOMSubstituteSAPBuffer.append("<TD align ='left' width=\"140px\"><B>T: </B>"+validateString1(strValue)+"<br /><B>SST: </B>" +validateString1(strSpecSubType)+"</TD>");
                                //QTY
                                MapList mlObjListQty = new MapList();
                                Map mpObjNameQty = new HashMap();
                                mpObjNameQty.put("Quantity",strSubQty);
                                mpObjNameQty.put("EBOMSubstituteRelId",strEBOMSubstituteRelId);
                                mlObjListQty.add(mpObjNameQty);
                                Map mpBOMSubsQty=new HashMap();
                                mpBOMSubsQty.put("objectList", mlObjListQty);
                                String[] argsSubsQty = JPO.packArgs(mpBOMSubsQty);
                                //pgIPMTablesJPO_mxJPO objIPMTableQty = new pgIPMTablesJPO_mxJPO(context, argsSubsQty);
                                //Vector vEBOMSubQty = (Vector)objIPMTableQty.getSubstitutePartQuantityColumnData(context, argsSubsQty);
                                //Added for PDF Refactor
                                Vector vEBOMSubQty = (Vector)pgPDFViewHelper.executeMainClassMethod(context, "pgIPMTablesJPO", "getSubstitutePartQuantityColumnData", argsSubsQty);
                                String strQty = null;
                                if((vEBOMSubQty !=null) && (vEBOMSubQty.size() >0))
                                    strQty = (String)vEBOMSubQty.get(0);
                                strQty = (String)mapSub.get(pgV3Constants.ATTRIBUTE_QUANTITY);
                                BOMSubstituteSAPBuffer.append("<TD width=\"50px\">"+validateString1(strQty)+"</TD>");
                                //Base Unit Of Measure
                                MapList mlObjListUom = new MapList();
                                Map mpObjNameUoM = new HashMap();
                                mpObjNameUoM.put("pgOriginatingSource",strOriginatingSource);
                                mpObjNameUoM.put("pgBaseUnitOfMeasurePickList",strBaseUnitOfMeasure);
                                mpObjNameUoM.put("pgBaseUnitOfMeasure",strBaseUnitOfMeasure);
                                mlObjListUom.add(mpObjNameUoM);
                                Map mpBOMSubsUoM=new HashMap();
                                mpBOMSubsUoM.put("objectList", mlObjListUom);
                                String[] argsSubsUoM = JPO.packArgs(mpBOMSubsUoM);
//	                        pgDSOCPNProductData_mxJPO objIPMTableUoM = new pgDSOCPNProductData_mxJPO(context, argsSubsUoM);
//							Vector vEBOMSubUoM = (Vector)objIPMTableUoM.getSubstitutePartBaseUnitOfMeasureColumnData(context, argsSubsUoM);
//Added for PDF Refactor
                                Vector vEBOMSubUoM = (Vector)pgPDFViewHelper.executeMainClassMethod(context, "pgDSOCPNProductData", "getSubstitutePartBaseUnitOfMeasureColumnData", argsSubsUoM);
                                String strUoM = null;
                                if((vEBOMSubUoM !=null) && (vEBOMSubUoM.size() >0))
                                    strUoM =(String)vEBOMSubUoM.get(0);
                                BOMSubstituteSAPBuffer.append("<TD width=\"50px\">"+validateString1(strUoM)+"</TD>");
                                //Valid Start Date
                                MapList mlObjListValidStart = new MapList();
                                Map mpObjNameValidStart = new HashMap();
                                mpObjNameValidStart.put("EBOMSubstituteRelId",strEBOMSubstituteRelId);
                                mlObjListValidStart.add(mpObjNameValidStart);
                                Map mpBOMSubsValidStart = new HashMap();
                                mpBOMSubsValidStart.put("objectList", mlObjListValidStart);
                                String[] argsSubsValidStart = JPO.packArgs(mpBOMSubsValidStart);
//	                        pgDSOCPNProductData_mxJPO objIPMTableValidStart = new pgDSOCPNProductData_mxJPO(context, argsSubsValidStart);
//							Vector vEBOMSubValidStart = (Vector)objIPMTableValidStart.getValidStartDateColumnDataForDSO(context, argsSubsValidStart);
//Added for PDF Refactor
                                Vector vEBOMSubValidStart = (Vector)pgPDFViewHelper.executeMainClassMethod(context, "pgDSOCPNProductData", "getValidStartDateColumnDataForDSO", argsSubsValidStart);
                                String strValidStart = null;
                                if((vEBOMSubValidStart !=null) && (vEBOMSubValidStart.size() >0))
                                    strValidStart = (String)vEBOMSubValidStart.get(0);
                                if(UIUtil.isNotNullAndNotEmpty(strValidStart))
                                    strValidStart=pgIPMPDFViewUtil_mxJPO.getFormattedDate(strValidStart);
                                BOMSubstituteSAPBuffer.append("<TD width=\"50px\">"+validateString1(strValidStart)+"</TD>");
                                //Valid Until
                                MapList mlObjListValidUntil = new MapList();
                                Map mpObjNameValidUntil = new HashMap();
                                mpObjNameValidUntil.put("ValidUntil",strSubValidUntil);
                                mpObjNameValidUntil.put("EBOMSubstituteRelId",strEBOMSubstituteRelId);
                                mlObjListValidUntil.add(mpObjNameValidUntil);
                                Map mpBOMSubsValidUntil = new HashMap();
                                mpBOMSubsValidUntil.put("objectList", mlObjListValidUntil);
                                String[] argsSubsValidUntil = JPO.packArgs(mpBOMSubsValidUntil);
//	                        pgDSOCPNProductData_mxJPO objIPMTableValidUntil = new pgDSOCPNProductData_mxJPO(context, argsSubsValidUntil);
//							Vector vEBOMSubValidUntil = (Vector)objIPMTableValidUntil.getValidUntilDateColumnDataForDSO(context, argsSubsValidUntil);
//Added for PDF Refactor
                                Vector vEBOMSubValidUntil = (Vector)pgPDFViewHelper.executeMainClassMethod(context, "pgDSOCPNProductData", "getValidUntilDateColumnDataForDSO", argsSubsValidUntil);

                                String strValidUntil = null;
                                if((vEBOMSubValidUntil !=null) && (vEBOMSubValidUntil.size() >0))
                                    strValidUntil=(String)vEBOMSubValidUntil.get(0);
                                if(UIUtil.isNotNullAndNotEmpty(strValidUntil))
                                    strValidUntil=pgIPMPDFViewUtil_mxJPO.getFormattedDate(strValidUntil);
                                BOMSubstituteSAPBuffer.append("<TD width=\"50px\">"+validateString1(strValidUntil)+"</TD>");
                                //Ref Des
                                MapList mlObjListRefDes = new MapList();
                                Map mpObjNameRefDes = new HashMap();
                                mpObjNameRefDes.put("Reference Designator",strSubReferenceDesignator);
                                mlObjListRefDes.add(mpObjNameRefDes);
                                Map mpBOMSubsRefDes = new HashMap();
                                mpBOMSubsRefDes.put("objectList", mlObjListRefDes);
                                String[] argsSubsRefDes = JPO.packArgs(mpBOMSubsRefDes);
//	                        pgDSOCPNProductData_mxJPO objIPMTableRefDes = new pgDSOCPNProductData_mxJPO(context, argsSubsRefDes);
//							Vector vEBOMSubRefDes = (Vector)objIPMTableRefDes.getSubstitutePartReferenceDesignatorColumnData(context, argsSubsRefDes);
//Added for PDF Refactor
                                Vector vEBOMSubRefDes = (Vector)pgPDFViewHelper.executeMainClassMethod(context, "pgDSOCPNProductData", "getSubstitutePartReferenceDesignatorColumnData", argsSubsRefDes);
                                String strRefDes = null;
                                if((vEBOMSubRefDes !=null) && (vEBOMSubRefDes.size() >0))
                                    strRefDes =(String)vEBOMSubRefDes.get(0);
                                if(UIUtil.isNotNullAndNotEmpty(strRefDes)) {
                                    strRefDes  = strRefDes.replaceAll("[<]","#LESS_THAN");
                                    strRefDes = strRefDes.replaceAll("[>]","#GREATER_THAN");
                                }
                                //Added by DSM(Sogeti)-2015x.5 for PDF Views (Defect ID-16705) - Starts
                                else{
                                    strRefDes = DomainConstants.EMPTY_STRING;
                                }
                                //Added by DSM(Sogeti)-2015x.5 for PDF Views (Defect ID-16705) - Ends
                                //Modified by DSM(Sogeti)-2018x.1.1 for PDF Views (Defect - 26220) - Starts
                                //BOMSubstituteSAPBuffer.append("<TD width=\"50px\">"+validateString1(strRefDes)+"</TD>");
                                //Modified by DSM(Sogeti)-2018x.5 for PDF Views Requirement  - Starts
                                BOMSubstituteSAPBuffer.append("<TD width=\"80\">"+validateString1(strRefDes)+"</TD>");
                                //Modified by DSM(Sogeti)-2018x.5 for PDF Views Requirement  - Ends
                                //Modified by DSM(Sogeti)-2018x.1.1 for PDF Views (Defect - 26220) - Ends
                                //Comments
                                MapList mlObjListComments = new MapList();
                                Map mpObjNameComments = new HashMap();
                                mpObjNameComments.put("Comment",strSubComments);
                                mlObjListComments.add(mpObjNameComments);
                                Map mpBOMSubsComments = new HashMap();
                                mpBOMSubsComments.put("objectList", mlObjListComments);
                                String[] argsSubsComments = JPO.packArgs(mpBOMSubsComments);
                                //pgIPMTablesJPO_mxJPO objIPMTableComments = new pgIPMTablesJPO_mxJPO(context, argsSubsComments);
                                //Vector vEBOMSubComments = (Vector)objIPMTableComments.getSubstitutePartCommentsColumnData(context, argsSubsComments);
                                //Added for PDF Refactor
                                Vector vEBOMSubComments = (Vector)pgPDFViewHelper.executeMainClassMethod(context, "pgIPMTablesJPO", "getSubstitutePartCommentsColumnData", argsSubsComments);
                                String strComment = null;
                                if((vEBOMSubComments !=null) && (vEBOMSubComments.size() >0))
                                    strComment = (String)vEBOMSubComments.get(0);
                                if(UIUtil.isNotNullAndNotEmpty(strComment)){
                                    strComment = strComment.replaceAll("[<]","#LESS_THAN");
                                    strComment = strComment.replaceAll("[>]","#GREATER_THAN");
                                }
                                //Added by DSM(Sogeti)-2015x.5 for PDF Views (Defect ID-16705) - Starts
                                else{
                                    strComment = DomainConstants.EMPTY_STRING;
                                }
                                //Added by DSM(Sogeti)-2015x.5 for PDF Views (Defect ID-16705) - Ends
                                BOMSubstituteSAPBuffer.append("<TD width=\"190px\">"+validateString1(strComment)+"</TD>");
                                //Added by DSM(Sogeti)-2018x.1.1 for PDF Views (Defect - 26220) - Starts
                                if(strParentObjType.equals(pgV3Constants.TYPE_FINISHEDPRODUCTPART) && strFPPviewType.equals("allinfo")) {
                                    //Modified by DSM(Sogeti)-2018x.3 for PDF Views (Requirement #32592) - Starts
                                    //Modified by DSM(Sogeti)-2018x.5 for PDF Views Requirement  - Starts
                                    BOMSubstituteSAPBuffer.append("<TD width=\"160\" align=\"left\" valign=\"top\">"+validateString1(strReleaseDate1)+"</TD>");
                                    //Modified by DSM(Sogeti)-2018x.5 for PDF Views Requirement  - Ends
                                    //Modified by DSM(Sogeti)-2018x.3 for PDF Views (Requirement #32592) - Ends
                                }
                                //Added by DSM(Sogeti)-2018x.1.1 for PDF Views (Defect - 26220) - Ends
                                //Substitute For
                                DomainObject dmoBom = DomainObject.newInstance(context, strid);
                                Map mpBom = dmoBom.getInfo(context, selectStmtSub);
                                String strBomName = (String)mpBom.get(DomainConstants.SELECT_NAME);
                                String strBomRev = (String)mpBom.get(DomainConstants.SELECT_REVISION);
                                //Modified by DSM(Sogeti)-2018x.5 for PDF Views Requirement  - Starts
                                String strBomType = (String)mpBom.get(DomainConstants.SELECT_TYPE);
                                String strBomId = (String)mpBom.get(DomainConstants.SELECT_ID);
                                String strBOMSpecSubType = getSpecificationSubType(context,strBomId);
                                //Modified by DSM(Sogeti)-2018x.5 for PDF Views Requirement  - Ends
                                BOMSubstituteSAPBuffer.append("<TD align ='left' width=\"60px\"><B>SF: </B>"+validateString1(strBomName)+"<br /><B>R: </B>"+validateString1(strBomRev)+"</TD>");
                                //Title
                                String strBomTitle = (String)mpBom.get(pgV3Constants.SELECT_ATTRIBUTE_TITLE);
                                //Added by DSM(Sogeti)-2015x.5 for PDF Views (Defect ID-16705) - Starts
                                if(UIUtil.isNullOrEmpty(strBomTitle)){
                                    strBomTitle = DomainConstants.EMPTY_STRING;
                                }
                                //Added by DSM(Sogeti)-2015x.5 for PDF Views (Defect ID-16705) - Ends
                                strBomTitle =strBomTitle.replaceAll("[<]","#LESS_THAN");
                                strBomTitle =strBomTitle.replaceAll("[>]","#GREATER_THAN");
                                //Modified by DSM(Sogeti)-2018x.5 for PDF Views Requirement  - Starts
                                strBomType = UINavigatorUtil.getAdminI18NString("Type", strBomType, context.getSession().getLanguage());
                                BOMSubstituteSAPBuffer.append("<TD  width=\"80px\"><B>T: </B>"+validateString1(strBomType)+"<br /><B>Ti: </B>"+validateString1(strBomTitle)+"</TD>");
                                BOMSubstituteSAPBuffer.append("<TD  width=\"140px\"><B>SST: </B>"+validateString1(strBOMSpecSubType)+"<br /><B>OC: </B>" +validateString1(strOC)+"</TD>");
                                //Modified by DSM(Sogeti)-2018x.5 for PDF Views Requirement  - Ends
                                //Commented by DSM(Sogeti)-2018x.1.1 for PDF Views (Defect - 26220) - Starts
                                //BOMSubstituteSAPBuffer.append("<TD align ='left' width=\"140px\"><B>T: </B>"+validateString1(strBOMValue)+"<br /><B>SST: </B>"+validateString1(strSpecSubTypeBOM)+" </TD>");
                                //Commented by DSM(Sogeti)-2018x.1.1 for PDF Views (Defect - 26220) - Ends
                                BOMSubstituteSAPBuffer.append("</TR>");
                            }
                        }
                    }
                    if(bTUPTable)
                    {
                        BOMSubstituteSAPBuffer.append("</TABLE><TR><TD><br /></TD></TR></TD></TR>");
                    }
                }
            }
            //Added by DSM(Sogeti)-2018x.6 June CW 2022 for PDF Views (Defect-49089/49098) - Ends
        } catch (Exception e) {
            e.printStackTrace();
            throw e;
        }
        //Modify Code Refactoring
        mlMaster.clear();
        long endTime = new Date().getTime();
        System.out.println("Total Time has taken by the getMasterBOMandSubstituteData Method is-->"+(endTime-startTime));
        return BOMSubstituteSAPBuffer;
    }
    //Added by DSM(Sogeti)-2015x.1.2 for FPP allinfo view defect-7319 on 18-Oct-2016 - Ends
    //Added by DSM-2015x.2 for PDF Views (Req Id-11473,11998,11999) - Starts
    /**
     * This method gets Component Equivalent Table for SEP
     * @param Context - Context user
     * @param String - Object ID
     * @return StringBuilder - returns list of equivalent SEP/MEP
     **/
    //Modified by DSM(Sogeti)-2018x.5 for PDF Views requirements
    private StringBuilder getComponentEquivalentsTable(Context context,String strObjectId)  throws Exception{
        long startTime = new Date().getTime();
        StringBuilder sbEnterprisePartsTable = new StringBuilder();
        String strName = DomainConstants.EMPTY_STRING;
        String strRev = DomainConstants.EMPTY_STRING;
        String strType = DomainConstants.EMPTY_STRING;
        String strDescription = DomainConstants.EMPTY_STRING;
        String strState = DomainConstants.EMPTY_STRING;
        //Modified by DSM(Sogeti)-2018x.5 for PDF Views requirements - Starts
        String strPolicy= DomainConstants.EMPTY_STRING;
        //Modified by DSM(Sogeti)-2018x.5 for PDF Views requirements - Ends
        String strId = DomainConstants.EMPTY_STRING;
        String strConnectinID = DomainConstants.EMPTY_STRING;
        StringList slSupplier = new StringList();
        StringList slManufacturer = new StringList();
        StringList slSEPSelectables = new StringList();
        slSEPSelectables.add(DomainConstants.SELECT_DESCRIPTION);
        DomainObject doObj = null;
        Map mpSEPPack = new HashMap();
        //Removed by DSM-2015x.4 for PDF Views (req id #11998)
        mpSEPPack.put("objectId", strObjectId);
        String[] args = JPO.packArgs(mpSEPPack);
        Map mpMEPPack = new HashMap();
        mpMEPPack.put("objectId", strObjectId);
        mpMEPPack.put("isMPN", "");
        String[] args1 = JPO.packArgs(mpMEPPack);
        Map mpSEPData = new HashMap();
        Map mapSEPAttributeInfo = new HashMap();
        //Modified by DSM 2018x.5 for PDF Views Requirement
        Map mapPQRdata = null;
        DomainRelationship domRel =null;
        String strRelId =DomainConstants.EMPTY_STRING;
        String strRelObjectName =DomainConstants.EMPTY_STRING;
        StringList slRelSelects = new StringList();
        String sPQRName = DomainConstants.EMPTY_STRING;
        String sPQRRevision  = DomainConstants.EMPTY_STRING;
        String sPQRState  = DomainConstants.EMPTY_STRING;
        StringList slName = new StringList();
        StringList slRevision = new StringList();
        StringList slCurrent = new StringList();
        StringList slId = new StringList();
        MapList mlPQRData = null;
        String sName =DomainConstants.EMPTY_STRING;
        String sCurrent =DomainConstants.EMPTY_STRING;
        String sRevision =DomainConstants.EMPTY_STRING;
        //Modified by DSM 2018x.5 for PDF Views Requirement
        //jpo.componentcentral.sep.Part_mxJPO ipmProduct=new jpo.componentcentral.sep.Part_mxJPO(context,args);
        //MapList mlSEPData = ipmProduct.getInProcessSEPs(context,args);
        //Added for PDF Refactor
        MapList mlSEPData =  (MapList)pgPDFViewHelper.executeMainClassMethod(context, "jpo.componentcentral.sep.Part", "getInProcessSEPs", args);
        //MapList mlMEPData = ipmProduct.getEnterpriseManufacturerEquivalents(context,args1);
        //Added for PDF Refactor
        MapList mlMEPData =  (MapList)pgPDFViewHelper.executeMainClassMethod(context, "jpo.componentcentral.sep.Part", "getEnterpriseManufacturerEquivalents", args1);
        //Added by DSM(Sogeti)-2018x.5 for PDF Views Defect #35683 : Starts
        boolean isContextPushed = false;
        //Added by DSM(Sogeti)-2018x.5 for PDF Views Defect #35683 : Ends
        try {
            if(((mlSEPData != null) && (mlSEPData.size()>0)) || ((mlMEPData != null) && (mlMEPData.size()>0))){
                //Removed by DSM-2015x.4 for PDF Views (req id #11998)
                if((mlMEPData != null) && (mlMEPData.size()>0)){
                    sbEnterprisePartsTable.append("<tr><td><table class=\"WordWrappdf\" cellspacing=\"0\" width=\"1000px\" id=\"pgFinishedProductTable\">");
                    sbEnterprisePartsTable.append("<thead>");
                    //Modified by DSM 2018x.5 for PDF Views Requirement
                    sbEnterprisePartsTable.append("<tr><td colspan='9' class=\"new\" ><font size='4'><b>").append("Manufacturer Equivalents").append("</b></font></td></tr>");
                    //Modified by DSM 2018x.6 for PDF Views Defect#38838 - Starts
                    sbEnterprisePartsTable.append("<tr>");
                    sbEnterprisePartsTable.append("<th colspan='6' width=\"500px\"></th>");
                    sbEnterprisePartsTable.append("<th align=\"left\" colspan='3' width=\"500px\"><font size='2'>PQRs</font></th>");
                    sbEnterprisePartsTable.append("</tr>");
                    //Modified by DSM 2018x.6 for PDF Views Defect#38838 - Ends
                    //Modified by DSM 2018x.5 for PDF Views Requirement
                    sbEnterprisePartsTable.append("<tr>");
                    sbEnterprisePartsTable.append("<td width=\"120\" align=\"center\"><b>Name</b></td>");
                    sbEnterprisePartsTable.append("<td width=\"75\" align=\"center\"><b>Revision</b></td>");
                    //Added by DSM-2015x.4 for PDF Views (Req id #11473) - Starts
                    sbEnterprisePartsTable.append("<td width=\"150\" align=\"center\"><b>Type</b></td>");
                    //Added by DSM-2015x.4 for PDF Views (req id #11473) - Ends
                    sbEnterprisePartsTable.append("<td width=\"250\" align=\"center\"><b>Description</b></td>");
                    sbEnterprisePartsTable.append("<td width=\"200\" align=\"center\"><b>Manufacturer</b></td>");
                    sbEnterprisePartsTable.append("<td width=\"75\" align=\"center\"><b>State</b></td>");
                    //Modified by DSM 2018x.5 for PDF Views Requirement
                    sbEnterprisePartsTable.append("<td width=\"250\" align=\"center\"><b>Name</b></td>");
                    sbEnterprisePartsTable.append("<td width=\"200\" align=\"center\"><b>State</b></td>");
                    sbEnterprisePartsTable.append("<td width=\"75\" align=\"center\"><b>Revision</b></td>");
                    //Modified by DSM 2018x.5 for PDF Views Requirement
                    sbEnterprisePartsTable.append("</tr>");
                    sbEnterprisePartsTable.append("</thead>");
                    int inSEP = mlMEPData.size();
                    for (int i = 0; i <inSEP; i++){
                        mpSEPData = new HashMap();
                        mpSEPData = (Map) mlMEPData.get(i);
                        strId = (String)mpSEPData.get(DomainConstants.SELECT_ID);
                        doObj = DomainObject.newInstance(context,strId);
                        strName = (String)mpSEPData.get(DomainConstants.SELECT_NAME);
                        strRev = (String)mpSEPData.get(DomainConstants.SELECT_REVISION);
                        strState =(String)mpSEPData.get(DomainConstants.SELECT_CURRENT);
                        //Added by DSM-2015x.4 for PDF Views (Req id #11473) - Starts
                        strType = (String)mpSEPData.get(DomainConstants.SELECT_TYPE);
                        strType = EnoviaResourceBundle.getTypeI18NString(context, strType, context.getSession().getLanguage());
                        //Added by DSM-2015x.4 for PDF Views (req id #11473) - Ends
                        strConnectinID =(String)mpSEPData.get("id[connection]");
                        //Added/Modified by DSM(Sogeti)-2018x.5 for PDF Views Defect #35683 : Starts
                        boolean isAccess = doObj.checkAccess(context, (short)0);
                        if(!isAccess) {
                            slManufacturer=convertObjectToStringList(pgV3Constants.NO_ACCESS);
                            strState=pgV3Constants.NO_ACCESS;
                            mapSEPAttributeInfo.put(DomainConstants.SELECT_DESCRIPTION, pgV3Constants.NO_ACCESS);
                        }else {
                            slManufacturer = doObj.getInfoList(context,"to["+pgV3Constants.RELATIONSHIP_MANUFACTURINGRESPONSIBILITY+"].from.name");
                            mapSEPAttributeInfo = doObj.getInfo(context,slSEPSelectables);
                            //Modified by DSM(Sogeti)-2018x.5 for PDF Views requirements - Starts
                            strPolicy =(String)mpSEPData.get(DomainConstants.SELECT_POLICY);
                            strState = EnoviaResourceBundle.getStateI18NString(context, strPolicy,
                                    strState, context.getLocale().getLanguage());
                        }
                        //Added/Modified by DSM(Sogeti)-2018x.5 for PDF Views Defect #35683 : Ends

                        //Modified by DSM(Sogeti)-2018x.5 for PDF Views requirements - Ends
                        //Modified by DSM 2018x.5 for PDF Views REQ IPP Start
                        if(validateString(strId)) {

                            StringList busSelect = new StringList(2);
                            busSelect.add(DomainConstants.SELECT_NAME);
                            busSelect.add(DomainConstants.SELECT_ID);
                            StringList relSelect = new StringList(2);
                            relSelect.add(DomainRelationship.SELECT_NAME);
                            relSelect.add(DomainRelationship.SELECT_ID);
                            sName = "tomid["+pgV3Constants.RELATIONSHIP_QUALIFICATION+"].from.name";
                            sRevision = "tomid["+pgV3Constants.RELATIONSHIP_QUALIFICATION+"].from.revision";
                            sCurrent = "tomid["+pgV3Constants.RELATIONSHIP_QUALIFICATION+"].from.current";
                            String sId = "tomid["+pgV3Constants.RELATIONSHIP_QUALIFICATION+"].from.id";
                            relSelect.add(sName);
                            relSelect.add(sRevision);
                            relSelect.add(sCurrent);
                            relSelect.add(sId);
                            //Added/Modified by DSM(Sogeti)-2018x.5 for PDF Views Defect #35683 : Starts
                            ContextUtil.pushContext(context, pgV3Constants.PERSON_USER_AGENT, DomainConstants.EMPTY_STRING, DomainConstants.EMPTY_STRING);
                            isContextPushed = true;
                            doObj = DomainObject.newInstance(context,strId);
                            mlPQRData = doObj.getRelatedObjects(context, //Context
                                    pgV3Constants.RELATIONSHIP_MANUFACTUREREQUIVALENT, //relPattern
                                    pgV3Constants.TYPE_PART, //typePattern
                                    busSelect, //objectSelects
                                    relSelect, //relationshipSelects
                                    true, //getTo
                                    false, //getFrom
                                    (short)1, //recurseToLevel
                                    null, //objectWhere
                                    null, //relationshipWhere
                                    0);
                            if(isContextPushed) {
                                ContextUtil.popContext(context);
                                isContextPushed = false;
                            }
                            //Added/Modified by DSM(Sogeti)-2018x.5 for PDF Views Defect #35683 : Ends
                            int iSize = mlPQRData.size();
                            if( mlPQRData!=null && mlPQRData.size()>0  )
                            {
                                for(int k = 0; k <iSize; k++)
                                {
                                    mapPQRdata = (Map) mlPQRData.get(k);
                                    if(mapPQRdata.containsValue(strObjectId))
                                    {
                                        if( mapPQRdata!=null && !mapPQRdata.isEmpty())
                                        {
                                            slId =  convertObjectToStringList(mapPQRdata.get(sId));
                                            if((slId!=null && slId.size()>0) || !isAccess) {
                                                //Added/Modified by DSM(Sogeti)-2018x.5 for PDF Views Defect #35683 : Starts
                                                if(!isAccess) {
                                                    slName =  convertObjectToStringList(pgV3Constants.NO_ACCESS);
                                                    slRevision =  convertObjectToStringList(pgV3Constants.NO_ACCESS);
                                                    slCurrent =  convertObjectToStringList(pgV3Constants.NO_ACCESS);
                                                }else {

                                                    slName =  convertObjectToStringList(mapPQRdata.get(sName));
                                                    slRevision =  convertObjectToStringList(mapPQRdata.get(sRevision));
                                                    slCurrent =  convertObjectToStringList(mapPQRdata.get(sCurrent));
                                                }
                                                //Added/Modified by DSM(Sogeti)-2018x.5 for PDF Views Defect #35683 : Ends
                                                sbEnterprisePartsTable.append("<tr>");
                                                sbEnterprisePartsTable.append("<td align=\"center\" width=\"120\">").append(validateString1(strName)).append("</td>");
                                                sbEnterprisePartsTable.append("<td align=\"center\" width=\"75\">").append(validateString1(strRev)).append("</td>");
                                                sbEnterprisePartsTable.append("<td align=\"center\" width=\"150\">").append(validateString1(strType)).append("</td>");
                                                sbEnterprisePartsTable.append("<td align=\"center\" width=\"250\">").append(mapSEPAttributeInfo.get(DomainConstants.SELECT_DESCRIPTION)).append("</td>");
                                                sbEnterprisePartsTable.append("<td align=\"center\" width=\"200\">").append(validateString1(slManufacturer)).append("</td>");
                                                sbEnterprisePartsTable.append("<td align=\"center\" width=\"75\">").append(validateString1(strState)).append("</td>");
                                                sbEnterprisePartsTable.append("<td align=\"center\" width=\"250\">").append(validateString1(slName)).append("</td>");
                                                sbEnterprisePartsTable.append("<td align=\"center\" width=\"200\">").append(validateString1(slCurrent)).append("</td>");
                                                sbEnterprisePartsTable.append("<td align=\"center\" width=\"75\">").append(validateString1(slRevision)).append("</td>");
                                                sbEnterprisePartsTable.append("</tr>");
                                            }else {
                                                sbEnterprisePartsTable.append("<tr>");
                                                sbEnterprisePartsTable.append("<td align=\"center\" width=\"120\">").append(validateString1(strName)).append("</td>");
                                                sbEnterprisePartsTable.append("<td align=\"center\" width=\"75\">").append(validateString1(strRev)).append("</td>");
                                                sbEnterprisePartsTable.append("<td align=\"center\" width=\"150\">").append(validateString1(strType)).append("</td>");
                                                sbEnterprisePartsTable.append("<td align=\"center\" width=\"250\">").append(mapSEPAttributeInfo.get(DomainConstants.SELECT_DESCRIPTION)).append("</td>");
                                                sbEnterprisePartsTable.append("<td align=\"center\" width=\"200\">").append(validateString1(slManufacturer)).append("</td>");
                                                sbEnterprisePartsTable.append("<td align=\"center\" width=\"75\">").append(validateString1(strState)).append("</td>");
                                                sbEnterprisePartsTable.append("<td align=\"center\" width=\"250\">").append("</td>");
                                                sbEnterprisePartsTable.append("<td align=\"center\" width=\"200\">").append("</td>");
                                                sbEnterprisePartsTable.append("<td align=\"center\" width=\"75\">").append("</td>");
                                                sbEnterprisePartsTable.append("</tr>");
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                    //Modified by DSM 2018x.5 for PDF Views REQ IPP End
                    sbEnterprisePartsTable.append("</table><tr><td><br/></td></tr></td></tr>");
                }
                if((mlSEPData != null) && (mlSEPData.size()>0)){
                    sbEnterprisePartsTable.append("<tr><td><table class=\"WordWrappdf\" cellspacing=\"0\" width=\"1000px\" id=\"pgFinishedProductTable\">");
                    sbEnterprisePartsTable.append("<thead>");
                    //Modified by DSM-2015x.4 for PDF Views (req id #11473) -Starts
                    //Modified by DSM 2018x.5 for PDF Views REQ IPP Start
                    sbEnterprisePartsTable.append("<tr><td colspan='9' class=\"new\" ><font size='4'><b>").append("Supplier Equivalents").append("</b></font></td></tr>");
                    //Modified by DSM 2018x.5 for PDF Views REQ IPP End
                    //Modified by DSM-2015x.4 for PDF Views (req id #11473) - Ends
                    //Removed by DSM-2015x.4 for PDF Views (req id #11998)
                    //Modified by DSM 2018x.5 for PDF Views REQ IPP Start
                    //Modified by DSM 2018x.6 for PDF Views Defect#38838 - Starts
                    sbEnterprisePartsTable.append("<tr>");
                    sbEnterprisePartsTable.append("<th colspan='6' width=\"500px\"></th>");
                    sbEnterprisePartsTable.append("<th align=\"left\" colspan='3' width=\"500px\"><font size='2'>PQRs</font></th>");
                    sbEnterprisePartsTable.append("</tr>");
                    //Modified by DSM 2018x.6 for PDF Views Defect#38838 - Ends
                    //Modified by DSM 2018x.5 for PDF Views REQ IPP Start

                    sbEnterprisePartsTable.append("<tr>");
                    sbEnterprisePartsTable.append("<td width=\"120\" align=\"center\"><b>Name</b></td>");
                    sbEnterprisePartsTable.append("<td width=\"75\" align=\"center\"><b>Revision</b></td>");
                    //Added by DSM-2015x.4 for PDF Views (Req id #11473) - Starts
                    sbEnterprisePartsTable.append("<td width=\"150\" align=\"center\"><b>Type</b></td>");
                    //Added by DSM-2015x.4 for PDF Views (req id #11473) - Ends
                    sbEnterprisePartsTable.append("<td width=\"250\" align=\"center\"><b>Description</b></td>");
                    sbEnterprisePartsTable.append("<td width=\"200\" align=\"center\"><b>Supplier</b></td>");
                    sbEnterprisePartsTable.append("<td width=\"75\" align=\"center\"><b>State</b></td>");
                    //Removed by DSM-2015x.4 for PDF Views (req id #11473)
                    sbEnterprisePartsTable.append("<td width=\"250\" align=\"center\"><b>Name</b></td>");
                    sbEnterprisePartsTable.append("<td width=\"200\" align=\"center\"><b>State</b></td>");
                    sbEnterprisePartsTable.append("<td width=\"75\" align=\"center\"><b>Revision</b></td>");
                    sbEnterprisePartsTable.append("</tr>");
                    sbEnterprisePartsTable.append("</thead>");
                    int inSEP = mlSEPData.size();
                    for (int i = 0; i <inSEP; i++){
                        mpSEPData = (Map) mlSEPData.get(i);
                        strId = (String)mpSEPData.get(DomainConstants.SELECT_ID);
                        doObj = DomainObject.newInstance(context,strId);
                        strName = (String)mpSEPData.get(DomainConstants.SELECT_NAME);
                        strRev = (String)mpSEPData.get(DomainConstants.SELECT_REVISION);
                        strState =(String)mpSEPData.get(DomainConstants.SELECT_CURRENT);
                        //Added by DSM-2015x.4 for PDF Views (Req id #11473) - Starts
                        strType = (String)mpSEPData.get(DomainConstants.SELECT_TYPE);
                        //Added by DSM-2015x.4 for PDF Views (req id #11473) - Ends
                        strConnectinID =(String)mpSEPData.get("id[connection]");
                        //Added/Modified by DSM(Sogeti)-2018x.5 for PDF Views Defect #35683 : Starts
                        boolean isAccess = doObj.checkAccess(context, (short)0);
                        if(!isAccess) {
                            strState=pgV3Constants.NO_ACCESS;
                            slSupplier=convertObjectToStringList(pgV3Constants.NO_ACCESS);
                            mapSEPAttributeInfo.put(DomainConstants.SELECT_DESCRIPTION, pgV3Constants.NO_ACCESS);
                        }else {
                            slSupplier = doObj.getInfoList(context,"to["+pgV3Constants.RELATIONSHIP_SUPPLYRESPONSIBILITY+"].from.name");
                            mapSEPAttributeInfo = doObj.getInfo(context,slSEPSelectables);
                        }
                        //Added/Modified by DSM(Sogeti)-2018x.5 for PDF Views Defect #35683 : Ends

                        //Removed by DSM-2015x.4 for PDF Views (req id #11998)

                        //Modified by DSM 2018x.5 for PDF Views REQ IPP Start
                        if(validateString(strId)) {

                            StringList busSelect = new StringList(2);
                            busSelect.add(DomainConstants.SELECT_NAME);
                            busSelect.add(DomainConstants.SELECT_ID);
                            StringList relSelect = new StringList(2);
                            relSelect.add(DomainRelationship.SELECT_NAME);
                            relSelect.add(DomainRelationship.SELECT_ID);
                            sName = "tomid["+pgV3Constants.RELATIONSHIP_QUALIFICATION+"].from.name";
                            sRevision = "tomid["+pgV3Constants.RELATIONSHIP_QUALIFICATION+"].from.revision";
                            sCurrent = "tomid["+pgV3Constants.RELATIONSHIP_QUALIFICATION+"].from.current";
                            String sId = "tomid["+pgV3Constants.RELATIONSHIP_QUALIFICATION+"].from.id";
                            relSelect.add(sName);
                            relSelect.add(sRevision);
                            relSelect.add(sCurrent);
                            relSelect.add(sId);
                            //Added/Modified by DSM(Sogeti)-2018x.5 for PDF Views Defect #35683 : Starts
                            ContextUtil.pushContext(context, pgV3Constants.PERSON_USER_AGENT, DomainConstants.EMPTY_STRING, DomainConstants.EMPTY_STRING);
                            isContextPushed = true;
                            doObj = DomainObject.newInstance(context,strId);
                            mlPQRData = doObj.getRelatedObjects(context, //Context
                                    pgV3Constants.RELATIONSHIP_SUPPLIEREQUIVALENT, //relPattern
                                    pgV3Constants.TYPE_PART, //typePattern
                                    busSelect, //objectSelects
                                    relSelect, //relationshipSelects
                                    true, //getTo
                                    false, //getFrom
                                    (short)1, //recurseToLevel
                                    null, //objectWhere
                                    null, //relationshipWhere
                                    0);
                            if(isContextPushed) {
                                ContextUtil.popContext(context);
                                isContextPushed = false;
                            }
                            //Added/Modified by DSM(Sogeti)-2018x.5 for PDF Views Defect #35683 : Ends
                            int iSize = mlPQRData.size();
                            if(mlPQRData!=null && mlPQRData.size()>0)
                            {
                                for(int k = 0; k <iSize; k++)
                                {
                                    mapPQRdata = (Map) mlPQRData.get(k);
                                    if(mapPQRdata.containsValue(strObjectId)) {
                                        if(mapPQRdata!=null && !mapPQRdata.isEmpty()) {
                                            slId =  convertObjectToStringList(mapPQRdata.get(sId));
                                            if((slId!=null && slId.size()>0) || !isAccess) {
                                                //Added/Modified by DSM(Sogeti)-2018x.5 for PDF Views Defect #35683 : Starts
                                                if(!isAccess) {
                                                    slName =  convertObjectToStringList(pgV3Constants.NO_ACCESS);
                                                    slRevision =  convertObjectToStringList(pgV3Constants.NO_ACCESS);
                                                    slCurrent =  convertObjectToStringList(pgV3Constants.NO_ACCESS);
                                                }else {
                                                    slName =  convertObjectToStringList(mapPQRdata.get(sName));
                                                    slRevision =  convertObjectToStringList(mapPQRdata.get(sRevision));
                                                    slCurrent =  convertObjectToStringList(mapPQRdata.get(sCurrent));
                                                }
                                                //Added/Modified by DSM(Sogeti)-2018x.5 for PDF Views Defect #35683 : Ends
                                                sbEnterprisePartsTable.append("<tr>");
                                                sbEnterprisePartsTable.append("<td align=\"center\" width=\"120\">").append(validateString1(strName)).append("</td>");
                                                sbEnterprisePartsTable.append("<td align=\"center\" width=\"75\">").append(validateString1(strRev)).append("</td>");
                                                sbEnterprisePartsTable.append("<td align=\"center\" width=\"150\">").append(validateString1(strType)).append("</td>");
                                                sbEnterprisePartsTable.append("<td align=\"center\" width=\"250\">").append(mapSEPAttributeInfo.get(DomainConstants.SELECT_DESCRIPTION)).append("</td>");
                                                sbEnterprisePartsTable.append("<td align=\"center\" width=\"200\">").append(validateString1(slSupplier)).append("</td>");
                                                sbEnterprisePartsTable.append("<td align=\"center\" width=\"75\">").append(validateString1(strState)).append("</td>");
                                                sbEnterprisePartsTable.append("<td align=\"center\" width=\"250\">").append(validateString1(slName)).append("</td>");
                                                sbEnterprisePartsTable.append("<td align=\"center\" width=\"200\">").append(validateString1(slCurrent)).append("</td>");
                                                sbEnterprisePartsTable.append("<td align=\"center\" width=\"75\">").append(validateString1(slRevision)).append("</td>");
                                                sbEnterprisePartsTable.append("</tr>");
                                            }else {
                                                sbEnterprisePartsTable.append("<tr>");
                                                sbEnterprisePartsTable.append("<td align=\"center\" width=\"120\">").append(validateString1(strName)).append("</td>");
                                                sbEnterprisePartsTable.append("<td align=\"center\" width=\"75\">").append(validateString1(strRev)).append("</td>");
                                                sbEnterprisePartsTable.append("<td align=\"center\" width=\"150\">").append(validateString1(strType)).append("</td>");
                                                sbEnterprisePartsTable.append("<td align=\"center\" width=\"250\">").append(mapSEPAttributeInfo.get(DomainConstants.SELECT_DESCRIPTION)).append("</td>");
                                                sbEnterprisePartsTable.append("<td align=\"center\" width=\"200\">").append(validateString1(slSupplier)).append("</td>");
                                                sbEnterprisePartsTable.append("<td align=\"center\" width=\"75\">").append(validateString1(strState)).append("</td>");
                                                sbEnterprisePartsTable.append("<td align=\"center\" width=\"250\">").append("</td>");
                                                sbEnterprisePartsTable.append("<td align=\"center\" width=\"200\">").append("</td>");
                                                sbEnterprisePartsTable.append("<td align=\"center\" width=\"75\">").append("</td>");
                                                sbEnterprisePartsTable.append("</tr>");
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        //Modified by DSM 2018x.5 for PDF Views REQ IPP End
                        //Removed by DSM-2015x.4 for PDF Views (req id #11998)
                    }
                    sbEnterprisePartsTable.append("</table><tr><td><br/></td></tr></td></tr>");
                }
                //Modified by DSM-2015x.2 for PDF Views (Defect #9183) - Ends
            }
        } catch(Exception ex){
            ex.printStackTrace();
            throw ex;
        }//Added by DSM(Sogeti)-2018x.5 for PDF Views Defect #35683 : Starts
        finally{
            if(isContextPushed) {
                ContextUtil.popContext(context);
            }
        }//Added by DSM(Sogeti)-2018x.5 for PDF Views Defect #35683 : Ends
        //Modify Code Refactoring
        mlMEPData.clear();
        mlSEPData.clear();
        long endTime = new Date().getTime();
        System.out.println("Total Time has taken by the  getComponentEquivalentsTable Method is-->"+(endTime-startTime));
        return sbEnterprisePartsTable;
    }
    //Commented by DSM-2015x.4 for PDF Views(Req Id-11470,7554,7556 ) - Starts
    /**
     * This method gets Qualification Details For Equivalent Table for SEP/MEP
     * @param Context - Context user
     * @param String - Eqv Relationship ID
     * @return Map -  Qualification Details For equivalent MEP connected to SEP
     **/
	/*
	public Map getQualificationLinkForSummary(Context context,String strEqvRelId) throws Exception
	{
		StringList slReturnList = new StringList(3);
		StringList slQualiSelectable = new StringList();
		slQualiSelectable.add(DomainConstants.SELECT_NAME);
		slQualiSelectable.add(DomainConstants.SELECT_CURRENT);
		//Added by DSM-2015x.4 for PDF Views(Req Id-11998) - Starts
		slQualiSelectable.add("from["+pgV3Constants.RELATIONSHIP_QUALIFICATION+"].torel["+pgV3Constants.RELATIONSHIP_MANUFACTUREREQUIVALENT+"].to.from["+pgV3Constants.RELATIONSHIP_PGMEPTOPGPLANT+"].to.name");
		String strPlant = DomainConstants.EMPTY_STRING;
		StringBuffer sbPlant = new StringBuffer();
		//Added by DSM-2015x.4 for PDF Views(Req Id-11998) - Ends
		Map mpQualData = new HashMap();
		Map mpQAReturn = new HashMap();
		StringBuffer sbQAName = new StringBuffer();
		StringBuffer sbQAStatus = new StringBuffer();
		String strQAName = DomainConstants.EMPTY_STRING;
		String strQAStatus = DomainConstants.EMPTY_STRING;
		String REL_QUALIFICATION = PropertyUtil.getSchemaProperty(context, pgV3Constants.RELATIONSHIP_QUALIFICATION);
		try {
			String mqlCmdTxt = "print connection $1 select $2 dump $3";
			String strSelectPQRObjId = new StringBuilder("tomid[").append(REL_QUALIFICATION).append("].from.id").toString();
			String strQualificationId = DomainConstants.EMPTY_STRING;
			if (UIUtil.isNotNullAndNotEmpty(strEqvRelId)){
				strQualificationId = MqlUtil.mqlCommand(context, mqlCmdTxt, strEqvRelId, strSelectPQRObjId,"|");
			}
			if(UIUtil.isNullOrEmpty(strQualificationId)){
				slReturnList.add("");
			}else{
				StringList slQualIdList = FrameworkUtil.split(strQualificationId,"|");
				int iSize = slQualIdList.size();
				for(int q=0; q<iSize; q++){
					mpQualData = new HashMap();
					strQualificationId =(String)slQualIdList.get(q);
					if(UIUtil.isNotNullAndNotEmpty(strQualificationId)){
						DomainObject dQualObj = DomainObject.newInstance(context,strQualificationId);
						mpQualData = dQualObj.getInfo(context,slQualiSelectable);
						strQAName = (String)mpQualData.get(DomainConstants.SELECT_NAME);
						strQAStatus = (String)mpQualData.get(DomainConstants.SELECT_CURRENT);
						//Added by DSM-2015x.4 for PDF Views(Req Id-11998) - Starts
						strPlant	= (String)mpQualData.get("from["+pgV3Constants.RELATIONSHIP_QUALIFICATION+"].torel["+pgV3Constants.RELATIONSHIP_MANUFACTUREREQUIVALENT+"].to.from["+pgV3Constants.RELATIONSHIP_PGMEPTOPGPLANT+"].to.name");
						sbPlant.append(strPlant);
						//Added by DSM-2015x.4 for PDF Views(Req Id-11998) - Ends
						sbQAName.append(strQAName);
						sbQAStatus.append(strQAStatus);
						if(q!=iSize-1){
						sbQAName.append("<br/>");
						sbQAStatus.append("<br/>");
						//Added by DSM-2015x.4 for PDF Views(Req Id-11998) - Starts
						sbPlant.append("<br/>");
						//Added by DSM-2015x.4 for PDF Views(Req Id-11998) - Ends
						}
					}
				}
				mpQAReturn.put(DomainConstants.SELECT_NAME,sbQAName.toString());
				mpQAReturn.put(DomainConstants.SELECT_CURRENT,sbQAStatus.toString());
				mpQAReturn.put("QualPlant",sbPlant.toString());
			}
		}
		catch(Exception ex){
			ex.printStackTrace();
			throw ex;
		}
		return mpQAReturn;
	}
	//Added by DSM-2015x.2 for PDF Views (Req Id-11473,11998,11999) - Ends
	*/
    //Commented by DSM-2015x.4 for PDF Views(Req Id-11470,7554,7556 ) - Ends
    //Added by DSM-2015x.2 for PDF Views (Req Id-11473,11998) - Starts
    /**
     * @Desc Use to show Formulation connected with relationship pgDefinesMaterial
     * @param Context- Context user
     * @param String - Object ID
     * @return StringBuilder- returns list of Formulation connected
     * @throws Exception
     */
    public StringBuilder getProducingFormula(Context context, String strObjId, String pdfViewType){
        long startTime = new Date().getTime();
        StringBuilder sbProducingFormula = new StringBuilder();
        try {
            if(validateString(strObjId)){
                MapList mlProducingFormula = EnoviaTableUtils.getProducingFormula(context, strObjId);
                if(mlProducingFormula != null && !mlProducingFormula.isEmpty()){
                    sbProducingFormula.append("<tr><td><table class=\"pdf\" cellspacing=\"0\" width=\"1000px\" id=\"ProducingFormulaTable\">");
                    sbProducingFormula.append("<thead>");
                    sbProducingFormula.append("<tr><td colspan='6' class=\"new\" ><font size='4'><b>Producing Formula</b></font></td></tr>");
                    sbProducingFormula.append("<tr>");
                    sbProducingFormula.append("<td width=\"75\" align=\"center\"><b>Name</b></td>");
                    sbProducingFormula.append("<td width=\"75\" align=\"center\"><b>Type</b></td>");
                    if(!(pgPDFViewConstants.CONS_GENDOC.equalsIgnoreCase(pdfViewType.trim()))){
                        sbProducingFormula.append("<td width=\"75\" align=\"center\"><b>Revision</b></td>");
                    }
                    sbProducingFormula.append("<td width=\"75\" align=\"center\"><b>Description</b></td>");
                    sbProducingFormula.append("<td width=\"75\" align=\"center\"><b>Title</b></td>");
                    sbProducingFormula.append("<td width=\"75\" align=\"center\"><b>State</b></td>");
                    sbProducingFormula.append("</tr>");
                    sbProducingFormula.append("</thead>");
                    Map mpObjDetails;
                    String strType ;
                    String strValue;
                    String strState;
                    String strPolicy;
                    int nMapMP = mlProducingFormula.size();
                    for (int i = 0; i <nMapMP; i++){
                        mpObjDetails = (Map) mlProducingFormula.get(i);
                        strType = (String) mpObjDetails.get("Type");
                        strValue = UINavigatorUtil.getAdminI18NString("Type", strType, context.getSession().getLanguage());
                        strState = (String) mpObjDetails.get("State");
                        strPolicy = (String) mpObjDetails.get("Policy");
                        strState = EnoviaResourceBundle.getStateI18NString(context, strPolicy, strState,context.getLocale().getLanguage());
                        sbProducingFormula.append("<tr>");
                        sbProducingFormula.append("<td align=\"center\" width=\"75\">"+validateString1(mpObjDetails.get("Name"))+"</td>");
                        sbProducingFormula.append("<td align=\"center\" width=\"75\">"+validateString1(strValue)+"</td>");
                        if(!(pgPDFViewConstants.CONS_GENDOC.equalsIgnoreCase(pdfViewType.trim()))){
                            sbProducingFormula.append("<td align=\"center\" width=\"75\">"+validateString1(mpObjDetails.get("Revision"))+"</td>");
                        }
                        sbProducingFormula.append("<td align=\"center\" width=\"75\">"+checkLessThanGreaterThan(validateString1(mpObjDetails.get("Description")))+"</td>");
                        sbProducingFormula.append("<td align=\"center\" width=\"75\">"+checkLessThanGreaterThan(validateString1(mpObjDetails.get("Title")))+"</td>");
                        sbProducingFormula.append("<td align=\"center\" width=\"75\">"+validateString1(strState)+"</td>");
                        sbProducingFormula.append("</tr>");
                    }
                    sbProducingFormula.append("</table><tr><td><br /></td></tr></td></tr>");
                    mlProducingFormula.clear();
                }
            }
        } catch(Exception e){
            logger.log(Level.WARNING, null, e);
        }
        long endTime = new Date().getTime();
        System.out.println("Total Time has taken by the  getProducingFormula Method is-->"+(endTime-startTime));
        return sbProducingFormula;
    }
    //Added by DSM-2015x.2 for PDF Views (Req Id-11470,11471,11472,11473,11999,11998,12000,12001) - Starts
    /**
     * @Desc Show Substances and Materials table for PDF
     * @param Context- Context user
     * @param String - Object ID
     * @return StringBuilder- Substances and Materials Table
     * @throws Exception
     */
    private StringBuilder getSubstancesMaterialsTable(Context context, String strObjectId) throws Exception {
        long startTime = new Date().getTime();
        StringBuilder sbSubstancesMaterialsTable = new StringBuilder();
        String strName = null;
        String strType = null;
        String strId = null;
        //Modified by DSM-2015x.4 for PDF Views (Req #11470) - Starts
        String strisTargetMaterial = null;
        String strSubstanName = null;
        String strQSTarget = null;
        String strDescr    	  = null;
        String strConId    	  = null;
        DomainRelationship relObj = null;
        String strapp = "";
        StringList appList = null;
        StringList appIds = null;
        String[] valueArray =  null;
        StringList selectList = new StringList(1);
        selectList.add(DomainConstants.SELECT_NAME);
        StringBuilder strBuilder = null;
        Map objMap = null;
        MapList mapApplications = null;
        //Modified by DSM-2015x.4 for PDF Views (Req #11470) - Ends
        String strTitle = null;
        String strValue = null;
        String strMin  = null;
        String strTarget  = null;
        String strMax  = null;
        String strQS  = null;
        String strTradeName = null;
        String strSubCAS = null;
        String strRev = null;
        String strUOM = null;
        String strIsContaminant = null;
        String strFunction = null;
        String strState = null;
        //Added by DSM-2018x.3 for PDF Views (Req #11998,11473) - Starts
        String strUsageFlag = null;
        //Added by DSM-2018x.3 for PDF Views (Req #11998,11473) - Ends
        //Added by DSM(Sogeti)-2018x.1.1 for PDF Views Defect 26211  - Starts
        String strPolicy = null;
        String strCurrentState = null;
        //Added by DSM(Sogeti)-2018x.1.1 for PDF Views Defect 26211  - Ends
        Map mapObjDetails = null;
        Map mapObject = null;
        DomainObject doObj = null;
        boolean isPushContext = false;
        StringList objectSelects = new StringList(6);
        objectSelects.add(DomainConstants.SELECT_NAME);
        objectSelects.add(DomainConstants.SELECT_TYPE);
        objectSelects.add(pgV3Constants.SELECT_ATTRIBUTE_TITLE);
        objectSelects.add(pgV3Constants.SELECT_ATTRIBUTE_MARKETINGNAME);
        objectSelects.add(pgV3Constants.SELECT_ATTRIBUTE_CASNUMBER);
        Map mpArgs = new HashMap();
        mpArgs.put("objectId", strObjectId);
        //Added by DSM-2015x.4 for PDF Views (Defect Id-17453) - Starts
        String strInternalMaterialFor = DomainConstants.EMPTY_STRING;
        StringList slQuantities = DomainConstants.EMPTY_STRINGLIST;
        BigDecimal dQuantites = new BigDecimal(0.0);
        StringBuilder sbQuantitySelect = new StringBuilder("from[").append(pgV3Constants.RELATIONSHIP_COMPONENT_SUBSTANCE).append("].").append(pgV3Constants.SELECT_ATTRIBUTE_QUANTITY);
        //Added by DSM-2015x.4 for PDF Views (Defect Id-17453) - Ends
        //Modified by DSM(Sogeti)-2015x.5 for PDF views For NumberFormatException - Starts
        mpArgs.put("expandLevel", "0");
        //Modified by DSM(Sogeti)-2015x.5 for PDF views For NumberFormatException - Ends
        //Modified by DSM(Sogeti)-2018x.1.1 for PDF Views Defect 26215  - Starts
        DomainObject domObjectSub = DomainObject.newInstance(context,strObjectId);
        //Modified by DSM(Sogeti)-2018x.5 for PDF Views Requirement  - starts
        StringList parentObjSel = new StringList(2);
        parentObjSel.add(DomainConstants.SELECT_TYPE);
        parentObjSel.add(DomainConstants.SELECT_POLICY);
        Map parentMap = domObjectSub.getInfo(context,parentObjSel);
        String strObjType = (String) parentMap.get(DomainConstants.SELECT_TYPE);
        String strObjPolicy = (String) parentMap.get(DomainConstants.SELECT_POLICY);
        //Modified by DSM(Sogeti)-2018x.5 for PDF Views Requirement  - Ends
        //Modified by DSM(Sogeti)-2018x.1.1 for PDF Views Defect 26215  - Ends
        String[] strArgsDSO= JPO.packArgs(mpArgs);
        // Added by DSM-2018x.6_Oct_CW for PDF Views (Req Id #39799 ) : Start
        boolean isSEPRawMaterialOrSEPIPP = pgV3Constants.POLICY_SUPPLIEREQUIVALENT.equalsIgnoreCase(strObjPolicy) && (pgV3Constants.TYPE_RAWMATERIALPART.equalsIgnoreCase(strObjType) || pgV3Constants.TYPE_INTERMEDIATE_PRODUCT_PART.equalsIgnoreCase(strObjType)) ;
        boolean isSEPRawMaterial = pgV3Constants.POLICY_SUPPLIEREQUIVALENT.equalsIgnoreCase(strObjPolicy) && pgV3Constants.TYPE_RAWMATERIALPART.equalsIgnoreCase(strObjType);
        // Added by DSM-2018x.6_Oct_CW for PDF Views (Req Id #39799 ) : End
        try{
            String strContext = context.getUser();
            if(pgV3Constants.PERSON_USER_AGENT.equals(strContext)){
                ContextUtil.popContext(context);
                isPushContext = true;
            }
            //Modified for 2018x Upgrade. enoGLSFormulationMaterial/enoGLSFormulationMaterialBase JPO Deleted.
            // Method getConsolidatedComposition is moved to JPO emxCPNMaterialBase. Customized method is available in emxCPNMaterial JPO.
            // ${CLASS:enoGLSFormulationMaterial} objCP = new ${CLASS:enoGLSFormulationMaterial}(context, strArgsDSO);
            //			emxCPNMaterial_mxJPO objCP = new emxCPNMaterial_mxJPO(context, strArgsDSO);
            //			MapList mlSubstancesMaterialsObjects = objCP.getConsolidatedComposition(context,strArgsDSO);
            //Added for PDF Refactor
            MapList mlSubstancesMaterialsObjects = (MapList)pgPDFViewHelper.executeMainClassMethod(context, "emxCPNMaterial", "getConsolidatedComposition", strArgsDSO);
            if(mlSubstancesMaterialsObjects != null && mlSubstancesMaterialsObjects.size()>0 ){
                sbSubstancesMaterialsTable.append("<tr><td><table class=\"WordWrappdf\" cellspacing=\"0\" width=\"1000px\" id=\"pgFinishedProductTable\">");
                sbSubstancesMaterialsTable.append("<thead>");
                //Modified by DSM(Sogeti)-2018x.5 for PDF views  Requirements - Starts
                //Modified by DSM-2018x.3 for PDF Views (Req #11998,11473) - Starts
                //Modified by DSM-2018x.3 for PDF Views (Defect #32060,32101) - Starts
                //Modified by DSM(Sogeti)-2018x.5 for PDF views (Defect #32199) - Starts
                if(pgV3Constants.TYPE_PGRAWMATERIAL.equalsIgnoreCase(strObjType))
                {
                    //Modified by DSM for PDF Views (Defect #32199) -ENDS
                    //Modified by DSM-2018x.3 for PDF Views (Defect #32060,32101) - Ends
                    sbSubstancesMaterialsTable.append("<tr><td colspan='8' class=\"new\" ><font size='4'><b>Substances & Materials</b></font></td></tr>");
                }else
                {
                    sbSubstancesMaterialsTable.append("<tr><td colspan='8' class=\"new\" ><font size='4'><b>Materials & Composition</b></font></td></tr>");
                }//Modified by DSM-2018x.3 for PDF Views (Req #11998,11473) - Ends
                sbSubstancesMaterialsTable.append("<tr>");
                //Modified by DSM-2015x.4 for PDF Views (Req #11470) - Starts
                sbSubstancesMaterialsTable.append("<td width=\"100\" align=\"center\"><b>Name(N)<BR></BR>Type(T)</b></td>");
                sbSubstancesMaterialsTable.append("<td width=\"200\" align=\"center\"><b>Title</b></td>");
                //modified  by DSM 2018x.1 PDF Views (Req Id #11472) - Starts
                //Modified by DSM(Sogeti)-2018x.1.1 for PDF Views Defect 26215  - Starts
                //Modified by DSM-2018x.3 for PDF Views (Req #11998,11473) - Starts
                //Modified by DSM-2018x.5 for PDF Views (Defect #32199) - Starts
                //Modified by DSM-2018x.5 for PDF Views (Defect #32647) - Starts
                // Modified by DSM-2018x.6_Oct_CW for PDF Views (Req Id #39799 ) : Start
                if(isSEPRawMaterialOrSEPIPP || pgV3Constants.TYPE_FORMULATIONPART.equalsIgnoreCase(strObjType) || (pgV3Constants.TYPE_ASSEMBLEDPRODUCTPART.equalsIgnoreCase(strObjType)) || (pgV3Constants.TYPE_ANCILLARYRAWMATERIALPART.equalsIgnoreCase(strObjType)) || (pgV3Constants.TYPE_DEVICEPRODUCTPART.equalsIgnoreCase(strObjType))){
                    // Modified by DSM-2018x.6_Oct_CW for PDF Views (Req Id #39799 ) : End
                    //Modified by DSM-2018x.5 for PDF Views (Defect #32647) - Ends
                    sbSubstancesMaterialsTable.append("<td width=\"120\" align=\"center\"><b>Min Quantity(Min)</b><BR></BR><b>Dry % (w/w)(Dry)</b><BR></BR><b>Max Quantity (Max)</b></td>");
                }
                else
                {
                    sbSubstancesMaterialsTable.append("<td width=\"120\" align=\"center\"><b>Min Quantity(Min)</b><BR></BR><b>Dry % (w/w)(Dry)</b><BR></BR><b>Max Quantity (Max)</b><BR></BR><b>Quantity U of M(UoM)</b></td>");
                }
                //Modified by DSM-2018x.5 for PDF Views (Defect #32199) - Ends
                //Modified by DSM-2018x.5 for PDF Views (Defect #32199) - Starts
                //Modified by DSM-2018x.5 for PDF Views (Defect #32647) - Starts
                // Modified by DSM-2018x.6_Oct_CW for PDF Views (Req Id #39799 ) : Start
                if( isSEPRawMaterialOrSEPIPP || pgV3Constants.TYPE_FORMULATIONPART.equalsIgnoreCase(strObjType) || (pgV3Constants.TYPE_ASSEMBLEDPRODUCTPART.equalsIgnoreCase(strObjType)) || (pgV3Constants.TYPE_ANCILLARYRAWMATERIALPART.equalsIgnoreCase(strObjType)) || (pgV3Constants.TYPE_DEVICEPRODUCTPART.equalsIgnoreCase(strObjType)))
                // Modified by DSM-2018x.6_Oct_CW for PDF Views (Req Id #39799 ) : Start
                {
                    sbSubstancesMaterialsTable.append("<td width=\"60\" align=\"center\"><b>Quantity UofM(UoM)</b><BR></BR><b>QS/Target(QS)</b><BR></BR><b>Usage Flags(UF)</b></td>");
                }else {
                    sbSubstancesMaterialsTable.append("<td width=\"60\" align=\"center\"><b>QS/Target(QS)</b><BR></BR><b>Usage Flags(UF)</b></td>");
                }
                //Modified by DSM-2018x.5 for PDF Views (Defect #32199) - Ends
                //Modified by DSM-2018x.5 for PDF Views (Defect #32647) - Ends
                //Modified by DSM(Sogeti)-2018x.1.1 for PDF Views Defect 26215  - Ends
                //modified  by DSM 2018x.1 PDF Views (Req Id #11472) - Ends
                sbSubstancesMaterialsTable.append("<td width=\"100\" align=\"center\"><b>Applications/Functions</b></td>");
                if(pgV3Constants.POLICY_MANUFACTUREREQUIVALENT.equalsIgnoreCase(strObjPolicy))
                {
                    sbSubstancesMaterialsTable.append("<td width=\"110\" align=\"center\"><b>Is Contaminant </b></td>");
                    sbSubstancesMaterialsTable.append("<td width=\"110\" align=\"center\"><b>CAS Number(CAS)</b><BR></BR><b>State Revision(SR)</b></td>");
                }
                // Modified by DSM-2018x.6_Oct_CW for PDF Views (Req Id #39799 ) : Start
                else if(isSEPRawMaterial || pgV3Constants.TYPE_FORMULATIONPART.equalsIgnoreCase(strObjType) || (pgV3Constants.TYPE_ASSEMBLEDPRODUCTPART.equalsIgnoreCase(strObjType)) || (pgV3Constants.TYPE_ANCILLARYRAWMATERIALPART.equalsIgnoreCase(strObjType)) || (pgV3Constants.TYPE_DEVICEPRODUCTPART.equalsIgnoreCase(strObjType))|| (pgV3Constants.TYPE_INTERMEDIATE_PRODUCT_PART.equalsIgnoreCase(strObjType)))
                // Modified by DSM-2018x.6_Oct_CW for PDF Views (Req Id #39799 ) : End
                {
                    sbSubstancesMaterialsTable.append("<td width=\"110\" align=\"center\"><b>Is Impurity(IP)</b><BR></BR><b>CAS Number(CAS)</b><BR></BR><b>State(State)</b><BR></BR><b>Revision(Rev)</b></td>");
                }
                else if(pgV3Constants.TYPE_PGRAWMATERIAL.equalsIgnoreCase(strObjType) || (pgV3Constants.TYPE_RAWMATERIALPART.equalsIgnoreCase(strObjType)))
                {
                    sbSubstancesMaterialsTable.append("<td width=\"200\" align=\"center\"><b>Is Impurity</b></td>");
                    sbSubstancesMaterialsTable.append("<td width=\"200\" align=\"center\"><b>CAS Number(CAS)</b><BR></BR><b>State Revision(SR)</b></td>");
                }
                sbSubstancesMaterialsTable.append("<td width=\"200\" align=\"center\"><b>Description</b></td>");
                //Modified by DSM-2015x.4 for PDF Views (Req #11470) - Ends
                //Modified by DSM(Sogeti)-2018x.5 for PDF views  Requirements - Ends
                sbSubstancesMaterialsTable.append("</tr>");
                sbSubstancesMaterialsTable.append("</thead>");
                for (int i = 0;i< mlSubstancesMaterialsObjects.size(); i++){
                    mapObject = new HashMap();
                    mapObject = (Map) mlSubstancesMaterialsObjects.get(i);
                    strId = (String)mapObject.get(DomainConstants.SELECT_ID);
                    if(UIUtil.isNotNullAndNotEmpty(strId)){
                        doObj = DomainObject.newInstance(context,strId);
                        mapObjDetails = new HashMap();
                        mapObjDetails = (Map) doObj.getInfo(context, objectSelects);
                        strName = (String) mapObject.get(DomainConstants.SELECT_NAME);
                        strType = (String) mapObject.get(DomainConstants.SELECT_TYPE);
                        //DSM (Infosys) ALM Defect-35150 PRB0073293 - Title value not visible for Substance and Max value not visible for Substance with Impurities in Material & Composition table - Start
                        if(doObj.isKindOf(context, pgV3Constants.TYPE_SUBSTANCE)){
                            strTitle = (String) mapObject.get(FormulationAttribute.SUBSTANCE_NAME.getAttributeSelect(context));
                        } else {
                            strTitle = (String) mapObject.get(pgV3Constants.SELECT_ATTRIBUTE_TITLE);
                        }
                        //DSM (Infosys) ALM Defect-35150 PRB0073293 - Title value not visible for Substance and Max value not visible for Substance with Impurities in Material & Composition table - End
                        //Added by DSM(Sogeti)-2018x.0 April Bug Fix for PDF Views (Defect ID-24902) - Starts
                        if(UIUtil.isNotNullAndNotEmpty(strTitle)){
                            strTitle = strTitle.replaceAll("[<]","#LESS_THAN");
                            strTitle = strTitle.replaceAll("[>]","#GREATER_THAN");
                        }
                        //Added by DSM(Sogeti)-2018x.0 April Bug Fix for PDF Views (Defect ID-24902) - Ends
                        strMin = (String)mapObject.get(pgV3Constants.SELECT_ATTRIBUTE_MINIMUMWEIGHT);
                        strTarget = (String)mapObject.get(pgV3Constants.SELECT_ATTRIBUTE_QUANTITY);
                        strMax = (String)mapObject.get(pgV3Constants.SELECT_ATTRIBUTE_MAXIMUMWEIGHT);
                        strUOM = (String)mapObject.get(pgV3Constants.SELECT_ATTRIBUTE_QUANTITYUNITOFMEASURE);
                        //2018X defect 24410 QS/Target
                        strQS = (String)mapObject.get(MATCSchema.Attribute.FILL.getAttributeSelect(context));
                        strIsContaminant = (String)mapObject.get(pgV3Constants.SELECT_ATTRIBUTE_ISCONTAMINANT);
                        //Modified by DSM-2015x.4 for PDF Views (Req #11470) - Starts
                        strisTargetMaterial = (String)mapObject.get(pgV3Constants.SELECT_ATTRIBUTE_ISTARGETMATERIAL);
                        strSubstanName = (String)mapObject.get(pgV3Constants.SELECT_ATTRIBUTE_SUBSTANCENAME);
                        //Added by DSM(Sogeti)-2018x.0 April Bug Fix for PDF Views (Defect ID-24902) - Starts
                        if(UIUtil.isNotNullAndNotEmpty(strSubstanName)){
                            strSubstanName = strSubstanName.replaceAll("[<]","#LESS_THAN");
                            strSubstanName = strSubstanName.replaceAll("[>]","#GREATER_THAN");
                        }
                        //Added by DSM(Sogeti)-2018x.0 April Bug Fix for PDF Views (Defect ID-24902) - Ends
                        strDescr = (String)mapObject.get("description");
                        //Added by DSM(Sogeti)-2015x.5 for PDF Views (Defect ID-16705) - Starts
                        if(UIUtil.isNullOrEmpty(strDescr)){
                            strDescr = DomainConstants.EMPTY_STRING;
                        }
                        //Added by DSM(Sogeti)-2015x.5 for PDF Views (Defect ID-16705) - Ends
                        //Added by DSM(Sogeti) - for 2015x.5 PDF Views Defect# 15160 - Starts
                        strDescr = strDescr.replaceAll("[<]","#LESS_THAN");
                        //Added by DSM(Sogeti) - for 2015x.5 PDF Views Defect# 15160 - Ends
                        strConId = (String)mapObject.get("id[connection]");
                        if(UIUtil.isNotNullAndNotEmpty(strConId)){
                            relObj = new DomainRelationship(strConId);
                            strapp = relObj.getAttributeValue(context,"Application");
                            appList = new StringList(FrameworkUtil.split(strapp, ","));
                            appIds = new StringList();
                            Iterator appsItr = appList.iterator();
                            while (appsItr.hasNext()) {
                                appIds.add(((String)appsItr.next()).trim());
                            }
                            valueArray =  (String[])appIds.toArray(new String []{});
                            mapApplications = DomainObject.getInfo(context, valueArray, selectList);
                            strBuilder = new StringBuilder();
                            Iterator it = mapApplications.iterator();
                            while(it.hasNext()){
                                objMap = (Map) it.next();
                                strBuilder.append(objMap.get(DomainConstants.SELECT_NAME));
                                if(it.hasNext())
                                    strBuilder.append(",");
                            }
                            strFunction = strBuilder.toString();
                            //Added by DSM(Sogeti)-2018x.0 April Bug Fix for PDF Views (Defect ID-24902) - Starts
                            if(UIUtil.isNotNullAndNotEmpty(strFunction)){
                                strFunction = strFunction.replaceAll("[<]","#LESS_THAN");
                                strFunction = strFunction.replaceAll("[>]","#GREATER_THAN");
                            }
                            //Added by DSM(Sogeti)-2018x.0 April Bug Fix for PDF Views (Defect ID-24902) - Ends
                        }
                        //Modified by DSM-2015x.4 for PDF Views (Req #11470) - Ends
                        strSubCAS = (String)mapObjDetails.get(pgV3Constants.SELECT_ATTRIBUTE_CASNUMBER);
                        strRev = (String) mapObject.get(DomainConstants.SELECT_REVISION);
                        strState = (String) mapObject.get(DomainConstants.SELECT_CURRENT);
                        //Added by DSM(Sogeti)-2018x.1.1 for PDF Views Defect 26211  - Starts
                        strPolicy = (String) mapObject.get(DomainConstants.SELECT_POLICY);
                        strCurrentState = EnoviaResourceBundle.getStateI18NString(context, strPolicy, strState,context.getLocale().getLanguage());
                        //Added by DSM(Sogeti)-2018x.1.1 for PDF Views Defect 26211  - Ends
                        strValue = UINavigatorUtil.getAdminI18NString("Type", strType, context.getSession().getLanguage());
                        //modified  by DSM 2015x.2 PDF Views Defect 10746-Starts
                        //Modified by DSM-2015x.4 for PDF Views (Req #11470) - Starts
                        strQSTarget = (strQS.equals("TRUE"))? "QS":
                                (strisTargetMaterial.equals("TRUE"))? "Target Component" : "";
                        //Modified by DSM-2015x.4 for PDF Views (Req #11470) - Ends
                        //Modified by DSM-2015x.4 for PDF Views (Defect Id-17453) - Starts
                        if(strMin.equals("0.0") || pgV3Constants.CONST_TRUE.equalsIgnoreCase(strIsContaminant))
                            strMin= EMPTY_STRING;
                        if(pgV3Constants.CONST_TRUE.equalsIgnoreCase(strIsContaminant)){
                            strTarget = EMPTY_STRING;
                        } else if(pgV3Constants.TYPE_INTERNALMATERIAL.equalsIgnoreCase(strType)){
                            DomainObject domContextPart = DomainObject.newInstance(context,strObjectId);
                            strInternalMaterialFor = domContextPart.getInfo(context,"attribute["+pgV3Constants.ATTRIBUTE_INTERNAL_MATERIAL_FOR+"]");
                            if(pgV3Constants.CONSTANT_PRODUCT.equalsIgnoreCase(strInternalMaterialFor)){
                                slQuantities = domContextPart.getInfoList(context, sbQuantitySelect.toString());
                                slQuantities.sort();
                                for(int j=0; j<slQuantities.size(); j++){
                                    dQuantites = dQuantites.add(new BigDecimal((String)slQuantities.get(j)));
                                }
                                if(dQuantites.compareTo(new BigDecimal(0.00))!=0){
                                    strTarget = String.valueOf(dQuantites);
                                }
                            }
                        }
                        //Modified by DSM-2015x.4 for PDF Views (Defect Id-17453) - Ends
                        //DSM (Infosys) ALM Defect-35150 PRB0073293 - Title value not visible for Substance and Max value not visible for Substance with Impurities in Material & Composition table - Start
                        //if(strMax.equals("0.0"))
                        //strMax= EMPTY_STRING;
                        if(strMax.equals("0.0") && pgV3Constants.CONST_TRUE.equalsIgnoreCase(strIsContaminant)){
                            strMax=(String)mapObject.get(pgV3Constants.SELECT_ATTRIBUTE_QUANTITY);
                        } else if(strMax.equals("0.0")){
                            strMax= EMPTY_STRING;
                        }
                        //DSM (Infosys) ALM Defect-35150 PRB0073293 - Title value not visible for Substance and Max value not visible for Substance with Impurities in Material & Composition table - End
                        //modified  by DSM 2015x.2 PDF Views Defect 10746-Ends
                        sbSubstancesMaterialsTable.append("<tr>");
                        //Modified by DSM(Sogeti)-2018x.5 for PDF views  Requirements - Starts
                        //Modified by DSM-2015x.4 for PDF Views (Req #11470) - Starts
                        sbSubstancesMaterialsTable.append("<td align=\"left\" width=\"100\"><B>N:</B>"+validateString1(strName)+"<BR></BR><B>T:</B>"+validateString1(strValue)+"</td>");
                        sbSubstancesMaterialsTable.append("<td align=\"center\" width=\"200\">"+validateString1(strTitle)+"</td>");
                        //modified  by DSM 2018x.1 PDF Views (Req Id #11472) - Starts
                        //Modified by DSM(Sogeti)-2018x.1.1 for PDF Views Defect 26215  - Starts
                        //Modified by DSM-2018x.3 for PDF Views (Req #11998,11473) - Start
                        //Modified by DSM-2018x.5 for PDF Views (Defect #32199) - Starts
                        // Modified by DSM-2018x.6_Oct_CW for PDF Views (Req Id #39799 ) : Start
                        if(isSEPRawMaterialOrSEPIPP || pgV3Constants.TYPE_FORMULATIONPART.equalsIgnoreCase(strObjType) || (pgV3Constants.TYPE_ASSEMBLEDPRODUCTPART.equalsIgnoreCase(strObjType)) || (pgV3Constants.TYPE_ANCILLARYRAWMATERIALPART.equalsIgnoreCase(strObjType)) || (pgV3Constants.TYPE_DEVICEPRODUCTPART.equalsIgnoreCase(strObjType)))
                        // Modified by DSM-2018x.6_Oct_CW for PDF Views (Req Id #39799 ) : End
                        {
                            sbSubstancesMaterialsTable.append("<td align=\"left\" width=\"120\"><B>Min:</B>"+validateString1(strMin)+"<BR></BR><B>Dry:</B>"+validateString1(strTarget)+"<BR></BR><B>Max:</B>"+validateString1(strMax)+"</td>");
                        }
                        else {
                            sbSubstancesMaterialsTable.append("<td align=\"left\" width=\"120\"><B>Min:</B>"+validateString1(strMin)+"<BR></BR><B>Dry:</B>"+validateString1(strTarget)+"<BR></BR><B>Max:</B>"+validateString1(strMax)+"<BR></BR><B>UoM:</B>"+validateString1(strUOM)+"</td>");
                        }
                        Vector usageFlagVector = getSubstanceMaterialTableUsageFlag(context, mapObject);
                        if((usageFlagVector != null) && (usageFlagVector.size() > 0)) {
                            strUsageFlag = (String)usageFlagVector.get(0);
                        }
                        Vector qsTargetVector = getSubstanceMaterialTableQSTarget(context, mapObject);
                        if((qsTargetVector != null) && (qsTargetVector.size() > 0)) {
                            strQSTarget = (String)qsTargetVector.get(0);
                        }
                        // Modified by DSM-2018x.6_Oct_CW for PDF Views (Req Id #39799 ) : Start
                        if(isSEPRawMaterialOrSEPIPP || pgV3Constants.TYPE_FORMULATIONPART.equalsIgnoreCase(strObjType) || (pgV3Constants.TYPE_ASSEMBLEDPRODUCTPART.equalsIgnoreCase(strObjType)) || (pgV3Constants.TYPE_ANCILLARYRAWMATERIALPART.equalsIgnoreCase(strObjType)) || (pgV3Constants.TYPE_DEVICEPRODUCTPART.equalsIgnoreCase(strObjType)))
                        // Modified by DSM-2018x.6_Oct_CW for PDF Views (Req Id #39799 ) : End
                        {
                            sbSubstancesMaterialsTable.append("<td align=\"left\" width=\"60\"><B>UoM:</B>"+validateString1(strUOM)+"<BR></BR><B>QS:</B>"+validateString1(strQSTarget)+"<BR></BR><B>UF:</B>"+validateString1(strUsageFlag)+"</td>");
                        }
                        else {
                            sbSubstancesMaterialsTable.append("<td align=\"left\" width=\"60\"><B>QS:</B>"+validateString1(strQSTarget)+"<BR></BR><B>UF:</B>"+validateString1(strUsageFlag)+"</td>");
                        }
                        //Modified by DSM-2018x.5 for PDF Views (Defect #32199) - Ends
                        //Modified by DSM-2018x.3 for PDF Views (Req #11998,11473) - End
                        sbSubstancesMaterialsTable.append("<td align=\"center\" width=\"100\">"+validateString1(strFunction)+"</td>");
                        //Added by DSM(Sogeti)-2018x.1.1 for PDF Views Defect 26211  - Starts
                        //Modified by DSM-2018x.3 for PDF Views (Req #11998,11473) - Start
                        if(pgV3Constants.POLICY_MANUFACTUREREQUIVALENT.equalsIgnoreCase(strObjPolicy)){
                            sbSubstancesMaterialsTable.append("<td align=\"left\" width=\"110\">"+validateString1(strIsContaminant)+"</td>");
                            sbSubstancesMaterialsTable.append("<td align=\"left\" width=\"110\"><B>CAS:</B>"+validateString1(strSubCAS)+"<BR></BR><B>SR:</B>"+validateString1(strCurrentState)+" "+validateString1(strRev)+"</td>");
                        }
                        // Modified by DSM-2018x.6_Oct_CW for PDF Views (Req Id #39799 ) : Start
                        else if(isSEPRawMaterial || pgV3Constants.TYPE_FORMULATIONPART.equalsIgnoreCase(strObjType) || (pgV3Constants.TYPE_ASSEMBLEDPRODUCTPART.equalsIgnoreCase(strObjType)) || (pgV3Constants.TYPE_ANCILLARYRAWMATERIALPART.equalsIgnoreCase(strObjType)) || (pgV3Constants.TYPE_DEVICEPRODUCTPART.equalsIgnoreCase(strObjType))|| (pgV3Constants.TYPE_INTERMEDIATE_PRODUCT_PART.equalsIgnoreCase(strObjType)))
                        // Modified by DSM-2018x.6_Oct_CW for PDF Views (Req Id #39799 ) : End
                        {
                            sbSubstancesMaterialsTable.append("<td align=\"left\" width=\"110\"><B>IP:</B>"+validateString1(strIsContaminant)+"<BR></BR><B>CAS:</B>"+validateString1(strSubCAS)+"<BR></BR><B>State:</B>"+validateString1(strCurrentState)+"<BR></BR><B>Rev:</B>"+validateString1(strRev)+"</td>");
                        }
                        else if(pgV3Constants.TYPE_PGRAWMATERIAL.equalsIgnoreCase(strObjType) || (pgV3Constants.TYPE_RAWMATERIALPART.equalsIgnoreCase(strObjType))){
                            sbSubstancesMaterialsTable.append("<td align=\"left\" width=\"200\">"+validateString1(strIsContaminant)+"</td>");
                            sbSubstancesMaterialsTable.append("<td align=\"center\" width=\"200\"><B>CAS:</B>"+validateString1(strSubCAS)+"<BR></BR><B>SR:</B>"+validateString1(strCurrentState)+" "+validateString1(strRev)+"</td>");
                        }
                        //Modified by DSM-2018x.3 for PDF Views (Req #11998,11473) - End
                        //Added by DSM(Sogeti)-2018x.1.1 for PDF Views Defect 26211  - Ends
                        sbSubstancesMaterialsTable.append("<td align=\"center\" width=\"200\">"+validateString1(strDescr)+"</td>");
                        //Modified by DSM-2015x.4 for PDF Views (Req #11470) - Ends
                        //Modified by DSM(Sogeti)-2018x.5 for PDF views  Requirements - Ends
                        sbSubstancesMaterialsTable.append("</tr>");
                    }
                }
                sbSubstancesMaterialsTable.append("</table><tr><td><br /></td></tr></td></tr>");
            }
            //Modify Code Refactoring
            mlSubstancesMaterialsObjects.clear();
            if(isPushContext) {
                ContextUtil.pushContext(context, pgV3Constants.PERSON_USER_AGENT, "", "");
                isPushContext = false;
            }
        }catch(Exception ex){
            if(isPushContext) {
                ContextUtil.pushContext(context, pgV3Constants.PERSON_USER_AGENT, "", "");
                isPushContext = false;
            }
            ex.printStackTrace();
        }
        long endTime = new Date().getTime();
        System.out.println("Total Time has taken by the  getSubstancesMaterialsTable Method is-->"+(endTime-startTime));
        return sbSubstancesMaterialsTable;
    }
    //Added by DSM-2015x.2 for PDF Views (Req Id-11470,11471,11472,11473,11999,11998,12000,12001 ) - Ends

    /**
     * @Desc 2018x.3 - Get attribute - field Usage Flag for Substance & Material Table
     * @param Context- Matrix user
     * @param Map - info map
     * @return Vector - containing field data.
     * @throws Exception
     */
    public Vector getSubstanceMaterialTableUsageFlag(Context context, Map infoMap) throws Exception {

        MapList objectList = new MapList();
        objectList.add(infoMap);

        Map argsMap= new HashMap();
        argsMap.put("objectList", objectList);
        return (Vector) JPO.invoke(context, "emxCPNMaterial", null, "getUsageFlags", JPO.packArgs(argsMap), Object.class);

    }


    /**
     * @Desc 2018x.3 - Get attribute - field QS Target for Substance & Material Table
     * @param Context- Matrix user
     * @param Map - info map
     * @return Vector - containing field data.
     * @throws Exception
     */
    public Vector getSubstanceMaterialTableQSTarget(Context context, Map infoMap) throws Exception {

        MapList objectList = new MapList();
        objectList.add(infoMap);
        Map argsMap= new HashMap();
        argsMap.put("objectList", objectList);
        return (Vector) JPO.invoke(context, "emxCPNMaterial", null, "getQSTargetFromColumn", JPO.packArgs(argsMap), Object.class);
    }
    //Modified by DSM-2015x.4 for PDF Views FOP Type (Req Id-11472 and 11426) - Starts
    /**
     * @Desc Show Formula Ingredients Table  for FOP Type -PDF views
     * @param Context- Context user
     * @param String - Object ID
     * @return StringBuilder- Formula Ingredient Table
     * @throws Exception
     */
    //Modified by DSM-2015x.4 for PDF Views FOP Type (Req Id-11472 and 11426) - Starts
    /**
     //Modified by DSM-2015x.4 for PDF Views FOP Type (Req Id-11472 and 11426) - Starts
     /**
     * @Desc Show Formula Ingredients Table  for FOP Type -PDF views
     * @param Context- Context user
     * @param String - Object ID
     * @return StringBuilder- Formula Ingredient Table
     * @throws Exception
     */
    public StringBuilder getFormulaIngredients(Context context, String strObjId, String strPDFViewKind) throws Exception {
        long startTime = new Date().getTime();
        StringBuilder sbFormulaIngredients = new StringBuilder();
        MapList mlFormulaIngredients = new MapList();
        Map mpFormulaIngredients = new HashMap();
        Map mpObjDetails = new HashMap();
        boolean findNumberIsNotEmpty=true;
        String strName = DomainConstants.EMPTY_STRING;
        String strId = DomainConstants.EMPTY_STRING;
        String strType = DomainConstants.EMPTY_STRING;
        String strValue = DomainConstants.EMPTY_STRING;
        String strStage = DomainConstants.EMPTY_STRING;
        String strMin = DomainConstants.EMPTY_STRING;
        String strMax = DomainConstants.EMPTY_STRING;
        String strLoss = DomainConstants.EMPTY_STRING;
        String strQuantity = DomainConstants.EMPTY_STRING;
        String strWeightWet = DomainConstants.EMPTY_STRING;
        String strWeightDry = DomainConstants.EMPTY_STRING;
        String strIdd =DomainConstants.EMPTY_STRING;
        String strRelId =DomainConstants.EMPTY_STRING;
        String strDryPer =DomainConstants.EMPTY_STRING;
        String strSequenceNumber =DomainConstants.EMPTY_STRING;
        String strVirtualName =DomainConstants.EMPTY_STRING;
        String strviName =DomainConstants.EMPTY_STRING;
        String strTitle =DomainConstants.EMPTY_STRING;
        String strState =DomainConstants.EMPTY_STRING;
        String strRev =DomainConstants.EMPTY_STRING;
        String strProcessName =DomainConstants.EMPTY_STRING;
        String strFormulaTypee =DomainConstants.EMPTY_STRING;
        String strgetFormulaNamee =DomainConstants.EMPTY_STRING;
        //DSM (DS) 2018x.0 FD02 post upgrade fix - change PLBOM to FBOM - starts
        String strRel =pgV3Constants.RELATIONSHIP_PLBOM;
        //DSM (DS) 2018x.0 FD02 post upgrade fix - change PLBOM to FBOM - ends
        //Commented by DSM-2015x.5.1 for FOP PDF Views (Defect #19874) - Starts
        //Added by DSM-2015x.5.1 for FOP PDF Views (Req #11472) - Starts
        String strMinWetWeight = DomainConstants.EMPTY_STRING;
        String strMaxWetWeight = DomainConstants.EMPTY_STRING;
        String strUnitsValue = DomainConstants.EMPTY_STRING;
        String strSub = DomainConstants.EMPTY_STRING;
        String strChange = DomainConstants.EMPTY_STRING;
        //Added by DSM-2015x.5.1 for FOP PDF Views (Req #11472) - Ends
        //commented by DSM-2015x.5.1 for FOP PDF Views (Defect #19874) - Ends
        StringList objectSelects = new StringList(10);
        objectSelects.add(pgV3Constants.SELECT_ATTRIBUTE_TITLE);
        //Modified for 2018x Upgrade - Stage attribute is replaced by Release Phase attribute in 18x OOTB.
        objectSelects.add(pgV3Constants.SELECT_ATTRIBUTE_RELEASE_PHASE);
        objectSelects.add(DomainConstants.SELECT_NAME);
        objectSelects.add(DomainConstants.SELECT_TYPE);
        objectSelects.add(DomainConstants.SELECT_ID);
        objectSelects.add(DomainConstants.SELECT_REVISION);
        objectSelects.add(DomainConstants.SELECT_CURRENT);
        objectSelects.add(pgV3Constants.SELECT_ATTRIBUTE_PGORIGINATINGSOURCE);
        objectSelects.add("from["+pgV3Constants.RELATIONSHIP_PGPDTEMPLATESTOPGPLIREPORTEDFUNCTION+"].to.name");
        objectSelects.add(pgV3Constants.SELECT_ATTRIBUTE_RELEASE_PHASE);
		//Added by DSM(Sogeti) - for 2022x.02 May CW PDF Views Req#46172 - Starts
		objectSelects.add(pgPDFViewConstants.SELECT_ATTRIBUTE_PGRELATIONSHIPRESTRICTION);
		objectSelects.add(pgPDFViewConstants.SELECT_ATTRIBUTE_PGRELATIONSHIPRESTRICTIONCOMMENTS);
		//Added by DSM(Sogeti) - for 2022x.02 May CW PDF Views Req#46172 - Ends
        String strMaterialFunction  = DomainConstants.EMPTY_STRING;
        StringList relSelects = new StringList();
        //Modified by DSM-2015x.5 for PDF Views (Defect #15612) - Starts
				/* relSelects.add(pgV3Constants.SELECT_ATTRIBUTE_MIN_PERCENT_ACTUALWEIGHTWET);
				relSelects.add(pgV3Constants.SELECT_ATTRIBUTE_MAX_PERCENT_ACTUALWEIGHTWET);
				relSelects.add(pgV3Constants.SELECT_ATTRIBUTE_LOSS);
				relSelects.add(pgV3Constants.SELECT_ATTRIBUTE_QUANTITY);
				relSelects.add(pgV3Constants.SELECT_ATTRIBUTE_TARGETWETWEIGHT);
				relSelects.add(pgV3Constants.SELECT_ATTRIBUTE_TARGETWEIGHTDRY);
				relSelects.add(pgV3Constants.SELECT_ATTRIBUTE_TOTAL);
				relSelects.add(pgV3Constants.SELECT_ATTRIBUTE_PROCESSINGNOTE); */
        relSelects.add("attribute["+pgV3Constants.ATTRIBUTE_MIN_PERCENT_ACTUALWEIGHTWET+"].inputvalue");
        relSelects.add("attribute["+pgV3Constants.ATTRIBUTE_MAX_PERCENT_ACTUALWEIGHTWET+"].inputvalue");
        relSelects.add("attribute["+pgV3Constants.ATTRIBUTE_LOSS+"].inputvalue");
        relSelects.add("attribute["+pgV3Constants.ATTRIBUTE_QUANTITY+"].inputvalue");
        relSelects.add("attribute["+pgV3Constants.ATTRIBUTE_TARGETWETWEIGHT+"].inputvalue");
        relSelects.add("attribute["+pgV3Constants.ATTRIBUTE_TARGETWEIGHTDRY+"].inputvalue");
        relSelects.add("attribute["+pgV3Constants.ATTRIBUTE_TOTAL+"].inputvalue");
        relSelects.add(pgV3Constants.SELECT_ATTRIBUTE_PROCESSINGNOTE);
        relSelects.add("attribute["+pgV3Constants.ATTRIBUTE_PGMINIMUMACTUALWEIGHTWET+"].inputvalue");
        relSelects.add("attribute["+pgV3Constants.ATTRIBUTE_PGMAXIMUMACTUALWEIGHTWET+"].inputvalue");
        //Modified by DSM-2015x.5 for PDF Views (Defect #15612) - Ends

        //Commented by DSM-2015x.5.1 for FOP PDF Views (Defect #19874) - Starts
        //Added by DSM-2015x.5.1 for FOP PDF Views (Req #11472) - Starts
        relSelects.add(pgV3Constants.SELECT_ATTRIBUTE_UNITSVALUE);
        relSelects.add(pgV3Constants.SELECT_ATTRIBUTE_PGMINIMUMACTUALWEIGHTWET);
        relSelects.add(pgV3Constants.SELECT_ATTRIBUTE_PGMAXIMUMACTUALWEIGHTWET);
        relSelects.add(pgV3Constants.SELECT_ATTRIBUTE_PGCHANGE);
        //Added by DSM-2015x.5.1 for FOP PDF Views (Req #11472) - Ends
        //Commented by DSM-2015x.5.1 for FOP PDF Views (Defect #19874) - Ends

        relSelects.add(pgV3Constants.SELECT_ATTRIBUTE_FINDNUMBER);
        String strFindNum =DomainConstants.EMPTY_STRING;
        String strSequenceNum =DomainConstants.EMPTY_STRING;
        String strSequenceNum2 =DomainConstants.EMPTY_STRING;
        String strComments =DomainConstants.EMPTY_STRING;
        String strReportedFunction = DomainConstants.EMPTY_STRING;
        String strReleasePhase = DomainConstants.EMPTY_STRING;
        relSelects.add(pgV3Constants.SELECT_ATTRIBUTE_VIRTUALINTERMEDIATEPHYSICALID);
        relSelects.add(DomainObject.SELECT_RELATIONSHIP_ID);
        Map mpArgs= null;
        Map programMap= null;
        MapList mlArgs= new MapList();
        DomainObject doObj = null;
        boolean isPushContext = false;
        //Added by DSM-2015x.4 for PDF Views (Defect id-13632) - Starts
        DecimalFormat decimalformatter = new DecimalFormat(pgPDFViewConstants.PATTERN_DECIMALFORMAT);
        //Added by DSM-2015x.4 for PDF Views (Defect id-14166)
        int integerPlaces = 0;
        int decimalPlaces = 0;
        StringList slSubPart = new StringList();
        Map<String, String> mapSubPart = new HashMap<>();
        //Added by DSM(Sogeti) - for 2022x.02 May CW PDF Views Req#46172 - Starts
        String strRelRestriction = DomainConstants.EMPTY_STRING;
        String strRelRestrictionComments = DomainConstants.EMPTY_STRING;
        //Added by DSM(Sogeti) - for 2022x.02 May CW PDF Views Req#46172 - Ends

        //Commented by DSM-2015x.4 for PDF Views (Defect id-14026) - Starts
        //decimalformatter.setRoundingMode(RoundingMode.UP);
        //Commented by DSM-2015x.4 for PDF Views (Defect id-14026) - Ends
        //Added by DSM-2015x.4 for PDF Views (Defect id-13632) - Ends
        try {
            DomainObject domObjectId = DomainObject.newInstance(context,strObjId);

            //Added by DSM-2018x.1.1 for PDF Views (Req Id #27399 ) : Start
          //Modified by DSM (Infosys) 2022x.4 for Defect 53327 - EBP users able to access F-Process in CM view PDF when 'Authorize to Use' is Yes - Starts
            if("contractpackaging".equalsIgnoreCase(strPDFViewKind) && !isAuthorizedToViewFormulationProcAndSubs(context,domObjectId)) {
           //Modified by DSM (Infosys) 2022x.4 for Defect 53327 - EBP users able to access F-Process in CM view PDF when 'Authorize to Use' is Yes - Ends
               return sbFormulaIngredients;
            }
            //Added by DSM-2018x.1.1 for PDF Views (Req Id #27399 ) : Ends

            //Added by DSM-2015x.4 for PDF Views (Defect id-14164) - Start
					/* Map mMasterData = domObjectId.getRelatedObject(context,
																	"Planned For",            // Rel Pattern
																	true,                     // direction of expansion
																	objectSelects,      // Bus select
																	null);	 */									  // Rel Select
            MapList mlMasterData = domObjectId.getRelatedObjects(context, pgV3Constants.RELATIONSHIP_PLANNEDFOR, pgV3Constants.TYPE_FORMULATIONPROCESS, objectSelects, null, false, true, (short) 1, null, null, 0);
            if(mlMasterData != null && mlMasterData.size()>0)
            {
                mlMasterData.addSortKey("revision", "descending", "String");
                mlMasterData.sort();
                Map mMasterData = (Map)mlMasterData.get(0);
                strIdd = (String)mMasterData.get(DomainConstants.SELECT_ID);
                //if(mMasterData !=null){
                //strIdd = FrameworkUtil.getLastRevision(context,(String)mMasterData.get(DomainConstants.SELECT_ID));
                //Added by DSM-2015x.4 for PDF Views (Defect id-14164) - End
                sbFormulaIngredients.append("<tr><td><table class=\"WordWrappdf\" cellspacing=\"0\" width=\"1000px\" id=\"ProducingFormulaTable\">");
                sbFormulaIngredients.append("<thead>");
                sbFormulaIngredients.append("<tr><td colspan='10' class=\"new\" ><font size='4'><b>Formulation Process</b></font></td></tr>");
                sbFormulaIngredients.append("<tr>");
                sbFormulaIngredients.append("<th width=\"75px\" align=\"center\"><b>Formula Number</b></th>");
                //Modified by DSM(Sogeti) - for 2018x.5 PDF Views Defect# 35574 - Starts
                if ("allinfo".equalsIgnoreCase(strPDFViewKind.trim()) || "contractpackaging".equalsIgnoreCase(strPDFViewKind.trim()))
                    sbFormulaIngredients.append("<th width=\"90px\" align=\"center\"><b>Revision</b></th>");
                //Modified by DSM(Sogeti) - for 2018x.5 PDF Views Defect# 35574 - Ends
                //Added by DSM 2018x.5 PDF Views Defect 32199 - Start
                //sbFormulaIngredients.append("<th width=\"100px\" align=\"center\"><b>Formula Name/Process<br/> Name</b></th>");
                sbFormulaIngredients.append("<th width=\"100px\" align=\"center\"><b>Title</b></th>");
                //sbFormulaIngredients.append("<th width=\"120px\" align=\"center\"><b>Formulation Type</b></th>");
                sbFormulaIngredients.append("<th width=\"120px\" align=\"center\"><b>Revision Status</b></th>");
                //Added by DSM 2018x.5 PDF Views Defect 32199 - Ends
                //Commented by DSM 2018x.5 PDF Views Requirement - Start
                //if (("GenDoc".equalsIgnoreCase(strPDFViewKind.trim())))
                //sbFormulaIngredients.append("<th width=\"150px\" align=\"center\"><b>Phase(Pha)</b></th>");
                //else
                //Commented by DSM 2018x.5 PDF Views Requirement - End
                sbFormulaIngredients.append("<th width=\"100px\" align=\"center\"><b>Phase(Pha)<br/>State(St)</b></th>");
                //Added by DSM 2018x.5 PDF Views Defect 32199 - Start
                sbFormulaIngredients.append("<th width=\"120px\" align=\"center\"><b>Formulation Type<br/>(FT)<br/> Formula Name<br/>(FN) </b></th>");
                //Added by DSM 2018x.5 PDF Views Defect 32199 - End
                sbFormulaIngredients.append("<th width=\"90px\" align=\"center\"><b>Name</b></th>");
                sbFormulaIngredients.append("<th width=\"120px\" align=\"center\"><b>Type</b></th>");
                sbFormulaIngredients.append("<th width=\"200px\" align=\"center\"><b>Title</b></th>");
                sbFormulaIngredients.append("</tr>");
                sbFormulaIngredients.append("</thead>");
                sbFormulaIngredients.append("<tr>");
                String FormulationTitle = (String) mMasterData.get(DomainConstants.SELECT_NAME);
//						String[] parts = FormulationTitle.split("-");
//						String FormulationName = domObjectId.getInfo(context, DomainConstants.SELECT_NAME);
                StringList slSelectStmt = new StringList(3);
                slSelectStmt.add(DomainConstants.SELECT_NAME);
                slSelectStmt.add(DomainConstants.SELECT_POLICY);
                slSelectStmt.add(DomainConstants.SELECT_TYPE);
                Map mpPartInfoMap = (Map) domObjectId.getInfo(context, slSelectStmt);
                //Modified by DSM(Sogeti) - for 2018x.5 PDF Views Defect# 35574 - Starts
                String formulationName = DomainConstants.EMPTY_STRING;
                //Modified by DSM(Sogeti) - for 2018x.5 PDF Views Defect# 35574 - Ends
                String strObjType = (String)mpPartInfoMap.get(DomainConstants.SELECT_TYPE);
                String strPolicy = (String)mpPartInfoMap.get(DomainConstants.SELECT_POLICY);
                //changed the logic to handle the parallel cloned name which comes with two hiphens .

                String FormulationRevision=(String)mMasterData.get(DomainConstants.SELECT_REVISION);
                String FormulationProcessName=(String)mMasterData.get(pgV3Constants.SELECT_ATTRIBUTE_TITLE);
                //Modified for 2018x Upgrade - Stage attribute is replaced by Release Phase attribute in 18x OOTB.
                String FormulationStage=(String)mMasterData.get(pgV3Constants.SELECT_ATTRIBUTE_RELEASE_PHASE);
                String FormulationState=(String)mMasterData.get(DomainConstants.SELECT_CURRENT);
                String FormulationType=(String)mMasterData.get(DomainConstants.SELECT_TYPE);
                Map mpArgss = new HashMap();
                Map mpFormulaType = new HashMap();
                Map programMapp = new HashMap();
                MapList mlArgss=new MapList();
                mpArgss.put("id", strObjId);
                mpFormulaType.put("table","CPNFormulationPartsandProcesses");
                mlArgss.add(mpArgss);
                programMapp.put("objectList", mlArgss);
                programMapp.put("paramList", mpFormulaType);
                String[] strArgsD= JPO.packArgs(programMapp);
                //Added by DSM(Sogeti) - for 2018x.5 PDF Views Defect# 35574 - Starts
                Vector vecFormulaNumber = (Vector)pgPDFViewHelper.executeMainClassMethod(context, "pgEnginuityUtil", "getFormulationPartAndProcess", strArgsD);
                if(vecFormulaNumber.size()>0){
                    formulationName =(String) vecFormulaNumber.get(0);
                }
                //Added by DSM(Sogeti) - for 2018x.5 PDF Views Defect# 35574 - Ends
//						pgEnginuityUtil_mxJPO iEnginuityUtil=new pgEnginuityUtil_mxJPO(context,strArgsD);
//						Vector VecTitleProcessName = iEnginuityUtil.getTitle(context,strArgsD);
                //Added for PDF Refactor
                Vector VecTitleProcessName = (Vector)pgPDFViewHelper.executeMainClassMethod(context, "pgEnginuityUtil", "getTitle", strArgsD);
                if(VecTitleProcessName.size()>0){
                    strProcessName =(String) VecTitleProcessName.get(0);
                    //Added by DSM(Sogeti) - for 2015x.5 PDF Views Defect# 18002 - Starts
                    strProcessName = strProcessName.replaceAll("[<]","#LESS_THAN");
                    strProcessName = strProcessName.replaceAll("[>]","#GREATER_THAN");
                    //Added by DSM(Sogeti) - for 2015x.5 PDF Views Defect# 18002 - Ends
                }
//						Vector VecFormulaType = iEnginuityUtil.getFormulaType(context,strArgsD);
                //Added for PDF Refactor
                Vector VecFormulaType = (Vector)pgPDFViewHelper.executeMainClassMethod(context, "pgEnginuityUtil", "getFormulaType", strArgsD);
                if(VecFormulaType.size()>0){
                    strFormulaTypee = (String)VecFormulaType.get(0);
                }
//						Vector VecgetFormulaName = iEnginuityUtil.getFormulaName(context,strArgsD);
                //Added for PDF Refactor
                Vector VecgetFormulaName = (Vector)pgPDFViewHelper.executeMainClassMethod(context, "pgEnginuityUtil", "getFormulaName", strArgsD);
                if(VecgetFormulaName.size()>0){
                    strgetFormulaNamee = (String)VecgetFormulaName.get(0);
                    //Added by DSM(Sogeti) - for 2015x.5 PDF Views Defect# 18002 - Starts
                    strgetFormulaNamee = strgetFormulaNamee.replaceAll("[<]","#LESS_THAN");
                    strgetFormulaNamee = strgetFormulaNamee.replaceAll("[>]","#GREATER_THAN");
                }
                //Added by DSM(Sogeti) - for 2015x.5 PDF Views Defect# 18002 - Ends

//						enoGLSFormulationProcessUI_mxJPO FormulationProcessUI=new enoGLSFormulationProcessUI_mxJPO(context,strArgsD);
//						StringList slFormulationTYPE = FormulationProcessUI.getFormulationType(context,strArgsD);
                //Added for PDF Refactor
                StringList slFormulationTYPE = (StringList)pgPDFViewHelper.executeMainClassMethod(context, "enoGLSFormulationProcessUI", "getFormulationType", strArgsD);
                String strReturn=DomainConstants.EMPTY_STRING;;
                String strTestMethod=DomainConstants.EMPTY_STRING;;
                if(slFormulationTYPE.size()==1){
                    strReturn+=(String)slFormulationTYPE.get(0);
                } else{
                    for (Iterator iterator2 = slFormulationTYPE.iterator(); iterator2.hasNext();){
                        strTestMethod = (String) iterator2.next();
                        strReturn+="<br/>"+strTestMethod;
                    }
                }
                sbFormulaIngredients.append("<td align=\"left\" width=\"75\">"+validateString1(formulationName)+"</td>");
                //Modified by DSM(Sogeti) - for 2018x.5 PDF Views Defect# 35574 - Starts
                if ("allinfo".equalsIgnoreCase(strPDFViewKind.trim()) || "contractpackaging".equalsIgnoreCase(strPDFViewKind.trim()))
                    sbFormulaIngredients.append("<td align=\"left\" width=\"75\">"+validateString1(FormulationRevision)+"</td>");
                //Modified by DSM(Sogeti) - for 2018x.5 PDF Views Defect# 35574 - Ends
                sbFormulaIngredients.append("<td align=\"left\" width=\"75\">"+validateString1(strProcessName)+"</td>");

                //Added by DSM 2018x.5 PDF Views Defect 32199 - Start
                sbFormulaIngredients.append("<td align=\"left\" width=\"75\"></td>");
                //sbFormulaIngredients.append("<td align=\"left\" width=\"75\">"+validateString1(strReturn)+"</td>");
                //Added by DSM 2018x.5 PDF Views Defect 32199 - Ends
                //Commented by DSM 2018x.5 PDF Views Requirement - Start
                //if (("GenDoc".equalsIgnoreCase(strPDFViewKind.trim())))
                //sbFormulaIngredients.append("<td align=\"center\" width=\"75\"><B>Pha: </B>"+validateString1(FormulationStage)+"</td>");
                //else
                //Commented by DSM 2018x.5 PDF Views Requirement - End
                sbFormulaIngredients.append("<td align=\"left\" width=\"75\"><B>Pha: </B>"+validateString1(FormulationStage)+"<BR/><B>St: </B>"+validateString1(FormulationState)+"</td>");
                sbFormulaIngredients.append("<td align=\"left\" width=\"75\"><B>FT: </B>"+validateString1(strFormulaTypee)+"<BR/><B>FN: </B>"+validateString1(strgetFormulaNamee)+"</td>");
                sbFormulaIngredients.append("<td align=\"left\" width=\"75\">"+validateString1(FormulationTitle)+"</td>");
                sbFormulaIngredients.append("<td align=\"left\" width=\"75\">"+validateString1(FormulationType)+"</td>");
                sbFormulaIngredients.append("<td align=\"left\" width=\"75\">"+validateString1(strProcessName)+"</td>");
                sbFormulaIngredients.append("</tr>");
                sbFormulaIngredients.append("</table></td></tr>");
            }
            DomainObject domObjectIdd = DomainObject.newInstance(context,strIdd);
            mlFormulaIngredients = domObjectIdd.getRelatedObjects(context, //Context
                    strRel, //relPattern
                    "*", //typePattern
                    objectSelects, //objectSelects
                    relSelects,// relationshipSelects
                    false, //getTo - Get Parent Data
                    true, //getFrom - Get Child Data
                    (short)0, //recurseToLevel
                    "", //objectWhere
                    ""); //relationshipWhere
            int nMapMPP = mlFormulaIngredients.size();
            Map mpFormulaIngredientss = new HashMap();
            MapList mlFormulaIngredientSort = new MapList();
            //Modified by DSM-2015x.4 for PDF Views (Defect id-11947) - Starts
            String strSortSequence=DomainConstants.EMPTY_STRING;
            String strSortSequence1=DomainConstants.EMPTY_STRING;
            for (int i = 0; i <nMapMPP; i++){
                findNumberIsNotEmpty=true;
                mpFormulaIngredientss = (Map) mlFormulaIngredients.get(i);
                strFindNum = (String) mpFormulaIngredientss.get(pgV3Constants.SELECT_ATTRIBUTE_FINDNUMBER);
                //Added by DSM-2015x.4 for PDF Views (Defect id-14159) - Starts
                //Modified by DSM-2015x.5.1 Jan Bug fix for PDF Views(Defect Id-23980) - Starts
                if(UIUtil.isNullOrEmpty(strFindNum) || strFindNum.equalsIgnoreCase("NaN"))
                {
                    strFindNum = "0";
                    findNumberIsNotEmpty=false;
                }
                //Modified by DSM-2015x.5.1 Jan Bug fix for PDF Views(Defect Id-23980) - Ends
                //Added by DSM-2015x.4 for PDF Views (Defect id-14159) - Starts
                strType = (String) mpFormulaIngredientss.get(DomainConstants.SELECT_TYPE);
                if(strType.equals(pgV3Constants.TYPE_FORMULATIONPHASE)){
                    strSequenceNum  = strFindNum;
                    strSortSequence = strFindNum.concat("00");
                    strSequenceNum2 = strSequenceNum;
                    strSortSequence1 = strSortSequence;
                }
                else {
                    strSequenceNum =strSequenceNum2.concat(".").concat(strFindNum);
                    strSortSequence=Integer.toString(Integer.valueOf(strSortSequence1) + Integer.valueOf(strFindNum));
                }
                if (!findNumberIsNotEmpty)
                    strSequenceNum=" ";
                mpFormulaIngredientss.put("Sequence Number", strSequenceNum);
                mpFormulaIngredientss.put("Temp", strSortSequence);
                mlFormulaIngredientSort.add(mpFormulaIngredientss);
            }
            mlFormulaIngredientSort.addSortKey("Temp", "ascending", "Real");
            //Modified by DSM-2015x.4 for PDF Views (Defect id-11947) - Ends
            mlFormulaIngredientSort.sort();
            if((mlFormulaIngredientSort != null) && (mlFormulaIngredientSort.size()>0)){
                sbFormulaIngredients.append("<br />");
                sbFormulaIngredients.append("<tr><td><table class=\"WordWrappdf\" cellspacing=\"0\" width=\"1000px\" id=\"ProducingFormulaTable\">");
                sbFormulaIngredients.append("<thead>");

                //Modified by DSM-2015x.5.1 for FOP PDF Views (Defect #19874) - Starts
                //Added by DSM 2018x.5 PDF Views Defect 32199 - Start
                sbFormulaIngredients.append("<tr><td colspan='11' class=\"new\" ><font size='4'><b>Formulation Process- Formula</b></font></td></tr>");
                //Added by DSM 2018x.5 PDF Views Defect 32199 - End
                //Modified by DSM-2015x.5.1 for FOP PDF Views (Defect #19874) - Ends*

                sbFormulaIngredients.append("<tr>");
                //Modified by DSM-2015x.4 for PDF Views FOP Type(Req-11472) Starts

                //Modified by DSM-2015x.5.1 for FOP PDF Views (Defect #19874) - Starts
                sbFormulaIngredients.append("<th width=\"150px\" align=\"center\"><b>Name (N)</b><br/><b>Type(T)</b></th>");
                //Added by DSM 2018x.5 PDF Views Defect 32199 - Start
                sbFormulaIngredients.append("<th width=\"30px\" align=\"center\"><b>Chg</b></th>");
                //Added by DSM 2018x.5 PDF Views Defect 32199 - Ends
                sbFormulaIngredients.append("<th width=\"35px\" align=\"center\"><b>SEQ</b></th>");
                sbFormulaIngredients.append("<th width=\"200px\" align=\"center\"><b>Title/Instruction</b></th>");
                sbFormulaIngredients.append("<th width=\"155px\" align=\"center\"><b>Min % (w/w) <br/>(Min) <br/>Wet % (w/w)  <br/>(Wet)<br/>Max % (w/w) <br/>(Max) </b></th>");
                //Added by DSM 2018x.5 PDF Views Defect 32199 - Start
                sbFormulaIngredients.append("<th width=\"135px\" align=\"center\"><b>Target Wet Weight (TWW) <br/>Wet Weight Min (WEM) Wet<br/>Weight Max (WWM)</b></th>");
                //Added by DSM 2018x.5 PDF Views Defect 32199 - Ends
                sbFormulaIngredients.append("<th width=\"95px\" align=\"center\"><b>Dry % (w/w)  <br/>(Dry)<br/>Target Dry  <br/>Weight <br/>(TDW)<br/>Processing <br/>Loss %(PL)</b></th>");
                //Added by DSM(Sogeti)-2018x.1.1 for PDF Views Requirements - Starts
                //Modified by DSM-2018x.1.1 for FOP PDF Views (Defect #27019) - Starts
						/*if (("GenDoc".equalsIgnoreCase(strPDFViewKind.trim())))
						{*/
                //Added by DSM(Sogeti)-2018x.1.1 for PDF Views Requirements - Ends
                //Added by DSM 2018x.5 PDF Views Defect 32199 - Start
                sbFormulaIngredients.append("<th width=\"75px\" align=\"center\"><b>Function (F)<br/>Reported Function (RF)<br/>Phase (Ph)</b></th>");
                //Added by DSM 2018x.5 PDF Views Defect 32199 - ends
                //Added by DSM(Sogeti)-2018x.1.1 for PDF Views Requirements - Starts
						/*}else{
							sbFormulaIngredients.append("<th width=\"75px\" align=\"center\"><b>Intended<br/>Function in<br/>Product</b></th>");
						}*/
                //Added by DSM(Sogeti)-2018x.1.1 for PDF Views Requirements - Ends
                //Modified by DSM-2018x.1.1 for FOP PDF Views (Defect #27019) - Ends
                //Added/Modified by DSM Sogeti for 2022x.02 May CW for PDF Views (Req -46172) - Starts
                if(pgV3Constants.PDFVIEW_ALLINFO.equalsIgnoreCase(strPDFViewKind.trim())){
                	sbFormulaIngredients.append("<th width=\"85px\" align=\"center\"><b>Virtual<br/> Intermediate <br/>Name (VIN)<br/>Processing<br/>Note<br/>(PN)</b></th>");
                	sbFormulaIngredients.append("<TH width=\"85px\" align=\"center\"><B>Relationship Restriction(RR)</B><BR></BR><B>Relationship Restriction</B><BR></BR><B>Comment(RRC)</B></TH>");
                }else {
                	sbFormulaIngredients.append("<th width=\"85px\" align=\"center\"><b>Virtual<br/> Intermediate <br/>Name</b></th>");
                	sbFormulaIngredients.append("<th width=\"200px\" align=\"center\"><b>Processing Note</b></th>");

                }
                //Added/Modified by DSM Sogeti for 2022x.02 May CW for PDF Views (Req -46172) - Ends
                //Added by DSM 2018x.5 PDF Views Defect 32199 - Start
                //Commented by DSM 2018x.5 PDF Views Requirement - Start
                //if (!("GenDoc".equalsIgnoreCase(strPDFViewKind.trim())))
                //Modified by DSM(Sogeti) PDF Views Defect 36799 - Start
                sbFormulaIngredients.append("<th width=\"95px\" align=\"center\"><b>Units Value (UV) <br/> Certification (C)<br/> Substitute Parts<br/>(SP) <br/>State (S)<br/> Rev (R)</b></th>");
                //Modified by DSM(Sogeti) PDF Views Defect 36799 - Ends
                //else
                //sbFormulaIngredients.append("<th width=\"95px\" align=\"center\"><b>Units Value (UV) <br/> Certification (C)<br/> Substitute Parts<br/>(SP)</b></th>");
                //Commented by DSM 2018x.5 PDF Views Requirement - End
                //Modified by DSM-2015x.5.1 for FOP PDF Views (Defect #19874) - Ends
                //Added by DSM 2018x.5 PDF Views Defect 32199 -Ends

                sbFormulaIngredients.append("</tr>");
                sbFormulaIngredients.append("</thead>");
                int nMapMP = mlFormulaIngredientSort.size();
                //Added by DSM-2018x.1.1 for PDF Views (Req Id #27399 ) : Start
                ContextUtil.pushContext(context, "User Agent", "", "");
                isPushContext = true;
                //Added by DSM-2018x.1.1 for PDF Views (Req Id #27399 ) : Ends
                for (int i = 0; i <nMapMP; i++){
                    mpFormulaIngredients = (Map) mlFormulaIngredientSort.get(i);
                    strId = (String)mpFormulaIngredients.get(DomainConstants.SELECT_ID);
                    strRelId = (String)mpFormulaIngredients.get(DomainObject.SELECT_RELATIONSHIP_ID);
                    strSequenceNumber = (String)mpFormulaIngredients.get("Sequence Number");
                    doObj = DomainObject.newInstance(context,strId);
                    mpArgs = new HashMap();
                    programMap = new HashMap();
                    mlArgs= new MapList();
                    mpArgs.put(DomainConstants.SELECT_ID, strId);
                    mpArgs.put(DomainObject.SELECT_RELATIONSHIP_ID, strRelId);
                    mpArgs.put(FormulationAttribute.VIRTUAL_INTERMEDIATE_PHYSICAL_ID.getAttributeSelect(context), strId);
                    mlArgs.add(mpArgs);
                    programMap.put("objectList", mlArgs);
                    String[] strArgsDSO= JPO.packArgs(programMap);
                    //Commented by DSM-2018x.1.1 for PDF Views (Req Id #27399 ) : Starts
                    //isPushContext = true;
                    //ContextUtil.pushContext(context, "User Agent", "", "");
                    //Commented by DSM-2018x.1.1 for PDF Views (Req Id #27399 ) : Ends
                    mpObjDetails = (Map) doObj.getInfo(context, objectSelects);
                    strTitle = (String) mpObjDetails.get(pgV3Constants.SELECT_ATTRIBUTE_TITLE);
                    //Added by DSM(Sogeti) - for 2015x.5 PDF Views Defect# 18002 - Starts
                    strTitle = strTitle.replaceAll("[<]","#LESS_THAN");
                    strTitle = strTitle.replaceAll("[>]","#GREATER_THAN");
                    //Added by DSM(Sogeti) - for 2015x.5 PDF Views Defect# 18002 - Ends
                    strName = (String) mpObjDetails.get(DomainConstants.SELECT_NAME);
                    strState = (String) mpObjDetails.get(DomainConstants.SELECT_CURRENT);
                    strRev = (String) mpObjDetails.get(DomainConstants.SELECT_REVISION);
                    strType = (String) mpObjDetails.get(DomainConstants.SELECT_TYPE);
                    strValue = UINavigatorUtil.getAdminI18NString("Type", strType, context.getSession().getLanguage());
                    //Modified for 2018x Upgrade - Stage attribute is replaced by Release Phase attribute in 18x OOTB.
                    strStage = (String) mpObjDetails.get(pgV3Constants.SELECT_ATTRIBUTE_RELEASE_PHASE);
                    strMin = (String) mpFormulaIngredients.get(pgV3Constants.SELECT_ATTRIBUTE_MIN_PERCENT_ACTUALWEIGHTWET);
                    strMax = (String) mpFormulaIngredients.get(pgV3Constants.SELECT_ATTRIBUTE_MAX_PERCENT_ACTUALWEIGHTWET);
                    strLoss = (String) mpFormulaIngredients.get(pgV3Constants.SELECT_ATTRIBUTE_LOSS);
                    strQuantity = (String) mpFormulaIngredients.get(pgV3Constants.SELECT_ATTRIBUTE_QUANTITY);
                    strWeightWet = (String) mpFormulaIngredients.get(pgV3Constants.SELECT_ATTRIBUTE_TARGETWETWEIGHT);
                    strWeightDry = (String) mpFormulaIngredients.get(pgV3Constants.SELECT_ATTRIBUTE_TARGETWEIGHTDRY);
                    strDryPer = (String) mpFormulaIngredients.get(pgV3Constants.SELECT_ATTRIBUTE_TOTAL);
                    strComments = (String) mpFormulaIngredients.get(pgV3Constants.SELECT_ATTRIBUTE_PROCESSINGNOTE);
                    strReportedFunction = (String) mpObjDetails.get("from["+pgV3Constants.RELATIONSHIP_PGPDTEMPLATESTOPGPLIREPORTEDFUNCTION+"].to.name");
                    strReleasePhase = (String) mpObjDetails.get(pgV3Constants.SELECT_ATTRIBUTE_RELEASE_PHASE);
                    //Added by DSM(Sogeti) - for 2022x.02 May CW PDF Views Req#46172 - Starts
                    strRelRestriction = (String) mpObjDetails.get(pgPDFViewConstants.SELECT_ATTRIBUTE_PGRELATIONSHIPRESTRICTION);
					strRelRestrictionComments = (String) mpObjDetails.get(pgPDFViewConstants.SELECT_ATTRIBUTE_PGRELATIONSHIPRESTRICTIONCOMMENTS);
					//Added by DSM(Sogeti) - for 2022x.02 May CW PDF Views Req#46172 - Ends
                    //Commented by DSM-2015x.5.1 for FOP PDF Views (Defect #19874) - Starts
                    //Added by DSM-2015x.5.1 for FOP PDF Views (Req #11472) - Starts
                    strUnitsValue = (String) mpFormulaIngredients.get(pgV3Constants.SELECT_ATTRIBUTE_UNITSVALUE);
                    strMinWetWeight = (String) mpFormulaIngredients.get(pgV3Constants.SELECT_ATTRIBUTE_PGMINIMUMACTUALWEIGHTWET);
                    strMaxWetWeight = (String) mpFormulaIngredients.get(pgV3Constants.SELECT_ATTRIBUTE_PGMAXIMUMACTUALWEIGHTWET);
                    strChange = (String) mpFormulaIngredients.get(pgV3Constants.SELECT_ATTRIBUTE_PGCHANGE);
                    //Added by DSM-2015x.5.1 for FOP PDF Views (Req #11472) - Ends
                    //Commented by DSM-2015x.5.1 for FOP PDF Views (Defect #19874) - Ends

                    //Added by DSM(Sogeti)-2015x.5 for PDF Views (Defect ID-16705) - Starts
                    if(UIUtil.isNullOrEmpty(strComments)){
                        strComments = DomainConstants.EMPTY_STRING;
                    }
                    //Added by DSM(Sogeti)-2015x.5 for PDF Views (Defect ID-16705) - Ends
                    //Added by DSM(Sogeti) - for 2015x.5 PDF Views Defect# 15160 - Starts
                    strComments = strComments.replaceAll("[<]","#LESS_THAN");
                    //Added by DSM(Sogeti) - for 2015x.5 PDF Views Defect# 15160 - Ends
                    //Modified by DSM-2015x.4 for PDF Views (Req Id #15016) - Starts
                    strMaterialFunction = (String) getMaterialFunction(context,strRelId);
                    //Modified by DSM-2015x.4 for PDF Views (Req Id #15016) - Ends
                    strVirtualName = (String) mpFormulaIngredients.get(pgV3Constants.SELECT_ATTRIBUTE_VIRTUALINTERMEDIATEPHYSICALID);
                    //Added by DSM-2015x.4 for PDF Views (Defect id-13632, 14075) - Starts
                    //Modified by DSM-2015x.4 for PDF Views (Defect id-14166) - Starts
                    //Modified by DSM-2015x.5 for PDF Views (Defect id-15612) - Starts
                    if(mpFormulaIngredients.containsKey("attribute["+pgV3Constants.ATTRIBUTE_MIN_PERCENT_ACTUALWEIGHTWET+"].inputvalue")){
                        strMin = (String) mpFormulaIngredients.get("attribute["+pgV3Constants.ATTRIBUTE_MIN_PERCENT_ACTUALWEIGHTWET+"].inputvalue");
                        if(UIUtil.isNotNullAndNotEmpty(strMin))
                        {
                            integerPlaces = strMin.indexOf('.');
                            decimalPlaces = strMin.length() - integerPlaces - 1;
                            if(decimalPlaces>pgPDFViewConstants.DECIMAL_SIX){
                                strMin = String.valueOf(decimalformatter.format(Double.parseDouble(strMin)));
                            }
                        }
                        else
                            strMin = EMPTY_STRING;
                    }

                    if(mpFormulaIngredients.containsKey("attribute["+pgV3Constants.ATTRIBUTE_MAX_PERCENT_ACTUALWEIGHTWET+"].inputvalue")){
                        strMax = (String) mpFormulaIngredients.get("attribute["+pgV3Constants.ATTRIBUTE_MAX_PERCENT_ACTUALWEIGHTWET+"].inputvalue");
                        if(UIUtil.isNotNullAndNotEmpty(strMax))
                        {
                            integerPlaces = strMax.indexOf('.');
                            decimalPlaces = strMax.length() - integerPlaces - 1;
                            if(decimalPlaces>pgPDFViewConstants.DECIMAL_SIX){
                                strMax = String.valueOf(decimalformatter.format(Double.parseDouble(strMax)));
                            }
                        }
                        else
                            strMax = EMPTY_STRING;
                    }
                    if(mpFormulaIngredients.containsKey("attribute["+pgV3Constants.ATTRIBUTE_LOSS+"].inputvalue")){
                        strLoss = (String) mpFormulaIngredients.get("attribute["+pgV3Constants.ATTRIBUTE_LOSS+"].inputvalue");
                        if(UIUtil.isNotNullAndNotEmpty(strLoss))
                        {
                            integerPlaces = strLoss.indexOf('.');
                            decimalPlaces = strLoss.length() - integerPlaces - 1;
                            if(decimalPlaces>pgPDFViewConstants.DECIMAL_SIX){
                                strLoss = String.valueOf(decimalformatter.format(Double.parseDouble(strLoss)));
                            }
                        }
                        else
                            strLoss = EMPTY_STRING;
                    }
                    if(mpFormulaIngredients.containsKey("attribute["+pgV3Constants.ATTRIBUTE_TARGETWETWEIGHT+"].inputvalue")){
                        strWeightWet = (String) mpFormulaIngredients.get("attribute["+pgV3Constants.ATTRIBUTE_TARGETWETWEIGHT+"].inputvalue");
                        if(UIUtil.isNotNullAndNotEmpty(strWeightWet))
                        {
                            integerPlaces = strWeightWet.indexOf('.');
                            decimalPlaces = strWeightWet.length() - integerPlaces - 1;
                            if(decimalPlaces>pgPDFViewConstants.DECIMAL_SIX){
                                strWeightWet = String.valueOf(decimalformatter.format(Double.parseDouble(strWeightWet)));
                            }
                        }
                        else
                            strWeightWet = EMPTY_STRING;
                    }
                    if(mpFormulaIngredients.containsKey("attribute["+pgV3Constants.ATTRIBUTE_QUANTITY+"].inputvalue")){
                        strQuantity = (String) mpFormulaIngredients.get("attribute["+pgV3Constants.ATTRIBUTE_QUANTITY+"].inputvalue");
                        if(UIUtil.isNotNullAndNotEmpty(strQuantity))
                        {
                            integerPlaces = strQuantity.indexOf('.');
                            decimalPlaces = strQuantity.length() - integerPlaces - 1;
                            if(decimalPlaces>pgPDFViewConstants.DECIMAL_SIX){
                                strQuantity = String.valueOf(decimalformatter.format(Double.parseDouble(strQuantity)));
                            }
                        }
                        else
                            strQuantity = EMPTY_STRING;
                    }
                    if(mpFormulaIngredients.containsKey("attribute["+pgV3Constants.ATTRIBUTE_TOTAL+"].inputvalue")){
                        strDryPer = (String) mpFormulaIngredients.get("attribute["+pgV3Constants.ATTRIBUTE_TOTAL+"].inputvalue");
                        if(UIUtil.isNotNullAndNotEmpty(strDryPer))
                        {
                            integerPlaces = strDryPer.indexOf('.');
                            decimalPlaces = strDryPer.length() - integerPlaces - 1;
                            if(decimalPlaces>pgPDFViewConstants.DECIMAL_SIX){
                                strDryPer = String.valueOf(decimalformatter.format(Double.parseDouble(strDryPer)));
                            }
                        }
                        else
                            strDryPer = EMPTY_STRING;
                    }
                    if(mpFormulaIngredients.containsKey("attribute["+pgV3Constants.ATTRIBUTE_TARGETWEIGHTDRY+"].inputvalue")){
                        strWeightDry = (String) mpFormulaIngredients.get("attribute["+pgV3Constants.ATTRIBUTE_TARGETWEIGHTDRY+"].inputvalue");
                        if(UIUtil.isNotNullAndNotEmpty(strWeightDry))
                        {
                            integerPlaces = strWeightDry.indexOf('.');
                            decimalPlaces = strWeightDry.length() - integerPlaces - 1;
                            if(decimalPlaces>pgPDFViewConstants.DECIMAL_SIX){
                                strWeightDry = String.valueOf(decimalformatter.format(Double.parseDouble(strWeightDry)));
                            }
                        }
                        else
                            strWeightDry = EMPTY_STRING;
                    }
                    if(mpFormulaIngredients.containsKey("attribute["+pgV3Constants.ATTRIBUTE_PGMINIMUMACTUALWEIGHTWET+"].inputvalue")){
                        strMinWetWeight = (String) mpFormulaIngredients.get("attribute["+pgV3Constants.ATTRIBUTE_PGMINIMUMACTUALWEIGHTWET+"].inputvalue");
                        if(UIUtil.isNotNullAndNotEmpty(strMinWetWeight))
                        {
                            integerPlaces = strMinWetWeight.indexOf('.');
                            decimalPlaces = strMinWetWeight.length() - integerPlaces - 1;
                            if(decimalPlaces>pgPDFViewConstants.DECIMAL_SIX){
                                strMinWetWeight = String.valueOf(decimalformatter.format(Double.parseDouble(strMinWetWeight)));
                            }
                        }
                        else
                            strMinWetWeight = EMPTY_STRING;
                    }
                    if(mpFormulaIngredients.containsKey("attribute["+pgV3Constants.ATTRIBUTE_PGMAXIMUMACTUALWEIGHTWET+"].inputvalue")){
                        strMaxWetWeight = (String) mpFormulaIngredients.get("attribute["+pgV3Constants.ATTRIBUTE_PGMAXIMUMACTUALWEIGHTWET+"].inputvalue");
                        if(UIUtil.isNotNullAndNotEmpty(strMaxWetWeight))
                        {
                            integerPlaces = strMaxWetWeight.indexOf('.');
                            decimalPlaces = strMaxWetWeight.length() - integerPlaces - 1;
                            if(decimalPlaces>pgPDFViewConstants.DECIMAL_SIX){
                                strMaxWetWeight = String.valueOf(decimalformatter.format(Double.parseDouble(strMaxWetWeight)));
                            }
                        }
                        else
                            strMaxWetWeight = EMPTY_STRING;
                    }

                    //Modified by DSM-2015x.5 for PDF Views (Defect id-15612) - Ends
                    //Added by DSM-2015x.4 for PDF Views (Defect id-14166) - Ends
                    //Added by DSM-2015x.4 for PDF Views (Defect id-13632, 14075) - Ends

                    if(UIUtil.isNotNullAndNotEmpty(strVirtualName)){
                        VirtualIntermediate VI = new VirtualIntermediate(context,strVirtualName);
                        strviName = VI.getName();
                    }
                    mapSubPart.put("ParentId",strIdd);
                    mapSubPart.put("id[connection]",strRelId);
                    mapSubPart.put(DomainConstants.SELECT_ID,strId);
                    mapSubPart.put(DomainConstants.SELECT_TYPE,strType);
                    slSubPart = getSubstitutePartName(context, mapSubPart, pgV3Constants.RELATIONSHIP_PLBOM);
                    if(slSubPart != null && slSubPart.size()>0)
                        strSub = FrameworkUtil.join(slSubPart,",");
                    //Commented by DSM-2015x.5 for PDF Views (Defect id-15612) - Starts
                    //Added by DSM-2015x.4 for PDF Views (Defect id-14166) - Starts
							/* if(strMin.equals("0.0")){
							strMin = EMPTY_STRING;
							}

							if(strWeightWet.equals("0.0")){
							strWeightWet= EMPTY_STRING;
							}
							if(strQuantity.equals("0.0")){
							strQuantity= EMPTY_STRING;
							}
							if(strMax.equals("0.0")){
							strMax= EMPTY_STRING;
							}
							if(strLoss.equals("0.0")){
							strLoss= EMPTY_STRING;
							}
							if(strWeightDry.equals("0.0")){
							strWeightDry= EMPTY_STRING;
							}
							if(strDryPer.equals("0.0")){
							strDryPer= EMPTY_STRING;
							} */
                    //Added by DSM-2015x.4 for PDF Views (Defect id-14166) - Ends
                    //Commented by DSM-2015x.5 for PDF Views (Defect id-15612) - Ends
                    sbFormulaIngredients.append("<tr>");
                    //Modified by DSM for PDF View for Defect 32199 -- Starts
                    //Modified by DSM-2015x.5.1 for FOP PDF Views (Defect #19874) - Starts
                    sbFormulaIngredients.append("<td align=\"left\" width=\"150\"><B>N:</B>"+validateString1(strName)+"<BR/><B>T:</B>"+validateString1(strValue)+"</td>");
                    sbFormulaIngredients.append("<td align=\"left\" width=\"30\">"+validateString1(strChange)+"</td>");
                    sbFormulaIngredients.append("<td align=\"left\" width=\"35\">"+validateString1(strSequenceNumber)+"</td>");
                    sbFormulaIngredients.append("<td align=\"left\" width=\"200\">"+validateString1(strTitle)+"</td>");
                    sbFormulaIngredients.append("<td align=\"left\" width=\"155\"><B>Min: </B>"+validateString1(strMin)+"<BR/><B>Wet: </B>"+validateString1(strQuantity)+"<BR/><B>Max: </B>"+validateString1(strMax)+"</td>");
                    sbFormulaIngredients.append("<td align=\"left\" width=\"135\"><B>TWW: </B>"+validateString1(strWeightWet)+"<BR/><B>WEM: </B>"+validateString1(strMinWetWeight)+"<br/> <B>WWM: </B>"+validateString1(strMaxWetWeight)+"</td>");
                    sbFormulaIngredients.append("<td align=\"left\" width=\"95\"><B>Dry: </B>"+validateString1(strDryPer)+"<BR/><B>TDW: </B>"+validateString1(strWeightDry)+"<BR/><B>PL:</B>"+validateString1(strLoss)+"</td>");
                    sbFormulaIngredients.append("<td align=\"left\" width=\"75\"><B>F:</B>"+validateString1(strMaterialFunction)+"<br/><B>RF:</B>"+validateString1(strReportedFunction)+"<br/><B>Ph:</B>"+validateString1(strReleasePhase)+"</td>");
                    
                    //Added/Modified by DSM Sogeti for 2022x.02 May CW for PDF Views (Req -46172) - Starts
                    if(pgV3Constants.PDFVIEW_ALLINFO.equalsIgnoreCase(strPDFViewKind.trim())){
                    	sbFormulaIngredients.append("<td align=\"left\" width=\"75\"><B>VIN:</B>"+validateString1(strviName)+"<br/><B>PN:</B>"+validateString1(strComments)+"</td>");                  
                    	sbFormulaIngredients.append("<TD width=\"95\" align=\"left\" valign=\"top\"><B>RR:</B>"+strRelRestriction+"<BR></BR><B>RRC:</B>"+strRelRestrictionComments+"</TD>");
                    }else {
                    	sbFormulaIngredients.append("<td align=\"left\" width=\"75\">"+validateString1(strviName)+"</td>");
                    	sbFormulaIngredients.append("<td align=\"left\" width=\"75\">"+validateString1(strComments)+"</td>");                        
                    }
                    //Added/Modified by DSM Sogeti for 2022x.02 May CW for PDF Views (Req -46172) - Ends
                    //Modified by DSM-2015x.5.1 for FOP PDF Views (Defect #19874) - Ends
                    //Commented by DSM 2018x.5 PDF Views Requirement - Start
                    //if (!("GenDoc".equalsIgnoreCase(strPDFViewKind.trim())))
                    sbFormulaIngredients.append("<td align=\"left\" width=\"75\"><B>UV:</B>"+strUnitsValue+"<br/><B>C:</B>"+getPLIMaterialCertifications(context, strId)+"<br/><B>SP:</B>"+strSub+"<br/><B>S:</B>"+strState+"<br/><B>R:</B>"+strRev+"</td>");
                    //else
                    //sbFormulaIngredients.append("<td align=\"left\" width=\"75\"><B>UV:</B>"+strUnitsValue+"<br/><B>C:</B>"+getPLIMaterialCertifications(context, strId)+"<br/><B>SP:</B>"+strSub+"</td>");
                    //Commented by DSM 2018x.5 PDF Views Requirement - Start
                    //Added by DSM 2018x.5 PDF Views Defect 32199 - End
                    sbFormulaIngredients.append("</tr>");
                    //modified  by DSM 2015x.4 PDF Views Defect 11904 - Starts
                    strviName = DomainConstants.EMPTY_STRING;
                    //modified  by DSM 2015x.4 PDF Views Defect 11904 - Ends
                }
                //Modified by DSM Sogeti-2015x.4 for PDF Views(Defect Id - 14235) - Starts
                sbFormulaIngredients.append("</table><tr><td><br /></td></tr></td></tr>");
                //Modified by DSM Sogeti-2015x.4 for PDF Views(Defect Id - 14235) - Ends
            }
        } catch(Exception exception){
            throw exception;
        }
        finally{
            if(isPushContext){
                ContextUtil.popContext(context);
                isPushContext = false;
            }
        }
        //Modify Code Refactoring
        mlFormulaIngredients.clear();
        long endTime = new Date().getTime();
        System.out.println("Total Time has taken by the  getFormulaIngredients Method is-->"+(endTime-startTime));
        return sbFormulaIngredients;
    }
    //Added by DSM-2015x.2 for PDF Views FOP Type(Req Id-11472) - Ends
    //Added by DSM-2015x.2 for PDF Views FOP Type(Defect-9761) - Starts
    //Modified by DSM-2015x.4 for PDF Views FOP Type(Req-11472) - Starts
    //Modified by DSM(Sogeti) - 2018x.5 PDF Views Requirement
    public StringBuilder getFormulaSubstitutes(Context context, String strObjId, String pdfViewType) throws Exception {
        long startTime = new Date().getTime();
        StringBuilder sbFormulaSubstitute = new StringBuilder();
        MapList mlFinalSub = new MapList();
        Map mpFormulaSubstitutes = new HashMap();
        Map mpFormulaSubstitutes1 = new HashMap();
        Map mFOProcessId = new HashMap();
        String strIdd = null;
        String strVUD = null;
        //Modified by DSM Sogeti-2015x.4 for PDF Views(Defect Id - 14235) - Starts
        String strValidUntilDate = "";
        //Modified by DSM Sogeti-2015x.4 for PDF Views(Defect Id - 14235) - Ends
        final String REL_MAN_EQUE=PropertyUtil.getSchemaProperty("relationship_ManufacturerEquivalent");
        final String POL_MAN_EQUE=PropertyUtil.getSchemaProperty("policy_ManufacturerEquivalent");
        final String ATTR_PREF_NAME=PropertyUtil.getSchemaProperty("attribute_PreferredName");
        StringBuffer sbMatFunc  = null;
        String sMaterVal		= DomainConstants.EMPTY_STRING;
        StringList objDetails = null;
        String sInstructions	 = DomainConstants.EMPTY_STRING;
        String sDescription	 = DomainConstants.EMPTY_STRING;
        String OID = null;
        DomainObject dobj = null;
        Map objDetailsMap = null;
        String sName = null;
        String sId = null;
        String sType = null;
        String sRev	 = null;
        MapList SubInPLBOM = null;
        StringList slSubFor   = null;
        StringBuffer sbSFRev = null;
        String subRelId = null;
        String subRelandAtr = null;
        DomainObject dObjSubFor = null;
        StringList slSFDetails = null;
        Map mpSFDetails = null;
        StringList slDifConSelects = null;
        Map mpDifContDetails = null;
        sbSFRev = new StringBuffer();
        subRelId = null;
        subRelandAtr = null;
        String subForName = null;
        String subForType = null;
        String subForRev = null;
        String subForId = null;
        String subForTitle = null;
        String subForWetPercent = null;
        String sSFSeq = null;
        //Modified by DSM(Sogeti) for Defect #37590 for 2018x.5_December PDF Views - Starts : Starts
        //String sSFObjPrefName = null;
        //Modified by DSM(Sogeti) for Defect #37590 for 2018x.5_December PDF Views - Starts : Ends
        String sSFphase = null;
        String subName = null;
        String subId = null;
        String SubTitle = null;
        //Modified by DSM-2015x.4 for PDF Views FOP Type(Req-11472) - Starts
        String 	subPN = null;
        //Modified by DSM-2015x.4 for PDF Views FOP Type(Req-11472) - Ends
        DomainObject dobjsubForId = null;
        StringBuffer sbName = null;
        StringBuffer strExportBuffer = null;
        StringBuffer sbMinPercent = null;
        StringBuffer sbMaxPercent = null;
        StringBuffer sbWetPercent = null;
        StringBuffer SbTitle = null;
        StringBuffer sbQtyDiff = null;
        StringBuffer sbPhase = null;
        StringBuffer sbType = null;
        StringBuffer sbRev = null;
        StringBuffer sbValidUntilDate = null;
        String subfromId = null;
        StringList sRMPUniqueList = null;
        String sNotNew = null;
        //Added by DSM(Sogeti) 2018x.5 Requirement - Start
        String strComments =null;
        //Added by DSM(Sogeti) 2018x.5 Requirement - Ends
        String sPhase = null;
        String sMinPer = null;
        String sMinPerMain = null;
        String sMaxPer = null;
        String sMaxPerMain = null;
        String sWetPer = null;
        String sQtyDiff = null;
        String strType = null;
        String strTypeValue = null;
        String strRev = null;
        String EBOMObjPrefName = null;
        String 	subPN1 = null;
        int integerPlaces = 0;
        int decimalPlaces = 0;
		//Added by DSM(Sogeti) - for 2022x.02 May CW PDF Views Req#46172 - Starts
		String strRelRestriction= DomainConstants.EMPTY_STRING;
        String strRelRestrictionComm= DomainConstants.EMPTY_STRING;
		//Added by DSM(Sogeti) - for 2022x.02 May CW PDF Views Req#46172 - Ends	
        //Modified by DSM-2018x.1 for PDF Views (Req Id #27722) - Starts
        StringBuffer sbWetMin = null;
        StringBuffer sbWetMax = null;
        StringBuffer sbTargetWet = null;
        //Modified by DSM-2018x.1 for PDF Views (Req Id #27722) - Ends
        //Added by DSM-2015x.4 for PDF Views (Defect id-13729) - Starts
        String strSubInPLBOMRelId = null;
        //Added by DSM-2015x.4 for PDF Views (Defect id-13729) - Ends
        DecimalFormat decimalformatter = new DecimalFormat(pgPDFViewConstants.PATTERN_DECIMALFORMAT);
        DomainObject doObjsubId = null;
        Map mpSubId = null;
        //Modified by DSM(Sogeti) - for 2015x.5 PDF Views Defect# 17019  - Starts
        //Commented/Added by DSM(Sogeti) - for 2018x.5 PDF Views Defect# 35574 - Starts
//		StringBuffer sbSubForName = new StringBuffer();
//		StringBuffer sbSubForTitle = new StringBuffer();
//		StringBuffer sbSubForWetPercent = new StringBuffer();
//		StringBuffer sbSubForRev = new StringBuffer();
//		StringBuffer sbForSequence = new StringBuffer();
//		StringBuffer sbSubForType = new StringBuffer();
//		StringBuffer sbSubForWetWeightMin = new StringBuffer();
//		StringBuffer sbSubForWetWeightMax = new StringBuffer();
        StringBuffer sbSubForNameRMNAndRev = new StringBuffer();
        StringBuffer sbSubForTypePhaseSeqInstruction = new StringBuffer();
        StringBuffer sbSubForWetWEMWWM = new StringBuffer();
        //Commented/Added by DSM(Sogeti) - for 2018x.5 PDF Views Defect# 35574 - Ends
        //Modified by DSM(Sogeti) - for 2015x.5 PDF Views Defect# 17019  - Ends

        //Commented by DSM-2015x.5.1 for FOP PDF Views (Defect #19874) - Starts
        //Added by DSM-2015x.5.1 for FOP PDF Views (Req #11472) - Starts
        //StringBuffer sbMinWetWeight = null;
        //StringBuffer sbMaxWetWeight = null;
        //StringBuffer sbTargetWetWeight = null;
        String strMinWetWeight = DomainConstants.EMPTY_STRING;
        String strMaxWetWeight = DomainConstants.EMPTY_STRING;
        String strTargetWetWeight = DomainConstants.EMPTY_STRING;
        //Added by DSM-2015x.5.1 for FOP PDF Views (Req #11472) - Ends
        //Commented by DSM-2015x.5.1 for FOP PDF Views (Defect #19874) - Ends
        //Added by DSM(Sogeti)-2018x.1.1 for PDF Views Requirements - Starts
        Map mapPlantData	=	null;
        String authorizeToProduce = DomainConstants.EMPTY_STRING;
        String plantId = DomainConstants.EMPTY_STRING;
        String personId = DomainConstants.EMPTY_STRING;
        boolean isAuthorizeToProduce = false;
        //Added by DSM(Sogeti)-2018x.1.1 for PDF Views Requirements - Ends
        //Added by DSM-2018x.1.1 for PDF Views (Req Id #27399 ) : Start
        boolean isPushContext = false;
        //Added by DSM-2018x.1.1 for PDF Views (Req Id #27399 ) : Ends
        String strValidStartDate = DomainConstants.EMPTY_STRING;
        String strFunction = DomainConstants.EMPTY_STRING;
        String strReportedFunction = DomainConstants.EMPTY_STRING;
        String subForWetWeightMin = null;
        String subForWetWeightMax = null;
        String sChange = DomainConstants.EMPTY_STRING;
        //Added by DSM(Sogeti) - for 2018x.5 PDF Views Defect# 35574 - Starts
        String strParentId=DomainConstants.EMPTY_STRING;
        StringList slSubstituteForParentList=null;
        Map mpSubFor=null;
        MapList objectList	= new MapList();
        HashMap paramMap	= new HashMap();
        HashMap proMap =new HashMap();
        paramMap.put("reportFormat", "Text");
        paramMap.put("table", "CPNFormulaSubstitutesTable");
        //Added by DSM(Sogeti) - for 2018x.5 PDF Views Defect# 35574 - Starts
        try {
            DomainObject domObjectId = DomainObject.newInstance(context,strObjId);
            //To get Formulation Process
            //Added by DSM-2015x.4 for PDF Views (Defect id-14164) - Start
            StringList objectSelects = new StringList(2);
            objectSelects.add(DomainConstants.SELECT_ID);
            objectSelects.add(DomainConstants.SELECT_REVISION);
            //Commented by DSM-2018x.1.1 for PDF Views (Req Id #27399 ) : Start
            //Added by DSM(Sogeti)-2018x.1.1 for PDF Views Requirements - Starts
			/*StringList relSelects = new StringList(1);
			relSelects.add("attribute["+pgV3Constants.ATTRIBUTE_PGISAUTHORIZEDTOPRODUCE+"]");
			if("contractpackaging".equalsIgnoreCase(pdfViewType))
			{
				MapList mlPlantData = domObjectId.getRelatedObjects(context,pgV3Constants.RELATIONSHIP_MANUFACTURINGRESPONSIBILITY,pgV3Constants.TYPE_PLANT,objectSelects,relSelects, true, false, (short) 1, null, null, 0);
				if(mlPlantData != null && mlPlantData.size()>0)
				{
					personId = PersonUtil.getPersonObjectID(context);
					Iterator iteratorPlant = mlPlantData.iterator();
					while (iteratorPlant.hasNext())
					{
						mapPlantData = (Map)iteratorPlant.next();
						authorizeToProduce = (String)mapPlantData.get("attribute["+pgV3Constants.ATTRIBUTE_PGISAUTHORIZEDTOPRODUCE+"]");
						plantId = (String)mapPlantData.get(DomainConstants.SELECT_ID);

						if("TRUE".equals(authorizeToProduce) && DomainObject.multiLevelRecursionCheck(context,personId,plantId,pgV3Constants.RELATIONSHIP_MEMBER,false))
						{
							isAuthorizeToProduce = true;
							break;
						}
					}
				}
				if(!isAuthorizeToProduce)
				{
					return sbFormulaSubstitute;
				}
			}*/
            //Commented by DSM-2018x.1.1 for PDF Views (Req Id #27399 ) : Ends
            //Added by DSM-2018x.1.1 for PDF Views (Req Id #27399 ) : Start
          //Modified by DSM (Infosys) 2022x.4 for Defect 53327 - EBP users able to access F-Process in CM view PDF when 'Authorize to Use' is Yes - Starts
            if("contractpackaging".equalsIgnoreCase(pdfViewType) && !isAuthorizedToViewFormulationProcAndSubs(context,domObjectId)) {
                //Modified by DSM (Infosys) 2022x.4 for Defect 53327 - EBP users able to access F-Process in CM view PDF when 'Authorize to Use' is Yes - Ends
                return sbFormulaSubstitute;
            }
            //Added by DSM-2018x.1.1 for PDF Views (Req Id #27399 ) : Ends
            //Added by DSM(Sogeti)-2018x.1.1 for PDF Views Requirements - Ends
            //Added by DSM-2018x.1.1 for PDF Views (Req Id #27399 ) : Start
            ContextUtil.pushContext(context, pgV3Constants.PERSON_USER_AGENT , "", "");
            isPushContext = true;
            //Added by DSM-2018x.1.1 for PDF Views (Req Id #27399 ) : Ends
            Map mMasterData = null;
			/* Map mMasterData = domObjectId.getRelatedObject(context,
															pgV3Constants.RELATIONSHIP_PLANNEDFOR, // Rel Pattern
															true,                     // direction of expansion
															new StringList(DomainConstants.SELECT_ID), // Bus select
															null);					  // Rel Select
			if(mMasterData !=null){
			strIdd = FrameworkUtil.getLastRevision(context,(String)mMasterData.get(DomainConstants.SELECT_ID)); */
            MapList mlMasterData = domObjectId.getRelatedObjects(context, pgV3Constants.RELATIONSHIP_PLANNEDFOR, pgV3Constants.TYPE_FORMULATIONPROCESS, objectSelects, null, false, true, (short) 1, null, null, 0);
            if(mlMasterData != null && mlMasterData.size()>0)
            {
                mlMasterData.addSortKey("revision", "descending", "String");
                mlMasterData.sort();
                mMasterData = (Map)mlMasterData.get(0);
                strIdd = (String)mMasterData.get(DomainConstants.SELECT_ID);
                //Added by DSM-2015x.4 for PDF Views (Defect id-14164) - End
            }
            mFOProcessId = new HashMap();
            mFOProcessId.put("objectId", strIdd);
            String[] args = JPO.packArgs(mFOProcessId);
//			enoGLSFormulationSubstitutes_mxJPO objFOPSub=new enoGLSFormulationSubstitutes_mxJPO(context,args);
//			mlFinalSub=objFOPSub.getSubstituteDetails(context,args);
//Added for PDF Refactor
            mlFinalSub= (MapList)pgPDFViewHelper.executeMainClassMethod(context, "enoGLSFormulationSubstitutes", "getSubstituteDetails", args);
            if((mlFinalSub != null) && (mlFinalSub.size()>0)){
                sbFormulaSubstitute.append("<tr><td><table cellspacing=\"0\" width=\"1000px\" id=\"BOM\">");
                sbFormulaSubstitute.append("<thead>");
                sbFormulaSubstitute.append("<tr><td colspan='13' class=\"new\" ><font size='4'><b>Substitutes</b></font></td></tr>");



                sbFormulaSubstitute.append("</thead>");
                objDetails = new StringList(11);
                objDetails.add(DomainConstants.SELECT_NAME);
                objDetails.add(DomainConstants.SELECT_TYPE);
                objDetails.add(DomainConstants.SELECT_REVISION);
                objDetails.add(DomainConstants.SELECT_ID);
                objDetails.add(DomainConstants.SELECT_POLICY);
                //Modified by DSM Sogeti-2015x.4 for PDF Views(Defect Id - 14235) - Starts
                objDetails.add(pgV3Constants.SELECT_ATTRIBUTE_SUBSTITUTEINSTRUCTIONS);
                objDetails.add(DomainConstants.SELECT_DESCRIPTION);
                objDetails.add(pgV3Constants.SELECT_ATTRIBUTE_PGVALIDUNTILDATE);
                objDetails.add(pgPDFViewConstants.SELECT_ATTR_VALID_START_DATE);
                objDetails.add("from["+pgV3Constants.RELATIONSHIP_PLBOM+"].to.from["+pgV3Constants.RELATIONSHIP_MATERIALFUNCTIONALITY+"].to.name");
                objDetails.add("from["+pgV3Constants.RELATIONSHIP_PLBOM+"].to.from["+pgV3Constants.RELATIONSHIP_PGPDTEMPLATESTOPGPLIREPORTEDFUNCTION+"].to.name");
                //Modified by DSM Sogeti-2015x.4 for PDF Views(Defect Id - 14235) - Ends
                for (Iterator iter = mlFinalSub.iterator(); iter.hasNext();){
                    mpFormulaSubstitutes1 = (Map) iter.next();
                    OID = (String) mpFormulaSubstitutes1.get(DomainConstants.SELECT_ID);
                    dobj = new DomainObject(OID);
                    //subPN   = (String)mpFormulaSubstitutes1.get("attribute["+${CLASS:pgDSOConstants}.ATTRIBUTE_PROCESSING_NOTE+"].value");
                    objDetailsMap = dobj.getInfo(context, objDetails);
                    sName = (String) objDetailsMap.get(DomainConstants.SELECT_NAME);
                    sId = (String) objDetailsMap.get(DomainConstants.SELECT_ID);
                    sType = (String) objDetailsMap.get(DomainConstants.SELECT_TYPE);
                    sRev	 = (String) objDetailsMap.get(DomainConstants.SELECT_REVISION);
                    //Modified by DSM Sogeti-2015x.4 for PDF Views(Defect Id - 14235) - Starts
                    strValidUntilDate = (String)objDetailsMap.get(pgV3Constants.SELECT_ATTRIBUTE_PGVALIDUNTILDATE);
                    sInstructions	 = (String) objDetailsMap.get(pgV3Constants.SELECT_ATTRIBUTE_SUBSTITUTEINSTRUCTIONS);
                    strValidStartDate = (String) objDetailsMap.get(pgPDFViewConstants.SELECT_ATTR_VALID_START_DATE);
                    strFunction = (String) objDetailsMap.get("from["+pgV3Constants.RELATIONSHIP_PLBOM+"].to.from["+pgV3Constants.RELATIONSHIP_MATERIALFUNCTIONALITY+"].to.name");
                    strReportedFunction = (String) objDetailsMap.get("from["+pgV3Constants.RELATIONSHIP_PLBOM+"].to.from["+pgV3Constants.RELATIONSHIP_PGPDTEMPLATESTOPGPLIREPORTEDFUNCTION+"].to.name");
                    //Added by DSM(Sogeti) - for 2015x.5 PDF Views Defect# 18002 - Starts
                    sInstructions = sInstructions.replaceAll("[<]","#LESS_THAN");
                    sInstructions = sInstructions.replaceAll("[>]","#GREATER_THAN");
                    //Added by DSM(Sogeti) - for 2015x.5 PDF Views Defect# 18002 - Ends
                    if (UIUtil.isNotNullAndNotEmpty(strValidUntilDate))
                    {
                        strValidUntilDate=pgIPMPDFViewUtil_mxJPO.getFormattedDate(strValidUntilDate);

                    }
                    if (UIUtil.isNotNullAndNotEmpty(strValidStartDate)) {
                        strValidStartDate=pgIPMPDFViewUtil_mxJPO.getFormattedDate(strValidStartDate);
                    }
                    //Modified by DSM Sogeti-2015x.4 for PDF Views(Defect Id - 14235) - Ends
                    sDescription = (String) objDetailsMap.get(DomainConstants.SELECT_DESCRIPTION);
                    //Added by DSM(Sogeti) - for 2015x.5 PDF Views Defect# 18002 - Starts
                    sDescription = sDescription.replaceAll("[<]","#LESS_THAN");
                    sDescription = sDescription.replaceAll("[>]","#GREATER_THAN");
                    //Added by DSM(Sogeti) - for 2015x.5 PDF Views Defect# 18002 - Ends
                    //DSM(DS) 2018x.0 Upgrade - start
                    //SubInPLBOM = (MapList) mpFormulaSubstitutes1.get("SubInPLBOM");
                    SubInPLBOM = (MapList) mpFormulaSubstitutes1.get("SubInFBOM");
                    //DSM(DS) 2018x.0 Upgrade - end
                    slSubFor   = (StringList) mpFormulaSubstitutes1.get("SubForParts");
                    //Modified by DSM(Sogeti) - for 2015x.5 PDF Views Defect# 17019  - Starts
                    //Commented/Added by DSM(Sogeti) - for 2018x.5 PDF Views Defect# 35574 - Starts
//					sbSubForName = new StringBuffer();
//					sbSubForTitle = new StringBuffer();
//					sbSubForWetPercent = new StringBuffer();
//					sbSubForRev = new StringBuffer();
//					sbForSequence = new StringBuffer();
//					sbSubForType = new StringBuffer();
                    sbSubForNameRMNAndRev = new StringBuffer();
                    sbSubForTypePhaseSeqInstruction = new StringBuffer();
                    sbSubForWetWEMWWM = new StringBuffer();
//					sbSubForWetWeightMin = new StringBuffer();
//					sbSubForWetWeightMax = new StringBuffer();
//					int counter = 0;
                    objectList	= new MapList();
                    objectList.add(mpFormulaSubstitutes1);
                    proMap.put("objectList", objectList);
                    proMap.put("paramList", paramMap);
                    String args2[]=JPO.packArgs(proMap);
                    Vector vComments =(Vector)pgPDFViewHelper.executeMainClassMethod(context, "pgDSOAltSubsTable" ,"getCommentColumnValueForPLBOMSubNonEdit", args2);
                    if(vComments!=null && !vComments.isEmpty()) {
                        strComments = (String)vComments.get(0);
                        strComments = checkLessThanGreaterThan(strComments);
                    }
                    //Commented//Added by DSM(Sogeti) - for 2018x.5 PDF Views Defect# 35574 - Ends
                    //Modified by DSM(Sogeti) - for 2015x.5 PDF Views Defect# 17019  - Ends
                    for(Iterator ItrSubFor = slSubFor.iterator(); ItrSubFor.hasNext();){
                        subRelandAtr = (String) ItrSubFor.next();
                        StringList subList = FrameworkUtil.split(subRelandAtr, ":");
                        subRelId = (String)subList.get(0);
                        dObjSubFor = new DomainObject(subRelId);
                        slSFDetails = new StringList(5);
                        slSFDetails.add(DomainConstants.SELECT_NAME);
                        slSFDetails.add(DomainConstants.SELECT_ID);
                        slSFDetails.add(DomainConstants.SELECT_TYPE);
                        slSFDetails.add(DomainConstants.SELECT_REVISION);
                        slSFDetails.add(DomainConstants.SELECT_POLICY);
                        slSFDetails.add(pgV3Constants.SELECT_ATTRIBUTE_TITLE);
                        mpSFDetails = dObjSubFor.getInfo(context,slSFDetails);
                        subForName = (String) mpSFDetails.get(DomainConstants.SELECT_NAME);

                        subForType = (String) mpSFDetails.get(DomainConstants.SELECT_TYPE);
                        subForRev = (String) mpSFDetails.get(DomainConstants.SELECT_REVISION);
                        subForId = (String) mpSFDetails.get(DomainConstants.SELECT_ID);

                        subForTitle = (String) mpSFDetails.get(pgV3Constants.SELECT_ATTRIBUTE_TITLE);
                        //Added by DSM(Sogeti) - for 2015x.5 PDF Views Defect# 18002 - Starts
                        subForTitle = subForTitle.replaceAll("[<]","#LESS_THAN");
                        subForTitle = subForTitle.replaceAll("[>]","#GREATER_THAN");
                        //Added by DSM(Sogeti) - for 2015x.5 PDF Views Defect# 18002 - Ends
                        //Modified by DSM(Sogeti) for Defect #37590 for 2018x.5_December PDF Views - Starts
                        slDifConSelects = new StringList(7);
                        //DSM (DS) 2018x.0 FD02 post upgrade fix - change PLBOM to FBOM - starts
                        //slDifConSelects.add("to["+pgV3Constants.RELATIONSHIP_PLBOM+"]."+pgV3Constants.SELECT_ATTRIBUTE_QUANTITY);
                        //slDifConSelects.add("to["+pgV3Constants.RELATIONSHIP_PLBOM+"]."+pgV3Constants.SELECT_ATTRIBUTE_FINDNUMBER);
                        //slDifConSelects.add("to["+pgV3Constants.RELATIONSHIP_PLBOM+"]."+pgV3Constants.SELECT_ATTRIBUTE_PGCHANGE);
                        //DSM (DS) 2018x.0 FD02 post upgrade fix - change PLBOM to FBOM - ends
                        if(FormulationType.FORMULATION_PART.getType(context).equals(sType)) {
                            slDifConSelects.add("from["+pgV3Constants.RELATIONSHIP_PLANNEDFOR+"].to["+pgV3Constants.RELATIONSHIP_FORMULATIONPROCESS+"].from["+pgV3Constants.RELATIONSHIP_FORMULATIONPROCESS+"].to["+pgV3Constants.TYPE_COSMETICFORMULATION+"]."+pgV3Constants.SELECT_ATTRIBUTE_TITLE);
                        }
                        //Modified by DSM(Sogeti) for Defect #37590 for 2018x.5_December PDF Views - Ends
                        slDifConSelects.add("to["+REL_MAN_EQUE+"].from["+pgV3Constants.TYPE_RAWMATERIALPART+"]."+pgV3Constants.SELECT_ATTRIBUTE_TITLE);
                        slDifConSelects.add("to["+REL_MAN_EQUE+"].from["+pgV3Constants.TYPE_RAWMATERIALPART+"].attribute["+ATTR_PREF_NAME+"]");
                        slDifConSelects.add(pgV3Constants.SELECT_ATTRIBUTE_TITLE);
                        slDifConSelects.add("attribute["+ATTR_PREF_NAME+"]");
                        slDifConSelects.add(DomainConstants.SELECT_POLICY);
                        //Added by DSM(Sogeti) - for 2018x.5 PDF Views Defect# 35574 - Starts
                        slDifConSelects.add("from[" + pgV3Constants.RELATIONSHIP_PGPDTEMPLATESTOPGPLIREPORTEDFUNCTION + "].to.name");
                        //Added by DSM(Sogeti) - for 2018x.5 PDF Views Defect# 35574 - Ends                       
                        //Added by DSM(Sogeti) - for 2022x.02 May CW PDF Views Req#46172 - Starts
                        slDifConSelects.add(pgPDFViewConstants.SELECT_ATTRIBUTE_PGRELATIONSHIPRESTRICTION);
                        slDifConSelects.add(pgPDFViewConstants.SELECT_ATTRIBUTE_PGRELATIONSHIPRESTRICTIONCOMMENTS);
                        //Added by DSM(Sogeti) - for 2022x.02 May CW PDF Views Req#46172 - Ends
                        dobjsubForId = DomainObject.newInstance(context,subForId);
                        mpDifContDetails = dobjsubForId.getInfo(context,slDifConSelects);
                        //Added by DSM-2015x.4 for PDF Views (Defect id-13729) - Starts
                        //Modified by DSM(Sogeti) - for 2015x.5 PDF Views Defect# 17019  - Starts
                        if(subList.size()==4) {
                            strSubInPLBOMRelId = (String)subList.get(3);
                        } else {
                            strSubInPLBOMRelId = (String) mpFormulaSubstitutes1.get("EBOM ID");
                        }
                        StringList slRelSelects = new StringList(4);
                        slRelSelects.add(pgV3Constants.ATTRIBUTE_QUANTITY);
                        slRelSelects.add(pgV3Constants.ATTRIBUTE_PGMINIMUMACTUALWEIGHTWET);
                        slRelSelects.add(pgV3Constants.ATTRIBUTE_PGMAXIMUMACTUALWEIGHTWET);
                        //Added by DSM(Sogeti) - for 2018x.5 PDF Views Defect# 35574 - Starts
                        slRelSelects.add(pgV3Constants.ATTRIBUTE_FINDNUMBER);
                        //Added by DSM(Sogeti) - for 2018x.5 PDF Views Defect# 35574 - Ends
                        String strAttrName = "";
                        if(UIUtil.isNotNullAndNotEmpty(strSubInPLBOMRelId)){
                            DomainRelationship domainRelationship = DomainRelationship.newInstance(context, strSubInPLBOMRelId);
                            AttributeList attrList = domainRelationship.getAttributeValues(context, slRelSelects);
                            for (Iterator iterator = attrList.iterator(); iterator.hasNext();) {
                                Attribute eachAttr = (Attribute) iterator.next();
                                strAttrName = eachAttr.getName();
                                if (pgV3Constants.ATTRIBUTE_QUANTITY.equalsIgnoreCase(strAttrName))
                                    subForWetPercent = eachAttr.getValue();
                                else if (pgV3Constants.ATTRIBUTE_PGMINIMUMACTUALWEIGHTWET.equalsIgnoreCase(strAttrName))
                                    subForWetWeightMin = eachAttr.getValue();
                                else if (pgV3Constants.ATTRIBUTE_PGMAXIMUMACTUALWEIGHTWET.equalsIgnoreCase(strAttrName))
                                    subForWetWeightMax= eachAttr.getValue();
                                    //Added by DSM(Sogeti) - for 2018x.5 PDF Views Defect# 35574 - Starts
                                else if(pgV3Constants.ATTRIBUTE_FINDNUMBER.equalsIgnoreCase(strAttrName))
                                    sSFSeq=eachAttr.getValue();
                                //Added by DSM(Sogeti) - for 2018x.5 PDF Views Defect# 35574 - Ends
                            }
                        }

                        if(UIUtil.isNotNullAndNotEmpty(subForWetPercent))
                        {
                            integerPlaces = subForWetPercent.indexOf('.');
                            decimalPlaces = subForWetPercent.length() - integerPlaces - 1;
                            if(decimalPlaces>6){
                                subForWetPercent = String.valueOf(decimalformatter.format(Double.parseDouble(subForWetPercent)));
                            }
                            if(subForWetPercent.equals("0.0")){
                                subForWetPercent= EMPTY_STRING;
                            }
                        }
                        //weightmin
                        if(UIUtil.isNotNullAndNotEmpty(subForWetWeightMin)){
                            integerPlaces = subForWetWeightMin.indexOf('.');
                            decimalPlaces = subForWetWeightMin.length() - integerPlaces - 1;
                            if(decimalPlaces>6){
                                subForWetWeightMin = String.valueOf(decimalformatter.format(Double.parseDouble(subForWetWeightMin)));
                            }
                            if(subForWetWeightMin.equals("0.0")){
                                subForWetWeightMin= EMPTY_STRING;
                            }
                        }
                        //weightmax
                        if(UIUtil.isNotNullAndNotEmpty(subForWetWeightMax)){
                            integerPlaces = subForWetWeightMax.indexOf('.');
                            decimalPlaces = subForWetWeightMax.length() - integerPlaces - 1;
                            if(decimalPlaces>6){
                                subForWetWeightMax = String.valueOf(decimalformatter.format(Double.parseDouble(subForWetWeightMax)));
                            }
                            if(subForWetWeightMax.equals("0.0")){
                                subForWetWeightMax= EMPTY_STRING;
                            }
                        }

                        //Added/Commented by DSM(Sogeti) - for 2018x.5 PDF Views Defect# 35574 - Starts
                        strParentId=DomainConstants.EMPTY_STRING;
                        slSubstituteForParentList=(StringList)mpFormulaSubstitutes1.get("SubstituteForParentList");
                        if(slSubstituteForParentList!=null && !slSubstituteForParentList.isEmpty()) {
                            strParentId=slSubstituteForParentList.get(0);
                        }
                        mpSubFor=new HashMap();
                        mpSubFor.put("EBOM ID",strSubInPLBOMRelId);
                        mpSubFor.put("targetPercentConsumed",(String)mpFormulaSubstitutes1.get("targetPercentConsumed"));
                        mpSubFor.put(DomainConstants.SELECT_ID,OID);
                        mpSubFor.put(DomainConstants.SELECT_NAME,ATTRIBUTE_FIND_NUMBER);
                        sPhase = (String)DomainObject.newInstance(context, strParentId).getInfo(context, DomainConstants.SELECT_NAME);
                        sSFSeq=getPrimaryNumbar(context, strParentId, sSFSeq, mpSubFor);
                        if (!("GenDoc".equalsIgnoreCase(pdfViewType)))
                            sbSubForNameRMNAndRev.append("<b>N:</b>"+validateString1(subForName)+"<BR></BR><b>RMN:</b>"+validateString1(subForTitle)+"<BR></BR><b>R:</b>"+validateString1(subForRev)+"<BR></BR><BR></BR>");
                        else
                            sbSubForNameRMNAndRev.append("<b>N:</b>"+validateString1(subForName)+"<BR></BR><b>RMN:</b>"+validateString1(subForTitle)+"<BR></BR><BR></BR>");
                        sbSubForTypePhaseSeqInstruction.append("<b>T:</b>"+validateString1(subForType)+"<BR></BR><b>Ph:</b>"+validateString1(sPhase)+"<br/><b>S:</b>"+validateString1(sSFSeq)+"<BR></BR><b>I:</b>"+validateString1(sInstructions)+"<BR></BR><BR></BR>");
                        sbSubForWetWEMWWM.append("<b>Wet%:</b>"+validateString1(subForWetPercent)+"<BR></BR><b>WEM:</b>"+validateString1(subForWetWeightMin)+"<BR></BR><b>WWM:</b>"+validateString1(subForWetWeightMax.toString())+"<BR></BR><BR></BR>");
/*					if(counter == 0){
							sbSubForName.append(subForName).append("<br />");
			    			sbSubForTitle.append(subForTitle).append("<br />");
			    			sbSubForWetPercent.append(subForWetPercent).append("<br />");
			    			sbSubForRev.append(subForRev).append("<br />");
			    			sbSubForType.append(subForType).append("<br />");
			    			sbSubForWetWeightMin.append(subForWetWeightMin).append("<br />");
			    			sbSubForWetWeightMax.append(subForWetWeightMax).append("<br />");
					}
					else{
						sbSubForName.append("<br />").append(subForName).append("<br />");
						sbSubForTitle.append("<br />").append(subForTitle).append("<br />");
						sbSubForWetPercent.append("<br />").append(subForWetPercent).append("<br />");
						sbSubForRev.append("<br />").append(subForRev).append("<br />");
						sbSubForType.append("<br />").append(subForType).append("<br />");
						sbSubForWetWeightMin.append("<br />").append(subForWetWeightMin).append("<br />");
						sbSubForWetWeightMax.append("<br />").append(subForWetWeightMax).append("<br />");
					}
					counter++;*/
                        //Modified by DSM(Sogeti) - for 2015x.5 PDF Views Defect# 17019  - Ends
                        //Added by DSM-2015x.4 for PDF Views (Defect id-13729) - Ends
                        //DSM (DS) 2018x.0 FD02 post upgrade fix - change PLBOM to FBOM - starts
                        //Commented by DSM(Sogeti) - for 2018x.5 PDF Views Defect# 35574 - Starts
                        //sSFSeq = (String) mpDifContDetails.get("to["+pgV3Constants.RELATIONSHIP_PLBOM+"]."+pgV3Constants.SELECT_ATTRIBUTE_FINDNUMBER);
                        //sChange = (String) mpDifContDetails.get("to["+pgV3Constants.RELATIONSHIP_PLBOM+"]."+pgV3Constants.SELECT_ATTRIBUTE_PGCHANGE);
                        //Commented by DSM(Sogeti) - for 2018x.5 PDF Views Defect# 35574 - Ends

                        //DSM (DS) 2018x.0 FD02 post upgrade fix - change PLBOM to FBOM - ends
                        sbSFRev.append("<br />").append(subForRev);
                        //Commented by DSM(Sogeti) for Defect #37590 for 2018x.5_December PDF Views - Starts
					/*sSFObjPrefName = null;
					if(FormulationType.FORMULATION_PART.getType(context).equals(subForType)){
							sSFObjPrefName = (String)mpDifContDetails.get("from["+pgV3Constants.RELATIONSHIP_PLANNEDFOR+"].to["+pgV3Constants.RELATIONSHIP_FORMULATIONPROCESS+"].from["+pgV3Constants.RELATIONSHIP_FORMULATIONPROCESS+"].to["+pgV3Constants.TYPE_COSMETICFORMULATION+"]."+pgV3Constants.SELECT_ATTRIBUTE_TITLE);
							}
						else{
						if(POL_MAN_EQUE.equals((String)mpDifContDetails.get(DomainConstants.SELECT_POLICY))){
							sSFObjPrefName = (String)mpDifContDetails.get("to["+REL_MAN_EQUE+"].from["+pgV3Constants.TYPE_RAWMATERIALPART+"]."+pgV3Constants.SELECT_ATTRIBUTE_TITLE);
							if(UIUtil.isNullOrEmpty(sSFObjPrefName)){
							sSFObjPrefName = (String)mpDifContDetails.get("to["+REL_MAN_EQUE+"].from["+pgV3Constants.TYPE_RAWMATERIALPART+"].attribute["+ATTR_PREF_NAME+"]");
							}
							}
						else{
							sSFObjPrefName = (String)mpDifContDetails.get(pgV3Constants.SELECT_ATTRIBUTE_TITLE);
							if(UIUtil.isNullOrEmpty(sSFObjPrefName)){
							sSFObjPrefName = (String)mpDifContDetails.get("attribute["+ATTR_PREF_NAME+"]");
							}
							}
						}*/
                        //sbSFRMN.append("<br />").append(sSFObjPrefName);
                    }
                    //Commented by DSM(Sogeti) for Defect #37590 for 2018x.5_December PDF Views - Ends
                    sSFphase = getPhaseWithLowestSeqNo(context,sId);
                    //sbSFPhase.append("<br />").append(sSFphase);
                    //Removed the declarations by DSM Sogeti-2015x.5 for PDF Views(Defect Id - 15154) - Starts
                    if (sType.equals(FormulationType.PARENT_SUB.getType(context))){
                        //Modified by DSM-2015x.4 for PDF Views FOP Type(Req-11472) - Starts
                        //sbFormulaSubstitute.append("<thead>");
                        //Modified by DSM Sogeti-2015x.4 for PDF Views(Defect Id - 14235) - Starts
                        sbFormulaSubstitute.append("<table  class=\"WordWrappdf\" cellspacing=\"0\" width=\"1000px\" id=\"BOM\">");
                        //Modified by DSM Sogeti-2015x.4 for PDF Views(Defect Id - 14235) - Ends

                        //Modified by DSM-2015x.5.1 for FOP PDF Views (Defect #19874) - Starts
                        sbFormulaSubstitute.append("<tr><th colspan='13' align=\"left\" width=\"105px\"><font size='3'><b>Description:</b><t></t>"+sDescription+"<br></br><b>Instructions:</b><t></t>"+sInstructions+"</font></th></tr>");
                       //Modified by DSM Sogeti for 2022x.02 May CW for PDF Views (Req -46172) - Starts
                        if(pgV3Constants.PDFVIEW_ALLINFO.equalsIgnoreCase(pdfViewType))
                    	{
                        	sbFormulaSubstitute.append("<tr><td colspan='10' align=\"left\" width=\"500px\"><font size='3'><b>Substitute Parts</b></font></td><td colspan='4' align=\"left\" width=\"500px\"><font size='3'><b>Substitute For</b></font></td></tr>");                            
                    	}else {
                    		sbFormulaSubstitute.append("<tr><td colspan='9' align=\"left\" width=\"500px\"><font size='3'><b>Substitute Parts</b></font></td><td colspan='4' align=\"left\" width=\"500px\"><font size='3'><b>Substitute For</b></font></td></tr>");                            
                    	}
                    	//Modified by DSM Sogeti for 2022x.02 May CW for PDF Views (Req -46172) - Ends
                        //Modified by DSM-2015x.5.1 for FOP PDF Views (Defect #19874) - Ends

                        sbFormulaSubstitute.append("<tr>");
                        sbFormulaSubstitute.append("<th width=\"55px\" align=\"center\"><b>Name</b></th>");
                        sbFormulaSubstitute.append("<th width=\"55px\" align=\"center\"><b>Chg</b></th>");
                        sbFormulaSubstitute.append("<th width=\"55px\" align=\"center\"><b>Raw Material Name</b></th>");
                        //Added by DSM-2018x.5 for FOP PDF Requirement - Starts
                        //Modified by DSM(Sogeti) PDF Views Defect 36799 - Starts
                        if (!("GenDoc".equalsIgnoreCase(pdfViewType)))
                            sbFormulaSubstitute.append("<th width=\"85px\" align=\"center\"><b>Type (T)<br/>Phase(Ph)<br/>Rev(R)</b></th>");
                        else
                            sbFormulaSubstitute.append("<th width=\"85px\" align=\"center\"><b>Type (T)<br/>Phase(Ph)</b></th>");
                        //Modified by DSM(Sogeti) PDF Views Defect 36799 - Ends
                        //Added by DSM-2018x.5 for FOP PDF Requirement - Ends
                        //Modified by DSM-2015x.5.1 for FOP PDF Views (Defect #19874) - Starts
                        //sbFormulaSubstitute.append("<th width=\"95px\" align=\"center\"><b>Min % (w/w) <br/>(Min) <br/>Wet%(w/w)  <br/>(Wet)<br/>Max%(w/w) <br/>(Max) </b></th>");
                        //sbFormulaSubstitute.append("<th width=\"95px\" align=\"center\"><b>Target Wet Weight <br/>(TWW) <br/> Wet Weight Min <br/>(WMM)<br/>Wet Weight Max <br/>(WEM)</b></th>");

                        //sbFormulaSubstitute.append("<th width=\"85px\" align=\"center\"><b>Min%(w/w)</b></th>");
                        //sbFormulaSubstitute.append("<th width=\"85px\" align=\"center\"><b>Wet%(w/w)</b></th>");
                        //sbFormulaSubstitute.append("<th width=\"85px\" align=\"center\"><b>Max%(w/w)</b></th>");
                        //Modified by DSM-2015x.5.1 for FOP PDF Views (Defect #19874) - Ends
                        //Modified by DSM-2018x.1 for PDF Views (Req Id #27722) - Starts
                        sbFormulaSubstitute.append("<th width=\"141px\" align=\"center\"><b>Min%(w/w) (MIN)</b><BR></BR><b>Wet%(w/w) (WET)</b><BR></BR><b>Max%(w/w) (MAX)</b></th>");
                        sbFormulaSubstitute.append("<th width=\"151px\" align=\"center\"><b>Target Wet Weight(TWW)</b><BR></BR><b>Wet Weight Min(WEM)</b><BR></BR><b>Wet Weight Max (WWM)</b></th>");
                        //Modified by DSM-2018x.1 for PDF Views (Req Id #27722) - Ends

                        sbFormulaSubstitute.append("<th width=\"85px\" align=\"center\"><b>Wet Diff %(WD)</b><br/>Function (F)<br/>Reported<br/>Function (RF)</th>");
                        //Modified by DSM Sogeti-2015x.4 for PDF Views(Defect Id - 14235) - Starts
                        sbFormulaSubstitute.append("<th width=\"85px\" align=\"center\"><b>Valid Start Date (VSD)</b><br/><b>Valid Until Date(VUD)</b></th>");
                        //Added by DSM(Sogeti)-2018x.2 for PDF Views Requirements - Starts
                        //sbFormulaSubstitute.append("<th width=\"85px\" align=\"center\"><b>Processing Note</b></th>");
                        if("allinfo".equalsIgnoreCase(pdfViewType) || "GenDoc".equalsIgnoreCase(pdfViewType) || "contractpackaging".equalsIgnoreCase(pdfViewType)) {
                            sbFormulaSubstitute.append("<th width=\"85px\" align=\"center\"><b>Certifications(C)<BR></BR> Processing Note(P)<br/>Comments <br/>(Com)</b></th>");
                        } else {
                            sbFormulaSubstitute.append("<th width=\"85px\" align=\"center\"><b>Processing Note</b></th>");
                        }
                        //Added by DSM(Sogeti)-2018x.2 for PDF Views Requirements - Ends
                        //Modified by DSM Sogeti-2015x.4 for PDF Views(Defect Id - 14235) - Ends
                        //Added by DSM Sogeti for 2022x.02 May CW for PDF Views (Req -46172) - Starts
                        if(pgV3Constants.PDFVIEW_ALLINFO.equalsIgnoreCase(pdfViewType)){
                        	sbFormulaSubstitute.append("<TH align=\"center\" width=\"95\"><B>Relationship Restriction(RR)</B><BR></BR><B>Relationship Restriction</B><BR></BR><B>Comment(RRC)</B></TH>");
                        }
                        //Added by DSM Sogeti for 2022x.02 May CW for PDF Views (Req -46172) - Ends
                        if (!("GenDoc".equalsIgnoreCase(pdfViewType)))
                            sbFormulaSubstitute.append("<th width=\"60px\" align=\"center\"><b>Name(N)<br/>Raw<br/>Material<br/>Name<br/>(RMN)<br/>Rev(R)</b></th>");
                        else
                            sbFormulaSubstitute.append("<th width=\"60px\" align=\"center\"><b>Name(N)<br/>Raw<br/>Material<br/>Name<br/>(RMN)</b></th>");
                        sbFormulaSubstitute.append("<th width=\"80px\" align=\"center\"><b>Type(T)<br/>Phase(Ph)<br/>Seq(S)<br/>Instructions(I)</b></th>");
                        sbFormulaSubstitute.append("<th width=\"80px\" align=\"center\"><b>Wet%(w/w)<br/>(Wet%)<br/>Wet Weight<br/>Min (WEM)<br/>Wet Weight<br/>Max (WWM)</b></th>");
                        sbFormulaSubstitute.append("</tr>");
                        //sbFormulaSubstitute.append("</thead>");
                        //Modified by DSM Sogeti-2015x.5 for PDF Views(Defect Id - 15154) - Starts
                        int count = 0;
                        for (Iterator iter1 = SubInPLBOM.iterator(); iter1.hasNext();){
                            count ++;
                            subName = null;
                            subId = null;
                            sbName = new StringBuffer();
                            StringBuffer sbSubPn = new StringBuffer();
                            strExportBuffer = new StringBuffer();
                            sbMinPercent = new StringBuffer();
                            sbMaxPercent = new StringBuffer();
                            sbWetPercent = new StringBuffer();
                            SbTitle = new StringBuffer();
                            sbQtyDiff = new StringBuffer();
                            sbPhase = new StringBuffer();
                            sbType = new StringBuffer();
                            sbRev = new StringBuffer();
                            sbValidUntilDate = new StringBuffer();
                            subfromId = null;
                            sbMatFunc 		= new StringBuffer();
                            sMaterVal		= DomainConstants.EMPTY_STRING;
                            //Modified by DSM-2018x.1 for PDF Views (Req Id #27722) - Starts
                            sbWetMin  = new StringBuffer();
                            sbWetMax  = new StringBuffer();
                            sbTargetWet  = new StringBuffer();
                            //Modified by DSM-2018x.1 for PDF Views (Req Id #27722) - Ends
                            //Modified by DSM Sogeti-2015x.5 for PDF Views(Defect Id - 15154) - Ends

                            //Commented by DSM-2015x.5.1 for FOP PDF Views (Defect #19874) - Starts
                            //Added by DSM-2015x.5.1 for FOP PDF Views (Req #11472) - Starts
                            //sbMinWetWeight = new StringBuffer();
                            //sbMaxWetWeight = new StringBuffer();
                            //sbTargetWetWeight = new StringBuffer();
                            //Added by DSM-2015x.5.1 for FOP PDF Views (Req #11472) - Ends
                            //Commented by DSM-2015x.5.1 for FOP PDF Views (Defect #19874) - Ends

                            sRMPUniqueList = new StringList();
                            mpFormulaSubstitutes = (Map) iter1.next();
                            sNotNew = (String)mpFormulaSubstitutes.get("notNew");
                            subName = (String)mpFormulaSubstitutes.get(DomainConstants.SELECT_NAME);
                            strType = (String) mpFormulaSubstitutes.get(DomainConstants.SELECT_TYPE);
                            subId   = (String)mpFormulaSubstitutes.get(DomainConstants.SELECT_ID);
                            SubTitle   = (String)mpFormulaSubstitutes.get(pgV3Constants.SELECT_ATTRIBUTE_TITLE);
                            strRev = (String)mpFormulaSubstitutes.get(DomainConstants.SELECT_REVISION);
                            //Added by DSM(Sogeti) - for 2015x.5 PDF Views Defect# 18002 - Starts
                            if(UIUtil.isNotNullAndNotEmpty(SubTitle)){
                                SubTitle = SubTitle.replaceAll("[<]","#LESS_THAN");
                                SubTitle = SubTitle.replaceAll("[>]","#GREATER_THAN");
                            }
                            //Added by DSM(Sogeti) - for 2015x.5 PDF Views Defect# 18002 - Ends
                            sMinPer = (String) mpFormulaSubstitutes.get("attribute[Minimum Actual Percent Wet].value");
                            sMaxPer = (String) mpFormulaSubstitutes.get("attribute[Maximum Actual Percent Wet].value");
                            sWetPer = (String) mpFormulaSubstitutes.get("attribute[Quantity].value");
                            sQtyDiff = (String) mpFormulaSubstitutes.get("attribute[Quantity Adjustment].value");
                            //Modified by DSM-2018x.1 for PDF Views (Req Id #27722) - Starts
                            strMinWetWeight = (String) mpFormulaSubstitutes.get("attribute[pgMinimumActualWeightWet].inputvalue");
                            strMaxWetWeight = (String) mpFormulaSubstitutes.get("attribute[pgMaximumActualWeightWet].inputvalue");
                            strTargetWetWeight = (String) mpFormulaSubstitutes.get("attribute[Target Weight Wet].value");
                            //Modified by DSM-2018x.1 for PDF Views (Req Id #27722) - Ends
                            //Commented by DSM-2015x.5.1 for FOP PDF Views (Defect #19874) - Start
                            //Added by DSM-2015x.5.1 for FOP PDF Views (Req #11472) - Starts
                            //strMinWetWeight = (String)mpFormulaSubstitutes.get("attribute["+pgV3Constants.ATTRIBUTE_PGMINIMUMACTUALWEIGHTWET+"].value");
                            //strMaxWetWeight = (String)mpFormulaSubstitutes.get("attribute["+pgV3Constants.ATTRIBUTE_PGMAXIMUMACTUALWEIGHTWET+"].value");
                            //strTargetWetWeight = (String)mpFormulaSubstitutes.get("attribute["+pgV3Constants.ATTRIBUTE_TARGETWETWEIGHT+"].value");
                            //Added by DSM-2015x.5.1 for FOP PDF Views (Req #11472) - Ends
                            //Commented by DSM-2015x.5.1 for FOP PDF Views (Defect #19874) - End

                            doObjsubId = DomainObject.newInstance(context,subId);
                            mpSubId = doObjsubId.getInfo(context, slDifConSelects);
                            //Added by DSM-2015x.2.1 Sep Release for PDF Views FOP Type(Req-13693) - Starts
                            //Modified by DSM-2015x.4 for PDF Views FOP Type(Defect-15154) - Starts
                            if(mpFormulaSubstitutes.containsKey("attribute["+pgV3Constants.ATTRIBUTE_PROCESSINGNOTE+"].value"))
                            {
                                subPN   = (String)mpFormulaSubstitutes.get("attribute["+pgV3Constants.ATTRIBUTE_PROCESSINGNOTE+"].value");
                                if(UIUtil.isNotNullAndNotEmpty(subPN)){
                                    //Added by DSM(Sogeti) - for 2015x.5 PDF Views Defect# 15160 - Starts
                                    subPN = subPN.replaceAll("[<]","#LESS_THAN");
                                    //Added by DSM(Sogeti) - for 2015x.5 PDF Views Defect# 15160 - Ends
                                    sbSubPn.append("<br />").append(subPN).append("<br />");
                                }
                                //Added by DSM(Sogeti)-2015x.5 for PDF Views (Defect ID-16705) - Starts
                                else{
                                    subPN = DomainConstants.EMPTY_STRING;
                                    sbSubPn.append("<br />").append(subPN).append("<br />");
                                }
                                //Added by DSM(Sogeti)-2015x.5 for PDF Views (Defect ID-16705) - Ends
                            }
                            else{
                                subPN1   = (String)mpFormulaSubstitutes1.get("attribute["+pgV3Constants.ATTRIBUTE_PROCESSINGNOTE+"].value");
                                if(UIUtil.isNotNullAndNotEmpty(subPN1)){
                                    //Added by DSM(Sogeti) - for 2015x.5 PDF Views Defect# 15160 - Starts
                                    subPN1 = subPN1.replaceAll("[<]","#LESS_THAN");
                                    //Added by DSM(Sogeti) - for 2015x.5 PDF Views Defect# 15160 - Ends
                                    sbSubPn.append("<br />").append(subPN1);
                                }
                                //Added by DSM(Sogeti)-2015x.5 for PDF Views (Defect ID-16705) - Starts
                                else{
                                    subPN1 = DomainConstants.EMPTY_STRING;
                                    sbSubPn.append("<br />").append(subPN1);
                                }
                                //Added by DSM(Sogeti)-2015x.5 for PDF Views (Defect ID-16705) - Ends
                            }
                            //Added by DSM-2015x.2.1 Sep Release for PDF Views FOP Type(Req-13693) - Ends
                            if(UIUtil.isNullOrEmpty(sNotNew) && (!sRMPUniqueList.contains(subId)))
                            {
                                sbName.append("<br />").append(subName).append("<br />");
                                SbTitle.append("<br />").append(SubTitle).append("<br />");
                            }
                            else if(UIUtil.isNotNullAndNotEmpty(sNotNew) && (!sRMPUniqueList.contains(subId)))
                            {
                                sbName.append("<br />").append(subName).append("<br />");
                                SbTitle.append("<br />").append(subForTitle).append("<br />");
                            }
                            sRMPUniqueList.add(subId);
                            subfromId 				= (String)mpFormulaSubstitutes.get("from.id");
                            sPhase = (String) mpFormulaSubstitutes.get("phase");
                            if(UIUtil.isNotNullAndNotEmpty(sPhase)){
                                sbPhase.append("<br />").append(sPhase);
                            }
                            else{
                                String phaseWithLowestSeqNo = getPhaseWithLowestSeqNo(context,subfromId);
                                sbPhase.append("<br />").append(phaseWithLowestSeqNo);
                            }

                            //Modified by DSM(Sogeti) - for 2015x.5 PDF Views Defect# 15577 - Starts
                            //if(mpFormulaSubstitutes.containsKey("attribute[Minimum Actual Percent Wet].value")){
                            if(mpFormulaSubstitutes.containsKey("attribute[Minimum Actual Percent Wet].inputvalue")){
                                //sMinPer = (String) mpFormulaSubstitutes.get("attribute[Minimum Actual Percent Wet].value");
                                sMinPer = (String) mpFormulaSubstitutes.get("attribute[Minimum Actual Percent Wet].inputvalue");
                                //Modified by DSM(Sogeti) - for 2015x.5 PDF Views Defect# 15577 - Ends
                                if(UIUtil.isNotNullAndNotEmpty(sMinPer)){
                                    integerPlaces = sMinPer.indexOf('.');
                                    decimalPlaces = sMinPer.length() - integerPlaces - 1;
                                    if(decimalPlaces>6)
                                        sMinPer = String.valueOf(decimalformatter.format(Double.parseDouble(sMinPer)));
                                    //Modified by DSM(Sogeti) - for 2015x.5 PDF Views Defect# 15577 - Starts
								/* if(sMinPer.equals("0.0")){
								sMinPer = EMPTY_STRING;
								} */
                                    //Modified by DSM(Sogeti) - for 2015x.5 PDF Views Defect# 15577 - Ends
                                    //29260
                                    //sbMinPercent.append(sMinPer).append("<br />");
                                    //Added by DSM(Sogeti) - for 2018x.2 PDF Views Defect# 29260 - Starts
                                    sbMinPercent.append(sMinPer);
                                    //Added by DSM(Sogeti) - for 2018x.2 PDF Views Defect# 29260 - Ends
                                }
                                //Added by DSM(Sogeti) - for 2015x.5 PDF Views Defect# 15577 - Starts
                                else
                                    //Added by DSM(Sogeti) - for 2018x.2 PDF Views Defect# 29260 - Starts
                                    //sbMinPercent.append(DomainConstants.EMPTY_STRING).append("<br />");
                                    sbMinPercent.append(DomainConstants.EMPTY_STRING);
                                //Added by DSM(Sogeti) - for 2018x.2 PDF Views Defect# 29260 - Ends
                                //Added by DSM(Sogeti) - for 2015x.5 PDF Views Defect# 15577 - Ends
                            } else{
                                //Modified by DSM for 2015x.5.1 PDF Views(Defect #21009) - Starts
                                sMinPerMain = (String) mpFormulaSubstitutes.get("attribute[Minimum Actual Percent Wet].value");
                                //Modified by DSM for 2015x.5.1 PDF Views(Defect #21009) - Ends
                                if(UIUtil.isNotNullAndNotEmpty(sMinPerMain)){
                                    integerPlaces = sMinPerMain.indexOf('.');
                                    decimalPlaces = sMinPerMain.length() - integerPlaces - 1;
                                    if(decimalPlaces>6)
                                        sMinPerMain = String.valueOf(decimalformatter.format(Double.parseDouble(sMinPerMain)));
                                    if(sMinPerMain.equals("0.0")){
                                        sMinPerMain = EMPTY_STRING;
                                    }
                                    //	sbMinPercent.append(sMinPerMain).append("<br />");
                                    //Added by DSM(Sogeti) - for 2018x.2 PDF Views Defect# 29260 - Starts
                                    sbMinPercent.append(sMinPerMain);
                                    //Added by DSM(Sogeti) - for 2018x.2 PDF Views Defect# 29260 - Ends

                                }else
                                    //Modified by DSM(Sogeti) - for 2015x.5 PDF Views Defect# 15577 - Starts
                                    //sbMinPercent.append("<br />").append("0.0").append("<br />");
//								sbMinPercent.append(DomainConstants.EMPTY_STRING).append("<br />");
                                    //Added by DSM(Sogeti) - for 2018x.2 PDF Views Defect# 29260 - Starts
                                    sbMinPercent.append(DomainConstants.EMPTY_STRING);
                                //Added by DSM(Sogeti) - for 2018x.2 PDF Views Defect# 29260 - Ends
                            }

                            //if(mpFormulaSubstitutes.containsKey("attribute[Maximum Actual Percent Wet].value")){
                            if(mpFormulaSubstitutes.containsKey("attribute[Maximum Actual Percent Wet].inputvalue")){
                                //sMaxPer = (String) mpFormulaSubstitutes.get("attribute[Maximum Actual Percent Wet].value");
                                sMaxPer = (String) mpFormulaSubstitutes.get("attribute[Maximum Actual Percent Wet].inputvalue");
                                //Modified by DSM(Sogeti) - for 2015x.5 PDF Views Defect# 15577 - Ends
                                if(UIUtil.isNotNullAndNotEmpty(sMaxPer)){
                                    integerPlaces = sMaxPer.indexOf('.');
                                    decimalPlaces = sMaxPer.length() - integerPlaces - 1;
                                    if(decimalPlaces>6)
                                        sMaxPer = String.valueOf(decimalformatter.format(Double.parseDouble(sMaxPer)));
                                    //Modified by DSM(Sogeti) - for 2015x.5 PDF Views Defect# 15577 - Starts
								/* if(sMaxPer.equals("0.0")){
									sMaxPer = EMPTY_STRING;
								} */
                                    //Modified by DSM(Sogeti) - for 2015x.5 PDF Views Defect# 15577 - Ends
//								sbMaxPercent.append(sMaxPer).append("<br />");
                                    //Added by DSM(Sogeti) - for 2018x.2 PDF Views Defect# 29260 - Starts
                                    sbMaxPercent.append(sMaxPer);
                                    //Added by DSM(Sogeti) - for 2018x.2 PDF Views Defect# 29260 - Ends

                                }
                                //Added by DSM(Sogeti) - for 2015x.5 PDF Views Defect# 15577 - Starts
                                else
                                    //Added by DSM(Sogeti) - for 2018x.2 PDF Views Defect# 29260 - Starts
//								sbMaxPercent.append(DomainConstants.EMPTY_STRING).append("<br />");
                                    //Added by DSM(Sogeti) - for 2018x.2 PDF Views Defect# 29260 - Ends
                                    sbMaxPercent.append(DomainConstants.EMPTY_STRING);
                                //Added by DSM(Sogeti) - for 2015x.5 PDF Views Defect# 15577 - Ends


                            }
                            else{
                                //Modified by DSM for 2015x.5.1 PDF Views(Defect #21009) - Starts
                                sMaxPerMain = (String) mpFormulaSubstitutes.get("attribute[Maximum Actual Percent Wet].value");
                                //Modified by DSM for 2015x.5.1 PDF Views(Defect #21009) - Ends
                                if(UIUtil.isNotNullAndNotEmpty(sMaxPerMain)){
                                    integerPlaces = sMaxPerMain.indexOf('.');
                                    decimalPlaces = sMaxPerMain.length() - integerPlaces - 1;
                                    if(decimalPlaces>6)
                                        sMaxPerMain = String.valueOf(decimalformatter.format(Double.parseDouble(sMaxPerMain)));
                                    if(sMaxPerMain.equals("0.0")){
                                        sMaxPerMain = EMPTY_STRING;
                                    }
//									sbMaxPercent.append(sMaxPerMain).append("<br />");
                                    //Added by DSM(Sogeti) - for 2018x.2 PDF Views Defect# 29260 - Starts
                                    sbMaxPercent.append(sMaxPerMain);
                                    //Added by DSM(Sogeti) - for 2018x.2 PDF Views Defect# 29260 - Ends
                                }else{
                                    //Modified by DSM(Sogeti) - for 2015x.5 PDF Views Defect# 15577 - Starts
                                    //sbMaxPercent.append("<br />").append("0.0").append("<br />");
//								sbMaxPercent.append(DomainConstants.EMPTY_STRING).append("<br />");
                                    //Added by DSM(Sogeti) - for 2018x.2 PDF Views Defect# 29260 - Starts
                                    sbMaxPercent.append(DomainConstants.EMPTY_STRING);
                                    //Added by DSM(Sogeti) - for 2018x.2 PDF Views Defect# 29260 - Ends

                                    //Modified by DSM(Sogeti) - for 2015x.5 PDF Views Defect# 15577 - Ends
                                }
                            }
                            //Modified by DSM(Sogeti) - for 2015x.5 PDF Views Defect# 15577 - Starts
                            if(mpFormulaSubstitutes.containsKey("attribute[Quantity].inputvalue")){
                                sWetPer = (String) mpFormulaSubstitutes.get("attribute[Quantity].inputvalue");
                                if(UIUtil.isNotNullAndNotEmpty(sWetPer)){
                                    integerPlaces = sWetPer.indexOf('.');
                                    decimalPlaces = sWetPer.length() - integerPlaces - 1;
                                    if(decimalPlaces>6)
                                    {
                                        sWetPer = String.valueOf(decimalformatter.format(Double.parseDouble(sWetPer)));
                                    }

//								sbWetPercent.append(sWetPer).append("<br />");
                                    //Added by DSM(Sogeti) - for 2018x.2 PDF Views Defect# 29260 - Starts
                                    sbWetPercent.append(sWetPer);
                                    //Added by DSM(Sogeti) - for 2018x.2 PDF Views Defect# 29260 - Ends
                                } else {
//								sbWetPercent.append(DomainConstants.EMPTY_STRING).append("<br />");
                                    //Added by DSM(Sogeti) - for 2018x.2 PDF Views Defect# 29260 - Starts
                                    sbWetPercent.append(DomainConstants.EMPTY_STRING);
                                    //Added by DSM(Sogeti) - for 2018x.2 PDF Views Defect# 29260 - Ends
                                }
                            } else {
                                sWetPer = (String) mpFormulaSubstitutes.get("attribute[Quantity].value");
                                if(UIUtil.isNotNullAndNotEmpty(sWetPer)){
                                    integerPlaces = sWetPer.indexOf('.');
                                    decimalPlaces = sWetPer.length() - integerPlaces - 1;
                                    if(decimalPlaces>6)
                                    {
                                        sWetPer = String.valueOf(decimalformatter.format(Double.parseDouble(sWetPer)));
                                    }
								/* if(sWetPer.equals("0.0")){
									sWetPer = EMPTY_STRING;
								} */
//								sbWetPercent.append(sWetPer).append("<br />");
                                    //Added by DSM(Sogeti) - for 2018x.2 PDF Views Defect# 29260 - Starts
                                    sbWetPercent.append(sWetPer);
                                    //Added by DSM(Sogeti) - for 2018x.2 PDF Views Defect# 29260 - Ends
                                }else{
//								sbWetPercent.append(DomainConstants.EMPTY_STRING).append("<br />");
                                    //Added by DSM(Sogeti) - for 2018x.2 PDF Views Defect# 29260 - Starts
                                    sbWetPercent.append(DomainConstants.EMPTY_STRING);
                                    //Added by DSM(Sogeti) - for 2018x.2 PDF Views Defect# 29260 - Ends
                                }
                            }
                            //Modified by DSM(Sogeti) - for 2015x.5 PDF Views Defect# 15577 - Ends
                            sQtyDiff = (String) mpFormulaSubstitutes.get("attribute[Quantity Adjustment].value");
                            if(UIUtil.isNotNullAndNotEmpty(sQtyDiff))
                            {
                                //Modified for by DSM-2018x.0 for  PDF Views (Defect #21271) - Starts
                                Double floatQtyAdj = new Double(0.0);
                                floatQtyAdj = Double.parseDouble(sQtyDiff);
                                Double absfloatQtyAdj = Math.abs(floatQtyAdj);
                                String strfloatQtyAdj = String.format("%.6f", new BigDecimal(absfloatQtyAdj));
//Added for PDF Refactor
                                HashMap hm=new HashMap();
                                hm.put("strfloatQtyAdj", strfloatQtyAdj);
                                hm.put("DECIMAL_SIX", pgV3Constants.FORMAT_DECIMAL_SIX);
                                String args1[]=JPO.packArgs(hm);
//							strfloatQtyAdj = pgDSOCommonUtils_mxJPO.INSTANCE.getFormatedDecimalValue(strfloatQtyAdj, pgPDFViewConstants.FORMAT_DECIMAL_SIX);
                                strfloatQtyAdj= (String)pgPDFViewHelper.executeIntermediatorClassMethod(context, "getFormatedDecimalValue", args1);
                                if(sQtyDiff.equals("0.0")){
                                    sQtyDiff = EMPTY_STRING;
                                }
                                else
                                {
                                    sQtyDiff=strfloatQtyAdj;
                                }
                                sbQtyDiff.append("<br />").append(sQtyDiff).append("<br />");
                            }
                            else
                            {
                                sbQtyDiff.append("<br />").append("-").append("<br />");
                            }
                            //Modified by DSM-2018x.1 for PDF Views (Req Id #27722) - Starts
                            if(mpFormulaSubstitutes.containsKey("attribute[pgMinimumActualWeightWet].inputvalue")){
                                strMinWetWeight = (String) mpFormulaSubstitutes.get("attribute[pgMinimumActualWeightWet].inputvalue");
                                if(UIUtil.isNotNullAndNotEmpty(strMinWetWeight)){
                                    integerPlaces = strMinWetWeight.indexOf('.');
                                    decimalPlaces = strMinWetWeight.length() - integerPlaces - 1;
                                    if(decimalPlaces>6)
                                    {
                                        strMinWetWeight = String.valueOf(decimalformatter.format(Double.parseDouble(strMinWetWeight)));
                                    }
//								sbWetMin.append(strMinWetWeight).append("<br />");
                                    //Added by DSM(Sogeti) - for 2018x.2 PDF Views Defect# 29260 - Starts
                                    sbWetMin.append(strMinWetWeight);
                                    //Added by DSM(Sogeti) - for 2018x.2 PDF Views Defect# 29260 - Ends
                                } else {
//								sbWetMin.append(DomainConstants.EMPTY_STRING).append("<br />");
                                    //Added by DSM(Sogeti) - for 2018x.2 PDF Views Defect# 29260 - Starts
                                    sbWetMin.append(DomainConstants.EMPTY_STRING);
                                    //Added by DSM(Sogeti) - for 2018x.2 PDF Views Defect# 29260 - Ends
                                }
                            } else {
                                strMinWetWeight = (String) mpFormulaSubstitutes.get("attribute[pgMinimumActualWeightWet].value");
                                if(UIUtil.isNotNullAndNotEmpty(strMinWetWeight)){
                                    integerPlaces = strMinWetWeight.indexOf('.');
                                    decimalPlaces = strMinWetWeight.length() - integerPlaces - 1;
                                    if(decimalPlaces>6)
                                    {
                                        strMinWetWeight = String.valueOf(decimalformatter.format(Double.parseDouble(strMinWetWeight)));
                                    }
                                    if(strMinWetWeight.equals("0.0")){
                                        strMinWetWeight = EMPTY_STRING;
                                    }
//								sbWetMin.append(strMinWetWeight).append("<br />");
                                    //Added by DSM(Sogeti) - for 2018x.2 PDF Views Defect# 29260 - Starts
                                    sbWetMin.append(strMinWetWeight);
                                    //Added by DSM(Sogeti) - for 2018x.2 PDF Views Defect# 29260 - Starts
                                }else{
//								sbWetMin.append(DomainConstants.EMPTY_STRING).append("<br />");
                                    //Added by DSM(Sogeti) - for 2018x.2 PDF Views Defect# 29260 - Starts
                                    sbWetMin.append(DomainConstants.EMPTY_STRING);
                                    //Added by DSM(Sogeti) - for 2018x.2 PDF Views Defect# 29260 - Ends
                                }
                            }

                            if(mpFormulaSubstitutes.containsKey("attribute[pgMaximumActualWeightWet].inputvalue")){
                                strMaxWetWeight = (String) mpFormulaSubstitutes.get("attribute[pgMaximumActualWeightWet].inputvalue");
                                if(UIUtil.isNotNullAndNotEmpty(strMaxWetWeight)){
                                    integerPlaces = strMaxWetWeight.indexOf('.');
                                    decimalPlaces = strMaxWetWeight.length() - integerPlaces - 1;
                                    if(decimalPlaces>6)
                                    {
                                        strMaxWetWeight = String.valueOf(decimalformatter.format(Double.parseDouble(strMaxWetWeight)));
                                    }
//								sbWetMax.append(strMaxWetWeight).append("<br />");
                                    //Added by DSM(Sogeti) - for 2018x.2 PDF Views Defect# 29260 - Starts
                                    sbWetMax.append(strMaxWetWeight);
                                    //Added by DSM(Sogeti) - for 2018x.2 PDF Views Defect# 29260 - Ends

                                } else {
//								sbWetMax.append(DomainConstants.EMPTY_STRING).append("<br />");
                                    //Added by DSM(Sogeti) - for 2018x.2 PDF Views Defect# 29260 - Starts
                                    sbWetMax.append(DomainConstants.EMPTY_STRING);
                                    //Added by DSM(Sogeti) - for 2018x.2 PDF Views Defect# 29260 - Ends
                                }
                            } else {
                                strMaxWetWeight = (String) mpFormulaSubstitutes.get("attribute[pgMaximumActualWeightWet].value");
                                if(UIUtil.isNotNullAndNotEmpty(strMaxWetWeight)){
                                    integerPlaces = strMaxWetWeight.indexOf('.');
                                    decimalPlaces = strMaxWetWeight.length() - integerPlaces - 1;
                                    if(decimalPlaces>6)
                                    {
                                        strMaxWetWeight = String.valueOf(decimalformatter.format(Double.parseDouble(strMaxWetWeight)));
                                    }
                                    if(strMaxWetWeight.equals("0.0")){
                                        strMaxWetWeight = EMPTY_STRING;
                                    }
//								sbWetMax.append(strMaxWetWeight).append("<br />");
                                    //Added by DSM(Sogeti) - for 2018x.2 PDF Views Defect# 29260 - Starts
                                    sbWetMax.append(strMaxWetWeight);
                                    //Added by DSM(Sogeti) - for 2018x.2 PDF Views Defect# 29260 - Ends
                                }else{
//								sbWetMax.append(DomainConstants.EMPTY_STRING).append("<br />");
                                    //Added by DSM(Sogeti) - for 2018x.2 PDF Views Defect# 29260 - Starts
                                    sbWetMax.append(DomainConstants.EMPTY_STRING);
                                    //Added by DSM(Sogeti) - for 2018x.2 PDF Views Defect# 29260 - Ends
                                }
                            }

                            if(mpFormulaSubstitutes.containsKey("attribute[Target Weight Wet].value")){
                                strTargetWetWeight = (String) mpFormulaSubstitutes.get("attribute[Target Weight Wet].value");
                                if(UIUtil.isNotNullAndNotEmpty(strTargetWetWeight)){
                                    integerPlaces = strTargetWetWeight.indexOf('.');
                                    decimalPlaces = strTargetWetWeight.length() - integerPlaces - 1;
                                    if(decimalPlaces>6)
                                    {
                                        strTargetWetWeight = String.valueOf(decimalformatter.format(Double.parseDouble(strTargetWetWeight)));

                                    }
                                    if(strTargetWetWeight.equals("0.0")){
                                        strTargetWetWeight = EMPTY_STRING;
                                    }
//								sbTargetWet.append(strTargetWetWeight).append("<br />");
                                    //Added by DSM(Sogeti) - for 2018x.2 PDF Views Defect# 29260 - Starts
                                    sbTargetWet.append(strTargetWetWeight);
                                    //Added by DSM(Sogeti) - for 2018x.2 PDF Views Defect# 29260 - Ends


                                }else{
//								sbTargetWet.append(DomainConstants.EMPTY_STRING).append("<br />");
                                    //Added by DSM(Sogeti) - for 2018x.2 PDF Views Defect# 29260 - Starts
                                    sbTargetWet.append(DomainConstants.EMPTY_STRING);
                                    //Added by DSM(Sogeti) - for 2018x.2 PDF Views Defect# 29260 - Ends
                                }
                            } else {
                                strTargetWetWeight = (String) mpFormulaSubstitutes.get("attribute[Target Weight Wet].inputvalue");
                                if(UIUtil.isNotNullAndNotEmpty(strTargetWetWeight)){
                                    integerPlaces = strTargetWetWeight.indexOf('.');
                                    decimalPlaces = strTargetWetWeight.length() - integerPlaces - 1;
                                    if(decimalPlaces>6)
                                    {
                                        strTargetWetWeight = String.valueOf(decimalformatter.format(Double.parseDouble(strTargetWetWeight)));
                                    }
//								sbTargetWet.append(strTargetWetWeight).append("<br />");
                                    //Added by DSM(Sogeti) - for 2018x.2 PDF Views Defect# 29260 - Starts
                                    sbTargetWet.append(strTargetWetWeight);
                                    //Added by DSM(Sogeti) - for 2018x.2 PDF Views Defect# 29260 - Ends
                                } else {
//								sbTargetWet.append(DomainConstants.EMPTY_STRING).append("<br />");
                                    //Added by DSM(Sogeti) - for 2018x.2 PDF Views Defect# 29260 - Starts
                                    sbTargetWet.append(DomainConstants.EMPTY_STRING);
                                    //Added by DSM(Sogeti) - for 2018x.2 PDF Views Defect# 29260 - Ends
                                }
                            }
                            //Modified by DSM-2018x.1 for PDF Views (Req Id #27722) - Ends
                            //Modified for by DSM-2018x.0 for  PDF Views (Defect #21271) - Ends
                            //Commented by DSM-2015x.5.1 for FOP PDF Views (Defect #19874) - Start
                            //Added by DSM-2015x.5.1 for FOP PDF Views (Req #11472) - Starts
						/*if(mpFormulaSubstitutes.containsKey("attribute["+pgV3Constants.ATTRIBUTE_PGMINIMUMACTUALWEIGHTWET+"].inputvalue")){
							strMinWetWeight = (String) mpFormulaSubstitutes.get("attribute["+pgV3Constants.ATTRIBUTE_PGMINIMUMACTUALWEIGHTWET+"].inputvalue");
							if(UIUtil.isNotNullAndNotEmpty(strMinWetWeight)){
								integerPlaces = strMinWetWeight.indexOf('.');
								decimalPlaces = strMinWetWeight.length() - integerPlaces - 1;
								if(decimalPlaces>6)
								strMinWetWeight = String.valueOf(decimalformatter.format(Double.parseDouble(strMinWetWeight)));
								sbMinWetWeight.append("<br />").append(strMinWetWeight).append("<br />");
							}
							else
								sbMinWetWeight.append("<br />").append("0.0").append("<br />");
						} else{
							strMinWetWeight = (String) mpFormulaSubstitutes1.get("attribute["+pgV3Constants.ATTRIBUTE_PGMINIMUMACTUALWEIGHTWET+"].value");
							if(UIUtil.isNotNullAndNotEmpty(strMinWetWeight)){
								integerPlaces = strMinWetWeight.indexOf('.');
								decimalPlaces = strMinWetWeight.length() - integerPlaces - 1;
								if(decimalPlaces>6)
									strMinWetWeight = String.valueOf(decimalformatter.format(Double.parseDouble(strMinWetWeight)));
								sbMinWetWeight.append("<br />").append(strMinWetWeight).append("<br />");
							}else
								sbMinWetWeight.append("<br />").append("0.0").append("<br />");
						}

						if(mpFormulaSubstitutes.containsKey("attribute["+pgV3Constants.ATTRIBUTE_PGMAXIMUMACTUALWEIGHTWET+"].inputvalue")){
							strMaxWetWeight = (String) mpFormulaSubstitutes.get("attribute["+pgV3Constants.ATTRIBUTE_PGMAXIMUMACTUALWEIGHTWET+"].inputvalue");
							if(UIUtil.isNotNullAndNotEmpty(strMaxWetWeight)){
								integerPlaces = strMaxWetWeight.indexOf('.');
								decimalPlaces = strMaxWetWeight.length() - integerPlaces - 1;
								if(decimalPlaces>6)
								{
									strMaxWetWeight = String.valueOf(decimalformatter.format(Double.parseDouble(strMaxWetWeight)));
								}
								sbMaxWetWeight.append("<br />").append(strMaxWetWeight).append("<br />");
							} else {
								sbMaxWetWeight.append("<br />").append("0.0").append("<br />");
							}
						} else {
							strMaxWetWeight = (String) mpFormulaSubstitutes.get("attribute["+pgV3Constants.ATTRIBUTE_PGMAXIMUMACTUALWEIGHTWET+"].value");
							if(UIUtil.isNotNullAndNotEmpty(strMaxWetWeight)){
								integerPlaces = strMaxWetWeight.indexOf('.');
								decimalPlaces = strMaxWetWeight.length() - integerPlaces - 1;
								if(decimalPlaces>6)
								{
									strMaxWetWeight = String.valueOf(decimalformatter.format(Double.parseDouble(strMaxWetWeight)));
								}
								sbMaxWetWeight.append("<br />").append(strMaxWetWeight).append("<br />");
							}else{
								sbMaxWetWeight.append("<br />").append("0.0").append("<br />");
							}
						}

						if(mpFormulaSubstitutes.containsKey("attribute["+pgV3Constants.ATTRIBUTE_TARGETWETWEIGHT+"].inputvalue")){
							strTargetWetWeight = (String) mpFormulaSubstitutes.get("attribute["+pgV3Constants.ATTRIBUTE_TARGETWETWEIGHT+"].inputvalue");
							if(UIUtil.isNotNullAndNotEmpty(strTargetWetWeight)){
								integerPlaces = strTargetWetWeight.indexOf('.');
								decimalPlaces = strTargetWetWeight.length() - integerPlaces - 1;
								if(decimalPlaces>6)
								{
									strTargetWetWeight = String.valueOf(decimalformatter.format(Double.parseDouble(strTargetWetWeight)));
								}
								sbTargetWetWeight.append("<br />").append(strTargetWetWeight).append("<br />");
							} else {
								sbTargetWetWeight.append("<br />").append(DomainConstants.EMPTY_STRING).append("<br />");
							}
						} else {
							strTargetWetWeight = (String) mpFormulaSubstitutes.get("attribute["+pgV3Constants.ATTRIBUTE_TARGETWETWEIGHT+"].value");
							if(UIUtil.isNotNullAndNotEmpty(strTargetWetWeight)){
								integerPlaces = strTargetWetWeight.indexOf('.');
								decimalPlaces = strTargetWetWeight.length() - integerPlaces - 1;
								if(decimalPlaces>6)
								{
									strTargetWetWeight = String.valueOf(decimalformatter.format(Double.parseDouble(strTargetWetWeight)));
								}
								sbTargetWetWeight.append("<br />").append(strTargetWetWeight).append("<br />");
							}else{
								sbTargetWetWeight.append("<br />").append(DomainConstants.EMPTY_STRING).append("<br />");
							}
						}*/
                            //Added by DSM-2015x.5.1 for FOP PDF Views (Req #11472) - Ends
                            //Commented by DSM-2015x.5.1 for FOP PDF Views (Defect #19874) - End

                            strTypeValue = UINavigatorUtil.getAdminI18NString("Type", strType, context.getSession().getLanguage());
                            if(UIUtil.isNotNullAndNotEmpty(strTypeValue))
                            {
                                sbType.append("<br />").append(strTypeValue).append("<br />");
                                //Modified by DSM-2015x.4 for PDF Views (Req Id #15016) - Starts
                                sMaterVal = getMaterialFunction(context,"");
                                //Modified by DSM-2015x.4 for PDF Views (Req Id #15016) - Ends
                            }
                            //Modified by DSM-2015x.4 for PDF Views FOP Type(Defect-15154) - Ends
                            else
                                sbType.append("<br />").append(UINavigatorUtil.getAdminI18NString("Type", sType, context.getSession().getLanguage()));
                            if(UIUtil.isNotNullAndNotEmpty(sMaterVal)){
                                sbMatFunc.append(sMaterVal);
                            }
                            else{
                                sbMatFunc.append("<br />");
                            }

                            EBOMObjPrefName = DomainConstants.EMPTY_STRING;
                            if(FormulationType.FORMULATION_PART.getType(context).equals(sType)){
                                EBOMObjPrefName = (String)mpSubId.get("from["+pgV3Constants.RELATIONSHIP_PLANNEDFOR+"].to["+pgV3Constants.RELATIONSHIP_FORMULATIONPROCESS+"].from["+pgV3Constants.RELATIONSHIP_FORMULATIONPROCESS+"].to["+pgV3Constants.TYPE_COSMETICFORMULATION+"]."+pgV3Constants.SELECT_ATTRIBUTE_TITLE);
                            }
                            else{
                                if(POL_MAN_EQUE.equals((String)mpSubId.get(DomainConstants.SELECT_POLICY))){
                                    EBOMObjPrefName = (String)mpSubId.get("to["+REL_MAN_EQUE+"].from["+pgV3Constants.TYPE_RAWMATERIALPART+"]."+pgV3Constants.SELECT_ATTRIBUTE_TITLE);
                                    if(UIUtil.isNullOrEmpty(EBOMObjPrefName)){
                                        EBOMObjPrefName = (String)mpSubId.get("to["+REL_MAN_EQUE+"].from["+pgV3Constants.TYPE_RAWMATERIALPART+"].attribute["+ATTR_PREF_NAME+"]");
                                    }
                                }
                                else{
                                    EBOMObjPrefName = (String)mpSubId.get(pgV3Constants.SELECT_ATTRIBUTE_TITLE);
                                    //Modified by DSM Sogeti-2018x.1 for PDF Views(Defect Id - 25623) - Starts
                                    EBOMObjPrefName = EBOMObjPrefName.replaceAll("[<]","#LESS_THAN");
                                    EBOMObjPrefName = EBOMObjPrefName.replaceAll("[>]","#GREATER_THAN");
                                    //Modified by DSM Sogeti-2018x.1 for PDF Views(Defect Id - 25623) - Ends

                                    if(UIUtil.isNullOrEmpty(EBOMObjPrefName)){
                                        EBOMObjPrefName = (String)mpSubId.get("attribute["+ATTR_PREF_NAME+"]");
                                        //Modified by DSM Sogeti-2018x.1 for PDF Views(Defect Id - 25623) - Starts
                                        EBOMObjPrefName = EBOMObjPrefName.replaceAll("[<]","#LESS_THAN");
                                        EBOMObjPrefName = EBOMObjPrefName.replaceAll("[>]","#GREATER_THAN");
                                        //Modified by DSM Sogeti-2018x.1 for PDF Views(Defect Id - 25623) - Ends
                                    }
                                }
                            }
                            //Added by DSM(Sogeti) - for 2018x.5 PDF Views Defect# 35574 - Starts
                            strFunction=DomainConstants.EMPTY_STRING;
                            if(mpFormulaSubstitutes.containsKey(pgV3Constants.SELECT_ATTRIBUTE_APPLICATION+".value"))
                            {
                                strFunction = (String)mpFormulaSubstitutes.get(pgV3Constants.SELECT_ATTRIBUTE_APPLICATION+".value");
                            }
                            if(UIUtil.isNotNullAndNotEmpty(strFunction))
                            {
                                HashMap relAttributeArg = new HashMap();
                                relAttributeArg.put("applications", strFunction);
                                strFunction = XSSUtil.encodeForHTML(context,(String)pgPDFViewHelper.executeMainClassMethod(context, "pgDSOCPNProductData","getIdFromPhysicalId", JPO.packArgs(relAttributeArg)));
                            }
                            sChange = (String)mpFormulaSubstitutes.get(pgV3Constants.SELECT_ATTRIBUTE_PGCHANGE);
                            strReportedFunction=(String)mpSubId.get("from[" + pgV3Constants.RELATIONSHIP_PGPDTEMPLATESTOPGPLIREPORTEDFUNCTION + "].to.name");
                            //Added by DSM(Sogeti) - for 2018x.5 PDF Views Defect# 35574 - Ends
                            strExportBuffer.append("<br />").append(EBOMObjPrefName);
                            //Modified by DSM Sogeti-2015x.5 for PDF Views(Defect Id - 15154) - Starts
                            //}
                            //Modified by DSM Sogeti-2015x.5 for PDF Views(Defect Id - 15154) - Ends
                            sbFormulaSubstitute.append("<tr>");
                            sbFormulaSubstitute.append("<td align=\"left\" width=\"48\">"+validateString1(sbName.toString())+"</td>");
                            sbFormulaSubstitute.append("<td align=\"left\" width=\"48\">"+validateString1(sChange)+"</td>");
                            //Modified by DSM(Sogeti)-2015x.5 for PDF Views(Defect Id - 17449) - Starts
                            sbFormulaSubstitute.append("<td align=\"left\" width=\"48\">"+validateString1(strExportBuffer.toString())+"</td>");
                            //Modified by DSM(Sogeti)-2015x.5 for PDF Views(Defect Id - 17449) - Ends
                            //Added by DSM(Sogeti)-2018x.5 for PDF Requirement - Starts
                            if (!("GenDoc".equalsIgnoreCase(pdfViewType)))
                                sbFormulaSubstitute.append("<td align=\"left\" width=\"75\"><B>T:</B>"+validateString1(sbType.toString())+"<BR></BR><B>Ph:</B>"+sbPhase.toString()+"<BR></BR><B>R:</B>"+strRev+"</td>");
                            else
                                sbFormulaSubstitute.append("<td align=\"left\" width=\"75\"><B>T:</B>"+validateString1(sbType.toString())+"<BR></BR><B>Ph:</B>"+sbPhase.toString()+"</td>");
                            //Added by DSM(Sogeti)-2018x.5 for PDF Requirement - Ends

                            //Modified by DSM-2015x.5.1 for FOP PDF Views (Defect #19874) - Starts
                            //sbFormulaSubstitute.append("<td align=\"left\" width=\"75\">"+validateString1(sbMinPercent.toString())+"</td>");
                            //sbFormulaSubstitute.append("<td align=\"left\" width=\"75\">"+validateString1(sbWetPercent.toString())+"</td>");
                            //sbFormulaSubstitute.append("<td align=\"left\" width=\"75\">"+validateString1(sbMaxPercent.toString())+"</td>");
                            //Modified by DSM-2015x.5.1 for FOP PDF Views (Defect #19874) - Ends

                            //Modified by DSM-2018x.1 for PDF Views (Req Id #27722) - Starts
                            sbFormulaSubstitute.append("<td align=\"left\" width=\"126\"><B>MIN: </B>"+validateString1(sbMinPercent.toString())+"<BR></BR><B>WET: </B>"+validateString1(sbWetPercent.toString())+"<BR></BR><B>MAX: </B>"+validateString1(sbMaxPercent.toString())+"</td>");
                            sbFormulaSubstitute.append("<td align=\"left\" width=\"136\"><B>TWW: </B>"+validateString1(sbTargetWet.toString())+"<BR></BR><B>WEM: </B>"+validateString1(sbWetMin.toString())+"<BR></BR><B>WWM: </B>"+validateString1(sbWetMax.toString())+"</td>");
                            //Modified by DSM-2018x.1 for PDF Views (Req Id #27722) - Ends
                            sbFormulaSubstitute.append("<td align=\"left\" width=\"75\"><B>WD:</B>"+validateString1(sbQtyDiff.toString())+"<B>F:</B>"+validateString1(strFunction)+"<br/><B>RF:</B>"+validateString1(strReportedFunction)+"</td>");
                            sbFormulaSubstitute.append("<td align=\"left\" width=\"75\"><B>VSD:</B>"+validateString1(strValidStartDate)+"<BR/><B>VUD:</B>"+validateString1(strValidUntilDate)+"</td>");
                            //Added by DSM(Sogeti)-2018x.2 for PDF Views Requirements - Starts
//						sbFormulaSubstitute.append("<td align=\"left\" width=\"75\">"+validateString1(sbSubPn.toString())+"</td>");
                            if("allinfo".equalsIgnoreCase(pdfViewType) || "GenDoc".equalsIgnoreCase(pdfViewType) || "contractpackaging".equalsIgnoreCase(pdfViewType)) {
                                //Added by DSM(Sogeti) 2018x.5 Requirement - Start
                                sbFormulaSubstitute.append("<td align=\"left\" width=\"75\"><B>C: </B>"+getPLIMaterialCertifications(context, subId)+"<BR></BR><B>P:</B>"+validateString1(sbSubPn.toString())+"<B>Com:</B>"+validateString1(strComments)+"</td>");
                                //Added by DSM(Sogeti) 2018x.5 Requirement - End
                            }else {
                                sbFormulaSubstitute.append("<td align=\"left\" width=\"75\">"+validateString1(sbSubPn.toString())+"</td>");
                            }
                            //Added by DSM(Sogeti)-2018x.2 for PDF Views Requirements - Ends
                            //sbFormulaSubstitute.append("<td align=\"left\" width=\"75\">"+validateString1(sbSubPn.toString())+"</td>");
                           	//Added by DSM(Sogeti) - for 2022x.02 May CW PDF Views Req#46172 - Starts
                            strRelRestriction = (String) mpSubId.get(pgPDFViewConstants.SELECT_ATTRIBUTE_PGRELATIONSHIPRESTRICTION);
                            strRelRestrictionComm = (String) mpSubId.get(pgPDFViewConstants.SELECT_ATTRIBUTE_PGRELATIONSHIPRESTRICTIONCOMMENTS); 
                            if(pgV3Constants.PDFVIEW_ALLINFO.equalsIgnoreCase(pdfViewType))
							{		
								sbFormulaSubstitute.append("<TD width=\"95\" align=\"left\" valign=\"top\"><B>RR:</B>"+strRelRestriction+"<BR></BR><B>RRC:</B>"+strRelRestrictionComm+"</TD>");
							}
                            //Added by DSM(Sogeti) - for 2022x.02 May CW PDF Views Req#46172 - Ends
							//Modified by DSM Sogeti-2015x.5 for PDF Views(Defect Id - 15154) - Starts
                            if(count == 1){
                                int irowspan = SubInPLBOM.size();
                                //Modified by DSM Sogeti-2015x.4 for PDF Views(Defect Id - 14235) - Ends
                                //Modified by DSM(Sogeti) - for 2015x.5 PDF Views Defect# 17019  - Starts
                                //Added by DSM(Sogeti)-2018x.5 for PDF Requirement - Starts
                                //Added/Commented by DSM(Sogeti) - for 2018x.5 PDF Views Defect# 35574 - Starts
//						if (!("GenDoc".equalsIgnoreCase(pdfViewType)))
                                sbFormulaSubstitute.append("<td rowspan='"+irowspan+"' align=\"left\" width=\"143\" >"+sbSubForNameRMNAndRev.toString()+"</td>");
//							sbFormulaSubstitute.append("<td rowspan='"+irowspan+"' align=\"left\" width=\"143\" ><b>N:</b>"+validateString1(sbSubForName.toString())+"<BR></BR><b>RMN:</b>"+validateString1(sbSubForTitle.toString())+"<BR></BR><b>R:</b>"+validateString1(sbSubForRev.toString())+"</td>");
//						else
//							sbFormulaSubstitute.append("<td rowspan='"+irowspan+"' align=\"left\" width=\"143\" ><b>N:</b>"+validateString1(sbSubForName.toString())+"<BR></BR><b>RMN:</b>"+validateString1(sbSubForTitle.toString())+"</td>");
                                //Added by DSM(Sogeti)-2018x.5 for PDF Requirement - Ends
//						sbFormulaSubstitute.append("<td rowspan='"+irowspan+"' align=\"left\" width=\"170\"><b>T:</b>"+validateString1(sbSubForType.toString())+"<BR></BR><b>Ph:</b>"+validateString1(sbPhase.toString())+"<br/><b>S:</b>"+validateString1(sSFSeq)+"<BR></BR><b>I:</b>"+validateString1(sInstructions)+"</td>");
//						sbFormulaSubstitute.append("<td  rowspan='"+irowspan+"' align=\"left\" width=\"170\"><b>Wet%:</b>"+validateString1(sbSubForWetPercent.toString())+"<BR></BR><b>WEM:</b>"+validateString1(sbSubForWetWeightMin.toString())+"<BR></BR><b>WWM:</b>"+validateString1(sbSubForWetWeightMax.toString())+"</td>");
                                sbFormulaSubstitute.append("<td rowspan='"+irowspan+"' align=\"left\" width=\"170\">"+sbSubForTypePhaseSeqInstruction.toString()+"</td>");
                                sbFormulaSubstitute.append("<td  rowspan='"+irowspan+"' align=\"left\" width=\"170\">"+sbSubForWetWEMWWM.toString()+"</td>");
                                //Added/Commented by DSM(Sogeti) - for 2018x.5 PDF Views Defect# 35574 - Ends
                                //Modified by DSM(Sogeti) - for 2015x.5 PDF Views Defect# 17019  - Ends
                                //Modified by DSM Sogeti-2015x.4 for PDF Views(Defect Id - 14235) - Starts
                            }
                            sbFormulaSubstitute.append("</tr>");
                        }
                        //Modified by DSM Sogeti-2015x.5 for PDF Views(Defect Id - 15154) - Ends
                        sbFormulaSubstitute.append("</table>");
                        strValidUntilDate = DomainConstants.EMPTY_STRING;
                        //Modified by DSM Sogeti-2015x.4 for PDF Views(Defect Id - 14235) - Ends
                    }

                    sbFormulaSubstitute.append("<br/>");
                    sbFormulaSubstitute.append("<br/>");
                }
                sbFormulaSubstitute.append("</table><tr><td><br /></td></tr></td></tr>");
            }
            //Modify Code Refactoring
            mlFinalSub.clear();
        } catch(Exception exception){
            throw exception;
        }
        //Added by DSM-2018x.1.1 for PDF Views (Req Id #27399 ) : Start
        finally{
            if(isPushContext){
                ContextUtil.popContext(context);
                isPushContext = false;
            }
        }
        //Added by DSM-2018x.1.1 for PDF Views (Req Id #27399 ) : Ends
        long endTime = new Date().getTime();
        System.out.println("Total Time has taken by the getFormulaSubstitutes Method is-->"+(endTime-startTime));
        return sbFormulaSubstitute;
    }
    //Modified by DSM-2015x.4 for PDF Views FOP Type(Req-11472) - Ends
    //Added by DSM-2015x.2 for PDF Views FOP Type(Defect-9761) - Ends
    //Modified by DSM-2015x.2 for PDF Views FOP Type(Defect-11047) - Starts
    private String getPhaseWithLowestSeqNo(Context context, String parentSubId) throws FrameworkException {

        String phaseWithLowestSeqNo = "";
        //Added by DSM-2015x.5.1 Jan Bug fix for PDF Views(Defect Id-23980) - Starts
        String strSequence = "";
        String sequenceNumber = "";
        //Added by DSM-2015x.5.1 Jan Bug fix for PDF Views(Defect Id-23980) - Ends
        String strCommand1  		= "print bus $1 select $2 $3 $4";

        String phaseList = MqlUtil.mqlCommand(context, strCommand1, parentSubId,
                "to.attribute[".concat(FormulationAttribute.PRIMARY_REPLACEMENT_INGREDIENT.getAttribute(context)).concat("].value"),
                "to.fromrel.from.name",
                //DSM (DS) 2018x.0 FD02 post upgrade fix - change PLBOM to FBOM - starts
                "to.fromrel.from.to["+pgV3Constants.RELATIONSHIP_PLBOM +"].attribute[Find Number].value");
        //DSM (DS) 2018x.0 FD02 post upgrade fix - change PLBOM to FBOM - ends

        StringList slPhasePRIList = FrameworkUtil.split(phaseList, "\n");
        int size = slPhasePRIList.size() - 1;
        int iNoOfIterations = size / 3; // Here 3 is number of selectables in strCommand1
        int iCounter = 1;

        int lowestSeqNo = 0;

        while (iCounter <= iNoOfIterations) {
            StringList slPRIList = FrameworkUtil.split((String) slPhasePRIList.get(iCounter), "=");
            StringList slPhaseList = FrameworkUtil.split((String) slPhasePRIList.get(iCounter + iNoOfIterations), "=");
            StringList slSeqNoList = FrameworkUtil.split((String) slPhasePRIList.get(iCounter + 2 * iNoOfIterations), "=");

            String isPrimaryIngredient = ((String) slPRIList.get(1)).trim();
            if (UIUtil.isNotNullAndNotEmpty(isPrimaryIngredient) && "TRUE".equals(isPrimaryIngredient)) {
                if (lowestSeqNo == 0) {
                    phaseWithLowestSeqNo = ((String) slPhaseList.get(1)).trim();
                    //Added by DSM-2015x.5.1 Jan Bug fix for PDF Views(Defect Id-23980) - Starts
                    strSequence = ((String) slSeqNoList.get(1)).trim();
                    if(UIUtil.isNullOrEmpty(strSequence) || strSequence.equalsIgnoreCase("NaN"))
                    {
                        strSequence = "0";
                    }
                    //Added by DSM-2015x.5.1 Jan Bug fix for PDF Views(Defect Id-23980) - Ends
                    lowestSeqNo = Integer.parseInt(strSequence);
                } else {
                    sequenceNumber = ((String) slSeqNoList.get(1)).trim();
                    //Added by DSM-2015x.5.1 Jan Bug fix for PDF Views(Defect Id-23980) - Starts
                    if(UIUtil.isNullOrEmpty(sequenceNumber) || sequenceNumber.equalsIgnoreCase("NaN")){
                        sequenceNumber = "0";
                    }
                    //Added by DSM-2015x.5.1 Jan Bug fix for PDF Views(Defect Id-23980) - Ends
                    if (lowestSeqNo > Integer.parseInt(sequenceNumber)) {
                        phaseWithLowestSeqNo = ((String) slPhaseList.get(1)).trim();
                        lowestSeqNo = Integer.parseInt(sequenceNumber);
                    }
                }
            }
            iCounter++;
        }

        return phaseWithLowestSeqNo;
    }
    //Modified by DSM-2015x.2 for PDF Views FOP Type(Defect-11047) - Ends
    //Modified by DSM-2015x.4 for PDF Views (Req Id #15016) - Starts
    public String getMaterialFunction(Context context, String strRelId) throws Exception {
        String sApplication 		= DomainConstants.EMPTY_STRING;
        String sMatFun 				= DomainConstants.EMPTY_STRING;
        StringList sAppList   		= null;
        StringList sAppMatIds 		= null;
        String[] sValueArray  		= null;
        MapList mApplications   	= null;
        Map objMap   				= null;
        Map mData   				= null;
        StringBuilder strBuilder	= null;
        StringList selectList 		= new StringList(1);
        selectList.add(DomainConstants.SELECT_NAME);
        try{

            //Modified by DSM-2015x.5 for PDF Views Defect 16041- Starts
            ContextUtil.pushContext(context, pgV3Constants.PERSON_USER_AGENT , "", "");
            //Modified by DSM-2015x.5 for PDF Views Defect 16041- End
            if(UIUtil.isNotNullAndNotEmpty(strRelId)){

                DomainRelationship domainRelationship = DomainRelationship.newInstance(context, strRelId);
                sApplication = domainRelationship.getAttributeValue(context,pgV3Constants.ATTRIBUTE_APPLICATION);
                //Modified by DSM-2015x.4.1 Feb downtime for PDF Views (Defect Id #15263) - Starts
                //if(null != sApplication){
                if(UIUtil.isNotNullAndNotEmpty(sApplication)){
                    //Modified by DSM-2015x.4.1 Feb downtime for PDF Views (Defect Id #15263) - Ends
                    sAppList 	= new StringList(FrameworkUtil.split(sApplication, ","));
                    sAppMatIds 	= new StringList();
                    Iterator iAppItr = sAppList.iterator();
                    while (iAppItr.hasNext()) {
                        sAppMatIds.add(((String)iAppItr.next()).trim());
                    }
                    sValueArray =  (String[])sAppMatIds.toArray(new String []{});
                    mApplications = DomainObject.getInfo(context, sValueArray, selectList);
                    strBuilder = new StringBuilder();
                    Iterator it = mApplications.iterator();
                    while(it.hasNext()){
                        objMap = (Map) it.next();
                        strBuilder.append(objMap.get(DomainConstants.SELECT_NAME));
                        if(it.hasNext())
                            strBuilder.append(",");
                    }
                    sMatFun = strBuilder.toString();
                }
            }
        }
        catch(Exception exception){
            throw exception;
        } finally {
            ContextUtil.popContext(context);
        }
        return sMatFun;
    }
    //Modified by DSM-2015x.4 for PDF View as per Review Comments - Ends
    //Modified by DSM-2015x.4 for PDF Views (Req Id #15016) - Ends
    //Added by DSM-2015x.4 for PDF Views(Req Id-13691 ) - Starts
    private StringBuilder getCUPArtwork(Context context, String strObjId) throws Exception{
        long startTime = new Date().getTime();
        StringBuilder sbCUPArtwork = new StringBuilder();
        Map mapObjectNew = null;
        String strId = null;
        String strName = null;
        String strType = null;
        String strTitle = null;
        String strRev = null;
        String strValue = null;
        DomainObject doObj = null;
        Map mapObject = null;
        Map mapObjDetails = null;
        StringList objectSelects = new StringList(5);
        objectSelects.add(DomainConstants.SELECT_ID);
        objectSelects.add(DomainConstants.SELECT_TYPE);
        objectSelects.add(DomainConstants.SELECT_NAME);
        objectSelects.add(DomainConstants.SELECT_REVISION);
        objectSelects.add(pgV3Constants.SELECT_ATTRIBUTE_TITLE);
        try{

            Map mpArgs = new HashMap();
            mpArgs.put("objectId", strObjId);
            String[] strArgsDSO= JPO.packArgs(mpArgs);
//					pgIPMTablesJPO_mxJPO objCUP = new pgIPMTablesJPO_mxJPO(context, strArgsDSO);
//					MapList mlgetDSOCUPArtwork = objCUP.getCUPArtworkObjects(context,strArgsDSO);
//Added for PDF Refactor
            MapList mlgetDSOCUPArtwork = (MapList)pgPDFViewHelper.executeMainClassMethod(context, "pgIPMTablesJPO", "getCUPArtworkObjects", strArgsDSO);
            if(mlgetDSOCUPArtwork != null && mlgetDSOCUPArtwork.size()>0 ){
                sbCUPArtwork.append("<tr><td><table class=\"pdf\" cellspacing=\"0\" width=\"1000px\" id=\"pgFinishedProductTable\">");
                sbCUPArtwork.append("<thead>");
                sbCUPArtwork.append("<tr><td colspan='4' class=\"new\" ><font size='4'><b>CUP Artwork</b></font></td></tr>");
                sbCUPArtwork.append("<tr>");
                sbCUPArtwork.append("<td width=\"75\" align=\"center\"><b>Type</b></td>");
                sbCUPArtwork.append("<td width=\"75\" align=\"center\"><b>Name</b></td>");
                sbCUPArtwork.append("<td width=\"75\" align=\"center\"><b>Revision</b></td>");
                sbCUPArtwork.append("<td width=\"75\" align=\"center\"><b>Title</b></td>");
                sbCUPArtwork.append("</tr>");
                sbCUPArtwork.append("</thead>");
                for (int i = 0;i< mlgetDSOCUPArtwork.size(); i++){
                    mapObjectNew = new HashMap();
                    mapObjectNew = (Map) mlgetDSOCUPArtwork.get(i);
                    strId = (String)mapObjectNew.get(DomainConstants.SELECT_ID);
                    if(UIUtil.isNotNullAndNotEmpty(strId)){
                        doObj = DomainObject.newInstance(context,strId);
                        mapObjDetails = new HashMap();
                        mapObjDetails = (Map) doObj.getInfo(context, objectSelects);
                        strType = (String) mapObjDetails.get(DomainConstants.SELECT_TYPE);
                        strName = (String) mapObjDetails.get(DomainConstants.SELECT_NAME);
                        strRev = (String) mapObjDetails.get(DomainConstants.SELECT_REVISION);
                        strTitle = (String) mapObjDetails.get(pgV3Constants.SELECT_ATTRIBUTE_TITLE);
                        strValue = UINavigatorUtil.getAdminI18NString("Type", strType, context.getSession().getLanguage());
                        sbCUPArtwork.append("<tr>");
                        sbCUPArtwork.append("<td align=\"center\" width=\"75\">"+validateString1(strValue)+"</td>");
                        sbCUPArtwork.append("<td align=\"center\" width=\"75\">"+validateString1(strName)+"</td>");
                        sbCUPArtwork.append("<td align=\"center\" width=\"75\">"+validateString1(strRev)+"</td>");
                        sbCUPArtwork.append("<td align=\"center\" width=\"75\">"+validateString1(strTitle)+"</td>");
                        sbCUPArtwork.append("</tr>");
                    }
                }
                sbCUPArtwork.append("</table><tr><td><br /></td></tr></td></tr>");
            }
            //Modify Code Refactoring
            mlgetDSOCUPArtwork.clear();

        }catch(Exception exception){
            throw exception;
        }
        long endTime = new Date().getTime();
        System.out.println("Total Time has taken by the  getCUPArtwork Method is-->"+(endTime-startTime));
        return sbCUPArtwork;
    }
    //Added by DSM-2015x.4 for PDF Views(Req Id-11470,7554,7556 ) - Starts
    /**
     * @Desc Show Weight Characteristic Table -PDF views
     * @param Context- Context user
     * @param String - Object ID
     * @param pdfViewType
     * @return StringBuilder- Weight Characteristic Table
     * @throws Exception
     */
    private StringBuilder getWeightCharacteristics(Context context, String strObjId,String pdfViewType) throws Exception{
        long startTime = new Date().getTime();
        StringBuilder sbWeightChar = new StringBuilder();
        Map mapObjectNew = new HashMap();
        String strName = null;
        String strType = null;
        String strGrossWeight = null;
        String strWeightUOM = null;
        String strComments = null;
        // Modified by DSM-2018x.3 for PDF Views (Defect Id #32058 ) : Starts
        String strLegacyProductWeight = DomainConstants.EMPTY_STRING;
        String strLegacyWeightFactor = DomainConstants.EMPTY_STRING;
        String strLegacyWeightFactorUoM = DomainConstants.EMPTY_STRING;
        String strNetWeightConsumerUnit = DomainConstants.EMPTY_STRING;
        String strNetWeightUoM = DomainConstants.EMPTY_STRING;
        // Modified by DSM-2018x.3 for PDF Views (Defect Id #32058 ) : Ends
        // Added by DSM-2018x.5 for PDF Views (Req Id #34259,#34451 ) : Starts
        String strNetWeight = DomainConstants.EMPTY_STRING;
        // Added by DSM-2018x.5 for PDF Views (Req Id #34259,#34451 ) : Ends
        // Added by DSM-2018x.5 for PDF Views (Req Id #34260 ) : Starts
        String strRollUpNetWeighttoCOP = DomainConstants.EMPTY_STRING;
        // Added by DSM-2018x.5 for PDF Views (Req Id #34260 ) : Ends
        DomainObject doObj = null;
        StringList objectSelects = new StringList(11);
        objectSelects.add(DomainConstants.SELECT_TYPE);
        objectSelects.add(DomainConstants.SELECT_NAME);
        objectSelects.add("attribute["+pgV3Constants.ATTRIBUTE_PGGROSSWEIGHTREAL+"]");
        objectSelects.add("attribute["+pgV3Constants.ATTRIBUTE_PGGROSSWEIGHTUNITOFMEASURE+"]");
        objectSelects.add("attribute["+pgV3Constants.ATTRIBUTE_COMMENT+"]");
        // Added by DSM-2018x.5 for PDF Views (Req Id #34259,#34451 ) : Starts
        objectSelects.add(pgV3Constants.SELECT_ATTRIBUTE_PGNETWEIGHT);
        // Added by DSM-2018x.5 for PDF Views (Req Id #34259,#34451 ) : Ends
        // Added by DSM-2018x.5 for PDF Views (Req Id #34260 ) : Starts
        objectSelects.add(pgPDFViewConstants.SELECT_ATTRIBUTE_PGROLLUPNETWEIGHTTOCOP);
        // Added by DSM-2018x.5 for PDF Views (Req Id #34260 ) : Ends
        try{
            if(UIUtil.isNotNullAndNotEmpty(strObjId)){
                doObj = DomainObject.newInstance(context,strObjId);
                //Modified by DSM-2018x.3 for PDF Views (Defect Id #32058 ) : Starts
                strType=doObj.getType(context);
                if(strType.equals(pgV3Constants.TYPE_PACKAGINGASSEMBLYPART) && "allinfo".equalsIgnoreCase(pdfViewType)){
                    objectSelects.add(pgPDFViewConstants.SELECT_ATTRIBUTE_PGLEGACYPRODUCTWEIGHT);
                    objectSelects.add(pgPDFViewConstants.SELECT_ATTRIBUTE_PGLEGACYWEIGHTFACTOR);
                    objectSelects.add(pgPDFViewConstants.SELECT_ATTRIBUTE_PGLEGACYWEIGHTFACTORUOM);
                    objectSelects.add(pgV3Constants.SELECT_ATTRIBUTE_PGNETWEIGHTOFPRODUCTINCONSUMERUNITREAL);
                    objectSelects.add(pgV3Constants.SELECT_ATTRIBUTE_PGNETWEIGHTOFPRODUCTINCONSUMERUNITUOM);
                }
                //Modified by DSM-2018x.3 for PDF Views (Defect Id #32058 ) : Ends
                mapObjectNew = doObj.getInfo(context,objectSelects);
                sbWeightChar.append("<tr><td><table class=\"WordWrappdf\" cellspacing=\"0\" width=\"1000px\" id=\"pgFinishedProductTable\">");
                sbWeightChar.append("<thead>");
                //Modified by DSM-2018x.3 for PDF Views (Defect Id #32058 ) : Starts
                if(strType.equals(pgV3Constants.TYPE_PACKAGINGASSEMBLYPART) && "allinfo".equalsIgnoreCase(pdfViewType)){
                    sbWeightChar.append("<tr><td colspan='10' class=\"new\" ><font size='4'><b>Weight Characteristic</b></font></td></tr>");
                }else {
                    // Modified by DSM-2018x.5 for PDF Views (Req Id #34260 ) : Starts
                    sbWeightChar.append("<tr><td colspan='7' class=\"new\" ><font size='4'><b>Weight Characteristic</b></font></td></tr>");
                    // Modified by DSM-2018x.5 for PDF Views (Req Id #34260 ) : Ends
                }
                //Modified by DSM-2018x.3 for PDF Views (Defect Id #32058 ) : Ends
                sbWeightChar.append("<tr>");
                sbWeightChar.append("<th width=\"150\" align=\"center\"><b>Name</b></th>");
                sbWeightChar.append("<th width=\"150\" align=\"center\"><b>Type</b></th>");
                sbWeightChar.append("<th width=\"150\" align=\"center\"><b>Gross Weight</b></th>");
                // Added by DSM-2018x.3 for PDF Views (Defect Id #32058 ) : Starts

                if(strType.equals(pgV3Constants.TYPE_PACKAGINGASSEMBLYPART) && "allinfo".equalsIgnoreCase(pdfViewType)){
                    sbWeightChar.append("<th width=\"150\" align=\"center\"><b>Legacy Product Weight</b></th>");
                    sbWeightChar.append("<th width=\"150\" align=\"center\"><b>Legacy Weight Factor</b></th>");
                    sbWeightChar.append("<th width=\"150\" align=\"center\"><b>Legacy Weight Factor UoM</b></th>");
                }
                // Added by DSM-2018x.3 for PDF Views (Defect Id #32058 ) : Ends
                sbWeightChar.append("<th width=\"150\" align=\"center\"><b>Weight UoM</b></th>");
// Added by DSM-2018x.5 for PDF Views (Req Id #34259,#34451 ) : Starts
                if((pgV3Constants.TYPE_ASSEMBLEDPRODUCTPART).equalsIgnoreCase(strType)||(pgV3Constants.TYPE_DEVICEPRODUCTPART).equalsIgnoreCase(strType)){
                    sbWeightChar.append("<th width=\"150\" align=\"center\"><b>Net Weight</b></th>");
                    // Added by DSM-2018x.5 for PDF Views (Req Id #34260 ) : Starts
                    sbWeightChar.append("<th width=\"150\" align=\"center\"><b>Roll-up Net Weight to COP</b></th>");
                    // Added by DSM-2018x.5 for PDF Views (Req Id #34260 ) : Ends
                }
                // Added by DSM-2018x.5 for PDF Views (Req Id #34259,#34451 ) : Ends
                // Modified by DSM-2018x.3 for PDF Views (Defect Id #32058 ) : Starts
                if(strType.equals(pgV3Constants.TYPE_PACKAGINGASSEMBLYPART) && "allinfo".equalsIgnoreCase(pdfViewType)){
                    sbWeightChar.append("<th width=\"150\" align=\"center\"><b>Net Weight of Product in Consumer Unit</b></th>");
                    sbWeightChar.append("<th width=\"150\" align=\"center\"><b>Net Weight UoM</b></th>");
                }
                // Added by DSM-2018x.3 for PDF Views (Defect Id #32058 ) : Ends
                sbWeightChar.append("<th width=\"400\" align=\"center\"><b>Comments</b></th>");
                sbWeightChar.append("</tr>");
                sbWeightChar.append("</thead>");
                strName = (String) mapObjectNew.get(DomainConstants.SELECT_NAME);
                // Commentd by DSM-2018x.3 for PDF Views (Defect Id #32058 ) : Starts
                //strType = (String) mapObjectNew.get(DomainConstants.SELECT_TYPE);
                // Commentd by DSM-2018x.3 for PDF Views (Defect Id #32058 ) : Ends
                //Added by DSM-2015x.4 for PDF Views(Req Id-11473) - Starts
                String strUIType=UINavigatorUtil.getAdminI18NString("Type", strType, context.getSession().getLanguage());
                //Added by DSM-2015x.4 for PDF Views(Req Id-11473) - Ends
                strGrossWeight = (String) mapObjectNew.get("attribute["+pgV3Constants.ATTRIBUTE_PGGROSSWEIGHTREAL+"]");
                strWeightUOM = (String) mapObjectNew.get("attribute["+pgV3Constants.ATTRIBUTE_PGGROSSWEIGHTUNITOFMEASURE+"]");
                strComments = (String) mapObjectNew.get("attribute["+pgV3Constants.ATTRIBUTE_COMMENT+"]");
// Added by DSM-2018x.5 for PDF Views (Req Id #34259,#34451 ) : Starts
                strNetWeight = (String) mapObjectNew.get(pgV3Constants.SELECT_ATTRIBUTE_PGNETWEIGHT);
                // Added by DSM-2018x.5 for PDF Views (Req Id #34259,#34451 ) : Ends
                // Added by DSM-2018x.5 for PDF Views (Req Id #34260 ) : Starts
                strRollUpNetWeighttoCOP = (String) mapObjectNew.get(pgPDFViewConstants.SELECT_ATTRIBUTE_PGROLLUPNETWEIGHTTOCOP);
                strRollUpNetWeighttoCOP = setYesNo(strRollUpNetWeighttoCOP);
                // Added by DSM-2018x.5 for PDF Views (Req Id #34260 ) : Ends
                //Added by DSM-2015x.5.1 for PDF Views(Defect Id-19203) - Starts
                // Added by DSM-2018x.3 for PDF Views (Defect Id #32058 ) : Starts
                if(strType.equals(pgV3Constants.TYPE_PACKAGINGASSEMBLYPART) && "allinfo".equalsIgnoreCase(pdfViewType)){
                    strLegacyProductWeight = (String) mapObjectNew.get(pgPDFViewConstants.SELECT_ATTRIBUTE_PGLEGACYPRODUCTWEIGHT);
                    strLegacyWeightFactor = (String) mapObjectNew.get(pgPDFViewConstants.SELECT_ATTRIBUTE_PGLEGACYWEIGHTFACTOR);
                    strLegacyWeightFactorUoM = (String) mapObjectNew.get(pgPDFViewConstants.SELECT_ATTRIBUTE_PGLEGACYWEIGHTFACTORUOM);
                    strNetWeightConsumerUnit = (String) mapObjectNew.get(pgV3Constants.SELECT_ATTRIBUTE_PGNETWEIGHTOFPRODUCTINCONSUMERUNITREAL);
                    strNetWeightUoM = (String) mapObjectNew.get(pgV3Constants.SELECT_ATTRIBUTE_PGNETWEIGHTOFPRODUCTINCONSUMERUNITUOM);
                }
                // Added by DSM-2018x.3 for PDF Views (Defect Id #32058 ) : Ends
                strComments =strComments.replaceAll("[<]","#LESS_THAN");
                strComments = strComments.replaceAll("[>]","#GREATER_THAN");
                //Added by DSM-2015x.5.1 for PDF Views(Defect Id-19203) - Ends
                sbWeightChar.append("<tr>");
                sbWeightChar.append("<td align=\"center\" width=\"150\">"+validateString1(strName)+"</td>");
                //Modified by DSM-2015x.4 for PDF Views(Req Id-11473) - Starts
                sbWeightChar.append("<td align=\"center\" width=\"150\">"+validateString1(strUIType)+"</td>");
                //Modified by DSM-2015x.4 for PDF Views(Req Id-11473) - Ends
                sbWeightChar.append("<td align=\"center\" width=\"150\">"+validateString1(strGrossWeight)+"</td>");
                // Added by DSM-2018x.3 for PDF Views (Defect Id #32058 ) : Starts
                if(strType.equals(pgV3Constants.TYPE_PACKAGINGASSEMBLYPART) && "allinfo".equalsIgnoreCase(pdfViewType)){
                    sbWeightChar.append("<td align=\"center\" width=\"150\">"+validateString1(strLegacyProductWeight)+"</td>");
                    sbWeightChar.append("<td align=\"center\" width=\"150\">"+validateString1(strLegacyWeightFactor)+"</td>");
                    sbWeightChar.append("<td align=\"center\" width=\"150\">"+validateString1(strLegacyWeightFactorUoM)+"</td>");
                }
                // Added by DSM-2018x.3 for PDF Views (Defect Id #32058 ) : Ends
                sbWeightChar.append("<td align=\"center\" width=\"150\">"+validateString1(strWeightUOM)+"</td>");
// Added by DSM-2018x.5 for PDF Views (Req Id #34259,#34451 ) : Starts
                if((pgV3Constants.TYPE_ASSEMBLEDPRODUCTPART).equalsIgnoreCase(strType)||(pgV3Constants.TYPE_DEVICEPRODUCTPART).equalsIgnoreCase(strType)){
                    sbWeightChar.append("<td align=\"center\" width=\"150\">"+validateString1(strNetWeight)+"</td>");
                    // Added by DSM-2018x.5 for PDF Views (Req Id #34260 ) : Starts
                    sbWeightChar.append("<td align=\"center\" width=\"150\">"+validateString1(strRollUpNetWeighttoCOP)+"</td>");
                    // Added by DSM-2018x.5 for PDF Views (Req Id #34260 ) : Ends
                }
                // Added by DSM-2018x.5 for PDF Views (Req Id #34259,#34451 ) : Ends
                // Added by DSM-2018x.3 for PDF Views (Defect Id #32058 ) : Starts
                if(strType.equals(pgV3Constants.TYPE_PACKAGINGASSEMBLYPART) && "allinfo".equalsIgnoreCase(pdfViewType)){
                    sbWeightChar.append("<td align=\"center\" width=\"150\">"+validateString1(strNetWeightConsumerUnit)+"</td>");
                    sbWeightChar.append("<td align=\"center\" width=\"150\">"+validateString1(strNetWeightUoM)+"</td>");
                }
                // Added by DSM-2018x.3 for PDF Views (Defect Id #32058 ) : Ends
                sbWeightChar.append("<td align=\"center\" width=\"400\">"+validateString1(strComments)+"</td>");
                sbWeightChar.append("</tr>");
            }
            //Modified by DSM(Sogeti)-2018x.1 for Defect 23100 PDF Views  - Starts
            //Modified by DSM-2018x.0 for PDF Views(Defect #21697) - Starts
            //sbWeightChar.append("</table></td></tr>");
            sbWeightChar.append("</table><tr><td><br /></td></tr></td></tr>");
            //Modified by DSM-2018x.0 for PDF Views(Defect #21697) - Ends
            //Modified by DSM(Sogeti)-2018x.1 for Defect 23100 PDF Views  - Starts
        }catch(Exception exception){
            throw exception;
        }
        long endTime = new Date().getTime();
        System.out.println("Total Time has taken by the  getWeightCharacteristics Method is-->"+(endTime-startTime));
        return sbWeightChar;
    }
    //Added by DSM-2015x.4 for PDF Views(Req Id-11470,7554,7556 ) - Ends
    //Added by DSM-2015x.4 for PDF Views(Req Id-15310,15311,15312) - Starts
    //Added by DSM-2015x.4 for PDF Views(Defect Id:14083) - Starts
    //Added by DSM-2018x.6 July CW for PDF Views Req #39806,39807 : Start
    /**
     *
     * @param context
     * @param strObjId
     * @return
     * @throws Exception
     */
    private StringBuilder getProductQualificationRecord(Context context, String strObjId) throws Exception{
        long startTime = new Date().getTime();
        StringBuilder sbProductQualificationRecord = new StringBuilder();
        Map mCEData = new HashMap();
        String strName = null;
        String strIDRMPMEPSEP = null;
        String strRevision = null;
        String strCurrent = null;
        String strIDQul = null;
        String strState = null;
        String strTitle = null;
        String strManu = null;
        String strPolicy = null;
        String strPCPlatform = null;
        String strComment = null;
        String Splants = null;
        String strAreaPQR = null;
        StringList slManu = null;
        StringList slIDQul = null;
        StringList slBusArea = null;
        StringList slPCPlatform = null;
        StringList SlplantsLists = null;
        //Added by DSM-2022x.05 for PDF Views (Req Id #49391) - Start
        String strHouseNumber = null;
        String strAddress = null;
        String strCity = null;
        String strRegion = null;
        String strCountry = null;
        String strPostalCode = null;
        String sManuHouseNumber = "to["+pgV3Constants.RELATIONSHIP_MANUFACTURINGRESPONSIBILITY+"].from.attribute[pgHouseNumber]";
        String sManuAddress = "to["+pgV3Constants.RELATIONSHIP_MANUFACTURINGRESPONSIBILITY+"].from.attribute[Address]";
        String sManuCity = "to["+pgV3Constants.RELATIONSHIP_MANUFACTURINGRESPONSIBILITY+"].from.attribute[City]";
        String sManuState = "to["+pgV3Constants.RELATIONSHIP_MANUFACTURINGRESPONSIBILITY+"].from.attribute[State/Region]";
        String sManuCountry = "to["+pgV3Constants.RELATIONSHIP_MANUFACTURINGRESPONSIBILITY+"].from.attribute[Country]";
        String sManuPostalCode = "to["+pgV3Constants.RELATIONSHIP_MANUFACTURINGRESPONSIBILITY+"].from.attribute[Postal Code]";
        String sVendorHouseNumber = "to["+pgV3Constants.RELATIONSHIP_SUPPLYRESPONSIBILITY+"].from.attribute[pgHouseNumber]";
        String sVendorAddress = "to["+pgV3Constants.RELATIONSHIP_SUPPLYRESPONSIBILITY+"].from.attribute[Address]";
        String sVendorCity = "to["+pgV3Constants.RELATIONSHIP_SUPPLYRESPONSIBILITY+"].from.attribute[City]";
        String sVendorState = "to["+pgV3Constants.RELATIONSHIP_SUPPLYRESPONSIBILITY+"].from.attribute[State/Region]";
        String sVendorCountry = "to["+pgV3Constants.RELATIONSHIP_SUPPLYRESPONSIBILITY+"].from.attribute[Country]";
        String sVendorPostalCode = "to["+pgV3Constants.RELATIONSHIP_SUPPLYRESPONSIBILITY+"].from.attribute[Postal Code]";
        //Added by DSM-2022x.05 for PDF Views (Req Id #49391) - End
        //Added by DSM-2015x.4 for PDF Views(Defect Id-14094) - Starts
        String sManuName = "to["+pgV3Constants.RELATIONSHIP_MANUFACTURINGRESPONSIBILITY+"].from.name";
        String sVendorName = "to["+pgV3Constants.RELATIONSHIP_SUPPLYRESPONSIBILITY+"].from.name";
        String strSEPMEPPolicy = null;
        //Added by DSM(Sogeti)-2018x.2 for PDF Views Requirements - Starts
        String sMaterialCertification = "from["+pgV3Constants.RELATIONSHIP_PG_PLI_MATERIAL_CERTIFICATIONS+"].to.name";
        String strMaterialCertification= null;
        String s1MaterialCertification = null;
        StringList slList = new StringList();
        //Added by DSM(Sogeti)-2018x.2 for PDF Views Requirements - Ends
        //Modified by DSM(Sogeti)-2018x.2 for PDF Views Requirements - Ends
        //Modified by DSM-2022x.05 for PDF Views (Req Id #49391) - Start
        StringList objectSelects = new StringList(20);
        //Modified by DSM-2022x.05 for PDF Views (Req Id #49391) - End
        objectSelects.add(DomainConstants.SELECT_NAME);
        objectSelects.add(DomainConstants.SELECT_ID);
        objectSelects.add(DomainConstants.SELECT_CURRENT);
        objectSelects.add(sVendorName);
        objectSelects.add(sManuName);
        //Added by DSM-2022x.05 for PDF Views (Req Id #49391) - Start
        objectSelects.add(sVendorHouseNumber);
        objectSelects.add(sVendorAddress);
        objectSelects.add(sVendorCity);
        objectSelects.add(sVendorState);
        objectSelects.add(sVendorCountry);
        objectSelects.add(sVendorPostalCode);
        objectSelects.add(sManuHouseNumber);
        objectSelects.add(sManuAddress);
        objectSelects.add(sManuCity);
        objectSelects.add(sManuState);
        objectSelects.add(sManuCountry);
        objectSelects.add(sManuPostalCode);
        //Added by DSM-2022x.05 for PDF Views (Req Id #49391) - End
        //Modified by DSM-2015x.4 for PDF Views(Defect Id-14094) - Ends
        objectSelects.add(pgV3Constants.SELECT_ATTRIBUTE_TITLE);
        //Added by DSM-2015x.4 for PDF Views(Defect Id- 14105,14106) - Starts
        objectSelects.add(DomainConstants.SELECT_REVISION);
        objectSelects.add(DomainConstants.SELECT_POLICY);
        //Added by DSM(Sogeti)-2018x.2 for PDF Views Requirements - Starts
        objectSelects.add(sMaterialCertification);
        //Added by DSM(Sogeti)-2018x.2 for PDF Views Requirements - Ends
        //Added by DSM-2015x.4 for PDF Views(Defect Id- 14105,14106) - Ends

        StringList slPQR1objectSelects = new StringList(2);
        StringBuilder sbAllowedMEPSEP = new StringBuilder();
        slPQR1objectSelects.add(DomainConstants.SELECT_NAME);
        slPQR1objectSelects.add(DomainConstants.SELECT_TYPE);
        //DS - 2018x.0 - ALM 24141 - modified to check if the PCP type is of pgPLIPlatform - START
        slPQR1objectSelects.add(DomainConstants.SELECT_ID);
        //DS - 2018x.0 - ALM 24141 - modified to check if the PCP type is of pgPLIPlatform - END

        StringList slPQRObjectSelect = new StringList(5);
        slPQRObjectSelect.add(DomainConstants.SELECT_NAME);
        slPQRObjectSelect.add(DomainConstants.SELECT_CURRENT);
        //Added by DSM Sogeti - 2018x.1.1 (Defect Id-26505) - Starts.
        slPQRObjectSelect.add(DomainConstants.SELECT_REVISION);
        //Added by DSM Sogeti - 2018x.1.1 (Defect Id-26505) - Ends.
        slPQRObjectSelect.add(pgV3Constants.SELECT_ATTRIBUTE_PGLOCATIONSTATUS);
        slPQRObjectSelect.add(pgV3Constants.SELECT_ATTRIBUTE_QUALIFICATIONDESCRIPTION);
        slPQRObjectSelect.add(pgV3Constants.SELECT_ATTRIBUTE_COMMENT);

        String sRelNameQualId = "tomid["+pgV3Constants.RELATIONSHIP_QUALIFICATION+"].from.id";

        StringList relSelects = new StringList(2);
        relSelects.add(sRelNameQualId);
        relSelects.add(sMaterialCertification);
        //Added by DSM-2015x4.1 Feb Downtime for PDF Views(Defect Id-15148) - Starts
        String strObjWhere = DomainConstants.SELECT_CURRENT +"!=" + pgV3Constants.STATE_OBSOLETE;
        //Added by DSM-2015x4.1 Feb Downtime for PDF Views(Defect Id-15148) - Ends
        try{
            // Modified by DSM-2018x.6 April CW for PDF Views Req #40098 Start
            String userID = getPersonId(context);
            List<String> userPlantList = getUserPlantList(context, userID);
            //Added by DSM-2018x.6_Oct CW for PDF Views Req #40098 : Start
            // Modify by DSM-2018x.6_JAN CW for PDF Views INC8864811 Defect 46026 : Starts
            boolean isContractSupplierUser = isContractSupplierUser(context);
            boolean isContractManufacturerUser = isContractManufacturerUser(context);
            boolean isInternalUser = !isContractManufacturerUser && !isContractSupplierUser;
            // Modified by DSM-2018x.6 April CW for PDF Views Req #40098 End
            // Modify by DSM-2018x.6_JAN CW for PDF Views INC8864811 Defect 46026 : Ends
            //Added by DSM-2018x.6_Oct CW for PDF Views Req #40098 : End
            if(null != strObjId && !"".equals(strObjId)) {
                DomainObject doObj = DomainObject.newInstance(context, strObjId);
                //Added by DSM-2018x.6 July CW for PDF Views Req #39806,39807 : Start
                StringList pqrSelectable = new StringList(2);
                pqrSelectable.add(DomainConstants.SELECT_POLICY);
                pqrSelectable.add(DomainConstants.SELECT_TYPE);
                Map<String,String> pqrSelectableData =  doObj.getInfo(context, pqrSelectable);
                strPolicy = pqrSelectableData.get(DomainConstants.SELECT_POLICY);
                String objType = pqrSelectableData.get(DomainConstants.SELECT_TYPE);
                //Added by DSM-2018x.6 July CW for PDF Views Req #39806,39807 : End
                // Added by 2018x.1.1 for PDF Views(Requirement - 26039)
                //Modified by DSM-2018x.6 July CW for PDF Views Defect #43894: Start
                if (pgV3Constants.POLICY_MANUFACTUREREQUIVALENT.equalsIgnoreCase(strPolicy) || pgV3Constants.POLICY_SUPPLIEREQUIVALENT.equalsIgnoreCase(strPolicy)){
                    objType = strPolicy;
                }

                //Added by DSM-2015x.4 for PDF Views(Defect Id-13811,13814) - Starts
                MapList mlObjList = doObj.getRelatedObjects(context, //Context
                        pgV3Constants.RELATIONSHIP_MANUFACTUREREQUIVALENT
                                //Added by DSM-2015x.4 for PDF Views(Defect Id-13811,13814) - Starts
                                +","+ pgV3Constants.RELATIONSHIP_SUPPLIEREQUIVALENT, //relPattern
                        //Modified by DSM-2015x.4 for PDF Views(Defect Id-13811,13814) - Ends
                        "*", //typePattern
                        objectSelects, //objectSelects
                        relSelects,// relationshipSelects
                        true, //getTo - Get Parent Data
                        true, //getFrom - Get Child Data
                        (short)1, //recurseToLevel
                        //Added by DSM-2015x4.1 Feb Downtime for PDF Views(Defect Id-15148) - Starts
                        strObjWhere, //objectWhere
                        //Added by DSM-2015x4.1 Feb Downtime for PDF Views(Defect Id-15148) - Ends
                        null); //relationshipWhere
                //Modified by DSM Sogeti - 2018x.6_Sept (Defect Id-44016) - Starts
                mlObjList.sort(pgV3Constants.NAME, pgPDFViewConstants.CONST_ASCENDING, pgPDFViewConstants.CONST_STRING);
                //Modified by DSM Sogeti - 2018x.6_Sept (Defect Id-44016) - Ends
                //Added by DSM-2015x.4 for PDF Views(Defect Id-13811,13814) - Ends
                //Modified by DSM Sogeti - 2018x.5 (Defect Id-33504) - Starts
                sbProductQualificationRecord.append("<tr><td><table class=\"PQR\" cellspacing=\"0\" id=\"pgFinishedProductTable\">");
                //Modified by DSM Sogeti - 2018x.5 (Defect Id-33504) - Ends
                sbProductQualificationRecord.append("<thead>");
                sbProductQualificationRecord.append("<tr><td colspan='9' class=\"new\" ><font size='4'><b>Part Qualification Record </b></font></td></tr>");
                sbProductQualificationRecord.append("<tr>");
                //Added by DSM(Sogeti)-2015x.4 for PDF Views (Req - 18064) - Starts
                if(!(pgV3Constants.POLICY_MANUFACTUREREQUIVALENT.equalsIgnoreCase(strPolicy) || pgV3Constants.POLICY_SUPPLIEREQUIVALENT.equalsIgnoreCase(strPolicy))){
                    //Added by DSM(Sogeti)-2015x.4 for PDF Views (Req - 18064) - Ends
                    //Modified by DSM-2015x.4,2022x.5 for PDF Views(Defect Id-13811,13814)(Req Id #49391, Def Id #57070) - Starts
                    sbProductQualificationRecord.append("<td align=\"center\"><b>MEP/SEP Name (N) <br></br>   MEP/SEP State (S) <br></br> MEP/SEP Title (T) <br></br> MEP/SEP Vendor (V) <br></br> MEP/SEP Vendor Address (VAD)</b></td>");
                    //Modified by DSM-2015x.4,2022x.5 for PDF Views(Defect Id-13811,13814)(Req Id #49391, Def Id #57070) - Ends
                }
                //Added by DSM-2015x.4 for PDF Views(Defect Id- 14105,14106) - Starts
                if(pgV3Constants.POLICY_MANUFACTUREREQUIVALENT.equalsIgnoreCase(strPolicy) || pgV3Constants.POLICY_SUPPLIEREQUIVALENT.equalsIgnoreCase(strPolicy))
                {
                    sbProductQualificationRecord.append("<td align=\"center\"><b>Enterprise Name (EN)<br></br> Enterprise Title (ET) <br></br> Enterprise Rev (ER) </b></td>");
                }
                //Added by DSM-2015x.4 for PDF Views(Defect Id- 14105,14106) - Ends
                if(pgV3Constants.POLICY_MANUFACTUREREQUIVALENT.equalsIgnoreCase(strPolicy) || pgV3Constants.POLICY_SUPPLIEREQUIVALENT.equalsIgnoreCase(strPolicy)) {
                    //Modified by DSM-2022x.05 for PDF Views (Req Id #49391, Def Id #57070) - Start
                    sbProductQualificationRecord.append("<td align=\"center\"><b>Allowed MEP/SEP Name (AN) <br></br>  Allowed MEP/SEP State (AS) <br></br>  Allowed MEP/SEP Title (AT) <br></br> Allowed MEP/SEP Vendor Code (AV) <br></br> Allowed MEP Vendor Address (AVAD) </b></td>");
                    //Modified by DSM-2022x.05 for PDF Views (Req Id #49391, Def Id #57070) - End
                    sbProductQualificationRecord.append("<td align=\"center\"><b>Material Certifications</b></td>");
                }
                //Added by DSM for PDF Views(Requirement - 26039)
                else {
                    //Modified by DSM(Sogeti)-2018x.2 for PDF Views Requirements - Starts
                    //Modified by DSM-2022x.05 for PDF Views (Req Id #49391, Def Id #57070) - Start
                    sbProductQualificationRecord.append("<td align=\"center\"><b>Allowed MEP Name (AN) <br></br>  Allowed MEP State (AS) <br></br>  Allowed MEP Title (AT) <br></br> Allowed MEP Vendor (AV) <br></br> Allowed MEP Vendor Address (AVAD) </b></td>");
                    //Modified by DSM-2022x.05 for PDF Views (Req Id #49391, Def Id #57070) - Ends
                    //Modified by DSM for PDF Views(Requirement - 26039)
                    //Added by DSM(Sogeti)-2018x.2 for PDF Views Requirements - Starts
                    sbProductQualificationRecord.append("<td align=\"center\"><b>Material Certifications</b></td>");
                    //Added by DSM(Sogeti)-2018x.2 for PDF Views Requirements - Ends
                }
                //Modified by DSM(Sogeti)-2018x.2 for PDF Views Requirements - Ends
                sbProductQualificationRecord.append("<td align=\"center\"><b>PQR Qualification Name (N) <br></br>  PQR State(S)  <br></br>  PQR Revision(R)</b></td>");

                sbProductQualificationRecord.append("<td align=\"center\"><b>PQR Qualification Description</b></td>");
                sbProductQualificationRecord.append("<td align=\"center\"><b>PQR Location Status</b></td>");
                sbProductQualificationRecord.append("<td align=\"center\"><b>PQR Business Area (BA) <br></br> PQR Product Category Platform (PCP) </b></td>");
                // Modify by DSM-2018x.6_JAN CW for PDF Views INC8864811 Defect 46026 : Starts
                // Modified by DSM-2018x.6 April CW for PDF Views Req #40098 Start
                if( isContractManufacturerUser || isInternalUser ) {
                    sbProductQualificationRecord.append("<td align=\"center\"><b>PQR Plants</b></td>");
                }
                // Modified by DSM-2018x.6 April CW for PDF Views Req #40098 Start
                // Modify by DSM-2018x.6_JAN CW for PDF Views INC8864811 Defect 46026 : Ends
                //Added by DSM-2018x.6_Oct CW for PDF Views Req #40098 : End
                //Added by DSM-2015x.4 for PDF Views(Defect Id-13811,13814) - Starts
                sbProductQualificationRecord.append("<td align=\"center\"><b>Comments</b></td>");
                //Added by DSM-2015x.4 for PDF Views(Defect Id-13811,13814) - Ends
                sbProductQualificationRecord.append("</tr>");
                sbProductQualificationRecord.append("</thead>");
                //sbProductQualificationRecord.append("</table>");
                //sbProductQualificationRecord.append("<table class=\"pdf\" border=\"0\" cellspacing=\"0\" width=\"1000px\" id=\"pgFinishedProductTable\">");
                //commented by DSM DSM-2018x.2 for the defect 28408:starts
                //modified by DSM-2018x.2 for defect 29308 : Starts
                if(pgV3Constants.POLICY_MANUFACTUREREQUIVALENT.equalsIgnoreCase(strPolicy) || pgV3Constants.POLICY_SUPPLIEREQUIVALENT.equalsIgnoreCase(strPolicy)){
                    sbAllowedMEPSEP =getAllowedMEPSEPforPQR(context,strObjId,strPolicy,strPolicy);
                }
                //modified by DSM-2018x.2 for defect 29308 : Ends
                //commented by DSM DSM-2018x.2 for the defect 28408:Ends
                if(mlObjList != null && mlObjList.size() > 0){
                    for (Iterator i = mlObjList.iterator(); i.hasNext();){
                        strIDQul = new String();
                        slIDQul = new StringList();
                        slList = new StringList();
                        s1MaterialCertification  = DomainConstants.EMPTY_STRING;
                        //sbAllowedMEPSEP = new StringBuilder();
                        strManu = new String();
                        slManu = new StringList();
                        //Added by DSM-2022x.05 for PDF Views (Req Id #49391) - Start
                        strHouseNumber = new String();
                        strAddress = new String();
                        strCity = new String();
                        strRegion= new String();
                        strCountry = new String();
                        strPostalCode = new String();
                        //Added by DSM-2022x.05 for PDF Views (Req Id #49391) - End
                        mCEData = (Map) i.next();
                        //Added by DSM-2015x.4 for PDF Views(Defect Id-13676) - Starts
                        if(mCEData.get(sRelNameQualId) instanceof String){
                            strIDQul = (String) mCEData.get(sRelNameQualId);
                            slIDQul.add(strIDQul);
                        }
                        else if(mCEData.get(sRelNameQualId) instanceof StringList)
                            slIDQul = (StringList) mCEData.get(sRelNameQualId);

                        //Added by DSM(Sogeti)-2018x.2 for PDF Views Requirements - Starts
                        if(mCEData.get(sMaterialCertification) instanceof String){
                            strMaterialCertification = (String) mCEData.get(sMaterialCertification);
                            slList.add(strMaterialCertification);
                        }
                        else  if(mCEData.get(sMaterialCertification) instanceof StringList)
                            slList = (StringList) mCEData.get(sMaterialCertification);

                        if(slList != null && slList.size()>0)
                        {

                            s1MaterialCertification = FrameworkUtil.join(slList,",");
                        }
                        //Added by DSM(Sogeti)-2018x.2 for PDF Views Requirements - Ends

                        //sbProductQualificationRecord.append("<tr>");
                        strName =(String)mCEData.get(DomainConstants.SELECT_NAME);
                        strIDRMPMEPSEP =(String)mCEData.get(DomainConstants.SELECT_ID);
                        strState=(String)mCEData.get(DomainConstants.SELECT_CURRENT);
                        strTitle=(String)mCEData.get(pgV3Constants.SELECT_ATTRIBUTE_TITLE);
                        strRevision=(String)mCEData.get(DomainConstants.SELECT_REVISION);
                        strSEPMEPPolicy=(String)mCEData.get(pgV3Constants.SELECT_POLICY);
                        if(pgV3Constants.POLICY_MANUFACTUREREQUIVALENT.equalsIgnoreCase(strPolicy) || pgV3Constants.POLICY_SUPPLIEREQUIVALENT.equalsIgnoreCase(strPolicy)){
                            if((pgV3Constants.POLICY_MANUFACTUREREQUIVALENT.equalsIgnoreCase(strSEPMEPPolicy) || pgV3Constants.POLICY_SUPPLIEREQUIVALENT.equalsIgnoreCase(strSEPMEPPolicy))){
                                continue;
                            }
                        }
                        //Commented by DSM DSM-2018x.2 for the defect 29308:starts
                        //Added for the defect 28408: starts
							/*if(pgV3Constants.POLICY_MANUFACTUREREQUIVALENT.equalsIgnoreCase(strPolicy) || pgV3Constants.POLICY_SUPPLIEREQUIVALENT.equalsIgnoreCase(strPolicy)){
								sbAllowedMEPSEP =getAllowedMEPSEPforPQR(context,strIDRMPMEPSEP,strSEPMEPPolicy,strPolicy);
							}*///Added for the Defect 28408: ends
                        //Commented by DSM DSM-2018x.2 for the defect 29308:starts
                        if(!(pgV3Constants.POLICY_MANUFACTUREREQUIVALENT.equalsIgnoreCase(strPolicy) || pgV3Constants.POLICY_SUPPLIEREQUIVALENT.equalsIgnoreCase(strPolicy))){
                            sbAllowedMEPSEP =getAllowedMEPSEPforPQR(context,strIDRMPMEPSEP,strSEPMEPPolicy,strPolicy);
                        }
                        if(!(pgV3Constants.POLICY_MANUFACTUREREQUIVALENT.equalsIgnoreCase(strPolicy) || pgV3Constants.POLICY_SUPPLIEREQUIVALENT.equalsIgnoreCase(strPolicy))){

                            //Added by DSM Sogeti - 2015x.4 (Defect Id-14094) - Starts

                            if(UIUtil.isNotNullAndNotEmpty(strSEPMEPPolicy) && pgV3Constants.POLICY_MANUFACTUREREQUIVALENT.equalsIgnoreCase(strSEPMEPPolicy)){
                                if(mCEData.get(sManuName) instanceof String) {
                                    strManu = (String) mCEData.get(sManuName);
                                    //Added by DSM-2022x.05 for PDF Views (Req Id #49391) - Start
                                    strHouseNumber = (String) mCEData.get(sManuHouseNumber);
                                    strAddress = (String) mCEData.get(sManuAddress);
                    				//Modified by DSM-2022x.05 for PDF Views (Def Id #57070) - Start
                                    strAddress = (strAddress.equals(CONST_UNKNOWN))?"":strAddress; 
                    				//Modified by DSM-2022x.05 for PDF Views (Def Id #57070) - End                              
                                    strCity = (String) mCEData.get(sManuCity);
                                    strRegion = (String) mCEData.get(sManuState);
                                    strCountry = (String) mCEData.get(sManuCountry);
                    				//Modified by DSM-2022x.05 for PDF Views (Def Id #57070) - Start
                                    strCountry = (strCountry.equals(CONST_UNASSIGNED))?"":strCountry;
                    				//Modified by DSM-2022x.05 for PDF Views (Def Id #57070) - End
                                    strPostalCode = (String) mCEData.get(sManuPostalCode);
                                    //Added by DSM-2022x.05 for PDF Views (Req Id #49391) - End
                                    //Added by DSM-2022x.05 for PDF Views (Def Id #57070) - Start
                                    strState = EnoviaResourceBundle.getStateI18NString(context, strSEPMEPPolicy,strState, context.getLocale().getLanguage());
                                    //Added by DSM-2022x.05 for PDF Views (Def Id #57070) - End
                                }
                                else if(mCEData.get(sManuName) instanceof StringList) {
                                    slManu = (StringList) mCEData.get(sManuName);
                                }
                            }
                            if(UIUtil.isNotNullAndNotEmpty(strSEPMEPPolicy) && pgV3Constants.POLICY_SUPPLIEREQUIVALENT.equalsIgnoreCase(strSEPMEPPolicy)){
                                //Added by DSM Sogeti - 2015x.4 (Defect Id-14094) - Ends
                                if(mCEData.get(sVendorName) instanceof String) {
                                    strManu = (String) mCEData.get(sVendorName);
                                    //Added by DSM-2022x.05 for PDF Views (Req Id #49391) - Start
                                    strHouseNumber = (String) mCEData.get(sVendorHouseNumber);
                                    strAddress = (String) mCEData.get(sVendorAddress);
                    				//Modified by DSM-2022x.05 for PDF Views (Def Id #57070) - Start
                                    strAddress = (strAddress.equals(CONST_UNKNOWN))?"":strAddress;  
                    				//Modified by DSM-2022x.05 for PDF Views (Def Id #57070) - End
                                    strCity = (String) mCEData.get(sVendorCity);
                                    strRegion = (String) mCEData.get(sVendorState);
                                    strCountry = (String) mCEData.get(sVendorCountry);
                    				//Modified by DSM-2022x.05 for PDF Views (Def Id #57070) - Start
                                    strCountry = (strCountry.equals(CONST_UNASSIGNED))?"":strCountry;
                    				//Modified by DSM-2022x.05 for PDF Views (Def Id #57070) - End
                                    strPostalCode = (String) mCEData.get(sVendorPostalCode);
                                    //Added by DSM-2022x.05 for PDF Views (Req Id #49391) - End
                                    //Added by DSM-2022x.05 for PDF Views (Def Id #57070) - Start
                                    strState = EnoviaResourceBundle.getStateI18NString(context, strSEPMEPPolicy,strState, context.getLocale().getLanguage());
                                    //Added by DSM-2022x.05 for PDF Views (Def Id #57070) - End
                                }
                                else if(mCEData.get(sVendorName) instanceof StringList) {
                                    slManu = (StringList) mCEData.get(sVendorName);
                                }
                            }
                        }
                        //Added by DSM-2022x.05 for PDF Views (Def Id #57070) - Start
                        else {
                            strState = EnoviaResourceBundle.getStateI18NString(context,strPolicy,strState,context.getLocale().getLanguage());
                        }
                        //Added by DSM-2022x.05 for PDF Views (Def Id #57070) - End
                        String strNamePQR =null;
                        String strID = null;
                        //Added by DSM Sogeti - 2018x.1.1 (Defect Id-26505) - Starts.
                        String strPQRRevision = null;
                        //Added by DSM Sogeti - 2018x.1.1 (Defect Id-26505) - Ends.
                        DomainObject domainObject = null;
                        MapList mlPQRObjList = null;
                        Map mpPQRObjList = null;
                        //Added by DSM-2018x.6 July CW for PDF Views Req #39806,39807 : Start
                        List<String> pqrSelectedType =  StringUtil.split(EnoviaResourceBundle.getProperty(context,"emxCPN",context.getLocale(),"emxCPN.Type.PQRAllowedTypes"),pgPDFViewConstants.STR_COMMA);
                        //Added by DSM-2018x.6 July CW for PDF Views Req #39806,39807 : End
                        if(slIDQul.size()>=1){
                            for (Iterator iterator2 = slIDQul.iterator(); iterator2.hasNext();){
                                slBusArea=new StringList();
                                SlplantsLists=new StringList();
                                slPCPlatform=new StringList();
                                strID = (String) iterator2.next();
                                domainObject = DomainObject.newInstance(context,strID);
                                mpPQRObjList = domainObject.getInfo(context, slPQRObjectSelect);
                                strNamePQR = (String)mpPQRObjList.get(DomainConstants.SELECT_NAME);
                                //Added by DSM Sogeti - 2018x.1.1 (Defect Id-26505) - Starts.
                                strPQRRevision = (String)mpPQRObjList.get(DomainConstants.SELECT_REVISION);
                                //Added by DSM Sogeti - 2018x.1.1 (Defect Id-26505) - Ends.
                                String strCurrentPQR = (String)mpPQRObjList.get(DomainConstants.SELECT_CURRENT);
                                //DSM(Sogeti) - 2018x.1.1 Added for Requirement 28071
                                // if(UIUtil.isNotNullAndNotEmpty(strCurrentPQR) && !pgV3Constants.STATE_FROZEN.equals(strCurrentPQR)) {
                                String strDescriptionPQR = (String)mpPQRObjList.get(pgV3Constants.SELECT_ATTRIBUTE_QUALIFICATIONDESCRIPTION);
                                //Modified by DSM-2015x.5.1 November Bug Fix for Defect #22073 - Starts
                                strDescriptionPQR = strDescriptionPQR.replaceAll("[<]","#LESS_THAN");
                                String strCommentPQR = (String)mpPQRObjList.get(pgV3Constants.SELECT_ATTRIBUTE_COMMENT);
                                //Modified by DSM Sogeti - 2015x.5 (Defect Id-17380) - Starts
                                //Modified by DSM Sogeti - 2018x.5 (Defect Id-33504) - Starts
                                strCommentPQR = checkLessThanGreaterThan(strCommentPQR);
                                //Modified by DSM Sogeti - 2018x.5 (Defect Id-33504) - Ends
                                //Modified by DSM Sogeti - 2015x.5 (Defect Id-17380) - Ends
                                //Modified by DSM-2015x.5.1 November Bug Fix for Defect #22073 - Ends
                                String strLoactionPQR = (String)mpPQRObjList.get(pgV3Constants.SELECT_ATTRIBUTE_PGLOCATIONSTATUS);
                                String strPQRConnectedType = null;
                                String strPQRConnectedName = null;
                                //DS - 2018x.0 - ALM 24141 - modified to check if the PCP type is of pgPLIPlatform - START
                                String strPQRConnectedId = DomainConstants.EMPTY_STRING;
                                //DS - 2018x.0 - ALM 24141 - modified to check if the PCP type is of pgPLIPlatform - END
                                // Modified by DSM - for 2018x.6 PDF Views Defect# 38608   - Starts


                                if(!pgV3Constants.STATE_FROZEN.equals(strCurrentPQR)) {


                                    // Modified by DSM - for 2018x.6 PDF Views Defect# 38608   - End
                                    mlPQRObjList = domainObject.getRelatedObjects(context, //Context
                                            pgV3Constants.RELATIONSHIP_MANUFACTURINGRESPONSIBILITY + "," + pgV3Constants.RELATIONSHIP_PGDOCUMENTTOPLATFORM
                                                    +","+ pgV3Constants.RELATIONSHIP_PGDOCUMENTTOBUSINESSAREA, //relPattern
                                            "*", //typePattern
                                            slPQR1objectSelects, //objectSelects
                                            null,// relationshipSelects
                                            true, //getTo - Get Parent Data
                                            true, //getFrom - Get Child Data
                                            (short)1, //recurseToLevel
                                            null, //objectWhere
                                            null); //relationshipWhere
                                    if(mlPQRObjList != null && mlPQRObjList.size() > 0){
                                        for (Iterator j = mlPQRObjList.iterator(); j.hasNext();){
                                            mpPQRObjList = (Map) j.next();
                                            strPQRConnectedType = (String)mpPQRObjList.get(DomainConstants.SELECT_TYPE);
                                            strPQRConnectedName = (String)mpPQRObjList.get(DomainConstants.SELECT_NAME);
                                            //DS - 2018x.0 - ALM 24141 - modified to check if the PCP type is of pgPLIPlatform - START
                                            strPQRConnectedId = (String)mpPQRObjList.get(DomainConstants.SELECT_ID);
                                            //DS - 2018x.0 - ALM 24141 - modified to check if the PCP type is of pgPLIPlatform - END
                                            if(mpPQRObjList != null && mpPQRObjList.size() > 0){
                                                if("pgPLIBusinessArea".equalsIgnoreCase(strPQRConnectedType)) {
                                                    slBusArea.add(strPQRConnectedName);
                                                }
                                                //Modified by DSM(Sogeti)-2018x.6_Sept for PDF Views Def 44062 - Starts
                                                if("Plant".equalsIgnoreCase(strPQRConnectedType) || pgV3Constants.TYPE_RDLAB.equalsIgnoreCase(strPQRConnectedType)){
                                                    //Modified by DSM(Sogeti)-2018x.6_Sept for PDF Views Def 44062 - Ends
                                                    // Modified by DSM-2018x.6 April CW for PDF Views Req #40098 Start
                                                    if( isContractManufacturerUser && userPlantList.contains(strPQRConnectedName))
                                                        SlplantsLists.add(strPQRConnectedName);
                                                    if(isInternalUser) {
                                                        SlplantsLists.add(strPQRConnectedName);
                                                    }
                                                    // Modified by DSM-2018x.6 April CW for PDF Views Req #40098 End
                                                }
                                                //DS - 2018x.0 - ALM 24141 - modified to check if the PCP type is of pgPLIPlatform - START
                                                if(DomainObject.newInstance(context, strPQRConnectedId).isKindOf(context, "pgPLIPlatform")){
                                                    slPCPlatform.add(strPQRConnectedName);
                                                }
                                                //DS - 2018x.0 - ALM 24141 - modified to check if the PCP type is of pgPLIPlatform - END
                                            }

                                        }
                                    }
                                    sbProductQualificationRecord.append("<tr>");
                                    if(!(pgV3Constants.POLICY_MANUFACTUREREQUIVALENT.equalsIgnoreCase(strPolicy) || pgV3Constants.POLICY_SUPPLIEREQUIVALENT.equalsIgnoreCase(strPolicy))){
                                        if(UIUtil.isNotNullAndNotEmpty(strManu))
                                            //Modified by DSM-2022x.05 for PDF Views (Req Id #49391, Def Id #57070) - Start
                                            sbProductQualificationRecord.append("<TD align=\"left\" valign=\"top\"><B>N: </B>"+getWrappedText(strName)+"<BR></BR><B>S: </B>"+getWrappedText(strState)+"<BR></BR><B>T: </B>"+getWrappedText(strTitle)+"<BR></BR><B>V: </B>"+getWrappedText(strManu)+"<BR></BR><B>VAD: </B>"+getWrappedText(strHouseNumber)+"<BR></BR>"+getWrappedText(strAddress)+"<BR></BR>"+getWrappedText(strCity)+"<BR></BR>"+getWrappedText(strRegion)+"<BR></BR>"+getWrappedText(strCountry)+"<BR></BR>"+getWrappedText(strPostalCode)+"</TD>");
                                        	//Modified by DSM-2022x.05 for PDF Views (Req Id #49391, Def Id #57070) - End
                                        else
                    						//Modified by DSM-2022x.05 for PDF Views (Req Id #49391, Def Id #57070) - Start
                                            sbProductQualificationRecord.append("<TD align=\"left\" valign=\"top\"><B>N: </B>"+getWrappedText(strName)+"<BR></BR><B>S: </B>"+getWrappedText(strState)+"<BR></BR><B>T: </B>"+getWrappedText(strTitle)+"<BR></BR><B>V: </B>"+getWrappedText(slManu)+"<BR></BR><B>VAD: </B>"+getWrappedText(strHouseNumber)+"<BR></BR>"+getWrappedText(strAddress)+"<BR></BR>"+getWrappedText(strCity)+"<BR></BR>"+getWrappedText(strRegion)+"<BR></BR>"+getWrappedText(strCountry)+"<BR></BR>"+getWrappedText(strPostalCode)+"</TD>");
                    						//Modified by DSM-2022x.05 for PDF Views (Req Id #49391, Def Id #57070) - End
                                    } else if(pgV3Constants.POLICY_MANUFACTUREREQUIVALENT.equalsIgnoreCase(strPolicy) || pgV3Constants.POLICY_SUPPLIEREQUIVALENT.equalsIgnoreCase(strPolicy)){
                                        sbProductQualificationRecord.append("<TD align=\"left\" valign=\"top\"><B>EN: </B>"+getWrappedText(strName)+"<BR></BR><B>ET: </B>"+getWrappedText(strTitle)+"<BR></BR><B>"+"ER: </B>"+getWrappedText(strRevision)+"</TD>");
                                    }
                                    if (UIUtil.isNotNullAndNotEmpty(sbAllowedMEPSEP.toString())){
                                        sbProductQualificationRecord.append("<TD align=\"left\" valign=\"top\">");
                                        sbProductQualificationRecord.append(sbAllowedMEPSEP);
                                        sbProductQualificationRecord.append("</TD>");
                                    }
                                    //Modified by DSM(Sogeti)-2018x.2 for PDF Views Requirements - Starts
										/*else if(pgV3Constants.POLICY_MANUFACTUREREQUIVALENT.equalsIgnoreCase(strPolicy) || pgV3Constants.POLICY_SUPPLIEREQUIVALENT.equalsIgnoreCase(strPolicy)){
										sbProductQualificationRecord.append("<TD width=\"162\" align=\"left\" valign=\"top\"><B>AN: </B>"+validateAndWrap(strName)+"<BR></BR><B>AT:</B>"+validateAndWrap(strTitle)+"<BR></BR><B>AV: </B>"+validateAndWrap(strVendorName)+"</TD>");
										}*/
                                    else {
                                        //Modified by DSM Sogeti - 2018x.2 (Defect Id-28408) - Starts
                                        if(pgV3Constants.POLICY_MANUFACTUREREQUIVALENT.equalsIgnoreCase(strPolicy) || pgV3Constants.POLICY_SUPPLIEREQUIVALENT.equalsIgnoreCase(strPolicy)||pgV3Constants.POLICY_EC_PART.equalsIgnoreCase(strPolicy)){
                                            //Modified by DSM-2022x.05 for PDF Views (Req Id #49391, Def Id #57070) - Start
                                            sbProductQualificationRecord.append("<TD align=\"left\" valign=\"top\"><B>AN: </B><BR></BR><B>AS: </B><BR></BR><B>AT: </B><BR></BR><B>AV: </B><BR></BR><B>AVAD: </B></TD>");
                                            //Modified by DSM-2022x.05 for PDF Views (Req Id #49391, Def Id #57070) - End
                                        } else {
                                            //Modified by DSM-2022x.05 for PDF Views (Req Id #49391, Def Id #57070) - Start
                                            sbProductQualificationRecord.append("<TD align=\"left\" valign=\"top\"><B>AN: </B>"+getWrappedText(strName)+"<BR></BR><B>AS: </B>"+getWrappedText(strState)+"<BR></BR><B>AT:</B>"+getWrappedText(strTitle)+"<BR></BR><B>AV: </B>"+getWrappedText(strManu)+"<BR></BR><B>AVAD: </B>"+getWrappedText(strHouseNumber)+"<BR></BR>"+getWrappedText(strAddress)+"<BR></BR>"+getWrappedText(strCity)+"<BR></BR>"+getWrappedText(strState)+"<BR></BR>"+getWrappedText(strCountry)+"<BR></BR>"+getWrappedText(strPostalCode)+"</TD>");
                                            //Modified by DSM-2022x.05 for PDF Views (Req Id #49391, Def Id #57070) - End
                                        }
                                        //Modified by DSM Sogeti - 2018x.2 (Defect Id-28408) - Ends
                                    }
                                    //Modified by DSM(Sogeti)-2018x.2 for PDF Views Requirements - Ends
                                    //Added by DSM(Sogeti)-2018x.2 for PDF Views Requirements - Starts
                                    //if(!(pgV3Constants.POLICY_MANUFACTUREREQUIVALENT.equalsIgnoreCase(strPolicy) || pgV3Constants.POLICY_SUPPLIEREQUIVALENT.equalsIgnoreCase(strPolicy)))
                                    sbProductQualificationRecord.append("<TD align=\"left\" valign=\"top\">"+getWrappedText(s1MaterialCertification)+"</TD>");
                                    //Added by DSM(Sogeti)-2018x.2 for PDF Views Requirements - Ends
                                    //Modified by DSM-2018x.6 July CW for PDF Views Defect #43894: Start
                                    sbProductQualificationRecord.append("<TD align=\"left\" valign=\"top\"><B>N: </B>"+getWrappedText(strNamePQR)+"<BR></BR><B>S: </B>"+getWrappedText(strCurrentPQR)+"<BR></BR><B>R: </B>"+getWrappedText(strPQRRevision)+"</TD>");
                                    sbProductQualificationRecord.append("<TD align=\"left\" valign=\"top\">"+wrapCharTable(strDescriptionPQR, 12)+"</TD>");
                                    sbProductQualificationRecord.append("<TD align=\"left\" valign=\"top\">"+getWrappedText(strLoactionPQR)+"</TD>");
                                    sbProductQualificationRecord.append("<TD align=\"left\" valign=\"top\"><B>BA: </B>"+getWrappedText(slBusArea));
                                    sbProductQualificationRecord.append("<BR></BR><B>PCP: </B>"+getWrappedText(slPCPlatform)+"</TD>");
                                    // Modify by DSM-2018x.6_JAN CW for PDF Views INC8864811 Defect 46026 : Starts
                                    // Modified by DSM-2018x.6 April CW for PDF Views Req #40098 Start
                                    if( isContractManufacturerUser || isInternalUser) {
                                        sbProductQualificationRecord.append("<TD align=\"left\" valign=\"top\">"+wrapCharTable(StringUtils.join(SlplantsLists,", "), 12)+"</TD>");
                                    }
                                    // Modified by DSM-2018x.6 April CW for PDF Views Req #40098 Start
                                    // Modify by DSM-2018x.6_JAN CW for PDF Views INC8864811 Defect 46026 : Ends
                                    //Added by DSM-2018x.6_Oct CW for PDF Views Req #40098 : End
                                    sbProductQualificationRecord.append("<TD align=\"left\" valign=\"top\">"+wrapCharTable(strCommentPQR, 12)+"</TD>");
                                    //Modified by DSM-2018x.6 July CW for PDF Views Defect #43894 : End
                                    // Modified by DSM - for 2018x.6 PDF Views Defect# 38608   - Starts
											/* else{
											 	sbProductQualificationRecord.append("<TD width=\"122\" align=\"left\" valign=\"top\"><B>N: </B><BR></BR><B>S: </B><BR></BR><B>R: </B><BR></BR></TD>");
												sbProductQualificationRecord.append("<TD width=\"142\" align=\"left\" valign=\"top\"></TD>");
												sbProductQualificationRecord.append("<TD width=\"142\" align=\"left\" valign=\"top\"></TD>");
												sbProductQualificationRecord.append("<TD width=\"142\" align=\"left\" valign=\"top\"><B>BA: </B>");
												sbProductQualificationRecord.append("<BR></BR><B>PCP: </B></TD>");
												sbProductQualificationRecord.append("<TD width=\"142\" align=\"left\" valign=\"top\"></TD>");
												sbProductQualificationRecord.append("<TD width=\"142\" align=\"left\" valign=\"top\"></TD>");
											}*/


                                    // Modified by DSM - for 2018x.6 PDF Views Defect# 38608   - End
                                    sbProductQualificationRecord.append("</tr>");
                                    //}
                                }
                            }
                            // Modified by DSM - for 2018x.6 PDF Views Defect# 38608   - Starts
                            //Modified by DSM-2018x.6 July CW for PDF Views Req #39806,39807 : Start
                        } else if(pqrSelectedType.contains(objType)){
                            sbProductQualificationRecord.append("<tr>");
                            if(!(pgV3Constants.POLICY_MANUFACTUREREQUIVALENT.equalsIgnoreCase(strPolicy) || pgV3Constants.POLICY_SUPPLIEREQUIVALENT.equalsIgnoreCase(strPolicy))){
                                if(UIUtil.isNotNullAndNotEmpty(strManu))
                    				//Modified by DSM-2022x.05 for PDF Views (Req Id #49391) - Start
                                    sbProductQualificationRecord.append("<TD width=\"155\" align=\"left\" valign=\"top\"><B>N: </B>"+getWrappedText(strName)+"<BR></BR><B>S: </B>"+getWrappedText(strState)+"<BR></BR><B>V: </B>"+getWrappedText(strManu)+"<BR></BR><B>VAD: </B>"+getWrappedText(strHouseNumber)+"<BR></BR>"+getWrappedText(strAddress)+"<BR></BR>"+getWrappedText(strCity)+"<BR></BR>"+getWrappedText(strRegion)+"<BR></BR>"+getWrappedText(strCountry)+"<BR></BR>"+getWrappedText(strPostalCode)+"<BR></BR><B>T: </B>"+getWrappedText(strTitle)+"</TD>");
                    				//Modified by DSM-2022x.05 for PDF Views (Req Id #49391) - End
                                else
                    				//Modified by DSM-2022x.05 for PDF Views (Req Id #49391) - Start
                                    sbProductQualificationRecord.append("<TD width=\"155\" align=\"left\" valign=\"top\"><B>N: </B>"+getWrappedText(strName)+"<BR></BR><B>S: </B>"+getWrappedText(strState)+"<BR></BR><B>V: </B>"+getWrappedText(slManu)+"<BR></BR><B>VAD: </B>"+getWrappedText(strHouseNumber)+"<BR></BR>"+getWrappedText(strAddress)+"<BR></BR>"+getWrappedText(strCity)+"<BR></BR>"+getWrappedText(strRegion)+"<BR></BR>"+getWrappedText(strCountry)+"<BR></BR>"+getWrappedText(strPostalCode)+"<BR></BR><B>T: </B>"+getWrappedText(strTitle)+"</TD>");
                    				//Modified by DSM-2022x.05 for PDF Views (Req Id #49391) - End
                            } else if(pgV3Constants.POLICY_MANUFACTUREREQUIVALENT.equalsIgnoreCase(strPolicy) || pgV3Constants.POLICY_SUPPLIEREQUIVALENT.equalsIgnoreCase(strPolicy)){
                                sbProductQualificationRecord.append("<TD width=\"155\" align=\"left\" valign=\"top\"><B>EN: </B>"+getWrappedText(strName)+"<BR></BR><B>ET: </B>"+getWrappedText(strTitle)+"<BR></BR><B>"+"ER: </B>"+validateString1(strRevision)+"</TD>");
                            }
                            if (UIUtil.isNotNullAndNotEmpty(sbAllowedMEPSEP.toString())){
                                sbProductQualificationRecord.append("<TD width=\"162\" align=\"left\" valign=\"top\">");
                                sbProductQualificationRecord.append(sbAllowedMEPSEP);
                                sbProductQualificationRecord.append("</TD>");
                            }
                            else
                            {
                                //Modified by DSM Sogeti - 2018x.2 (Defect Id-28408) - Starts
                                if(pgV3Constants.POLICY_MANUFACTUREREQUIVALENT.equalsIgnoreCase(strPolicy) || pgV3Constants.POLICY_SUPPLIEREQUIVALENT.equalsIgnoreCase(strPolicy)|| pgV3Constants.POLICY_EC_PART.equalsIgnoreCase(strPolicy)){
                                    //Modified by DSM-2022x.05 for PDF Views (Req Id #49391, Def Id #57070) - Start
                                    sbProductQualificationRecord.append("<TD width=\"162\" align=\"left\" valign=\"top\"><B>AN: </B><BR></BR><B>AS: </B><BR></BR><B>AT: </B><BR></BR><B>AV: </B><BR></BR><B>AVAD: </B></TD>");
                                    //Modified by DSM-2022x.05 for PDF Views (Req Id #49391, Def Id #57070) - End
                                } else {
                                    //Modified by DSM-2022x.05 for PDF Views (Req Id #49391, Def Id #57070) - Start
                                    sbProductQualificationRecord.append("<TD width=\"162\" align=\"left\" valign=\"top\"><B>AN: </B><BR>"+getWrappedText(strName)+"</BR><B>AS: </B><BR>"+getWrappedText(strState)+"</BR><B>AT: </B>"+getWrappedText(strTitle)+"<BR></BR><B>AV: </B>"+getWrappedText(strManu)+"<BR></BR><B>AVAD: </B>"+getWrappedText(strHouseNumber)+"<BR></BR>"+getWrappedText(strAddress)+"<BR></BR>"+getWrappedText(strCity)+"<BR></BR>"+getWrappedText(strState)+"<BR></BR>"+getWrappedText(strCountry)+"<BR></BR>"+getWrappedText(strPostalCode)+"</TD>");
                                    //Modified by DSM-2022x.05 for PDF Views (Req Id #49391, Def Id #57070) - End
                                }
                                //Modified by DSM Sogeti - 2018x.2 (Defect Id-28408) - Ends
                            }
                            sbProductQualificationRecord.append("<TD width=\"162\" align=\"left\" valign=\"top\">"+validateString1(s1MaterialCertification)+"</TD>");
                            //Modified by DSM(Sogeti) - 2018x.1.1 Requirement 26039
                            sbProductQualificationRecord.append("<TD width=\"122\" align=\"left\" valign=\"top\"><B>N: </B><BR></BR><B>S: </B><BR></BR><B>R: </B><BR></BR></TD>");

                            sbProductQualificationRecord.append("<TD width=\"142\" align=\"left\" valign=\"top\"></TD>");
                            sbProductQualificationRecord.append("<TD width=\"142\" align=\"left\" valign=\"top\"></TD>");
                            sbProductQualificationRecord.append("<TD width=\"142\" align=\"left\" valign=\"top\"><B>BA: </B>");
                            sbProductQualificationRecord.append("<BR></BR><B>PCP: </B></TD>");
                            // Modify by DSM-2018x.6_JAN CW for PDF Views INC8864811 Defect 46026 : Starts
                            // Modified by DSM-2018x.6 April CW for PDF Views Req #40098 Start
                            if( isContractManufacturerUser || isInternalUser ) {
                                sbProductQualificationRecord.append("<TD width=\"142\" align=\"left\" valign=\"top\"></TD>");
                            }
                            // Modified by DSM-2018x.6 April CW for PDF Views Req #40098 End
                            // Modify by DSM-2018x.6_JAN CW for PDF Views INC8864811 Defect 46026 : Ends
                            //Added by DSM-2018x.6_Oct CW for PDF Views Req #40098 : Start
                            sbProductQualificationRecord.append("<TD width=\"142\" align=\"left\" valign=\"top\"></TD>");
                            sbProductQualificationRecord.append("</tr>");
                        }
                        //Modified by DSM-2018x.6 July CW for PDF Views Req #39806,39807 : End
                        // Modified by DSM - for 2018x.6 PDF Views Defect# 38608   - End
                    }
                }
                sbProductQualificationRecord.append("</table><tr><td><br /></td></tr></td></tr>");
                //Modify Code Refatcoring
                mlObjList.clear();
            }
        }catch(Exception exception){
            throw exception;
        }
        long endTime = new Date().getTime();
        System.out.println("Total Time has taken by the  getProductQualificationRecord Method is-->"+(endTime-startTime));
        return sbProductQualificationRecord;
    }
    //Added by DSM-2015x.4 for PDF Views(Defect Id:14083) - Ends
    //Added by DSM-2015x.4 for PDF Views(Defect Id:13510 ) - Starts
    /**
     * @Desc Populates values for ASL SupplierManufacturer List
     * @param Context- Context user
     * @param String - Object ID
     * @return StringBuilder- P & G Information Table
     * @throws Exception
     */
    public StringBuilder getASLSupplierManufacturerList (Context context, String strObjId) throws Exception{

        StringBuilder sbASLSupplierManufacturerList = new StringBuilder();
        StringList objectSelects = new StringList(14);
        objectSelects.add(DomainConstants.SELECT_ID);
        objectSelects.add(DomainConstants.SELECT_TYPE);
        objectSelects.add(DomainConstants.SELECT_NAME);
        objectSelects.add("attribute["+pgPDFViewConstants.strCSSTraderDistributor+"]");
        objectSelects.add("attribute["+pgPDFViewConstants.strCSSManufacturer+"]");
        objectSelects.add("attribute["+pgPDFViewConstants.strPSRAInformation+"]");
        objectSelects.add("attribute["+pgPDFViewConstants.strProductProperty+"]");
        objectSelects.add(pgV3Constants.SELECT_ATTRIBUTE_PGGBU);
        objectSelects.add("attribute["+pgPDFViewConstants.strCategory+"]");
        objectSelects.add("attribute["+pgPDFViewConstants.strSequence1+"]");
        objectSelects.add(pgV3Constants.SELECT_ATTRIBUTE_PGCHANGE);
        objectSelects.add("to["+pgV3Constants.RELATIONSHIP_MANUFACTURINGRESPONSIBILITY+"].from.name");
        objectSelects.add(pgV3Constants.SELECT_ATTRIBUTE_COMMENT);
        objectSelects.add(pgV3Constants.SELECT_ATTRIBUTE_PGBRAND);
        StringList supplierSelects  = new StringList(3);
        supplierSelects.add("attribute["+pgV3Constants.ATTRIBUTE_CITY+"]");
        supplierSelects.add(pgV3Constants.SELECT_ATTRIBUTE_STATEREGION);
        //Modified by DSM(Sogeti) - for 2015x.5 PDF Views Defect# 15745 - Starts
        supplierSelects.add(DomainConstants.SELECT_NAME);
        //Modified by DSM(Sogeti) - for 2015x.5 PDF Views Defect# 15745 - Ends
        StringList relSelects = new StringList(3);
        relSelects.add(DomainObject.SELECT_RELATIONSHIP_ID);
        relSelects.add(DomainObject.SELECT_RELATIONSHIP_NAME);
        relSelects.add(pgV3Constants.SELECT_ATTRIBUTE_SHAREDTABLECHARACTERISTICSEQUENCE);

        try {
            DomainObject domObjectId = DomainObject.newInstance(context,strObjId);
            MapList mlobjList = domObjectId.getRelatedObjects(context,
                    pgV3Constants.RELATIONSHIP_PGAPPROVEDSUPPLIERLISTROW,
                    pgV3Constants.TYPE_PGMANUFACTURERMATERIAL,
                    objectSelects,
                    relSelects,
                    false,
                    true,
                    (short) 1,
                    null,
                    null,
                    0);
            int nMapMPP = mlobjList.size();
            Map mpASLSupplier=null;
            Map mpASLSupplierSort= null;
            MapList mlASLSupplierSort=new MapList();
            if(mlobjList !=null){
                for (int i = 0; i <nMapMPP; i++){
                    mpASLSupplier = (Map) mlobjList.get(i);
                    String strSequenceNumber=(String)mpASLSupplier.get("attribute["+pgPDFViewConstants.strSequence1+"]");
                    mpASLSupplier.put("Sequence Number", strSequenceNumber);
                    mlASLSupplierSort.add(mpASLSupplier);
                }
                mlASLSupplierSort.addSortKey("Sequence Number", "ascending", "String");
                mlASLSupplierSort.sort();

                sbASLSupplierManufacturerList.append("<tr><td><table class=\"WordWrappdf\" cellspacing=\"0\" width=\"1000px\" id=\"ASLLIST\">");
                sbASLSupplierManufacturerList.append("<thead>");
                sbASLSupplierManufacturerList.append("<tr><td colspan='11' class=\"new\" ><font size='2'><b>P&amp;G INTERNAL INFORMATION</b></font></td></tr>");
                sbASLSupplierManufacturerList.append("<tr>");
                sbASLSupplierManufacturerList.append("<th width=\"75px\" align=\"center\">Chg</th>");
                sbASLSupplierManufacturerList.append("<th width=\"90px\" align=\"center\">Manufacturer</th>");
                //Modified by DSM(Sogeti) - for 2015x.5 PDF Views Defect# 15745 - Starts
                sbASLSupplierManufacturerList.append("<th width=\"100px\" align=\"center\">Manufacturer Plant Location<BR/>(City/Town,<BR/>State/Province)</th>");
                //Modified by DSM(Sogeti) - for 2015x.5 PDF Views Defect# 15745 - Ends
                sbASLSupplierManufacturerList.append("<th width=\"120px\" align=\"center\">Trader or Distributor</th>");
                sbASLSupplierManufacturerList.append("<th width=\"150px\" align=\"center\">Using Plant Location</th>");
                sbASLSupplierManufacturerList.append("<th width=\"100px\" align=\"center\">Using GBU</th>");
                sbASLSupplierManufacturerList.append("<th width=\"120px\" align=\"center\">Category</th>");
                sbASLSupplierManufacturerList.append("<th width=\"90px\" align=\"center\">Brand</th>");
                sbASLSupplierManufacturerList.append("<th width=\"120px\" align=\"center\">Product Name</th>");
                sbASLSupplierManufacturerList.append("<th width=\"200px\" align=\"center\">PS&amp;RA</th>");
                sbASLSupplierManufacturerList.append("<th width=\"200px\" align=\"center\">Comments</th>");
                sbASLSupplierManufacturerList.append("</tr>");
                sbASLSupplierManufacturerList.append("</thead>");
                int nMapMP = mlASLSupplierSort.size();
                Map supplierLocation = new HashMap();
                for (int i = 0; i <nMapMP; i++){
                    mpASLSupplierSort = (Map) mlASLSupplierSort.get(i);
                    String strGBU2=(String)mpASLSupplierSort.get(pgV3Constants.SELECT_ATTRIBUTE_PGGBU);
                    String strID=(String)mpASLSupplierSort.get(DomainConstants.SELECT_ID);
                    String strChg=(String)mpASLSupplierSort.get(pgV3Constants.SELECT_ATTRIBUTE_PGCHANGE);
                    String strRA=(String)mpASLSupplierSort.get("attribute["+pgPDFViewConstants.strPSRAInformation+"]");
                    String strProduct=(String)mpASLSupplierSort.get("attribute["+pgPDFViewConstants.strProductProperty+"]");
                    String strComment=(String)mpASLSupplierSort.get(pgV3Constants.SELECT_ATTRIBUTE_COMMENT);
                    String strBrand=(String)mpASLSupplierSort.get(pgV3Constants.SELECT_ATTRIBUTE_PGBRAND);
                    String strManufacturer=(String)mpASLSupplierSort.get("attribute["+pgPDFViewConstants.strCSSManufacturer+"]");
                    String strTraderDistributor=(String)mpASLSupplierSort.get("attribute["+pgPDFViewConstants.strCSSTraderDistributor+"]");
                    StringList strCSSManufacturerList = new StringList();
                    StringList strCSSTraderDistributorList = new StringList();
                    if(UIUtil.isNotNullAndNotEmpty(strManufacturer) && strManufacturer.contains("~"))
                        strCSSManufacturerList = FrameworkUtil.split(strManufacturer, "~");
                    if(UIUtil.isNotNullAndNotEmpty(strTraderDistributor) && strTraderDistributor.contains("~"))
                        strCSSTraderDistributorList = FrameworkUtil.split(strTraderDistributor, "~");

                    String strCateg=(String)mpASLSupplierSort.get("attribute["+pgPDFViewConstants.strCategory+"]");

                    int strCSSManufacturerListSize=0;
                    int strCSSTraderDistributorListSize=0;
                    if (!(strCSSManufacturerList.isEmpty()) || strCSSManufacturerList!=null)
                    {
                        strCSSManufacturerListSize = strCSSManufacturerList.size();
                    }

                    if (!(strCSSTraderDistributorList.isEmpty()) || strCSSTraderDistributorList!=null)
                    {
                        strCSSTraderDistributorListSize = strCSSTraderDistributorList.size();
                    }


                    String strCSSManufacturerVendorCode = null;
                    String strTraderDistributorCode = null;
                    if (strCSSManufacturerListSize > 2)

                    {

                        strCSSManufacturerVendorCode = (String) strCSSManufacturerList.get(strCSSManufacturerListSize - 1);

                    }

                    if (strCSSTraderDistributorListSize > 2)

                    {

                        strTraderDistributorCode = (String) strCSSTraderDistributorList.get(strCSSTraderDistributorList.size() - 1);

                    }
                    Object strPlantLocation =(Object)mpASLSupplierSort.get("to[Manufacturing Responsibility].from.name");
                    StringList plantLocationNameList = new StringList();

                    StringBuffer  strPlantLocationBuffer= new StringBuffer();
                    if(null!=strPlantLocation){

                        if (strPlantLocation instanceof String) {

                            plantLocationNameList = new StringList((String) strPlantLocation);

                        } else {

                            plantLocationNameList = (StringList)strPlantLocation;

                        }
                        for(int k=0;k<plantLocationNameList.size();k++){

                            if(strPlantLocationBuffer.length()>0)

                                strPlantLocationBuffer.append("<BR/>");

                            strPlantLocationBuffer.append((String)plantLocationNameList.get(k));
                        }
                    }
                    DomainObject doObj = DomainObject.newInstance(context,strID);
                    MapList objList = doObj.getRelatedObjects(context,
                            pgV3Constants.RELATIONSHIP_SUPPLYRESPONSIBILITY,
                            pgV3Constants.TYPE_COMPANY,
                            supplierSelects,
                            null,
                            true,
                            false,
                            (short) 1,
                            null,
                            null,
                            0);
                    //Modified by DSM(Sogeti) - for 2015x.5 PDF Views Defect# 15745 - Starts
                    //supplierLocation = new HashMap();
                    String strLocation = null;
                    String strCity = null;
                    String strSupplierName[] = null;
                    String strSupplierVendorCode = null;
                    if(null!=objList && objList.size() >0){
                        //supplierLocation = (Map)objList.get(0);
                        for (Iterator SupplierIterator = objList.iterator(); SupplierIterator.hasNext();)
                        {
                            Map <String,String>pgSupplierMap=(Map)SupplierIterator.next();
                            strSupplierName = pgSupplierMap.get(DomainConstants.SELECT_NAME).toString().split("~");
                            if(strSupplierName.length == 2) {
                                strSupplierVendorCode = strSupplierName[1];
                            } else {
                                strSupplierVendorCode = pgSupplierMap.get("attribute[Organization ID]");
                            }
                            if (strSupplierVendorCode.equals(strCSSManufacturerVendorCode) )
                            {
                                strCity = (String)pgSupplierMap.get("attribute["+pgV3Constants.ATTRIBUTE_CITY+"]");
                                String strStateRegion = (String)pgSupplierMap.get(pgV3Constants.SELECT_ATTRIBUTE_STATEREGION);
                                strLocation = strCity + "," + strStateRegion;
                                break;
                            }
                        }
                    }
                    //Modified by DSM(Sogeti) - for 2015x.5 PDF Views Defect# 15745 - Ends
                    sbASLSupplierManufacturerList.append("<tr>");
                    sbASLSupplierManufacturerList.append("<td align=\"center\" width=\"75\">"+validateString1(strChg)+"</td>");
                    if((strCSSManufacturerList.isEmpty())||strCSSManufacturerList==null)
                        sbASLSupplierManufacturerList.append("<td align=\"center\" width=\"75\">"+""+"</td>");
                    else
                        sbASLSupplierManufacturerList.append("<td align=\"center\" width=\"75\">"+validateString1(strCSSManufacturerList.get(0))+"</td>");
                    sbASLSupplierManufacturerList.append("<td align=\"center\" width=\"75\">"+validateString1(strLocation)+"</td>");
                    if((strCSSTraderDistributorList.isEmpty())||strCSSTraderDistributorList==null)
                        sbASLSupplierManufacturerList.append("<td align=\"center\" width=\"75\">"+""+"</td>");
                    else
                        sbASLSupplierManufacturerList.append("<td align=\"center\" width=\"75\">"+validateString1(strCSSTraderDistributorList.get(0))+"</td>");
                    sbASLSupplierManufacturerList.append("<td align=\"center\" width=\"75\">"+validateString1(strPlantLocationBuffer.toString())+"</td>");
                    sbASLSupplierManufacturerList.append("<td align=\"center\" width=\"75\">"+validateString1(strGBU2)+"</td>");
                    sbASLSupplierManufacturerList.append("<td align=\"center\" width=\"75\">"+validateString1(strCateg)+"</td>");
                    sbASLSupplierManufacturerList.append("<td align=\"center\" width=\"75\">"+validateString1(strBrand)+"</td>");
                    sbASLSupplierManufacturerList.append("<td align=\"center\" width=\"75\">"+validateString1(strProduct)+"</td>");
                    sbASLSupplierManufacturerList.append("<td align=\"center\" width=\"75\">"+validateString1(strRA)+"</td>");
                    sbASLSupplierManufacturerList.append("<td align=\"center\" width=\"75\">"+validateString1(strComment)+"</td>");
                    sbASLSupplierManufacturerList.append("</tr>");
                }
                sbASLSupplierManufacturerList.append("</table></td></tr>");
            }
            //Modify Code Refactoring
            mlobjList.clear();
        }
        catch(Exception e){
            e.printStackTrace();
            throw e;

        }
        return sbASLSupplierManufacturerList;
    }		//Added by DSM-2015x.4 for PDF Views(Defect Id:13510 ) - Ends

    /**
     * @Desc Populates values for ASL SupplierManufacturer List
     * @param Context- Context user
     * @param String - Object ID
     * @return StringBuilder- Supplier Information Table
     * @throws Exception
     */
    public StringBuilder getASLSupplierInformationList(Context context, String strObjId) throws Exception{

        StringBuilder sbASLSupplierManufacturerList = new StringBuilder();
        StringList objectSelects = new StringList(16);
        objectSelects.add(DomainConstants.SELECT_ID);
        objectSelects.add(DomainConstants.SELECT_TYPE);
        objectSelects.add(DomainConstants.SELECT_NAME);
        objectSelects.add("attribute["+pgPDFViewConstants.strCSSTraderDistributor+"]");
        objectSelects.add("attribute["+pgPDFViewConstants.strCSSManufacturer+"]");
        objectSelects.add("attribute["+pgPDFViewConstants.strPlantLineSpecific+"]");
        objectSelects.add("attribute["+pgPDFViewConstants.strQualificationStatus+"]");
        objectSelects.add("attribute["+pgPDFViewConstants.strClassification+"]");
        objectSelects.add("attribute["+pgPDFViewConstants.strSequence1+"]");
        objectSelects.add(pgV3Constants.SELECT_ATTRIBUTE_PGCHANGE);
        objectSelects.add("attribute["+pgPDFViewConstants.strSupplierTradeName+"]");
        objectSelects.add("from[pgApprovedSupplierList].to.name");
        objectSelects.add("from[pgApprovedSupplierList].to.type");
        objectSelects.add("from[Part Specification].to.name");
        objectSelects.add("to[Manufacturing Responsibility].from.name");
        objectSelects.add(pgV3Constants.SELECT_ATTRIBUTE_COMMENT);


        StringList supplierSelects  = new StringList(2);
        supplierSelects.add("attribute["+pgV3Constants.ATTRIBUTE_CITY+"]");
        supplierSelects.add(pgV3Constants.SELECT_ATTRIBUTE_STATEREGION);
        supplierSelects.add("attribute["+pgPDFViewConstants.strCountry+"]");
        //Modified by DSM(Sogeti) - for 2015x.5 PDF Views Defect# 15745 - Starts
        supplierSelects.add(DomainConstants.SELECT_NAME);
        //Modified by DSM(Sogeti) - for 2015x.5 PDF Views Defect# 15745 - Ends
        StringList relSelects = new StringList(3);
        relSelects.add(DomainObject.SELECT_RELATIONSHIP_ID);
        relSelects.add(DomainObject.SELECT_RELATIONSHIP_NAME);
        relSelects.add(pgV3Constants.SELECT_ATTRIBUTE_SHAREDTABLECHARACTERISTICSEQUENCE);

        try {
            DomainObject domObjectId = DomainObject.newInstance(context,strObjId);
            MapList mlobjList = domObjectId.getRelatedObjects(context,
                    pgV3Constants.RELATIONSHIP_PGAPPROVEDSUPPLIERLISTROW,
                    pgV3Constants.TYPE_PGMANUFACTURERMATERIAL,
                    objectSelects,
                    relSelects,
                    false,
                    true,
                    (short) 1,
                    null,
                    null,
                    0);
            int nMapMPP = mlobjList.size();
            Map mpASLSupplier=null;
            Map mpASLSupplierSort= null;
            MapList mlASLSupplierSort=new MapList();
            if(mlobjList !=null){
                for (int i = 0; i <nMapMPP; i++){
                    mpASLSupplier = (Map) mlobjList.get(i);
                    String strSequenceNumber=(String)mpASLSupplier.get("attribute["+pgPDFViewConstants.strSequence1+"]");
                    mpASLSupplier.put("Sequence Number", strSequenceNumber);
                    mlASLSupplierSort.add(mpASLSupplier);
                }
                mlASLSupplierSort.addSortKey("Sequence Number", "ascending", "String");
                mlASLSupplierSort.sort();

                sbASLSupplierManufacturerList.append("<tr><td><table class=\"WordWrappdf\" cellspacing=\"0\" width=\"1000px\" id=\"ASLLIST\">");
                sbASLSupplierManufacturerList.append("<thead>");
                sbASLSupplierManufacturerList.append("<tr><td colspan='12' class=\"new\" ><font size='2'><b>SUPPLIER INFORMATION</b></font></td></tr>");
                sbASLSupplierManufacturerList.append("<tr>");
                sbASLSupplierManufacturerList.append("<th width=\"75px\" align=\"center\">Chg</th>");
                sbASLSupplierManufacturerList.append("<th width=\"90px\" align=\"center\">Manufacturer</th>");
                sbASLSupplierManufacturerList.append("<th width=\"90px\" align=\"center\">Manufacturer Vendor Number</th>");
                //Modified by DSM(Sogeti) - for 2015x.5 PDF Views Defect# 15745 - Starts
                sbASLSupplierManufacturerList.append("<th width=\"100px\" align=\"center\">Manufacturer Plant Location<BR/>(City/Town,<BR/>State/Province)</th>");
                //Modified by DSM(Sogeti) - for 2015x.5 PDF Views Defect# 15745 - Ends
                sbASLSupplierManufacturerList.append("<th width=\"120px\" align=\"center\">Manufacturer Plant Location(Market)</th>");
                sbASLSupplierManufacturerList.append("<th width=\"150px\" align=\"center\">Manufacturer Line(s)</th>");
                sbASLSupplierManufacturerList.append("<th width=\"100px\" align=\"center\">Trader or Distributor</th>");
                sbASLSupplierManufacturerList.append("<th width=\"100px\" align=\"center\">Trader or Distributor Vendor Number</th>");
                sbASLSupplierManufacturerList.append("<th width=\"120px\" align=\"center\">Manufacturer Qualificatiion Status</th>");
                sbASLSupplierManufacturerList.append("<th width=\"90px\" align=\"center\">Manufacturer Classification</th>");
                sbASLSupplierManufacturerList.append("<th width=\"120px\" align=\"center\">Material Trade Name</th>");
                sbASLSupplierManufacturerList.append("<th width=\"200px\" align=\"center\">Supplier Info Sheet Name</th>");
                sbASLSupplierManufacturerList.append("</tr>");
                sbASLSupplierManufacturerList.append("</thead>");
                int nMapMP = mlASLSupplierSort.size();
                Map supplierLocation = new HashMap();
                for (int i = 0; i <nMapMP; i++){
                    mpASLSupplierSort = (Map) mlASLSupplierSort.get(i);
                    String strID=(String)mpASLSupplierSort.get(DomainConstants.SELECT_ID);
                    String strChg=(String)mpASLSupplierSort.get(pgV3Constants.SELECT_ATTRIBUTE_PGCHANGE);
                    String strComment=(String)mpASLSupplierSort.get(pgV3Constants.SELECT_ATTRIBUTE_COMMENT);
                    String strManufacturer=(String)mpASLSupplierSort.get("attribute["+pgPDFViewConstants.strCSSManufacturer+"]");
                    String strTraderDistributor=(String)mpASLSupplierSort.get("attribute["+pgPDFViewConstants.strCSSTraderDistributor+"]");
                    StringList strCSSManufacturerList=new StringList();
                    StringList strCSSTraderDistributorList= new StringList();
                    if(UIUtil.isNotNullAndNotEmpty(strManufacturer) && strManufacturer.contains("~"))
                        strCSSManufacturerList = FrameworkUtil.split(strManufacturer, "~");
                    if(UIUtil.isNotNullAndNotEmpty(strTraderDistributor) && strTraderDistributor.contains("~"))
                        strCSSTraderDistributorList = FrameworkUtil.split(strTraderDistributor, "~");
                    String strManuLine = (String)mpASLSupplierSort.get("attribute["+pgPDFViewConstants.strPlantLineSpecific+"]");
                    String qulaificationStatus = (String)mpASLSupplierSort.get("attribute["+pgPDFViewConstants.strQualificationStatus+"]");
                    String pgClassification = (String)mpASLSupplierSort.get("attribute["+pgPDFViewConstants.strClassification+"]");
                    String supplierTradeName = (String)mpASLSupplierSort.get("attribute["+pgPDFViewConstants.strSupplierTradeName+"]");
                    String strCSSManufacturerVendorCode = null;
                    String strTraderDistributorCode = null;
                    int strCSSManufacturerListSize=0;
                    int strCSSTraderDistributorListSize=0;
                    if (!(strCSSManufacturerList.isEmpty()) || strCSSManufacturerList!=null)
                    {
                        strCSSManufacturerListSize = strCSSManufacturerList.size();
                    }
                    if (!(strCSSTraderDistributorList.isEmpty()) || strCSSTraderDistributorList!=null)
                    {
                        strCSSTraderDistributorListSize = strCSSTraderDistributorList.size();
                    }


                    if (strCSSManufacturerListSize > 2)
                    {
                        strCSSManufacturerVendorCode = (String) strCSSManufacturerList.get(strCSSManufacturerListSize - 1);
                    }
                    if (strCSSTraderDistributorListSize > 2)
                    {
                        strTraderDistributorCode = (String) strCSSTraderDistributorList.get(strCSSTraderDistributorList.size() - 1);
                    }

                    Object strPlantLocation =(Object)mpASLSupplierSort.get("to[Manufacturing Responsibility].from.name");
                    StringList plantLocationNameList = new StringList();
                    StringBuffer  strPlantLocationBuffer= new StringBuffer();
                    if(null!=strPlantLocation){

                        if (strPlantLocation instanceof String) {

                            plantLocationNameList = new StringList((String) strPlantLocation);

                        } else {

                            plantLocationNameList = (StringList)strPlantLocation;

                        }
                        for(int k=0;k<plantLocationNameList.size();k++){

                            if(strPlantLocationBuffer.length()>0)

                                strPlantLocationBuffer.append("<BR/>");

                            strPlantLocationBuffer.append((String)plantLocationNameList.get(k));
                        }
                    }
                    StringList supplierInfoSheetList = new StringList();
                    Object supplierInfoSheet = (Object)mpASLSupplierSort.get("from[Part Specification].to.name");
                    StringBuffer supplierInfoSheetBuffer = new StringBuffer();
                    if(null!=supplierInfoSheet){

                        if (supplierInfoSheet instanceof String) {

                            supplierInfoSheetList = new StringList((String) supplierInfoSheet);

                        } else {

                            supplierInfoSheetList = (StringList)supplierInfoSheet;

                        }
                        for(int j=0;j<supplierInfoSheetList.size();j++){

                            if(supplierInfoSheetBuffer.length()>0)

                                supplierInfoSheetBuffer.append("<BR/>");

                            supplierInfoSheetBuffer.append((String)supplierInfoSheetList.get(j));
                        }
                    }


                    DomainObject doObj = DomainObject.newInstance(context,strID);
                    MapList objList = doObj.getRelatedObjects(context,
                            pgV3Constants.RELATIONSHIP_SUPPLYRESPONSIBILITY,
                            pgV3Constants.TYPE_COMPANY,
                            supplierSelects,
                            null,
                            true,
                            false,
                            (short) 1,
                            null,
                            null,
                            0);
                    //Modified by DSM(Sogeti) - for 2015x.5 PDF Views Defect# 15745 - Starts
                    //supplierLocation = new HashMap();
                    String strLocation = null;
                    String Country = null;
                    String strCity = null;
                    String strSupplierName[] = null;
                    String strSupplierVendorCode = null;
                    if(null!=objList && objList.size() >0){
                        //supplierLocation = (Map)objList.get(0);
                        for (Iterator SupplierIterator = objList.iterator(); SupplierIterator.hasNext();)
                        {
                            Map <String,String>pgSupplierMap=(Map)SupplierIterator.next();
                            strSupplierName = pgSupplierMap.get(DomainConstants.SELECT_NAME).toString().split("~");
                            if(strSupplierName.length == 2) {
                                strSupplierVendorCode = strSupplierName[1];
                            } else {
                                strSupplierVendorCode = pgSupplierMap.get("attribute[Organization ID]");
                            }
                            if (strSupplierVendorCode.equals(strCSSManufacturerVendorCode) )
                            {
                                strCity = (String)pgSupplierMap.get("attribute["+pgV3Constants.ATTRIBUTE_CITY+"]");
                                String strStateRegion = (String)pgSupplierMap.get(pgV3Constants.SELECT_ATTRIBUTE_STATEREGION);								Country = (String)pgSupplierMap.get("attribute[Country]");
                                strLocation = strCity + "," + strStateRegion;
                                break;
                            }
                        }
                    }
                    //Modified by DSM(Sogeti) - for 2015x.5 PDF Views Defect# 15745 - Ends
                    //String strLocation = strCity + "," + strStateRegion;*/
                    sbASLSupplierManufacturerList.append("<tr>");
                    sbASLSupplierManufacturerList.append("<td align=\"center\" width=\"75\">"+validateString1(strChg)+"</td>");
                    if((strCSSManufacturerList.isEmpty())||strCSSManufacturerList==null)
                        sbASLSupplierManufacturerList.append("<td align=\"center\" width=\"75\">"+""+"</td>");
                    else
                        sbASLSupplierManufacturerList.append("<td align=\"center\" width=\"75\">"+validateString1(strCSSManufacturerList.get(0))+"</td>");
                    sbASLSupplierManufacturerList.append("<td align=\"center\" width=\"75\">"+validateString1(strCSSManufacturerVendorCode)+"</td>");
                    sbASLSupplierManufacturerList.append("<td align=\"center\" width=\"75\">"+validateString1(strLocation)+"</td>");
                    sbASLSupplierManufacturerList.append("<td align=\"center\" width=\"75\">"+validateString1(Country)+"</td>");
                    sbASLSupplierManufacturerList.append("<td align=\"center\" width=\"75\">"+validateString1(strManuLine)+"</td>");
                    if((strCSSTraderDistributorList.isEmpty())||strCSSTraderDistributorList==null)
                        sbASLSupplierManufacturerList.append("<td align=\"center\" width=\"75\">"+""+"</td>");
                    else
                        sbASLSupplierManufacturerList.append("<td align=\"center\" width=\"75\">"+validateString1(strCSSTraderDistributorList.get(0))+"</td>");
                    sbASLSupplierManufacturerList.append("<td align=\"center\" width=\"75\">"+validateString1(strTraderDistributorCode)+"</td>");
                    sbASLSupplierManufacturerList.append("<td align=\"center\" width=\"75\">"+validateString1(qulaificationStatus)+"</td>");
                    sbASLSupplierManufacturerList.append("<td align=\"center\" width=\"75\">"+validateString1(pgClassification)+"</td>");
                    sbASLSupplierManufacturerList.append("<td align=\"center\" width=\"75\">"+validateString1(supplierTradeName)+"</td>");
                    sbASLSupplierManufacturerList.append("<td align=\"center\" width=\"75\">"+validateString1(supplierInfoSheetBuffer.toString())+"</td>");
                    sbASLSupplierManufacturerList.append("</tr>");
                }
                sbASLSupplierManufacturerList.append("</table></td></tr>");
            }
            //Modify Code Refactoring
            mlobjList.clear();
        }
        catch(Exception e){
            e.printStackTrace();
            throw e;

        }
        return sbASLSupplierManufacturerList;
    }		//Added by DSM-2015x.4 for PDF Views(Defect Id:13510 ) - Ends

    //Added by DSM-2015x.4 for PDF Views(Requirement PQR Views) - Starts
    /** @Desc Used to get connected MEP/SEP for PQR view Table.
     * @param Context- Context user
     * @param String - Object ID
     * @param String - Policy
     * @return StringBuilder- Allowed MEP/SEPs Column for "Product Qualification Record" Table.
     * @throws Exception
     */
    private StringBuilder getAllowedMEPSEPforPQR(Context context, String strObjId, String strPolicy ,String strParentPolicy) throws Exception{
        DomainObject doObj = DomainObject.newInstance(context, strObjId);
        //Modified by DSM(Sogeti)-2018x.2 for PDF Views Requirements - Starts
        //Modified by DSM-2022x.05 for PDF Views (Req Id #49391) - Start
        StringList objectSelects=new StringList(16);
        //Modified by DSM-2022x.05 for PDF Views (Req Id #49391) - End
        String sManuName = "to["+pgV3Constants.RELATIONSHIP_MANUFACTURINGRESPONSIBILITY+"].from.name";
        String sVendorName = "to["+pgV3Constants.RELATIONSHIP_SUPPLYRESPONSIBILITY+"].from.name";
        objectSelects.add(sVendorName);
        objectSelects.add(sManuName);
        String strManu = DomainConstants.EMPTY_STRING;
        //Added by DSM-2022x.05 for PDF Views (Req Id #49391) - Start
        String sManuHouseNumber = "to["+pgV3Constants.RELATIONSHIP_MANUFACTURINGRESPONSIBILITY+"].from.attribute[pgHouseNumber]";
        String sManuAddress = "to["+pgV3Constants.RELATIONSHIP_MANUFACTURINGRESPONSIBILITY+"].from.attribute[Address]";
        String sManuCity = "to["+pgV3Constants.RELATIONSHIP_MANUFACTURINGRESPONSIBILITY+"].from.attribute[City]";
        String sManuState = "to["+pgV3Constants.RELATIONSHIP_MANUFACTURINGRESPONSIBILITY+"].from.attribute[State/Region]";
        String sManuCountry = "to["+pgV3Constants.RELATIONSHIP_MANUFACTURINGRESPONSIBILITY+"].from.attribute[Country]";
        String sManuPostalCode = "to["+pgV3Constants.RELATIONSHIP_MANUFACTURINGRESPONSIBILITY+"].from.attribute[Postal Code]";
        String sVendorHouseNumber = "to["+pgV3Constants.RELATIONSHIP_SUPPLYRESPONSIBILITY+"].from.attribute[pgHouseNumber]";
        String sVendorAddress = "to["+pgV3Constants.RELATIONSHIP_SUPPLYRESPONSIBILITY+"].from.attribute[Address]";
        String sVendorCity = "to["+pgV3Constants.RELATIONSHIP_SUPPLYRESPONSIBILITY+"].from.attribute[City]";
        String sVendorState = "to["+pgV3Constants.RELATIONSHIP_SUPPLYRESPONSIBILITY+"].from.attribute[State/Region]";
        String sVendorCountry = "to["+pgV3Constants.RELATIONSHIP_SUPPLYRESPONSIBILITY+"].from.attribute[Country]";
        String sVendorPostalCode = "to["+pgV3Constants.RELATIONSHIP_SUPPLYRESPONSIBILITY+"].from.attribute[Postal Code]";
        objectSelects.add(sManuHouseNumber);
        objectSelects.add(sManuAddress);
        objectSelects.add(sManuCity);
        objectSelects.add(sManuState);
        objectSelects.add(sManuCountry);
        objectSelects.add(sManuPostalCode);		
        objectSelects.add(sVendorHouseNumber);
        objectSelects.add(sVendorAddress);
        objectSelects.add(sVendorCity);
        objectSelects.add(sVendorState);
        objectSelects.add(sVendorCountry);
        objectSelects.add(sVendorPostalCode); 
        String strHouseNumber = DomainConstants.EMPTY_STRING;
        String strAddress = DomainConstants.EMPTY_STRING;
        String strCity = DomainConstants.EMPTY_STRING;
        String strRegion= DomainConstants.EMPTY_STRING;
        String strCountry = DomainConstants.EMPTY_STRING;
        String strPostalCode = DomainConstants.EMPTY_STRING;
        //Added by DSM-2022x.05 for PDF Views (Req Id #49391) - End
        //Modified by DSM(Sogeti)-2018x.2 for PDF Views Requirements - Ends
        objectSelects.add(pgV3Constants.SELECT_ATTRIBUTE_TITLE);
        objectSelects.add(DomainConstants.SELECT_NAME);
        //Modified by DSM-2022x.05 for PDF Views (Def Id #57070) - Start
        objectSelects.add(DomainConstants.SELECT_CURRENT);
        objectSelects.add(DomainConstants.SELECT_POLICY);
        //Modified by DSM-2022x.05 for PDF Views (Def Id #57070) - End
        Map mpAllowedSEP= new HashMap();
        Map mpAllowedMEP= new HashMap();
        Map mpAllowedMEPSEP= new HashMap();
        String strName= DomainConstants.EMPTY_STRING;
        String strTitle= DomainConstants.EMPTY_STRING;
        String strMEPObject = "MEP";
        String strSEPObject = "SEP";
        StringBuilder sbAllowedMEPSEP = new StringBuilder();
        //Added by DSM-2015x.5.1 for PDF Views(Defect #17915) - Starts
        String strObjWhere = DomainConstants.SELECT_CURRENT +"!=" + pgV3Constants.STATE_OBSOLETE;
        //Added by DSM-2015x.5.1 for PDF Views(Defect #17915) - Ends
        try{
            if(pgV3Constants.POLICY_SUPPLIEREQUIVALENT.equalsIgnoreCase(strPolicy)){
                //Modified by DSM-2015x.5.1 for PDF Views(Defect #17915) - Starts
                MapList mlObjListSEP= doObj.getRelatedObjects(context, //Context
                        pgV3Constants.RELATIONSHIP_MANUFACTUREREQUIVALENT, //relPattern
                        "*", //typePattern
                        objectSelects, //objectSelects
                        null,// relationshipSelects
                        false, //getTo - Get Parent Data
                        true, //getFrom - Get Child Data
                        (short)1, //recurseToLevel
                        strObjWhere, //objectWhere
                        null); //relationshipWhere
                //Modified by DSM-2015x.5.1 for PDF Views(Defect #17915) - Ends
                if(mlObjListSEP != null && mlObjListSEP.size() > 0){
                    for (Iterator i = mlObjListSEP.iterator(); i.hasNext();){
                        mpAllowedSEP = (Map) i.next();
                        strName =(String)mpAllowedSEP.get(DomainConstants.SELECT_NAME);
                        strTitle=(String)mpAllowedSEP.get(pgV3Constants.SELECT_ATTRIBUTE_TITLE);
        				//Modified by DSM-2022x.05 for PDF Views (Def Id #57070) - Start
                        String strCurrentState = (String)mpAllowedSEP.get(pgV3Constants.SELECT_CURRENT);
                        String strCurrentPolicy = (String)mpAllowedSEP.get(pgV3Constants.SELECT_POLICY);
                        strCurrentState = EnoviaResourceBundle.getStateI18NString(context, strCurrentPolicy,strCurrentState, context.getLocale().getLanguage());
        				//Modified by DSM-2022x.05 for PDF Views (Def Id #57070) - End
                        //Added by DSM(Sogeti)-2018x.2 for PDF Views Requirements - Start
                        strManu = (String) mpAllowedSEP.get(sManuName);
                        //Added by DSM(Sogeti)-2018x.2 for PDF Views Requirements - Ends
                        //Added by DSM-2022x.05 for PDF Views (Req Id #49391) - Start
                        strHouseNumber = (String) mpAllowedSEP.get(sManuHouseNumber);
                        strAddress = (String) mpAllowedSEP.get(sManuAddress);
        				//Modified by DSM-2022x.05 for PDF Views (Def Id #57070) - Start
                        strAddress = (strAddress.equals(CONST_UNKNOWN))?"":strAddress;  
        				//Modified by DSM-2022x.05 for PDF Views (Def Id #57070) - End
                        strCity = (String) mpAllowedSEP.get(sManuCity);
                        strRegion = (String) mpAllowedSEP.get(sManuState);
                        strCountry = (String) mpAllowedSEP.get(sManuCountry);
        				//Modified by DSM-2022x.05 for PDF Views (Def Id #57070) - Start
                        strCountry = (strCountry.equals(CONST_UNASSIGNED))?"":strCountry;
        				//Modified by DSM-2022x.05 for PDF Views (Def Id #57070) - End
                        strPostalCode = (String) mpAllowedSEP.get(sManuPostalCode);
                        //Added by DSM-2022x.05 for PDF Views (Req Id #49391) - End
                        if(!(pgV3Constants.POLICY_MANUFACTUREREQUIVALENT.equalsIgnoreCase(strParentPolicy) || pgV3Constants.POLICY_SUPPLIEREQUIVALENT.equalsIgnoreCase(strParentPolicy))){
                        	//Modified by DSM-2022x.05 for PDF Views (Req Id #49391) - Start
                        	if(strName.contains(strMEPObject)) {
        						  //Modified by DSM-2022x.05 for PDF Views (Def Id #57070) - Start
                            	  sbAllowedMEPSEP .append("<B>AN: </B>"+getWrappedText(strName)+"<BR></BR><B>AS: </B>"+getWrappedText(strCurrentState)+"<BR></BR><B>AT: </B>"+getWrappedText(strTitle)+"<BR></BR><B>AV: </B>"+getWrappedText(strManu)+"<BR></BR><B>AVAD: </B>"+getWrappedText(strHouseNumber)+"<BR></BR>"+getWrappedText(strAddress)+"<BR></BR>"+getWrappedText(strCity)+"<BR></BR>"+getWrappedText(strRegion)+"<BR></BR>"+getWrappedText(strCountry)+"<BR></BR>"+getWrappedText(strPostalCode)+"<BR></BR>");
        						  //Modified by DSM-2022x.05 for PDF Views (Def Id #57070) - End
                            }
                        	//Modified by DSM-2022x.05 for PDF Views (Req Id #49391) - End
                        }
                        else{
                        	//Modified by DSM-2022x.05 for PDF Views (Req Id #49391) - Start
                            if(strName.contains(strSEPObject) || strName.contains(strMEPObject)) {
        						//Modified by DSM-2022x.05 for PDF Views (Def Id #57070) - Start
                                sbAllowedMEPSEP .append("<B>AN: </B>"+getWrappedText(strName)+"<BR></BR><B>AS: </B>"+getWrappedText(strCurrentState)+"<BR></BR><B>AT: </B>"+getWrappedText(strTitle)+"<BR></BR><B>AV: </B>"+getWrappedText(strManu)+"<BR></BR><B>AVAD: </B>"+getWrappedText(strHouseNumber)+"<BR></BR>"+getWrappedText(strAddress)+"<BR></BR>"+getWrappedText(strCity)+"<BR></BR>"+getWrappedText(strRegion)+"<BR></BR>"+getWrappedText(strCountry)+"<BR></BR>"+getWrappedText(strPostalCode));
        						//Modified by DSM-2022x.05 for PDF Views (Def Id #57070) - End
                            }
                          //Modified by DSM-2022x.05 for PDF Views (Req Id #49391) - End
                      }

                    }
                }
            }
            //commented by DSM-2018x.2 for defect 29569 : Starts
			/*else if(pgV3Constants.POLICY_MANUFACTUREREQUIVALENT.equalsIgnoreCase(strPolicy)){
				//Modified by DSM-2015x.5.1 for PDF Views(Defect #17915) - Starts
				MapList mlObjListMEP = doObj.getRelatedObjects(context, //Context
																		pgV3Constants.RELATIONSHIP_MANUFACTUREREQUIVALENT, //relPattern
																		"*", //typePattern
																		objectSelects, //objectSelects
																		null,// relationshipSelects
																		true, //getTo - Get Parent Data
																		false, //getFrom - Get Child Data
																		(short)1, //recurseToLevel
																		strObjWhere, //objectWhere
																		null); //relationshipWhere
				//Modified by DSM-2015x.5.1 for PDF Views(Defect #17915) - Ends
				if(mlObjListMEP != null && mlObjListMEP.size() > 0){
				for (Iterator i = mlObjListMEP.iterator(); i.hasNext();){
					mpAllowedMEP = (Map) i.next();
					strName =(String)mpAllowedMEP.get(DomainConstants.SELECT_NAME);
					strTitle=(String)mpAllowedMEP.get(pgV3Constants.SELECT_ATTRIBUTE_TITLE);
					//Added by DSM(Sogeti)-2018x.2 for PDF Views Requirements - Start
					strManu = (String) mpAllowedMEP.get(sVendorName);
					//Added by DSM(Sogeti)-2018x.2 for PDF Views Requirements - Ends
					if(!(pgV3Constants.POLICY_MANUFACTUREREQUIVALENT.equalsIgnoreCase(strParentPolicy) || pgV3Constants.POLICY_SUPPLIEREQUIVALENT.equalsIgnoreCase(strParentPolicy))){
						if(strName.contains(strSEPObject) )
					sbAllowedMEPSEP .append("<B>AN: </B>"+validateString1(strName)+"<BR></BR><B>AT: </B>"+validateString1(strTitle)+"<BR></BR><B>AV: </B>"+validateString1(strManu)+"<BR></BR>");
					}
					else{
					if(strName.contains(strSEPObject) || strName.contains(strMEPObject) )
					sbAllowedMEPSEP .append("<B>AN: </B>"+validateString1(strName)+"<BR></BR><B>AT: </B>"+validateString1(strTitle)+"<BR></BR><B>AV: </B>"+validateString1(strManu)+"<BR></BR>");
					}
				}
				}
			}*/
            //commented by DSM-2018x.2 for defect 29569 : Ends
            //Added for the defect 28408: starts
            else if(pgV3Constants.POLICY_EC_PART.equalsIgnoreCase(strPolicy)){
                MapList mlObjListSEPMEP = doObj.getRelatedObjects(context, //Context
                        pgV3Constants.RELATIONSHIP_MANUFACTUREREQUIVALENT
                                +","+ pgV3Constants.RELATIONSHIP_SUPPLIEREQUIVALENT,//relPattern
                        "*", //typePattern
                        objectSelects, //objectSelects
                        null,// relationshipSelects
                        false, //getTo - Get Parent Data
                        true, //getFrom - Get Child Data
                        (short)1, //recurseToLevel
                        strObjWhere, //objectWhere
                        null); //relationshipWhere
                if(mlObjListSEPMEP != null && mlObjListSEPMEP.size() > 0){
                    for (Iterator i = mlObjListSEPMEP.iterator(); i.hasNext();){
                        mpAllowedMEPSEP = (Map) i.next();
                        strName =(String)mpAllowedMEPSEP.get(DomainConstants.SELECT_NAME);
                        strTitle=(String)mpAllowedMEPSEP.get(pgV3Constants.SELECT_ATTRIBUTE_TITLE);
        				//Modified by DSM-2022x.05 for PDF Views (Def Id #57070) - Start
                        String strCurrentState = (String)mpAllowedSEP.get(pgV3Constants.SELECT_CURRENT);
                        String strCurrentPolicy = (String)mpAllowedSEP.get(pgV3Constants.SELECT_POLICY);
                        strCurrentState = EnoviaResourceBundle.getStateI18NString(context, strCurrentPolicy,strCurrentState, context.getLocale().getLanguage());
        				//Modified by DSM-2022x.05 for PDF Views (Def Id #57070) - End
                        String strManuSEP = (String) mpAllowedMEPSEP.get(sVendorName);
                        String strManuMEP = (String) mpAllowedMEPSEP.get(sManuName);
                        //Added by DSM-2022x.05 for PDF Views (Req Id #49391) - Start
                        strHouseNumber = (String) mpAllowedMEPSEP.get(sManuHouseNumber);
                        strAddress = (String) mpAllowedMEPSEP.get(sManuAddress);
        				//Modified by DSM-2022x.05 for PDF Views (Def Id #57070) - Start
                        strAddress = (strAddress.equals(CONST_UNKNOWN))?"":strAddress; 
        				//Modified by DSM-2022x.05 for PDF Views (Def Id #57070) - End 
                        strCity = (String) mpAllowedMEPSEP.get(sManuCity);
                        strRegion = (String) mpAllowedMEPSEP.get(sManuState);
                        strCountry = (String) mpAllowedMEPSEP.get(sManuCountry);
        				//Modified by DSM-2022x.05 for PDF Views (Def Id #57070) - Start
                        strCountry = (strCountry.equals(CONST_UNASSIGNED))?"":strCountry;
        				//Modified by DSM-2022x.05 for PDF Views (Def Id #57070) - End
                        strPostalCode = (String) mpAllowedMEPSEP.get(sManuPostalCode);		
                        
                        String strVendorHouseNumber = (String) mpAllowedMEPSEP.get(sVendorHouseNumber);
                        String strVendorAddress = (String) mpAllowedMEPSEP.get(sVendorAddress);
                        String strVendorCity = (String) mpAllowedMEPSEP.get(sVendorCity);
                        String strVendorRegion = (String) mpAllowedMEPSEP.get(sVendorState);
                        String strVendorCountry = (String) mpAllowedMEPSEP.get(sVendorCountry);
                        String strVendorPostalCode = (String) mpAllowedMEPSEP.get(sVendorPostalCode);
                        //Added by DSM-2022x.05 for PDF Views (Req Id #49391) - End
                        
                        if(strName.contains(strSEPObject))
                        {
                            //Modified by DSM-2022x.05 for PDF Views (Req Id #49391, Def Id #57070) - Start
                        	sbAllowedMEPSEP .append("<B>AN: </B>"+getWrappedText(strName)+"<BR></BR><B>AS: </B>"+getWrappedText(strCurrentState)+"<BR></BR><B>AT: </B>"+getWrappedText(strTitle)+"<BR></BR><B>AV: </B>"+getWrappedText(strManuSEP)+"<BR></BR><B>AVAD: </B>"+getWrappedText(strVendorHouseNumber)+"<BR></BR>"+getWrappedText(strVendorAddress)+"<BR></BR>"+getWrappedText(strVendorCity)+"<BR></BR>"+getWrappedText(strVendorRegion)+"<BR></BR>"+getWrappedText(strVendorCountry)+"<BR></BR>"+getWrappedText(strVendorPostalCode));
                        	//Modified by DSM-2022x.05 for PDF Views (Req Id #49391, Def Id #57070) - End
                        }
                        else if(strName.contains(strMEPObject)){
                        	//Modified by DSM-2022x.05 for PDF Views (Req Id #49391, Def Id #57070) - Start
                            sbAllowedMEPSEP .append("<B>AN: </B>"+getWrappedText(strName)+"<BR></BR><B>AS: </B>"+getWrappedText(strCurrentState)+"<BR></BR><B>AT: </B>"+getWrappedText(strTitle)+"<BR></BR><B>AV: </B>"+getWrappedText(strManuMEP)+"<BR></BR><B>AVAD: </B>"+getWrappedText(strHouseNumber)+"<BR></BR>"+getWrappedText(strAddress)+"<BR></BR>"+getWrappedText(strCity)+"<BR></BR>"+getWrappedText(strRegion)+"<BR></BR>"+getWrappedText(strCountry)+"<BR></BR>"+getWrappedText(strPostalCode));
                          //Modified by DSM-2022x.05 for PDF Views (Req Id #49391, Def Id #57070) - End
                        }
                    }
                }
            }// Added for the Defect 28408: Ends
        }catch(Exception exception){
            throw exception;
        }
        return sbAllowedMEPSEP;

    }
    //Added by DSM-2015x.4 for PDF Views(Requirement PQR Views) - Ends


    //Added by DSM Sogeti for 2015x.5 REQID 19633starts
    private StringBuilder getStudyProtocolFilesList(Context context,String strObjectId) throws Exception{
        long startTime = new Date().getTime();
        StringBuilder objectFilesBuffer= new StringBuilder();
        String RELATIONSHIP_OBJECTROUTE = PropertyUtil.getSchemaProperty("relationship_ObjectRoute");
        StringList objectSelects=new StringList(1);
        objectSelects.add(DomainConstants.SELECT_NAME);
        objectSelects.add(DomainConstants.SELECT_ID);
        StringList relSelects=new StringList(1);
        relSelects.add("attribute[" +pgV3Constants.ATTRIBUTE_ROUTEBASESTATE+ "]");
        try{
            if(validateString(strObjectId)){
                DomainObject domainObject= DomainObject.newInstance(context,strObjectId);
				//Added by DSM for PDF Views (Req id #47506) - Start
				String partType=null;
				partType = domainObject.getInfo(context, DomainConstants.SELECT_TYPE);
				//Added by DSM for PDF Views (Req id #47506) - End
                Map ArgsmapFiles= new HashMap();
                ArgsmapFiles.put("objectId", strObjectId);
                String[] argsfiles= JPO.packArgs(ArgsmapFiles);
                //emxCommonFileUI_mxJPO objFiles = new emxCommonFileUI_mxJPO(context, argsfiles);
                MapList mlFileList = new MapList();
//				mlFileList = (MapList)objFiles.getFiles(context, argsfiles);
//Added for PDF Refactor
                mlFileList = (MapList)pgPDFViewHelper.executeMainClassMethod(context, "emxCommonFileUI", "getFiles", argsfiles);
                String strFileName = null;
                String strVer = null;
                String strOriginator= null;
                String strFormat = null;
                String strFileSize= null;
                String strId= null;
                DomainObject domObj = null;
                if(mlFileList != null && mlFileList.size() > 0){
                    objectFilesBuffer.append("<TR><TD><TABLE class=\"pdf\" cellspacing=\"0\" width=\"1000px\" id=\"pgFormulatedProductTable\">");
                    objectFilesBuffer.append("<thead>");
                    objectFilesBuffer.append("<TR><TD colspan='9' class=\"new\" ><font size='4'><b>Files<br /></b></font></TD></TR>");

                    objectFilesBuffer.append("<TR>");
					//Added by DSM for PDF Views (Req id #47506) - Start
					if(pgV3Constants.TYPE_STRUCTURED_ATS.equals(partType)){
					objectFilesBuffer.append("<TD align=\"center\" width=\"500px\" ><B>File Name</B></TD>");
					objectFilesBuffer.append("<TD align=\"center\" width=\"500px\" ><B>File Size</B></TD>");			
					}else{
					//Added by DSM for PDF Views (Req id #47506) - End
                    objectFilesBuffer.append("<TD align=\"center\" width=\"200px\" ><B>File Name</B></TD>");
                    objectFilesBuffer.append("<TD align=\"center\" width=\"200px\" ><B>Ver</B></TD>");
                    objectFilesBuffer.append("<TD align=\"center\" width=\"200px\" ><B>Originator</B></TD>");
                    objectFilesBuffer.append("<TD align=\"center\" width=\"200px\" ><B>Format</B></TD>");
                    objectFilesBuffer.append("<TD align=\"center\" width=\"200px\" ><B>File Size</B></TD>");
					}
                    objectFilesBuffer.append("</TR></thead>");
                    objectFilesBuffer.append("<tbody>");
                    for(Iterator FilesItr = mlFileList.iterator(); FilesItr.hasNext();) {
                        Map mpFilesMap = (Map)FilesItr.next();
						//Added by DSM for PDF Views (Req id #47506) - Start
						if(pgV3Constants.TYPE_STRUCTURED_ATS.equals(partType)){
						strFileName = (String)mpFilesMap.get("format.file.name");
						strFileSize = (String)mpFilesMap.get("format.file.size");
						strFileSize = this.formatFileSize(strFileSize);	
						objectFilesBuffer.append("<TR align=\"center\" class=\"pdf\">");
                        objectFilesBuffer.append("<TD width=\"500px\"  align=\"center\">"+validateString1(strFileName)+"</TD>");
                        objectFilesBuffer.append("<TD width=\"500px\"  align=\"center\">"+validateString1(strFileSize)+"</TD>");
                        objectFilesBuffer.append("</TR>");
						}else{
						//Added by DSM for PDF Views (Req id #47506) - End
                        strFileName = (String)mpFilesMap.get("format.file.name");
                        strVer = (String)mpFilesMap.get("revision");
                        strFormat = (String)mpFilesMap.get("format.file.format");
                        strFileSize = (String)mpFilesMap.get("format.file.size");
                        strFileSize = formatFileSize(strFileSize);

                        strId = (String)mpFilesMap.get(DomainConstants.SELECT_ID);
                        domObj= DomainObject.newInstance(context,strId);
                        strOriginator = domObj.getInfo(context,pgV3Constants.SELECT_ATTRIBUTE_ORIGINATOR);
                        objectFilesBuffer.append("<TR align=\"center\" class=\"pdf\">");
                        objectFilesBuffer.append("<TD width=\"200px\">"+validateString1(strFileName)+"</TD>");
                        objectFilesBuffer.append("<TD width=\"200px\">"+validateString1(strVer)+"</TD>");

                        objectFilesBuffer.append("<TD width=\"200px\">"+validateString1(strOriginator)+"</TD>");
                        objectFilesBuffer.append("<TD width=\"200px\">"+validateString1(strFormat)+"</TD>");
                        objectFilesBuffer.append("<TD width=\"200px\">"+validateString1(strFileSize)+"</TD>");
                        objectFilesBuffer.append("</TR>");
						//Added by DSM for PDF Views (Req id #47506) - Start
						}
						//Added by DSM for PDF Views (Req id #47506) - End
                    }
                    objectFilesBuffer.append("</tbody>");
                    objectFilesBuffer.append("</TABLE><TR><TD><br /></TD></TR></TD></TR>");
                }
            }
        }
        catch (Exception e)
        {
            e.printStackTrace();
            throw new MatrixException(e);
        }
        long endTime = new Date().getTime();
        System.out.println("Total Time has taken by the  getStudyProtocolFilesList Method is-->"+(endTime-startTime));
        return objectFilesBuffer;
    }
    private String formatFileSize(String fileSize) {
        String retStr = "";
        try{
            double dblFileSize = Double.parseDouble(fileSize);
            DecimalFormat decFormat = new DecimalFormat("0.00");
            if(dblFileSize <= 512){
                retStr = fileSize + " B";
            } else if(dblFileSize > 512 && dblFileSize <= (1024*512)){
                retStr = decFormat.format(dblFileSize / 1024) + " KB";
            }else if(dblFileSize > (1024*512) && dblFileSize <= (1024*1024*512)){
                retStr = decFormat.format(dblFileSize / (1024*1024)) + " MB";
            }else if(dblFileSize > (1024*1024*512)){
                retStr = decFormat.format(dblFileSize / (1024*1024*1024)) + " GB";
            }else{
                retStr = fileSize;
            }
        }catch(NumberFormatException ex){
            retStr = fileSize;
        }
        return retStr;
    }
    private StringBuilder getStudyProtocolApprovalsList(Context context,String strObjectId) throws Exception{
        long startTime = new Date().getTime();
        StringBuilder objectApprovalsBuffer= new StringBuilder();
        StringList objectSelects=new StringList(3);
        objectSelects.add(DomainConstants.SELECT_NAME);
        objectSelects.add(DomainConstants.SELECT_ID);
        StringList objecTaskSelects=new StringList(3);
        objecTaskSelects.add(DomainConstants.SELECT_OWNER);
        objecTaskSelects.add(pgV3Constants.SELECT_ATTRIBUTE_APPROVALSTATUS);
        objecTaskSelects.add(pgV3Constants.SELECT_ATTRIBUTE_COMMENTS);
        StringList relSelects=new StringList(1);
        relSelects.add(pgV3Constants.SELECT_ATTRIBUTE_ROUTEBASESTATE);
        try{
            if(validateString(strObjectId)){
                DomainObject domainObject= DomainObject.newInstance(context,strObjectId);
                MapList mlApprovalList = domainObject.getRelatedObjects(context, //Context
                        pgV3Constants.RELATIONSHIP_OBJECTROUTE, //relPattern
                        "*", //typePattern
                        objectSelects   , //objectSelects
                        relSelects,// relationshipSelects
                        false, //getTo - Get Parent Data
                        true, //getFrom - Get Child Data
                        (short)1, //recurseToLevel
                        null, //objectWhere
                        null); //relationshipWhere
                String strName = DomainConstants.EMPTY_STRING;
                String strID = DomainConstants.EMPTY_STRING;
                String strState = DomainConstants.EMPTY_STRING;
                String strSigner= DomainConstants.EMPTY_STRING;
                String strStatus = DomainConstants.EMPTY_STRING;
                String strDescription= DomainConstants.EMPTY_STRING;
                String strSignature= DomainConstants.EMPTY_STRING;
                if(mlApprovalList != null && mlApprovalList.size() > 0){
                    objectApprovalsBuffer.append("<TR><TD><TABLE class=\"pdf\" cellspacing=\"0\" width=\"1000px\" id=\"pgFormulatedProductTable\">");
                    objectApprovalsBuffer.append("<thead>");
                    objectApprovalsBuffer.append("<TR><TD colspan='9' class=\"new\" ><font size='4'><b>Approvals<br /></b></font></TD></TR>");

                    objectApprovalsBuffer.append("<TR>");
                    objectApprovalsBuffer.append("<TD align=\"center\" width=\"180px\" ><B>State</B></TD>");
                    objectApprovalsBuffer.append("<TD align=\"center\" width=\"160px\" ><B>Route</B></TD>");
                    objectApprovalsBuffer.append("<TD align=\"center\" width=\"160px\" ><B>Signature</B></TD>");
                    objectApprovalsBuffer.append("<TD align=\"center\" width=\"160px\" ><B>Signer</B></TD>");
                    objectApprovalsBuffer.append("<TD align=\"center\" width=\"170px\" ><B>Status</B></TD>");
                    objectApprovalsBuffer.append("<TD align=\"center\" width=\"170px\" ><B>Description</B></TD>");
                    objectApprovalsBuffer.append("</TR></thead>");
                    objectApprovalsBuffer.append("<tbody>");
                    for(Iterator ApprovalsItr = mlApprovalList.iterator(); ApprovalsItr.hasNext();) {
                        Map mpApprovalsMap = (Map)ApprovalsItr.next();
                        strName = (String)mpApprovalsMap.get(DomainConstants.SELECT_NAME);
                        strState = (String)mpApprovalsMap.get(pgV3Constants.SELECT_ATTRIBUTE_ROUTEBASESTATE);
                        strState = strState.substring(6,strState.length());
                        strID = (String)mpApprovalsMap.get(DomainConstants.SELECT_ID);
                        DomainObject domainTaskObject= DomainObject.newInstance(context,strID);
                        MapList mlTaskList = domainTaskObject.getRelatedObjects(context, //Context
                                pgV3Constants.RELATIONSHIP_ROUTETASK, //relPattern
                                "*", //typePattern
                                objecTaskSelects   , //objectSelects
                                null,// relationshipSelects
                                true, //getTo - Get Parent Data
                                false, //getFrom - Get Child Data
                                (short)1, //recurseToLevel
                                null, //objectWhere
                                null); //relationshipWhere
                        if(mlTaskList != null && mlTaskList.size() > 0)
                        {
                            for(Iterator TasksItr = mlTaskList.iterator(); TasksItr.hasNext();)
                            {
                                Map mpTasksMap = (Map)TasksItr.next();
                                strStatus = (String)mpTasksMap.get(pgV3Constants.SELECT_ATTRIBUTE_APPROVALSTATUS);
                                strDescription = (String)mpTasksMap.get(pgV3Constants.SELECT_ATTRIBUTE_COMMENTS);
                                strSigner = (String)mpTasksMap.get(DomainConstants.SELECT_OWNER);
                            }
                        }

                        objectApprovalsBuffer.append("<TR align=\"center\" class=\"pdf\">");
                        objectApprovalsBuffer.append("<TD width=\"180px\">"+validateString1(strState)+"</TD>");
                        objectApprovalsBuffer.append("<TD width=\"160px\">"+validateString1(strName)+"</TD>");

                        objectApprovalsBuffer.append("<TD width=\"160px\">"+validateString1(strSignature)+"</TD>");
                        objectApprovalsBuffer.append("<TD width=\"160px\">"+validateString1(strSigner)+"</TD>");
                        objectApprovalsBuffer.append("<TD width=\"170px\">"+validateString1(strStatus)+"</TD>");
                        objectApprovalsBuffer.append("<TD width=\"170px\">"+validateString1(strDescription)+"</TD>");
                        objectApprovalsBuffer.append("</TR>");

                    }
                    objectApprovalsBuffer.append("</tbody>");
                    objectApprovalsBuffer.append("</TABLE><TR><TD><br /></TD></TR></TD></TR>");

                }
                //Modify code Refactoring
                mlApprovalList.clear();
            }
        }
        catch (Exception e)
        {
            e.printStackTrace();
            throw new MatrixException(e);
        }
        long endTime = new Date().getTime();
        System.out.println("Total Time has taken by the  getStudyProtocolApprovalsList Method is-->"+(endTime-startTime));
        return objectApprovalsBuffer;
    }

    private StringBuilder getStabilityResultsonStudyLocationDates(Context context, String strObjectId) {
        StringBuilder sbAttribuesInfo	= 	new StringBuilder();
        try {
            String tempString 				= DomainConstants.EMPTY_STRING;
            int iSize						= 0;
            Map mDataStudy					= null;
            String sTypeStudy 				= DomainConstants.EMPTY_STRING;
            String sNameStudy 				= DomainConstants.EMPTY_STRING;
            StringBuffer sbCountryNames 	= new StringBuffer();
            StringBuffer sbAssemblyState 	= new StringBuffer();
            StringBuffer sbStudySites 		= new StringBuffer();
            StringBuffer sbSurplusDisp 		= new StringBuffer();
            StringList slBusSelectStudy 	= new StringList(2);
            slBusSelectStudy.add(DomainConstants.SELECT_NAME);
            slBusSelectStudy.add(DomainConstants.SELECT_TYPE);
            StringList slCollectingStudyInfo = new StringList(8);
            //String str = pgPDFViewConstants.SELECT_ATTRIBUTE_PGSTYDYSITES;
            slCollectingStudyInfo.add(pgPDFViewConstants.SELECT_ATTRIBUTE_PGSTYDYSITES);
            slCollectingStudyInfo.add(pgPDFViewConstants.SELECT_ATTRIBUTE_PGSTUDYLAUNCHDATE);
            slCollectingStudyInfo.add(pgPDFViewConstants.SELECT_ATTRIBUTE_PGADDRESSOTHERPGSITE);
            slCollectingStudyInfo.add(pgPDFViewConstants.SELECT_ATTRIBUTE_PGDURATIONSTUDY);
            slCollectingStudyInfo.add(pgPDFViewConstants.SELECT_ATTRIBUTE_PGSTORAGEUNPLACEDPRODUCT);
            slCollectingStudyInfo.add(pgPDFViewConstants.SELECT_ATTRIBUTE_PGOTHERLOCATION);
            slCollectingStudyInfo.add(pgPDFViewConstants.SELECT_ATTRIBUTE_PGRETURNADDRESS);
            slCollectingStudyInfo.add(pgPDFViewConstants.SELECT_ATTRIBUTE_PGPRODUCTUSELOCATION);
            DomainObject domStudyProtocolObj 			= DomainObject.newInstance(context, strObjectId);
            Map<String, String> currentMapForStudyInfo 	=  domStudyProtocolObj.getInfo(context, slCollectingStudyInfo);

            String relPattern = new StringBuffer(pgPDFViewConstants.RELATIONSHIP_PGGPSTASKASSESSMENTCOUNTRY).append(pgPDFViewConstants.STR_COMMA).
                    append(pgPDFViewConstants.RELATIONSHIP_PGSTUDYPROTOCOLTOASSEMBLYSTATE).append(pgPDFViewConstants.STR_COMMA).
                    append(pgPDFViewConstants.RELATIONSHIP_PGSTUDYPROTOCOLTOSTUDYSITES).append(pgPDFViewConstants.STR_COMMA).
                    append(pgPDFViewConstants.RELATIONSHIP_PGSTUDYPROTOCOLTOSURPLUSDISPOSITION).toString();

            String typePattern = new StringBuffer(pgPDFViewConstants.TYPE_COUNTRY).append(pgPDFViewConstants.STR_COMMA).
                    append(pgPDFViewConstants.TYPE_PGPLIASSEMBLYSTATE).append(pgPDFViewConstants.STR_COMMA).
                    append(pgPDFViewConstants.TYPE_PGPLISTUDYSITES).append(pgPDFViewConstants.STR_COMMA).
                    append(pgPDFViewConstants.TYPE_PGPLISURPLUSDISPOSITION).toString();

            MapList mlRelatedObjects = domStudyProtocolObj.getRelatedObjects(context,
                    relPattern,
                    typePattern,
                    slBusSelectStudy,
                    null,
                    false,
                    true,
                    (short) 1,
                    null,
                    null,
                    0);

            if(mlRelatedObjects != null && !mlRelatedObjects.isEmpty()){
                iSize = mlRelatedObjects.size();
                for(int i=0; i< iSize; i++){
                    mDataStudy = (Map) mlRelatedObjects.get(i);
                    sTypeStudy = (String) mDataStudy.get(DomainConstants.SELECT_TYPE);
                    sNameStudy = (String) mDataStudy.get(DomainConstants.SELECT_NAME);
                    if(sTypeStudy.equals(pgPDFViewConstants.TYPE_COUNTRY)){
                        if(sbCountryNames.length() > 0){
                            sbCountryNames.append(pgPDFViewConstants.STR_COMMA);
                            sbCountryNames.append(sNameStudy);
                        }else{
                            sbCountryNames.append(sNameStudy);
                        }
                    } else if(sTypeStudy.equals(pgPDFViewConstants.TYPE_PGPLIASSEMBLYSTATE)){
                        if(sbAssemblyState.length() > 0){
                            sbAssemblyState.append(pgPDFViewConstants.STR_COMMA);
                            sbAssemblyState.append(sNameStudy);
                        }else{
                            sbAssemblyState.append(sNameStudy);
                        }
                    }/* else if(sTypeStudy.equals(pgPDFViewConstants.TYPE_PGPLISTUDYSITES)){
							if(sbStudySites.length() > 0){
								sbStudySites.append(pgPDFViewConstants.STR_COMMA);
								sbStudySites.append(sNameStudy);
							}
							sbStudySites.append(sNameStudy);
						}*/ else if(sTypeStudy.equals(pgPDFViewConstants.TYPE_PGPLISURPLUSDISPOSITION)){
                        if(sbSurplusDisp.length() > 0){
                            sbSurplusDisp.append(pgPDFViewConstants.STR_COMMA);
                            sbSurplusDisp.append(sNameStudy);
                        }else{
                            sbSurplusDisp.append(sNameStudy);
                        }
                    }
                }

            }



            sbAttribuesInfo.append("<TR><TD><TABLE class=\"WordWrappdf\" cellspacing=\"0\" width=\"1000px\" id=\"StudyLocationDates\">");
            sbAttribuesInfo.append("<thead>");
            sbAttribuesInfo.append("<TR><TD class=\"new\" colspan='5'><font size='4'><B>Study Location / Dates</B></font></TD></TR>");
            sbAttribuesInfo.append("</thead>");
            sbAttribuesInfo.append("<tbody>");
            sbAttribuesInfo.append("<TR>");
            sbAttribuesInfo.append("<TD align='left'  width=\"250px\"><B>Market of Study Placement*</B></TD>");
            sbAttribuesInfo.append("<TD align='left'  width=\"250px\">"+validateString1(sbCountryNames.toString())+"</TD>");
            sbAttribuesInfo.append("<TD align='left'  width=\"250px\"><B>Location for Distributing Products</B></TD>");
            sbAttribuesInfo.append("<TD align='left'  width=\"250px\">"+validateString1(currentMapForStudyInfo.get(pgPDFViewConstants.SELECT_ATTRIBUTE_PGSTYDYSITES))+"</TD>");
            sbAttribuesInfo.append("</TR>");
            sbAttribuesInfo.append("<TR>");
            sbAttribuesInfo.append("<TD align='left'  width=\"250px\"><B>Estimated Study Start Date*</B></TD>");
            sbAttribuesInfo.append("<TD align='left'  width=\"250px\">"+validateString1(currentMapForStudyInfo.get(pgPDFViewConstants.SELECT_ATTRIBUTE_PGSTUDYLAUNCHDATE))+"</TD>");
            sbAttribuesInfo.append("<TD align='left'  width=\"250px\"><B>Address if Other than P&G site</B></TD>");
            sbAttribuesInfo.append("<TD align='left'  width=\"250px\">"+validateString1(checkLessThanGreaterThan(currentMapForStudyInfo.get(pgPDFViewConstants.SELECT_ATTRIBUTE_PGADDRESSOTHERPGSITE)))+"</TD>");
            sbAttribuesInfo.append("</TR>");
            sbAttribuesInfo.append("<TR>");
            sbAttribuesInfo.append("<TD align='left'  width=\"250px\"><B>Duration of Study*</B></TD>");
            sbAttribuesInfo.append("<TD align='left'  width=\"250px\">"+validateString1(checkLessThanGreaterThan(currentMapForStudyInfo.get(pgPDFViewConstants.SELECT_ATTRIBUTE_PGDURATIONSTUDY)))+"</TD>");
            sbAttribuesInfo.append("<TD align='left'  width=\"250px\"><B>How will products arrive (Fully assembled)</B></TD>");
            sbAttribuesInfo.append("<TD align='left'  width=\"250px\">"+validateString1(sbAssemblyState.toString())+"</TD>");
            sbAttribuesInfo.append("</TR>");
            sbAttribuesInfo.append("<TR>");
            sbAttribuesInfo.append("<TD align='left'  width=\"250px\"><B>Location of Product Use by Panelist*</B></TD>");
            sbAttribuesInfo.append("<TD align='left'  width=\"250px\">"+validateString1(currentMapForStudyInfo.get(pgPDFViewConstants.SELECT_ATTRIBUTE_PGPRODUCTUSELOCATION))+"</TD>");
            sbAttribuesInfo.append("<TD align='left'  width=\"250px\"><B>Storage of Unplaced Product</B></TD>");
            sbAttribuesInfo.append("<TD align='left'  width=\"250px\">"+validateString1(checkLessThanGreaterThan(currentMapForStudyInfo.get(pgPDFViewConstants.SELECT_ATTRIBUTE_PGSTORAGEUNPLACEDPRODUCT)))+"</TD>");
            sbAttribuesInfo.append("</TR>");
            sbAttribuesInfo.append("<TR>");
            sbAttribuesInfo.append("<TD align='left'  width=\"250px\"><B>If Location is Other enter details here*</B></TD>");
            sbAttribuesInfo.append("<TD align='left'  width=\"250px\">"+validateString1(checkLessThanGreaterThan(currentMapForStudyInfo.get(pgPDFViewConstants.SELECT_ATTRIBUTE_PGOTHERLOCATION)))+"</TD>");
            sbAttribuesInfo.append("<TD align='left'  width=\"250px\"><B>How will unplaced Product be disposed?</B></TD>");
            sbAttribuesInfo.append("<TD align='left'  width=\"250px\">"+validateString1(sbSurplusDisp.toString())+"</TD>");
            sbAttribuesInfo.append("</TR>");

            sbAttribuesInfo.append("<TR>");
            //Added By IRM Team in 2018x.5 for Req 34165 Starts
            sbAttribuesInfo.append("<TD align='left'  width=\"250px\"></TD>");
            sbAttribuesInfo.append("<TD align='left'  width=\"250px\"></TD>");
            sbAttribuesInfo.append("<TD align='left'  width=\"250px\"><B>Return Address (location of unplaced and returned used sample)</B></TD>");
            sbAttribuesInfo.append("<TD align='left'  width=\"250px\">"+validateString1(checkLessThanGreaterThan(currentMapForStudyInfo.get(pgPDFViewConstants.SELECT_ATTRIBUTE_PGRETURNADDRESS)))+"</TD>");
            //Added By IRM Team in 2018x.5 for Req 34165 Ends
            sbAttribuesInfo.append("</TR>");

            sbAttribuesInfo.append("</tbody>");
            sbAttribuesInfo.append("</TABLE><TR><TD><br /></TD></TR></TD></TR>");

        } catch (Exception e) {
            e.printStackTrace();
        }
        return sbAttribuesInfo;
    }
    //Commented by IRM Team for Requirement 32753 - Starts
    /**
     * Retrieve Leg Details for Study Protocol
     * @param context
     * @param ObjectId
     * @return StringBuilder
     * @throws MatrixException
     *//*
		private StringBuilder getLegDetailsForStudyProtocal(Context context,String strObjectId) throws Exception{
			long startTime = new Date().getTime();
			StringBuilder sbLegDetailsBuffer = new StringBuilder();
			MapList mlLegDetails = new MapList();
			MapList mlLegPartDetails = new MapList();
			StringList busSelects = pgIPMPDFViewDataSelectable_mxJPO.getSelectblesForLeg(context);
			//Modified By IRM Team for defect 16269--Starts
			StringList busSelectsLegPart = new StringList(4);
			busSelectsLegPart.add(DomainConstants.SELECT_NAME);
			busSelectsLegPart.add(DomainConstants.SELECT_REVISION);
			busSelectsLegPart.add(pgV3Constants.SELECT_ATTRIBUTE_TITLE);
			//Modified By IRM Team for defect 16267--Starts
			busSelectsLegPart.add(DomainConstants.SELECT_DESCRIPTION);
			//Modified By IRM Team for defect 16267--Ends
			StringList relSelLegPart = pgIPMPDFViewDataSelectable_mxJPO.getSelectblesForLegPartDetails(context);
			//String variables to hold Leg Details
			String strLegId				    = DomainConstants.EMPTY_STRING;
			String strLegName			    = DomainConstants.EMPTY_STRING;
			String strNoP				    = DomainConstants.EMPTY_STRING;
			String strComments              = DomainConstants.EMPTY_STRING;
			String strPlant             	= DomainConstants.EMPTY_STRING;
			String strPlacements 		    = DomainConstants.EMPTY_STRING;
			String strTitle 		  		= DomainConstants.EMPTY_STRING;
			//Modified By IRM Team for defect 16267--Starts
			String strDescription		  	= DomainConstants.EMPTY_STRING;
			//Modified By IRM Team for defect 16267--Ends
			String strWashTime				= DomainConstants.EMPTY_STRING;
			String strSSC					= DomainConstants.EMPTY_STRING;
			String strASC					= DomainConstants.EMPTY_STRING;
			String strRnDSC					= DomainConstants.EMPTY_STRING;
			String strInSC					= DomainConstants.EMPTY_STRING;
			String strNSC					= DomainConstants.EMPTY_STRING;
			String strNoUS					= DomainConstants.EMPTY_STRING;
			String strPC					= DomainConstants.EMPTY_STRING;
			String strNCOP					= DomainConstants.EMPTY_STRING;
			String strLotNumber				= DomainConstants.EMPTY_STRING;
			String strProdSource			= DomainConstants.EMPTY_STRING;
			String strBlindCode				= DomainConstants.EMPTY_STRING;
			String strBatch					= DomainConstants.EMPTY_STRING;
			String strDosage				= DomainConstants.EMPTY_STRING;
			String strFreq					= DomainConstants.EMPTY_STRING;
			String strUsagePeriod			= DomainConstants.EMPTY_STRING;
			String strFreqUOM				= DomainConstants.EMPTY_STRING;
			String strWashTimeUoM			= DomainConstants.EMPTY_STRING;
			String strRegClass				= DomainConstants.EMPTY_STRING;
			String strDUoM					= DomainConstants.EMPTY_STRING;
			String strUsageTimeUOM			= DomainConstants.EMPTY_STRING;
			//Modified By IRM Team for defect 16269--Ends
			DomainObject dom 	 		  = null;
			//Added by IRM-2015x.5 for PDF Views (Defect - 16267,16268,16269) - Starts
			StringList slPlant = new StringList();
			String strRelManuRespId = "to["+pgV3Constants.RELATIONSHIP_MANUFACTURINGRESPONSIBILITY+"].from.name";
			//Added by IRM-2015x.5 for PDF Views (Defect - 16267,16268,16269) - Ends
		try{
			DomainObject domainObject= DomainObject.newInstance(context,strObjectId);
			if(validateString(strObjectId)){
				Map Argmap = new HashMap();
				Argmap.put("objectId", strObjectId);
				//Modified By IRM Team for defect 16269--Starts
				mlLegDetails = domainObject.getRelatedObjects(context, //Context
																pgV3Constants.RELATIONSHIP_PGLEGPROCESS, //relPattern
																pgV3Constants.TYPE_PGSTUDYLEG, //typePattern
																busSelects, //objectSelects
																null,// relationshipSelects
																false, //getTo - Get Parent Data
																true, //getFrom - Get Child Data
																(short)0, //recurseToLevel
																"", //objectWhere
																""); //relationshipWhere
				if(mlLegDetails != null && mlLegDetails.size()>0){
					for(Iterator itr = mlLegDetails.iterator(); itr.hasNext();)
					{
						sbLegDetailsBuffer.append("<TR><TD><TABLE class=\"pdf\" cellspacing=\"0\" width=\"1000px\" id=\"LegDetails\">");
						sbLegDetailsBuffer.append("<thead>");
						sbLegDetailsBuffer.append("<TR><TD colspan='5' class=\"new\" ><font size='4'><B>Leg Details</B></font></TD></TR>");
						sbLegDetailsBuffer.append("<TR>");
						sbLegDetailsBuffer.append("<TD align=\"center\" width=\"200px\" ><B>Leg ID</B></TD>");
						sbLegDetailsBuffer.append("<TD align=\"center\" width=\"200px\" ><B>Number of Panelists<BR></BR> (NoP)</B></TD>");
						sbLegDetailsBuffer.append("<TD align=\"center\" width=\"200px\" ><B>Site of Product Manufacturing<BR></BR>(SoPM)</B></TD>");
						sbLegDetailsBuffer.append("<TD align=\"center\" width=\"200px\" ><B>Placements (number of panelists)</B></TD>");
						sbLegDetailsBuffer.append("<TD align=\"center\" width=\"200px\" ><B>Comments</B></TD>");
						sbLegDetailsBuffer.append("</TR></thead>");
						sbLegDetailsBuffer.append("<tbody>");
						Map mpLegInfo = (Map)itr.next();
						strLegId = (String)mpLegInfo.get(DomainConstants.SELECT_ID);
						strLegName = (String)mpLegInfo.get(DomainConstants.SELECT_NAME);
						strNoP = (String)mpLegInfo.get(pgV3Constants.SELECT_ATTRIBUTE_PGNUMBEROFPANELISTS);
						strPlacements = (String)mpLegInfo.get(pgV3Constants.SELECT_ATTRIBUTE_PGPLACEMENTS);
						strComments = (String)mpLegInfo.get(pgV3Constants.SELECT_ATTRIBUTE_COMMENTS);
						//Added by IRM for PDF Views (Defect - 17064) in 2015x.5 - Starts
						slPlant = new StringList();
						//Added by IRM for PDF Views (Defect - 17064) in 2015x.5 - Ends
						//Added by IRM-2015x.5 for PDF Views (Defect - 16267,16268,16269) - Starts
						//strPlant = (String)mpLegInfo.get("to["+${CLASS:pgIRMConstants}.RELATIONSHIP_MANUFACTURINGRESPONSIBILITY+"].from.name");
						if(mpLegInfo.get(strRelManuRespId) instanceof String)
						{
								strPlant = (String) mpLegInfo.get(strRelManuRespId);
								slPlant.add(strPlant);
						}
						else if(mpLegInfo.get(strRelManuRespId) instanceof StringList)
						{
							slPlant = (StringList) mpLegInfo.get(strRelManuRespId);
						}
						//Added by IRM-2015x.5 for PDF Views (Defect - 16267,16268,16269) - Ends
						sbLegDetailsBuffer.append("<TR>");
						sbLegDetailsBuffer.append("<TD align=\"left\" width=\"200px\">"+validateString1(strLegName)+"</TD>");
						sbLegDetailsBuffer.append("<TD align=\"left\" width=\"200px\">"+validateString1(strNoP)+"</TD>");
						//Added by IRM-2015x.5 for PDF Views (Defect - 16267,16268,16269) - starts
						sbLegDetailsBuffer.append("<TD align=\"left\" width=\"200px\">"+validateString1(slPlant)+"</TD>");
						//Added by IRM-2015x.5 for PDF Views (Defect - 16267,16268,16269) - Ends
						sbLegDetailsBuffer.append("<TD align=\"left\" width=\"200px\">"+validateString1(strPlacements)+"</TD>");
						sbLegDetailsBuffer.append("<TD align=\"left\" width=\"200px\">"+validateString1(strComments)+"</TD>");
						sbLegDetailsBuffer.append("</TR>");
						sbLegDetailsBuffer.append("</tbody>");
						sbLegDetailsBuffer.append("</TABLE></TD></TR>");
						if(UIUtil.isNotNullAndNotEmpty(strLegId)){
						dom 	 		  = DomainObject.newInstance(context,strLegId);
						mlLegPartDetails  = dom.getRelatedObjects(context, //Context
																pgV3Constants.RELATIONSHIP_PGLEGINPUT, //relPattern
																"*", //typePattern
																busSelectsLegPart, //objectSelects
																relSelLegPart,// relationshipSelects
																false, //getTo - Get Parent Data
																true, //getFrom - Get Child Data
																(short)0, //recurseToLevel
																"", //objectWhere
																""); //relationshipWhere
						if(mlLegPartDetails != null && mlLegPartDetails.size()>0){
						sbLegDetailsBuffer.append("<TR><TD><TABLE class=\"pdf\" cellspacing=\"0\" width=\"1000px\" id=\"LegPartDetails\">");
						sbLegDetailsBuffer.append("<thead>");
						sbLegDetailsBuffer.append("<TR><TD colspan='15' class=\"new\" ><font size='4'><B>Leg Part Details</B></font></TD></TR>");
						sbLegDetailsBuffer.append("<TR>");
						//Modified By IRM Team for defect 16267--Starts
						sbLegDetailsBuffer.append("<TD align=\"center\"><B>Title<BR></BR>Description</B></TD>");
						//Modified By IRM Team for defect 16267--Ends
						sbLegDetailsBuffer.append("<TD align=\"center\"><B>Washout Time between Products (WT) <BR></BR>Washout Time UoM (WTUoM)<BR></BR>Stability Sample Count (SSC)</B></TD>");
						sbLegDetailsBuffer.append("<TD align=\"center\"><B>Analytical Sample Count (ASC)<BR></BR>R&D Team Sample Count (R&D)<BR></BR>Inventory Sample Count (ISC)</B></TD>");
						sbLegDetailsBuffer.append("<TD align=\"center\"><B>Number of Units to Ship (NUoS) <BR></BR>Net Sample Count (NSC)</B></TD>");
						sbLegDetailsBuffer.append("<TD align=\"center\"><B>Product Code</B></TD>");
						sbLegDetailsBuffer.append("<TD align=\"center\"><B>Lot Number</B></TD>");
						sbLegDetailsBuffer.append("<TD align=\"center\"><B>Blind Code</B></TD>");
						sbLegDetailsBuffer.append("<TD align=\"center\"><B>Product Source(PS)</B></TD>");
						sbLegDetailsBuffer.append("<TD align=\"center\"><B>Batch #</B></TD>");
						sbLegDetailsBuffer.append("<TD align=\"center\"><B>Expected Regulatory Classification</B></TD>");
						sbLegDetailsBuffer.append("<TD align=\"center\"><B>Dosage (DOS)<BR></BR>Dosage UoM (DOSUoM)<BR></BR>Frequency (FRQ)<BR></BR>Frequency UoM (FRQUoM)</B></TD>");
						sbLegDetailsBuffer.append("<TD align=\"center\"><B>Usage Period (UP)<BR></BR>Usage Time UoM (UTUoM)</B></TD>");
						sbLegDetailsBuffer.append("</TR></thead>");
						sbLegDetailsBuffer.append("<tbody>");
						for(Iterator itrLegPart = mlLegPartDetails.iterator(); itrLegPart.hasNext();)
						{
						Map mpLegPartInfo = (Map)itrLegPart.next();
						sbLegDetailsBuffer.append("<TR>");
						strTitle		=(String)mpLegPartInfo.get(pgV3Constants.SELECT_ATTRIBUTE_TITLE);
						//Modified By IRM Team for defect 16267--Starts
						strDescription = (String)mpLegPartInfo.get(pgV3Constants.SELECT_DESCRIPTION);
						//Modified By IRM Team for defect 16267--Ends
						strWashTime		=(String)mpLegPartInfo.get(pgV3Constants.SELECT_ATTRIBUTE_PGWASHOUTTIMEBETWEENPRODUCTS);
						strSSC			=(String)mpLegPartInfo.get(pgV3Constants.SELECT_ATTRIBUTE_PGSTABILITYSAMPLECOUNT);
						strASC			=(String)mpLegPartInfo.get(pgV3Constants.SELECT_ATTRIBUTE_PGANALYTICALSAMPLECOUNT);
						strRnDSC		=(String)mpLegPartInfo.get(pgV3Constants.SELECT_ATTRIBUTE_PGRNDTEAMSAMPLECOUNT);
						strInSC			=(String)mpLegPartInfo.get(pgV3Constants.SELECT_ATTRIBUTE_PGINVENTORYSAMPLECOUNT);
						strNoUS			=(String)mpLegPartInfo.get(pgV3Constants.SELECT_ATTRIBUTE_PGNUMBEROFUNITSTOSHIP);
						//Added by IRM-2015x.5 for PDF Views (Defect - 16267,16268,16269) - Starts
						if(!(BusinessUtil.isNotNullOrEmpty(strSSC))){
							strSSC= "0";
						} if(!(BusinessUtil.isNotNullOrEmpty(strASC))){
							strASC = "0";
						} if(!(BusinessUtil.isNotNullOrEmpty(strRnDSC))){
							strRnDSC = "0";
						} if(!(BusinessUtil.isNotNullOrEmpty(strInSC))){
							strInSC = "0";
						} if (!(BusinessUtil.isNotNullOrEmpty(strNoUS))){
							strNoUS = "0";
						}
						//Added by IRM-2015x.5 for PDF Views (Defect - 16267,16268,16269) - Ends
						strNSC          =(String)Integer.toString(Integer.parseInt(strSSC) + Integer.parseInt(strASC) + Integer.parseInt(strRnDSC) + Integer.parseInt(strInSC)+ Integer.parseInt(strNoUS));
						//Added by IRM-2015x.5 for PDF Views (Defect - 16267,16268,16269) - Starts
						if(strSSC== "0"){
							strSSC= "";
						} if(strASC == "0"){
							strASC = "";
						} if(strRnDSC == "0"){
							strRnDSC = "";
						} if(strInSC == "0"){
							strInSC = "";
						} if (strNoUS == "0"){
							strNoUS = "";
						} if (strNSC == "0"){
							strNSC = "";
						}
						//Added by IRM-2015x.5 for PDF Views (Defect - 16267,16268,16269) - Ends
						strPC			=(String)mpLegPartInfo.get(pgV3Constants.SELECT_ATTRIBUTE_PGPRODUCTCODE);
						strNCOP			=(String)mpLegPartInfo.get(pgV3Constants.SELECT_ATTRIBUTE_PGNETCONTENTOFPRODUCTINPACKAGE);
						strLotNumber	=(String)mpLegPartInfo.get(pgV3Constants.SELECT_ATTRIBUTE_PGLOTNUMBER);
						strBlindCode	=(String)mpLegPartInfo.get(pgV3Constants.SELECT_ATTRIBUTE_PGBLINDCODE);
						strBatch		=(String)mpLegPartInfo.get(pgV3Constants.SELECT_ATTRIBUTE_PGBATCH);
						strDosage		=(String)mpLegPartInfo.get(pgV3Constants.SELECT_ATTRIBUTE_PGDOSAGE);
						strFreq			=(String)mpLegPartInfo.get(pgV3Constants.SELECT_ATTRIBUTE_PGFREQUENCY);
						strUsagePeriod	=(String)mpLegPartInfo.get(pgV3Constants.SELECT_ATTRIBUTE_PGUSAGEPERIOD);
						strFreqUOM		=(String)mpLegPartInfo.get("frommid["+pgV3Constants.RELATIONSHIP_PGSTUDYLEGTOFREQUENCYUOM+"].to.name");
						strWashTimeUoM	=(String)mpLegPartInfo.get("frommid["+pgV3Constants.RELATIONSHIP_PGSTUDYLEGTOWASHOUTTIMEUOM+"].to.name");
						strRegClass		=(String)mpLegPartInfo.get("frommid["+pgV3Constants.RELATIONSHIP_PGSTUDYLEGTOREGULATORYCLASSIFICATION+"].to.name");
						strDUoM			=(String)mpLegPartInfo.get("frommid["+pgV3Constants.RELATIONSHIP_PGSTUDYLEGTODOSAGEUOM+"].to.name");
						strUsageTimeUOM	=(String)mpLegPartInfo.get("frommid["+pgV3Constants.RELATIONSHIP_PGSTUDYLEGTOUSAGETIMEUOM+"].to.name");
						strProdSource	=(String)mpLegPartInfo.get("frommid["+pgV3Constants.RELATIONSHIP_PGSTUDYLEGTOPRODUCTSOURCE+"].to.name");
						//Modified By IRM Team for defect 16267--Starts
						sbLegDetailsBuffer.append("<TD align=\"left\"><B>Title:</B>"+validateString1(strTitle)+"<BR></BR><BR></BR><B>Desc:</B>"+validateString1(strDescription)+"</TD>");
						//Modified By IRM Team for defect 16267--Ends
						sbLegDetailsBuffer.append("<TD align=\"left\"><B>WT:</B>"+validateString1(strWashTime)+"<BR></BR><B>WTUoM:</B>"+validateString1(strWashTimeUoM)+"<BR></BR><B>SSC:</B>"+validateString1(strSSC)+"</TD>");
						sbLegDetailsBuffer.append("<TD align=\"left\"><B>ASCL:</B>"+validateString1(strASC)+"<BR></BR><B>R&D:</B>"+validateString1(strRnDSC)+"<BR></BR><B>ISC:</B>"+validateString1(strInSC)+"</TD>");
						sbLegDetailsBuffer.append("<TD align=\"left\"><B>NUoS:</B>"+validateString1(strNoUS)+"<BR></BR><B>NSC:</B>"+validateString1(strNSC)+"</TD>");
						sbLegDetailsBuffer.append("<TD align=\"left\">"+validateString1(strPC)+"</TD>");
						sbLegDetailsBuffer.append("<TD align=\"left\">"+validateString1(strLotNumber)+"</TD>");
						sbLegDetailsBuffer.append("<TD align=\"left\">"+validateString1(strBlindCode)+"</TD>");
						sbLegDetailsBuffer.append("<TD align=\"left\"><B>PS:</B>"+validateString1(strProdSource)+"</TD>");
						sbLegDetailsBuffer.append("<TD align=\"left\">"+validateString1(strBatch)+"</TD>");
						sbLegDetailsBuffer.append("<TD align=\"left\">"+validateString1(strRegClass)+"</TD>");
						sbLegDetailsBuffer.append("<TD align=\"left\"><B>DOS:</B>"+validateString1(strDosage)+"<BR></BR><B>DOSUoM:</B>"+validateString1(strDUoM)+"<BR></BR><B>FRQ:</B>"+validateString1(strFreq)+"<BR></BR><B>FRQUoM:</B>"+validateString1(strFreqUOM)+"</TD>");
						sbLegDetailsBuffer.append("<TD align=\"left\"><B>UP:</B>"+validateString1(strUsagePeriod)+"<BR></BR><B>UTUoM:</B>"+validateString1(strUsageTimeUOM)+"</TD>");
						//Modified By IRM Team for defect 16269--Ends
						sbLegDetailsBuffer.append("</TR>");
						}
						sbLegDetailsBuffer.append("</tbody>");
						sbLegDetailsBuffer.append("</TABLE><TR><TD><br /></TD></TR></TD></TR>");
						}
						}
					}
				}
			}
		}
		catch (Exception e){
			throw new MatrixException(e);
		}
		//Modify code Refactoring
		mlLegDetails.clear();
		mlLegPartDetails.clear();
		long endTime = new Date().getTime();
		System.out.println("Total Time has taken by the getLegDetailsForStudyProtocal Method is-->"+(endTime-startTime));
		return sbLegDetailsBuffer;
		}*/
    //Commented by IRM Team for Requirement 32753 - Ends
    //Added for IRM PDF View for Requirement 32753 for Release 2018x.3 - Starts
    /**
     * Retrieve Leg Details for Study Protocol
     * @param context
     * @param ObjectId
     * @return StringBuilder
     * @throws MatrixException
     */
    private StringBuilder getLegDetailsForStudyProtocal(Context context,String strObjectId) throws Exception{
        long startTime = new Date().getTime();
        StringBuilder sbLegDetailsBuffer = new StringBuilder();
        MapList mlLegDetails = new MapList();
        MapList mlLegPartDetails = new MapList();
        StringList busSelects = pgIPMPDFViewDataSelectable_mxJPO.getSelectblesForLeg(context);
        busSelects.add(DomainConstants.SELECT_TYPE);
        busSelects.add(pgV3Constants.SELECT_ATTRIBUTE_TITLE);
        busSelects.add(DomainConstants.SELECT_DESCRIPTION);
        StringList busSelectsLegPart = new StringList(4);
        busSelectsLegPart.add(DomainConstants.SELECT_NAME);
        busSelectsLegPart.add(DomainConstants.SELECT_REVISION);
        busSelectsLegPart.add(pgV3Constants.SELECT_ATTRIBUTE_TITLE);
        busSelectsLegPart.add(DomainConstants.SELECT_DESCRIPTION);
        StringList relSelLegPart = pgIPMPDFViewDataSelectable_mxJPO.getSelectblesForLegPartDetails(context);
        String strLegId				    = DomainConstants.EMPTY_STRING;
        String strLegName			    = DomainConstants.EMPTY_STRING;
        String strLegType			    = DomainConstants.EMPTY_STRING;
        String strLegTitle			    = DomainConstants.EMPTY_STRING;
        String strLegDescription		= DomainConstants.EMPTY_STRING;
        String strLegTotalNumberOfPanelists		= DomainConstants.EMPTY_STRING;
        String strLegNumberOfProductCode		= DomainConstants.EMPTY_STRING;
        String strPlant             	= DomainConstants.EMPTY_STRING;
        String strPC					= DomainConstants.EMPTY_STRING;
        String strSiteIfOther			= DomainConstants.EMPTY_STRING;
        String strUsageFreq				= DomainConstants.EMPTY_STRING;
        String strFreq					= DomainConstants.EMPTY_STRING;
        String strNoFUnitsPerBag		= DomainConstants.EMPTY_STRING;
        String strRelPackingSite		= DomainConstants.EMPTY_STRING;
        String strWashTime				= DomainConstants.EMPTY_STRING;
        String strEBPUtilized			= DomainConstants.EMPTY_STRING;
        String strPgMicroMCT			= DomainConstants.EMPTY_STRING;
        String strPanelistCompletes		= DomainConstants.EMPTY_STRING;
        String strPlacements 		    = DomainConstants.EMPTY_STRING;
        String strUnitsToLabel 		    = DomainConstants.EMPTY_STRING;
        String strPgLabelling 		    = DomainConstants.EMPTY_STRING;
        String strPgIsProductRepackaged = DomainConstants.EMPTY_STRING;
        String strPgUnitWeight 		    = DomainConstants.EMPTY_STRING;
        String strSSC					= DomainConstants.EMPTY_STRING;
        String strASC					= DomainConstants.EMPTY_STRING;
        String strRnDSC					= DomainConstants.EMPTY_STRING;
        String strInSC					= DomainConstants.EMPTY_STRING;
        String strNoUS					= DomainConstants.EMPTY_STRING;
        String strNetSC					= DomainConstants.EMPTY_STRING;
        String strBatch					= DomainConstants.EMPTY_STRING;
        String strComments 				= DomainConstants.EMPTY_STRING;
        String strPartName 				= DomainConstants.EMPTY_STRING;
        StringList slPlantDetails 		= new StringList();
        String strPlantSite 			= DomainConstants.EMPTY_STRING;
        String strSiteOfPM 				= DomainConstants.EMPTY_STRING;
        DomainObject dom 	 		  	= null;
        StringList slPlant = new StringList();
        try {
            DomainObject domainObject= DomainObject.newInstance(context,strObjectId);
            if(validateString(strObjectId)){
                Map Argmap = new HashMap();
                Argmap.put("objectId", strObjectId);
                mlLegDetails = domainObject.getRelatedObjects(context, //Context
                        pgV3Constants.RELATIONSHIP_PGLEGPROCESS, //relPattern
                        pgV3Constants.TYPE_PGSTUDYLEG, //typePattern
                        busSelects, //objectSelects
                        null,// relationshipSelects
                        false, //getTo - Get Parent Data
                        true, //getFrom - Get Child Data
                        (short)0, //recurseToLevel
                        "", //objectWhere
                        ""); //relationshipWhere
                if(mlLegDetails != null && mlLegDetails.size()>0){
                    for(Iterator itr = mlLegDetails.iterator(); itr.hasNext();)
                    {
                        sbLegDetailsBuffer.append("<TR><TD><TABLE class=\"pdf\" cellspacing=\"0\" width=\"1000px\" id=\"LegDetails\">");
                        sbLegDetailsBuffer.append("<thead>");
                        sbLegDetailsBuffer.append("<TR><TD colspan='6' class=\"new\" ><font size='4'><B>Leg Details</B></font></TD></TR>");
                        sbLegDetailsBuffer.append("<TR>");
                        sbLegDetailsBuffer.append("<TD align=\"center\" width=\"200px\" ><B>Leg Details</B></TD>");
                        sbLegDetailsBuffer.append("<TD align=\"center\" width=\"200px\" ><B>Type</B></TD>");
                        sbLegDetailsBuffer.append("<TD align=\"center\" width=\"200px\" ><B>Title</B></TD>");
                        sbLegDetailsBuffer.append("<TD align=\"center\" width=\"200px\" ><B>Description</B></TD>");
                        sbLegDetailsBuffer.append("<TD align=\"center\" width=\"200px\" ><B>Total number of Panelist in Leg</B></TD>");
                        sbLegDetailsBuffer.append("<TD align=\"center\" width=\"200px\" ><B>Number of Product Codes Panelist will<BR></BR>receive</B></TD>");
                        sbLegDetailsBuffer.append("</TR></thead>");

                        Map mpLegInfo = (Map)itr.next();
                        strLegId = (String)mpLegInfo.get(DomainConstants.SELECT_ID);
                        strLegName = (String)mpLegInfo.get(DomainConstants.SELECT_NAME);
                        strLegType = (String)mpLegInfo.get(DomainConstants.SELECT_TYPE);
                        strLegTitle = (String)mpLegInfo.get(pgV3Constants.SELECT_ATTRIBUTE_TITLE);
                        strLegDescription = (String)mpLegInfo.get(DomainConstants.SELECT_DESCRIPTION);
                        strLegTotalNumberOfPanelists = (String)mpLegInfo.get(pgV3Constants.SELECT_ATTRIBUTE_PGNUMBEROFPANELISTS);
                        strLegNumberOfProductCode = (String)mpLegInfo.get(pgPDFViewConstants.SELECT_ATTRIBUTE_PG_PRODUCTCODEPANELISTS);

                        sbLegDetailsBuffer.append("<tbody>");
                        sbLegDetailsBuffer.append("<TR>");
                        sbLegDetailsBuffer.append("<TD align=\"left\" width=\"200px\">"+validateString1(strLegName)+"</TD>");
                        sbLegDetailsBuffer.append("<TD align=\"left\" width=\"200px\">"+validateString1(strLegType)+"</TD>");
                        sbLegDetailsBuffer.append("<TD align=\"left\" width=\"200px\">"+validateString1(checkLessThanGreaterThan(strLegTitle))+"</TD>");
                        sbLegDetailsBuffer.append("<TD align=\"left\" width=\"200px\">"+validateString1(checkLessThanGreaterThan(strLegDescription))+"</TD>");
                        sbLegDetailsBuffer.append("<TD align=\"left\" width=\"200px\">"+validateString1(checkLessThanGreaterThan(strLegTotalNumberOfPanelists))+"</TD>");
                        sbLegDetailsBuffer.append("<TD align=\"left\" width=\"200px\">"+validateString1(checkLessThanGreaterThan(strLegNumberOfProductCode))+"</TD>");
                        sbLegDetailsBuffer.append("</TR>");
                        sbLegDetailsBuffer.append("</tbody>");
                        sbLegDetailsBuffer.append("</TABLE></TD></TR>");

                        if(UIUtil.isNotNullAndNotEmpty(strLegId)){
                            dom 	 		  = DomainObject.newInstance(context,strLegId);
                            mlLegPartDetails  = dom.getRelatedObjects(context, //Context
                                    pgV3Constants.RELATIONSHIP_PGLEGINPUT, //relPattern
                                    DomainConstants.QUERY_WILDCARD, //typePattern
                                    busSelectsLegPart, //objectSelects
                                    relSelLegPart,// relationshipSelects
                                    false, //getTo - Get Parent Data
                                    true, //getFrom - Get Child Data
                                    (short)0, //recurseToLevel
                                    "", //objectWhere
                                    ""); //relationshipWhere
                            if(mlLegPartDetails != null && mlLegPartDetails.size()>0){
                                sbLegDetailsBuffer.append("<TR><TD><TABLE class=\"pdf\" cellspacing=\"0\" width=\"1000px\" id=\"LegPartDetails\">");
                                sbLegDetailsBuffer.append("<thead>");
                                sbLegDetailsBuffer.append("<TR><TD colspan='10' class=\"new\" ><font size='4'></font></TD></TR>");
                                sbLegDetailsBuffer.append("<TR>");
                                sbLegDetailsBuffer.append("<TD align=\"center\"><B>Part</B></TD>");
                                sbLegDetailsBuffer.append("<TD align=\"center\"><B>Product Code</B></TD>");
                                sbLegDetailsBuffer.append("<TD align=\"center\"><B>Site for Product <BR></BR> Manufacturing</B></TD>");
                                sbLegDetailsBuffer.append("<TD align=\"center\"><B>Site if other</B></TD>");
                                sbLegDetailsBuffer.append("<TD align=\"center\"><B>Usage/Frequency <BR></BR>same as current <BR></BR>market product?</B></TD>");
                                sbLegDetailsBuffer.append("<TD align=\"center\"><B>Usage/Frequency <BR></BR>of Test Product, if<BR></BR> No enter details <BR></BR>or attach file</B></TD>");
                                sbLegDetailsBuffer.append("<TD align=\"center\"><B>Number of <BR></BR>Units per<BR></BR> Panelist</B></TD>");
                                sbLegDetailsBuffer.append("<TD align=\"center\"><B>Packing Site</B></TD>");
                                sbLegDetailsBuffer.append("<TD align=\"center\"><B>Washout Time <BR></BR>between <BR></BR>Products</B></TD>");
                                sbLegDetailsBuffer.append("<TD align=\"center\"><B>Select all <BR></BR>entries where<BR></BR> an EBP will be <BR></BR>utilzed in the execution of the Study</B></TD>");
                                sbLegDetailsBuffer.append("</TR></thead>");
                                sbLegDetailsBuffer.append("<tbody>");

                                Map mpLegPartInfo = null;
                                Object obj = null;
                                for(Iterator itrLegPart = mlLegPartDetails.iterator(); itrLegPart.hasNext();)
                                {
                                    strPlantSite = DomainConstants.EMPTY_STRING;
                                    strSiteOfPM = DomainConstants.EMPTY_STRING;
                                    mpLegPartInfo = (Map)itrLegPart.next();
                                    sbLegDetailsBuffer.append("<TR>");
                                    slPlantDetails = new StringList();
                                    obj = (Object)mpLegPartInfo.get("tomid["+pgPDFViewConstants.RELATIONSHIP_PG_MANUFACTURINGRESPONSIBILITY_LEG+"].from.name");
                                    if(obj instanceof StringList){
                                        slPlantDetails = (StringList)mpLegPartInfo.get("tomid["+pgPDFViewConstants.RELATIONSHIP_PG_MANUFACTURINGRESPONSIBILITY_LEG+"].from.name");
                                    } else if(obj instanceof String){
                                        strPlantSite = (String)mpLegPartInfo.get("tomid["+pgPDFViewConstants.RELATIONSHIP_PG_MANUFACTURINGRESPONSIBILITY_LEG+"].from.name");
                                        slPlantDetails.add(strPlantSite);
                                    }
                                    strSiteOfPM = FrameworkUtil.join(slPlantDetails, ",");
                                    strPartName =(String)mpLegPartInfo.get(DomainConstants.SELECT_NAME);
                                    strPC			=(String)mpLegPartInfo.get(pgV3Constants.SELECT_ATTRIBUTE_PGPRODUCTCODE);
                                    strSiteIfOther = (String)mpLegPartInfo.get(pgPDFViewConstants.SELECT_ATTRIBUTE_PG_SITEIFOTHERSELECTED);
                                    strUsageFreq = (String)mpLegPartInfo.get(pgPDFViewConstants.SELECT_ATTRIBUTE_PG_FREQUENCYSAMEASCURRENTMARKETPRODUCT);
                                    strFreq			=(String)mpLegPartInfo.get(pgV3Constants.SELECT_ATTRIBUTE_PGFREQUENCY);
                                    strNoFUnitsPerBag	=(String)mpLegPartInfo.get(pgPDFViewConstants.SELECT_ATTRIBUTE_PG_NUMBEROFUNITSPERBAG);
                                    strRelPackingSite	=(String)mpLegPartInfo.get(pgPDFViewConstants.SELECT_ATTRIBUTE_PG_RELPACKINGSITE);
                                    strWashTime		=(String)mpLegPartInfo.get(pgV3Constants.SELECT_ATTRIBUTE_PGWASHOUTTIMEBETWEENPRODUCTS);
                                    strEBPUtilized =(String)mpLegPartInfo.get(pgPDFViewConstants.SELECT_ATTRIBUTE_PG_EBPSTUDY);

                                    sbLegDetailsBuffer.append("<TD align=\"left\">"+validateString1(strPartName)+"</TD>");
                                    sbLegDetailsBuffer.append("<TD align=\"left\">"+validateString1(checkLessThanGreaterThan(strPC))+"</TD>");
                                    sbLegDetailsBuffer.append("<TD align=\"left\">"+validateString1(strSiteOfPM)+"</TD>");
                                    sbLegDetailsBuffer.append("<TD align=\"left\">"+validateString1(checkLessThanGreaterThan(strSiteIfOther))+"</TD>");
                                    sbLegDetailsBuffer.append("<TD align=\"left\">"+validateString1(strUsageFreq)+"</TD>");
                                    sbLegDetailsBuffer.append("<TD align=\"left\">"+validateString1(checkLessThanGreaterThan(strFreq))+"</TD>");
                                    sbLegDetailsBuffer.append("<TD align=\"left\">"+validateString1(strNoFUnitsPerBag)+"</TD>");
                                    sbLegDetailsBuffer.append("<TD align=\"left\">"+validateString1(checkLessThanGreaterThan(strRelPackingSite))+"</TD>");
                                    sbLegDetailsBuffer.append("<TD align=\"left\">"+validateString1(checkLessThanGreaterThan(strWashTime))+"</TD>");
                                    sbLegDetailsBuffer.append("<TD align=\"left\">"+validateString1(strEBPUtilized)+"</TD>");
                                    sbLegDetailsBuffer.append("</TR>");
                                }
                                sbLegDetailsBuffer.append("</tbody>");
                                sbLegDetailsBuffer.append("</TABLE><TR><TD><br /></TD></TR></TD></TR>");
                                sbLegDetailsBuffer.append("<TR><TD><TABLE class=\"pdf\" cellspacing=\"0\" width=\"1000px\" id=\"LegPartDetails2\">");
                                sbLegDetailsBuffer.append("<thead>");
                                sbLegDetailsBuffer.append("<TR>");
                                sbLegDetailsBuffer.append("<TR><TD colspan='10' class=\"new\" ></TD></TR>");
                                sbLegDetailsBuffer.append("<TD align=\"center\"><B>Part</B></TD>");
                                sbLegDetailsBuffer.append("<TD align=\"center\"><B>Provide specific <BR></BR>Micro <BR></BR>Information<BR></BR> based on BU<BR></BR> work process</B></TD>");
                                sbLegDetailsBuffer.append("<TD align=\"center\"><B># of Panelist <BR></BR>Completes</B></TD>");
                                sbLegDetailsBuffer.append("<TD align=\"center\"><B># of Panelist <BR></BR>Placements</B></TD>");
                                sbLegDetailsBuffer.append("<TD align=\"center\"><B># Units to Label</B></TD>");
                                sbLegDetailsBuffer.append("<TD align=\"center\"><B>Label Description<BR></BR> (attach if<BR></BR> needed)</B></TD>");
                                sbLegDetailsBuffer.append("<TD align=\"center\"><B>Is Product<BR></BR> repackaged?</B></TD>");
                                sbLegDetailsBuffer.append("<TD align=\"center\"><B>Unit Weight or<BR></BR> Volume</B></TD>");
                                sbLegDetailsBuffer.append("<TD align=\"center\"><B>Stability <BR></BR>Sample Count</B></TD>");
                                sbLegDetailsBuffer.append("<TD align=\"center\"><B>Analytical <BR></BR>Sample Count</B></TD>");
                                sbLegDetailsBuffer.append("</TR></thead>");
                                sbLegDetailsBuffer.append("<tbody>");

                                for(Iterator itrLegPart = mlLegPartDetails.iterator(); itrLegPart.hasNext();)
                                {
                                    mpLegPartInfo	= (Map)itrLegPart.next();
                                    strPartName 		=(String)mpLegPartInfo.get(DomainConstants.SELECT_NAME);
                                    strPgMicroMCT	    =(String)mpLegPartInfo.get(pgPDFViewConstants.SELECT_ATTRIBUTE_PG_MICROMCT);
                                    strPanelistCompletes=(String)mpLegPartInfo.get(pgPDFViewConstants.SELECT_ATTRIBUTE_PG_PANELISTCOMPLETES);
                                    strPlacements 		= (String)mpLegPartInfo.get(pgV3Constants.SELECT_ATTRIBUTE_PGPLACEMENTS);
                                    strUnitsToLabel 	= (String)mpLegPartInfo.get(pgPDFViewConstants.SELECT_ATTRIBUTE_PG_UNITSTOLABEL);
                                    strPgLabelling 		= (String)mpLegPartInfo.get(pgPDFViewConstants.SELECT_ATTRIBUTE_PG_LABELLING);
                                    strPgIsProductRepackaged = (String)mpLegPartInfo.get(pgPDFViewConstants.SELECT_ATTRIBUTE_PG_ISPRODUCYREPACKAGED);
                                    strPgUnitWeight 	= (String)mpLegPartInfo.get(pgPDFViewConstants.SELECT_ATTRIBUTE_PG_UNITWEIGHT);
                                    strSSC				=(String)mpLegPartInfo.get(pgV3Constants.SELECT_ATTRIBUTE_PGSTABILITYSAMPLECOUNT);
                                    strASC				=(String)mpLegPartInfo.get(pgV3Constants.SELECT_ATTRIBUTE_PGANALYTICALSAMPLECOUNT);

                                    sbLegDetailsBuffer.append("<TR>");
                                    sbLegDetailsBuffer.append("<TD align=\"left\">"+validateString1(strPartName)+"</TD>");
                                    sbLegDetailsBuffer.append("<TD align=\"left\">"+validateString1(checkLessThanGreaterThan(strPgMicroMCT))+"</TD>");
                                    sbLegDetailsBuffer.append("<TD align=\"left\">"+validateString1(checkLessThanGreaterThan(strPanelistCompletes))+"</TD>");
                                    sbLegDetailsBuffer.append("<TD align=\"left\">"+validateString1(checkLessThanGreaterThan(strPlacements))+"</TD>");
                                    sbLegDetailsBuffer.append("<TD align=\"left\">"+validateString1(checkLessThanGreaterThan(strUnitsToLabel))+"</TD>");
                                    sbLegDetailsBuffer.append("<TD align=\"left\">"+validateString1(checkLessThanGreaterThan(strPgLabelling))+"</TD>");
                                    sbLegDetailsBuffer.append("<TD align=\"left\">"+validateString1(strPgIsProductRepackaged)+"</TD>");
                                    sbLegDetailsBuffer.append("<TD align=\"left\">"+validateString1(checkLessThanGreaterThan(strPgUnitWeight))+"</TD>");
                                    sbLegDetailsBuffer.append("<TD align=\"left\">"+validateString1(strSSC)+"</TD>");
                                    sbLegDetailsBuffer.append("<TD align=\"left\">"+validateString1(strASC)+"</TD>");
                                    sbLegDetailsBuffer.append("</TR>");
                                }
                                sbLegDetailsBuffer.append("</tbody>");
                                sbLegDetailsBuffer.append("</TABLE><TR><TD><br /></TD></TR></TD></TR>");
                                sbLegDetailsBuffer.append("<TR><TD><TABLE class=\"pdf\" cellspacing=\"0\" width=\"1000px\" id=\"LegPartDetails3\">");
                                sbLegDetailsBuffer.append("<thead>");
                                sbLegDetailsBuffer.append("<TR>");
                                sbLegDetailsBuffer.append("<TR><TD colspan='7' class=\"new\" ></TD></TR>");
                                sbLegDetailsBuffer.append("<TD align=\"center\"><B>Part</B></TD>");
                                sbLegDetailsBuffer.append("<TD align=\"center\"><B>R&D Team <BR></BR>Sample Count</B></TD>");
                                sbLegDetailsBuffer.append("<TD align=\"center\"><B>R&D Retains</B></TD>");
                                sbLegDetailsBuffer.append("<TD align=\"center\"><B>Number of<BR></BR> Units to Ship</B></TD>");
                                sbLegDetailsBuffer.append("<TD align=\"center\"><B>Net Sample<BR></BR> Count</B></TD>");
                                sbLegDetailsBuffer.append("<TD align=\"center\"><B>Batch / <BR></BR>Manufacturer Lot #</B></TD>");
                                sbLegDetailsBuffer.append("<TD align=\"center\"><B>Comments</B></TD>");
                                sbLegDetailsBuffer.append("</TR></thead>");
                                sbLegDetailsBuffer.append("<tbody>");
                                for(Iterator itrLegPart = mlLegPartDetails.iterator(); itrLegPart.hasNext();)
                                {
                                    mpLegPartInfo = (Map)itrLegPart.next();
                                    strPartName 	  =(String)mpLegPartInfo.get(DomainConstants.SELECT_NAME);
                                    strRnDSC		  =(String)mpLegPartInfo.get(pgV3Constants.SELECT_ATTRIBUTE_PGRNDTEAMSAMPLECOUNT);
                                    strInSC			  =(String)mpLegPartInfo.get(pgV3Constants.SELECT_ATTRIBUTE_PGINVENTORYSAMPLECOUNT);
                                    strNoUS			  =(String)mpLegPartInfo.get(pgV3Constants.SELECT_ATTRIBUTE_PGNUMBEROFUNITSTOSHIP);
                                    strNetSC 		  = getNetSampleCount(strSSC,strASC,strRnDSC,strInSC,strNoUS);
                                    strBatch		  =(String)mpLegPartInfo.get(pgV3Constants.SELECT_ATTRIBUTE_PGBATCH);
                                    strComments 	  = (String)mpLegPartInfo.get(pgV3Constants.SELECT_ATTRIBUTE_COMMENTS);
                                    sbLegDetailsBuffer.append("<TR>");
                                    sbLegDetailsBuffer.append("<TD align=\"left\">"+validateString1(strPartName)+"</TD>");
                                    sbLegDetailsBuffer.append("<TD align=\"left\">"+validateString1(strRnDSC)+"</TD>");
                                    sbLegDetailsBuffer.append("<TD align=\"left\">"+validateString1(strInSC)+"</TD>");
                                    sbLegDetailsBuffer.append("<TD align=\"left\">"+validateString1(strNoUS)+"</TD>");
                                    sbLegDetailsBuffer.append("<TD align=\"left\">"+validateString1(strNetSC)+"</TD>");
                                    sbLegDetailsBuffer.append("<TD align=\"left\">"+validateString1(checkLessThanGreaterThan(strBatch))+"</TD>");
                                    sbLegDetailsBuffer.append("<TD align=\"left\">"+validateString1(checkLessThanGreaterThan(strComments))+"</TD>");
                                    sbLegDetailsBuffer.append("</TR>");
                                }
                                sbLegDetailsBuffer.append("</tbody>");
                                sbLegDetailsBuffer.append("</TABLE><TR><TD><br /></TD></TR></TD></TR>");
                            }
                        }
                    }
                }
            }
        }
        catch (Exception e)
        {
            e.printStackTrace();
            throw new MatrixException(e);
        }
        long endTime = new Date().getTime();
        System.out.println("Total Time has taken by the getLegDetailsForStudyProtocal Method is-->"+(endTime-startTime));
        return sbLegDetailsBuffer;
    }

    /**
     * Returns String after replacing symbols '<' or '>'
     * @param String
     * @return
     */
    public static String checkLessThanGreaterThan(String strReplace) {

        String strReplaced = new String();
        if(UIUtil.isNotNullAndNotEmpty(strReplace)) {
            try{
                strReplaced=strReplace.replaceAll("[<]","#LESS_THAN");
                strReplaced=strReplaced.replaceAll("[>]","#GREATER_THAN");
                strReplaced=strReplaced.toString();
            }
            catch (Exception e) {
                e.printStackTrace();
            }
        }
        return strReplaced;
    }
    //Added for IRM PDF View for Requirement 32753 for Release 2018x.3 - Ends
    //Added by DSM(Sogeti)-2015x.4 for PDF Views (Req - 8197) - Starts
//Modified by DSM(Sogeti)-2018x.5 for PDF Views (Defect-34789 ) - Starts
    /**
     * Retrieve tasks and signature information for MEP/SEP types
     * @param context
     * @param args
     * @return
     * @throws MatrixException
     */
    private StringBuilder getDSOTaskSignaturesTable(Context context,String strObjectId) throws Exception{
        long startTime = new Date().getTime();
        StringBuilder objectTasksBuffer= new StringBuilder();
        try{
            StringList busSelects = new StringList(2);
            busSelects.add(DomainConstants.SELECT_NAME);
            busSelects.add(DomainConstants.SELECT_ID);
            MapList mlTempTasks = null;
            Map object=null;
            String strContext="";
            MapList objectList = new MapList();
            boolean isHeaderAdded=false;
            Map proposedCAData  = com.dassault_systemes.enovia.enterprisechangemgt.util.ChangeUtil.getChangeObjectsInProposed(context, busSelects, new String[]{strObjectId}, 1);//REL_PG_CHANGE_AFFECTED_ITEM
            MapList maplistObjects = (MapList)proposedCAData.get(strObjectId);
            String strECId = "";
            if (maplistObjects != null && (maplistObjects.size() > 0)){
                Map paramMap = new HashMap();
                paramMap.put("reportFormat","PDF");
                paramMap.put("languageStr", "en");
                Map taskNamemap = new HashMap();
                Map Argmap = new HashMap();
                Vector vcTaskData=null;
                Map mData = null;
                String strTaskName = "";
                String strTaskApprover = "";
                String strTaskTitle = "";
                String strTaskApprovalStatus = "";
                String strTaskApprovalDueDate = "";
                String strTaskCommentsOrInstructions = "";
                for (Iterator iterator = maplistObjects.iterator(); iterator.hasNext();){
                    mData = (Map)iterator.next();
                    strECId = (String)mData.get(DomainConstants.SELECT_ID);
                    strECId = strECId.trim();
                    Argmap.put("objectId", strECId);
                    Argmap.put("languageStr", "en");
                    String[] argsSub= JPO.packArgs(Argmap);
                    paramMap.put("objectId",strECId);
                    taskNamemap.put("paramList",paramMap);
                    mlTempTasks= (MapList)pgPDFViewHelper.executeMainClassMethod(context, "emxLifecycle", "getCurrentTaskSignaturesOnObject", argsSub);
                    if(mlTempTasks!=null && !mlTempTasks.isEmpty()) {
                        if(!isHeaderAdded) {
                            objectTasksBuffer.append("<TR><TD><TABLE class=\"pdf\" cellspacing=\"0\" width=\"1000px\" id=\"pgFormulatedProductTable\">");
                            objectTasksBuffer.append("<thead>");
                            objectTasksBuffer.append("<TR><TD colspan='6' class=\"new\" ><font size='4'><b>Lifecycle/Approval Powerview<br /></b></font></TD></TR>");
                            objectTasksBuffer.append("<TR><TD align=\"left\" colspan='6' ><B><font size ='2'>Tasks/Signatures</font></B></TD></TR>");
                            objectTasksBuffer.append("<TR>");
                            objectTasksBuffer.append("<TD align=\"center\" width=\"90px\" ><B>Name</B></TD>");
                            objectTasksBuffer.append("<TD align=\"center\" width=\"150px\" ><B>Approver</B></TD>");
                            objectTasksBuffer.append("<TD align=\"center\" width=\"90px\" ><B>Title</B></TD>");
                            objectTasksBuffer.append("<TD align=\"center\" width=\"90px\" ><B>Approval Status</B></TD>");
                            objectTasksBuffer.append("<TD align=\"center\" width=\"100px\" ><B>Approval/Due Date</B></TD>");
                            objectTasksBuffer.append("<TD align=\"center\" width=\"100px\" ><B>Comments/Instructions</B></TD>");
                            objectTasksBuffer.append("</TR></thead>");
                            objectTasksBuffer.append("<tbody>");
                            isHeaderAdded=true;
                        }
                        for (Iterator iterator1 = mlTempTasks.iterator(); iterator1.hasNext();) {
                            object = (Map) iterator1.next();
                            objectList.clear();
                            objectList.add(object);
                            taskNamemap.put("objectList", objectList);
                            String[] argsTask= JPO.packArgs(taskNamemap);

                            vcTaskData=(Vector)pgPDFViewHelper.executeMainClassMethod(context, "emxLifecycle", "getNameForTaskSignatures", argsTask);
                            strTaskName = getVectorData(vcTaskData);

                            vcTaskData=(Vector)pgPDFViewHelper.executeMainClassMethod(context, "emxLifecycle", "getApproverForTaskSignatures", argsTask);
                            strTaskApprover = getVectorData(vcTaskData);
                            strTaskApprover = (String)PersonUtil.getFullName(context,strTaskApprover);
                            vcTaskData=(Vector)pgPDFViewHelper.executeMainClassMethod(context, "emxLifecycle", "getTitleForTaskSignatures", argsTask);
                            strTaskTitle = getVectorData(vcTaskData);

                            vcTaskData=(Vector)pgPDFViewHelper.executeMainClassMethod(context, "emxLifecycle", "getApprovalStatusForTaskSignatures", argsTask);
                            strTaskApprovalStatus = getVectorData(vcTaskData);

                            vcTaskData=(Vector)pgPDFViewHelper.executeMainClassMethod(context, "emxLifecycle", "getApprovalOrDueDateForTaskSignatures", argsTask);
                            strTaskApprovalDueDate = getVectorData(vcTaskData);

                            vcTaskData=(Vector)pgPDFViewHelper.executeMainClassMethod(context, "emxLifecycle", "getCommentsOrInstructionsForTaskSignatures", argsTask);
                            strTaskCommentsOrInstructions = getVectorData(vcTaskData);

                            objectTasksBuffer.append("<TR align=\"center\" class=\"pdf\">");
                            objectTasksBuffer.append("<TD width=\"100px\">"+validateString1(strTaskName)+"</TD>");
                            objectTasksBuffer.append("<TD width=\"100px\">"+validateString1(strTaskApprover)+"</TD>");
                            objectTasksBuffer.append("<TD width=\"150px\">"+validateString1(strTaskTitle)+"</TD>");
                            objectTasksBuffer.append("<TD width=\"150px\">"+validateString1(strTaskApprovalStatus)+"</TD>");
                            objectTasksBuffer.append("<TD width=\"150px\">"+validateString1(strTaskApprovalDueDate)+"</TD>");
                            objectTasksBuffer.append("<TD width=\"150px\">"+validateString1(strTaskCommentsOrInstructions)+"</TD>");
                            objectTasksBuffer.append("</TR>");
                        }
                    }
                }
            }
            if(isHeaderAdded) {
                objectTasksBuffer.append("</tbody>");
                objectTasksBuffer.append("</TABLE><TR><TD><br /></TD></TR></TD></TR>");
            }
        }
        catch (Exception e)
        {
            e.printStackTrace();
            throw new MatrixException(e);
        }
        long endTime = new Date().getTime();
        System.out.println("Total Time has taken by the  getDSOTaskSignaturesTable Method is-->"+(endTime-startTime));
        return objectTasksBuffer;
    }
    //Modified by DSM(Sogeti)-2018x.5 for PDF Views (Defect-34789 ) - Ends
    //Added by DSM(Sogeti)-2015x.4 for PDF Views (Req - 8197) - Ends
    //Added by DSM Sogeti for 2015x.5 REQID 19633 Starts
    private StringBuilder getPlatformFranchiseFieldValues(Context context,String strObjectId) throws Exception{
        StringBuilder sbPlatformFranchise = new StringBuilder();
        try{
            if(UIUtil.isNotNullAndNotEmpty(strObjectId)){
                DomainObject domObject= DomainObject.newInstance(context,strObjectId);
                StringList busSelect = new StringList(1);
                busSelect.add(DomainConstants.SELECT_NAME);
                StringList relSelect = new StringList(3);
                relSelect.add(pgV3Constants.SELECT_ATTRIBUTE_PGPLATFORMTYPE);
                relSelect.add(pgV3Constants.SELECT_ATTRIBUTE_PGCHASSISTYPE);
                relSelect.add(DomainRelationship.SELECT_NAME);
                String strpgChassisType = null;
                String strpgPlatformType = null;
                String strValueToAppend = null;
                String strRelName = null;
                Map mpPlatFormFranchise = null;
                //Added by IRM-2018x.3 for PDF Views (Req Id #32753) : Starts
                String strBusniessArea = DomainConstants.EMPTY_STRING;
                //Added by IRM-2018x.3 for PDF Views (Req Id #32753) : Ends

                StringBuilder sbProductTechnologyChassis 	= new StringBuilder();
                StringBuilder sbPackageChassis 			= new StringBuilder();
                StringBuilder sbFranchisePlatform 		= new StringBuilder();
                StringBuilder sbProductCategoryPlatform 	= new StringBuilder();
                StringBuilder sbMaterialPlatform 			= new StringBuilder();
                StringBuilder sbTechnicalBuildingBlocks 	= new StringBuilder();
                StringBuilder sbProductTechnologyPlatform = new StringBuilder();
                StringBuilder sbPackagePlatform 			= new StringBuilder();
                StringBuilder sbProductProcessPlatform 	= new StringBuilder();
                StringBuilder sbProductEquipmentPlatform 	= new StringBuilder();
                StringBuilder sbPackageEquipmentPlatform 	= new StringBuilder();
                StringBuilder sbPackageProcessPlatform 	= new StringBuilder();
                //Platform 2018x.3 : Platform, Chassis and Business Area will be saved as attribute value instead of connection for IRM Documents
                final String TYPE_PKGVALIDATION = PropertyUtil.getSchemaProperty(context, "type_pgPKGValidation");
                final String TYPE_PKGDEV_OTHER = PropertyUtil.getSchemaProperty(context, "type_pgPKGDevelopment");
                final String TYPE_PKGSTABILITY = PropertyUtil.getSchemaProperty(context, "type_pgPKGStability");
                final String TYPE_PKGCONSUMER_PROPOSITION = PropertyUtil.getSchemaProperty(context, "type_pgPKGConsumerProposition");
                final String TYPE_CORE_INNOVATION_RECORD = PropertyUtil.getSchemaProperty(context, "type_pgPKGProductReadiness");
                final String TYPE_DI_PLATFORM = PropertyUtil.getSchemaProperty(context, "type_pgPKGDIPlatform");

                if(domObject.isKindOf(context, TYPE_PKGVALIDATION) || domObject.isKindOf(context, TYPE_PKGDEV_OTHER) || domObject.isKindOf(context, TYPE_PKGSTABILITY) || domObject.isKindOf(context, TYPE_PKGCONSUMER_PROPOSITION) || domObject.isKindOf(context, TYPE_CORE_INNOVATION_RECORD) || domObject.isKindOf(context, TYPE_DI_PLATFORM)) {

                    String ATTRIBUTE_FRANCHISEPLATFORM = PropertyUtil.getSchemaProperty(context, "attribute_pgFranchisePlatform");
                    String ATTRIBUTE_PRODUCTCATEGORYPLATFORM = PropertyUtil.getSchemaProperty(context, "attribute_pgProductCategoryPlatform");
                    String ATTRIBUTE_PRODUCTTECHNOLOGYPLATFORM = PropertyUtil.getSchemaProperty(context, "attribute_pgProductTechnologyPlatform");
                    String ATTRIBUTE_PRODUCTTECHNOLOGYCHASSIS = PropertyUtil.getSchemaProperty(context, "attribute_pgProductTechnologyChassis");
                    String ATTRIBUTE_PRODUCTPROCESSPLATFORM = PropertyUtil.getSchemaProperty(context, "attribute_pgProductProcessPlatform");
                    String ATTRIBUTE_PRODUCTEQUIPMENTPLATFORM = PropertyUtil.getSchemaProperty(context, "attribute_pgProductEquipmentPlatform");
                    String ATTRIBUTE_PACKAGEPLATFORM = PropertyUtil.getSchemaProperty(context, "attribute_pgPackagePlatform");
                    String ATTRIBUTE_PACKAGECHASSIS = PropertyUtil.getSchemaProperty(context, "attribute_pgPackageChassis");
                    String ATTRIBUTE_PACKAGEPROCESSPLATFORM = PropertyUtil.getSchemaProperty(context, "attribute_pgPackageProcessPlatform");
                    String ATTRIBUTE_MATERIALPLATFORM = PropertyUtil.getSchemaProperty(context, "attribute_pgMaterialPlatform");
                    String ATTRIBUTE_TECHNICALBUILDINGBLOCKS = PropertyUtil.getSchemaProperty(context, "attribute_pgTechnicalBuildingBlocks");
                    String ATTRIBUTE_PACKAGEEQUIPMENTPLATFORM = PropertyUtil.getSchemaProperty(context, "attribute_pgPackageEquipmentPlatform");
                    //Added by IRM-2018x.3 for PDF Views (Req Id #32753) : Starts
                    String ATTRIBUTE_PGBUSINESSAREA = PropertyUtil.getSchemaProperty(context, "attribute_pgBusinessArea");
                    //Added by IRM-2018x.3 for PDF Views (Req Id #32753) : ends

                    String SELECT_ATTRIBUTE_FRANCHISEPLATFORM = "attribute["+ATTRIBUTE_FRANCHISEPLATFORM+"]";
                    String SELECT_ATTRIBUTE_PRODUCTCATEGORYPLATFORM = "attribute["+ATTRIBUTE_PRODUCTCATEGORYPLATFORM+"]";
                    String SELECT_ATTRIBUTE_PRODUCTTECHNOLOGYPLATFORM = "attribute["+ATTRIBUTE_PRODUCTTECHNOLOGYPLATFORM+"]";
                    String SELECT_ATTRIBUTE_PRODUCTTECHNOLOGYCHASSIS = "attribute["+ATTRIBUTE_PRODUCTTECHNOLOGYCHASSIS+"]";
                    String SELECT_ATTRIBUTE_PRODUCTPROCESSPLATFORM = "attribute["+ATTRIBUTE_PRODUCTPROCESSPLATFORM+"]";
                    String SELECT_ATTRIBUTE_PRODUCTEQUIPMENTPLATFORM = "attribute["+ATTRIBUTE_PRODUCTEQUIPMENTPLATFORM+"]";
                    String SELECT_ATTRIBUTE_PACKAGEPLATFORM = "attribute["+ATTRIBUTE_PACKAGEPLATFORM+"]";
                    String SELECT_ATTRIBUTE_PACKAGECHASSIS = "attribute["+ATTRIBUTE_PACKAGECHASSIS+"]";
                    String SELECT_ATTRIBUTE_PACKAGEPROCESSPLATFORM = "attribute["+ATTRIBUTE_PACKAGEPROCESSPLATFORM+"]";
                    String SELECT_ATTRIBUTE_MATERIALPLATFORM = "attribute["+ATTRIBUTE_MATERIALPLATFORM+"]";
                    String SELECT_ATTRIBUTE_TECHNICALBUILDINGBLOCKS = "attribute["+ATTRIBUTE_TECHNICALBUILDINGBLOCKS+"]";
                    String SELECT_ATTRIBUTE_PACKAGEEQUIPMENTPLATFORM = "attribute["+ATTRIBUTE_PACKAGEEQUIPMENTPLATFORM+"]";
                    //Added by IRM-2018x.3 for PDF Views (Req Id #32753) : Starts
                    String SELECT_ATTRIBUTE_PGBUSINESSAREA = "attribute["+ATTRIBUTE_PGBUSINESSAREA+"]";
                    //Added by IRM-2018x.3 for PDF Views (Req Id #32753) : ends

                    StringList slbusSelect = new StringList(12);
                    slbusSelect.add(SELECT_ATTRIBUTE_FRANCHISEPLATFORM);
                    slbusSelect.add(SELECT_ATTRIBUTE_PRODUCTCATEGORYPLATFORM);
                    slbusSelect.add(SELECT_ATTRIBUTE_PRODUCTTECHNOLOGYPLATFORM);
                    slbusSelect.add(SELECT_ATTRIBUTE_PRODUCTPROCESSPLATFORM);
                    slbusSelect.add(SELECT_ATTRIBUTE_PRODUCTEQUIPMENTPLATFORM);
                    slbusSelect.add(SELECT_ATTRIBUTE_PACKAGEPLATFORM);
                    slbusSelect.add(SELECT_ATTRIBUTE_PACKAGEPROCESSPLATFORM);
                    slbusSelect.add(SELECT_ATTRIBUTE_MATERIALPLATFORM);
                    slbusSelect.add(SELECT_ATTRIBUTE_TECHNICALBUILDINGBLOCKS);
                    slbusSelect.add(SELECT_ATTRIBUTE_PACKAGEEQUIPMENTPLATFORM);
                    slbusSelect.add(SELECT_ATTRIBUTE_PRODUCTTECHNOLOGYCHASSIS);
                    slbusSelect.add(SELECT_ATTRIBUTE_PACKAGECHASSIS);
                    //Added by IRM-2018x.3 for PDF Views (Req Id #32753) : starts
                    slbusSelect.add(SELECT_ATTRIBUTE_PGBUSINESSAREA);
                    //Added by IRM-2018x.3 for PDF Views (Req Id #32753) : ends

                    MapList objInfoListIDs = DomainObject.getInfo(context, new String[] { strObjectId }, slbusSelect);
                    Map<?, ?> objInfoMap = (Map<?, ?>) objInfoListIDs.get(0);
                    //Added by IRM-2018x.3 for PDF Views (Req Id #32753) : starts
                    strBusniessArea = (String)objInfoMap.get(pgPDFViewConstants.SELECT_ATTRIBUTE_PGBUSINESSAREA);
                    //Added by IRM-2018x.3 for PDF Views (Req Id #32753) : ends
                    StringList slMultiValAttrList = new StringList();
                    String strMultiValAttr = "";
                    String strSelectName = "";
                    StringBuilder sbTemp = null;
                    Map<String, String> mapTemp = new HashMap<>();
                    for(int i=0; i<slbusSelect.size(); i++) {
                        strSelectName= (String)slbusSelect.get(i);
                        strMultiValAttr = (String) objInfoMap.get(strSelectName);
                        slMultiValAttrList = FrameworkUtil.split(strMultiValAttr, SelectConstants.cSelectDelimiter);
                        if(!slMultiValAttrList.isEmpty()) {
                            sbTemp = new StringBuilder();
                            for(int j=0; j<slMultiValAttrList.size(); j++) {

                                if(UIUtil.isNotNullAndNotEmpty(sbTemp.toString()))
                                    sbTemp.append("|");

                                sbTemp.append(slMultiValAttrList.get(j));
                            }

                            if(SELECT_ATTRIBUTE_FRANCHISEPLATFORM.equals(strSelectName)) {
                                sbFranchisePlatform = sbTemp;
                            } else if(SELECT_ATTRIBUTE_PRODUCTCATEGORYPLATFORM.equals(strSelectName)) {
                                sbProductCategoryPlatform = sbTemp;
                            } else if(SELECT_ATTRIBUTE_PRODUCTTECHNOLOGYPLATFORM.equals(strSelectName)) {
                                sbProductTechnologyPlatform = sbTemp;
                            } else if(SELECT_ATTRIBUTE_PRODUCTPROCESSPLATFORM.equals(strSelectName)) {
                                sbProductProcessPlatform = sbTemp;
                            } else if(SELECT_ATTRIBUTE_PRODUCTEQUIPMENTPLATFORM.equals(strSelectName)) {
                                sbProductEquipmentPlatform = sbTemp;
                            } else if(SELECT_ATTRIBUTE_PACKAGEPLATFORM.equals(strSelectName)) {
                                sbPackagePlatform = sbTemp;
                            } else if(SELECT_ATTRIBUTE_PACKAGEPROCESSPLATFORM.equals(strSelectName)) {
                                sbPackageProcessPlatform = sbTemp;
                            } else if(SELECT_ATTRIBUTE_MATERIALPLATFORM.equals(strSelectName)) {
                                sbMaterialPlatform = sbTemp;
                            } else if(SELECT_ATTRIBUTE_TECHNICALBUILDINGBLOCKS.equals(strSelectName)) {
                                sbTechnicalBuildingBlocks = sbTemp;
                            } else if(SELECT_ATTRIBUTE_PACKAGEEQUIPMENTPLATFORM.equals(strSelectName)) {
                                sbPackageEquipmentPlatform = sbTemp;
                            } else if(SELECT_ATTRIBUTE_PRODUCTTECHNOLOGYCHASSIS.equals(strSelectName)) {
                                sbProductTechnologyChassis = sbTemp;
                            } else if(SELECT_ATTRIBUTE_PACKAGECHASSIS.equals(strSelectName)) {
                                sbPackageChassis = sbTemp;
                            }

                        }
                    }
                } else {

                    MapList mlDerivedFromObjects = domObject.getRelatedObjects(context, //Context
                            pgV3Constants.RELATIONSHIP_PGDOCUMENTTOCHASSIS+","+pgV3Constants.RELATIONSHIP_PGDOCUMENTTOPLATFORM, //relPattern
                            pgV3Constants.TYPE_PGPLIPLATFORM+","+pgV3Constants.TYPE_PGPLICHASSIS, //typePattern
                            busSelect, //objectSelects
                            relSelect, //relationshipSelects
                            false, //getTo - Get Parent Data
                            true, //getFrom - Get Child Data
                            (short) 1, //recurseToLevel
                            null, //objectWhere
                            null, //relationshipWhere
                            0);
                    for(Iterator itrLegPart = mlDerivedFromObjects.iterator(); itrLegPart.hasNext();)
                    {
                        mpPlatFormFranchise = (Map)itrLegPart.next();
                        strpgChassisType  = (String)mpPlatFormFranchise.get(pgV3Constants.SELECT_ATTRIBUTE_PGCHASSISTYPE);
                        strpgPlatformType = (String)mpPlatFormFranchise.get(pgV3Constants.SELECT_ATTRIBUTE_PGPLATFORMTYPE);
                        strValueToAppend  = (String)mpPlatFormFranchise.get(DomainConstants.SELECT_NAME);
                        strRelName 		  = (String)mpPlatFormFranchise.get(DomainRelationship.SELECT_NAME);
                        //Added by IRM-2018x.3 for PDF Views (Req Id #32753) : starts
                        strBusniessArea = (String)mpPlatFormFranchise.get(pgPDFViewConstants.SELECT_ATTRIBUTE_PGBUSINESSAREA);
                        //Added by IRM-2018x.3 for PDF Views (Req Id #32753) : ends

                        if(pgV3Constants.RELATIONSHIP_PGDOCUMENTTOCHASSIS.equals(strRelName)){
                            if(UIUtil.isNotNullAndNotEmpty(strpgChassisType) && "Product Technology Chassis".equals(strpgChassisType))
                            {
                                if(UIUtil.isNotNullAndNotEmpty(sbProductTechnologyChassis.toString()))
                                    sbProductTechnologyChassis.append("|");
                                sbProductTechnologyChassis.append(strValueToAppend);
                            }
                            else if(UIUtil.isNotNullAndNotEmpty(strpgChassisType) && "Package Chassis".equals(strpgChassisType)){
                                if(UIUtil.isNotNullAndNotEmpty(sbPackageChassis.toString()))
                                    sbPackageChassis.append("|");
                                sbPackageChassis.append(strValueToAppend);
                            }
                        }
                        else if(pgV3Constants.RELATIONSHIP_PGDOCUMENTTOPLATFORM.equals(strRelName)){
                            if(UIUtil.isNotNullAndNotEmpty(strpgPlatformType) && "Franchise Platform".equals(strpgPlatformType)){
                                if(UIUtil.isNotNullAndNotEmpty(sbFranchisePlatform.toString()))
                                    sbFranchisePlatform.append("|");
                                sbFranchisePlatform.append(strValueToAppend);
                            }
                            else if(UIUtil.isNotNullAndNotEmpty(strpgPlatformType) && "Product Category Platform".equals(strpgPlatformType)){
                                if(UIUtil.isNotNullAndNotEmpty(sbProductCategoryPlatform.toString()))
                                    sbProductCategoryPlatform.append("|");
                                sbProductCategoryPlatform.append(strValueToAppend);
                            }
                            else if(UIUtil.isNotNullAndNotEmpty(strpgPlatformType) && "Material Platform".equals(strpgPlatformType)){
                                if(UIUtil.isNotNullAndNotEmpty(sbMaterialPlatform.toString()))
                                    sbMaterialPlatform.append("|");
                                sbMaterialPlatform.append(strValueToAppend);
                            }
                            else if(UIUtil.isNotNullAndNotEmpty(strpgPlatformType) && "Technical Building Blocks".equals(strpgPlatformType)){
                                if(UIUtil.isNotNullAndNotEmpty(sbTechnicalBuildingBlocks.toString()))
                                    sbTechnicalBuildingBlocks.append("|");
                                sbTechnicalBuildingBlocks.append(strValueToAppend);
                            }
                            else if(UIUtil.isNotNullAndNotEmpty(strpgPlatformType) && "Product Technology Platform".equals(strpgPlatformType)){
                                if(UIUtil.isNotNullAndNotEmpty(sbProductTechnologyPlatform.toString()))
                                    sbProductTechnologyPlatform.append("|");
                                sbProductTechnologyPlatform.append(strValueToAppend);
                            }
                            else if(UIUtil.isNotNullAndNotEmpty(strpgPlatformType) && "Package Platform".equals(strpgPlatformType)){
                                if(UIUtil.isNotNullAndNotEmpty(sbPackagePlatform.toString()))
                                    sbPackagePlatform.append("|");
                                sbPackagePlatform.append(strValueToAppend);
                            }
                            else if(UIUtil.isNotNullAndNotEmpty(strpgPlatformType) && "Product Process Platformm".equals(strpgPlatformType)){
                                if(UIUtil.isNotNullAndNotEmpty(sbProductProcessPlatform.toString()))
                                    sbProductProcessPlatform.append("|");
                                sbProductProcessPlatform.append(strValueToAppend);
                            }
                            else if(UIUtil.isNotNullAndNotEmpty(strpgPlatformType) && "Product Equipment Platform".equals(strpgPlatformType)){
                                if(UIUtil.isNotNullAndNotEmpty(sbProductEquipmentPlatform.toString()))
                                    sbProductEquipmentPlatform.append("|");
                                sbProductEquipmentPlatform.append(strValueToAppend);
                            }
                            else if(UIUtil.isNotNullAndNotEmpty(strpgPlatformType) && "Package Equipment Platform".equals(strpgPlatformType)){
                                if(UIUtil.isNotNullAndNotEmpty(sbPackageEquipmentPlatform.toString()))
                                    sbPackageEquipmentPlatform.append("|");
                                sbPackageEquipmentPlatform.append(strValueToAppend);
                            }
                            else if(UIUtil.isNotNullAndNotEmpty(strpgPlatformType) && "Package Process Platform".equals(strpgPlatformType)){
                                if(UIUtil.isNotNullAndNotEmpty(sbPackageProcessPlatform.toString()))
                                    sbPackageProcessPlatform.append("|");
                                sbPackageProcessPlatform.append(strValueToAppend);
                            }
                        }
                    }

                }
                sbPlatformFranchise.append("<TR><TD><TABLE class=\"pdf\" cellspacing=\"0\" width=\"1000px\" id=\"LegDetails\">");
                sbPlatformFranchise.append("<TR><TD colspan='2' class=\"new\" ><font size='4'><B>Chassis and Platform</B></font></TD></TR>");
                sbPlatformFranchise.append("<TR>");
                sbPlatformFranchise.append("<TD align=\"left\" width=\"250px\"><B>Business Area</B></TD>");
                sbPlatformFranchise.append("<TD align=\"center\" width=\"250px\">"+validateString1(strBusniessArea)+"</TD>");
                sbPlatformFranchise.append("<TD align=\"left\" width=\"250px\"><B>Product Technology Platform</B></TD>");
                sbPlatformFranchise.append("<TD align=\"center\" width=\"250px\">"+validateString1(sbProductTechnologyPlatform.toString())+"</TD>");
                sbPlatformFranchise.append("<TD align=\"left\" width=\"250px\"><B>Package Platform</B></TD>");
                sbPlatformFranchise.append("<TD align=\"center\" width=\"250px\">"+validateString1(sbPackagePlatform.toString())+"</TD>");
                sbPlatformFranchise.append("</TR>");

                sbPlatformFranchise.append("<TR>");
                sbPlatformFranchise.append("<TD align=\"left\" width=\"250px\"><B>Product Category Platform</B></TD>");
                sbPlatformFranchise.append("<TD align=\"center\" width=\"250px\">"+validateString1(sbProductCategoryPlatform.toString())+"</TD>");
                sbPlatformFranchise.append("<TD align=\"left\" width=\"250px\"><B>Product Technology Chassis</B></TD>");
                sbPlatformFranchise.append("<TD align=\"center\" width=\"250px\">"+validateString1(sbProductTechnologyChassis.toString())+"</TD>");
                sbPlatformFranchise.append("<TD align=\"left\" width=\"250px\"><B>Package Process Platform</B></TD>");
                sbPlatformFranchise.append("<TD align=\"center\" width=\"250px\">"+validateString1(sbPackageProcessPlatform.toString())+"</TD>");
                sbPlatformFranchise.append("</TR>");

                sbPlatformFranchise.append("<TR>");
                sbPlatformFranchise.append("<TD align=\"left\" width=\"250px\"><B>Franchise Platform</B></TD>");
                sbPlatformFranchise.append("<TD align=\"center\" width=\"250px\">"+validateString1(sbFranchisePlatform.toString())+"</TD>");
                sbPlatformFranchise.append("<TD align=\"left\" width=\"250px\"><B>Product Process Platform</B></TD>");
                sbPlatformFranchise.append("<TD align=\"center\" width=\"250px\">"+validateString1(sbProductProcessPlatform.toString())+"</TD>");
                sbPlatformFranchise.append("<TD align=\"left\" width=\"250px\"><B>Package Chassis</B></TD>");
                sbPlatformFranchise.append("<TD align=\"center\" width=\"250px\">"+validateString1(sbPackageChassis.toString())+"</TD>");
                sbPlatformFranchise.append("</TR>");

                sbPlatformFranchise.append("<TR>");
                sbPlatformFranchise.append("<TD align=\"left\" width=\"250px\"><B>Material Platform</B></TD>");
                sbPlatformFranchise.append("<TD align=\"center\" width=\"250px\">"+validateString1(sbMaterialPlatform.toString())+"</TD>");
                sbPlatformFranchise.append("<TD align=\"left\" width=\"250px\"><B>Product Equipment Platform</B></TD>");
                sbPlatformFranchise.append("<TD align=\"center\" width=\"250px\">"+validateString1(sbProductEquipmentPlatform.toString())+"</TD>");
                sbPlatformFranchise.append("<TD align=\"left\" width=\"250px\"><B>Package Equipment Platform</B></TD>");
                sbPlatformFranchise.append("<TD align=\"center\" width=\"250px\">"+validateString1(sbProductEquipmentPlatform.toString())+"</TD>");
                sbPlatformFranchise.append("</TR>");
                sbPlatformFranchise.append("<TR>");
                sbPlatformFranchise.append("<TD align=\"left\" width=\"250px\"><B>Technical Building Blocks</B></TD>");
                sbPlatformFranchise.append("<TD colspan=\"5\">"+validateString1(sbTechnicalBuildingBlocks.toString())+"</TD>");
                sbPlatformFranchise.append("</TR>");
                //Added by IRM-2018x.3 for PDF Views (Req Id #32753) : ends

				/*sbPlatformFranchise.append("<TR><TD><TABLE class=\"pdf\" cellspacing=\"0\" width=\"1000px\" id=\"LegDetails\">");
				sbPlatformFranchise.append("<TR><TD colspan='2' class=\"new\" ><font size='4'><B>Platform and Chassis</B></font></TD></TR>");
				sbPlatformFranchise.append("<TR>");
				sbPlatformFranchise.append("<TD align=\"left\" width=\"250px\"><B>Franchise Platform</B></TD>");
				sbPlatformFranchise.append("<TD align=\"center\" width=\"250px\">"+validateString1(sbFranchisePlatform.toString())+"</TD>");sbPlatformFranchise.append("<TD align=\"left\" width=\"250px\"><B>Product Technology Platform</B></TD>");
				sbPlatformFranchise.append("<TD align=\"center\" width=\"250px\">"+validateString1(sbProductTechnologyPlatform.toString())+"</TD>");
				sbPlatformFranchise.append("</TR>");
				sbPlatformFranchise.append("<TR>");
				sbPlatformFranchise.append("<TD align=\"left\" width=\"250px\"><B>Product Process Platform</B></TD>");
				sbPlatformFranchise.append("<TD align=\"center\" width=\"250px\">"+validateString1(sbProductProcessPlatform.toString())+"</TD>");sbPlatformFranchise.append("<TD align=\"left\" width=\"250px\"><B>Product Category Platform</B></TD>");
				sbPlatformFranchise.append("<TD align=\"center\" width=\"250px\">"+validateString1(sbProductCategoryPlatform.toString())+"</TD>");
				sbPlatformFranchise.append("</TR>");
				sbPlatformFranchise.append("<TR>");
				sbPlatformFranchise.append("<TD align=\"left\" width=\"250px\"><B>Product Technology Chassis</B></TD>");
				sbPlatformFranchise.append("<TD align=\"center\" width=\"250px\">"+validateString1(sbProductTechnologyChassis.toString())+"</TD>");sbPlatformFranchise.append("<TD align=\"left\" width=\"250px\"><B>Package Process Platform</B></TD>");
				sbPlatformFranchise.append("<TD align=\"center\" width=\"250px\">"+validateString1(sbPackageProcessPlatform.toString())+"</TD>");
				sbPlatformFranchise.append("</TR>");
				sbPlatformFranchise.append("<TR>");
				sbPlatformFranchise.append("<TD align=\"left\" width=\"250px\"><B>Material Platform</B></TD>");
				sbPlatformFranchise.append("<TD align=\"center\" width=\"250px\">"+validateString1(sbMaterialPlatform.toString())+"</TD>");sbPlatformFranchise.append("<TD align=\"left\" width=\"250px\"><B>Package Platform</B></TD>");
				sbPlatformFranchise.append("<TD align=\"center\" width=\"250px\">"+validateString1(sbPackagePlatform.toString())+"</TD>");
				sbPlatformFranchise.append("</TR>");
				sbPlatformFranchise.append("<TR>");
				sbPlatformFranchise.append("<TD align=\"left\" width=\"250px\"><B>Product Equipment Platform</B></TD>");
				sbPlatformFranchise.append("<TD align=\"center\" width=\"250px\">"+validateString1(sbProductEquipmentPlatform.toString())+"</TD>");sbPlatformFranchise.append("<TD align=\"left\" width=\"250px\"><B>Technical Building Blocks</B></TD>");
				sbPlatformFranchise.append("<TD align=\"center\" width=\"250px\">"+validateString1(sbTechnicalBuildingBlocks.toString())+"</TD>");
				sbPlatformFranchise.append("</TR>");
				sbPlatformFranchise.append("<TR>");
				sbPlatformFranchise.append("<TD align=\"left\" width=\"250px\"><B>Package Chassis</B></TD>");
				sbPlatformFranchise.append("<TD align=\"center\" width=\"250px\">"+validateString1(sbPackageChassis.toString())+"</TD>");
				sbPlatformFranchise.append("<TD align=\"left\" width=\"250px\"><B>Package Equipment Platform</B></TD>");
				sbPlatformFranchise.append("<TD align=\"center\" width=\"250px\">"+validateString1(sbProductEquipmentPlatform.toString())+"</TD>");
				sbPlatformFranchise.append("</TR>");*/
                sbPlatformFranchise.append("</TABLE><TR><TD><br /></TD></TR></TD></TR>");
            }
        }
        catch (Exception e)
        {
            e.printStackTrace();
            throw new MatrixException(e);
        }
        return sbPlatformFranchise;
    }
    //Added by IRM-2018x.3 Study Protocol - PDF Views for Requirement #32753 - Start
    /**
     * @param context
     * @param String
     * @return StringBuilder
     * @throws Exception
     */
    private StringBuilder getStudyDesignFieldValues(Context context,String strObjectId) throws Exception{
        StringBuilder sbStudyDesign = new StringBuilder();
        String attribute_pgTypeOfResearch			= pgPDFViewConstants.SELECT_ATTRIBUTE_PGTYPEOFRESEARCH;
        String attribute_pgIRMStudyTypeFormat		= pgPDFViewConstants.SELECT_ATTRIBUTE_PGIRMSTUDYTYPEFORMAT;
        String attribute_pgIRMConfidenceLevelSignificanceTesting = pgPDFViewConstants.SELECT_ATTRIBUTE_PGIRMCONFIDENCELEVELSIGNIFICANCETESTING;
        String attribute_pgIRMTotalNoOfPanelists 	= pgPDFViewConstants.SELECT_ATTRIBUTE_PGIRMTOTALNOOFPANELISTS;
        String attribute_pgStudyPanelistPurchaseIntent 	= pgPDFViewConstants.SELECT_ATTRIBUTE_PGSTUDYPANELISTPURCHASEINTENT;
        String attribute_pgNotifyPatentOffice 		= pgPDFViewConstants.SELECT_ATTRIBUTE_PGNOTIFYPATENTOFFICE;
        String rel_pgStudyProtocolToStudyType		= pgPDFViewConstants.RELATIONSHIP_PGSTUDYPROTOCOLTOSTUDYTYPE;
        String rel_pgStudyProtocolToAdditionalServices		= pgPDFViewConstants.RELATIONSHIP_PGSTUDYPROTOCOLTOADDITIONALSERVICES;
        try{
            Map<String,String>  objInfoList;
            if(UIUtil.isNotNullAndNotEmpty(strObjectId)){
                DomainObject domObject= DomainObject.newInstance(context,strObjectId);
                StringList slbusSelect = new StringList(10);
                slbusSelect.add(attribute_pgIRMTotalNoOfPanelists);
                slbusSelect.add(attribute_pgTypeOfResearch);
                slbusSelect.add(attribute_pgIRMStudyTypeFormat);
                slbusSelect.add(attribute_pgIRMConfidenceLevelSignificanceTesting);
                slbusSelect.add(attribute_pgIRMTotalNoOfPanelists);
                slbusSelect.add(attribute_pgStudyPanelistPurchaseIntent);
                slbusSelect.add(attribute_pgNotifyPatentOffice);

                String str_pgPLIStudyType = DomainConstants.EMPTY_STRING, str_pgPLIAdditionalServices =DomainConstants.EMPTY_STRING;
                objInfoList = (Map<String, String>) (DomainObject.getInfo(context, 						//context
                        new String[] { strObjectId }, 	//objectid
                        slbusSelect)).get(0);			//bus Selectable

                Map rel_pgPLIStudyType = domObject.getRelatedObject(context,						// context
                        rel_pgStudyProtocolToStudyType,	// relType
                        true,							//getfrom
                        new StringList(DomainAccess.KEY_ACCESS_NAME), //object selectable
                        new StringList(1));				// relSelectable

                str_pgPLIStudyType = rel_pgPLIStudyType== null ?  DomainConstants.EMPTY_STRING : (String) rel_pgPLIStudyType.get(DomainAccess.KEY_ACCESS_NAME) ;

                Map rel_pgPLIAdditionalServices = domObject.getRelatedObject(context,
                        rel_pgStudyProtocolToAdditionalServices,
                        true,new StringList(DomainAccess.KEY_ACCESS_NAME),
                        new StringList(1));

                str_pgPLIAdditionalServices = rel_pgPLIAdditionalServices==null? DomainConstants.EMPTY_STRING : (String) rel_pgPLIAdditionalServices.get(DomainAccess.KEY_ACCESS_NAME);
                String pgIRMStudyTypeFormat = objInfoList.get(attribute_pgIRMStudyTypeFormat);
                String pgIRMConfidenceLevelSignificanceTesting =objInfoList.get(attribute_pgIRMConfidenceLevelSignificanceTesting);

                if(UIUtil.isNotNullAndNotEmpty(pgIRMStudyTypeFormat)) {
                    pgIRMStudyTypeFormat =pgIRMStudyTypeFormat.replaceAll("[<]","#LESS_THAN");
                    pgIRMStudyTypeFormat =pgIRMStudyTypeFormat.replaceAll("[>]","#GREATER_THAN");
                }
                if(UIUtil.isNotNullAndNotEmpty(pgIRMConfidenceLevelSignificanceTesting)) {
                    pgIRMConfidenceLevelSignificanceTesting =pgIRMConfidenceLevelSignificanceTesting.replaceAll("[<]","#LESS_THAN");
                    pgIRMConfidenceLevelSignificanceTesting =pgIRMConfidenceLevelSignificanceTesting.replaceAll("[>]","#GREATER_THAN");
                }
                sbStudyDesign.append("<TR><TD><TABLE class=\"pdf\" cellspacing=\"0\" width=\"1000px\" id=\"StudyDesign\">");
                sbStudyDesign.append("<TR><TD colspan='2' class=\"new\" ><font size='4'><B>Study Design</B></font></TD></TR>");
                sbStudyDesign.append("<TR>");
                sbStudyDesign.append("<TD align=\"left\" width=\"250px\"><B>Study Type / Format</B></TD>");
                sbStudyDesign.append("<TD align=\"left\" width=\"250px\">"+validateString1(str_pgPLIStudyType)+"</TD>");
                sbStudyDesign.append("<TD align=\"left\" width=\"250px\"><B>Type of Research</B></TD>");
                sbStudyDesign.append("<TD align=\"left\" width=\"250px\">"+validateString1(objInfoList.get(attribute_pgTypeOfResearch))+"</TD>");
                sbStudyDesign.append("</TR>");
                sbStudyDesign.append("<TR>");
                sbStudyDesign.append("<TD align=\"left\" width=\"250px\"><B>Study Type / Format, if selected Other</B></TD>");
                sbStudyDesign.append("<TD align=\"left\" width=\"250px\">"+validateString1(pgIRMStudyTypeFormat)+"</TD>");
                sbStudyDesign.append("<TD align=\"left\" width=\"250px\"><B>Confidence Level of Significance Testing</B></TD>");
                sbStudyDesign.append("<TD align=\"left\" width=\"250px\">"+validateString1(pgIRMConfidenceLevelSignificanceTesting)+"</TD>");
                sbStudyDesign.append("</TR>");
                sbStudyDesign.append("<TR>");
                sbStudyDesign.append("<TD align=\"left\" width=\"250px\"><B>Total number of Panelists (all Legs)</B></TD>");
                sbStudyDesign.append("<TD align=\"left\" width=\"250px\">"+validateString1(objInfoList.get(attribute_pgIRMTotalNoOfPanelists))+"</TD>");
                sbStudyDesign.append("<TD align=\"left\" width=\"250px\"><B>Additional Services Needed?</B></TD>");
                sbStudyDesign.append("<TD align=\"left\" width=\"250px\">"+validateString1(str_pgPLIAdditionalServices)+"</TD>");
                sbStudyDesign.append("</TR>");
                sbStudyDesign.append("<TR>");
                sbStudyDesign.append("<TD align=\"left\" width=\"250px\"><B>Does GPS need to review Purchase Intent questions?* If yes, add File with purchase intent questions.</B></TD>");
                sbStudyDesign.append("<TD align=\"left\" width=\"250px\">"+validateString1(objInfoList.get(attribute_pgStudyPanelistPurchaseIntent))+"</TD>");
                sbStudyDesign.append("<TD align=\"left\" width=\"250px\"><B>Have you notified the Patent Office?</B></TD>");
                sbStudyDesign.append("<TD align=\"left\" width=\"250px\">"+validateString1(objInfoList.get(attribute_pgNotifyPatentOffice))+"</TD>");
                sbStudyDesign.append("</TR>");
                sbStudyDesign.append("</TABLE><TR><TD><br /></TD></TR></TD></TR>");
            }

        }
        catch (Exception e)
        {
            e.printStackTrace();
            throw new MatrixException(e);
        }
        return sbStudyDesign;
    }

    /**
     * @param context
     * @param String
     * @return StringBuilder
     * @throws Exception
     */
    private StringBuilder getMultipleOwnershipAccessFieldValues(Context context,String strObjectId) throws Exception{
        StringBuilder sbLegDetailsBuffer = new StringBuilder();
        String project = DomainConstants.EMPTY_STRING;
        String organization =DomainConstants.EMPTY_STRING;
        String name = DomainConstants.EMPTY_STRING;
        String types = DomainConstants.EMPTY_STRING;
        String sc = PropertyUtil.getSchemaProperty(context, DomainSymbolicConstants.SYMBOLIC_type_SecurityContext);
        String person = PropertyUtil.getSchemaProperty(context, DomainSymbolicConstants.SYMBOLIC_type_Person);
        try{
            MapList AccessData = DomainAccess.getAccessSummaryList(context, strObjectId);
            sbLegDetailsBuffer.append("<TR><TD><TABLE class=\"pdf\" cellspacing=\"0\" width=\"1000px\" id=\"MultipleOwnershipAccess\">");
            sbLegDetailsBuffer.append("<thead>");
            sbLegDetailsBuffer.append("<TR><TD colspan='4' class=\"new\" ><font size='4'><B>Multiple Ownership Access</B></font></TD></TR>");
            sbLegDetailsBuffer.append("<TR>");
            sbLegDetailsBuffer.append("<TD align=\"center\" width=\"250px\" ><B>Type</B></TD>");
            sbLegDetailsBuffer.append("<TD align=\"center\" width=\"250px\" ><B>Organization</B></TD>");
            sbLegDetailsBuffer.append("<TD colspan = \"2\" align=\"center\" ><B>Collaborative Space/User/User Groups</B></TD>");
            sbLegDetailsBuffer.append("</TR></thead>");
            sbLegDetailsBuffer.append("<tbody>");
            if(null!=AccessData){
                int iAccessDataSize = AccessData.size();
                for(int i = 0 ; i < iAccessDataSize; i++ ){
                    Map<String,String> ownershipDataMap = (Map<String, String>) AccessData.get(i);

                    organization = ownershipDataMap.get(DomainAccess.KEY_ACCESS_ORG);
                    name = ownershipDataMap.get(DomainAccess.KEY_ACCESS_NAME);
                    project = (String) ownershipDataMap.get(DomainAccess.KEY_ACCESS_PROJECT);
                    if(UIUtil.isNotNullAndNotEmpty(organization)) {
                        types = sc;
                    } else if (name.contains("_PRJ")) {
                        types = person;
                    } else {
                        types = pgPDFViewConstants.Type_Group;
                    }

                    sbLegDetailsBuffer.append("<TR>");
                    sbLegDetailsBuffer.append("<TD align=\"left\" width=\"250px\">"+validateString1(types)+"</TD>");
                    sbLegDetailsBuffer.append("<TD align=\"left\" width=\"250px\">"+validateString1(organization)+"</TD>");
                    sbLegDetailsBuffer.append("<TD align=\"left\" colspan = \"2\">"+validateString1(project)+"</TD>");
                    sbLegDetailsBuffer.append("</TR>");
                }
            }


            sbLegDetailsBuffer.append("</tbody>");
            sbLegDetailsBuffer.append("</TABLE><TR><TD><br /></TD></TR></TD></TR>");
        }
        catch (Exception e)
        {
            e.printStackTrace();
            throw new MatrixException(e);
        }

        return sbLegDetailsBuffer;
    }

    //Added by IRM-2018x.3 Study Protocol - PDF Views for Requirement #32753 - End
    /**
     * Helper Method to get the values of Project Space Name in ownership table
     * @param context the eMatrix <code>Context</code> object
     * @return
     * @throws Exception If the operation fails.
     */

    public String getDocProjectSpaceName(Context context,String sObjectId) throws Exception {

        String strProjectSpaceName  = DomainConstants.EMPTY_STRING;
        DomainObject docDomObject = null;
        try{
            if(sObjectId != null && !sObjectId.isEmpty()){
                docDomObject = DomainObject.newInstance(context,sObjectId);
                strProjectSpaceName = docDomObject.getInfo(context, "to[pgProjectDocument].from.name");
            }
        }
        catch (Exception e)
        {
            e.printStackTrace();
            throw new MatrixException(e);
        }
        return strProjectSpaceName;

    }
//Added by IRM-2018x.3 for PDF Views (Req Id #32753) : Starts


    /**
     * Method to get the values of ownership table
     * @param context the eMatrix <code>Context</code> object
     * @return
     * @throws Exception If the operation fails.
     */

    private StringBuilder getStudyOwnershipData(Context context,String strObjectId) throws Exception{
        StringBuilder sbStudyOwnershipInfo = new StringBuilder();
        String strOrginator = DomainConstants.EMPTY_STRING;
        String strType = DomainConstants.EMPTY_STRING;
        String strValue = DomainConstants.EMPTY_STRING;
        String strName = DomainConstants.EMPTY_STRING;
        String strDescription = DomainConstants.EMPTY_STRING;
        String strTitle = DomainConstants.EMPTY_STRING;
        String strClassification = DomainConstants.EMPTY_STRING;
        String strLimitedAccess = DomainConstants.EMPTY_STRING;
        String strPolicy = DomainConstants.EMPTY_STRING;
        String strProjectSpace = DomainConstants.EMPTY_STRING;
        String strState= DomainConstants.EMPTY_STRING;
        Map paramMap = new HashMap();
        paramMap.put("objectId",strObjectId);
        Map progamMap = new HashMap();
        progamMap.put("paramMap",paramMap);
        String[] args = JPO.packArgs(progamMap);
        String strSecurityCategory = (String) pgPDFViewHelper.executeMainClassMethod(context, "pgIPSecurityCommonUtil","pgIPSecurityValueDisplay", args);
        String strProjectSecurityCategory= (String) pgPDFViewHelper.executeMainClassMethod(context, "pgIPSecurityCommonUtil","pgProjectSecurityValueDisplay", args);
        strProjectSpace = getDocProjectSpaceName(context,strObjectId);
        try{

            if(validateString(strObjectId)){
                StringList slObjectSelects = new StringList(8);

                slObjectSelects.add(pgV3Constants.SELECT_ATTRIBUTE_ORIGINATOR);
                slObjectSelects.add(DomainConstants.SELECT_TYPE);
                slObjectSelects.add(DomainConstants.SELECT_NAME);
                slObjectSelects.add(DomainConstants.SELECT_DESCRIPTION);
                slObjectSelects.add(pgV3Constants.SELECT_ATTRIBUTE_TITLE);
                slObjectSelects.add(pgV3Constants.SELECT_ATTRIBUTE_PGIPCLASSIFICATION);
                slObjectSelects.add(pgPDFViewConstants.SELECT_ATTRIBUTE_PGIPPROJECTSECURITY);
                slObjectSelects.add(DomainConstants.SELECT_POLICY);
                DomainObject domainObject= DomainObject.newInstance(context,strObjectId);
                Map mpAttributeInfo = domainObject.getInfo(context, slObjectSelects);

                String strObjType = (String) mpAttributeInfo.get(DomainConstants.SELECT_TYPE);
                strOrginator = (String) mpAttributeInfo.get(pgV3Constants.SELECT_ATTRIBUTE_ORIGINATOR);
                strType = (String) mpAttributeInfo.get(DomainConstants.SELECT_TYPE);
                strValue = UINavigatorUtil.getAdminI18NString("Type", strType, context.getSession().getLanguage());
                strName = (String) mpAttributeInfo.get(DomainConstants.SELECT_NAME);
                strClassification = (String) mpAttributeInfo.get(pgV3Constants.SELECT_ATTRIBUTE_PGIPCLASSIFICATION);
                strDescription = (String) mpAttributeInfo.get(DomainConstants.SELECT_DESCRIPTION);
                strDescription=strDescription.replaceAll("[<]","#LESS_THAN");
                strDescription=strDescription.replaceAll("[>]","#GREATER_THAN");
                strTitle = (String) mpAttributeInfo.get(pgV3Constants.SELECT_ATTRIBUTE_TITLE);
                strTitle=strTitle.replaceAll("[<]","#LESS_THAN");
                strTitle=strTitle.replaceAll("[>]","#GREATER_THAN");
                strState = (String)mpAttributeInfo.get(DomainConstants.SELECT_CURRENT);
                strPolicy  = (String) mpAttributeInfo.get(DomainConstants.SELECT_POLICY);
                strLimitedAccess = (String) mpAttributeInfo.get(pgPDFViewConstants.SELECT_ATTRIBUTE_PGIPPROJECTSECURITY);
                //Added by DSM(IRM)-2018x.5 for Study Protocol PDF Views (Defect #35543) - Starts
                if (UIUtil.isNotNullAndNotEmpty(strClassification)
                        && strClassification.equalsIgnoreCase(pgV3Constants.RESTRICTED)) {
                    strClassification = pgV3Constants.BUSINESS_USE;
                }
                //Added by DSM(IRM)-2018x.5 for Study Protocol PDF Views (Defect #35543) - Ends
                sbStudyOwnershipInfo.append("<TR><TD><TABLE class=\"WordWrappdf\" cellspacing=\"0\" width=\"1000px\" id=\"pgFormulatedProductTable\">");
                sbStudyOwnershipInfo.append("<thead>");
                sbStudyOwnershipInfo.append("<TR><TD colspan='2' class=\"new\" ><font size='4'><b>Study Ownership<br/></b></font></TD></TR>");
                sbStudyOwnershipInfo.append("</thead>");
                sbStudyOwnershipInfo.append("<TR>");
                sbStudyOwnershipInfo.append("<TD align='left' width=\"150px\"><B>Originator</B></TD>");
                sbStudyOwnershipInfo.append("<TD align='left' colspan='3' width=\"350px\">"+validateString1(strOrginator)+"</TD>");
                sbStudyOwnershipInfo.append("</TR>");

                sbStudyOwnershipInfo.append("<TR>");
                sbStudyOwnershipInfo.append("<TD align=\"left\" width=\"250px\"><B>Name</B></TD>");
                sbStudyOwnershipInfo.append("<TD align=\"center\" width=\"250px\">"+validateString1(strName)+"</TD>");
                sbStudyOwnershipInfo.append("<TD align=\"left\" width=\"250px\"><B>Type</B></TD>");
                sbStudyOwnershipInfo.append("<TD align=\"center\" width=\"250px\">"+validateString1(strValue)+"</TD>");
                sbStudyOwnershipInfo.append("</TR>");

                sbStudyOwnershipInfo.append("<TR>");
                sbStudyOwnershipInfo.append("<TD align=\"left\" width=\"250px\"><B>Title</B></TD>");
                sbStudyOwnershipInfo.append("<TD align=\"center\" width=\"250px\">"+validateString1(strTitle)+"</TD>");
                sbStudyOwnershipInfo.append("<TD align=\"left\" width=\"250px\"><B>Description</B></TD>");
                sbStudyOwnershipInfo.append("<TD align=\"center\" width=\"250px\">"+validateString1(strDescription)+"</TD>");
                sbStudyOwnershipInfo.append("</TR>");

                sbStudyOwnershipInfo.append("<TR>");
                sbStudyOwnershipInfo.append("<TD align=\"left\" width=\"250px\"><B>Classification</B></TD>");
                sbStudyOwnershipInfo.append("<TD align=\"center\" width=\"250px\">"+validateString1(strClassification)+"</TD>");
                sbStudyOwnershipInfo.append("<TD align=\"left\" width=\"250px\"><B>Limit access to names users?</B></TD>");
                sbStudyOwnershipInfo.append("<TD align=\"center\" width=\"250px\">"+validateString1(strLimitedAccess)+"</TD>");
                sbStudyOwnershipInfo.append("</TR>");

                sbStudyOwnershipInfo.append("<TR>");
                sbStudyOwnershipInfo.append("<TD align=\"left\" width=\"250px\"><B>Security Category Classification</B></TD>");
                sbStudyOwnershipInfo.append("<TD align=\"center\" width=\"250px\">"+validateString1(strSecurityCategory)+"</TD>");
                sbStudyOwnershipInfo.append("<TD align=\"left\" width=\"250px\"><B>Project Security Classification</B></TD>");
                sbStudyOwnershipInfo.append("<TD align=\"center\" width=\"250px\">"+validateString1(strProjectSecurityCategory)+"</TD>");
                sbStudyOwnershipInfo.append("</TR>");

                sbStudyOwnershipInfo.append("<TR>");
                sbStudyOwnershipInfo.append("<TD align=\"left\" width=\"250px\"><B>Policy</B></TD>");
                sbStudyOwnershipInfo.append("<TD align=\"center\" width=\"250px\">"+validateString1(strPolicy)+"</TD>");
                sbStudyOwnershipInfo.append("<TD align=\"left\" width=\"250px\"><B>Project Space Name</B></TD>");
                sbStudyOwnershipInfo.append("<TD align=\"center\" width=\"250px\">"+validateString1(strProjectSpace)+"</TD>");
                sbStudyOwnershipInfo.append("</TR>");

            }

            sbStudyOwnershipInfo.append("</TABLE><TR><TD><br/></TD></TR></TD></TR>");
        }
        catch (Exception e){
            e.printStackTrace();
            throw new MatrixException(e);
        }
        return sbStudyOwnershipInfo;
    }
    //Added by IRM-2018x.3 for PDF Views (Req Id #32753) : ends -->


    /**
     * Method to stop the route while demotion from Formal Approval state for Technical Specification
     * @param context the eMatrix <code>Context</code> object
     * @param String args[] holds request parameters
     * @return int
     * @throws Exception If the operation fails.
     * @since CPG X+5
     */
    //This method is deleted from emxCPNCharacteristicListBase. Copying it to support P&G Specific customization in this JPO (getJPONotes).
    public Vector getSequenceOrder(Context context, String [] args) throws Exception
    {
        HashMap paramMap = (HashMap)JPO.unpackArgs(args);
        MapList objectList = (MapList)paramMap.get("objectList");
        Vector sequenceOrder = new Vector();
        String sequence = "";
        try
        {
            if (objectList != null)
            {
                for (int i = 0; i <objectList.size();i++)
                {
                    Map mpTemp = (Map)objectList.get(i);

                    sequence=(String)mpTemp.get(FormulationAttribute.SHARED_TABLE_CHARACTERISTIC_SEQUENCE.getAttributeSelect(context));
                    //start-- added by uk3 to fix the issue of null value for sequence V6R2012
                    if(sequence==null){
                        String relID = (String)mpTemp.get("id[connection]");
                        sequence = DomainRelationship.getAttributeValue(context,relID,"SharedTableCharacteristicSequence");
                    }
                    //end-- added by uk3 to fix the issue of null value for sequence V6R2012
                    sequenceOrder.addElement(sequence);
                }

            }

        }
        catch (Exception e)
        {
            e.printStackTrace();
        }
        return sequenceOrder;
    }
    //Added by DSM Sogeti for 2015x.5 REQID 19633 Ends
    //Added by DSM Sogeti - 2015x.5 (Defect Id-17380) - Starts
    /**
     * This method wrap the string, it adds line break after every 256 characters.
     * @param context
     * @param String
     * @return String
     * @throws MatrixException
     */
    public static String wrapString(String strwordWrap) throws Exception{
        StringBuilder sb = new StringBuilder();
        int iFirstFullStopIndex = 256;
        try{
            if (strwordWrap != null && (strwordWrap.length() > 256)){
                while(strwordWrap.length() > 256){
                    sb.append(strwordWrap.substring(0, 256));
                    sb.append("<br></br>");
                    strwordWrap = strwordWrap.substring(iFirstFullStopIndex);
                }
                if(strwordWrap.length() > 0){
                    sb.append(strwordWrap);
                }
                strwordWrap = sb.toString();
            }
        }catch(Exception ex){
            ex.printStackTrace();
        }
        return strwordWrap;
    }
    //Added by DSM Sogeti - 2015x.5 (Defect Id-17380) - Starts

    //Added by DSM(Sogeti)-2015x.5.1 for PDF Views (Req - 21884) - Starts

    /**
     * @Desc Show Related Software Builds Table -PDF views
     * @param Context- Context user
     * @param String - Object ID
     * @return StringBuilder- Related Software Builds Table
     * @throws Exception
     */
    private StringBuilder getSoftwareBuildsTable(Context context, String strObjectId) throws Exception{
        long startTime = new Date().getTime();
        StringBuilder sbSoftwareBuild = new StringBuilder();
        MapList mlRelatedSoftwareList = null;
        String strName = DomainConstants.EMPTY_STRING;
        String strType = DomainConstants.EMPTY_STRING;
        String strDescription = DomainConstants.EMPTY_STRING;
        String strState = DomainConstants.EMPTY_STRING;
        String strBuildPath = DomainConstants.EMPTY_STRING;
        String strUIType = DomainConstants.EMPTY_STRING;
        final String ATTRIBUTE_PGBUILDPATH = PropertyUtil.getSchemaProperty("attribute_pgBuildPath");
        final String SELECT_ATTRIBUTE_PGBUILDPATH = "attribute[" + ATTRIBUTE_PGBUILDPATH + "]";
        try{
            StringList slObjSel = new StringList(5);
            slObjSel.add(DomainConstants.SELECT_TYPE);
            slObjSel.add(DomainConstants.SELECT_NAME);
            slObjSel.add(DomainConstants.SELECT_DESCRIPTION);
            slObjSel.add(DomainConstants.SELECT_CURRENT);
            slObjSel.add(SELECT_ATTRIBUTE_PGBUILDPATH);

            if(UIUtil.isNotNullAndNotEmpty(strObjectId)){
                DomainObject domObj = DomainObject.newInstance(context, strObjectId);
                mlRelatedSoftwareList = domObj.getRelatedObjects(context,
                        pgV3Constants.RELATIONSHIP_ASSIGNEDPART, //relationshipPattern
                        pgV3Constants.TYPE_SOFTWAREBUILD, //typePattern
                        slObjSel, //objectSelects
                        null, //relationshipSelects
                        true, //getTo
                        false, //getFrom
                        (short)1, //recurseToLevel
                        null, //objectWhere
                        null, //relationshipWhere
                        0);

                if(mlRelatedSoftwareList != null && !mlRelatedSoftwareList.isEmpty()){
                    sbSoftwareBuild.append("<tr><td><table class=\"WordWrappdf\" cellspacing=\"0\" width=\"1000px\" id=\"pgFinishedProductTable\">");
                    sbSoftwareBuild.append("<thead>");
                    sbSoftwareBuild.append("<tr><td colspan='5' class=\"new\" ><font size='4'><b>Releated Software Builds</b></font></td></tr>");
                    sbSoftwareBuild.append("<tr>");
                    sbSoftwareBuild.append("<th width=\"150\" align=\"center\"><b>Name</b></th>");
                    sbSoftwareBuild.append("<th width=\"150\" align=\"center\"><b>Type</b></th>");
                    sbSoftwareBuild.append("<th width=\"150\" align=\"center\"><b>Description</b></th>");
                    sbSoftwareBuild.append("<th width=\"150\" align=\"center\"><b>State</b></th>");
                    sbSoftwareBuild.append("<th width=\"400\" align=\"center\"><b>Build Path</b></th>");
                    sbSoftwareBuild.append("</tr>");
                    sbSoftwareBuild.append("</thead>");
                    for (Iterator iterator = mlRelatedSoftwareList.iterator(); iterator.hasNext();){
                        Map mpSoftBuild = (Map) iterator.next();
                        strName = (String) mpSoftBuild.get(DomainConstants.SELECT_NAME);
                        strType = (String) mpSoftBuild.get(DomainConstants.SELECT_TYPE);
                        strUIType = UINavigatorUtil.getAdminI18NString("Type", strType, context.getSession().getLanguage());
                        strDescription = (String) mpSoftBuild.get(DomainConstants.SELECT_DESCRIPTION);
                        strState = (String) mpSoftBuild.get(DomainConstants.SELECT_CURRENT);
                        strBuildPath = (String) mpSoftBuild.get(SELECT_ATTRIBUTE_PGBUILDPATH);
                        sbSoftwareBuild.append("<tr>");
                        sbSoftwareBuild.append("<td align=\"center\" width=\"150\">"+validateString1(strName)+"</td>");
                        sbSoftwareBuild.append("<td align=\"center\" width=\"150\">"+validateString1(strUIType)+"</td>");
                        sbSoftwareBuild.append("<td align=\"center\" width=\"150\">"+validateString1(strDescription)+"</td>");
                        sbSoftwareBuild.append("<td align=\"center\" width=\"150\">"+validateString1(strState)+"</td>");
                        sbSoftwareBuild.append("<td align=\"center\" width=\"400\">"+validateString1(strBuildPath)+"</td>");
                        sbSoftwareBuild.append("</tr>");
                        sbSoftwareBuild.append("</table><tr><td><br /></td></tr></td></tr>");
                    }
                }
            }
        }catch(Exception ex){
            throw ex;
        }
        long endTime = new Date().getTime();
        System.out.println("Total Time has taken by the  getSoftwareBuildsTable Method is-->"+(endTime-startTime));
        return sbSoftwareBuild;
    }
    //Added by DSM(Sogeti)-2015x.5.1 for PDF Views (Req - 21884) - Ends
    /**
     * Helper method to get Unique Formula Identifier value for Storage, Transportation, Labeling Assessment Data
     * @return StringList - bus selectables
     * @since DSM 2018x.5
     */
    private StringList getUFIInfo(Context context,String strObjectId) throws Exception{
        long startTime = new Date().getTime();
        StringList UFIList = new StringList();
        try{
            String strUFIforChild = DomainConstants.EMPTY_STRING;
            Map mpObjMap = null;
            if(validateString(strObjectId)) {
                Map paramMap = new HashMap();
                paramMap.put("objectId",strObjectId);
                Map progamMap = new HashMap();
                progamMap.put("paramMap",paramMap);
                String[] args = JPO.packArgs(progamMap);
                MapList mlGCASObjects= (MapList)pgPDFViewHelper.executeMainClassMethod(context, "pgIPMProductData", "getTopLevelObjectforFPP", args);
                int iSize = mlGCASObjects.size();
                if(!mlGCASObjects.isEmpty()){
                    for (int i = 0;i< iSize; i++){
                        mpObjMap = (Map) mlGCASObjects.get(i);
                        strUFIforChild = (String)mpObjMap.get(pgV3Constants.SELECT_ATTRIBUTE_PGUNIQUEFORUMULAIDENTIFIER);
                        if(UIUtil.isNotNullAndNotEmpty(strUFIforChild)) {
                            UFIList.add(strUFIforChild);
                        }
                    }
                }
            }
        } catch (Exception e){
            throw new MatrixException(e);
        }
        long endTime = new Date().getTime();
        System.out.println("Time taken to execute getUFIInfo method : "+(endTime-startTime));
        return UFIList;
    }
    /**
     * Method to get selectables for Storage, Transportation, Labeling Assessment Data
     * @return StringList - bus selectables
     * @since DSM 2018x.5
     */
    private StringList  getStorageTransportTableSelectables(){
        StringList slObjectSelects = new StringList(25);
        slObjectSelects.add(DomainConstants.SELECT_TYPE);
        slObjectSelects.add(DomainConstants.SELECT_ID);
        slObjectSelects.add(pgV3Constants.SELECT_ATTRIBUTE_PGPOWERSOURCE);
        slObjectSelects.add(pgV3Constants.SELECT_ATTRIBUTE_PGBATTERYTYPE);
        slObjectSelects.add(pgV3Constants.SELECT_ATTRIBUTE_PGPUNNUMBER);
        slObjectSelects.add(pgV3Constants.SELECT_ATTRIBUTE_PGPROPERSHIPPINGNAME);
        slObjectSelects.add(pgV3Constants.SELECT_ATTRIBUTE_PGHAZARDCLASS);
        slObjectSelects.add(pgV3Constants.SELECT_ATTRIBUTE_PGPACKINGGROUP);
        slObjectSelects.add(pgV3Constants.SELECT_ATTRIBUTE_STORAGECONDITIONS);
        slObjectSelects.add(pgV3Constants.SELECT_ATTRIBUTE_PGSTORAGETEMPERATURELIMITS);
        slObjectSelects.add(pgV3Constants.SELECT_ATTRIBUTE_PGSTORAGEHUMIDITYLIMITS);
        slObjectSelects.add(pgV3Constants.SELECT_ATTRIBUTE_PGTECHNOLOGY);
        slObjectSelects.add(pgV3Constants.SELECT_ATTRIBUTE_PGPRODUCTEXPOSEDTOCHILDREN);
        slObjectSelects.add(pgV3Constants.SELECT_ATTRIBUTE_PGDOESTHEPRODUCTREQUIRECHILDSAFEDESIGN);
        slObjectSelects.add(pgV3Constants.SELECT_ATTRIBUTE_PGPRODUCTMARKETEDASCHILDRENPRODUCT);
        slObjectSelects.add(pgV3Constants.SELECT_ATTRIBUTE_PGSHIPPINGINSTRUCTIONS);
        slObjectSelects.add(pgV3Constants.SELECT_ATTRIBUTE_PGEVAPORATIONRATE);
        slObjectSelects.add(pgV3Constants.SELECT_ATTRIBUTE_PGRESERVEACIDITY);
        slObjectSelects.add(pgV3Constants.SELECT_ATTRIBUTE_PGRESERVERALKALINITY);
        slObjectSelects.add(pgV3Constants.SELECT_ATTRIBUTE_PGISTHEPRODUCTABATTERY);
        slObjectSelects.add(pgV3Constants.SELECT_ATTRIBUTE_PGDOESTHEPRODUCTCONTAINABATTERY);
        slObjectSelects.add(pgV3Constants.SELECT_ATTRIBUTE_PGBATTERIESSHIPPEDINSIDEDEVICE);
        slObjectSelects.add(pgV3Constants.SELECT_ATTRIBUTE_PGBATTERIESSHIPPEDOUTSIDEDEVICE);
        slObjectSelects.add(pgV3Constants.SELECT_ATTRIBUTE_PGAREBATTERIESREQUIRED);
        slObjectSelects.add(pgV3Constants.SELECT_ATTRIBUTE_PGASSEMBLYTYPE);
        //Added by DSM(Sogeti) for 2018x.6 Req#36346: Start
        slObjectSelects.add(pgPDFViewConstants.SELECT_ATTRIBUTE_PGNUMBEROFBATTERIESREQUIRED);
        //Added by DSM(Sogeti) for 2018x.6 Req#36346: End
        return slObjectSelects;
    }


    /**
     * Method to get data for Storage, Transportation, Labeling Assessment Data
     * @param context - matrix Context
     * @param String  - Object Id
     * @param StringList  - selectables
     * @return Map - Attribute map
     * @since DSM 2018x.5
     */
    private Map<String,String>  getStorageTransportTableDataMap(Context context,String strObjectId, StringList slObjectSelects){
        long startTime = new Date().getTime();
        DomainObject domainObject = new DomainObject();
        Map<String,String> mpAttributeInfo = new HashMap<>();
        try {
            domainObject = DomainObject.newInstance(context,strObjectId);
            mpAttributeInfo = domainObject.getInfo(context, slObjectSelects);

        } catch (FrameworkException e) {
            e.printStackTrace();
        }
        long endTime = new Date().getTime();
        System.out.println("Time to execute getStorageTransportTableDataMap method : "+(endTime-startTime));
        return mpAttributeInfo;
    }
    /**
     * Method to get  Storage, Transportation, Labeling Assessment Data Table for FPP
     * @param context - matrix Context
     * @param String  - Object Id
     * @return StringBuilder - String Builder of table data
     * @since DSM 2018x.5
     */
    private StringBuilder  getStorageTransportTableFPP(Context context,String strObjectId, String pdfViewType){
        long startTime = new Date().getTime();
        StringBuilder sbAttribuesInfoFPP = new StringBuilder();
        if(validateString(strObjectId)){
            StringList slObjectSelects = getStorageTransportTableSelectables();
            Map mpAttributeInfo = getStorageTransportTableDataMap(context,strObjectId,slObjectSelects);
            if(!mpAttributeInfo.isEmpty()){
                sbAttribuesInfoFPP.append(getStorageTransportTableFPP(context,mpAttributeInfo,pdfViewType));
            }
        }
        long endTime = new Date().getTime();
        System.out.println("Time to execute getStorageTransportTableFPP method : "+(endTime-startTime));
        return sbAttribuesInfoFPP;
    }

    /**
     * Helper method to get  Storage, Transportation, Labeling Assessment Data Table for FPP
     * @param context - matrix Context
     * @param Map  - Attribute map
     * @return String - String of table data
     * @since DSM 2018x.5
     */
    private String getStorageTransportTableFPP(Context context, Map mpAttributeInfo, String pdfViewType) {
        StringBuilder sbAttribuesInfoFPP = new StringBuilder();
        StringList slUniqFormulaIdentifier = new StringList();
        String strUniqFormulaIdentifier = DomainConstants.EMPTY_STRING;
        try {
            String objId = (String) mpAttributeInfo.get(DomainConstants.SELECT_ID);
            String strPowerSource = (String) mpAttributeInfo.get(pgV3Constants.SELECT_ATTRIBUTE_PGPOWERSOURCE);
            String strBatteryType = (String) mpAttributeInfo.get(pgV3Constants.SELECT_ATTRIBUTE_PGBATTERYTYPE);
            String strUNNumber = (String) mpAttributeInfo.get(pgV3Constants.SELECT_ATTRIBUTE_PGPUNNUMBER);
            String strProperShippingName = (String) mpAttributeInfo.get(pgV3Constants.SELECT_ATTRIBUTE_PGPROPERSHIPPINGNAME);
            String strHazardClass = (String) mpAttributeInfo.get(pgV3Constants.SELECT_ATTRIBUTE_PGHAZARDCLASS);
            String strPackingGroup = (String) mpAttributeInfo.get(pgV3Constants.SELECT_ATTRIBUTE_PGPACKINGGROUP);
            String strStoConditions = (String) mpAttributeInfo.get(pgV3Constants.SELECT_ATTRIBUTE_STORAGECONDITIONS);
            String strStorageTempLimits = (String) mpAttributeInfo.get(pgV3Constants.SELECT_ATTRIBUTE_PGSTORAGETEMPERATURELIMITS);
            String strStorageHumidityLimits = (String) mpAttributeInfo.get(pgV3Constants.SELECT_ATTRIBUTE_PGSTORAGEHUMIDITYLIMITS);
            String strAssemblySubType = (String) mpAttributeInfo.get(pgV3Constants.SELECT_ATTRIBUTE_PGASSEMBLYTYPE);

            if(UIUtil.isNotNullAndNotEmpty(objId)){
                slUniqFormulaIdentifier = getUFIInfo(context,objId);
                if(slUniqFormulaIdentifier != null && slUniqFormulaIdentifier.size()>0)
                {
                    strUniqFormulaIdentifier = FrameworkUtil.join(slUniqFormulaIdentifier,",");
                }
            }
            strUNNumber = strUNNumber.replaceAll("[<]","#LESS_THAN");
            strProperShippingName = strProperShippingName.replaceAll("[<]","#LESS_THAN");
            strStoConditions = strStoConditions.replaceAll("[<]","#LESS_THAN");
            strStorageTempLimits = strStorageTempLimits.replaceAll("[<]","#LESS_THAN");
            strStorageHumidityLimits = strStorageHumidityLimits.replaceAll("[<]","#LESS_THAN");
            sbAttribuesInfoFPP.append("<TR><TD><TABLE class=\"WordWrappdf\" cellspacing=\"0\" width=\"1000px\" id=\"StorageTableFPP\">");
            sbAttribuesInfoFPP.append("<thead>");
            sbAttribuesInfoFPP.append("<TR><TD colspan='4' class=\"new\" ><font size='4'><b>Storage, Transportation, Labeling Assessment Data<br /></b></font></TD></TR>");
            sbAttribuesInfoFPP.append("</thead>");
            sbAttribuesInfoFPP.append("<tbody>");
            sbAttribuesInfoFPP.append("<TR>");
            sbAttribuesInfoFPP.append("<TD align='left'  width=\"250px\" ><B>UN Number</B></TD>");
            sbAttribuesInfoFPP.append("<TD align='left' width=\"250px\">"+validateString1(strUNNumber)+"</TD>");
            sbAttribuesInfoFPP.append("<TD align='left'  width=\"250px\" ><B>Proper Shipping Name</B></TD>");
            sbAttribuesInfoFPP.append("<TD align='left' width=\"250px\">"+validateString1(strProperShippingName)+"</TD>");
            sbAttribuesInfoFPP.append("</TR>");
            sbAttribuesInfoFPP.append("<TR>");
            sbAttribuesInfoFPP.append("<TD align='left'  width=\"250px\" ><B>Hazard Class</B></TD>");
            sbAttribuesInfoFPP.append("<TD align='left' width=\"250px\">"+validateString1(strHazardClass)+"</TD>");
            sbAttribuesInfoFPP.append("<TD align='left'  width=\"250px\" ><B>Packing Group</B></TD>");
            sbAttribuesInfoFPP.append("<TD align='left' width=\"250px\">"+validateString1(strPackingGroup)+"</TD>");
            sbAttribuesInfoFPP.append("</TR>");
            if(UIUtil.isNotNullAndNotEmpty(strAssemblySubType) && (pgV3Constants.SHIPPABLE_HALB.equals(strAssemblySubType) && !("warehouse".equalsIgnoreCase(pdfViewType)))) {
                sbAttribuesInfoFPP.append("<TR>");
                sbAttribuesInfoFPP.append("<TD align='left'  width=\"250px\" ><B>Storage Conditions</B></TD>");
                sbAttribuesInfoFPP.append("<TD align='left' width=\"250px\">"+validateString1(strStoConditions)+"</TD>");
                sbAttribuesInfoFPP.append("<TD align='left'  width=\"250px\" ><B>Unique Formula Identifier</B></TD>");
                sbAttribuesInfoFPP.append("<TD align='left' width=\"250px\">"+validateString1(strUniqFormulaIdentifier)+"</TD>");
                sbAttribuesInfoFPP.append("</TR>");
                sbAttribuesInfoFPP.append("<TR>");
                sbAttribuesInfoFPP.append("<TD align='left'  width=\"250px\" ><B>Storage Temperature Limits - <sup>o</sup>C</B></TD>");
                sbAttribuesInfoFPP.append("<TD align='left' width=\"250px\">"+validateString1(strStorageTempLimits)+"</TD>");
                sbAttribuesInfoFPP.append("<TD align='left'  width=\"250px\" ><B>Storage Humidity Limits - %</B></TD>");
                sbAttribuesInfoFPP.append("<TD align='left' width=\"250px\">"+validateString1(strStorageHumidityLimits)+"</TD>");
                sbAttribuesInfoFPP.append("</TR>");
            }
            else{
                sbAttribuesInfoFPP.append("<TR>");
                sbAttribuesInfoFPP.append("<TD align='left'  width=\"250px\" ><B>Storage Conditions</B></TD>");
                sbAttribuesInfoFPP.append("<TD align='left' width=\"250px\">"+validateString1(strStoConditions)+"</TD>");
                sbAttribuesInfoFPP.append("<TD align='left'  width=\"250px\" ><B>Storage Temperature Limits - <sup>o</sup>C</B></TD>");
                sbAttribuesInfoFPP.append("<TD align='left' width=\"250px\">"+validateString1(strStorageTempLimits)+"</TD>");
                sbAttribuesInfoFPP.append("</TR>");
                sbAttribuesInfoFPP.append("<TR>");
                sbAttribuesInfoFPP.append("<TD align='left'  width=\"250px\" ><B>Storage Humidity Limits - %</B></TD>");
                sbAttribuesInfoFPP.append("<TD align='left' colspan='3'>"+validateString1(strStorageHumidityLimits)+"</TD>");
                sbAttribuesInfoFPP.append("</TR>");
            }
            sbAttribuesInfoFPP.append("</tbody>");
            sbAttribuesInfoFPP.append("</TABLE><TR><TD><BR/></TD></TR></TD></TR>");
        }
        catch (Exception e) {
            e.printStackTrace();
        }
        return sbAttribuesInfoFPP.toString();
    }
    /**
     * Method to get  Storage, Transportation, Labeling Assessment Data Table for CUP COP
     * @param context - matrix Context
     * @param String  - Object Id
     * @return StringBuilder - String Builder of table data
     * @since DSM 2018x.5
     */
    private StringBuilder  getStorageTransportTableCUPCOP(Context context,String strObjectId){
        long startTime = new Date().getTime();
        StringBuilder sbAttribuesInfoCUPCOP = new StringBuilder();
        if(validateString(strObjectId)){
            StringList slObjectSelects = getStorageTransportTableSelectables();
            Map mpAttributeInfo = getStorageTransportTableDataMap(context,strObjectId,slObjectSelects);
            if(!mpAttributeInfo.isEmpty()){
                sbAttribuesInfoCUPCOP.append(getStorageTransportTableCUPCOP(context,mpAttributeInfo));
            }
        }
        long endTime = new Date().getTime();
        System.out.println("Time to execute getStorageTransportTableCUPCOP method : "+(endTime-startTime));
        return sbAttribuesInfoCUPCOP;

    }
    /**
     * Helper method to get  Storage, Transportation, Labeling Assessment Data Table for CUP COP
     * @param context - matrix Context
     * @param Map  - Attribute map
     * @return String - String of table data
     * @since DSM 2018x.5
     */
    private String getStorageTransportTableCUPCOP(Context context, Map<String, String> mpAttributeInfo) {
        StringBuilder sbAttribuesInfoCUPCOP = new StringBuilder();
        String strUNNumber = (String) mpAttributeInfo.get(pgV3Constants.SELECT_ATTRIBUTE_PGPUNNUMBER);
        String strProperShippingName = (String) mpAttributeInfo.get(pgV3Constants.SELECT_ATTRIBUTE_PGPROPERSHIPPINGNAME);
        String strHazardClass = (String) mpAttributeInfo.get(pgV3Constants.SELECT_ATTRIBUTE_PGHAZARDCLASS);
        String strPackingGroup = (String) mpAttributeInfo.get(pgV3Constants.SELECT_ATTRIBUTE_PGPACKINGGROUP);
        strUNNumber = strUNNumber.replaceAll("[<]","#LESS_THAN");
        strProperShippingName = strProperShippingName.replaceAll("[<]","#LESS_THAN");
        sbAttribuesInfoCUPCOP.append("<TR><TD><TABLE class=\"WordWrappdf\" cellspacing=\"0\" width=\"1000px\" id=\"StorageTableCUPCOP\">");
        sbAttribuesInfoCUPCOP.append("<thead>");
        sbAttribuesInfoCUPCOP.append("<TR><TD colspan='4' class=\"new\"><font size='4'><b>Storage, Transportation, Labeling Assessment Data<br /></b></font></TD></TR>");
        sbAttribuesInfoCUPCOP.append("</thead>");
        sbAttribuesInfoCUPCOP.append("<tbody>");
        sbAttribuesInfoCUPCOP.append("<TR>");
        sbAttribuesInfoCUPCOP.append("<TD align='left'  width=\"250px\"><B>UN Number</B></TD>");
        sbAttribuesInfoCUPCOP.append("<TD align='left' width=\"250px\">"+validateString1(strUNNumber)+"</TD>");
        //Modified by DSM-2018x_6_April_CW for PDF view Defect #47879 and #47880  : Starts
        sbAttribuesInfoCUPCOP.append("<TD align='left'  width=\"250px\"><B>Proper Shipping Name</B></TD>");
        sbAttribuesInfoCUPCOP.append("<TD align='left' width=\"250px\">"+validateString1(strProperShippingName)+"</TD>");
        sbAttribuesInfoCUPCOP.append("</TR>");
        sbAttribuesInfoCUPCOP.append("<TR>");
        sbAttribuesInfoCUPCOP.append("<TD align='left'  width=\"250px\"><B>Hazard Class</B></TD>");
        sbAttribuesInfoCUPCOP.append("<TD align='left' width=\"250px\">"+validateString1(strHazardClass)+"</TD>");
        sbAttribuesInfoCUPCOP.append("<TD align='left'  width=\"250px\"><B>Packing Group</B></TD>");
        sbAttribuesInfoCUPCOP.append("<TD align='left' width=\"250px\">"+validateString1(strPackingGroup)+"</TD>");
        sbAttribuesInfoCUPCOP.append("</TR>");
        //Modified by DSM-2018x_6_April_CW for PDF view Defect #47879 and #47880  : Ends
        sbAttribuesInfoCUPCOP.append("</tbody>");
        sbAttribuesInfoCUPCOP.append("</TABLE><TR><TD><BR/></TD></TR></TD></TR>");
        return sbAttribuesInfoCUPCOP.toString();
    }
    /**
     * Method to get  Storage, Transportation, Labeling Assessment Data Table for FOP
     * @param context - matrix Context
     * @param String  - Object Id
     * @return StringBuilder - String Builder of table data
     * @since DSM 2018x.5
     */
    private StringBuilder  getStorageTransportTableFOP(Context context,String strObjectId) throws FrameworkException{
        long startTime = new Date().getTime();
        StringBuilder sbAttribuesInfoFOP = new StringBuilder();
        if(validateString(strObjectId)){
            StringList slObjectSelects = getStorageTransportTableSelectables();
            Map mpAttributeInfo = getStorageTransportTableDataMap(context,strObjectId,slObjectSelects);
            if(!mpAttributeInfo.isEmpty()){
                sbAttribuesInfoFOP.append(getStorageTransportTableFOP(context,mpAttributeInfo,strObjectId));
            }
        }
        long endTime = new Date().getTime();
        System.out.println("Time to execute getStorageTransportTableFOP method : "+(endTime-startTime));
        return sbAttribuesInfoFOP;
    }
    /**
     * Helper method to get  Storage, Transportation, Labeling Assessment Data Table for FOP
     * @param context - matrix Context
     * @param String  - Object Id
     * @return StringBuilder - String Builder of table data
     * @since DSM 2018x.5
     */
    private String getStorageTransportTableFOP(Context context,Map mpAttributeInfo, String strObjectId) throws FrameworkException {
        StringBuilder sbAttribuesInfoFOP = new StringBuilder();
        DomainObject domainObject= DomainObject.newInstance(context,strObjectId);
        Map hmRequestMap = new HashMap();
        Map hmSettingsMap = new HashMap();
        Map hmProgramMap = new HashMap();
        Map hmFieldMap = new HashMap();
        hmSettingsMap.put("RelationshipName", "relationship_pgToWarehousingClassification");
        hmFieldMap.put("settings", hmSettingsMap);
        hmProgramMap.put("fieldMap", hmFieldMap);
        hmRequestMap.put("objectId", strObjectId);
        hmRequestMap.put("mode", "view");
        hmProgramMap.put("requestMap", hmRequestMap);
        String strShpHzdClass = DomainConstants.EMPTY_STRING;
        try {
            String strObjType = (String) mpAttributeInfo.get(DomainConstants.SELECT_TYPE);
            String strTechnology = (String) mpAttributeInfo.get(pgV3Constants.SELECT_ATTRIBUTE_PGTECHNOLOGY);
            String strProdExpChild = (String) mpAttributeInfo.get(pgV3Constants.SELECT_ATTRIBUTE_PGPRODUCTEXPOSEDTOCHILDREN);
            String strChildrenProd = (String) mpAttributeInfo.get(pgV3Constants.SELECT_ATTRIBUTE_PGPRODUCTMARKETEDASCHILDRENPRODUCT);
            String strReqChildSafeDesgn = (String) mpAttributeInfo.get(pgV3Constants.SELECT_ATTRIBUTE_PGDOESTHEPRODUCTREQUIRECHILDSAFEDESIGN);
            StringList slShpHzdClass 	= domainObject.getInfoList(context,"from["+pgV3Constants.RELATIONSHIP_PGTOSHIPPINGHAZARDCLASSSIFICATION+"].to.name");
            String strShppingInfo = (String) mpAttributeInfo.get(pgV3Constants.SELECT_ATTRIBUTE_PGSHIPPINGINSTRUCTIONS);
            String strStoConditions = (String) mpAttributeInfo.get(pgV3Constants.SELECT_ATTRIBUTE_STORAGECONDITIONS);
            String strStorageTempLimits = (String) mpAttributeInfo.get(pgV3Constants.SELECT_ATTRIBUTE_PGSTORAGETEMPERATURELIMITS);
            String strStorageHumidityLimits = (String) mpAttributeInfo.get(pgV3Constants.SELECT_ATTRIBUTE_PGSTORAGEHUMIDITYLIMITS);
            String strWarehousingClassification;
            strWarehousingClassification = (String) JPO.invoke(context, "pgPLPicklist", null, "getPicklistValuesForListbox", JPO.packArgs(hmProgramMap),String.class);
            strWarehousingClassification = strWarehousingClassification.replaceAll("[<]","#LESS_THAN");
            strTechnology = strTechnology.replaceAll("[<]","#LESS_THAN");
            strShppingInfo = strShppingInfo.replaceAll("[<]","#LESS_THAN");
            strStoConditions = strStoConditions.replaceAll("[<]","#LESS_THAN");
            strStorageTempLimits = strStorageTempLimits.replaceAll("[<]","#LESS_THAN");
            strStorageHumidityLimits = strStorageHumidityLimits.replaceAll("[<]","#LESS_THAN");
            if(slShpHzdClass != null && slShpHzdClass.size()>0)
            {
                strShpHzdClass = FrameworkUtil.join(slShpHzdClass,",");
            }
            sbAttribuesInfoFOP.append("<TR><TD><TABLE class=\"WordWrappdf\" cellspacing=\"0\" width=\"1000px\" id=\"StorageTableAPPFOP\">");
            sbAttribuesInfoFOP.append("<thead>");
            sbAttribuesInfoFOP.append("<TR><TD colspan='4' class=\"new\" ><font size='4'><b>Storage, Transportation, Labeling Assessment Data<br /></b></font></TD></TR>");
            sbAttribuesInfoFOP.append("</thead>");
            sbAttribuesInfoFOP.append("<tbody>");
            sbAttribuesInfoFOP.append("<TR>");
            sbAttribuesInfoFOP.append("<TD align='left'  width=\"250px\" ><B>Technology</B></TD>");
            sbAttribuesInfoFOP.append("<TD align='left' width=\"250px\">"+validateString1(strTechnology)+"</TD>");
            sbAttribuesInfoFOP.append("<TD align='left'  width=\"250px\" ><B>Is Product Exposed to Children</B></TD>");
            sbAttribuesInfoFOP.append("<TD align='left' width=\"250px\">"+validateString1(strProdExpChild)+"</TD>");
            sbAttribuesInfoFOP.append("</TR>");
            sbAttribuesInfoFOP.append("<TR>");
            sbAttribuesInfoFOP.append("<TD align='left'  width=\"250px\" ><B>Is the Product Marketed as Children's Product</B></TD>");
            sbAttribuesInfoFOP.append("<TD align='left' width=\"250px\">"+validateString1(strChildrenProd)+"</TD>");
            sbAttribuesInfoFOP.append("<TD align='left'  width=\"250px\" ><B>Does the Product Require Child Safe Design</B></TD>");
            sbAttribuesInfoFOP.append("<TD align='left' width=\"250px\">"+validateString1(strReqChildSafeDesgn)+"</TD>");
            sbAttribuesInfoFOP.append("</TR>");
            sbAttribuesInfoFOP.append("<TR>");
            sbAttribuesInfoFOP.append("<TD align='left'  width=\"250px\" ><B>Warehousing Classification</B></TD>");
            sbAttribuesInfoFOP.append("<TD align='left' width=\"250px\">"+validateString1(strWarehousingClassification)+"</TD>"); //
            sbAttribuesInfoFOP.append("<TD align='left'  width=\"250px\" ><B>Shipping Hazard Classification</B></TD>");
            sbAttribuesInfoFOP.append("<TD align='left' width=\"250px\">"+validateString1(strShpHzdClass)+"</TD>");
            sbAttribuesInfoFOP.append("</TR>");
            sbAttribuesInfoFOP.append("<TR>");
            sbAttribuesInfoFOP.append("<TD align='left'  width=\"250px\" ><B>Shipping Information</B></TD>");
            sbAttribuesInfoFOP.append("<TD align='left' width=\"250px\">"+validateString1(strShppingInfo)+"</TD>");
            sbAttribuesInfoFOP.append("<TD align='left'  width=\"250px\" ><B>Storage Conditions</B></TD>");
            sbAttribuesInfoFOP.append("<TD align='left' width=\"250px\">"+validateString1(strStoConditions)+"</TD>");
            sbAttribuesInfoFOP.append("</TR>");
            sbAttribuesInfoFOP.append("<TR>");
            sbAttribuesInfoFOP.append("<TD align='left'  width=\"250px\" ><B>Storage Temperature Limits - <sup>o</sup>C</B></TD>");
            sbAttribuesInfoFOP.append("<TD align='left' width=\"250px\">"+validateString1(strStorageTempLimits)+"</TD>");
            sbAttribuesInfoFOP.append("<TD align='left'  width=\"250px\" ><B>Storage Humidity Limits - %</B></TD>");
            sbAttribuesInfoFOP.append("<TD align='left' width=\"250px\">"+validateString1(strStorageHumidityLimits)+"</TD>");
            sbAttribuesInfoFOP.append("</TR>");
            sbAttribuesInfoFOP.append("</tbody>");
            sbAttribuesInfoFOP.append("</TABLE><TR><TD><BR/></TD></TR></TD></TR>");
        } catch (MatrixException e) {
            e.printStackTrace();
        }
        return sbAttribuesInfoFOP.toString();
    }
    /**
     * Method to get  Storage, Transportation, Labeling Assessment Data Table for APP
     * @param context - matrix Context
     * @param String  - Object Id
     * @return StringBuilder - String Builder of table data
     * @since DSM 2018x.5
     */
    private StringBuilder  getStorageTransportTableAPP(Context context,String strObjectId) throws FrameworkException{
        long startTime = new Date().getTime();
        StringBuilder sbAttribuesInfoAPP = new StringBuilder();
        if(validateString(strObjectId)){
            StringList slObjectSelects = getStorageTransportTableSelectables();
            Map mpAttributeInfo = getStorageTransportTableDataMap(context,strObjectId,slObjectSelects);
            if(!mpAttributeInfo.isEmpty()){
                sbAttribuesInfoAPP.append(getStorageTransportTableAPP(context,mpAttributeInfo,strObjectId));
            }
        }
        long endTime = new Date().getTime();
        System.out.println("Time to execute getStorageTransportTableAPP method : "+(endTime-startTime));
        return sbAttribuesInfoAPP;
    }
    /**
     * Helper method to get  Storage, Transportation, Labeling Assessment Data Table for APP
     * @param context - matrix Context
     * @param String  - Object Id
     * @return StringBuilder - String Builder of table data
     * @since DSM 2018x.5
     */
    private String getStorageTransportTableAPP(Context context,Map mpAttributeInfo, String strObjectId) throws FrameworkException {
        StringBuilder sbAttribuesInfoAPP = new StringBuilder();
        DomainObject domainObject= DomainObject.newInstance(context,strObjectId);
        String strShpHzdClass = DomainConstants.EMPTY_STRING;
        String strObjType = (String) mpAttributeInfo.get(DomainConstants.SELECT_TYPE);
        String strTechnology = (String) mpAttributeInfo.get(pgV3Constants.SELECT_ATTRIBUTE_PGTECHNOLOGY);
        String strProdExpChild = (String) mpAttributeInfo.get(pgV3Constants.SELECT_ATTRIBUTE_PGPRODUCTEXPOSEDTOCHILDREN);
        String strChildrenProd = (String) mpAttributeInfo.get(pgV3Constants.SELECT_ATTRIBUTE_PGPRODUCTMARKETEDASCHILDRENPRODUCT);
        String strReqChildSafeDesgn = (String) mpAttributeInfo.get(pgV3Constants.SELECT_ATTRIBUTE_PGDOESTHEPRODUCTREQUIRECHILDSAFEDESIGN);
        StringList slShpHzdClass 	= domainObject.getInfoList(context,"from["+pgV3Constants.RELATIONSHIP_PGTOSHIPPINGHAZARDCLASSSIFICATION+"].to.name");
        String strShppingInfo = (String) mpAttributeInfo.get(pgV3Constants.SELECT_ATTRIBUTE_PGSHIPPINGINSTRUCTIONS);
        String strStoConditions = (String) mpAttributeInfo.get(pgV3Constants.SELECT_ATTRIBUTE_STORAGECONDITIONS);
        String strEvpRate = (String) mpAttributeInfo.get(pgV3Constants.SELECT_ATTRIBUTE_PGEVAPORATIONRATE);
        String strResAcdity = (String) mpAttributeInfo.get(pgV3Constants.SELECT_ATTRIBUTE_PGRESERVEACIDITY);
        String strResAlknity = (String) mpAttributeInfo.get(pgV3Constants.SELECT_ATTRIBUTE_PGRESERVERALKALINITY);
        strTechnology = strTechnology.replaceAll("[<]","#LESS_THAN");
        strShppingInfo = strShppingInfo.replaceAll("[<]","#LESS_THAN");
        strStoConditions = strStoConditions.replaceAll("[<]","#LESS_THAN");
        if(slShpHzdClass != null && slShpHzdClass.size()>0)
        {
            strShpHzdClass = FrameworkUtil.join(slShpHzdClass,",");
        }
        sbAttribuesInfoAPP.append("<TR><TD><TABLE class=\"WordWrappdf\" cellspacing=\"0\" width=\"1000px\" id=\"StorageTableAPP\">");
        sbAttribuesInfoAPP.append("<thead>");
        sbAttribuesInfoAPP.append("<TR><TD colspan='4' class=\"new\" ><font size='4'><b>Storage, Transportation, Labeling Assessment Data<br /></b></font></TD></TR>");
        sbAttribuesInfoAPP.append("</thead>");
        sbAttribuesInfoAPP.append("<tbody>");
        sbAttribuesInfoAPP.append("<TR>");
        sbAttribuesInfoAPP.append("<TD align='left'  width=\"250px\" ><B>Technology</B></TD>");
        sbAttribuesInfoAPP.append("<TD align='left' width=\"250px\">"+validateString1(strTechnology)+"</TD>");
        sbAttribuesInfoAPP.append("<TD align='left'  width=\"250px\" ><B>Is Product Exposed to Children</B></TD>");
        sbAttribuesInfoAPP.append("<TD align='left' width=\"250px\">"+validateString1(strProdExpChild)+"</TD>");
        sbAttribuesInfoAPP.append("</TR>");
        sbAttribuesInfoAPP.append("<TR>");
        sbAttribuesInfoAPP.append("<TD align='left'  width=\"250px\" ><B>Is the Product Marketed as Children's Product</B></TD>");
        sbAttribuesInfoAPP.append("<TD align='left' width=\"250px\">"+validateString1(strChildrenProd)+"</TD>");
        sbAttribuesInfoAPP.append("<TD align='left'  width=\"250px\" ><B>Does the Product Require Child Safe Design</B></TD>");
        sbAttribuesInfoAPP.append("<TD align='left' width=\"250px\">"+validateString1(strReqChildSafeDesgn)+"</TD>");
        sbAttribuesInfoAPP.append("</TR>");
        sbAttribuesInfoAPP.append("<TR>");
        sbAttribuesInfoAPP.append("<TD align='left'  width=\"250px\" ><B>Shipping Hazard Classification</B></TD>");
        sbAttribuesInfoAPP.append("<TD align='left' width=\"250px\">"+validateString1(strShpHzdClass)+"</TD>");
        sbAttribuesInfoAPP.append("<TD align='left'  width=\"250px\" ><B>Shipping Information</B></TD>");
        sbAttribuesInfoAPP.append("<TD align='left' width=\"250px\">"+validateString1(strShppingInfo)+"</TD>");
        sbAttribuesInfoAPP.append("</TR>");
        sbAttribuesInfoAPP.append("<TR>");
        sbAttribuesInfoAPP.append("<TD align='left'  width=\"250px\" ><B>Storage Conditions</B></TD>");
        sbAttribuesInfoAPP.append("<TD align='left' width=\"250px\">"+validateString1(strStoConditions)+"</TD>");
        sbAttribuesInfoAPP.append("<TD align='left'  width=\"250px\" ><B>Evaporation Rate</B></TD>");
        sbAttribuesInfoAPP.append("<TD align='left' width=\"250px\">"+validateString1(strEvpRate)+"</TD>");
        sbAttribuesInfoAPP.append("</TR>");
        sbAttribuesInfoAPP.append("<TR>");
        sbAttribuesInfoAPP.append("<TD align='left'  width=\"250px\" ><B>Reserve Acidity</B></TD>");
        sbAttribuesInfoAPP.append("<TD align='left' width=\"250px\">"+validateString1(strResAcdity)+"</TD>");
        sbAttribuesInfoAPP.append("<TD align='left'  width=\"250px\" ><B>Reserve Alkalinity</B></TD>");
        sbAttribuesInfoAPP.append("<TD align='left' width=\"250px\">"+validateString1(strResAlknity)+"</TD>");
        sbAttribuesInfoAPP.append("</TR>");
        sbAttribuesInfoAPP.append("</tbody>");
        sbAttribuesInfoAPP.append("</TABLE><TR><TD><BR/></TD></TR></TD></TR>");
        return sbAttribuesInfoAPP.toString();
    }
    /**
     * Method to get  Storage, Transportation, Labeling Assessment Data Table for DPP
     * @param context - matrix Context
     * @param String  - Object Id
     * @return StringBuilder - String Builder of table data
     * @since DSM 2018x.5
     */
    private StringBuilder  getStorageTransportTableDPP(Context context,String strObjectId) throws FrameworkException{
        long startTime = new Date().getTime();
        StringBuilder sbAttribuesInfoDPP = new StringBuilder();
        if(validateString(strObjectId)){
            StringList slObjectSelects = getStorageTransportTableSelectables();
            Map mpAttributeInfo = getStorageTransportTableDataMap(context,strObjectId,slObjectSelects);
            if(!mpAttributeInfo.isEmpty()){
                sbAttribuesInfoDPP.append(getStorageTransportTableDPP(context,mpAttributeInfo,strObjectId));
            }
        }
        long endTime = new Date().getTime();
        System.out.println("Time to execute getStorageTransportTableDPP method : "+(endTime-startTime));
        return sbAttribuesInfoDPP;
    }
    /**
     * Helper method to get  Storage, Transportation, Labeling Assessment Data Table for DPP
     * @param context - matrix Context
     * @param String  - Object Id
     * @return StringBuilder - String Builder of table data
     * @since DSM 2018x.5
     */
    private String getStorageTransportTableDPP(Context context,Map mpAttributeInfo, String strObjectId) throws FrameworkException {
        StringBuilder sbAttribuesInfoDPP = new StringBuilder();
        String strBatteryChemicalComposition = DomainConstants.EMPTY_STRING;
        String strBatteryWeight = DomainConstants.EMPTY_STRING;
        String strBatteryWeightUOM = DomainConstants.EMPTY_STRING;
        String strBatterySize = DomainConstants.EMPTY_STRING;
        String strBatteryVoltage = DomainConstants.EMPTY_STRING;
        String strLithiumBatteryVoltageUOM = DomainConstants.EMPTY_STRING;
        String strBatteryCapacity = DomainConstants.EMPTY_STRING;
        String strTypicalCapacityUOM = DomainConstants.EMPTY_STRING;
        String strCellsForLiMetal = DomainConstants.EMPTY_STRING;
        String strBatteryLithium = DomainConstants.EMPTY_STRING;
        String strGramsOfLithiumUOM = DomainConstants.EMPTY_STRING;
        String strButtonForLiMetal = DomainConstants.EMPTY_STRING;
        String strBatteryWhRating = DomainConstants.EMPTY_STRING;
        String strLithiumBatteryEnergyUOM = DomainConstants.EMPTY_STRING;
        try {
            DomainObject domainObject= DomainObject.newInstance(context,strObjectId);
            Map<String,String> hmRequestMap = new HashMap<String,String>();
            Map<String,String> hmSettingsMap = new HashMap<String,String>();
            Map<String,Map> hmProgramMap = new HashMap<String,Map>();
            Map<String,Map> hmFieldMap = new HashMap<String,Map>();
            hmSettingsMap.put("RelationshipName", "relationship_pgToWarehousingClassification");
            hmFieldMap.put("settings", hmSettingsMap);
            hmProgramMap.put("fieldMap", hmFieldMap);
            hmRequestMap.put("objectId", strObjectId);
            hmRequestMap.put("mode", "view");
            hmProgramMap.put("requestMap", hmRequestMap);
            String strShpHzdClass = DomainConstants.EMPTY_STRING;
            String strObjType = (String) mpAttributeInfo.get(DomainConstants.SELECT_TYPE);
            String strTechnology = (String) mpAttributeInfo.get(pgV3Constants.SELECT_ATTRIBUTE_PGTECHNOLOGY);
            String strPowerSource = (String) mpAttributeInfo.get(pgV3Constants.SELECT_ATTRIBUTE_PGPOWERSOURCE);
            String strBatteryType = (String) mpAttributeInfo.get(pgV3Constants.SELECT_ATTRIBUTE_PGBATTERYTYPE);
            String strProdExpChild = (String) mpAttributeInfo.get(pgV3Constants.SELECT_ATTRIBUTE_PGPRODUCTEXPOSEDTOCHILDREN);
            String strChildrenProd = (String) mpAttributeInfo.get(pgV3Constants.SELECT_ATTRIBUTE_PGPRODUCTMARKETEDASCHILDRENPRODUCT);
            String strReqChildSafeDesgn = (String) mpAttributeInfo.get(pgV3Constants.SELECT_ATTRIBUTE_PGDOESTHEPRODUCTREQUIRECHILDSAFEDESIGN);
            String strWarehousingClassification = (String) JPO.invoke(context, "pgPLPicklist", null, "getPicklistValuesForListbox", JPO.packArgs(hmProgramMap),String.class);
            StringList slShpHzdClass 	= domainObject.getInfoList(context,"from["+pgV3Constants.RELATIONSHIP_PGTOSHIPPINGHAZARDCLASSSIFICATION+"].to.name");
            String strShppingInfo = (String) mpAttributeInfo.get(pgV3Constants.SELECT_ATTRIBUTE_PGSHIPPINGINSTRUCTIONS);
            String strStoConditions = (String) mpAttributeInfo.get(pgV3Constants.SELECT_ATTRIBUTE_STORAGECONDITIONS);
            String strEvpRate = (String) mpAttributeInfo.get(pgV3Constants.SELECT_ATTRIBUTE_PGEVAPORATIONRATE);
            String strResAcdity = (String) mpAttributeInfo.get(pgV3Constants.SELECT_ATTRIBUTE_PGRESERVEACIDITY);
            String strResAlknity = (String) mpAttributeInfo.get(pgV3Constants.SELECT_ATTRIBUTE_PGRESERVERALKALINITY);
            String strIsProductBattery = (String) mpAttributeInfo.get(pgV3Constants.SELECT_ATTRIBUTE_PGISTHEPRODUCTABATTERY);
            String strDoesProductContainBattery = (String) mpAttributeInfo.get(pgV3Constants.SELECT_ATTRIBUTE_PGDOESTHEPRODUCTCONTAINABATTERY);
            String strBatteriesInsideDevice = (String) mpAttributeInfo.get(pgV3Constants.SELECT_ATTRIBUTE_PGBATTERIESSHIPPEDINSIDEDEVICE);
            String strBatteriesOutsideDevice = (String) mpAttributeInfo.get(pgV3Constants.SELECT_ATTRIBUTE_PGBATTERIESSHIPPEDOUTSIDEDEVICE);
            String strAreBatteriesRequired = (String) mpAttributeInfo.get(pgV3Constants.SELECT_ATTRIBUTE_PGAREBATTERIESREQUIRED);
            //Added by DSM-2018x.6 for PDF Views Req#36346: Start
            String strNumberOfBatteriesRequired = (String) mpAttributeInfo.get(pgPDFViewConstants.SELECT_ATTRIBUTE_PGNUMBEROFBATTERIESREQUIRED);
            //Added by DSM-2018x.6 for PDF Views Req#36346: End
            strTechnology = strTechnology.replaceAll("[<]","#LESS_THAN");
            strShppingInfo = strShppingInfo.replaceAll("[<]","#LESS_THAN");
            strStoConditions = strStoConditions.replaceAll("[<]","#LESS_THAN");
            strWarehousingClassification = strWarehousingClassification.replaceAll("[<]","#LESS_THAN");
            if(slShpHzdClass != null && slShpHzdClass.size()>0)
            {
                strShpHzdClass = FrameworkUtil.join(slShpHzdClass,",");
            }
            if(strObjType.equalsIgnoreCase(pgV3Constants.TYPE_DEVICEPRODUCTPART) && UIUtil.isNotNullAndNotEmpty(strBatteryType))
            {
                strBatteryChemicalComposition = (String) pgPDFViewHelper.executepgDSOCPNProductDataClassMethod(context, strBatteryType, pgV3Constants.TYPE_PGPLICHEMISTRY, "");
                strBatteryWeight = (String) pgPDFViewHelper.executepgDSOCPNProductDataClassMethod(context, strBatteryType, "", pgV3Constants.ATTRIBUTE_PGPLBATTERYWEIGHT);
                strBatteryWeightUOM = (String) pgPDFViewHelper.executepgDSOCPNProductDataClassMethod(context, strBatteryType, "", pgV3Constants.ATTRIBUTE_PGPLBATTERYWEIGHTUOM);
                strBatterySize = (String) pgPDFViewHelper.executepgDSOCPNProductDataClassMethod(context, strBatteryType, pgV3Constants.TYPE_PGPLIBATTERYSIZE, "");
                strBatteryVoltage = (String) pgPDFViewHelper.executepgDSOCPNProductDataClassMethod(context, strBatteryType, "", pgV3Constants.ATTRIBUTE_PGPLIBATTERYVOLTAGE);
                strLithiumBatteryVoltageUOM = (String) pgPDFViewHelper.executepgDSOCPNProductDataClassMethod(context, strBatteryType, "", pgPDFViewConstants.ATTRIBUTE_PGPLBATTERYVOLUOM);
                strBatteryCapacity = (String) pgPDFViewHelper.executepgDSOCPNProductDataClassMethod(context, strBatteryType, "", pgV3Constants.ATTRIBUTE_PGPLIBATTERYCAPACITY);
                strTypicalCapacityUOM = (String) pgPDFViewHelper.executepgDSOCPNProductDataClassMethod(context, strBatteryType, "", pgPDFViewConstants.ATTRIBUTE_PGPLBATTERYTCUOM);
                strCellsForLiMetal = (String) pgPDFViewHelper.executepgDSOCPNProductDataClassMethod(context, strBatteryType, "", pgV3Constants.ATTRIBUTE_PGPLIBATTERYCELLS);
                strBatteryLithium = (String) pgPDFViewHelper.executepgDSOCPNProductDataClassMethod(context, strBatteryType, "", pgV3Constants.ATTRIBUTE_PGPLIBATTERYLITHUM);
                strGramsOfLithiumUOM = (String) pgPDFViewHelper.executepgDSOCPNProductDataClassMethod(context, strBatteryType, "", pgPDFViewConstants.ATTRIBUTE_PGPLBATTERYWEIGHTLIUOM);
                strButtonForLiMetal = (String) pgPDFViewHelper.executepgDSOCPNProductDataClassMethod(context, strBatteryType, pgV3Constants.TYPE_PGPLIYESNO, "");
                strBatteryWhRating = (String) pgPDFViewHelper.executepgDSOCPNProductDataClassMethod(context, strBatteryType, "", pgV3Constants.ATTRIBUTE_PGPLIBATTERYWHRATING);
                strLithiumBatteryEnergyUOM = (String) pgPDFViewHelper.executepgDSOCPNProductDataClassMethod(context, strBatteryType, "", pgPDFViewConstants.ATTRIBUTE_PGPLBATTERYENRUOM);
            }
            sbAttribuesInfoDPP.append("<TR><TD><TABLE class=\"WordWrappdf\" cellspacing=\"0\" width=\"1000px\" id=\"StorageTableDPP\">");
            sbAttribuesInfoDPP.append("<thead>");
            sbAttribuesInfoDPP.append("<TR><TD colspan='4' class=\"new\" ><font size='4'><b>Storage, Transportation, Labeling Assessment Data<br /></b></font></TD></TR>");
            sbAttribuesInfoDPP.append("</thead>");
            sbAttribuesInfoDPP.append("<tbody>");
            sbAttribuesInfoDPP.append("<TR>");
            sbAttribuesInfoDPP.append("<TD align='left'  width=\"250px\" ><B>Technology</B></TD>");
            sbAttribuesInfoDPP.append("<TD align='left' width=\"250px\" >"+validateString1(strTechnology)+"</TD>");
            sbAttribuesInfoDPP.append("<TD align='left'  width=\"250px\" ><B>Power Source</B></TD>");
            sbAttribuesInfoDPP.append("<TD align='left' width=\"250px\" >"+validateString1(strPowerSource)+"</TD>");
            sbAttribuesInfoDPP.append("</TR>");
            sbAttribuesInfoDPP.append("<TR>");
            //Added by DSM-2018x.6 for PDF Views Defect #36346: Start
            //Modified by DSM-2018x_6_Oct_CW for PDF view Req #40962  : Starts
            sbAttribuesInfoDPP.append("<TD align='left'  width=\"250px\" ><B>Number of cells/ batteries shipped inside Device</B></TD>");
            sbAttribuesInfoDPP.append("<TD align='left' width=\"250px\" >"+validateString1(strBatteriesInsideDevice)+"</TD>");
            sbAttribuesInfoDPP.append("<TD align='left' width=\"250px\" ><B>Number of Batteries Required</B></TD>");
            sbAttribuesInfoDPP.append("<TD align='left' width=\"250px\" >"+validateString1(strNumberOfBatteriesRequired)+"</TD>");
            sbAttribuesInfoDPP.append("</TR>");
            sbAttribuesInfoDPP.append("<TR>");
            sbAttribuesInfoDPP.append("<TD align='left' width=\"250px\" ><B>Battery Type</B></TD>");
            sbAttribuesInfoDPP.append("<TD align='left' width=\"250px\" >"+validateString1(strBatteryType)+"</TD>");
            sbAttribuesInfoDPP.append("<TD align='left'  width=\"250px\" ><B>Battery chemical composition</B></TD>");
            sbAttribuesInfoDPP.append("<TD align='left'  width=\"250px\" >"+validateString1(strBatteryChemicalComposition)+"</TD>");

            sbAttribuesInfoDPP.append("</TR>");
            sbAttribuesInfoDPP.append("<TR>");
            sbAttribuesInfoDPP.append("<TD align='left'  width=\"250px\" ><B>Nominal Battery Weight</B></TD>");
            sbAttribuesInfoDPP.append("<TD align='left' width=\"250px\" >"+validateString1(strBatteryWeight)+"</TD>");
            sbAttribuesInfoDPP.append("<TD align='left'  width=\"250px\" ><B>Battery Weight UoM</B></TD>");
            sbAttribuesInfoDPP.append("<TD align='left' width=\"250px\" >"+validateString1(strBatteryWeightUOM)+"</TD>");

            sbAttribuesInfoDPP.append("</TR>");
            sbAttribuesInfoDPP.append("<TR>");
            sbAttribuesInfoDPP.append("<TD align='left'  width=\"250px\" ><B>Battery Size</B></TD>");
            sbAttribuesInfoDPP.append("<TD align='left' width=\"250px\" >"+validateString1(strBatterySize)+"</TD>");
            sbAttribuesInfoDPP.append("<TD align='left'  width=\"250px\" ><B>Nominal Battery Voltage</B></TD>");
            sbAttribuesInfoDPP.append("<TD align='left' width=\"250px\" >"+validateString1(strBatteryVoltage)+"</TD>");
            sbAttribuesInfoDPP.append("</TR>");
            sbAttribuesInfoDPP.append("<TR>");
            sbAttribuesInfoDPP.append("<TD align='left'  width=\"250px\" ><B>Battery Voltage UoM</B></TD>");
            sbAttribuesInfoDPP.append("<TD align='left' width=\"250px\" >"+validateString1(strLithiumBatteryVoltageUOM)+"</TD>");
            sbAttribuesInfoDPP.append("<TD align='left'  width=\"250px\" ><B>Typical Capacity</B></TD>");
            sbAttribuesInfoDPP.append("<TD align='left' width=\"250px\" >"+validateString1(strBatteryCapacity)+"</TD>");

            sbAttribuesInfoDPP.append("</TR>");
            sbAttribuesInfoDPP.append("<TR>");
            sbAttribuesInfoDPP.append("<TD align='left'  width=\"250px\" ><B>Typical Capacity UoM</B></TD>");
            sbAttribuesInfoDPP.append("<TD align='left' width=\"250px\" >"+validateString1(strTypicalCapacityUOM)+"</TD>");
            sbAttribuesInfoDPP.append("<TD align='left'  width=\"250px\" ><B>Number of cells (required for all Lithium batteries)</B></TD>");  //Not sure  //Number of Cells - required for Li Metal
            sbAttribuesInfoDPP.append("<TD align='left' width=\"250px\" >"+validateString1(strCellsForLiMetal)+"</TD>");

            sbAttribuesInfoDPP.append("</TR>");
            sbAttribuesInfoDPP.append("<TR>");
            sbAttribuesInfoDPP.append("<TD align='left'  width=\"250px\" ><B>Grams of Lithium per cell(required for Lithium metal batteries)</B></TD>");
            sbAttribuesInfoDPP.append("<TD align='left' width=\"250px\" >"+validateString1(strBatteryLithium)+"</TD>");
            sbAttribuesInfoDPP.append("<TD align='left'  width=\"250px\" ><B>Grams of Lithium UoM</B></TD>");
            sbAttribuesInfoDPP.append("<TD align='left' width=\"250px\" >"+validateString1(strGramsOfLithiumUOM)+"</TD>");

            sbAttribuesInfoDPP.append("</TR>");
            sbAttribuesInfoDPP.append("<TR>");
            sbAttribuesInfoDPP.append("<TD align='left'  width=\"250px\" ><B>Is this a Button Battery? (required for Lithium metal batteries)</B></TD>");//Is a button - required for Li Metal
            sbAttribuesInfoDPP.append("<TD align='left' width=\"250px\" >"+validateString1(strButtonForLiMetal)+"</TD>");
            sbAttribuesInfoDPP.append("<TD align='left'  width=\"250px\" ><B>Lithium Battery Energy(required for Lithium ion batteries)</B></TD>");
            sbAttribuesInfoDPP.append("<TD align='left' width=\"250px\" >"+validateString1(strBatteryWhRating)+"</TD>");

            sbAttribuesInfoDPP.append("</TR>");
            sbAttribuesInfoDPP.append("<TR>");
            sbAttribuesInfoDPP.append("<TD align='left'  width=\"250px\" ><B>Lithium Battery Energy UoM</B></TD>");
            sbAttribuesInfoDPP.append("<TD align='left' width=\"250px\">"+validateString1(strLithiumBatteryEnergyUOM)+"</TD>");
            //Modified by DSM-2018x_6_Oct_CW for PDF view Req #40962  : Ends
            sbAttribuesInfoDPP.append("<TD align='left'  width=\"250px\" ><B>Is Product Exposed to Children</B></TD>");
            sbAttribuesInfoDPP.append("<TD align='left' width=\"250px\" >"+validateString1(strProdExpChild)+"</TD>");
            sbAttribuesInfoDPP.append("</TR>");
            sbAttribuesInfoDPP.append("<TR>");
            sbAttribuesInfoDPP.append("<TD align='left'  width=\"250px\" ><B>Is the Product Marketed as Children's Product</B></TD>");
            sbAttribuesInfoDPP.append("<TD align='left' width=\"250px\" >"+validateString1(strChildrenProd)+"</TD>");
            sbAttribuesInfoDPP.append("<TD align='left'  width=\"250px\" ><B>Does the Product Require Child Safe Design</B></TD>");
            sbAttribuesInfoDPP.append("<TD align='left' width=\"250px\" >"+validateString1(strReqChildSafeDesgn)+"</TD>");
            sbAttribuesInfoDPP.append("</TR>");
            sbAttribuesInfoDPP.append("<TR>");
            sbAttribuesInfoDPP.append("<TD align='left'  width=\"250px\" ><B>Warehousing classification</B></TD>");
            sbAttribuesInfoDPP.append("<TD align='left' width=\"250px\" >"+validateString1(strWarehousingClassification)+"</TD>");
            sbAttribuesInfoDPP.append("<TD align='left'  width=\"250px\" ><B>Shipping Hazard Classification</B></TD>");
            sbAttribuesInfoDPP.append("<TD align='left' width=\"250px\" >"+validateString1(strShpHzdClass)+"</TD>");
            sbAttribuesInfoDPP.append("</TR>");
            sbAttribuesInfoDPP.append("<TR>");
            sbAttribuesInfoDPP.append("<TD align='left'  width=\"250px\" ><B>Shipping Information</B></TD>");
            sbAttribuesInfoDPP.append("<TD align='left' width=\"250px\" >"+validateString1(strShppingInfo)+"</TD>");
            sbAttribuesInfoDPP.append("<TD align='left'  width=\"250px\" ><B>Storage Conditions</B></TD>");
            sbAttribuesInfoDPP.append("<TD align='left' width=\"250px\" >"+validateString1(strStoConditions)+"</TD>");
            sbAttribuesInfoDPP.append("</TR>");
            sbAttribuesInfoDPP.append("<TR>");
            sbAttribuesInfoDPP.append("<TD align='left'  width=\"250px\" ><B>Evaporation Rate</B></TD>");
            sbAttribuesInfoDPP.append("<TD align='left' width=\"250px\" >"+validateString1(strEvpRate)+"</TD>");
            sbAttribuesInfoDPP.append("<TD align='left'  width=\"250px\" ><B>Reserve Acidity</B></TD>");
            sbAttribuesInfoDPP.append("<TD align='left' width=\"250px\" >"+validateString1(strResAcdity)+"</TD>");
            sbAttribuesInfoDPP.append("</TR>");
            sbAttribuesInfoDPP.append("<TR>");
            sbAttribuesInfoDPP.append("<TD align='left'  width=\"250px\" ><B>Reserve Alkalinity</B></TD>");
            sbAttribuesInfoDPP.append("<TD align='left' colspan=\"3\" >"+validateString1(strResAlknity)+"</TD>");
            sbAttribuesInfoDPP.append("</TR>");
            //Added by DSM-2018x.6 for PDF Views Defect #36346: End
            sbAttribuesInfoDPP.append("</tbody>");
            sbAttribuesInfoDPP.append("</TABLE><TR><TD><BR/></TD></TR></TD></TR>");
        } catch (Exception e) {
            logger.log(Level.WARNING, null, e);
        }
        return sbAttribuesInfoDPP.toString();
    }
    /**
     * Method to get selectables for Storage, Transportation, Labeling Assessment Data
     * @return StringList - bus selectables
     * @since DSM 2018x.5
     */
    //Added by DSM-2018x.6 for PDF Views Defect #36346: Start
    private StringList  getStorageTransportTableSelectablesForRM(){
        StringList slObjectSelects = new StringList(25);
        slObjectSelects.add(DomainConstants.SELECT_TYPE);
        slObjectSelects.add(DomainConstants.SELECT_ID);
        slObjectSelects.add(pgV3Constants.SELECT_ATTRIBUTE_PGPOWERSOURCE);
        slObjectSelects.add(pgV3Constants.SELECT_ATTRIBUTE_PGBATTERYTYPE);
        slObjectSelects.add(pgV3Constants.SELECT_ATTRIBUTE_PGPUNNUMBER);
        slObjectSelects.add(pgV3Constants.SELECT_ATTRIBUTE_PGPROPERSHIPPINGNAME);
        slObjectSelects.add(pgV3Constants.SELECT_ATTRIBUTE_PGHAZARDCLASS);
        slObjectSelects.add(pgV3Constants.SELECT_ATTRIBUTE_PGPACKINGGROUP);
        slObjectSelects.add(pgV3Constants.SELECT_ATTRIBUTE_STORAGECONDITIONS);
        slObjectSelects.add(pgV3Constants.SELECT_ATTRIBUTE_PGSTORAGETEMPERATURELIMITS);
        slObjectSelects.add(pgV3Constants.SELECT_ATTRIBUTE_PGSTORAGEHUMIDITYLIMITS);
        slObjectSelects.add(pgV3Constants.SELECT_ATTRIBUTE_PGTECHNOLOGY);
        slObjectSelects.add(pgV3Constants.SELECT_ATTRIBUTE_PGPRODUCTEXPOSEDTOCHILDREN);
        slObjectSelects.add(pgV3Constants.SELECT_ATTRIBUTE_PGDOESTHEPRODUCTREQUIRECHILDSAFEDESIGN);
        slObjectSelects.add(pgV3Constants.SELECT_ATTRIBUTE_PGPRODUCTMARKETEDASCHILDRENPRODUCT);
        slObjectSelects.add(pgV3Constants.SELECT_ATTRIBUTE_PGSHIPPINGINSTRUCTIONS);
        slObjectSelects.add(pgV3Constants.SELECT_ATTRIBUTE_PGEVAPORATIONRATE);
        slObjectSelects.add(pgV3Constants.SELECT_ATTRIBUTE_PGRESERVEACIDITY);
        slObjectSelects.add(pgV3Constants.SELECT_ATTRIBUTE_PGRESERVERALKALINITY);
        slObjectSelects.add(pgV3Constants.SELECT_ATTRIBUTE_PGISTHEPRODUCTABATTERY);
        slObjectSelects.add(pgV3Constants.SELECT_ATTRIBUTE_PGDOESTHEPRODUCTCONTAINABATTERY);
        slObjectSelects.add(pgV3Constants.SELECT_ATTRIBUTE_PGBATTERIESSHIPPEDINSIDEDEVICE);
        slObjectSelects.add(pgV3Constants.SELECT_ATTRIBUTE_PGBATTERIESSHIPPEDOUTSIDEDEVICE);
        slObjectSelects.add(pgV3Constants.SELECT_ATTRIBUTE_PGAREBATTERIESREQUIRED);
        slObjectSelects.add(pgV3Constants.SELECT_ATTRIBUTE_PGASSEMBLYTYPE);
        slObjectSelects.add(pgPDFViewConstants.SELECT_ATTRIBUTE_PGNUMBEROFBATTERIESREQUIRED);
        slObjectSelects.add(pgV3Constants.SELECT_ATTRIBUTE_PGISBATTERY);
        return slObjectSelects;
    }
    /**
     * Method to get  Storage, Transportation, Labeling Assessment Data Table for DPP
     * @param context - matrix Context
     * @param String  - Object Id
     * @return StringBuilder - String Builder of table data
     * @since DSM 2018x.5
     */
    private StringBuilder  getStorageTransportTableForRM(Context context,String strObjectId) throws FrameworkException{
        long startTime = new Date().getTime();
        StringBuilder sbAttribuesInfoDPP = new StringBuilder();
        if(validateString(strObjectId)){
            StringList slObjectSelects = getStorageTransportTableSelectablesForRM();
            Map mpAttributeInfo = getStorageTransportTableDataMap(context,strObjectId,slObjectSelects);
            if(!mpAttributeInfo.isEmpty()){
                sbAttribuesInfoDPP.append(getStorageTransportTableRM(context,mpAttributeInfo,strObjectId));
            }
        }
        long endTime = new Date().getTime();
        logger.log(Level.INFO,"Time to execute getStorageTransportTableForRM method : {0}",(endTime-startTime));
        return sbAttribuesInfoDPP;
    }
    /**
     * Helper method to get  Storage, Transportation, Labeling Assessment Data Table for RM
     * @param context - matrix Context
     * @param String  - Object Id
     * @return StringBuilder - String Builder of table data
     * @since DSM 2018x.5
     */
    private String getStorageTransportTableRM(Context context,Map mpAttributeInfo, String strObjectId) {
        StringBuilder sbAttribuesInfoDPP = new StringBuilder();
        String strBatteryChemicalComposition = DomainConstants.EMPTY_STRING;
        String strBatteryWeight = DomainConstants.EMPTY_STRING;
        String strBatteryWeightUOM = DomainConstants.EMPTY_STRING;
        String strBatterySize = DomainConstants.EMPTY_STRING;
        String strBatteryVoltage = DomainConstants.EMPTY_STRING;
        String strLithiumBatteryVoltageUOM = DomainConstants.EMPTY_STRING;
        String strBatteryCapacity = DomainConstants.EMPTY_STRING;
        String strTypicalCapacityUOM = DomainConstants.EMPTY_STRING;
        String strCellsForLiMetal = DomainConstants.EMPTY_STRING;
        String strBatteryLithium = DomainConstants.EMPTY_STRING;
        String strGramsOfLithiumUOM = DomainConstants.EMPTY_STRING;
        String strButtonForLiMetal = DomainConstants.EMPTY_STRING;
        String strBatteryWhRating = DomainConstants.EMPTY_STRING;
        String strLithiumBatteryEnergyUOM = DomainConstants.EMPTY_STRING;
        try {

            String strObjType = (String) mpAttributeInfo.get(DomainConstants.SELECT_TYPE);
            String strBatteryType = (String) mpAttributeInfo.get(pgV3Constants.SELECT_ATTRIBUTE_PGBATTERYTYPE);

            //Modified by DSM-2018x.6 for PDF Views Defect #39218: Start
            String strIsBattery = (String) mpAttributeInfo.get(pgV3Constants.SELECT_ATTRIBUTE_PGISTHEPRODUCTABATTERY);
            //Modified by DSM-2018x.6 for PDF Views Defect #39218: END
            if(strObjType.equalsIgnoreCase(pgV3Constants.TYPE_RAWMATERIALPART) && UIUtil.isNotNullAndNotEmpty(strBatteryType))
            {
                strBatteryChemicalComposition = (String) pgPDFViewHelper.executepgDSOCPNProductDataClassMethod(context, strBatteryType, pgV3Constants.TYPE_PGPLICHEMISTRY, "");
                strBatteryWeight = (String) pgPDFViewHelper.executepgDSOCPNProductDataClassMethod(context, strBatteryType, "", pgV3Constants.ATTRIBUTE_PGPLBATTERYWEIGHT);
                strBatteryWeightUOM = (String) pgPDFViewHelper.executepgDSOCPNProductDataClassMethod(context, strBatteryType, "", pgV3Constants.ATTRIBUTE_PGPLBATTERYWEIGHTUOM);
                strBatterySize = (String) pgPDFViewHelper.executepgDSOCPNProductDataClassMethod(context, strBatteryType, pgV3Constants.TYPE_PGPLIBATTERYSIZE, "");
                strBatteryVoltage = (String) pgPDFViewHelper.executepgDSOCPNProductDataClassMethod(context, strBatteryType, "", pgV3Constants.ATTRIBUTE_PGPLIBATTERYVOLTAGE);
                strLithiumBatteryVoltageUOM = (String) pgPDFViewHelper.executepgDSOCPNProductDataClassMethod(context, strBatteryType, "", pgPDFViewConstants.ATTRIBUTE_PGPLBATTERYVOLUOM);
                strBatteryCapacity = (String) pgPDFViewHelper.executepgDSOCPNProductDataClassMethod(context, strBatteryType, "", pgV3Constants.ATTRIBUTE_PGPLIBATTERYCAPACITY);
                strTypicalCapacityUOM = (String) pgPDFViewHelper.executepgDSOCPNProductDataClassMethod(context, strBatteryType, "", pgPDFViewConstants.ATTRIBUTE_PGPLBATTERYTCUOM);
                strCellsForLiMetal = (String) pgPDFViewHelper.executepgDSOCPNProductDataClassMethod(context, strBatteryType, "", pgV3Constants.ATTRIBUTE_PGPLIBATTERYCELLS);
                strBatteryLithium = (String) pgPDFViewHelper.executepgDSOCPNProductDataClassMethod(context, strBatteryType, "", pgV3Constants.ATTRIBUTE_PGPLIBATTERYLITHUM);
                strGramsOfLithiumUOM = (String) pgPDFViewHelper.executepgDSOCPNProductDataClassMethod(context, strBatteryType, "", pgPDFViewConstants.ATTRIBUTE_PGPLBATTERYWEIGHTLIUOM);
                strButtonForLiMetal = (String) pgPDFViewHelper.executepgDSOCPNProductDataClassMethod(context, strBatteryType, pgV3Constants.TYPE_PGPLIYESNO, "");
                strBatteryWhRating = (String) pgPDFViewHelper.executepgDSOCPNProductDataClassMethod(context, strBatteryType, "", pgV3Constants.ATTRIBUTE_PGPLIBATTERYWHRATING);
                strLithiumBatteryEnergyUOM = (String) pgPDFViewHelper.executepgDSOCPNProductDataClassMethod(context, strBatteryType, "", pgPDFViewConstants.ATTRIBUTE_PGPLBATTERYENRUOM);
            }
            sbAttribuesInfoDPP.append("<TR><TD><TABLE class=\"WordWrappdf\" cellspacing=\"0\" width=\"1000px\" id=\"StorageTableDPP\">");
            sbAttribuesInfoDPP.append("<thead>");
            sbAttribuesInfoDPP.append("<TR><TD colspan='4' class=\"new\" ><font size='4'><b>Battery Details<br /></b></font></TD></TR>");
            sbAttribuesInfoDPP.append("</thead>");
            sbAttribuesInfoDPP.append("<tbody>");

            sbAttribuesInfoDPP.append("<TR>");
            sbAttribuesInfoDPP.append("<TD align='left' width=\"250px\" ><B>Is this a Battery</B></TD>");
            sbAttribuesInfoDPP.append("<TD align='left' width=\"250px\" >"+validateString1(strIsBattery)+"</TD>");
            sbAttribuesInfoDPP.append("<TD align='left' width=\"250px\" ><B>Battery Type</B></TD>");
            sbAttribuesInfoDPP.append("<TD align='left' width=\"250px\" >"+validateString1(strBatteryType)+"</TD>");
            sbAttribuesInfoDPP.append("</TR>");
            sbAttribuesInfoDPP.append("<TR>");
            sbAttribuesInfoDPP.append("<TD align='left'  width=\"250px\" ><B>Battery chemical composition</B></TD>");
            sbAttribuesInfoDPP.append("<TD align='left'  width=\"250px\" >"+validateString1(strBatteryChemicalComposition)+"</TD>");
            sbAttribuesInfoDPP.append("<TD align='left'  width=\"250px\" ><B>Nominal Battery Weight</B></TD>");
            sbAttribuesInfoDPP.append("<TD align='left' width=\"250px\" >"+validateString1(strBatteryWeight)+"</TD>");
            sbAttribuesInfoDPP.append("</TR>");
            sbAttribuesInfoDPP.append("<TR>");
            sbAttribuesInfoDPP.append("<TD align='left'  width=\"250px\" ><B>Battery Weight UoM</B></TD>");
            sbAttribuesInfoDPP.append("<TD align='left' width=\"250px\" >"+validateString1(strBatteryWeightUOM)+"</TD>");
            sbAttribuesInfoDPP.append("<TD align='left'  width=\"250px\" ><B>Battery Size</B></TD>");
            sbAttribuesInfoDPP.append("<TD align='left' width=\"250px\" >"+validateString1(strBatterySize)+"</TD>");
            sbAttribuesInfoDPP.append("</TR>");
            sbAttribuesInfoDPP.append("<TR>");
            sbAttribuesInfoDPP.append("<TD align='left'  width=\"250px\" ><B>Nominal Battery Voltage</B></TD>");
            sbAttribuesInfoDPP.append("<TD align='left' width=\"250px\" >"+validateString1(strBatteryVoltage)+"</TD>");
            sbAttribuesInfoDPP.append("<TD align='left'  width=\"250px\" ><B>Battery Voltage UoM</B></TD>");
            sbAttribuesInfoDPP.append("<TD align='left' width=\"250px\" >"+validateString1(strLithiumBatteryVoltageUOM)+"</TD>");
            sbAttribuesInfoDPP.append("</TR>");
            sbAttribuesInfoDPP.append("<TR>");
            sbAttribuesInfoDPP.append("<TD align='left'  width=\"250px\" ><B>Typical Capacity</B></TD>");
            sbAttribuesInfoDPP.append("<TD align='left' width=\"250px\" >"+validateString1(strBatteryCapacity)+"</TD>");
            sbAttribuesInfoDPP.append("<TD align='left'  width=\"250px\" ><B>Typical Capacity UoM</B></TD>");
            sbAttribuesInfoDPP.append("<TD align='left' width=\"250px\" >"+validateString1(strTypicalCapacityUOM)+"</TD>");
            sbAttribuesInfoDPP.append("</TR>");
            sbAttribuesInfoDPP.append("<TR>");
            sbAttribuesInfoDPP.append("<TD align='left'  width=\"250px\" ><B>Number of cells (required for all Lithium batteries)</B></TD>");  //Not sure  //Number of Cells - required for Li Metal
            sbAttribuesInfoDPP.append("<TD align='left' width=\"250px\" >"+validateString1(strCellsForLiMetal)+"</TD>");
            sbAttribuesInfoDPP.append("<TD align='left'  width=\"250px\" ><B>Grams of Lithium per cell(required for Lithium metal batteries)</B></TD>");
            sbAttribuesInfoDPP.append("<TD align='left' width=\"250px\" >"+validateString1(strBatteryLithium)+"</TD>");
            sbAttribuesInfoDPP.append("</TR>");
            sbAttribuesInfoDPP.append("<TR>");
            sbAttribuesInfoDPP.append("<TD align='left'  width=\"250px\" ><B>Grams of Lithium UoM</B></TD>");
            sbAttribuesInfoDPP.append("<TD align='left' width=\"250px\" >"+validateString1(strGramsOfLithiumUOM)+"</TD>");
            sbAttribuesInfoDPP.append("<TD align='left'  width=\"250px\" ><B>Is this a Button Battery? (required for Lithium metal batteries)</B></TD>");//Is a button - required for Li Metal
            sbAttribuesInfoDPP.append("<TD align='left' width=\"250px\" >"+validateString1(strButtonForLiMetal)+"</TD>");
            sbAttribuesInfoDPP.append("</TR>");
            sbAttribuesInfoDPP.append("<TR>");
            sbAttribuesInfoDPP.append("<TD align='left'  width=\"250px\" ><B>Lithium Battery Energy(required for Lithium ion batteries)</B></TD>");
            sbAttribuesInfoDPP.append("<TD align='left' width=\"250px\" >"+validateString1(strBatteryWhRating)+"</TD>");
            sbAttribuesInfoDPP.append("<TD align='left'  width=\"250px\" ><B>Lithium Battery Energy UoM</B></TD>");
            sbAttribuesInfoDPP.append("<TD align='left' width=\"250px\">"+validateString1(strLithiumBatteryEnergyUOM)+"</TD>");
            sbAttribuesInfoDPP.append("</TR>");

            sbAttribuesInfoDPP.append("</tbody>");
            sbAttribuesInfoDPP.append("</TABLE><TR><TD><BR/></TD></TR></TD></TR>");
        } catch (Exception e) {
            e.printStackTrace();
        }
        return sbAttribuesInfoDPP.toString();
    }
    //Added by DSM-2018x.6 for PDF Views Defect #36346: End

    //Added by DSM(Sogeti)-2015x.5.1 for PDF Views Requirements - Starts
    /**
     * Retrieve Storage, Transportation, Labeling Assessment Table Data
     * @param context
     * @param args
     * @return
     * @throws MatrixException
     */
	/*private StringBuilder getDSOAttributeData(Context context,String strObjectId, String strPDFViewKind) throws Exception{
		long startTime = new Date().getTime();
		StringBuilder sbAttribuesInfo = new StringBuilder();
		String strProductForm = DomainConstants.EMPTY_STRING;
		String strTechnology = DomainConstants.EMPTY_STRING;
		String strPowerSource = DomainConstants.EMPTY_STRING;
		String strBatteryType = DomainConstants.EMPTY_STRING;
		String strChildrenProd = DomainConstants.EMPTY_STRING;
		String strProdExpChild = DomainConstants.EMPTY_STRING;
		String strChildSafeDesgn = DomainConstants.EMPTY_STRING;
		String strProdExpDate = DomainConstants.EMPTY_STRING;

		String strShelfLife = DomainConstants.EMPTY_STRING;
		String strTempGrp = DomainConstants.EMPTY_STRING;
		String strHumGrp = DomainConstants.EMPTY_STRING;
		String strTrnsFreezeProtection = DomainConstants.EMPTY_STRING;
		String strTrnsHeatProtection = DomainConstants.EMPTY_STRING;
		String strDngGoodsClass = DomainConstants.EMPTY_STRING;
		String strMaxCUSize = DomainConstants.EMPTY_STRING;
		String strCOUnitLable = DomainConstants.EMPTY_STRING;
		String strCUUnitLable = DomainConstants.EMPTY_STRING;

		String strEvpRate = DomainConstants.EMPTY_STRING;
		String strResAcdity = DomainConstants.EMPTY_STRING;
		String strResAlknity = DomainConstants.EMPTY_STRING;
		String strShpHzdClass = DomainConstants.EMPTY_STRING;
		String strShpInfo = DomainConstants.EMPTY_STRING;
		String strStoInfo = DomainConstants.EMPTY_STRING;
		String strIntendMarkets = DomainConstants.EMPTY_STRING;

		String strPackagingType = DomainConstants.EMPTY_STRING;
		String strPackagingSize = DomainConstants.EMPTY_STRING;
		String strPackagingSizeUOM = DomainConstants.EMPTY_STRING;
		String strWarehousingClassification = DomainConstants.EMPTY_STRING;
		String strUNNumber = DomainConstants.EMPTY_STRING;
		String strProperShippingName = DomainConstants.EMPTY_STRING;
		String strHazardClass = DomainConstants.EMPTY_STRING;
		String strPackingGroup = DomainConstants.EMPTY_STRING;
		String strShippingInfo = DomainConstants.EMPTY_STRING;
		String strLabellingInfo = DomainConstants.EMPTY_STRING;
		//String strStorageInfo = DomainConstants.EMPTY_STRING;
		String strStorageTempLimits = DomainConstants.EMPTY_STRING;
		String strStorageHumidityLimits = DomainConstants.EMPTY_STRING;
		String strComments = DomainConstants.EMPTY_STRING;
		String strPrimaryPackagingType = DomainConstants.EMPTY_STRING;
		String strSecondaryPackagingType = DomainConstants.EMPTY_STRING;

		//Added by DSM-2015x.5.1 for DPP PDF Views Requirements - Starts
		String strIsProductBattery = DomainConstants.EMPTY_STRING;
		String strDoesProductContainBattery = DomainConstants.EMPTY_STRING;
		String strBatteriesInsideDevice = DomainConstants.EMPTY_STRING;
		String strBatteriesOutsideDevice = DomainConstants.EMPTY_STRING;
		String strAreBatteriesRequired = DomainConstants.EMPTY_STRING;

		String strBatteryTypeObjectId = DomainConstants.EMPTY_STRING;

		String strBatteryChemicalComposition = DomainConstants.EMPTY_STRING;
		String strBatteryLithium = DomainConstants.EMPTY_STRING;
		String strBatteryWhRating = DomainConstants.EMPTY_STRING;
		String strBatteryVoltage = DomainConstants.EMPTY_STRING;
		String strBatteryWeight = DomainConstants.EMPTY_STRING;
		String strBatteryWeightUOM = DomainConstants.EMPTY_STRING;
		String strBatteryCapacity = DomainConstants.EMPTY_STRING;
		String strCellsForLiMetal = DomainConstants.EMPTY_STRING;
		String strButtonForLiMetal = DomainConstants.EMPTY_STRING;
		String strBatterySize = DomainConstants.EMPTY_STRING;
		//Added by DSM-2015x.5.1 for DPP PDF Views Requirements - Ends

		//Added by DSM-2018x.1 for DPP PDF Views Requirement #11514 - Starts
		String strGramsOfLithiumUOM = DomainConstants.EMPTY_STRING;
		String strLithiumBatteryEnergyUOM = DomainConstants.EMPTY_STRING;
		String strLithiumBatteryVoltageUOM = DomainConstants.EMPTY_STRING;
		String strTypicalCapacityUOM = DomainConstants.EMPTY_STRING;
		//Added by DSM-2018x.1 for DPP PDF Views Requirement #11514 - Ends

		//Added by DSM(Sogeti)-2018x.1.1 for PDF Views Requirements - Starts
		String strStandardCost = DomainConstants.EMPTY_STRING;
		String strBusinessArea = DomainConstants.EMPTY_STRING;
		String strProductCategoryPlatform = DomainConstants.EMPTY_STRING;
		StringList slIntendMarkets = new StringList();
		StringList slShpHzdClass = new StringList();
		StringList slBusinessArea = new StringList();
		StringList slProductCategoryPlatform = new StringList();
		//Added by DSM(Sogeti)-2018x.1.1 for PDF Views Requirements - Ends
		//Added by DSM(Sogeti)-2018x.5 for PDF Defect 32590 - Starts
		String strUniqueFormulaIdentifier = DomainConstants.EMPTY_STRING;
		//Added by DSM(Sogeti)-2018x.5 for PDF Defect 32590 - End

		try{
			//Commented by DSM(Sogeti)-2018x.3 this is not required - Starts
//			Map mpArgsPack = new HashMap();
//			mpArgsPack.put("objectId", strObjectId);
//			String[] strArgs = JPO.packArgs(mpArgsPack);
//
//			MapList mlStabilityResultList = (MapList) JPO.invoke(context, "emxCPNCharacteristicList", null, "getStabilityResults", strArgs, MapList.class);
			//Commented by DSM(Sogeti)-2018x.3 this is not required - Ends
			if(validateString(strObjectId)){
				StringList slObjectSelects = new StringList();
				slObjectSelects.add(DomainConstants.SELECT_TYPE);
				slObjectSelects.add(pgV3Constants.SELECT_ATTRIBUTE_PGTECHNOLOGY);
				slObjectSelects.add(pgV3Constants.SELECT_ATTRIBUTE_PGPOWERSOURCE);
				slObjectSelects.add(pgV3Constants.SELECT_ATTRIBUTE_PGBATTERYTYPE);
				slObjectSelects.add(pgV3Constants.SELECT_ATTRIBUTE_PGPRODUCTMARKETEDASCHILDRENPRODUCT);
				slObjectSelects.add(pgV3Constants.SELECT_ATTRIBUTE_PGDOESTHEPRODUCTREQUIRECHILDSAFEDESIGN);
				slObjectSelects.add(pgV3Constants.SELECT_ATTRIBUTE_PGPRODUCTEXPOSEDTOCHILDREN);
				slObjectSelects.add(pgV3Constants.SELECT_ATTRIBUTE_PGINTENDEDMARKETS);
				slObjectSelects.add("to["+pgV3Constants.RELATIONSHIP_OWNINGPRODUCTLINE+"].from["+pgV3Constants.TYPE_PG_GLOBALFORM+"].attribute["+pgV3Constants.ATTRIBUTE_MARKETING_NAME+"]");
				slObjectSelects.add(pgV3Constants.SELECT_ATTRIBUTE_PGDANGEROUSGOODSCLASSIFICATION);
				slObjectSelects.add(pgV3Constants.SELECT_ATTRIBUTE_PGMAXCONSUMERUNITSIZE);
				slObjectSelects.add(pgV3Constants.SELECT_ATTRIBUTE_PGCUSTOMERUNITLABELING);
				slObjectSelects.add(pgV3Constants.SELECT_ATTRIBUTE_PGEVAPORATIONRATE);
				slObjectSelects.add(pgV3Constants.SELECT_ATTRIBUTE_PGCONSUMERUNITLABELING);
				slObjectSelects.add(pgV3Constants.SELECT_ATTRIBUTE_PGRESERVEACIDITY);
				slObjectSelects.add(pgV3Constants.SELECT_ATTRIBUTE_PGRESERVERALKALINITY);
				//Commented by DSM(Sogeti)-2018x.1.1 for PDF Views Requirements - Starts
				//slObjectSelects.add("from["+pgV3Constants.RELATIONSHIP_PGTOSHIPPINGHAZARDCLASSSIFICATION+"].to.name");
				//slObjectSelects.add("from["+pgV3Constants.RELATIONSHIP_PGINTENDEDMARKETS+"].to.name");
				//Commented by DSM(Sogeti)-2018x.1.1 for PDF Views Requirements - Ends
				//slObjectSelects.add(pgV3Constants.SELECT_ATTRIBUTE_PGSTORAGEINFORMATION);
				slObjectSelects.add(pgV3Constants.SELECT_ATTRIBUTE_PGSHIPPINGINSTRUCTIONS);
				slObjectSelects.add(pgV3Constants.SELECT_ATTRIBUTE_PGPACKAGINGSIZEUOM);
				slObjectSelects.add(pgV3Constants.SELECT_ATTRIBUTE_PGPUNNUMBER);
				slObjectSelects.add(pgV3Constants.SELECT_ATTRIBUTE_PGPROPERSHIPPINGNAME);
				slObjectSelects.add(pgV3Constants.SELECT_ATTRIBUTE_PGPACKAGINGSIZE);
				slObjectSelects.add(pgV3Constants.SELECT_ATTRIBUTE_PGWAREHOUSECLASIFICATION);
				slObjectSelects.add(pgV3Constants.SELECT_ATTRIBUTE_PGPAKAGINGTYPE);
				slObjectSelects.add(pgV3Constants.SELECT_ATTRIBUTE_PGHAZARDCLASS);
				slObjectSelects.add(pgV3Constants.SELECT_ATTRIBUTE_PGPACKINGGROUP);
                slObjectSelects.add(pgV3Constants.SELECT_ATTRIBUTE_PGSHIPPINGINSTRUCTIONS);
                slObjectSelects.add(pgV3Constants.SELECT_ATTRIBUTE_PGLABELINGINFORMATION);
                slObjectSelects.add(pgV3Constants.SELECT_ATTRIBUTE_PGSTORAGEINFORMATION);
                slObjectSelects.add(pgV3Constants.SELECT_ATTRIBUTE_PGSTORAGETEMPERATURELIMITS);
                slObjectSelects.add(pgV3Constants.SELECT_ATTRIBUTE_PGSTORAGEHUMIDITYLIMITS);
				slObjectSelects.add(pgV3Constants.SELECT_ATTRIBUTE_COMMENT);
				slObjectSelects.add(pgV3Constants.SELECT_ATTRIBUTE_PGPRIMARYPACKAGINGTYPE);
				slObjectSelects.add(pgV3Constants.SELECT_ATTRIBUTE_PGSECONDARYPACKAGINGTYPE);

				//Added by DSM-2015x.5.1 for DPP PDF Views Requirements - Starts
				slObjectSelects.add(pgV3Constants.SELECT_ATTRIBUTE_PGISTHEPRODUCTABATTERY);
				slObjectSelects.add(pgV3Constants.SELECT_ATTRIBUTE_PGDOESTHEPRODUCTCONTAINABATTERY);
				slObjectSelects.add(pgV3Constants.SELECT_ATTRIBUTE_PGBATTERIESSHIPPEDINSIDEDEVICE);
				slObjectSelects.add(pgV3Constants.SELECT_ATTRIBUTE_PGBATTERIESSHIPPEDOUTSIDEDEVICE);
				slObjectSelects.add(pgV3Constants.SELECT_ATTRIBUTE_PGAREBATTERIESREQUIRED);
				//Added by DSM-2015x.5.1 for DPP PDF Views Requirements - Ends

				//Added by DSM(Sogeti)-2018x.1.1 for PDF Views Requirements - Starts
				slObjectSelects.add(pgV3Constants.SELECT_ATTRIBUTE_PGSTANDARDCOST);
				slObjectSelects.add("to["+pgV3Constants.RELATIONSHIP_OWNINGPRODUCTLINE+"].from.name");
				//Added by DSM(Sogeti)-2018x.1.1 for PDF Views Requirements - Ends
				//Added by DSM(Sogeti)-2018x.2 for PDF Views Requirements - Start
				slObjectSelects.add(pgV3Constants.SELECT_ATTRIBUTE_STORAGECONDITIONS);
				//Added by DSM(Sogeti)-2018x.5 for PDF Defect 32590 - Starts
				slObjectSelects.add(pgV3Constants.SELECT_ATTRIBUTE_PGUNIQUEFORUMULAIDENTIFIER);
				//Added by DSM(Sogeti)-2018x.5 for PDF Defect 32590 - Ends

				//Added by DSM(Sogeti)-2018x.2 for PDF Views Requirements - Ends

				DomainObject domainObject= DomainObject.newInstance(context,strObjectId);
				Map mpAttributeInfo = domainObject.getInfo(context, slObjectSelects);
				String strObjType = (String) mpAttributeInfo.get(DomainConstants.SELECT_TYPE);

				//Added by DSM(Sogeti)-2018x.1.1 for PDF Views Requirements - Starts
				slIntendMarkets = domainObject.getInfoList(context,"from["+pgV3Constants.RELATIONSHIP_PGINTENDEDMARKETS+"].to.name");
				slShpHzdClass 	= domainObject.getInfoList(context,"from["+pgV3Constants.RELATIONSHIP_PGTOSHIPPINGHAZARDCLASSSIFICATION+"].to.name");
				slBusinessArea = domainObject.getInfoList(context,"from["+pgV3Constants.RELATIONSHIP_PGDOCUMENTTOBUSINESSAREA+"].to.name");
				slProductCategoryPlatform = domainObject.getInfoList(context,"from["+pgV3Constants.RELATIONSHIP_PGDOCUMENTTOPLATFORM+"].to.name");

				if(slIntendMarkets != null && slIntendMarkets.size()>0)
				{
					strIntendMarkets = FrameworkUtil.join(slIntendMarkets,",");
				}
				if(slShpHzdClass != null && slShpHzdClass.size()>0)
				{
					strShpHzdClass = FrameworkUtil.join(slShpHzdClass,",");
				}
				if(slBusinessArea != null && slBusinessArea.size()>0)
				{
					strBusinessArea = FrameworkUtil.join(slBusinessArea,"|");
				}
				if(slProductCategoryPlatform != null && slProductCategoryPlatform.size()>0)
				{
					strProductCategoryPlatform = FrameworkUtil.join(slProductCategoryPlatform,"|");
				}
				//Added by DSM(Sogeti)-2018x.1.1 for PDF Views Requirements - Ends

				if(!mpAttributeInfo.isEmpty()){
					//Added by DSM(Sogeti)-2018x.1.1 for PDF Views Requirements - Starts
					if(strObjType.equalsIgnoreCase(pgV3Constants.TYPE_ASSEMBLEDPRODUCTPART) || strObjType.equalsIgnoreCase(pgV3Constants.TYPE_FORMULATIONPART) || strObjType.equalsIgnoreCase(pgV3Constants.TYPE_DEVICEPRODUCTPART)){
						strProductForm = (String) mpAttributeInfo.get("to["+pgV3Constants.RELATIONSHIP_OWNINGPRODUCTLINE+"].from.name");
					} else {
						strProductForm = (String) mpAttributeInfo.get("to["+pgV3Constants.RELATIONSHIP_OWNINGPRODUCTLINE+"].from["+pgV3Constants.TYPE_PG_GLOBALFORM+"].attribute["+pgV3Constants.ATTRIBUTE_MARKETING_NAME+"]");
					}
					//Added by DSM(Sogeti)-2018x.1.1 for PDF Views Requirements - Ends
					strTechnology = (String) mpAttributeInfo.get(pgV3Constants.SELECT_ATTRIBUTE_PGTECHNOLOGY);
					//Added by DSM(Sogeti)-2018x.0 for PDF Views Defect #24419 - Starts
					strTechnology = strTechnology.replaceAll("[<]","#LESS_THAN");
					//Added by DSM(Sogeti)-2018x.0 for PDF Views Defect #24419 - Ends
					strPowerSource = (String) mpAttributeInfo.get(pgV3Constants.SELECT_ATTRIBUTE_PGPOWERSOURCE);
					strBatteryType = (String) mpAttributeInfo.get(pgV3Constants.SELECT_ATTRIBUTE_PGBATTERYTYPE);
					strChildrenProd = (String) mpAttributeInfo.get(pgV3Constants.SELECT_ATTRIBUTE_PGPRODUCTMARKETEDASCHILDRENPRODUCT);
					strProdExpChild = (String) mpAttributeInfo.get(pgV3Constants.SELECT_ATTRIBUTE_PGPRODUCTEXPOSEDTOCHILDREN);
					strChildSafeDesgn = (String) mpAttributeInfo.get(pgV3Constants.SELECT_ATTRIBUTE_PGDOESTHEPRODUCTREQUIRECHILDSAFEDESIGN);

					strDngGoodsClass = (String) mpAttributeInfo.get(pgV3Constants.SELECT_ATTRIBUTE_PGDANGEROUSGOODSCLASSIFICATION);
					//Added by DSM(Sogeti)-2018x.0 for PDF Views Defect #24419 - Starts
					strDngGoodsClass = strDngGoodsClass.replaceAll("[<]","#LESS_THAN");
					//Added by DSM(Sogeti)-2018x.0 for PDF Views Defect #24419 - Ends
					strMaxCUSize = (String) mpAttributeInfo.get(pgV3Constants.SELECT_ATTRIBUTE_PGMAXCONSUMERUNITSIZE);

					//Added by DSM-2018x.1 for PDF Views (Defect #24437) - Starts
					if(strMaxCUSize.equalsIgnoreCase("FALSE"))
						strMaxCUSize = "No";
					else if (strMaxCUSize.equalsIgnoreCase("TRUE"))
						strMaxCUSize = "Yes";
					//Added by DSM-2018x.1 for PDF Views (Defect #24437) - Ends

					strCOUnitLable = (String) mpAttributeInfo.get(pgV3Constants.SELECT_ATTRIBUTE_PGCONSUMERUNITLABELING);
					//Added by DSM(Sogeti)-2018x.0 for PDF Views Defect #24419 - Starts
					strCOUnitLable = strCOUnitLable.replaceAll("[<]","#LESS_THAN");
					//Added by DSM(Sogeti)-2018x.0 for PDF Views Defect #24419 - Ends
					strCUUnitLable = (String) mpAttributeInfo.get(pgV3Constants.SELECT_ATTRIBUTE_PGCUSTOMERUNITLABELING);
					//Added by DSM(Sogeti)-2018x.0 for PDF Views Defect #24419 - Starts
					strCUUnitLable = strCUUnitLable.replaceAll("[<]","#LESS_THAN");
					//Added by DSM(Sogeti)-2018x.0 for PDF Views Defect #24419 - Ends
					strEvpRate = (String) mpAttributeInfo.get(pgV3Constants.SELECT_ATTRIBUTE_PGEVAPORATIONRATE);
					strResAcdity = (String) mpAttributeInfo.get(pgV3Constants.SELECT_ATTRIBUTE_PGRESERVEACIDITY);
					strResAlknity = (String) mpAttributeInfo.get(pgV3Constants.SELECT_ATTRIBUTE_PGRESERVERALKALINITY);
					//Commented by DSM(Sogeti)-2018x.1.1 for PDF Views Requirements - Starts
					//strShpHzdClass = (String) mpAttributeInfo.get("from["+pgV3Constants.RELATIONSHIP_PGTOSHIPPINGHAZARDCLASSSIFICATION+"].to.name");
					//Commented by DSM(Sogeti)-2018x.1.1 for PDF Views Requirements - Ends
					strShpInfo = (String) mpAttributeInfo.get(pgV3Constants.SELECT_ATTRIBUTE_PGSHIPPINGINSTRUCTIONS);
					//Added by DSM(Sogeti)-2018x.0 for PDF Views Defect #24419 - Starts
					strShpInfo = strShpInfo.replaceAll("[<]","#LESS_THAN");
					//Added by DSM(Sogeti)-2018x.0 for PDF Views Defect #24419 - Ends
					//Added by DSM(Sogeti)-2018x.2 for PDF Views Starts
					strStoInfo = (String) mpAttributeInfo.get(pgV3Constants.SELECT_ATTRIBUTE_STORAGECONDITIONS);
					//Added by DSM(Sogeti)-2018x.2 for PDF Views Ends
					//Added by DSM(Sogeti)-2018x.0 for PDF Views Defect #24419 - Starts
					strStoInfo = strStoInfo.replaceAll("[<]","#LESS_THAN");
					//Added by DSM(Sogeti)-2018x.0 for PDF Views Defect #24419 - Ends
					//Commented by DSM(Sogeti)-2018x.1.1 for PDF Views Requirements - Starts
					//strIntendMarkets = (String) mpAttributeInfo.get("from["+pgV3Constants.RELATIONSHIP_PGINTENDEDMARKETS+"].to.name");
					//Commented by DSM(Sogeti)-2018x.1.1 for PDF Views Requirements - Ends

					strPackagingType = (String) mpAttributeInfo.get(pgV3Constants.SELECT_ATTRIBUTE_PGPAKAGINGTYPE);
					strPackagingSize = (String) mpAttributeInfo.get(pgV3Constants.SELECT_ATTRIBUTE_PGPACKAGINGSIZE);
					strPackagingSizeUOM = (String) mpAttributeInfo.get(pgV3Constants.SELECT_ATTRIBUTE_PGPACKAGINGSIZEUOM);

					//Added by DSM(Sogeti)-2018x.1.1 for PDF Views Requirements - Starts
					strStandardCost = (String) mpAttributeInfo.get(pgV3Constants.SELECT_ATTRIBUTE_PGSTANDARDCOST);
					//Added by DSM(Sogeti)-2018x.1.1 for PDF Views Requirements - Ends

					//Added by DSM(Sogeti)-2015x.5.1 for PDF Views Defect #18002 - Starts
					Map hmRequestMap = new HashMap();
					Map hmSettingsMap = new HashMap();
					Map hmProgramMap = new HashMap();
					Map hmFieldMap = new HashMap();

					hmSettingsMap.put("RelationshipName", "relationship_pgToWarehousingClassification");
					hmFieldMap.put("settings", hmSettingsMap);
					hmProgramMap.put("fieldMap", hmFieldMap);
					hmRequestMap.put("objectId", strObjectId);
					hmRequestMap.put("mode", "view");
					hmProgramMap.put("requestMap", hmRequestMap);

					strWarehousingClassification = (String) JPO.invoke(context, "pgPLPicklist", null, "getPicklistValuesForListbox", JPO.packArgs(hmProgramMap),String.class);
					strWarehousingClassification = strWarehousingClassification.replaceAll("[<]","#LESS_THAN");
					//Added by DSM(Sogeti)-2015x.5.1 for PDF Views Defect #18002 - Ends

					strUNNumber = (String) mpAttributeInfo.get(pgV3Constants.SELECT_ATTRIBUTE_PGPUNNUMBER);
					//Added by DSM(Sogeti)-2018x.0 for PDF Views Defect #24419 - Starts
					strUNNumber = strUNNumber.replaceAll("[<]","#LESS_THAN");
					//Added by DSM(Sogeti)-2018x.0 for PDF Views Defect #24419 - Ends
					strProperShippingName = (String) mpAttributeInfo.get(pgV3Constants.SELECT_ATTRIBUTE_PGPROPERSHIPPINGNAME);
					//Added by DSM(Sogeti)-2018x.0 for PDF Views Defect #24419 - Starts
					strProperShippingName = strProperShippingName.replaceAll("[<]","#LESS_THAN");
					//Added by DSM(Sogeti)-2018x.0 for PDF Views Defect #24419 - Ends
					strHazardClass = (String) mpAttributeInfo.get(pgV3Constants.SELECT_ATTRIBUTE_PGHAZARDCLASS);
					strPackingGroup = (String) mpAttributeInfo.get(pgV3Constants.SELECT_ATTRIBUTE_PGPACKINGGROUP);
					strShippingInfo = (String) mpAttributeInfo.get(pgV3Constants.SELECT_ATTRIBUTE_PGSHIPPINGINSTRUCTIONS);
					//Added by DSM(Sogeti)-2018x.0 for PDF Views Defect #24419 - Starts
					strShippingInfo = strShippingInfo.replaceAll("[<]","#LESS_THAN");
					//Added by DSM(Sogeti)-2018x.0 for PDF Views Defect #24419 - Ends
                    strLabellingInfo = (String) mpAttributeInfo.get(pgV3Constants.SELECT_ATTRIBUTE_PGLABELINGINFORMATION);
					//Added by DSM(Sogeti)-2018x.0 for PDF Views Defect #24419 - Starts
					strLabellingInfo = strLabellingInfo.replaceAll("[<]","#LESS_THAN");
					//Added by DSM(Sogeti)-2018x.0 for PDF Views Defect #24419 - Ends
                    //strStorageInfo = (String) mpAttributeInfo.get(pgV3Constants.SELECT_ATTRIBUTE_PGSTORAGEINFORMATION);
					//Added by DSM(Sogeti)-2018x.0 for PDF Views Defect #24419 - Starts
					//strStorageInfo = strStorageInfo.replaceAll("[<]","#LESS_THAN");
					//Added by DSM(Sogeti)-2018x.0 for PDF Views Defect #24419 - Ends
                    strStorageTempLimits = (String) mpAttributeInfo.get(pgV3Constants.SELECT_ATTRIBUTE_PGSTORAGETEMPERATURELIMITS);
					//Added by DSM(Sogeti)-2018x.0 for PDF Views Defect #24419 - Starts
					strStorageTempLimits = strStorageTempLimits.replaceAll("[<]","#LESS_THAN");
					//Added by DSM(Sogeti)-2018x.0 for PDF Views Defect #24419 - Ends
					strStorageHumidityLimits = (String) mpAttributeInfo.get(pgV3Constants.SELECT_ATTRIBUTE_PGSTORAGEHUMIDITYLIMITS);
					//Added by DSM(Sogeti)-2018x.0 for PDF Views Defect #24419 - Starts
					strStorageHumidityLimits = strStorageHumidityLimits.replaceAll("[<]","#LESS_THAN");
					//Added by DSM(Sogeti)-2018x.0 for PDF Views Defect #24419 - Ends
					strComments = (String) mpAttributeInfo.get(pgV3Constants.SELECT_ATTRIBUTE_COMMENT);
					//Modified by DSM-2015x.5.1 November Bug Fix for Defect #22073 - Starts
					// Start Fix for ALM -22803 : [TC] cannot release CSS revised IPS data
					//Added by DSM(Sogeti)-2018x.5 for PDF Defect 32590 - Starts
					strUniqueFormulaIdentifier = (String) mpAttributeInfo.get(pgV3Constants.SELECT_ATTRIBUTE_PGUNIQUEFORUMULAIDENTIFIER);

					//Added by DSM(Sogeti)-2018x.5 for PDF Defect 32590 - Ends

					if(UIUtil.isNotNullAndNotEmpty(strComments)) {
						strComments =strComments.replaceAll("[<]","#LESS_THAN");
						strComments =strComments.replaceAll("[>]","#GREATER_THAN");
					}
					// End Fix for ALM -22803 : [TC] cannot release CSS revised IPS data
					//Modified by DSM-2015x.5.1 November Bug Fix for Defect #22073 - Ends
					strPrimaryPackagingType = (String) mpAttributeInfo.get(pgV3Constants.SELECT_ATTRIBUTE_PGPRIMARYPACKAGINGTYPE);
					strSecondaryPackagingType = (String) mpAttributeInfo.get(pgV3Constants.SELECT_ATTRIBUTE_PGSECONDARYPACKAGINGTYPE);

					//Added by DSM-2015x.5.1 for DPP PDF Views Requirements - Starts
					strIsProductBattery = (String) mpAttributeInfo.get(pgV3Constants.SELECT_ATTRIBUTE_PGISTHEPRODUCTABATTERY);
					strDoesProductContainBattery = (String) mpAttributeInfo.get(pgV3Constants.SELECT_ATTRIBUTE_PGDOESTHEPRODUCTCONTAINABATTERY);
					strBatteriesInsideDevice = (String) mpAttributeInfo.get(pgV3Constants.SELECT_ATTRIBUTE_PGBATTERIESSHIPPEDINSIDEDEVICE);
					strBatteriesOutsideDevice = (String) mpAttributeInfo.get(pgV3Constants.SELECT_ATTRIBUTE_PGBATTERIESSHIPPEDOUTSIDEDEVICE);
					strAreBatteriesRequired = (String) mpAttributeInfo.get(pgV3Constants.SELECT_ATTRIBUTE_PGAREBATTERIESREQUIRED);

					//Modified by DSM-2015x.5.1 for Defect #18762 - Starts
					if(strObjType.equalsIgnoreCase(pgV3Constants.TYPE_DEVICEPRODUCTPART) && UIUtil.isNotNullAndNotEmpty(strBatteryType))
					{
//						pgDSOCPNProductData_mxJPO DSOCPNProductData = new pgDSOCPNProductData_mxJPO(context,null);

						strBatteryChemicalComposition = (String) pgPDFViewHelper.executepgDSOCPNProductDataClassMethod(context, strBatteryType, pgV3Constants.TYPE_PGPLICHEMISTRY, "");
						strBatterySize = (String) pgPDFViewHelper.executepgDSOCPNProductDataClassMethod(context, strBatteryType, pgV3Constants.TYPE_PGPLIBATTERYSIZE, "");
						strButtonForLiMetal = (String) pgPDFViewHelper.executepgDSOCPNProductDataClassMethod(context, strBatteryType, pgV3Constants.TYPE_PGPLIYESNO, "");
						strBatteryLithium = (String) pgPDFViewHelper.executepgDSOCPNProductDataClassMethod(context, strBatteryType, "", pgV3Constants.ATTRIBUTE_PGPLIBATTERYLITHUM);
						strBatteryWhRating = (String) pgPDFViewHelper.executepgDSOCPNProductDataClassMethod(context, strBatteryType, "", pgV3Constants.ATTRIBUTE_PGPLIBATTERYWHRATING);
						strBatteryVoltage = (String) pgPDFViewHelper.executepgDSOCPNProductDataClassMethod(context, strBatteryType, "", pgV3Constants.ATTRIBUTE_PGPLIBATTERYVOLTAGE);
						strBatteryWeight = (String) pgPDFViewHelper.executepgDSOCPNProductDataClassMethod(context, strBatteryType, "", pgV3Constants.ATTRIBUTE_PGPLBATTERYWEIGHT);
						strBatteryWeightUOM = (String) pgPDFViewHelper.executepgDSOCPNProductDataClassMethod(context, strBatteryType, "", pgV3Constants.ATTRIBUTE_PGPLBATTERYWEIGHTUOM);
						strBatteryCapacity = (String) pgPDFViewHelper.executepgDSOCPNProductDataClassMethod(context, strBatteryType, "", pgV3Constants.ATTRIBUTE_PGPLIBATTERYCAPACITY);
						strCellsForLiMetal = (String) pgPDFViewHelper.executepgDSOCPNProductDataClassMethod(context, strBatteryType, "", pgV3Constants.ATTRIBUTE_PGPLIBATTERYCELLS);
					//Modified by DSM-2015x.5.1 for Defect #18762 - Ends

						//Added by DSM-2018x.1 for DPP PDF Views Requirement #11514 - Starts
						strGramsOfLithiumUOM = (String) pgPDFViewHelper.executepgDSOCPNProductDataClassMethod(context, strBatteryType, "", pgPDFViewConstants.ATTRIBUTE_PGPLBATTERYWEIGHTLIUOM);
						strLithiumBatteryEnergyUOM = (String) pgPDFViewHelper.executepgDSOCPNProductDataClassMethod(context, strBatteryType, "", pgPDFViewConstants.ATTRIBUTE_PGPLBATTERYENRUOM);
						strLithiumBatteryVoltageUOM = (String) pgPDFViewHelper.executepgDSOCPNProductDataClassMethod(context, strBatteryType, "", pgPDFViewConstants.ATTRIBUTE_PGPLBATTERYVOLUOM);
						strTypicalCapacityUOM = (String) pgPDFViewHelper.executepgDSOCPNProductDataClassMethod(context, strBatteryType, "", pgPDFViewConstants.ATTRIBUTE_PGPLBATTERYTCUOM);
						//Added by DSM-2018x.1 for DPP PDF Views Requirement #11514 - Ends

					}
					//Added by DSM-2015x.5.1 for DPP PDF Views Requirements - Ends



					sbAttribuesInfo.append("<TR><TD><TABLE class=\"WordWrappdf\" cellspacing=\"0\" width=\"1000px\" id=\"pgFormulatedProductTable\">");
					sbAttribuesInfo.append("<thead>");
					sbAttribuesInfo.append("<TR><TD colspan='2' class=\"new\" ><font size='4'><b>Storage, Transportation, Labeling Assessment Data<br /></b></font></TD></TR>");
					sbAttribuesInfo.append("</thead>");
					//Added by DSM(Sogeti)-2018x.1.1 for PDF Views Requirements - Starts
					sbAttribuesInfo.append("<TR>");
					//Modified by DSM(Sogeti)-2018x.2 for PDF Views Requirements - Starts
					if(!(strObjType.equalsIgnoreCase(pgV3Constants.TYPE_FINISHEDPRODUCTPART) || strObjType.equalsIgnoreCase(pgV3Constants.TYPE_FORMULATIONPART) || strObjType.equalsIgnoreCase(pgV3Constants.TYPE_ASSEMBLEDPRODUCTPART) || (strObjType.equalsIgnoreCase(pgV3Constants.TYPE_DEVICEPRODUCTPART)) || strObjType.equalsIgnoreCase(pgV3Constants.TYPE_PGCUSTOMERUNITPART) || strObjType.equalsIgnoreCase(pgV3Constants.TYPE_PGCONSUMERUNITPART))){
					//Modified by DSM(Sogeti)-2018x.2 for PDF Views Requirements - Ends
					//Added by DSM(Sogeti)-2018x.1.1 for PDF Views Requirements - Ends
						sbAttribuesInfo.append("<TD align='left' width=\"250px\"><B>Product Form</B></TD>");
						sbAttribuesInfo.append("<TD align='left' width=\"250px\">"+validateString1(strProductForm)+"</TD>");
					//Added by DSM(Sogeti)-2018x.1.1 for PDF Views Requirements - Starts
					}
					//Added by DSM(Sogeti)-2018x.1.1 for PDF Views Requirements - Ends
					//Modified by DSM(Sogeti)-2018x.1.1 for PDF Views Requirements - Start
					if(strObjType.equalsIgnoreCase(pgV3Constants.TYPE_ASSEMBLEDPRODUCTPART) || strObjType.equalsIgnoreCase(pgV3Constants.TYPE_DEVICEPRODUCTPART) || strObjType.equalsIgnoreCase(pgV3Constants.TYPE_FORMULATIONPART)){
					sbAttribuesInfo.append("<TD align='left' width=\"250px\"><B>Technology</B></TD>");
//					sbAttribuesInfo.append("<TD align='left' colspan='3' width=\"250px\">"+validateString1(strTechnology)+"</TD>");
					//Modified by DSM(Sogeti) for PDF Views Defect 32866 - Start
					if(strObjType.equalsIgnoreCase(pgV3Constants.TYPE_ASSEMBLEDPRODUCTPART)){
						sbAttribuesInfo.append("<TD align='left'  width=\"250px\">"+validateString1(strTechnology)+"</TD>");
						sbAttribuesInfo.append("<TD align='left'  width=\"250px\"><B>Is Product Exposed to Children</B></TD>");
						sbAttribuesInfo.append("<TD align='left'  width=\"250px\" >"+validateString1(strProdExpChild)+"</TD>");

					}

					else if(strObjType.equalsIgnoreCase(pgV3Constants.TYPE_DEVICEPRODUCTPART) && ("contractpackaging").equalsIgnoreCase(strPDFViewKind))
					{
						sbAttribuesInfo.append("<TD align='left'  width=\"250px\">"+validateString1(strTechnology)+"</TD>");

						sbAttribuesInfo.append("<TD align='left'  width=\"250px\" ><B>Power Source</B></TD>");
						sbAttribuesInfo.append("<TD align='left' width=\"250px\">"+validateString1(strPowerSource)+"</TD>");
					}
					else {
						sbAttribuesInfo.append("<TD align='left' colspan='3' width=\"250px\">"+validateString1(strTechnology)+"</TD>");
					}
					//Modified by DSM(Sogeti)- for PDF Views Defect -32866 - Ends
					//Modified by DSM(Sogeti)-2018x.1.1 for PDF Views Requirements - Ends
					}
					//Modified by DSM(Sogeti)-2018x.2 for PDF Views Requirements - Starts
					//else if(strObjType.equalsIgnoreCase(pgV3Constants.TYPE_PGCUSTOMERUNITPART) || strObjType.equalsIgnoreCase(pgV3Constants.TYPE_PGCONSUMERUNITPART)){
					//Commented by DSM-(Sogeti) 2018x.2 for PDF Views (Defect #29256) : Starts
					if(strObjType.equalsIgnoreCase(pgV3Constants.TYPE_PGCONSUMERUNITPART)){
					//Modified by DSM(Sogeti)-2018x.2 for PDF Views Requirements - Ends
						sbAttribuesInfo.append("<TD align='left' width=\"250px\"><B>Packaging Type</B></TD>");
						sbAttribuesInfo.append("<TD align='left' colspan=\"3\" width=\"250px\">"+validateString1(strPackagingType)+"</TD>");
					}
					//Commented by DSM-(Sogeti) 2018x.2 for PDF Views (Defect #29256) : Ends
					//Modified and commented by DSM(Sogeti)-2018x.1.1 for PDF Views Requirements - Starts
					sbAttribuesInfo.append("</TR>");
					else if(strObjType.equalsIgnoreCase(pgV3Constants.TYPE_FINISHEDPRODUCTPART)){
						sbAttribuesInfo.append("<TD align='left' width=\"250px\"><B>Primary Packaging Type</B></TD>");
						sbAttribuesInfo.append("<TD align='left' width=\"250px\">"+validateString1(strPrimaryPackagingType)+"</TD>");
					}
					sbAttribuesInfo.append("</TR>");
                     if(strObjType.equalsIgnoreCase(pgV3Constants.TYPE_FINISHEDPRODUCTPART)){
                         sbAttribuesInfo.append("<TR>");
						sbAttribuesInfo.append("<TD align='left' width=\"250px\"><B>Secondary Packaging Type</B></TD>");
						sbAttribuesInfo.append("<TD align='left' colspan='3'>"+validateString1(strSecondaryPackagingType)+"</TD>");
						sbAttribuesInfo.append("</TR>");
					}
					//Modified by DSM(Sogeti)-2018x.2 for PDF Views Requirements - Starts
					//if(strObjType.equalsIgnoreCase(pgV3Constants.TYPE_PGCUSTOMERUNITPART) || strObjType.equalsIgnoreCase(pgV3Constants.TYPE_PGCONSUMERUNITPART)){
					//Commented by DSM-(Sogeti) 2018x.2 for PDF Views (Defect #29256) : Starts
					if(strObjType.equalsIgnoreCase(pgV3Constants.TYPE_PGCONSUMERUNITPART)){
					//Modified and commented by DSM(Sogeti)-2018x.1.1 for PDF Views Requirements - Ends
						sbAttribuesInfo.append("<TR>");
						sbAttribuesInfo.append("<TD align='left' width=\"250px\"><B>Packaging Size</B></TD>");
						sbAttribuesInfo.append("<TD align='left' width=\"250px\">"+validateString1(strPackagingSize)+"</TD>");
						sbAttribuesInfo.append("<TD align='left' width=\"250px\"><B>Packaging Size UoM</B></TD>");
						sbAttribuesInfo.append("<TD align='left' width=\"250px\">"+validateString1(strPackagingSizeUOM)+"</TD>");
						sbAttribuesInfo.append("</TR>");
					}
					//Commented by DSM-(Sogeti) 2018x.2 for PDF Views (Defect #29256) : Ends
					//Modified by DSM-2015x.5.1 for CUP/COP PDF Views Defect 19865 - Starts
					//Modified by DSM-2015x.5.1 for APP PDF Views Defect 19273 - Starts


					//Modified by DSM(Sogeti)-2018x.5 for PDF Views Requirements - Starts
				 if(strObjType.equalsIgnoreCase(pgV3Constants.TYPE_DEVICEPRODUCTPART) && ("contractpackaging").equalsIgnoreCase(strPDFViewKind))
				 {
					 	sbAttribuesInfo.append("<TR>");
						sbAttribuesInfo.append("<TD align='left'  width=\"250px\" ><B>Battery Type</B></TD>");
						sbAttribuesInfo.append("<TD align='left' width=\"250px\">"+validateString1(strBatteryType)+"</TD>");
						sbAttribuesInfo.append("<TD align='left'  width=\"250px\" ><B>Battery weight</B></TD>");
						sbAttribuesInfo.append("<TD align='left' width=\"250px\">"+validateString1(strBatteryWeight)+"</TD>");
						sbAttribuesInfo.append("</TR>");

						sbAttribuesInfo.append("<TR>");
						sbAttribuesInfo.append("<TD align='left'  width=\"250px\" ><B>Battery weight Unit of Measure</B></TD>");
						sbAttribuesInfo.append("<TD align='left' width=\"250px\">"+validateString1(strBatteryWeightUOM)+"</TD>");
						sbAttribuesInfo.append("<TD align='left'  width=\"250px\" ><B>Battery chemical composition</B></TD>");
						sbAttribuesInfo.append("<TD width=\"250px\">"+validateString1(strBatteryChemicalComposition)+"</TD>");
						sbAttribuesInfo.append("</TR>");


						sbAttribuesInfo.append("<TR>");
						//sbAttribuesInfo.append("<TD align='left'  width=\"250px\" ><B>Grams of Lithium per cell/battery</B></TD>");
						sbAttribuesInfo.append("<TD align='left'  width=\"250px\" ><B>Grams of Lithium per cell(required for Lithium metal batteries</B></TD>");
						sbAttribuesInfo.append("<TD align='left' width=\"250px\">"+validateString1(strBatteryLithium)+"</TD>");
						//sbAttribuesInfo.append("<TD align='left'  width=\"250px\" ><B>Grams of Lithium per cell/battery Unit of Measure</B></TD>");
						sbAttribuesInfo.append("<TD align='left'  width=\"250px\" ><B>Grams of Lithium UoM</B></TD>");
						sbAttribuesInfo.append("<TD align='left' width=\"250px\">"+validateString1(strGramsOfLithiumUOM)+"</TD>");
						sbAttribuesInfo.append("</TR>");

						sbAttribuesInfo.append("<TR>");
//						sbAttribuesInfo.append("<TD align='left'  width=\"250px\" ><B>Lithium Battery Energy (Watt/hs)</B></TD>");
						sbAttribuesInfo.append("<TD align='left'  width=\"250px\" ><B>Lithium Battery Energy(required for Lithium ion batteries)</B></TD>");
						sbAttribuesInfo.append("<TD align='left' width=\"250px\">"+validateString1(strBatteryWhRating)+"</TD>");
//						sbAttribuesInfo.append("<TD align='left'  width=\"250px\" ><B>Lithium Battery Energy (Watt/hs) Unit of Measure</B></TD>");
						sbAttribuesInfo.append("<TD align='left'  width=\"250px\" ><B>Lithium Battery Energy UoM</B></TD>");
						sbAttribuesInfo.append("<TD align='left' width=\"250px\">"+validateString1(strLithiumBatteryEnergyUOM)+"</TD>");
						sbAttribuesInfo.append("</TR>");

						//Modified for 2018.5 Defect 322867 -- Starts
						sbAttribuesInfo.append("<TR>");
						sbAttribuesInfo.append("<TD align='left'  width=\"250px\" ><B>Is this a Button Battery? (required for Lithium metal batteries)</B></TD>");
						sbAttribuesInfo.append("<TD align='left' width=\"250px\"></TD>");
						sbAttribuesInfo.append("<TD align='left'  width=\"250px\" ><B></B></TD>");
						sbAttribuesInfo.append("<TD align='left' width=\"250px\"></TD>");
						sbAttribuesInfo.append("</TR>");



						//Modified for 2018.5 Defect 322867 -- Ends

						sbAttribuesInfo.append("<TR>");
						sbAttribuesInfo.append("<TD align='left'  width=\"250px\" ><B>Battery Size</B></TD>");
						sbAttribuesInfo.append("<TD width=\"250px\">"+validateString1(strBatterySize)+"</TD>");
						//Modified for 2018.5 Defect 322867 -- Starts
						sbAttribuesInfo.append("<TD align='left'  width=\"250px\" ><B>Nominal Battery Voltage</B></TD>");
						sbAttribuesInfo.append("<TD width=\"250px\"></TD>");
						//Modified for 2018.5 Defect 322867 -- Ends
						sbAttribuesInfo.append("</TR>");
						//Modified for 2018.5 Defect 322867 -- Starts


						sbAttribuesInfo.append("<TR>");
						sbAttribuesInfo.append("<TD align='left'  width=\"250px\" ><B>Battery Voltage UoM</B></TD>");
						sbAttribuesInfo.append("<TD width=\"250px\"></TD>");
						sbAttribuesInfo.append("<TD align='left'  width=\"250px\"></TD>");
						sbAttribuesInfo.append("<TD width=\"250px\"></TD>");
						sbAttribuesInfo.append("</TR>");
						//Modified for 2018.5 Defect 322867 -- Ends


						sbAttribuesInfo.append("<TR>");
						sbAttribuesInfo.append("<TD align='left'  width=\"250px\" ><B>Number of Cells - required for Li Metal</B></TD>");
						sbAttribuesInfo.append("<TD width=\"250px\">"+validateString1(strCellsForLiMetal)+"</TD>");
						sbAttribuesInfo.append("<TD align='left'  width=\"250px\" ><B>Typical Capacity - mAh</B></TD>");
						sbAttribuesInfo.append("<TD align='left' width=\"250px\">"+validateString1(strBatteryCapacity)+"</TD>");
						sbAttribuesInfo.append("</TR>");

						sbAttribuesInfo.append("<TR>");

						sbAttribuesInfo.append("<TD align='left'  width=\"250px\" ><B>Typical Capacity Unit of Measure</B></TD>");
						sbAttribuesInfo.append("<TD align='left' width=\"250px\">"+validateString1(strTypicalCapacityUOM)+"</TD>");
						sbAttribuesInfo.append("<TD align='left'  width=\"250px\" ><B>Is the product a battery?</B></TD>");
						sbAttribuesInfo.append("<TD width=\"250px\">"+validateString1(strIsProductBattery)+"</TD>");
						sbAttribuesInfo.append("</TR>");


						sbAttribuesInfo.append("<TR>");
						sbAttribuesInfo.append("<TD align='left' width=\"250px\" ><B>Does the product contain a battery?</B></TD>");
						sbAttribuesInfo.append("<TD align='left' width=\"250px\">"+validateString1(strDoesProductContainBattery)+"</TD>");
						sbAttribuesInfo.append("<TD align='left' width=\"250px\" ><B>Number of cells/batteries shipped inside Device</B></TD>");
						sbAttribuesInfo.append("<TD align='left' width=\"250px\">"+validateString1(strBatteriesInsideDevice)+"</TD>");
						sbAttribuesInfo.append("</TR>");

						sbAttribuesInfo.append("<TR>");
						sbAttribuesInfo.append("<TD align='left' width=\"250px\" ><B>Number of cells/batteries shipped outside Device</B></TD>");
						sbAttribuesInfo.append("<TD align='left' width=\"250px\">"+validateString1(strBatteriesOutsideDevice)+"</TD>");
						sbAttribuesInfo.append("<TD align='left' width=\"250px\"><B>Are batteries required</B></TD>");
						sbAttribuesInfo.append("<TD align='left' width=\"250px\">"+validateString1(strAreBatteriesRequired)+"</TD>");
						sbAttribuesInfo.append("</TR>");

						sbAttribuesInfo.append("<TR>");
						sbAttribuesInfo.append("<TD align='left'  width=\"250px\" ><B>Does the Product Require Child Safe Design</B></TD>");
						sbAttribuesInfo.append("<TD align='left' width=\"250px\">"+validateString1(strChildSafeDesgn)+"</TD>");
						sbAttribuesInfo.append("<TD align='left'  width=\"250px\" ></TD>");
						sbAttribuesInfo.append("<TD align='left' width=\"250px\"></TD>");
						sbAttribuesInfo.append("</TR>");


						sbAttribuesInfo.append("<TR>");
						sbAttribuesInfo.append("<TD align='left'  width=\"250px\" ><B>Warehousing Classification</B></TD>");
						sbAttribuesInfo.append("<TD width=\"250px\">"+validateString1(strWarehousingClassification)+"</TD>");
						sbAttribuesInfo.append("<TD align='left' width=\"250px\" ></TD>");
						sbAttribuesInfo.append("<TD align='left' width=\"250px\"></TD>");
						sbAttribuesInfo.append("</TR>");

						sbAttribuesInfo.append("<TR>");
						sbAttribuesInfo.append("<TD align='left'  width=\"250px\" ><B>Is Product Exposed to Children</B></TD>");
						sbAttribuesInfo.append("<TD width=\"250px\">"+validateString1(strProdExpChild)+"</TD>");
						sbAttribuesInfo.append("<TD align='left' width=\"250px\" ><B>Evaporation Rate</B></TD>");
						sbAttribuesInfo.append("<TD align='left' width=\"250px\">"+validateString1(strEvpRate)+"</TD>");
						sbAttribuesInfo.append("</TR>");


						sbAttribuesInfo.append("<TR>");

						sbAttribuesInfo.append("<TD align='left' width=\"250px\" ><B>Reserve Acidity</B></TD>");
						sbAttribuesInfo.append("<TD align='left' width=\"250px\">"+validateString1(strResAcdity)+"</TD>");
						sbAttribuesInfo.append("<TD align='left' width=\"250px\" ><B>Reserve Alkalinity</B></TD>");
						sbAttribuesInfo.append("<TD align='left' width=\"250px\">"+validateString1(strResAlknity)+"</TD>");
						sbAttribuesInfo.append("</TR>");

						sbAttribuesInfo.append("<TR>");

						sbAttribuesInfo.append("<TD align='left' width=\"250px\" ><B>Shipping Hazard Classification</B></TD>");
						sbAttribuesInfo.append("<TD align='left' width=\"250px\">"+validateString1(strShpHzdClass)+"</TD>");
						sbAttribuesInfo.append("<TD align='left' width=\"250px\" ><B>Shipping Information</B></TD>");
						sbAttribuesInfo.append("<TD align='left' width=\"250px\">"+validateString1(strShpInfo)+"</TD>");
						sbAttribuesInfo.append("</TR>");

						sbAttribuesInfo.append("<TR>");
						sbAttribuesInfo.append("<TD align='left' width=\"250px\" ><B>Storage Conditions</B></TD>");
						sbAttribuesInfo.append("<TD align='left' width=\"250px\">"+validateString1(strStoInfo)+"</TD>");
						sbAttribuesInfo.append("<TD align='left' width=\"250px\" ></TD>");
						sbAttribuesInfo.append("<TD align='left' width=\"250px\"></TD>");
						sbAttribuesInfo.append("</TR>");
				}
				//Modified by DSM- for PDF Views Requirements - Ends





					//Modified by DSM(Sogeti)-2018x.1.1 for PDF Views Requirements - Starts
					//Added by DSM(Sogeti)-2018x.5 for PDF Defect 32867 - Starts
					if((strObjType.equalsIgnoreCase(pgV3Constants.TYPE_DEVICEPRODUCTPART)  && !("contractpackaging").equalsIgnoreCase(strPDFViewKind)) || strObjType.equalsIgnoreCase(pgV3Constants.TYPE_FINISHEDPRODUCTPART))
					//Added by DSM(Sogeti)-2018x.5 for PDF Defect 32867 - End
					{
					//Modified by DSM(Sogeti)-2018x.1.1 for PDF Views Requirements - Ends
					//Modified by DSM-2015x.5.1 for CUP/COP PDF Views Defect 19865 - Ends
					sbAttribuesInfo.append("<TR>");
					sbAttribuesInfo.append("<TD align='left'  width=\"250px\" ><B>Power Source</B></TD>");
					sbAttribuesInfo.append("<TD align='left' width=\"250px\">"+validateString1(strPowerSource)+"</TD>");
					sbAttribuesInfo.append("<TD align='left'  width=\"250px\" ><B>Battery Type</B></TD>");
					sbAttribuesInfo.append("<TD align='left' width=\"250px\">"+validateString1(strBatteryType)+"</TD>");
					sbAttribuesInfo.append("</TR>");
					}
					//Modified by DSM-2015x.5.1 for APP PDF Views Defect 19273 - Starts

					//Modified by DSM-2015x.5.1 for DPP PDF Views Requirements - Starts
					//Added by DSM(Sogeti)-2018x.5 for PDF Defect 32867 - Starts
					if(strObjType.equalsIgnoreCase(pgV3Constants.TYPE_DEVICEPRODUCTPART) && !("contractpackaging").equalsIgnoreCase(strPDFViewKind) ){
					//Added by DSM(Sogeti)-2018x.5 for PDF Defect 32867 - End

						//Modified by DSM-2018x.1 for DPP PDF Views Requirement #11514 - Starts
							sbAttribuesInfo.append("<TR>");
							sbAttribuesInfo.append("<TD align='left'  width=\"250px\" ><B>Battery weight</B></TD>");
							sbAttribuesInfo.append("<TD align='left' width=\"250px\">"+validateString1(strBatteryWeight)+"</TD>");
							sbAttribuesInfo.append("<TD align='left'  width=\"250px\" ><B>Battery weight Unit of Measure</B></TD>");
							sbAttribuesInfo.append("<TD align='left' width=\"250px\">"+validateString1(strBatteryWeightUOM)+"</TD>");
							sbAttribuesInfo.append("</TR>");

							sbAttribuesInfo.append("<TR>");
							sbAttribuesInfo.append("<TD align='left'  width=\"250px\" ><B>Battery chemical composition</B></TD>");
							sbAttribuesInfo.append("<TD colspan=\"3\">"+validateString1(strBatteryChemicalComposition)+"</TD>");
							sbAttribuesInfo.append("</TR>");

							sbAttribuesInfo.append("<TR>");
							sbAttribuesInfo.append("<TD align='left'  width=\"250px\" ><B>Grams of Lithium per cell/battery</B></TD>");
							sbAttribuesInfo.append("<TD align='left' width=\"250px\">"+validateString1(strBatteryLithium)+"</TD>");
							sbAttribuesInfo.append("<TD align='left'  width=\"250px\" ><B>Grams of Lithium per cell/battery Unit of Measure</B></TD>");
							sbAttribuesInfo.append("<TD align='left' width=\"250px\">"+validateString1(strGramsOfLithiumUOM)+"</TD>");
							sbAttribuesInfo.append("</TR>");

							sbAttribuesInfo.append("<TR>");
							sbAttribuesInfo.append("<TD align='left'  width=\"250px\" ><B>Lithium Battery Energy (Watt/hs)</B></TD>");
							sbAttribuesInfo.append("<TD align='left' width=\"250px\">"+validateString1(strBatteryWhRating)+"</TD>");
							sbAttribuesInfo.append("<TD align='left'  width=\"250px\" ><B>Lithium Battery Energy (Watt/hs) Unit of Measure</B></TD>");
							sbAttribuesInfo.append("<TD align='left' width=\"250px\">"+validateString1(strLithiumBatteryEnergyUOM)+"</TD>");
							sbAttribuesInfo.append("</TR>");

							//Modified for 2018.5 Defect 322867 -- Starts
							sbAttribuesInfo.append("<TR>");
							sbAttribuesInfo.append("<TD align='left'  width=\"250px\" ><B>Is this a Button Battery? (required for Lithium metal batteries)</B></TD>");
							sbAttribuesInfo.append("<TD align='left' width=\"250px\"></TD>");
							sbAttribuesInfo.append("<TD align='left'  width=\"250px\" ><B></B></TD>");
							sbAttribuesInfo.append("<TD align='left' width=\"250px\"></TD>");
							sbAttribuesInfo.append("</TR>");

//							sbAttribuesInfo.append("<TR>");
//							sbAttribuesInfo.append("<TD align='left'  width=\"250px\" ><B>Lithium Battery Voltage</B></TD>");
//							sbAttribuesInfo.append("<TD align='left' width=\"250px\">"+validateString1(strBatteryVoltage)+"</TD>");
//							sbAttribuesInfo.append("<TD align='left'  width=\"250px\" ><B>Lithium Battery Voltage  Unit of Measure</B></TD>");
//							sbAttribuesInfo.append("<TD align='left' width=\"250px\">"+validateString1(strLithiumBatteryVoltageUOM)+"</TD>");
//							sbAttribuesInfo.append("</TR>");

							//Modified for 2018.5 Defect 322867 -- Ends

							sbAttribuesInfo.append("<TR>");
							sbAttribuesInfo.append("<TD align='left'  width=\"250px\" ><B>Battery Size</B></TD>");
							sbAttribuesInfo.append("<TD width=\"250px\">"+validateString1(strBatterySize)+"</TD>");

							//Modified for 2018.5 Defect 322867 -- Starts
							sbAttribuesInfo.append("<TD align='left'  width=\"250px\" ><B>Nominal Battery Voltage</B></TD>");
							sbAttribuesInfo.append("<TD width=\"250px\"></TD>");
							//Modified for 2018.5 Defect 322867 -- Ends
							sbAttribuesInfo.append("</TR>");
							//Modified for 2018.5 Defect 322867 -- Starts
//							sbAttribuesInfo.append("<TR>");
//							sbAttribuesInfo.append("<TD align='left'  width=\"250px\" ><B>Is a button - required for Li Metal</B></TD>");
//							sbAttribuesInfo.append("<TD colspan=\"3\">"+validateString1(strButtonForLiMetal)+"</TD>");
//							sbAttribuesInfo.append("</TR>");
							//Modified for 2018.5 Defect 322867 -- Ends

							//Modified for 2018.5 Defect 322867 -- Starts
							sbAttribuesInfo.append("<TR>");
							sbAttribuesInfo.append("<TD align='left'  width=\"250px\" ><B>Battery Voltage UoM</B></TD>");
							sbAttribuesInfo.append("<TD width=\"250px\"></TD>");
							sbAttribuesInfo.append("<TD align='left'  width=\"250px\"></TD>");
							sbAttribuesInfo.append("<TD width=\"250px\"></TD>");
							sbAttribuesInfo.append("</TR>");
							//Modified for 2018.5 Defect 322867 -- Ends


							sbAttribuesInfo.append("<TR>");
							sbAttribuesInfo.append("<TD align='left'  width=\"250px\" ><B>Number of Cells - required for Li Metal</B></TD>");
							sbAttribuesInfo.append("<TD colspan=\"3\">"+validateString1(strCellsForLiMetal)+"</TD>");
							sbAttribuesInfo.append("</TR>");

							sbAttribuesInfo.append("<TR>");
							sbAttribuesInfo.append("<TD align='left'  width=\"250px\" ><B>Typical Capacity - mAh</B></TD>");
							sbAttribuesInfo.append("<TD align='left' width=\"250px\">"+validateString1(strBatteryCapacity)+"</TD>");
							sbAttribuesInfo.append("<TD align='left'  width=\"250px\" ><B>Typical Capacity Unit of Measure</B></TD>");
							sbAttribuesInfo.append("<TD align='left' width=\"250px\">"+validateString1(strTypicalCapacityUOM)+"</TD>");
							sbAttribuesInfo.append("</TR>");

							sbAttribuesInfo.append("<TR>");
							sbAttribuesInfo.append("<TD align='left'  width=\"250px\" ><B>Is the product a battery?</B></TD>");
							sbAttribuesInfo.append("<TD colspan=\"3\">"+validateString1(strIsProductBattery)+"</TD>");
							sbAttribuesInfo.append("</TR>");

							sbAttribuesInfo.append("<TR>");
							sbAttribuesInfo.append("<TD align='left'  width=\"250px\" ><B>Does the product contain a battery?</B></TD>");
							sbAttribuesInfo.append("<TD colspan=\"3\">"+validateString1(strDoesProductContainBattery)+"</TD>");
							sbAttribuesInfo.append("</TR>");

							sbAttribuesInfo.append("<TR>");
							sbAttribuesInfo.append("<TD align='left'  width=\"250px\" ><B>Number of cells/batteries shipped inside Device</B></TD>");
							sbAttribuesInfo.append("<TD align='left' width=\"250px\">"+validateString1(strBatteriesInsideDevice)+"</TD>");
							sbAttribuesInfo.append("<TD align='left'  width=\"250px\" ><B>Number of cells/batteries shipped outside Device</B></TD>");
							sbAttribuesInfo.append("<TD align='left' width=\"250px\">"+validateString1(strBatteriesOutsideDevice)+"</TD>");
							sbAttribuesInfo.append("</TR>");

							sbAttribuesInfo.append("<TR>");
							sbAttribuesInfo.append("<TD align='left'  width=\"250px\" ><B>Are batteries required</B></TD>");
							sbAttribuesInfo.append("<TD colspan=\"3\">"+validateString1(strAreBatteriesRequired)+"</TD>");
							sbAttribuesInfo.append("</TR>");

							sbAttribuesInfo.append("<TR>");
							sbAttribuesInfo.append("<TD align='left'  width=\"250px\" ><B>Is Product Marketed as Children's Product</B></TD>");
							sbAttribuesInfo.append("<TD colspan=\"3\">"+validateString1(strChildrenProd)+"</TD>");
							sbAttribuesInfo.append("</TR>");
						//Modified by DSM-2018x.1 for DPP PDF Views Requirement #11514 - Ends
					}
					//Added by DSM(Sogeti)-2018x.1.1 for PDF Views Requirements - Starts
					//Modified by DSM(Sogeti)-2018x.2 for PDF Views Requirements - Starts
					else if(strObjType.equalsIgnoreCase(pgV3Constants.TYPE_ASSEMBLEDPRODUCTPART) || strObjType.equalsIgnoreCase(pgV3Constants.TYPE_FORMULATIONPART)){
					//Modified by DSM(Sogeti)-2018x.2 for PDF Views Requirements - Ends
					//Added by DSM(Sogeti)-2018x.1.1 for PDF Views Requirements - Ends
						sbAttribuesInfo.append("<TR>");
						sbAttribuesInfo.append("<TD align='left'  width=\"250px\" ><B>Is Product Marketed as Children's Product</B></TD>");
						sbAttribuesInfo.append("<TD align='left' width=\"250px\">"+validateString1(strChildrenProd)+"</TD>");
						sbAttribuesInfo.append("<TD align='left'  width=\"250px\" ><B>Does the Product Require Child Safe Design</B></TD>");
						sbAttribuesInfo.append("<TD align='left' width=\"250px\">"+validateString1(strChildSafeDesgn)+"</TD>");
						sbAttribuesInfo.append("</TR>");
						//Modified by DSM(Sogeti) for PDF Views Defect-32866 - Starts
						if(strObjType.equalsIgnoreCase(pgV3Constants.TYPE_FORMULATIONPART)){
							sbAttribuesInfo.append("<TR>");
						sbAttribuesInfo.append("<TD align='left'  width=\"250px\" ><B>Is Product Exposed to Children</B></TD>");
						sbAttribuesInfo.append("<TD colspan=\"3\">"+validateString1(strProdExpChild)+"</TD>");

						sbAttribuesInfo.append("</TR>");
						}
						//Modified by DSM(Sogeti) for PDF Views Defect-32866 - Ends

					}
					//Commented by DSM(Sogeti)-2018x.2 for PDF Views Requirements - Starts
					//sbAttribuesInfo.append("<TR>");
					//Commented by DSM(Sogeti)-2018x.2 for PDF Views Requirements - Ends
					//Modified by DSM-2015x.5.1 for CUP/COP PDF Views Defect 19865 - Starts
					//Modified by DSM(Sogeti)-2018x.2 for PDF Views Requirements - Starts
					if(strObjType.equalsIgnoreCase(pgV3Constants.TYPE_FINISHEDPRODUCTPART)){
					//Modified by DSM-2015x.5.1 for CUP/COP PDF Views Defect 19865 - Ends
					//Added by DSM(Sogeti)-2018x.2 for PDF Views Requirements - Starts

						//Added by DSM(Sogeti)-2018x.1.1 for PDF Views Requirements - Starts
						if("consolidatedpackaging".equalsIgnoreCase(strPDFViewKind) || "warehouse".equalsIgnoreCase(strPDFViewKind) || "GenDoc".equalsIgnoreCase(strPDFViewKind)) {
							sbAttribuesInfo.append("<TD align='left'  width=\"250px\"></TD>");
							sbAttribuesInfo.append("<TD align='left' width=\"250px\"></TD>");
							sbAttribuesInfo.append("<TD align='left'  width=\"250px\" ><B>Warehousing Classification</B></TD>");
							sbAttribuesInfo.append("<TD align='left'  width=\"250px\">"+validateString1(strWarehousingClassification)+"</TD>");
						} else {
						//Added by DSM(Sogeti)-2018x.1.1 for PDF Views Requirements - Ends
							sbAttribuesInfo.append("<TD align='left'  width=\"250px\" ><B>Is Product Exposed to Children</B></TD>");
							sbAttribuesInfo.append("<TD align='left' width=\"250px\">"+validateString1(strProdExpChild)+"</TD>");
							sbAttribuesInfo.append("<TD align='left'  width=\"250px\" ><B>Warehousing Classification</B></TD>");
							sbAttribuesInfo.append("<TD align='left' width=\"250px\">"+validateString1(strWarehousingClassification)+"</TD>");
						//Added by DSM(Sogeti)-2018x.1.1 for PDF Views Requirements - Start
						}
						//Added by DSM(Sogeti)-2018x.1.1 for PDF Views Requirements - Ends
					}
					else
					//Modified by DSM(Sogeti)-2018x.2 for PDF Views Requirements - Ends

					//Added by DSM(Sogeti)-2018x.5 for PDF Defect 32867 - Starts
					 if(strObjType.equalsIgnoreCase(pgV3Constants.TYPE_DEVICEPRODUCTPART) && !("contractpackaging").equalsIgnoreCase(strPDFViewKind)){
					 //Added by DSM(Sogeti)-2018x.5 for PDF Defect 32867 - End
						//Added by DSM(Sogeti)-2018x.2 for PDF Views Requirements - Starts
						sbAttribuesInfo.append("<TR>");
						sbAttribuesInfo.append("<TD align='left'  width=\"250px\" ><B>Does the Product Require Child Safe Design</B></TD>");
						sbAttribuesInfo.append("<TD align='left' width=\"250px\">"+validateString1(strChildSafeDesgn)+"</TD>");
						sbAttribuesInfo.append("<TD align='left'  width=\"250px\" ><B>Is Product Exposed to Children</B></TD>");
						sbAttribuesInfo.append("<TD align='left' width=\"250px\">"+validateString1(strProdExpChild)+"</TD>");
						sbAttribuesInfo.append("</TR>");
					 }

					// Added by DSM-(Sogeti) for PDF Views Defect #32867 : Starts
				//	 if(strObjType.equalsIgnoreCase(pgV3Constants.TYPE_DEVICEPRODUCTPART) || strObjType.equalsIgnoreCase(pgV3Constants.TYPE_FORMULATIONPART)) {
					 if(strObjType.equalsIgnoreCase(pgV3Constants.TYPE_FORMULATIONPART)) {
						sbAttribuesInfo.append("<TR>");
						sbAttribuesInfo.append("<TD align='left'  width=\"250px\" ><B>Warehousing Classification</B></TD>");
						sbAttribuesInfo.append("<TD colspan=\"3\">"+validateString1(strWarehousingClassification)+"</TD>");
						sbAttribuesInfo.append("</TR>");
						//Added by DSM(Sogeti)-2018x.2 for PDF Views Requirements - Starts
					 }
					// Added by DSM-(Sogeti) for PDF Views Defect #32867 : Ends
					//Modified by DSM-2015x.5.1 for DPP PDF Views Requirements - Ends

					//Modified by DSM(Sogeti)-2018x.2 for PDF Views Requirements - Starts
					 else if(!(("allinfo".equalsIgnoreCase(strPDFViewKind) && strObjType.equalsIgnoreCase(pgV3Constants.TYPE_PGCUSTOMERUNITPART) || strObjType.equalsIgnoreCase(pgV3Constants.TYPE_PGCONSUMERUNITPART)) || strObjType.equalsIgnoreCase(pgV3Constants.TYPE_FINISHEDPRODUCTPART))){
						//Modified by DSM(Sogeti)-2018x.2 for PDF Views Requirements - Ends
						//Added by DSM(Sogeti)-2018x.2 for PDF Views Requirements - Starts
						sbAttribuesInfo.append("<TR>");
						//Added by DSM(Sogeti)-2018x.2 for PDF Views Requirements - Ends
						sbAttribuesInfo.append("<TD align='left'  width=\"250px\" ><B>Is Product Exposed to Children</B></TD>");
						sbAttribuesInfo.append("<TD colspan=\"3\">"+validateString1(strProdExpChild)+"</TD>");
						//Added by DSM(Sogeti)-2018x.2 for PDF Views Requirements - Starts
						sbAttribuesInfo.append("</TR>");
						//Added by DSM(Sogeti)-2018x.2 for PDF Views Requirements - Ends
					}/* /*else {
						sbAttribuesInfo.append("<TR>");
						sbAttribuesInfo.append("<TD align='left'  width=\"250px\" ><B>Is Product Exposed to Children</B></TD>");
						sbAttribuesInfo.append("<TD colspan=\"3\">"+validateString1(strProdExpChild)+"</TD>");
						sbAttribuesInfo.append("</TR>");
					}
					//Commented by DSM(Sogeti)-2018x.2 for PDF Views Requirements - Starts
					//sbAttribuesInfo.append("</TR>");
					//Commented by DSM(Sogeti)-2018x.2 for PDF Views Requirements - Ends

					//Commented by DSM-(Sogeti) 2018x.1.1 for PDF Views (Defect #26425) : Starts
					//Added by DSM-2018x.1 for DPP PDF Views Requirement #11514 - Starts
					if(!strObjType.equalsIgnoreCase(pgV3Constants.TYPE_DEVICEPRODUCTPART)){
					//Added by DSM-2018x.1 for DPP PDF Views Requirement #11514 - Ends

						if((mlStabilityResultList != null) && (mlStabilityResultList.size()>0)){
							for (int i = 0; i <mlStabilityResultList.size(); i++){

								Map mpStabilityResults = (Map) mlStabilityResultList.get(0);
								strProdExpDate = (String) mpStabilityResults.get(pgV3Constants.SELECT_ATTRIBUTE_PGPRODUCTEXPIRATIONDATE);
								strShelfLife = (String) mpStabilityResults.get(pgV3Constants.SELECT_ATTRIBUTE_PGTOTALSHELFLIFE);
								strTempGrp = (String) mpStabilityResults.get(pgV3Constants.SELECT_ATTRIBUTE_PGTEMPERATUREGROUP);
								strHumGrp = (String) mpStabilityResults.get(pgV3Constants.SELECT_ATTRIBUTE_PGHUMIDITYGROUP);
								strTrnsFreezeProtection = (String) mpStabilityResults.get(pgV3Constants.SELECT_ATTRIBUTE_PGTRANSPORTFREEZEPROTECTION);
								strTrnsHeatProtection = (String) mpStabilityResults.get(pgV3Constants.SELECT_ATTRIBUTE_PGTRANSPORTHEATPROTECTION);
								sbAttribuesInfo.append("<TR>");
								sbAttribuesInfo.append("<TD align='left' width=\"250px\" ><B>Product Expiration Date Required</B></TD>");
								sbAttribuesInfo.append("<TD align='left' width=\"250px\">"+validateString1(strProdExpDate)+"</TD>");
								sbAttribuesInfo.append("<TD align='left' width=\"250px\" ><B>Total Shelf Life - Days</B></TD>");
								sbAttribuesInfo.append("<TD align='left' width=\"250px\">"+validateString1(strShelfLife)+"</TD>");
								sbAttribuesInfo.append("</TR>");

								sbAttribuesInfo.append("<TR>");
								sbAttribuesInfo.append("<TD align='left' width=\"250px\" ><B>Temperature Group</B></TD>");
								sbAttribuesInfo.append("<TD align='left' width=\"250px\">"+validateString1(strTempGrp)+"</TD>");
								sbAttribuesInfo.append("<TD align='left' width=\"250px\" ><B>Humidity Group</B></TD>");
								sbAttribuesInfo.append("<TD align='left' width=\"250px\">"+validateString1(strHumGrp)+"</TD>");
								sbAttribuesInfo.append("</TR>");

								sbAttribuesInfo.append("<TR>");
								sbAttribuesInfo.append("<TD align='left' width=\"250px\" ><B>Transport Freeze Protection</B></TD>");
								sbAttribuesInfo.append("<TD align='left' width=\"250px\">"+validateString1(strTrnsFreezeProtection)+"</TD>");
								sbAttribuesInfo.append("<TD align='left' width=\"250px\" ><B>Transport Heat Protection</B></TD>");
								sbAttribuesInfo.append("<TD align='left' width=\"250px\">"+validateString1(strTrnsHeatProtection)+"</TD>");
								sbAttribuesInfo.append("</TR>");
							}
						}

					//Added by DSM-2018x.1 for DPP PDF Views Requirement #11514 - Starts
					}
					//Added by DSM-2018x.1 for DPP PDF Views Requirement #11514 - Ends
					//Commented by DSM-(Sogeti) 2018x.1.1 for PDF Views (Defect #26425) : Ends
					//Modified by DSM-(Sogeti) 2018x.2 for PDF Views Starts
					//Modified by DSM-(Sogeti) 2018x.2 for PDF Views (Defect #29256) : Starts
					 if(strObjType.equalsIgnoreCase(pgV3Constants.TYPE_PGCUSTOMERUNITPART) || strObjType.equalsIgnoreCase(pgV3Constants.TYPE_PGCONSUMERUNITPART)){
						sbAttribuesInfo.append("<TR>");
						sbAttribuesInfo.append("<TD align='left' width=\"250px\" ><B>Dangerous Goods Classification</B></TD>");
						sbAttribuesInfo.append("<TD align='left' width=\"250px\">"+validateString1(strDngGoodsClass)+"</TD>");
						sbAttribuesInfo.append("<TD align='left' width=\"250px\" ><B>UN Specification Packaging Material Required</B></TD>");
						sbAttribuesInfo.append("<TD align='left' width=\"250px\">"+validateString1(strMaxCUSize)+"</TD>");
						sbAttribuesInfo.append("</TR>");
					}
					//Added by DSM for PDF Views Defect 32590 - Start
					//Commented by DSM for PDF Views Defect 32590 - Starts
					 if(strObjType.equalsIgnoreCase(pgV3Constants.TYPE_FINISHEDPRODUCTPART)) {
						sbAttribuesInfo.append("<TR>");
						sbAttribuesInfo.append("<TD align='left' width=\"250px\" ><B>Customer Unit Labeling</B></TD>");
						sbAttribuesInfo.append("<TD align='left' width=\"250px\">"+validateString1(strCUUnitLable)+"</TD>");
						sbAttribuesInfo.append("<TD align='left' width=\"250px\" ><B>Consumer Unit Labeling</B></TD>");
						sbAttribuesInfo.append("<TD align='left' width=\"250px\">"+validateString1(strCOUnitLable)+"</TD>");
						sbAttribuesInfo.append("</TR>");
					}
					//Added by DSM for PDF Views Defect 32590 - Ends
					//Commented by DSM for PDF Views Defect 32590 - End


						//Modified by DSM-(Sogeti)  for PDF Views (Defect #32866) : Starts
					 if(strObjType.equalsIgnoreCase(pgV3Constants.TYPE_ASSEMBLEDPRODUCTPART)) {
							sbAttribuesInfo.append("<TR>");
							sbAttribuesInfo.append("<TD align='left' width=\"250px\" ><B>Shipping Hazard Classification</B></TD>");
							sbAttribuesInfo.append("<TD align='left' width=\"250px\">"+validateString1(strShpHzdClass)+"</TD>");
							sbAttribuesInfo.append("<TD align='left' width=\"250px\" ><B>Shipping Information</B></TD>");
							sbAttribuesInfo.append("<TD align='left' width=\"250px\">"+validateString1(strShpInfo)+"</TD>");
							sbAttribuesInfo.append("</TR>");
							sbAttribuesInfo.append("<TR>");
							sbAttribuesInfo.append("<TD align='left' width=\"250px\" ><B>Storage Conditions</B></TD>");
							sbAttribuesInfo.append("<TD align='left' width=\"250px\">"+validateString1(strStoInfo)+"</TD>");
							sbAttribuesInfo.append("<TD align='left' width=\"250px\" ><B>Evaporation Rate</B></TD>");
							sbAttribuesInfo.append("<TD align='left' width=\"250px\">"+validateString1(strEvpRate)+"</TD>");
							sbAttribuesInfo.append("</TR>");
							sbAttribuesInfo.append("<TR>");
							sbAttribuesInfo.append("<TD align='left' width=\"250px\" ><B>Reserve Acidity</B></TD>");
							sbAttribuesInfo.append("<TD align='left' width=\"250px\">"+validateString1(strResAcdity)+"</TD>");
							sbAttribuesInfo.append("<TD align='left' width=\"250px\" ><B>Reserve Alkalinity</B></TD>");
							sbAttribuesInfo.append("<TD align='left' width=\"250px\">"+validateString1(strResAlknity)+"</TD>");
							sbAttribuesInfo.append("</TR>");

							//Added by DSM-(Sogeti) 2018x.5 for PDF Views (Defect #32717) : Starts
							if("allinfo".equalsIgnoreCase(strPDFViewKind)){
								 	sbAttribuesInfo.append("<TR>");
									sbAttribuesInfo.append("<TD align='left' width=\"250px\" ><B>Intended Markets</B></TD>");
									sbAttribuesInfo.append("<TD colspan=\"3\">"+validateString1(strIntendMarkets)+"</TD>");
									sbAttribuesInfo.append("</TR>");
								}
							//Added by DSM-(Sogeti) 2018x.5 for PDF Views (Defect #32717) : Ends
					 }
						//Modified by DSM-(Sogeti)  for PDF Views (Defect #32866) : Ends



					//Modified by DSM-(Sogeti) 2018x.2 for PDF Views (Defect #29256) : Ends
					//Modified by DSM-(Sogeti) 2018x.2 for PDF Views Ends
						//Modified by DSM for PDF Views (Defect #32866) : Starts
 					//if(strObjType.equalsIgnoreCase(pgV3Constants.TYPE_ASSEMBLEDPRODUCTPART) || strObjType.equalsIgnoreCase(pgV3Constants.TYPE_DEVICEPRODUCTPART)){
						if(strObjType.equalsIgnoreCase(pgV3Constants.TYPE_DEVICEPRODUCTPART) && !("contractpackaging").equalsIgnoreCase(strPDFViewKind)){
						//Modified by DSM for PDF Views (Defect #32866) : Ends
						sbAttribuesInfo.append("<TR>");
						sbAttribuesInfo.append("<TD align='left' width=\"250px\" ><B>Evaporation Rate</B></TD>");
						sbAttribuesInfo.append("<TD align='left' width=\"250px\">"+validateString1(strEvpRate)+"</TD>");
						sbAttribuesInfo.append("<TD align='left' width=\"250px\" ><B>Reserve Acidity</B></TD>");
						sbAttribuesInfo.append("<TD align='left' width=\"250px\">"+validateString1(strResAcdity)+"</TD>");
						sbAttribuesInfo.append("</TR>");

						sbAttribuesInfo.append("<TR>");
						sbAttribuesInfo.append("<TD align='left' width=\"250px\" ><B>Reserve Alkalinity</B></TD>");
						sbAttribuesInfo.append("<TD align='left' width=\"250px\">"+validateString1(strResAlknity)+"</TD>");
						sbAttribuesInfo.append("<TD align='left' width=\"250px\" ><B>Shipping Hazard Classification</B></TD>");
						sbAttribuesInfo.append("<TD align='left' width=\"250px\">"+validateString1(strShpHzdClass)+"</TD>");
						sbAttribuesInfo.append("</TR>");

						sbAttribuesInfo.append("<TR>");
						sbAttribuesInfo.append("<TD align='left' width=\"250px\" ><B>Shipping Information</B></TD>");
//						sbAttribuesInfo.append("<TD align='left' width=\"250px\">"+validateString1(strShpInfo)+"</TD>");


						// Commented by DSM-(Sogeti) for PDF Views Defect #32866 : Starts
						// Added by DSM-(Sogeti) for PDF Views Defect #32867 : Starts
//						if(strObjType.equalsIgnoreCase(pgV3Constants.TYPE_ASSEMBLEDPRODUCTPART)){
//
//						sbAttribuesInfo.append("<TD align='left' width=\"250px\">"+validateString1(strShpInfo)+"</TD>");
//						sbAttribuesInfo.append("<TD align='left' width=\"250px\" ><B>Storage Conditions</B></TD>");
//						sbAttribuesInfo.append("<TD align='left' width=\"250px\">"+validateString1(strStoInfo)+"</TD>");
//						}
						// Commented by DSM-(Sogeti) for PDF Views Defect #32866 : Ends

						sbAttribuesInfo.append("<TD align='left' colspan=\"3\">"+validateString1(strShpInfo)+"</TD>");
						// Added by DSM-(Sogeti) for PDF Views Defect #32867 : Ends


						sbAttribuesInfo.append("</TR>");
						// Added by DSM-(Sogeti) 2018x.1 for PDF Views (Defect #25946) : Starts
						if("allinfo".equalsIgnoreCase(strPDFViewKind)){
						//Added by DSM-(Sogeti) 2018x.1 for PDF Views (Defect #25946) : End
							sbAttribuesInfo.append("<TR>");
							sbAttribuesInfo.append("<TD align='left' width=\"250px\" ><B>Intended Markets</B></TD>");
							sbAttribuesInfo.append("<TD colspan=\"3\">"+validateString1(strIntendMarkets)+"</TD>");
							sbAttribuesInfo.append("</TR>");
						}
					}

					//Modified by DSM-(Sogeti) 2018x.2 for PDF Views Starts
					//Modified by DSM- 2018x.5 for PDF Views for Defect 32590 Starts
					if(strObjType.equalsIgnoreCase(pgV3Constants.TYPE_FINISHEDPRODUCTPART)){
					//Modified by DSM- 2018x.5 for PDF Views for Defect 32590 End
					//Modified by DSM-(Sogeti) 2018x.2 for PDF Views Ends
						sbAttribuesInfo.append("<TR>");

						//Modified by DSM-(Sogeti) 2018x.2 for Defect 32025 Starts
//						sbAttribuesInfo.append("<TD align='left' width=\"250px\" ><B>Warehousing Classification</B></TD>");
//						sbAttribuesInfo.append("<TD align='left' width=\"250px\">"+validateString1(strWarehousingClassification)+"</TD>");
						//Modified by DSM-(Sogeti) 2018x.2 for Defect 32025 End

						sbAttribuesInfo.append("<TD align='left' width=\"250px\" ><B>UN Number</B></TD>");
						sbAttribuesInfo.append("<TD align='left' width=\"250px\">"+validateString1(strUNNumber)+"</TD>");
						//Modified by DSM- 2018x.5 for PDF Views for Defect 32590 Starts
						sbAttribuesInfo.append("<TD align='left' width=\"250px\" ><B>Proper Shipping Name</B></TD>");
						sbAttribuesInfo.append("<TD align='left' width=\"250px\">"+validateString1(strProperShippingName)+"</TD>");
						sbAttribuesInfo.append("</TR>");

						sbAttribuesInfo.append("<TR>");
						sbAttribuesInfo.append("<TD align='left' width=\"250px\" ><B>Hazard Class</B></TD>");
						sbAttribuesInfo.append("<TD align='left' width=\"250px\">"+validateString1(strHazardClass)+"</TD>");
						sbAttribuesInfo.append("<TD align='left' width=\"250px\" ><B>Packing Group</B></TD>");
						sbAttribuesInfo.append("<TD colspan=\"3\" align='left' width=\"250px\">"+validateString1(strPackingGroup)+"</TD>");
						sbAttribuesInfo.append("</TR>");
					}

					else if (strObjType.equalsIgnoreCase(pgV3Constants.TYPE_PGCUSTOMERUNITPART) || strObjType.equalsIgnoreCase(pgV3Constants.TYPE_PGCONSUMERUNITPART) )
					{
						sbAttribuesInfo.append("<TR>");

						//Modified by DSM-(Sogeti) 2018x.2 for Defect 32025 Starts
//						sbAttribuesInfo.append("<TD align='left' width=\"250px\" ><B>Warehousing Classification</B></TD>");
//						sbAttribuesInfo.append("<TD align='left' width=\"250px\">"+validateString1(strWarehousingClassification)+"</TD>");
						//Modified by DSM-(Sogeti) 2018x.2 for Defect 32025 End

						sbAttribuesInfo.append("<TD align='left' width=\"250px\" ><B>UN Number</B></TD>");
						sbAttribuesInfo.append("<TD align='left' colspan=\"3\">"+validateString1(strUNNumber)+"</TD>");
						sbAttribuesInfo.append("</TR>");
						sbAttribuesInfo.append("<TR>");
						//Modified by DSM- 2018x.5 for PDF Views for Defect 32590 End
						sbAttribuesInfo.append("<TD align='left' width=\"250px\" ><B>Proper Shipping Name</B></TD>");
						sbAttribuesInfo.append("<TD align='left' width=\"250px\">"+validateString1(strProperShippingName)+"</TD>");
						sbAttribuesInfo.append("<TD align='left' width=\"250px\" ><B>Hazard Class</B></TD>");
						sbAttribuesInfo.append("<TD align='left' width=\"250px\">"+validateString1(strHazardClass)+"</TD>");
						sbAttribuesInfo.append("</TR>");

						sbAttribuesInfo.append("<TR>");

						sbAttribuesInfo.append("<TD align='left' width=\"250px\" ><B>Packing Group</B></TD>");
						//Modified by DSM- 2018x.5 for PDF Views for Defect 32590 Starts
						sbAttribuesInfo.append("<TD colspan=\"3\" align='left' >"+validateString1(strPackingGroup)+"</TD>");
						//Modified by DSM- 2018x.5 for PDF Views for Defect 32590 End
						sbAttribuesInfo.append("</TR>");
					}
					//Added by DSM for PDF Views Defect 32590 - Start
                    if(strObjType.equalsIgnoreCase(pgV3Constants.TYPE_FINISHEDPRODUCTPART)){
                        sbAttribuesInfo.append("<TR>");
                        //Added/Commented by DSM(Sogeti)-2018x.3 for Defect 32207 - Starts
						//sbAttribuesInfo.append("<TD align='left' width=\"250px\" ><B>Shipping Information</B></TD>");
						//sbAttribuesInfo.append("<TD align='left' width=\"250px\">"+validateString1(strShippingInfo)+"</TD>");
						sbAttribuesInfo.append("<TD align='left' width=\"250px\" ><B>Storage Conditions</B></TD>");
						sbAttribuesInfo.append("<TD align='left' width=\"250px\">"+validateString1(strStoInfo)+"</TD>");
						//Modified by DSM- 2018x.5 for PDF Views for Defect 32590 Starts
						sbAttribuesInfo.append("<TD align='left' width=\"250px\" ><B>Unique Formula Identifier</B></TD>");
						sbAttribuesInfo.append("<TD align='left' width=\"250px\">"+validateString1(strUniqueFormulaIdentifier)+"</TD>");
						//Modified by DSM- 2018x.5 for PDF Views for Defect 32590 End
						sbAttribuesInfo.append("</TR>");


//						sbAttribuesInfo.append("<TD align='left' width=\"250px\" ><B>Labeling Information</B></TD>");
//						sbAttribuesInfo.append("<TD align='left' width=\"250px\">"+validateString1(strLabellingInfo)+"</TD>");
//						sbAttribuesInfo.append("</TR>");

						sbAttribuesInfo.append("<TR>");

//						sbAttribuesInfo.append("<TD align='left' width=\"250px\" ><B>Storage Information</B></TD>");
//						sbAttribuesInfo.append("<TD align='left' width=\"250px\">"+validateString1(strShippingInfo)+"</TD>");
//						//Added/Commented by DSM(Sogeti)-2018x.3 for Defect 32207 - Ends
						sbAttribuesInfo.append("<TD align='left' width=\"250px\" ><B>Storage Temperature Limits - <sup>o</sup>C</B></TD>");
						sbAttribuesInfo.append("<TD align='left' width=\"250px\">"+validateString1(strStorageTempLimits)+"</TD>");
						//Modified by DSM- 2018x.5 for PDF Views for Defect 32590 Starts
						sbAttribuesInfo.append("<TD align='left' width=\"250px\" ><B>Storage Humidity Limits - %</B></TD>");
						sbAttribuesInfo.append("<TD align='left' colspan='3' width=\"250px\">"+validateString1(strStorageHumidityLimits)+"</TD>");
						//Modified by DSM- 2018x.5 for PDF Views for Defect 32590 End
						sbAttribuesInfo.append("</TR>");
						//Commented by DSM(Sogeti)-2018x.1.1 for PDF Views Requirements - Starts
						//if(!("warehouse".equalsIgnoreCase(strPDFViewKind)))
						//	{
//								sbAttribuesInfo.append("<TR>");
//								sbAttribuesInfo.append("<TD align='left' width=\"250px\" ><B>Storage Humidity Limits - %</B></TD>");
//								sbAttribuesInfo.append("<TD align='left' colspan='3' width=\"250px\">"+validateString1(strStorageHumidityLimits)+"</TD>");
//								/*sbAttribuesInfo.append("<TD align='left' width=\"250px\" ><B>Comments</B></TD>");
//								sbAttribuesInfo.append("<TD align='left' width=\"250px\">"+validateString1(strComments)+"</TD>");*/
//
//								sbAttribuesInfo.append("</TR>");
    //	}
    //Commented by DSM(Sogeti)-2018x.1.1 for PDF Views Requirements - Ends
					/*}
                  //Added by DSM for PDF Views Defect 32590 - Ends




					//Added by DSM(Sogeti)-2018x.1.1 for PDF Views Requirements - Starts
					if(strObjType.equalsIgnoreCase(pgV3Constants.TYPE_FORMULATIONPART)){
						sbAttribuesInfo.append("<TR>");
						sbAttribuesInfo.append("<TD align='left' width=\"250px\" ><B>Shipping Hazard Classification</B></TD>");
						sbAttribuesInfo.append("<TD align='left' width=\"250px\">"+validateString1(strShpHzdClass)+"</TD>");
						sbAttribuesInfo.append("<TD align='left' width=\"250px\" ><B>Shipping Information</B></TD>");
						sbAttribuesInfo.append("<TD align='left' width=\"250px\">"+validateString1(strShpInfo)+"</TD>");
						sbAttribuesInfo.append("</TR>");

						sbAttribuesInfo.append("<TR>");
						sbAttribuesInfo.append("<TD align='left' width=\"250px\"><B>Storage Conditions</B></TD>");
						if("allinfo".equalsIgnoreCase(strPDFViewKind)){
							sbAttribuesInfo.append("<TD align='left' width=\"250px\">"+validateString1(strStoInfo)+"</TD>");
							sbAttribuesInfo.append("<TD align='left' width=\"250px\"><B>Intended Markets</B></TD>");
							sbAttribuesInfo.append("<TD align='left' width=\"250px\">"+validateString1(strIntendMarkets)+"</TD>");
						}else{
							sbAttribuesInfo.append("<TD align='left' colspan='3' width=\"250px\">"+validateString1(strStoInfo)+"</TD>");
						}
						sbAttribuesInfo.append("</TR>");

						sbAttribuesInfo.append("<TR>");
						sbAttribuesInfo.append("<TD align='left' width=\"250px\"><B>Business Area</B></TD>");
						sbAttribuesInfo.append("<TD align='left' width=\"250px\">"+validateString1(strBusinessArea)+"</TD>");
						sbAttribuesInfo.append("<TD align='left' width=\"250px\"><B>Product Category Platform</B></TD>");
						sbAttribuesInfo.append("<TD align='left' width=\"250px\">"+validateString1(strProductCategoryPlatform)+"</TD>");
						sbAttribuesInfo.append("</TR>");

						sbAttribuesInfo.append("<TR>");
						sbAttribuesInfo.append("<TD align='left' width=\"250px\"><B>Standard Cost</B></TD>");
						sbAttribuesInfo.append("<TD align='left' width=\"250px\">"+validateString1(strStandardCost)+"</TD>");
						sbAttribuesInfo.append("<TD align='left' width=\"250px\"><B>Storage Temperature Limits - <sup>o</sup>C</B></TD>");
						sbAttribuesInfo.append("<TD align='left' width=\"250px\">"+validateString1(strStorageTempLimits)+"</TD>");
						sbAttribuesInfo.append("</TR>");

						sbAttribuesInfo.append("<TR>");
						sbAttribuesInfo.append("<TD align='left' width=\"250px\"><B>Storage Humidity Limits - %</B></TD>");
						sbAttribuesInfo.append("<TD colspan='3' align='left' width=\"250px\">"+validateString1(strStorageHumidityLimits)+"</TD>");
						sbAttribuesInfo.append("</TR>");

					}
					//Added by DSM(Sogeti)-2018x.1.1 for PDF Views Requirements - Ends
					//Modify Code Refactoring
					mpAttributeInfo.clear();
				}

				sbAttribuesInfo.append("</TABLE><TR><TD><br /></TD></TR></TD></TR>");

			}
		} catch (Exception e)
		{
			e.printStackTrace();
			throw new MatrixException(e);
		}
		long endTime = new Date().getTime();
		System.out.println("Total Time has taken by the  getDSOAttributeData Method is-->"+(endTime-startTime));
		return sbAttribuesInfo;
	}
	*/
    /**
     * Retrieve Chemical and Physical Properties Table Data
     * @param context
     * @param args
     * @return
     * @throws MatrixException
     */
		/*private StringBuilder getChemicalAndPhisicalData(Context context,String strObjectId) throws Exception{
			long startTime = new Date().getTime();
			StringBuilder sbChemicalDataInfo = new StringBuilder();
			String strGaugePressure = DomainConstants.EMPTY_STRING;
			String strIgnitionDistance = DomainConstants.EMPTY_STRING;
			String strEnclosedSpaceIgnition = DomainConstants.EMPTY_STRING;
			String strFoamFlammability = DomainConstants.EMPTY_STRING;
			String strPH = DomainConstants.EMPTY_STRING;
			String strContentConductivity = DomainConstants.EMPTY_STRING;
			String strCorrosiveToMetals = DomainConstants.EMPTY_STRING;
			String strClosedCupFlashpoint = DomainConstants.EMPTY_STRING;
			String strBoilingPoint = DomainConstants.EMPTY_STRING;
			String strSustainCombustion = DomainConstants.EMPTY_STRING;
			String strOxidizer = DomainConstants.EMPTY_STRING;
			String strAvailableOxygen = DomainConstants.EMPTY_STRING;
			String strPGByVolume = DomainConstants.EMPTY_STRING;
			String strPGByWeight = DomainConstants.EMPTY_STRING;
			String strPropellantEmulsProd = DomainConstants.EMPTY_STRING;
			String strPropellantNonflame = DomainConstants.EMPTY_STRING;
			String strKinematicViscosity = DomainConstants.EMPTY_STRING;
			String strVaporPressure = DomainConstants.EMPTY_STRING;
			String strWTParameterized = DomainConstants.EMPTY_STRING;
			String strRelativeDensityOrSpecificGravity = DomainConstants.EMPTY_STRING;
			String strEvpRate = DomainConstants.EMPTY_STRING;
			String strResAcdity = DomainConstants.EMPTY_STRING;
			String strResAlknity = DomainConstants.EMPTY_STRING;
			String strBurnRate = DomainConstants.EMPTY_STRING;
			String strHeatOfDecomposition =DomainConstants.EMPTY_STRING;
			String strSelfAccelDecompTemp = DomainConstants.EMPTY_STRING;
			String strKstDustDeflagrationIndex = DomainConstants.EMPTY_STRING;
			String strPMAXExplosionPressure = DomainConstants.EMPTY_STRING;
			String strProdExpDate = DomainConstants.EMPTY_STRING;
			String strShelfLife = DomainConstants.EMPTY_STRING;
			String strTempGrp = DomainConstants.EMPTY_STRING;
			String strHumGrp = DomainConstants.EMPTY_STRING;
			String strTrnsFreezeProtection = DomainConstants.EMPTY_STRING;
			String strTrnsHeatProtection = DomainConstants.EMPTY_STRING;
			String strDngGoodsClass = DomainConstants.EMPTY_STRING;
			String strMaxCUSize = DomainConstants.EMPTY_STRING;
			String strCOUnitLable = DomainConstants.EMPTY_STRING;
			String strCUUnitLable = DomainConstants.EMPTY_STRING;
			String strUNNumber = DomainConstants.EMPTY_STRING;
			String strProperShippingName = DomainConstants.EMPTY_STRING;
			String strHazardClass = DomainConstants.EMPTY_STRING;
			String strPackingGroup = DomainConstants.EMPTY_STRING;
			//2018x.2
			String strColor = DomainConstants.EMPTY_STRING;
			String strColorIntensity = DomainConstants.EMPTY_STRING;
			String strOdour = DomainConstants.EMPTY_STRING;
			String strCorrosiveMetal = DomainConstants.EMPTY_STRING;
		    String strClosedFlashpointValue = DomainConstants.EMPTY_STRING;
		    String strBolingPointValue = DomainConstants.EMPTY_STRING;
		    String strDoesPdtCombustion = DomainConstants.EMPTY_STRING;
		    String strOxidizerNaPerCa = DomainConstants.EMPTY_STRING;
		    String strHydrogenPeroxide = DomainConstants.EMPTY_STRING;
		    String strBasepdtCombustion = DomainConstants.EMPTY_STRING;
		    String strOrganicPeroxide = DomainConstants.EMPTY_STRING;
			String strAvailableOxyContent = DomainConstants.EMPTY_STRING;
			String strWeightEmulsified = DomainConstants.EMPTY_STRING;
			String strPropellantEmuls = DomainConstants.EMPTY_STRING;
			String strDilution = DomainConstants.EMPTY_STRING;
			String strLiquidCorrMetal =  DomainConstants.EMPTY_STRING;
			String strTechCorrMetal  = DomainConstants.EMPTY_STRING;
			String strFlammabelLiq = DomainConstants.EMPTY_STRING;
			String strProdReactiveProp =  DomainConstants.EMPTY_STRING;
			String strPHAvalibility =  DomainConstants.EMPTY_STRING;
			String strBaseEthanolProponal=  DomainConstants.EMPTY_STRING;
			String strWtEmulsifiedLiq=  DomainConstants.EMPTY_STRING;
			String strHeatOfCombustion = DomainConstants.EMPTY_STRING;
			String strCanConst = DomainConstants.EMPTY_STRING;
			String strAerosolType = DomainConstants.EMPTY_STRING;
			String strAerosolTestData = DomainConstants.EMPTY_STRING;
			String strFlameHt = DomainConstants.EMPTY_STRING;
			String strFlameDuration = DomainConstants.EMPTY_STRING;
			String strCondAerosol = DomainConstants.EMPTY_STRING;
			String strPerFlamePropAerosol = DomainConstants.EMPTY_STRING;
			//String strVapourPressure = DomainConstants.EMPTY_STRING;
			String strVaporDensity = DomainConstants.EMPTY_STRING;
			String strBoiling_Point = DomainConstants.EMPTY_STRING;
			String str_PH = DomainConstants.EMPTY_STRING;
			String strPHValue = DomainConstants.EMPTY_STRING;
			//2018x.2  pgOxidizerSodiumPerCarbonate
			try{

				Map mpArgsPack = new HashMap();
				mpArgsPack.put("objectId", strObjectId);
				String[] strArgs = JPO.packArgs(mpArgsPack);
				MapList mlStabilityResultList = (MapList) JPO.invoke(context, "emxCPNCharacteristicList", null, "getStabilityResults", strArgs, MapList.class);

				if(validateString(strObjectId)){

					StringList slObjectSelects = new StringList();
					slObjectSelects.add(pgV3Constants.SELECT_ATTRIBUTE_PGMAXCONSUMERUNITSIZE);
					slObjectSelects.add(pgV3Constants.SELECT_ATTRIBUTE_PGCUSTOMERUNITLABELING);
					slObjectSelects.add(pgV3Constants.SELECT_ATTRIBUTE_PGCONSUMERUNITLABELING);
					slObjectSelects.add(pgV3Constants.SELECT_ATTRIBUTE_PGPUNNUMBER);
					slObjectSelects.add(pgV3Constants.SELECT_ATTRIBUTE_PGHAZARDCLASS);
					slObjectSelects.add(pgV3Constants.SELECT_ATTRIBUTE_PGPACKINGGROUP);
					slObjectSelects.add(pgV3Constants.SELECT_ATTRIBUTE_PGGAUGEPRESSURE);
					slObjectSelects.add(pgV3Constants.SELECT_ATTRIBUTE_PGIGNITIONDISTANCE);
					slObjectSelects.add(pgV3Constants.SELECT_ATTRIBUTE_PGENCLOSEDSPACEIGNITION);
					slObjectSelects.add(pgV3Constants.SELECT_ATTRIBUTE_PGFOAMFLAMMABILITY);
					slObjectSelects.add(pgV3Constants.SELECT_ATTRIBUTE_PHVALUE);
					slObjectSelects.add(pgV3Constants.SELECT_ATTRIBUTE_PGCONTENTCONDUCTIVITY);
					slObjectSelects.add(pgV3Constants.SELECT_ATTRIBUTE_PGCORROSIVETOMETALS);
					slObjectSelects.add(pgV3Constants.SELECT_ATTRIBUTE_PGCLOSEDCUPFLASHPOINT);
					slObjectSelects.add(pgV3Constants.SELECT_ATTRIBUTE_PGEVAPORATIONRATE);
					slObjectSelects.add(pgV3Constants.SELECT_ATTRIBUTE_PGRESERVEACIDITY);
					slObjectSelects.add(pgV3Constants.SELECT_ATTRIBUTE_PGRESERVERALKALINITY);
					slObjectSelects.add(pgV3Constants.SELECT_ATTRIBUTE_BOILINGPOINT);
					slObjectSelects.add(pgV3Constants.SELECT_ATTRIBUTE_PGSUSTAINCOMBUSTION);
					slObjectSelects.add(pgV3Constants.SELECT_ATTRIBUTE_PGOXIDIZER);
					slObjectSelects.add(pgV3Constants.SELECT_ATTRIBUTE_PGAVAILABLEOXYGEN);
					slObjectSelects.add(pgV3Constants.SELECT_ATTRIBUTE_PGBYVOLUME);
					slObjectSelects.add(pgV3Constants.SELECT_ATTRIBUTE_PGBYWEIGHT);
					slObjectSelects.add(pgV3Constants.SELECT_ATTRIBUTE_PGPROPELLANTEMULSIFIEDPRODUCT);
					slObjectSelects.add(pgV3Constants.SELECT_ATTRIBUTE_PGPROPELLANTNONFLAMMABLE);
					slObjectSelects.add(pgV3Constants.SELECT_ATTRIBUTE_PGKINEMATICVISCOSITY);
					slObjectSelects.add(pgV3Constants.SELECT_ATTRIBUTE_VAPORPRESSURE);
					//Added by DSM-2018x.1.1 for PDF Views Numeric Attribute - Starts
					slObjectSelects.add(pgV3Constants.SELECT_ATTRIBUTE_BOILINGPOINT+".inputvalue");
					slObjectSelects.add(pgV3Constants.SELECT_ATTRIBUTE_VAPORPRESSURE+".inputvalue");
					slObjectSelects.add("attribute[" + pgV3Constants.ATTRIBUTE_PHVALUE + "].inputvalue");
					//Added by DSM-2018x.1.1 for PDF Views Numeric Attribute - End
					slObjectSelects.add(pgV3Constants.SELECT_ATTRIBUTE_PGWTPARAMETERIZED);
					slObjectSelects.add(pgV3Constants.SELECT_ATTRIBUTE_PGRELATIVEDENSITYORSPECIFICGRAVITY);
					slObjectSelects.add(pgV3Constants.SELECT_ATTRIBUTE_PGBURNRATE);
					slObjectSelects.add(pgV3Constants.SELECT_ATTRIBUTE_PGHEATOFDECOMPOSITION);
					slObjectSelects.add(pgV3Constants.SELECT_ATTRIBUTE_PGSELFACCELDECOMTEMP);
					slObjectSelects.add(pgV3Constants.SELECT_ATTRIBUTE_PGPROPERSHIPPINGNAME);
					slObjectSelects.add(pgV3Constants.SELECT_ATTRIBUTE_PGKSTDUSTDEFLAGRATIONINDEX);
					slObjectSelects.add(pgV3Constants.SELECT_ATTRIBUTE_PGPMAXEXPLOSIONPRESSURE);
					slObjectSelects.add(pgV3Constants.SELECT_ATTRIBUTE_PGDANGEROUSGOODSCLASSIFICATION);
					//2018x.2
					//123
					slObjectSelects.add(pgV3Constants.SELECT_ATTRIBUTE_PGCOLOR);
					slObjectSelects.add(pgV3Constants.SELECT_ATTRIBUTE_PG_COLOR_INTENSITY);
					slObjectSelects.add(pgV3Constants.SELECT_ATTRIBUTE_PG_ODOUR);
					slObjectSelects.add(pgV3Constants.SELECT_ATTRIBUTE_PGCORROSIVETOMETALS);
					slObjectSelects.add(pgV3Constants.SELECT_ATTRIBUTE_PG_CLOSEDCUPFLASHPOINTVALUE);
					slObjectSelects.add(pgV3Constants.SELECT_ATTRIBUTE_PG_BOILINGPOINTVALUE);
					slObjectSelects.add(pgV3Constants.SELECT_ATTRIBUTE_PG_BASEPRODUCTSUSTAINCOMBUSTION);
					slObjectSelects.add(pgV3Constants.SELECT_ATTRIBUTE_PG_OXIDIZERSODIUMPERCARBONATE);
					slObjectSelects.add(pgV3Constants.SELECT_ATTRIBUTE_PG_OXIDIZERHYDROGENPEROXIDE);
					slObjectSelects.add(pgV3Constants.SELECT_ATTRIBUTE_PG_ORGANIC_PEROXIDE);
					slObjectSelects.add(pgV3Constants.SELECT_ATTRIBUTE_PG_AVAILABLE_OXYGEN_CONTENT);
					slObjectSelects.add(pgV3Constants.SELECT_ATTRIBUTE_PG_FLAMMABLE_GAS_PROPELLANT);
					slObjectSelects.add(pgV3Constants.SELECT_ATTRIBUTE_PG_PROPELLANT);
					slObjectSelects.add(pgV3Constants.SELECT_ATTRIBUTE_PG_PH_DILUTION);
					slObjectSelects.add(pgV3Constants.SELECT_ATTRIBUTE_PG_LIQUID_CORROSIVE_TO_METAL);
					slObjectSelects.add(pgV3Constants.SELECT_ATTRIBUTE_PG_TECHNICAL_CTM);
					slObjectSelects.add(pgV3Constants.SELECT_ATTRIBUTE_PG_FLAMMABLE_LIQUID);
					slObjectSelects.add(pgV3Constants.SELECT_ATTRIBUTE_PG_SELF_REACTIVE_PROPERTIES);
					slObjectSelects.add(pgV3Constants.SELECT_ATTRIBUTE_PG_PH_AVAILABILITY);
					slObjectSelects.add(pgV3Constants.SELECT_ATTRIBUTE_PG_PRODUCT_CONTAIN_ETHANOL);
					slObjectSelects.add(pgV3Constants.SELECT_ATTRIBUTE_PG_PRODUCT_CONTAIN_GAS);
					slObjectSelects.add(pgV3Constants.SELECT_ATTRIBUTE_PG_HEAT_OF_COMBUSTION);
					slObjectSelects.add(pgV3Constants.SELECT_ATTRIBUTE_PG_CAN_CONSTRUCTION);
					slObjectSelects.add(pgV3Constants.SELECT_ATTRIBUTE_PG_AEROSOLTYPE);
					slObjectSelects.add(pgV3Constants.SELECT_ATTRIBUTE_PG_IS_AEROSOLTYPE_TEST);
					slObjectSelects.add(pgV3Constants.SELECT_ATTRIBUTE_PG_FLAMEHEIGHT);
					slObjectSelects.add(pgV3Constants.SELECT_ATTRIBUTE_PG_FLAME_DURATION);
					slObjectSelects.add(pgV3Constants.SELECT_ATTRIBUTE_PG_AEROSOL_CONDUCTIVITY);
					slObjectSelects.add(pgV3Constants.SELECT_ATTRIBUTE_PG_PERCENT_OF_WEIGHT_FLAMMABLE);
					slObjectSelects.add(pgV3Constants.SELECT_ATTRIBUTE_VAPOUR_DENSITY);
					slObjectSelects.add(pgV3Constants.SELECT_ATTRIBUTE_BOILINGPOINT);
					slObjectSelects.add(pgV3Constants.SELECT_ATTRIBUTE_PG_PH);
					slObjectSelects.add(pgV3Constants.SELECT_ATTRIBUTE_PHVALUE);
					slObjectSelects.add(pgV3Constants.SELECT_ATTRIBUTE_ODOUR);
					//2018x.2
					DomainObject domainObject= DomainObject.newInstance(context,strObjectId);
					Map mpAttributeInfo = domainObject.getInfo(context, slObjectSelects);

					if(!mpAttributeInfo.isEmpty()){

						strGaugePressure = (String) mpAttributeInfo.get(pgV3Constants.SELECT_ATTRIBUTE_PGGAUGEPRESSURE);
						//2018x.2-starts
						strColor =(String)mpAttributeInfo.get(pgV3Constants.SELECT_ATTRIBUTE_PGCOLOR);
						strColorIntensity =(String)mpAttributeInfo.get(pgV3Constants.SELECT_ATTRIBUTE_PG_COLOR_INTENSITY);
						strOdour = (String)mpAttributeInfo.get(pgV3Constants.SELECT_ATTRIBUTE_ODOUR);
						if(UIUtil.isNotNullAndNotEmpty(strOdour)) {
							strOdour = strOdour.replaceAll("[<]","#LESS_THAN");
						}
						strCorrosiveMetal = (String)mpAttributeInfo.get(pgV3Constants.SELECT_ATTRIBUTE_PGCORROSIVETOMETALS);
						strClosedFlashpointValue = (String)mpAttributeInfo.get(pgV3Constants.SELECT_ATTRIBUTE_PG_CLOSEDCUPFLASHPOINTVALUE);
						strBolingPointValue = (String)mpAttributeInfo.get(pgV3Constants.SELECT_ATTRIBUTE_PG_BOILINGPOINTVALUE);
						strDoesPdtCombustion = (String)mpAttributeInfo.get(pgV3Constants.SELECT_ATTRIBUTE_PG_BASEPRODUCTSUSTAINCOMBUSTION);
						strOxidizerNaPerCa = (String)mpAttributeInfo.get(pgV3Constants.SELECT_ATTRIBUTE_PG_OXIDIZERSODIUMPERCARBONATE);
						strHydrogenPeroxide = (String)mpAttributeInfo.get(pgV3Constants.SELECT_ATTRIBUTE_PG_OXIDIZERHYDROGENPEROXIDE);
						strOrganicPeroxide = (String)mpAttributeInfo.get(pgV3Constants.SELECT_ATTRIBUTE_PG_ORGANIC_PEROXIDE);
						strAvailableOxyContent = (String)mpAttributeInfo.get(pgV3Constants.SELECT_ATTRIBUTE_PG_AVAILABLE_OXYGEN_CONTENT);
						strWeightEmulsified = (String)mpAttributeInfo.get(pgV3Constants.SELECT_ATTRIBUTE_PG_FLAMMABLE_GAS_PROPELLANT);
						strPropellantEmuls = (String)mpAttributeInfo.get(pgV3Constants.SELECT_ATTRIBUTE_PG_PROPELLANT);
						strDilution = (String)mpAttributeInfo.get(pgV3Constants.SELECT_ATTRIBUTE_PG_PH_DILUTION);
						strLiquidCorrMetal = (String)mpAttributeInfo.get(pgV3Constants.SELECT_ATTRIBUTE_PG_LIQUID_CORROSIVE_TO_METAL);
						strTechCorrMetal = (String)mpAttributeInfo.get(pgV3Constants.SELECT_ATTRIBUTE_PG_TECHNICAL_CTM);
						if(UIUtil.isNotNullAndNotEmpty(strTechCorrMetal)) {
							strTechCorrMetal = strTechCorrMetal.replaceAll("[<]","#LESS_THAN");
						}
						strFlammabelLiq = (String)mpAttributeInfo.get(pgV3Constants.SELECT_ATTRIBUTE_PG_FLAMMABLE_LIQUID);
						strProdReactiveProp = (String)mpAttributeInfo.get(pgV3Constants.SELECT_ATTRIBUTE_PG_SELF_REACTIVE_PROPERTIES);
						strPHAvalibility = (String)mpAttributeInfo.get(pgV3Constants.SELECT_ATTRIBUTE_PG_PH_AVAILABILITY);
						strBaseEthanolProponal = (String)mpAttributeInfo.get(pgV3Constants.SELECT_ATTRIBUTE_PG_PRODUCT_CONTAIN_ETHANOL);
						strWtEmulsifiedLiq  = (String)mpAttributeInfo.get(pgV3Constants.SELECT_ATTRIBUTE_PG_PRODUCT_CONTAIN_GAS);
						strHeatOfCombustion  = (String)mpAttributeInfo.get(pgV3Constants.SELECT_ATTRIBUTE_PG_HEAT_OF_COMBUSTION);
						strCanConst  = (String)mpAttributeInfo.get(pgV3Constants.SELECT_ATTRIBUTE_PG_CAN_CONSTRUCTION);
						strAerosolType = (String)mpAttributeInfo.get(pgV3Constants.SELECT_ATTRIBUTE_PG_AEROSOLTYPE);
						strAerosolTestData = (String)mpAttributeInfo.get(pgV3Constants.SELECT_ATTRIBUTE_PG_IS_AEROSOLTYPE_TEST);
						if(UIUtil.isNotNullAndNotEmpty(strAerosolTestData)) {
							strAerosolTestData = strAerosolTestData.replaceAll("[<]","#LESS_THAN");
						}
						strFlameHt = (String)mpAttributeInfo.get(pgV3Constants.SELECT_ATTRIBUTE_PG_FLAMEHEIGHT);
						strFlameDuration = (String)mpAttributeInfo.get(pgV3Constants.SELECT_ATTRIBUTE_PG_FLAME_DURATION);
						strCondAerosol = (String)mpAttributeInfo.get(pgV3Constants.SELECT_ATTRIBUTE_PG_AEROSOL_CONDUCTIVITY);
						strPerFlamePropAerosol = (String)mpAttributeInfo.get(pgV3Constants.SELECT_ATTRIBUTE_PG_PERCENT_OF_WEIGHT_FLAMMABLE);
						//strVaporPressure = (String)mpAttributeInfo.get(pgV3Constants.SELECT_ATTRIBUTE_VAPORPRESSURE);
						strBoiling_Point = (String)mpAttributeInfo.get(pgV3Constants.SELECT_ATTRIBUTE_BOILINGPOINT);
						str_PH = (String)mpAttributeInfo.get(pgV3Constants.SELECT_ATTRIBUTE_PG_PH);
						strPHValue = (String)mpAttributeInfo.get(pgV3Constants.SELECT_ATTRIBUTE_PHVALUE);
						strVaporDensity = (String) mpAttributeInfo.get(pgV3Constants.SELECT_ATTRIBUTE_VAPOUR_DENSITY);
						//2018x.2 - ends
						strIgnitionDistance = (String) mpAttributeInfo.get(pgV3Constants.SELECT_ATTRIBUTE_PGIGNITIONDISTANCE);
						strEnclosedSpaceIgnition = (String) mpAttributeInfo.get(pgV3Constants.SELECT_ATTRIBUTE_PGENCLOSEDSPACEIGNITION);
						strFoamFlammability = (String) mpAttributeInfo.get(pgV3Constants.SELECT_ATTRIBUTE_PGFOAMFLAMMABILITY);
						//Commented by DSM-2018x.1.1 for PDF Views Numeric Attribute - Starts
						//strPH = (String) mpAttributeInfo.get(pgV3Constants.SELECT_ATTRIBUTE_PHVALUE);
						//Commented by DSM-2018x.1.1 for PDF Views Numeric Attribute - Ends
						strContentConductivity = (String) mpAttributeInfo.get(pgV3Constants.SELECT_ATTRIBUTE_PGCONTENTCONDUCTIVITY);

						strCorrosiveToMetals = (String) mpAttributeInfo.get(pgV3Constants.SELECT_ATTRIBUTE_PGCORROSIVETOMETALS);
						strClosedCupFlashpoint = (String) mpAttributeInfo.get(pgV3Constants.SELECT_ATTRIBUTE_PGCLOSEDCUPFLASHPOINT);
						//Commented by DSM-2018x.1.1 for PDF Views Numeric Attribute - Starts
						//strBoilingPoint = (String) mpAttributeInfo.get(pgV3Constants.SELECT_ATTRIBUTE_BOILINGPOINT);
						//Commented by DSM-2018x.1.1 for PDF Views Numeric Attribute - Ends
						strSustainCombustion = (String) mpAttributeInfo.get(pgV3Constants.SELECT_ATTRIBUTE_PGSUSTAINCOMBUSTION);
						strOxidizer = (String) mpAttributeInfo.get(pgV3Constants.SELECT_ATTRIBUTE_PGOXIDIZER);

						strAvailableOxygen = (String) mpAttributeInfo.get(pgV3Constants.SELECT_ATTRIBUTE_PGAVAILABLEOXYGEN);
						strPGByVolume = (String) mpAttributeInfo.get(pgV3Constants.SELECT_ATTRIBUTE_PGBYVOLUME);
						strPGByWeight = (String) mpAttributeInfo.get(pgV3Constants.SELECT_ATTRIBUTE_PGBYWEIGHT);
						strPropellantEmulsProd = (String) mpAttributeInfo.get(pgV3Constants.SELECT_ATTRIBUTE_PGPROPELLANTEMULSIFIEDPRODUCT);
						strPropellantNonflame = (String) mpAttributeInfo.get(pgV3Constants.SELECT_ATTRIBUTE_PGPROPELLANTNONFLAMMABLE);

						strKinematicViscosity = (String) mpAttributeInfo.get(pgV3Constants.SELECT_ATTRIBUTE_PGKINEMATICVISCOSITY);
						//Added by DSM-2018x.1.1 for PDF Views Numeric Attribute - Starts
						 String strObjType = domainObject.getInfo(context, DomainConstants.SELECT_TYPE);
						if(strObjType.equalsIgnoreCase(pgV3Constants.TYPE_RAWMATERIALPART) || strObjType.equalsIgnoreCase(pgV3Constants.TYPE_FORMULATIONPART)){
							strVaporPressure = (String) mpAttributeInfo.get(pgV3Constants.SELECT_ATTRIBUTE_VAPORPRESSURE+".inputvalue");
							strBoilingPoint = (String) mpAttributeInfo.get(pgV3Constants.SELECT_ATTRIBUTE_BOILINGPOINT+".inputvalue");
							strPH = (String) mpAttributeInfo.get("attribute[" + pgV3Constants.ATTRIBUTE_PHVALUE + "].inputvalue");
					    } else {
							strVaporPressure = (String) mpAttributeInfo.get(pgV3Constants.SELECT_ATTRIBUTE_VAPORPRESSURE);
							strBoilingPoint = (String) mpAttributeInfo.get(pgV3Constants.SELECT_ATTRIBUTE_BOILINGPOINT);
							strPH = (String) mpAttributeInfo.get(pgV3Constants.SELECT_ATTRIBUTE_PHVALUE);
						}
						//Added by DSM-2018x.1.1 for PDF Views Numeric Attribute - Ends

						strWTParameterized = (String) mpAttributeInfo.get(pgV3Constants.SELECT_ATTRIBUTE_PGWTPARAMETERIZED);
						strRelativeDensityOrSpecificGravity = (String) mpAttributeInfo.get(pgV3Constants.SELECT_ATTRIBUTE_PGRELATIVEDENSITYORSPECIFICGRAVITY);


						strEvpRate = (String) mpAttributeInfo.get(pgV3Constants.SELECT_ATTRIBUTE_PGEVAPORATIONRATE);
						strResAcdity = (String) mpAttributeInfo.get(pgV3Constants.SELECT_ATTRIBUTE_PGRESERVEACIDITY);
						strResAlknity = (String) mpAttributeInfo.get(pgV3Constants.SELECT_ATTRIBUTE_PGRESERVERALKALINITY);
						strBurnRate = (String) mpAttributeInfo.get(pgV3Constants.SELECT_ATTRIBUTE_PGBURNRATE);
						strHeatOfDecomposition = (String) mpAttributeInfo.get(pgV3Constants.SELECT_ATTRIBUTE_PGHEATOFDECOMPOSITION);
						strSelfAccelDecompTemp = (String) mpAttributeInfo.get(pgV3Constants.SELECT_ATTRIBUTE_PGSELFACCELDECOMTEMP);

						strKstDustDeflagrationIndex = (String) mpAttributeInfo.get(pgV3Constants.SELECT_ATTRIBUTE_PGKSTDUSTDEFLAGRATIONINDEX);
						strPMAXExplosionPressure = (String) mpAttributeInfo.get(pgV3Constants.SELECT_ATTRIBUTE_PGPMAXEXPLOSIONPRESSURE);

						strDngGoodsClass = (String) mpAttributeInfo.get(pgV3Constants.SELECT_ATTRIBUTE_PGDANGEROUSGOODSCLASSIFICATION);
						//Added by DSM(Sogeti)-2018x.0 for PDF Views Defect #24419 - Starts
						strDngGoodsClass = strDngGoodsClass.replaceAll("[<]","#LESS_THAN");
						//Added by DSM(Sogeti)-2018x.0 for PDF Views Defect #24419 - Ends
						strMaxCUSize = (String) mpAttributeInfo.get(pgV3Constants.SELECT_ATTRIBUTE_PGMAXCONSUMERUNITSIZE);

						//Added by DSM-2018x.1 for PDF Views (Defect #24437) - Starts
						if(strMaxCUSize.equalsIgnoreCase("FALSE"))
							strMaxCUSize = "No";
						else if (strMaxCUSize.equalsIgnoreCase("TRUE"))
							strMaxCUSize = "Yes";
						//Added by DSM-2018x.1 for PDF Views (Defect #24437) - Ends

						strCOUnitLable = (String) mpAttributeInfo.get(pgV3Constants.SELECT_ATTRIBUTE_PGCONSUMERUNITLABELING);
						//Added by DSM(Sogeti)-2018x.0 for PDF Views Defect #24419 - Starts
						strCOUnitLable = strCOUnitLable.replaceAll("[<]","#LESS_THAN");
						//Added by DSM(Sogeti)-2018x.0 for PDF Views Defect #24419 - Ends
						strCUUnitLable = (String) mpAttributeInfo.get(pgV3Constants.SELECT_ATTRIBUTE_PGCUSTOMERUNITLABELING);
						//Added by DSM(Sogeti)-2018x.0 for PDF Views Defect #24419 - Starts
						strCUUnitLable = strCUUnitLable.replaceAll("[<]","#LESS_THAN");
						//Added by DSM(Sogeti)-2018x.0 for PDF Views Defect #24419 - Ends
						strUNNumber = (String) mpAttributeInfo.get(pgV3Constants.SELECT_ATTRIBUTE_PGPUNNUMBER);
						//Added by DSM(Sogeti)-2018x.0 for PDF Views Defect #24419 - Starts
						strUNNumber = strUNNumber.replaceAll("[<]","#LESS_THAN");
						//Added by DSM(Sogeti)-2018x.0 for PDF Views Defect #24419 - Ends
						strProperShippingName = (String) mpAttributeInfo.get(pgV3Constants.SELECT_ATTRIBUTE_PGPROPERSHIPPINGNAME);
						//Added by DSM(Sogeti)-2018x.0 for PDF Views Defect #24419 - Starts
						strProperShippingName = strProperShippingName.replaceAll("[<]","#LESS_THAN");
						//Added by DSM(Sogeti)-2018x.0 for PDF Views Defect #24419 - Ends
						strHazardClass = (String) mpAttributeInfo.get(pgV3Constants.SELECT_ATTRIBUTE_PGHAZARDCLASS);
						strPackingGroup = (String) mpAttributeInfo.get(pgV3Constants.SELECT_ATTRIBUTE_PGPACKINGGROUP);



						sbChemicalDataInfo.append("<TR><TD><TABLE class=\"WordWrappdf\" cellspacing=\"0\" width=\"990px\" id=\"pgFormulatedProductTable\">");
						sbChemicalDataInfo.append("<thead>");
						sbChemicalDataInfo.append("<TR><TD colspan='2' class=\"new\" ><font size='4'><b>Chemical and Physical Properties (Liquid)<br/></b></font></TD></TR>");
						sbChemicalDataInfo.append("</thead>");

						sbChemicalDataInfo.append("<TR>");
						sbChemicalDataInfo.append("<TD align='left' width=\"250px\"><B>Color</B></TD>");
						sbChemicalDataInfo.append("<TD align='left' width=\"250px\">"+validateString1(strColor)+"</TD>");
						sbChemicalDataInfo.append("<TD align='left' width=\"250px\"><B>Color Intensity</B></TD>");
						sbChemicalDataInfo.append("<TD align='left' width=\"250px\">"+validateString1(strColorIntensity)+"</TD>");
						sbChemicalDataInfo.append("</TR>");

						sbChemicalDataInfo.append("<TR>");
						sbChemicalDataInfo.append("<TD align='left' width=\"250px\"><B>Odor</B></TD>");
						sbChemicalDataInfo.append("<TD align='left' width=\"250px\">"+validateString1(strOdour)+"</TD>");
						sbChemicalDataInfo.append("<TD align='left' width=\"250px\"><B>Content Conductivity (mS / cm)</B></TD>");
						sbChemicalDataInfo.append("<TD align='left' width=\"250px\">"+validateString1(strContentConductivity)+"</TD>");
						sbChemicalDataInfo.append("</TR>");

						sbChemicalDataInfo.append("<TR>");
						sbChemicalDataInfo.append("<TD align='left' width=\"250px\"><B>Corrosive to Metals (Yes/No)</B></TD>");
						sbChemicalDataInfo.append("<TD align='left' width=\"250px\">"+validateString1(strCorrosiveMetal)+"</TD>");
						sbChemicalDataInfo.append("<TD align='left' width=\"250px\"><B>Closed Cup Flashpoint (C)</B></TD>");
						sbChemicalDataInfo.append("<TD align='left' width=\"250px\">"+validateString1(strClosedCupFlashpoint)+"</TD>");
						sbChemicalDataInfo.append("</TR>");

						sbChemicalDataInfo.append("<TR>");
						sbChemicalDataInfo.append("<TD align='left' width=\"250px\"><B>Closed Cup Flashpoint Value (C)</B></TD>");
						sbChemicalDataInfo.append("<TD align='left' width=\"250px\">"+validateString1(strClosedFlashpointValue)+"</TD>");
						sbChemicalDataInfo.append("<TD align='left' width=\"250px\"><B>Boiling Point (C)</B></TD>");
						sbChemicalDataInfo.append("<TD align='left' width=\"250px\">"+validateString1(strBoiling_Point)+"</TD>");
						sbChemicalDataInfo.append("</TR>");

						sbChemicalDataInfo.append("<TR>");
						sbChemicalDataInfo.append("<TD align='left' width=\"250px\"><B>Boiling Point Value (C)</B></TD>");
						sbChemicalDataInfo.append("<TD align='left' width=\"250px\">"+validateString1(strBolingPointValue)+"</TD>");
						sbChemicalDataInfo.append("<TD align='left' width=\"250px\"><B>Does the Product Sustain Combustion? (Yes/No)</B></TD>");
						sbChemicalDataInfo.append("<TD align='left' width=\"250px\">"+validateString1(strDoesPdtCombustion)+"</TD>");
						sbChemicalDataInfo.append("</TR>");

						sbChemicalDataInfo.append("<TR>");
						sbChemicalDataInfo.append("<TD align='left' width=\"250px\"><B>Does the Product Contain an Oxidizer as a Raw Material? (Yes/No)</B></TD>");
						sbChemicalDataInfo.append("<TD align='left' width=\"250px\">"+validateString1(strOxidizer)+"</TD>");
						sbChemicalDataInfo.append("<TD align='left' width=\"250px\"><B>Is the Oxidizer Sodium Percarbonate  60% (Yes/No)</B></TD>");
						sbChemicalDataInfo.append("<TD align='left' width=\"250px\">"+validateString1(strOxidizerNaPerCa)+"</TD>");
						sbChemicalDataInfo.append("</TR>");

						sbChemicalDataInfo.append("<TR>");
						sbChemicalDataInfo.append("<TD align='left' width=\"250px\"><B>Is the Oxidizer Hydrogen Peroxide  8% (Yes/No)</B></TD>");
						sbChemicalDataInfo.append("<TD align='left' width=\"250px\">"+validateString1(strHydrogenPeroxide)+"</TD>");
						sbChemicalDataInfo.append("<TD align='left' width=\"250px\"><B>Does the Product have the Potential to Increase the Burning Rate or Intensity of a Combustible Substance? (Yes/No)</B></TD>");
						sbChemicalDataInfo.append("<TD align='left' width=\"250px\">"+validateString1(strDoesPdtCombustion)+"</TD>");
						sbChemicalDataInfo.append("</TR>");

						sbChemicalDataInfo.append("<TR>");
						sbChemicalDataInfo.append("<TD align='left' width=\"250px\"><B>Does the Product Contain an Organic Peroxide as a Raw Material? (Yes/No)</B></TD>");
						sbChemicalDataInfo.append("<TD align='left' width=\"250px\">"+validateString1(strOrganicPeroxide)+"</TD>");
						sbChemicalDataInfo.append("<TD align='left' width=\"250px\"><B>Available Oxygen Content (%)</B></TD>");
						sbChemicalDataInfo.append("<TD align='left' width=\"250px\">"+validateString1(strAvailableOxyContent)+"</TD>");
						sbChemicalDataInfo.append("</TR>");


						sbChemicalDataInfo.append("<TR>");
						sbChemicalDataInfo.append("<TD align='left' width=\"250px\"><B>% by Volume ethanol and/or propanol (%)</B></TD>");
						sbChemicalDataInfo.append("<TD align='left' width=\"250px\">"+validateString1(strPGByVolume)+"</TD>");
						sbChemicalDataInfo.append("<TD align='left' width=\"250px\"><B>% by Weight emulsified Liquified flammable gas propellant (%)</B></TD>");
						sbChemicalDataInfo.append("<TD align='left' width=\"250px\">"+validateString1(strWeightEmulsified)+"</TD>");
						sbChemicalDataInfo.append("</TR>");

						sbChemicalDataInfo.append("<TR>");
						sbChemicalDataInfo.append("<TD align='left' width=\"250px\"><B>Propellant emulsified for life of product (Yes/No)</B></TD>");
						sbChemicalDataInfo.append("<TD align='left' width=\"250px\">"+validateString1(strPropellantEmuls)+"</TD>");
						sbChemicalDataInfo.append("<TD align='left' width=\"250px\"><B>Propellant is non-flammable (Yes/No)</B></TD>");
						sbChemicalDataInfo.append("<TD align='left' width=\"250px\">"+validateString1(strPropellantNonflame)+"</TD>");
						sbChemicalDataInfo.append("</TR>");

						sbChemicalDataInfo.append("<TR>");
						sbChemicalDataInfo.append("<TD align='left' width=\"250px\"><B>Kinematic Viscosity (mm2/s)</B></TD>");
						sbChemicalDataInfo.append("<TD align='left' width=\"250px\">"+validateString1(strKinematicViscosity)+"</TD>");
						sbChemicalDataInfo.append("<TD align='left' width=\"250px\"><B>WT % Parameterized</B></TD>");
						sbChemicalDataInfo.append("<TD align='left' width=\"250px\">"+validateString1(strWTParameterized)+"</TD>");
						sbChemicalDataInfo.append("</TR>");

						sbChemicalDataInfo.append("<TR>");
						sbChemicalDataInfo.append("<TD align='left' width=\"250px\"><B>Relative Density</B></TD>");
						sbChemicalDataInfo.append("<TD align='left' width=\"250px\">"+validateString1(strRelativeDensityOrSpecificGravity)+"</TD>");
						sbChemicalDataInfo.append("<TD align='left' width=\"250px\"><B>Evaporation Rate</B></TD>");
						sbChemicalDataInfo.append("<TD align='left' width=\"250px\">"+validateString1(strEvpRate)+"</TD>");
						sbChemicalDataInfo.append("</TR>");

						sbChemicalDataInfo.append("<TR>");
						sbChemicalDataInfo.append("<TD align='left' width=\"250px\"><B>pH</B></TD>");
						sbChemicalDataInfo.append("<TD align='left' width=\"250px\">"+validateString1(str_PH)+"</TD>");
						sbChemicalDataInfo.append("<TD align='left' width=\"250px\"><B>PH Dilution</B></TD>");
						sbChemicalDataInfo.append("<TD align='left' width=\"250px\">"+validateString1(strDilution)+"</TD>");
						sbChemicalDataInfo.append("</TR>");

						sbChemicalDataInfo.append("<TR>");
						sbChemicalDataInfo.append("<TD align='left' width=\"250px\"><B>Reserve Alkalinity (%)</B></TD>");
						sbChemicalDataInfo.append("<TD align='left' width=\"250px\">"+validateString1(strResAlknity)+"</TD>");
						sbChemicalDataInfo.append("<TD align='left' width=\"250px\"><B>Reserve Acidity (%)</B></TD>");
						sbChemicalDataInfo.append("<TD align='left' width=\"250px\">"+validateString1(strResAcdity)+"</TD>");
						sbChemicalDataInfo.append("</TR>");

						sbChemicalDataInfo.append("<TR>");
						sbChemicalDataInfo.append("<TD align='left' width=\"250px\"><B>Kst-Dust Deflagration Index (bar *m/sec)</B></TD>");
						sbChemicalDataInfo.append("<TD align='left' width=\"250px\">"+validateString1(strKstDustDeflagrationIndex)+"</TD>");
						sbChemicalDataInfo.append("<TD align='left' width=\"250px\"><B>pmax-max explosion pressure (bar)</B></TD>");
						sbChemicalDataInfo.append("<TD align='left' width=\"250px\">"+validateString1(strPMAXExplosionPressure)+"</TD>");
						sbChemicalDataInfo.append("</TR>");

						sbChemicalDataInfo.append("<TR>");
						sbChemicalDataInfo.append("<TD align='left' width=\"250px\"><B>Is the Liquid Corrosive to Metal (Aluminum or Carbon Steel)?</B></TD>");
						sbChemicalDataInfo.append("<TD align='left' width=\"250px\">"+validateString1(strLiquidCorrMetal)+"</TD>");
						sbChemicalDataInfo.append("<TD align='left' width=\"250px\"><B>Technical Basis for the Corrosive to Metals Determination Provided.</B></TD>");
						sbChemicalDataInfo.append("<TD align='left' width=\"250px\">"+validateString1(strTechCorrMetal)+"</TD>");
						sbChemicalDataInfo.append("</TR>");

						sbChemicalDataInfo.append("</TABLE></TD></TR>");

						sbChemicalDataInfo.append("<TR><TD><BR/></TD></TR>");

						sbChemicalDataInfo.append("<TR><TD><TABLE class=\"WordWrappdf\" cellspacing=\"0\" width=\"990px\" id=\"pgFormulatedProductTable\">");
						sbChemicalDataInfo.append("<thead>");
						sbChemicalDataInfo.append("<TR><TD colspan='2' class=\"new\" ><font size='4'><b>Chemical and Physical Properties (Solid)<br/></b></font></TD></TR>");
						sbChemicalDataInfo.append("</thead>");

						sbChemicalDataInfo.append("<TR>");
						sbChemicalDataInfo.append("<TD align='left' width=\"250px\"><B>Color</B></TD>");
						sbChemicalDataInfo.append("<TD align='left' width=\"250px\">"+validateString1(strColor)+"</TD>");
						sbChemicalDataInfo.append("<TD align='left' width=\"250px\"><B>Color Intensity</B></TD>");
						sbChemicalDataInfo.append("<TD align='left' width=\"250px\">"+validateString1(strColorIntensity)+"</TD>");
						sbChemicalDataInfo.append("</TR>");

						sbChemicalDataInfo.append("<TR>");
						sbChemicalDataInfo.append("<TD align='left' width=\"250px\"><B>Odor</B></TD>");
						sbChemicalDataInfo.append("<TD align='left' width=\"250px\">"+validateString1(strOdour)+"</TD>");
						sbChemicalDataInfo.append("<TD align='left' width=\"250px\"><B>Is the Flammable Liquid Absorbed or Contained within the Solid? (Yes/No)</B></TD>");
						sbChemicalDataInfo.append("<TD align='left' width=\"250px\">"+validateString1(strFlammabelLiq)+"</TD>");
						sbChemicalDataInfo.append("</TR>");

						sbChemicalDataInfo.append("<TR>");
						sbChemicalDataInfo.append("<TD align='left' width=\"250px\"><B>Burn Rate (mm/sec)</B></TD>");
						sbChemicalDataInfo.append("<TD align='left' width=\"250px\">"+validateString1(strBurnRate)+"</TD>");
						sbChemicalDataInfo.append("<TD align='left' width=\"250px\"><B>Does the Product have any Self-Reactive Properties or is it Thermally Unstable? (Yes/No)</B></TD>");
						sbChemicalDataInfo.append("<TD align='left' width=\"250px\">"+validateString1(strProdReactiveProp)+"</TD>");
						sbChemicalDataInfo.append("</TR>");

						sbChemicalDataInfo.append("<TR>");
						sbChemicalDataInfo.append("<TD align='left' width=\"250px\"><B>Heat of Decomposition (kJ/g)</B></TD>");
						sbChemicalDataInfo.append("<TD align='left' width=\"250px\">"+validateString1(strHeatOfDecomposition)+"</TD>");
						sbChemicalDataInfo.append("<TD align='left' width=\"250px\"><B>Self-Accelerating Decomposition Temperature (SADT)(C)</B></TD>");
						sbChemicalDataInfo.append("<TD align='left' width=\"250px\">"+validateString1(strSelfAccelDecompTemp)+"</TD>");
						sbChemicalDataInfo.append("</TR>");

						sbChemicalDataInfo.append("<TR>");
						sbChemicalDataInfo.append("<TD align='left' width=\"250px\"><B>PH Availability</B></TD>");
						sbChemicalDataInfo.append("<TD align='left' width=\"250px\">"+validateString1(strPHAvalibility)+"</TD>");
						sbChemicalDataInfo.append("<TD align='left' width=\"250px\"><B>PH Value</B></TD>");
						sbChemicalDataInfo.append("<TD align='left' width=\"250px\">"+validateString1(strPHValue)+"</TD>");
						sbChemicalDataInfo.append("</TR>");

						sbChemicalDataInfo.append("<TR>");
						sbChemicalDataInfo.append("<TD align='left' width=\"250px\"><B>Content Conductivity (mS/cm)</B></TD>");
						sbChemicalDataInfo.append("<TD align='left' width=\"250px\">"+validateString1(strContentConductivity)+"</TD>");
						sbChemicalDataInfo.append("<TD align='left' width=\"250px\"><B>Corrosive to Metals (Yes/No)</B></TD>");
						sbChemicalDataInfo.append("<TD align='left' width=\"250px\">"+validateString1(strCorrosiveMetal)+"</TD>");
						sbChemicalDataInfo.append("</TR>");

						sbChemicalDataInfo.append("<TR>");
						sbChemicalDataInfo.append("<TD align='left' width=\"250px\"><B>Sustain Combustion (Yes /No)</B></TD>");
						sbChemicalDataInfo.append("<TD align='left' width=\"250px\">"+validateString1(strSustainCombustion)+"</TD>");
						sbChemicalDataInfo.append("<TD align='left' width=\"250px\"><B>Oxidizer (Yes/No)</B></TD>");
						sbChemicalDataInfo.append("<TD align='left' width=\"250px\">"+validateString1(strOxidizer)+"</TD>");
						sbChemicalDataInfo.append("</TR>");

						sbChemicalDataInfo.append("<TR>");
						sbChemicalDataInfo.append("<TD align='left' width=\"250px\"><B>% by Volume ethanol and/or propanol (%)</B></TD>");
						sbChemicalDataInfo.append("<TD align='left' width=\"250px\">"+validateString1(strPGByVolume)+"</TD>");
						sbChemicalDataInfo.append("<TD align='left' width=\"250px\"><B>% by Weight emulsified Liquified flammable gas propellant (%)</B></TD>");
						sbChemicalDataInfo.append("<TD align='left' width=\"250px\">"+validateString1(strWtEmulsifiedLiq)+"</TD>");
						sbChemicalDataInfo.append("</TR>");

						sbChemicalDataInfo.append("<TR>");
						sbChemicalDataInfo.append("<TD align='left' width=\"250px\"><B>Propellant emulsified for life of product (Yes/No)</B></TD>");
						sbChemicalDataInfo.append("<TD align='left' width=\"250px\">"+validateString1(strPropellantEmuls)+"</TD>");
						sbChemicalDataInfo.append("<TD align='left' width=\"250px\"><B>Propellant is non-flammable (Yes/No)</B></TD>");
						sbChemicalDataInfo.append("<TD align='left' width=\"250px\">"+validateString1(strPropellantNonflame)+"</TD>");
						sbChemicalDataInfo.append("</TR>");

						sbChemicalDataInfo.append("<TR>");
						sbChemicalDataInfo.append("<TD align='left' width=\"250px\"><B>WT % Parameterized</B></TD>");
						sbChemicalDataInfo.append("<TD align='left' width=\"250px\">"+validateString1(strWTParameterized)+"</TD>");
						sbChemicalDataInfo.append("<TD align='left' width=\"250px\"><B>Kst-Dust Deflagration Index (bar *m/sec)</B></TD>");
						sbChemicalDataInfo.append("<TD align='left' width=\"250px\">"+validateString1(strKstDustDeflagrationIndex)+"</TD>");
						sbChemicalDataInfo.append("</TR>");

						sbChemicalDataInfo.append("<TR>");
						sbChemicalDataInfo.append("<TD align='left' width=\"250px\"><B>pmax-max explosion pressure (bar)</B></TD>");
						sbChemicalDataInfo.append("<TD align='left' width=\"250px\">"+validateString1(strPMAXExplosionPressure)+"</TD>");
						sbChemicalDataInfo.append("<TD align='left' width=\"250px\"><B></B></TD>");
						sbChemicalDataInfo.append("<TD align='left' width=\"250px\"></TD>");
						sbChemicalDataInfo.append("</TR>");

						sbChemicalDataInfo.append("</TABLE></TD></TR>");

						sbChemicalDataInfo.append("<TR><TD><BR/></TD></TR>");

						sbChemicalDataInfo.append("<TR><TD><TABLE class=\"WordWrappdf\" cellspacing=\"0\" width=\"990px\" id=\"pgFormulatedProductTable\">");
						sbChemicalDataInfo.append("<thead>");
						sbChemicalDataInfo.append("<TR><TD colspan='2' class=\"new\" ><font size='4'><b>Chemical and Physical Properties (Aerosol)<br/></b></font></TD></TR>");
						sbChemicalDataInfo.append("</thead>");

						sbChemicalDataInfo.append("<TR>");
						sbChemicalDataInfo.append("<TD align='left' width=\"250px\"><B>Color</B></TD>");
						sbChemicalDataInfo.append("<TD align='left' width=\"250px\">"+validateString1(strColor)+"</TD>");
						sbChemicalDataInfo.append("<TD align='left' width=\"250px\"><B>Color Intensity</B></TD>");
						sbChemicalDataInfo.append("<TD align='left' width=\"250px\">"+validateString1(strColorIntensity)+"</TD>");
						sbChemicalDataInfo.append("</TR>");

						sbChemicalDataInfo.append("<TR>");
						sbChemicalDataInfo.append("<TD align='left' width=\"250px\"><B>Odor</B></TD>");
						sbChemicalDataInfo.append("<TD align='left' width=\"250px\">"+validateString1(strOdour)+"</TD>");
						sbChemicalDataInfo.append("<TD align='left' width=\"250px\"><B>Heat of Combustion (kJ/g)</B></TD>");
						sbChemicalDataInfo.append("<TD align='left' width=\"250px\">"+validateString1(strHeatOfCombustion)+"</TD>");
						sbChemicalDataInfo.append("</TR>");

						sbChemicalDataInfo.append("<TR>");
						sbChemicalDataInfo.append("<TD align='left' width=\"250px\"><B>Can Construction</B></TD>");
						sbChemicalDataInfo.append("<TD align='left' width=\"250px\">"+validateString1(strCanConst)+"</TD>");
						sbChemicalDataInfo.append("<TD align='left' width=\"250px\"><B>Gauge Pressure @ 130F/55C (kPA)</B></TD>");
						sbChemicalDataInfo.append("<TD align='left' width=\"250px\">"+validateString1(strGaugePressure)+"</TD>");
						sbChemicalDataInfo.append("</TR>");

						sbChemicalDataInfo.append("<TR>");
						sbChemicalDataInfo.append("<TD align='left' width=\"250px\"><B>Aerosol Type</B></TD>");
						sbChemicalDataInfo.append("<TD align='left' width=\"250px\">"+validateString1(strAerosolType)+"</TD>");
						sbChemicalDataInfo.append("<TD align='left' width=\"250px\"><B>Is Aerosol Test Data Needed?</B></TD>");
						sbChemicalDataInfo.append("<TD align='left' width=\"250px\">"+validateString1(strAerosolTestData)+"</TD>");
						sbChemicalDataInfo.append("</TR>");

						sbChemicalDataInfo.append("<TR>");
						sbChemicalDataInfo.append("<TD align='left' width=\"250px\"><B>Ignition Distance (cm)</B></TD>");
						sbChemicalDataInfo.append("<TD align='left' width=\"250px\">"+validateString1(strIgnitionDistance)+"</TD>");
						sbChemicalDataInfo.append("<TD align='left' width=\"250px\"><B>Enclosed Space Ignition Time Equivalent (s/m3)</B></TD>");
						sbChemicalDataInfo.append("<TD align='left' width=\"250px\">"+validateString1(strEnclosedSpaceIgnition)+"</TD>");
						sbChemicalDataInfo.append("</TR>");

						sbChemicalDataInfo.append("<TR>");
						sbChemicalDataInfo.append("<TD align='left' width=\"250px\"><B>Foam Flammability Test: Flame Height (cm)</B></TD>");
						sbChemicalDataInfo.append("<TD align='left' width=\"250px\">"+validateString1(strFlameHt)+"</TD>");
						sbChemicalDataInfo.append("<TD align='left' width=\"250px\"><B>Foam Flammability Test: Flame Duration (sec)</B></TD>");
						sbChemicalDataInfo.append("<TD align='left' width=\"250px\">"+validateString1(strFlameDuration)+"</TD>");
						sbChemicalDataInfo.append("</TR>");

						sbChemicalDataInfo.append("<TR>");
						sbChemicalDataInfo.append("<TD align='left' width=\"250px\"><B>Vapor Pressure (pascals)</B></TD>");
						sbChemicalDataInfo.append("<TD align='left' width=\"250px\">"+validateString1(strVaporPressure)+"</TD>");
						sbChemicalDataInfo.append("<TD align='left' width=\"250px\"><B>Vapor Density</B></TD>");
						sbChemicalDataInfo.append("<TD align='left' width=\"250px\">"+validateString1(strVaporDensity)+"</TD>");
						sbChemicalDataInfo.append("</TR>");

						sbChemicalDataInfo.append("<TR>");
						sbChemicalDataInfo.append("<TD align='left' width=\"250px\"><B>Content Conductivity (mS/cm)</B></TD>");
						sbChemicalDataInfo.append("<TD align='left' width=\"250px\">"+validateString1(strContentConductivity)+"</TD>");
						sbChemicalDataInfo.append("<TD align='left' width=\"250px\"><B>Corrosive to Metals (Aluminum or Carbon Steel) (Yes/No)</B></TD>");
						sbChemicalDataInfo.append("<TD align='left' width=\"250px\">"+validateString1(strCorrosiveMetal)+"</TD>");
						sbChemicalDataInfo.append("</TR>");

						sbChemicalDataInfo.append("<TR>");
						sbChemicalDataInfo.append("<TD align='left' width=\"250px\"><B>Technical Basis for the Corrosive to Metals Determination Provided.</B></TD>");
						sbChemicalDataInfo.append("<TD align='left' width=\"250px\">"+validateString1(strTechCorrMetal)+"</TD>");
						sbChemicalDataInfo.append("<TD align='left' width=\"250px\"><B>Conductivity of the Contents in the Aerosol Can (microsiemens/cm)</B></TD>");
						sbChemicalDataInfo.append("<TD align='left' width=\"250px\">"+validateString1(strCondAerosol)+"</TD>");
						sbChemicalDataInfo.append("</TR>");

						sbChemicalDataInfo.append("<TR>");
						sbChemicalDataInfo.append("<TD align='left' width=\"250px\"><B>Sustain Combustion (Yes /No)</B></TD>");
						sbChemicalDataInfo.append("<TD align='left' width=\"250px\">"+validateString1(strSustainCombustion)+"</TD>");
						sbChemicalDataInfo.append("<TD align='left' width=\"250px\"><B>Oxidizer (Yes/No)</B></TD>");
						sbChemicalDataInfo.append("<TD align='left' width=\"250px\">"+validateString1(strOxidizer)+"</TD>");
						sbChemicalDataInfo.append("</TR>");

						sbChemicalDataInfo.append("<TR>");
						sbChemicalDataInfo.append("<TD align='left' width=\"250px\"><B>% by Volume ethanol and/or propanol (%)</B></TD>");
						sbChemicalDataInfo.append("<TD align='left' width=\"250px\">"+validateString1(strPGByVolume)+"</TD>");
						sbChemicalDataInfo.append("<TD align='left' width=\"250px\"><B>% by Weight emulsified Liquified flammable gas propellant (%)</B></TD>");
						sbChemicalDataInfo.append("<TD align='left' width=\"250px\">"+validateString1(strWeightEmulsified)+"</TD>");
						sbChemicalDataInfo.append("</TR>");

						sbChemicalDataInfo.append("<TR>");
						sbChemicalDataInfo.append("<TD align='left' width=\"250px\"><B>Propellant emulsified for life of product (Yes/No)</B></TD>");
						sbChemicalDataInfo.append("<TD align='left' width=\"250px\">"+validateString1(strPropellantEmuls)+"</TD>");
						sbChemicalDataInfo.append("<TD align='left' width=\"250px\"><B>Propellant is non-flammable (Yes/No)</B></TD>");
						sbChemicalDataInfo.append("<TD align='left' width=\"250px\">"+validateString1(strPropellantNonflame)+"</TD>");
						sbChemicalDataInfo.append("</TR>");

						sbChemicalDataInfo.append("<TR>");
						sbChemicalDataInfo.append("<TD align='left' width=\"250px\"><B>Is the Propellent Flammable or Non-Flammable?</B></TD>");
						sbChemicalDataInfo.append("<TD align='left' width=\"250px\">"+validateString1(strPropellantNonflame)+"</TD>");
						sbChemicalDataInfo.append("<TD align='left' width=\"250px\"><B>Percent by Weight of Flammable Propellant in Aerosol Container (%)</B></TD>");
						sbChemicalDataInfo.append("<TD align='left' width=\"250px\">"+validateString1(strPerFlamePropAerosol)+"</TD>");
						sbChemicalDataInfo.append("</TR>");

						sbChemicalDataInfo.append("<TR>");
						sbChemicalDataInfo.append("<TD align='left' width=\"250px\"><B>WT % Parameterized</B></TD>");
						sbChemicalDataInfo.append("<TD align='left' width=\"250px\">"+validateString1(strWTParameterized)+"</TD>");
						sbChemicalDataInfo.append("<TD align='left' width=\"250px\"><B>Does the Base Product Contain  50% Water AND  4% by Weight of an Emulsified Liquified Non-Flammable Gas Propellant? (Yes/No)</B></TD>");
						sbChemicalDataInfo.append("<TD align='left' width=\"250px\">"+validateString1(strWeightEmulsified)+"</TD>");
						sbChemicalDataInfo.append("</TR>");

						sbChemicalDataInfo.append("<TR>");
						sbChemicalDataInfo.append("<TD align='left' width=\"250px\"><B>Does the Base Product Contain  50% Water AND  4% by Weight of an Emulsified Liquified Non-Flammable Gas Propellant that Remains Emulsified for the Life of the Product? (Yes/No)</B></TD>");
						sbChemicalDataInfo.append("<TD align='left' width=\"250px\">"+validateString1(strWtEmulsifiedLiq)+"</TD>");
						sbChemicalDataInfo.append("<TD align='left' width=\"250px\"><B>Kst-Dust Deflagration Index (bar *m/sec)</B></TD>");
						sbChemicalDataInfo.append("<TD align='left' width=\"250px\">"+validateString1(strKstDustDeflagrationIndex)+"</TD>");
						sbChemicalDataInfo.append("</TR>");

						sbChemicalDataInfo.append("<TR>");
						sbChemicalDataInfo.append("<TD align='left' width=\"250px\"><B>pmax-max explosion pressure (bar)</B></TD>");
						sbChemicalDataInfo.append("<TD align='left' width=\"250px\">"+validateString1(strPMAXExplosionPressure)+"</TD>");
						sbChemicalDataInfo.append("<TD align='left' width=\"250px\"><B></B></TD>");
						sbChemicalDataInfo.append("<TD align='left' width=\"250px\"></TD>");
						sbChemicalDataInfo.append("</TR>");

						sbChemicalDataInfo.append("</TABLE></TD></TR>");	//Modify Code Refactoring
						mlStabilityResultList.clear();
					}
				}

			} catch (Exception e){
				e.printStackTrace();
				throw new MatrixException(e);
			}
			long endTime = new Date().getTime();
			System.out.println("Total Time has taken by the  getChemicalAndPhisicalData Method is-->"+(endTime-startTime));
			return sbChemicalDataInfo;
	}*/

    //Commented for 2018x.2.1 FOP requirement Start
	/*private StringBuilder getChemicalAndPhisicalData(Context context,String strObjectId) throws Exception{
		long startTime = new Date().getTime();
		StringBuilder sbChemicalDataInfo = new StringBuilder();
		String strGaugePressure = DomainConstants.EMPTY_STRING;
		String strIgnitionDistance = DomainConstants.EMPTY_STRING;
		String strEnclosedSpaceIgnition = DomainConstants.EMPTY_STRING;
		String strFoamFlammability = DomainConstants.EMPTY_STRING;
		String strPH = DomainConstants.EMPTY_STRING;
		String strContentConductivity = DomainConstants.EMPTY_STRING;
		String strCorrosiveToMetals = DomainConstants.EMPTY_STRING;
		String strClosedCupFlashpoint = DomainConstants.EMPTY_STRING;
		String strBoilingPoint = DomainConstants.EMPTY_STRING;
		String strSustainCombustion = DomainConstants.EMPTY_STRING;
		String strOxidizer = DomainConstants.EMPTY_STRING;
		String strAvailableOxygen = DomainConstants.EMPTY_STRING;
		String strPGByVolume = DomainConstants.EMPTY_STRING;
		String strPGByWeight = DomainConstants.EMPTY_STRING;
		String strPropellantEmulsProd = DomainConstants.EMPTY_STRING;
		String strPropellantNonflame = DomainConstants.EMPTY_STRING;
		String strKinematicViscosity = DomainConstants.EMPTY_STRING;
		String strVaporPressure = DomainConstants.EMPTY_STRING;
		String strWTParameterized = DomainConstants.EMPTY_STRING;
		String strRelativeDensityOrSpecificGravity = DomainConstants.EMPTY_STRING;
		String strEvpRate = DomainConstants.EMPTY_STRING;
		String strResAcdity = DomainConstants.EMPTY_STRING;
		String strResAlknity = DomainConstants.EMPTY_STRING;
		String strBurnRate = DomainConstants.EMPTY_STRING;
		String strHeatOfDecomposition =DomainConstants.EMPTY_STRING;
		String strSelfAccelDecompTemp = DomainConstants.EMPTY_STRING;
		String strKstDustDeflagrationIndex = DomainConstants.EMPTY_STRING;
		String strPMAXExplosionPressure = DomainConstants.EMPTY_STRING;
		String strProdExpDate = DomainConstants.EMPTY_STRING;
		String strShelfLife = DomainConstants.EMPTY_STRING;
		String strTempGrp = DomainConstants.EMPTY_STRING;
		String strHumGrp = DomainConstants.EMPTY_STRING;
		String strTrnsFreezeProtection = DomainConstants.EMPTY_STRING;
		String strTrnsHeatProtection = DomainConstants.EMPTY_STRING;
		String strDngGoodsClass = DomainConstants.EMPTY_STRING;
		String strMaxCUSize = DomainConstants.EMPTY_STRING;
		String strCOUnitLable = DomainConstants.EMPTY_STRING;
		String strCUUnitLable = DomainConstants.EMPTY_STRING;
		String strUNNumber = DomainConstants.EMPTY_STRING;
		String strProperShippingName = DomainConstants.EMPTY_STRING;
		String strHazardClass = DomainConstants.EMPTY_STRING;
		String strPackingGroup = DomainConstants.EMPTY_STRING;
		//2018x.2
		String strColor = DomainConstants.EMPTY_STRING;
		String strColorIntensity = DomainConstants.EMPTY_STRING;
		String strOdour = DomainConstants.EMPTY_STRING;
		String strCorrosiveMetal = DomainConstants.EMPTY_STRING;
	    String strClosedFlashpointValue = DomainConstants.EMPTY_STRING;
	    String strBolingPointValue = DomainConstants.EMPTY_STRING;
	    String strDoesPdtCombustion = DomainConstants.EMPTY_STRING;
	    String strOxidizerNaPerCa = DomainConstants.EMPTY_STRING;
	    String strHydrogenPeroxide = DomainConstants.EMPTY_STRING;
	    String strBasepdtCombustion = DomainConstants.EMPTY_STRING;
	    String strOrganicPeroxide = DomainConstants.EMPTY_STRING;
		String strAvailableOxyContent = DomainConstants.EMPTY_STRING;
		String strWeightEmulsified = DomainConstants.EMPTY_STRING;
		String strPropellantEmuls = DomainConstants.EMPTY_STRING;
		String strDilution = DomainConstants.EMPTY_STRING;
		String strLiquidCorrMetal =  DomainConstants.EMPTY_STRING;
		String strTechCorrMetal  = DomainConstants.EMPTY_STRING;
		String strFlammabelLiq = DomainConstants.EMPTY_STRING;
		String strProdReactiveProp =  DomainConstants.EMPTY_STRING;
		String strPHAvalibility =  DomainConstants.EMPTY_STRING;
		String strBaseEthanolProponal=  DomainConstants.EMPTY_STRING;
		String strWtEmulsifiedLiq=  DomainConstants.EMPTY_STRING;
		String strHeatOfCombustion = DomainConstants.EMPTY_STRING;
		String strCanConst = DomainConstants.EMPTY_STRING;
		String strAerosolType = DomainConstants.EMPTY_STRING;
		String strAerosolTestData = DomainConstants.EMPTY_STRING;
		String strFlameHt = DomainConstants.EMPTY_STRING;
		String strFlameDuration = DomainConstants.EMPTY_STRING;
		String strCondAerosol = DomainConstants.EMPTY_STRING;
		String strPerFlamePropAerosol = DomainConstants.EMPTY_STRING;
		//String strVapourPressure = DomainConstants.EMPTY_STRING;
		String strVaporDensity = DomainConstants.EMPTY_STRING;
		String strBoiling_Point = DomainConstants.EMPTY_STRING;
		String str_PH = DomainConstants.EMPTY_STRING;
		String strPHValue = DomainConstants.EMPTY_STRING;
		String strPGProductOxidizer = DomainConstants.EMPTY_STRING;
		String strPGPCBByVWMiscibleAlcohols = DomainConstants.EMPTY_STRING;
		String strPGDoesBaseProductHaveAFirePoint = DomainConstants.EMPTY_STRING;
		String strPGAerosolCanCorrosiveToMetals = DomainConstants.EMPTY_STRING;
		String strPGFlammableOrNonFlammable = DomainConstants.EMPTY_STRING;
		//2018x.2  pgOxidizerSodiumPerCarbonate
		try{

			Map mpArgsPack = new HashMap();
			mpArgsPack.put("objectId", strObjectId);
			String[] strArgs = JPO.packArgs(mpArgsPack);
			MapList mlStabilityResultList = (MapList) JPO.invoke(context, "emxCPNCharacteristicList", null, "getStabilityResults", strArgs, MapList.class);
			if(validateString(strObjectId)){

				StringList slObjectSelects = new StringList();
				slObjectSelects.add(pgV3Constants.SELECT_ATTRIBUTE_PGMAXCONSUMERUNITSIZE);
				slObjectSelects.add(pgV3Constants.SELECT_ATTRIBUTE_PGCUSTOMERUNITLABELING);
				slObjectSelects.add(pgV3Constants.SELECT_ATTRIBUTE_PGCONSUMERUNITLABELING);
				slObjectSelects.add(pgV3Constants.SELECT_ATTRIBUTE_PGPUNNUMBER);
				slObjectSelects.add(pgV3Constants.SELECT_ATTRIBUTE_PGHAZARDCLASS);
				slObjectSelects.add(pgV3Constants.SELECT_ATTRIBUTE_PGPACKINGGROUP);
				slObjectSelects.add(pgV3Constants.SELECT_ATTRIBUTE_PGGAUGEPRESSURE);
				slObjectSelects.add(pgV3Constants.SELECT_ATTRIBUTE_PGIGNITIONDISTANCE);
				slObjectSelects.add(pgV3Constants.SELECT_ATTRIBUTE_PGENCLOSEDSPACEIGNITION);
				slObjectSelects.add(pgV3Constants.SELECT_ATTRIBUTE_PGFOAMFLAMMABILITY);
				slObjectSelects.add(pgV3Constants.SELECT_ATTRIBUTE_PHVALUE);
				slObjectSelects.add(pgV3Constants.SELECT_ATTRIBUTE_PGCONTENTCONDUCTIVITY);
				slObjectSelects.add(pgV3Constants.SELECT_ATTRIBUTE_PGCORROSIVETOMETALS);
				slObjectSelects.add(pgV3Constants.SELECT_ATTRIBUTE_PGCLOSEDCUPFLASHPOINT);
				slObjectSelects.add(pgV3Constants.SELECT_ATTRIBUTE_PGEVAPORATIONRATE);
				slObjectSelects.add(pgV3Constants.SELECT_ATTRIBUTE_PGRESERVEACIDITY);
				slObjectSelects.add(pgV3Constants.SELECT_ATTRIBUTE_PGRESERVERALKALINITY);
				slObjectSelects.add(pgV3Constants.SELECT_ATTRIBUTE_BOILINGPOINT);
				slObjectSelects.add(pgV3Constants.SELECT_ATTRIBUTE_PGSUSTAINCOMBUSTION);
				slObjectSelects.add(pgV3Constants.SELECT_ATTRIBUTE_PGOXIDIZER);
				slObjectSelects.add(pgV3Constants.SELECT_ATTRIBUTE_PGAVAILABLEOXYGEN);
				slObjectSelects.add(pgV3Constants.SELECT_ATTRIBUTE_PGBYVOLUME);
				slObjectSelects.add(pgV3Constants.SELECT_ATTRIBUTE_PGBYWEIGHT);
				slObjectSelects.add(pgV3Constants.SELECT_ATTRIBUTE_PGPROPELLANTEMULSIFIEDPRODUCT);
				slObjectSelects.add(pgV3Constants.SELECT_ATTRIBUTE_PGPROPELLANTNONFLAMMABLE);
				slObjectSelects.add(pgV3Constants.SELECT_ATTRIBUTE_PGKINEMATICVISCOSITY);
				slObjectSelects.add(pgV3Constants.SELECT_ATTRIBUTE_VAPORPRESSURE);
				//Added by DSM-2018x.1.1 for PDF Views Numeric Attribute - Starts
				slObjectSelects.add(pgV3Constants.SELECT_ATTRIBUTE_BOILINGPOINT+".inputvalue");
				slObjectSelects.add(pgV3Constants.SELECT_ATTRIBUTE_VAPORPRESSURE+".inputvalue");
				slObjectSelects.add("attribute[" + pgV3Constants.ATTRIBUTE_PHVALUE + "].inputvalue");
				//Added by DSM-2018x.1.1 for PDF Views Numeric Attribute - End
				slObjectSelects.add(pgV3Constants.SELECT_ATTRIBUTE_PGWTPARAMETERIZED);
				slObjectSelects.add(pgV3Constants.SELECT_ATTRIBUTE_PGRELATIVEDENSITYORSPECIFICGRAVITY);
				slObjectSelects.add(pgV3Constants.SELECT_ATTRIBUTE_PGBURNRATE);
				slObjectSelects.add(pgV3Constants.SELECT_ATTRIBUTE_PGHEATOFDECOMPOSITION);
				slObjectSelects.add(pgV3Constants.SELECT_ATTRIBUTE_PGSELFACCELDECOMTEMP);
				slObjectSelects.add(pgV3Constants.SELECT_ATTRIBUTE_PGPROPERSHIPPINGNAME);
				slObjectSelects.add(pgV3Constants.SELECT_ATTRIBUTE_PGKSTDUSTDEFLAGRATIONINDEX);
				slObjectSelects.add(pgV3Constants.SELECT_ATTRIBUTE_PGPMAXEXPLOSIONPRESSURE);
				slObjectSelects.add(pgV3Constants.SELECT_ATTRIBUTE_PGDANGEROUSGOODSCLASSIFICATION);
				//2018x.2
				slObjectSelects.add(pgV3Constants.SELECT_ATTRIBUTE_PGCOLOR);
				slObjectSelects.add(pgV3Constants.SELECT_ATTRIBUTE_PG_COLOR_INTENSITY);
				slObjectSelects.add(pgV3Constants.SELECT_ATTRIBUTE_PG_ODOUR);
				slObjectSelects.add(pgV3Constants.SELECT_ATTRIBUTE_PGCORROSIVETOMETALS);
				slObjectSelects.add(pgV3Constants.SELECT_ATTRIBUTE_PG_CLOSEDCUPFLASHPOINTVALUE);
				slObjectSelects.add(pgV3Constants.SELECT_ATTRIBUTE_PG_BOILINGPOINTVALUE);
				slObjectSelects.add(pgV3Constants.SELECT_ATTRIBUTE_PG_BASEPRODUCTSUSTAINCOMBUSTION);
				slObjectSelects.add(pgV3Constants.SELECT_ATTRIBUTE_PG_OXIDIZERSODIUMPERCARBONATE);
				slObjectSelects.add(pgV3Constants.SELECT_ATTRIBUTE_PG_OXIDIZERHYDROGENPEROXIDE);
				slObjectSelects.add(pgV3Constants.SELECT_ATTRIBUTE_PG_ORGANIC_PEROXIDE);
				slObjectSelects.add(pgV3Constants.SELECT_ATTRIBUTE_PG_AVAILABLE_OXYGEN_CONTENT);
				slObjectSelects.add(pgV3Constants.SELECT_ATTRIBUTE_PG_FLAMMABLE_GAS_PROPELLANT);
				slObjectSelects.add(pgV3Constants.SELECT_ATTRIBUTE_PG_PROPELLANT);
				slObjectSelects.add(pgV3Constants.SELECT_ATTRIBUTE_PG_PH_DILUTION);
				slObjectSelects.add(pgV3Constants.SELECT_ATTRIBUTE_PG_LIQUID_CORROSIVE_TO_METAL);
				slObjectSelects.add(pgV3Constants.SELECT_ATTRIBUTE_PG_TECHNICAL_CTM);
				slObjectSelects.add(pgV3Constants.SELECT_ATTRIBUTE_PG_FLAMMABLE_LIQUID);
				slObjectSelects.add(pgV3Constants.SELECT_ATTRIBUTE_PG_SELF_REACTIVE_PROPERTIES);
				slObjectSelects.add(pgV3Constants.SELECT_ATTRIBUTE_PG_PH_AVAILABILITY);
				slObjectSelects.add(pgV3Constants.SELECT_ATTRIBUTE_PG_PRODUCT_CONTAIN_ETHANOL);
				slObjectSelects.add(pgV3Constants.SELECT_ATTRIBUTE_PG_PRODUCT_CONTAIN_GAS);
				slObjectSelects.add(pgV3Constants.SELECT_ATTRIBUTE_PG_HEAT_OF_COMBUSTION);
				slObjectSelects.add(pgV3Constants.SELECT_ATTRIBUTE_PG_CAN_CONSTRUCTION);
				slObjectSelects.add(pgV3Constants.SELECT_ATTRIBUTE_PG_AEROSOLTYPE);
				slObjectSelects.add(pgV3Constants.SELECT_ATTRIBUTE_PG_IS_AEROSOLTYPE_TEST);
				slObjectSelects.add(pgV3Constants.SELECT_ATTRIBUTE_PG_FLAMEHEIGHT);
				slObjectSelects.add(pgV3Constants.SELECT_ATTRIBUTE_PG_FLAME_DURATION);
				slObjectSelects.add(pgV3Constants.SELECT_ATTRIBUTE_PG_AEROSOL_CONDUCTIVITY);
				slObjectSelects.add(pgV3Constants.SELECT_ATTRIBUTE_PG_PERCENT_OF_WEIGHT_FLAMMABLE);
				slObjectSelects.add(pgV3Constants.SELECT_ATTRIBUTE_VAPOUR_DENSITY);
				slObjectSelects.add(pgV3Constants.SELECT_ATTRIBUTE_BOILINGPOINT);
				slObjectSelects.add(pgV3Constants.SELECT_ATTRIBUTE_PG_PH);
				slObjectSelects.add(pgV3Constants.SELECT_ATTRIBUTE_PHVALUE);
				slObjectSelects.add(pgV3Constants.SELECT_ATTRIBUTE_ODOUR);
				slObjectSelects.add(pgV3Constants.SELECT_ATTRIBUTE_PGPRODUCTOXIDIZER);
				slObjectSelects.add(pgV3Constants.SELECT_ATTRIBUTE_PGBOILINGPOINT);
				slObjectSelects.add(pgV3Constants.SELECT_ATTRIBUTE_PGPCBBYVWMISCIBLEALOHOLS);
				slObjectSelects.add(pgV3Constants.SELECT_ATTRIBUTE_PGPRODUCTHAVEAFIREPOINT);
				slObjectSelects.add(pgV3Constants.SELECT_ATTRIBUTE_PGAEROSOLCANCORROSIVETOMETALS);
				slObjectSelects.add(pgV3Constants.SELECT_ATTRIBUTE_PGFLAMMABLEORNONFLAMMABLE);
				//2018x.2
				DomainObject domainObject= DomainObject.newInstance(context,strObjectId);
				Map mpAttributeInfo = domainObject.getInfo(context, slObjectSelects);

				if(!mpAttributeInfo.isEmpty()){

					strGaugePressure = (String) mpAttributeInfo.get(pgV3Constants.SELECT_ATTRIBUTE_PGGAUGEPRESSURE);
					//2018x.2-starts
					strColor =(String)mpAttributeInfo.get(pgV3Constants.SELECT_ATTRIBUTE_PGCOLOR);
					strColorIntensity =(String)mpAttributeInfo.get(pgV3Constants.SELECT_ATTRIBUTE_PG_COLOR_INTENSITY);
					strOdour = (String)mpAttributeInfo.get(pgV3Constants.SELECT_ATTRIBUTE_ODOUR);
					if(UIUtil.isNotNullAndNotEmpty(strOdour)) {
						strOdour = strOdour.replaceAll("[<]","#LESS_THAN");
					}
					strCorrosiveMetal = (String)mpAttributeInfo.get(pgV3Constants.SELECT_ATTRIBUTE_PGCORROSIVETOMETALS);
					strClosedFlashpointValue = (String)mpAttributeInfo.get(pgV3Constants.SELECT_ATTRIBUTE_PG_CLOSEDCUPFLASHPOINTVALUE);
					strBolingPointValue = (String)mpAttributeInfo.get(pgV3Constants.SELECT_ATTRIBUTE_PG_BOILINGPOINTVALUE);
					strDoesPdtCombustion = (String)mpAttributeInfo.get(pgV3Constants.SELECT_ATTRIBUTE_PG_BASEPRODUCTSUSTAINCOMBUSTION);
					strOxidizerNaPerCa = (String)mpAttributeInfo.get(pgV3Constants.SELECT_ATTRIBUTE_PG_OXIDIZERSODIUMPERCARBONATE);
					strHydrogenPeroxide = (String)mpAttributeInfo.get(pgV3Constants.SELECT_ATTRIBUTE_PG_OXIDIZERHYDROGENPEROXIDE);
					strOrganicPeroxide = (String)mpAttributeInfo.get(pgV3Constants.SELECT_ATTRIBUTE_PG_ORGANIC_PEROXIDE);
					strAvailableOxyContent = (String)mpAttributeInfo.get(pgV3Constants.SELECT_ATTRIBUTE_PG_AVAILABLE_OXYGEN_CONTENT);
					strWeightEmulsified = (String)mpAttributeInfo.get(pgV3Constants.SELECT_ATTRIBUTE_PG_FLAMMABLE_GAS_PROPELLANT);
					strPropellantEmuls = (String)mpAttributeInfo.get(pgV3Constants.SELECT_ATTRIBUTE_PG_PROPELLANT);
					strDilution = (String)mpAttributeInfo.get(pgV3Constants.SELECT_ATTRIBUTE_PG_PH_DILUTION);
					strLiquidCorrMetal = (String)mpAttributeInfo.get(pgV3Constants.SELECT_ATTRIBUTE_PG_LIQUID_CORROSIVE_TO_METAL);
					strTechCorrMetal = (String)mpAttributeInfo.get(pgV3Constants.SELECT_ATTRIBUTE_PG_TECHNICAL_CTM);
					if(UIUtil.isNotNullAndNotEmpty(strTechCorrMetal)) {
						strTechCorrMetal = strTechCorrMetal.replaceAll("[<]","#LESS_THAN");
					}
					strFlammabelLiq = (String)mpAttributeInfo.get(pgV3Constants.SELECT_ATTRIBUTE_PG_FLAMMABLE_LIQUID);
					strProdReactiveProp = (String)mpAttributeInfo.get(pgV3Constants.SELECT_ATTRIBUTE_PG_SELF_REACTIVE_PROPERTIES);
					strPHAvalibility = (String)mpAttributeInfo.get(pgV3Constants.SELECT_ATTRIBUTE_PG_PH_AVAILABILITY);
					strBaseEthanolProponal = (String)mpAttributeInfo.get(pgV3Constants.SELECT_ATTRIBUTE_PG_PRODUCT_CONTAIN_ETHANOL);
					strWtEmulsifiedLiq  = (String)mpAttributeInfo.get(pgV3Constants.SELECT_ATTRIBUTE_PG_PRODUCT_CONTAIN_GAS);
					strHeatOfCombustion  = (String)mpAttributeInfo.get(pgV3Constants.SELECT_ATTRIBUTE_PG_HEAT_OF_COMBUSTION);
					strCanConst  = (String)mpAttributeInfo.get(pgV3Constants.SELECT_ATTRIBUTE_PG_CAN_CONSTRUCTION);
					strAerosolType = (String)mpAttributeInfo.get(pgV3Constants.SELECT_ATTRIBUTE_PG_AEROSOLTYPE);
					strAerosolTestData = (String)mpAttributeInfo.get(pgV3Constants.SELECT_ATTRIBUTE_PG_IS_AEROSOLTYPE_TEST);
					if(UIUtil.isNotNullAndNotEmpty(strAerosolTestData)) {
						strAerosolTestData = strAerosolTestData.replaceAll("[<]","#LESS_THAN");
					}
					strFlameHt = (String)mpAttributeInfo.get(pgV3Constants.SELECT_ATTRIBUTE_PG_FLAMEHEIGHT);
					strFlameDuration = (String)mpAttributeInfo.get(pgV3Constants.SELECT_ATTRIBUTE_PG_FLAME_DURATION);
					strCondAerosol = (String)mpAttributeInfo.get(pgV3Constants.SELECT_ATTRIBUTE_PG_AEROSOL_CONDUCTIVITY);
					strPerFlamePropAerosol = (String)mpAttributeInfo.get(pgV3Constants.SELECT_ATTRIBUTE_PG_PERCENT_OF_WEIGHT_FLAMMABLE);
					//strVaporPressure = (String)mpAttributeInfo.get(pgV3Constants.SELECT_ATTRIBUTE_VAPORPRESSURE);
					strBoiling_Point = (String)mpAttributeInfo.get(pgV3Constants.SELECT_ATTRIBUTE_PGBOILINGPOINT);
					str_PH = (String)mpAttributeInfo.get(pgV3Constants.SELECT_ATTRIBUTE_PG_PH);
					strPHValue = (String)mpAttributeInfo.get(pgV3Constants.SELECT_ATTRIBUTE_PHVALUE);
					strVaporDensity = (String) mpAttributeInfo.get(pgV3Constants.SELECT_ATTRIBUTE_VAPOUR_DENSITY);
					//2018x.2 - ends
					strIgnitionDistance = (String) mpAttributeInfo.get(pgV3Constants.SELECT_ATTRIBUTE_PGIGNITIONDISTANCE);
					strEnclosedSpaceIgnition = (String) mpAttributeInfo.get(pgV3Constants.SELECT_ATTRIBUTE_PGENCLOSEDSPACEIGNITION);
					strFoamFlammability = (String) mpAttributeInfo.get(pgV3Constants.SELECT_ATTRIBUTE_PGFOAMFLAMMABILITY);
					//Commented by DSM-2018x.1.1 for PDF Views Numeric Attribute - Starts
					//strPH = (String) mpAttributeInfo.get(pgV3Constants.SELECT_ATTRIBUTE_PHVALUE);
					//Commented by DSM-2018x.1.1 for PDF Views Numeric Attribute - Ends
					strContentConductivity = (String) mpAttributeInfo.get(pgV3Constants.SELECT_ATTRIBUTE_PGCONTENTCONDUCTIVITY);

					strCorrosiveToMetals = (String) mpAttributeInfo.get(pgV3Constants.SELECT_ATTRIBUTE_PGCORROSIVETOMETALS);
					strClosedCupFlashpoint = (String) mpAttributeInfo.get(pgV3Constants.SELECT_ATTRIBUTE_PGCLOSEDCUPFLASHPOINT);
					//Commented by DSM-2018x.1.1 for PDF Views Numeric Attribute - Starts
					//strBoilingPoint = (String) mpAttributeInfo.get(pgV3Constants.SELECT_ATTRIBUTE_BOILINGPOINT);
					//Commented by DSM-2018x.1.1 for PDF Views Numeric Attribute - Ends
					strSustainCombustion = (String) mpAttributeInfo.get(pgV3Constants.SELECT_ATTRIBUTE_PGSUSTAINCOMBUSTION);
					strOxidizer = (String) mpAttributeInfo.get(pgV3Constants.SELECT_ATTRIBUTE_PGOXIDIZER);
					strPGProductOxidizer = (String) mpAttributeInfo.get(pgV3Constants.SELECT_ATTRIBUTE_PGPRODUCTOXIDIZER);

					strAvailableOxygen = (String) mpAttributeInfo.get(pgV3Constants.SELECT_ATTRIBUTE_PGAVAILABLEOXYGEN);
					strPGByVolume = (String) mpAttributeInfo.get(pgV3Constants.SELECT_ATTRIBUTE_PGBYVOLUME);
					strPGByWeight = (String) mpAttributeInfo.get(pgV3Constants.SELECT_ATTRIBUTE_PGBYWEIGHT);
					strPropellantEmulsProd = (String) mpAttributeInfo.get(pgV3Constants.SELECT_ATTRIBUTE_PGPROPELLANTEMULSIFIEDPRODUCT);
					strPropellantNonflame = (String) mpAttributeInfo.get(pgV3Constants.SELECT_ATTRIBUTE_PGPROPELLANTNONFLAMMABLE);

					strKinematicViscosity = (String) mpAttributeInfo.get(pgV3Constants.SELECT_ATTRIBUTE_PGKINEMATICVISCOSITY);
					//Added by DSM-2018x.1.1 for PDF Views Numeric Attribute - Starts
					 String strObjType = domainObject.getInfo(context, DomainConstants.SELECT_TYPE);
					if(strObjType.equalsIgnoreCase(pgV3Constants.TYPE_RAWMATERIALPART) || strObjType.equalsIgnoreCase(pgV3Constants.TYPE_FORMULATIONPART)){
						strVaporPressure = (String) mpAttributeInfo.get(pgV3Constants.SELECT_ATTRIBUTE_VAPORPRESSURE+".inputvalue");
						strBoilingPoint = (String) mpAttributeInfo.get(pgV3Constants.SELECT_ATTRIBUTE_BOILINGPOINT+".inputvalue");
						strPH = (String) mpAttributeInfo.get("attribute[" + pgV3Constants.ATTRIBUTE_PHVALUE + "].inputvalue");
				    } else {
						strVaporPressure = (String) mpAttributeInfo.get(pgV3Constants.SELECT_ATTRIBUTE_VAPORPRESSURE);
						strBoilingPoint = (String) mpAttributeInfo.get(pgV3Constants.SELECT_ATTRIBUTE_BOILINGPOINT);
						strPH = (String) mpAttributeInfo.get(pgV3Constants.SELECT_ATTRIBUTE_PHVALUE);
					}
					//Added by DSM-2018x.1.1 for PDF Views Numeric Attribute - Ends

					strWTParameterized = (String) mpAttributeInfo.get(pgV3Constants.SELECT_ATTRIBUTE_PGWTPARAMETERIZED);
					strRelativeDensityOrSpecificGravity = (String) mpAttributeInfo.get(pgV3Constants.SELECT_ATTRIBUTE_PGRELATIVEDENSITYORSPECIFICGRAVITY);


					strEvpRate = (String) mpAttributeInfo.get(pgV3Constants.SELECT_ATTRIBUTE_PGEVAPORATIONRATE);
					strResAcdity = (String) mpAttributeInfo.get(pgV3Constants.SELECT_ATTRIBUTE_PGRESERVEACIDITY);
					strResAlknity = (String) mpAttributeInfo.get(pgV3Constants.SELECT_ATTRIBUTE_PGRESERVERALKALINITY);
					strBurnRate = (String) mpAttributeInfo.get(pgV3Constants.SELECT_ATTRIBUTE_PGBURNRATE);
					strHeatOfDecomposition = (String) mpAttributeInfo.get(pgV3Constants.SELECT_ATTRIBUTE_PGHEATOFDECOMPOSITION);
					strSelfAccelDecompTemp = (String) mpAttributeInfo.get(pgV3Constants.SELECT_ATTRIBUTE_PGSELFACCELDECOMTEMP);

					strKstDustDeflagrationIndex = (String) mpAttributeInfo.get(pgV3Constants.SELECT_ATTRIBUTE_PGKSTDUSTDEFLAGRATIONINDEX);
					strPMAXExplosionPressure = (String) mpAttributeInfo.get(pgV3Constants.SELECT_ATTRIBUTE_PGPMAXEXPLOSIONPRESSURE);

					strDngGoodsClass = (String) mpAttributeInfo.get(pgV3Constants.SELECT_ATTRIBUTE_PGDANGEROUSGOODSCLASSIFICATION);
					//Added by DSM(Sogeti)-2018x.0 for PDF Views Defect #24419 - Starts
					strDngGoodsClass = strDngGoodsClass.replaceAll("[<]","#LESS_THAN");
					//Added by DSM(Sogeti)-2018x.0 for PDF Views Defect #24419 - Ends
					strMaxCUSize = (String) mpAttributeInfo.get(pgV3Constants.SELECT_ATTRIBUTE_PGMAXCONSUMERUNITSIZE);

					//Added by DSM-2018x.1 for PDF Views (Defect #24437) - Starts
					if(strMaxCUSize.equalsIgnoreCase("FALSE"))
						strMaxCUSize = "No";
					else if (strMaxCUSize.equalsIgnoreCase("TRUE"))
						strMaxCUSize = "Yes";
					//Added by DSM-2018x.1 for PDF Views (Defect #24437) - Ends

					strCOUnitLable = (String) mpAttributeInfo.get(pgV3Constants.SELECT_ATTRIBUTE_PGCONSUMERUNITLABELING);
					//Added by DSM(Sogeti)-2018x.0 for PDF Views Defect #24419 - Starts
					strCOUnitLable = strCOUnitLable.replaceAll("[<]","#LESS_THAN");
					//Added by DSM(Sogeti)-2018x.0 for PDF Views Defect #24419 - Ends
					strCUUnitLable = (String) mpAttributeInfo.get(pgV3Constants.SELECT_ATTRIBUTE_PGCUSTOMERUNITLABELING);
					//Added by DSM(Sogeti)-2018x.0 for PDF Views Defect #24419 - Starts
					strCUUnitLable = strCUUnitLable.replaceAll("[<]","#LESS_THAN");
					//Added by DSM(Sogeti)-2018x.0 for PDF Views Defect #24419 - Ends
					strUNNumber = (String) mpAttributeInfo.get(pgV3Constants.SELECT_ATTRIBUTE_PGPUNNUMBER);
					//Added by DSM(Sogeti)-2018x.0 for PDF Views Defect #24419 - Starts
					strUNNumber = strUNNumber.replaceAll("[<]","#LESS_THAN");
					//Added by DSM(Sogeti)-2018x.0 for PDF Views Defect #24419 - Ends
					strProperShippingName = (String) mpAttributeInfo.get(pgV3Constants.SELECT_ATTRIBUTE_PGPROPERSHIPPINGNAME);
					//Added by DSM(Sogeti)-2018x.0 for PDF Views Defect #24419 - Starts
					strProperShippingName = strProperShippingName.replaceAll("[<]","#LESS_THAN");
					//Added by DSM(Sogeti)-2018x.0 for PDF Views Defect #24419 - Ends
					strHazardClass = (String) mpAttributeInfo.get(pgV3Constants.SELECT_ATTRIBUTE_PGHAZARDCLASS);
					strPackingGroup = (String) mpAttributeInfo.get(pgV3Constants.SELECT_ATTRIBUTE_PGPACKINGGROUP);
					strPGPCBByVWMiscibleAlcohols = (String) mpAttributeInfo.get(pgV3Constants.SELECT_ATTRIBUTE_PGPCBBYVWMISCIBLEALOHOLS);
					strPGDoesBaseProductHaveAFirePoint = (String) mpAttributeInfo.get(pgV3Constants.SELECT_ATTRIBUTE_PGPRODUCTHAVEAFIREPOINT);
					strPGAerosolCanCorrosiveToMetals = (String) mpAttributeInfo.get(pgV3Constants.SELECT_ATTRIBUTE_PGAEROSOLCANCORROSIVETOMETALS);
					strPGFlammableOrNonFlammable = (String) mpAttributeInfo.get(pgV3Constants.SELECT_ATTRIBUTE_PGFLAMMABLEORNONFLAMMABLE);

					sbChemicalDataInfo.append("<TR><TD><TABLE class=\"WordWrappdf\" cellspacing=\"0\" width=\"990px\" id=\"pgFormulatedProductTable\">");
					sbChemicalDataInfo.append("<thead>");
					sbChemicalDataInfo.append("<TR><TD colspan='2' class=\"new\" ><font size='4'><b>Chemical and Physical Properties<br/></b></font></TD></TR>");
					sbChemicalDataInfo.append("</thead>");

					sbChemicalDataInfo.append("<TR>");
					sbChemicalDataInfo.append("<TD align='left' width=\"250px\"><B>Color</B></TD>");
					sbChemicalDataInfo.append("<TD align='left' width=\"250px\">"+validateString1(strColor)+"</TD>");
					sbChemicalDataInfo.append("<TD align='left' width=\"250px\"><B>Color Intensity</B></TD>");
					sbChemicalDataInfo.append("<TD align='left' width=\"250px\">"+validateString1(strColorIntensity)+"</TD>");
					sbChemicalDataInfo.append("</TR>");

					sbChemicalDataInfo.append("<TR>");
					sbChemicalDataInfo.append("<TD align='left' width=\"250px\"><B>Odour</B></TD>");
					sbChemicalDataInfo.append("<TD align='left' width=\"250px\">"+validateString1(strOdour)+"</TD>");
					sbChemicalDataInfo.append("<TD align='left' width=\"250px\"><B>Content Conductivity (mS/cm)</B></TD>");
					sbChemicalDataInfo.append("<TD align='left' width=\"250px\">"+validateString1(strContentConductivity)+"</TD>");
					sbChemicalDataInfo.append("</TR>");

					sbChemicalDataInfo.append("<TR>");
					sbChemicalDataInfo.append("<TD align='left' width=\"250px\"><B>Corrosive to Metals (Yes/No)</B></TD>");
					sbChemicalDataInfo.append("<TD align='left' width=\"250px\">"+validateString1(strCorrosiveMetal)+"</TD>");
					sbChemicalDataInfo.append("<TD align='left' width=\"250px\"><B>Sustain Combustion (Yes/No)</B></TD>");
					sbChemicalDataInfo.append("<TD align='left' width=\"250px\">"+validateString1(strSustainCombustion)+"</TD>");
					sbChemicalDataInfo.append("</TR>");

					sbChemicalDataInfo.append("<TR>");
					sbChemicalDataInfo.append("<TD align='left' width=\"250px\"><B>Oxidizer (%)</B></TD>");
					sbChemicalDataInfo.append("<TD align='left' width=\"250px\">"+validateString1(strOxidizer)+"</TD>");
					sbChemicalDataInfo.append("<TD align='left' width=\"250px\"><B>% by Volume ethanol and/or propanol (%)</B></TD>");
					sbChemicalDataInfo.append("<TD align='left' width=\"250px\">"+validateString1(strPGByVolume)+"</TD>");
					sbChemicalDataInfo.append("</TR>");

					sbChemicalDataInfo.append("<TR>");
					sbChemicalDataInfo.append("<TD align='left' width=\"250px\"><B>% by Weight emulsified Liquified flammable gas propellant (%)</B></TD>");
					sbChemicalDataInfo.append("<TD align='left' width=\"250px\">"+validateString1(strPGByWeight)+"</TD>");
					sbChemicalDataInfo.append("<TD align='left' width=\"250px\"><B>Propellant emulsified for life of product (Yes/No)</B></TD>");
					sbChemicalDataInfo.append("<TD align='left' width=\"250px\">"+validateString1(strPropellantEmulsProd)+"</TD>");
					sbChemicalDataInfo.append("</TR>");

					sbChemicalDataInfo.append("<TR>");
					sbChemicalDataInfo.append("<TD align='left' width=\"250px\"><B>Propellant is non-flammable (Yes/No)</B></TD>");
					sbChemicalDataInfo.append("<TD align='left' width=\"250px\">"+validateString1(strPropellantNonflame)+"</TD>");
					sbChemicalDataInfo.append("<TD align='left' width=\"250px\"><B>WT % Parameterized</B></TD>");
					sbChemicalDataInfo.append("<TD align='left' width=\"250px\">"+validateString1(strWTParameterized)+"</TD>");
					sbChemicalDataInfo.append("</TR>");

					sbChemicalDataInfo.append("<TR>");
					sbChemicalDataInfo.append("<TD align='left' width=\"250px\"><B>Kst - Dust Deflagration Index (bar *m/sec)</B></TD>");
					sbChemicalDataInfo.append("<TD align='left' width=\"250px\">"+validateString1(strKstDustDeflagrationIndex)+"</TD>");
					sbChemicalDataInfo.append("<TD align='left' width=\"250px\"><B>pmax - max explosion pressure (bar)</B></TD>");
					sbChemicalDataInfo.append("<TD align='left' width=\"250px\">"+validateString1(strPMAXExplosionPressure)+"</TD>");
					sbChemicalDataInfo.append("</TR>");

					sbChemicalDataInfo.append("<TR>");
					sbChemicalDataInfo.append("<TD align='left' width=\"250px\"><B>Closed Cup Flashpoint(C)</B></TD>");
					sbChemicalDataInfo.append("<TD align='left' width=\"250px\">"+validateString1(strClosedCupFlashpoint)+"</TD>");
					sbChemicalDataInfo.append("<TD align='left' width=\"250px\"><B>Closed Cup Flashpoint Value (C) [Maximum Value]</B></TD>");
					sbChemicalDataInfo.append("<TD align='left' width=\"250px\">"+validateString1(strClosedFlashpointValue)+"</TD>");
					sbChemicalDataInfo.append("</TR>");

					sbChemicalDataInfo.append("<TR>");
					sbChemicalDataInfo.append("<TD align='left' width=\"250px\"><B>Boiling Point (C)</B></TD>");
					sbChemicalDataInfo.append("<TD align='left' width=\"250px\">"+validateString1(strBoiling_Point)+"</TD>");
					sbChemicalDataInfo.append("<TD align='left' width=\"250px\"><B>Boiling Point Value (C)</B></TD>");
					sbChemicalDataInfo.append("<TD align='left' width=\"250px\">"+validateString1(strBolingPointValue)+"</TD>");
					sbChemicalDataInfo.append("</TR>");

					sbChemicalDataInfo.append("<TR>");
					sbChemicalDataInfo.append("<TD align='left' width=\"250px\"><B>Does the Product Sustain Combustion? (Yes/No)</B></TD>");
					sbChemicalDataInfo.append("<TD align='left' width=\"250px\">"+validateString1(strDoesPdtCombustion)+"</TD>");
					sbChemicalDataInfo.append("<TD align='left' width=\"250px\"><B>Does the Product Contain an Oxidizer as a Raw Material? (Yes/No)</B></TD>");
					sbChemicalDataInfo.append("<TD align='left' width=\"250px\">"+validateString1(strPGProductOxidizer)+"</TD>");
					sbChemicalDataInfo.append("</TR>");

					sbChemicalDataInfo.append("<TR>");
					sbChemicalDataInfo.append("<TD align='left' width=\"250px\"><B>Is the Oxidizer Sodium Percarbonate #LESS_THAN 60% (Yes/No)</B></TD>");
					sbChemicalDataInfo.append("<TD align='left' width=\"250px\">"+validateString1(strOxidizerNaPerCa)+"</TD>");
					sbChemicalDataInfo.append("<TD align='left' width=\"250px\"><B>Is the Oxidizer Hydrogen Peroxide #LESS_THAN 8% (Yes/No)</B></TD>");
					sbChemicalDataInfo.append("<TD align='left' width=\"250px\">"+validateString1(strHydrogenPeroxide)+"</TD>");
					sbChemicalDataInfo.append("</TR>");

					sbChemicalDataInfo.append("<TR>");
					sbChemicalDataInfo.append("<TD align='left' width=\"250px\"><B>Does the Product have the Potential to Increase the Burning Rate or Intensity of a Combustible Substance? (Yes/No)</B></TD>");
					sbChemicalDataInfo.append("<TD align='left' width=\"250px\">"+validateString1(strDoesPdtCombustion)+"</TD>");
					sbChemicalDataInfo.append("<TD align='left' width=\"250px\"><B>Does the Product Contain an Organic Peroxide as a Raw Material? (Yes/No)</B></TD>");
					sbChemicalDataInfo.append("<TD align='left' width=\"250px\">"+validateString1(strOrganicPeroxide)+"</TD>");
					sbChemicalDataInfo.append("</TR>");

					sbChemicalDataInfo.append("<TR>");
					sbChemicalDataInfo.append("<TD align='left' width=\"250px\"><B>Available Oxygen Content (%)</B></TD>");
					sbChemicalDataInfo.append("<TD align='left' width=\"250px\">"+validateString1(strAvailableOxyContent)+"</TD>");
					sbChemicalDataInfo.append("<TD align='left' width=\"250px\"><B>Kinematic Viscosity (mm2/s)</B></TD>");
					sbChemicalDataInfo.append("<TD align='left' width=\"250px\">"+validateString1(strKinematicViscosity)+"</TD>");
					sbChemicalDataInfo.append("</TR>");

					sbChemicalDataInfo.append("<TR>");
					sbChemicalDataInfo.append("<TD align='left' width=\"250px\"><B>Relative Density</B></TD>");
					sbChemicalDataInfo.append("<TD align='left' width=\"250px\">"+validateString1(strRelativeDensityOrSpecificGravity)+"</TD>");
					sbChemicalDataInfo.append("<TD align='left' width=\"250px\"><B>Evaporation Rate</B></TD>");
					sbChemicalDataInfo.append("<TD align='left' width=\"250px\">"+validateString1(strEvpRate)+"</TD>");
					sbChemicalDataInfo.append("</TR>");

					sbChemicalDataInfo.append("<TR>");
					sbChemicalDataInfo.append("<TD align='left' width=\"250px\"><B>pH availability</B></TD>");
					sbChemicalDataInfo.append("<TD align='left' width=\"250px\">"+validateString1(strPHAvalibility)+"</TD>");
					sbChemicalDataInfo.append("<TD align='left' width=\"250px\"><B>pH</B></TD>");
					sbChemicalDataInfo.append("<TD align='left' width=\"250px\">"+validateString1(str_PH)+"</TD>");
					sbChemicalDataInfo.append("</TR>");

					sbChemicalDataInfo.append("<TR>");
					sbChemicalDataInfo.append("<TD align='left' width=\"250px\"><B>pH Dilution</B></TD>");
					sbChemicalDataInfo.append("<TD align='left' width=\"250px\">"+validateString1(strDilution)+"</TD>");
					sbChemicalDataInfo.append("<TD align='left' width=\"250px\"><B>Reserve Alkalinity (%)</B></TD>");
					sbChemicalDataInfo.append("<TD align='left' width=\"250px\">"+validateString1(strResAlknity)+"</TD>");
					sbChemicalDataInfo.append("</TR>");

					sbChemicalDataInfo.append("<TR>");
					sbChemicalDataInfo.append("<TD align='left' width=\"250px\"><B>Reserve Acidity (%)</B></TD>");
					sbChemicalDataInfo.append("<TD align='left' width=\"250px\">"+validateString1(strResAcdity)+"</TD>");
					sbChemicalDataInfo.append("<TD align='left' width=\"250px\"><B>Is the Liquid Corrosive to Metal (Aluminum or Carbon Steel)?</B></TD>");
					sbChemicalDataInfo.append("<TD align='left' width=\"250px\">"+validateString1(strLiquidCorrMetal)+"</TD>");
					sbChemicalDataInfo.append("</TR>");

					sbChemicalDataInfo.append("<TR>");
					sbChemicalDataInfo.append("<TD align='left' width=\"250px\"><B>Technical Basis for the Corrosive to Metals Determination Provided.</B></TD>");
					sbChemicalDataInfo.append("<TD align='left' width=\"250px\">"+validateString1(strTechCorrMetal)+"</TD>");
					sbChemicalDataInfo.append("<TD align='left' width=\"250px\"><B>Is a Flammable Liquid absorbed or Contained within the solid?</B></TD>");
					sbChemicalDataInfo.append("<TD align='left' width=\"250px\">"+validateString1(strFlammabelLiq)+"</TD>");
					sbChemicalDataInfo.append("</TR>");

					sbChemicalDataInfo.append("<TR>");
					sbChemicalDataInfo.append("<TD align='left' width=\"250px\"><B>Burn Rate, mm/sec [maximum tested value]</B></TD>");
					sbChemicalDataInfo.append("<TD align='left' width=\"250px\">"+validateString1(strBurnRate)+"</TD>");
					sbChemicalDataInfo.append("<TD align='left' width=\"250px\"><B>Does the product have any self-reactive properties or is it thermally unstable?</B></TD>");
					sbChemicalDataInfo.append("<TD align='left' width=\"250px\">"+validateString1(strProdReactiveProp)+"</TD>");
					sbChemicalDataInfo.append("</TR>");

					sbChemicalDataInfo.append("<TR>");
					sbChemicalDataInfo.append("<TD align='left' width=\"250px\"><B>Heat of Decomposition (kJ/g)</B></TD>");
					sbChemicalDataInfo.append("<TD align='left' width=\"250px\">"+validateString1(strHeatOfDecomposition)+"</TD>");
					sbChemicalDataInfo.append("<TD align='left' width=\"250px\"><B>Self-Accelerating Decomposition Temperature (SADT) (C) [maximum tested value]</B></TD>");
					sbChemicalDataInfo.append("<TD align='left' width=\"250px\">"+validateString1(strSelfAccelDecompTemp)+"</TD>");
					sbChemicalDataInfo.append("</TR>");

					sbChemicalDataInfo.append("<TR>");
					sbChemicalDataInfo.append("<TD align='left' width=\"250px\"><B>Heat of Combustion (kJ/g) [calculated or tested value]</B></TD>");
					sbChemicalDataInfo.append("<TD align='left' width=\"250px\">"+validateString1(strHeatOfCombustion)+"</TD>");
					sbChemicalDataInfo.append("<TD align='left' width=\"250px\"><B>Can Construction</B></TD>");
					sbChemicalDataInfo.append("<TD align='left' width=\"250px\">"+validateString1(strCanConst)+"</TD>");
					sbChemicalDataInfo.append("</TR>");

					sbChemicalDataInfo.append("<TR>");
					sbChemicalDataInfo.append("<TD align='left' width=\"250px\"><B>Gauge Pressure @ 130F/55C (kPa)[maximum value</B></TD>");
					sbChemicalDataInfo.append("<TD align='left' width=\"250px\">"+validateString1(strGaugePressure)+"</TD>");
					sbChemicalDataInfo.append("<TD align='left' width=\"250px\"><B>Aerosol Type</B></TD>");
					sbChemicalDataInfo.append("<TD align='left' width=\"250px\">"+validateString1(strAerosolType)+"</TD>");
					sbChemicalDataInfo.append("</TR>");

					sbChemicalDataInfo.append("<TR>");
					sbChemicalDataInfo.append("<TD align='left' width=\"250px\"><B>Is aerosol test data needed?</B></TD>");
					sbChemicalDataInfo.append("<TD align='left' width=\"250px\">"+validateString1(strAerosolTestData)+"</TD>");
					sbChemicalDataInfo.append("<TD align='left' width=\"250px\"><B>Ignition Distance (cm) [maximum tested value]</B></TD>");
					sbChemicalDataInfo.append("<TD align='left' width=\"250px\">"+validateString1(strIgnitionDistance)+"</TD>");
					sbChemicalDataInfo.append("</TR>");

					sbChemicalDataInfo.append("<TR>");
					sbChemicalDataInfo.append("<TD align='left' width=\"250px\"><B>Enclosed Space Ignition Time Equivalent (s/m3) [maximum tested value</B></TD>");
					sbChemicalDataInfo.append("<TD align='left' width=\"250px\">"+validateString1(strEnclosedSpaceIgnition)+"</TD>");
					sbChemicalDataInfo.append("<TD align='left' width=\"250px\"><B>Foam Flammability Test: Flame Height (cm) [maximum tested value]</B></TD>");
					sbChemicalDataInfo.append("<TD align='left' width=\"250px\">"+validateString1(strFlameHt)+"</TD>");
					sbChemicalDataInfo.append("</TR>");

					sbChemicalDataInfo.append("<TR>");
					sbChemicalDataInfo.append("<TD align='left' width=\"250px\"><B>Foam Flammability Test: Flame Duration (sec) [maximum tested value]</B></TD>");
					sbChemicalDataInfo.append("<TD align='left' width=\"250px\">"+validateString1(strFlameDuration)+"</TD>");
					sbChemicalDataInfo.append("<TD align='left' width=\"250px\"><B>Vapor Pressure (pascals)</B></TD>");
					sbChemicalDataInfo.append("<TD align='left' width=\"250px\">"+validateString1(strVaporPressure)+"</TD>");
					sbChemicalDataInfo.append("</TR>");

					sbChemicalDataInfo.append("<TR>");
					sbChemicalDataInfo.append("<TD align='left' width=\"250px\"><B>Vapor Density</B></TD>");
					sbChemicalDataInfo.append("<TD align='left' width=\"250px\">"+validateString1(strVaporDensity)+"</TD>");
					sbChemicalDataInfo.append("<TD align='left' width=\"250px\"><B>Are the Contents of the aerosol can Corrosive to Metals (Aluminum or Carbon Steel)?</B></TD>");
					sbChemicalDataInfo.append("<TD align='left' width=\"250px\">"+validateString1(strPGAerosolCanCorrosiveToMetals)+"</TD>");
					sbChemicalDataInfo.append("</TR>");

					sbChemicalDataInfo.append("<TR>");
					sbChemicalDataInfo.append("<TD align='left' width=\"250px\"><B>Conductivity of the contents in the aerosol can (microsiemens/cm)</B></TD>");
					sbChemicalDataInfo.append("<TD align='left' width=\"250px\">"+validateString1(strCondAerosol)+"</TD>");
					sbChemicalDataInfo.append("<TD align='left' width=\"250px\"><B>Is the propellant flammable or nonflammable?</B></TD>");
					sbChemicalDataInfo.append("<TD align='left' width=\"250px\">"+validateString1(strPGFlammableOrNonFlammable)+"</TD>");
					sbChemicalDataInfo.append("</TR>");

					sbChemicalDataInfo.append("<TR>");
					sbChemicalDataInfo.append("<TD align='left' width=\"250px\"><B>Percent by weight of flammable propellant in aerosol container (%)</B></TD>");
					sbChemicalDataInfo.append("<TD align='left' width=\"250px\">"+validateString1(strPerFlamePropAerosol)+"</TD>");
					sbChemicalDataInfo.append("<TD align='left' width=\"250px\"><B>Does the base product contain #LESS_THAN= 50% water by volume AND contain #LESS_THAN=50% by volume water-miscible alcohols?</B></TD>");
					sbChemicalDataInfo.append("<TD align='left' width=\"250px\">"+validateString1(strPGPCBByVWMiscibleAlcohols)+"</TD>");
					sbChemicalDataInfo.append("</TR>");

					sbChemicalDataInfo.append("<TR>");
					sbChemicalDataInfo.append("<TD align='left' width=\"250px\"><B>Does the base product contain >= 50% water AND #LESS_THAN= 15.8% by weight (20% by volume) ethanol plus isopropanol?</B></TD>");
					sbChemicalDataInfo.append("<TD align='left' width=\"250px\">"+validateString1(strBaseEthanolProponal)+"</TD>");
					sbChemicalDataInfo.append("<TD align='left' width=\"250px\"><B>Does the base product (no propellant) Sustain Combustion?</B></TD>");
					sbChemicalDataInfo.append("<TD align='left' width=\"250px\">"+validateString1(strDoesPdtCombustion)+"</TD>");
					sbChemicalDataInfo.append("</TR>");

					sbChemicalDataInfo.append("<TR>");
					sbChemicalDataInfo.append("<TD align='left' width=\"250px\"><B>Does the base product have a Fire Point?</B></TD>");
					sbChemicalDataInfo.append("<TD align='left' width=\"250px\">"+validateString1(strPGDoesBaseProductHaveAFirePoint)+"</TD>");
					sbChemicalDataInfo.append("<TD align='left' width=\"250px\"><B>Does the base product contain >= 50% water AND #LESS_THAN=4% by weight of an emulsified liquefied non-flammable gas propellant?</B></TD>");
					sbChemicalDataInfo.append("<TD align='left' width=\"250px\">"+validateString1(strWeightEmulsified)+"</TD>");
					sbChemicalDataInfo.append("</TR>");

					sbChemicalDataInfo.append("<TR>");
					sbChemicalDataInfo.append("<TD align='left' width=\"250px\"><B>Does the base product contain >= 50% water AND #LESS_THAN=4% by weight of an emulsified liquefied flammable gas propellant that remains emulsified for the life of the product?</B></TD>");
					sbChemicalDataInfo.append("<TD align='left' width=\"250px\">"+validateString1(strWtEmulsifiedLiq)+"</TD>");
					sbChemicalDataInfo.append("<TD align='left' width=\"250px\"></TD>");
					sbChemicalDataInfo.append("<TD align='left' width=\"250px\"></TD>");
					sbChemicalDataInfo.append("</TR>");
					sbChemicalDataInfo.append("</TABLE></TD></TR>");
					mlStabilityResultList.clear();
				}
			}
			}
			catch (Exception e){
			e.printStackTrace();
			throw new MatrixException(e);
			}
		long endTime = new Date().getTime();
		System.out.println("Total Time has taken by the  getChemicalAndPhisicalDataNew Method is-->"+(endTime-startTime));
		return sbChemicalDataInfo;
		}*/
    //Commented for 2018x.2.1 FOP requirement Ends

    //Added by DSM(Sogeti)-2018x.1 for PDF Views Requirements - Starts
    /**
     * Retrieve Characteristics Table Data for CATIA Originated Parts
     * @param context
     * @param args
     * @return
     * @throws MatrixException
     */
    //Method modified by DSM(Sogeti) 2018x.5 PDF View Requirement and Defect 33504 & 19968
    private StringBuilder getCharacteristicsData(Context context,String strObjectId) throws Exception{
        long startTime = new Date().getTime();
        StringBuilder sbCharacteristicsInfo = new StringBuilder();
        DomainObject domainObject = null;
        StringList slTMList = new StringList(1);
        Map mpCharInfo = null;
        Map mpCharConnected = null;
        DomainObject domCharObject = null;
        boolean isPushContext = false;
        try{
            if(validateString(strObjectId)){
                domainObject= DomainObject.newInstance(context,strObjectId);
                String strAuthApplication = domainObject.getInfo(context, pgV3Constants.SELECT_ATTRIBUTE_PGAUTHORINGAPPLICATION);

                if(UIUtil.isNotNullAndNotEmpty(strAuthApplication) && pgV3Constants.RANGE_PGAUTHORINGAPPLICATION_LPD.equalsIgnoreCase(strAuthApplication)){
                    String strId = DomainConstants.EMPTY_STRING;
                    String strChg = DomainConstants.EMPTY_STRING;
                    String strChara = DomainConstants.EMPTY_STRING;
                    String strCharaSpe = DomainConstants.EMPTY_STRING;
                    String strTM = DomainConstants.EMPTY_STRING;
                    String strTMLogic = DomainConstants.EMPTY_STRING;
                    String strOtherTMNumber = DomainConstants.EMPTY_STRING;
                    String strMethodOrigin = DomainConstants.EMPTY_STRING;
                    //Modified by DSM-2018x.5 for PDF Views Defect 34815 - Starts
                    StringBuffer sbReferenceDoc = null;
                    //Modified by DSM-2018x.5 for PDF Views Defect 34815 - Ends
                    String strTsetMethodSpecs = DomainConstants.EMPTY_STRING;
                    String strSampling = DomainConstants.EMPTY_STRING;
                    String strRetestingUOM = DomainConstants.EMPTY_STRING;
                    String strRetesting = DomainConstants.EMPTY_STRING;
                    String strSSubGroup = DomainConstants.EMPTY_STRING;
                    String strPlantTestingLvl = DomainConstants.EMPTY_STRING;
                    String strLowerSpecificationLimit = DomainConstants.EMPTY_STRING;
                    String strLowerRoutineReleaseLimit = DomainConstants.EMPTY_STRING;
                    String strLowerTarget = DomainConstants.EMPTY_STRING;
                    String strTarget = DomainConstants.EMPTY_STRING;
                    String strUpperTarget = DomainConstants.EMPTY_STRING;
                    String strUpperRoutineReleaseLimit = DomainConstants.EMPTY_STRING;
                    String strUpperSpecificationLimit = DomainConstants.EMPTY_STRING;
                    String strDisplayUnit = DomainConstants.EMPTY_STRING;
                    //Added by DSM(Sogeti)-2018x.3 for PDF Views Req# 32858 - Starts
                    String strReportToNearest = DomainConstants.EMPTY_STRING;
                    //String strMeasurementPrecision = DomainConstants.EMPTY_STRING;
                    //Added by DSM(Sogeti)-2018x.3 for PDF Views Req# 32858 - Ends
                    String strReportType = DomainConstants.EMPTY_STRING;
                    String strReleaseCriteria = DomainConstants.EMPTY_STRING;
                    String strBasis = DomainConstants.EMPTY_STRING;
                    String strActionRequiredList = DomainConstants.EMPTY_STRING;
                    String strCharstopgPLICriticalityFactor = DomainConstants.EMPTY_STRING;
                    String strApplication = DomainConstants.EMPTY_STRING;
                    String strPCharstopgPLITestGroup = DomainConstants.EMPTY_STRING;
                    //Modified by DSM(Sogeti)-2018x.3 for PDF Views Req #32861  - Starts
                    String strDescription = DomainConstants.EMPTY_STRING;
                    String strCharacteristicsNotes = DomainConstants.EMPTY_STRING;
                    //Modified by DSM(Sogeti)-2018x.3 for PDF Views Req #32861  - Ends
                    // Added by DSM(Sogeti) for 2018x.5 PDF Views : Starts
                    String strDimension = DomainConstants.EMPTY_STRING;
                    String strCharCategory = DomainConstants.EMPTY_STRING;
                    String strSeqOrder = DomainConstants.EMPTY_STRING;
                    //Added by DSM-2018x.6 July CW for PDF Views Req #39025 : Start
                    String strCategorySpecifics = DomainConstants.EMPTY_STRING;
                    //Added by DSM-2018x.6 July CW for PDF Views Req #39025 : End
                    String strDesignSpecific = DomainConstants.EMPTY_STRING;
                    //Added by DSM-2018x.6 July CW for PDF Views Req #39026 : Start
                    StringList derivedCharObjSelectable = new StringList(3);
                    derivedCharObjSelectable.add(pgV3Constants.SELECT_ATTRIBUTE_TITLE);
                    derivedCharObjSelectable.add(DomainConstants.SELECT_NAME);
                    derivedCharObjSelectable.add(DomainConstants.SELECT_REVISION);
                    //Added by DSM-2018x.6 July CW for PDF Views Req #39026 : End
                    // Added by DSM(Sogeti) for 2018x.5 PDF Views : Ends
                    //Modified by DSM-2018x.5 for PDF Views Defect 34815 - Starts
                    StringList s1ObjSelects = new StringList(pgV3Constants.SELECT_NAME);
                    //Modified by DSM-2018x.5 for PDF Views Defect 34815 - Ends
                    StringList slObjectSelects = new StringList(pgV3Constants.SELECT_ATTRIBUTE_PGCHANGE);
                    slObjectSelects.add(DomainConstants.SELECT_ID);
                    //Modified by DSM-2018x.1 for PDF Views Defect 25865 - Starts
                    slObjectSelects.add(DomainConstants.SELECT_ATTRIBUTE_TITLE);
                    slObjectSelects.add(pgV3Constants.SELECT_ATTRIBUTE_PGROUTINERELEASECRITERIA);
                    //Modified by DSM-2018x.1 for PDF Views Defect 25865 - Ends
                    slObjectSelects.add(pgV3Constants.SELECT_ATTRIBUTE_PGCHARACTERISTICSPECIFICS);
                    slObjectSelects.add(pgV3Constants.SELECT_ATTRIBUTE_PGTMLOGIC);
                    slObjectSelects.add(pgV3Constants.SELECT_ATTRIBUTE_PGMETHODNUMBER);
                    slObjectSelects.add(pgV3Constants.SELECT_ATTRIBUTE_PGMETHODSPECIFICS);
                    slObjectSelects.add(pgV3Constants.SELECT_ATTRIBUTE_PGSAMPLING);
                    slObjectSelects.add(pgV3Constants.SELECT_ATTRIBUTE_PGSUBGROUP);
                    //Commented by DSM(Sogeti)-2018x.2 for PDF Views Defect# 29556 Starts
					/*slObjectSelects.add(pgV3Constants.SELECT_ATTRIBUTE_PGLOWERSPECIFICATIONLIMIT);
					slObjectSelects.add(pgV3Constants.SELECT_ATTRIBUTE_PGLOWERROUTINRRELEASELIMIT);
					slObjectSelects.add(pgV3Constants.SELECT_ATTRIBUTE_PGLOWERTARGET);
					slObjectSelects.add(pgV3Constants.SELECT_ATTRIBUTE_PGTARGET);
					slObjectSelects.add(pgV3Constants.SELECT_ATTRIBUTE_PGUPPERTARGET);
					slObjectSelects.add(pgV3Constants.SELECT_ATTRIBUTE_PGUPPERROUTINERELEASELIMIT);
					slObjectSelects.add(pgV3Constants.SELECT_ATTRIBUTE_PGUPPERSPECIFICATIONLIMIT);*/
                    //Commented by DSM(Sogeti)-2018x.2 for PDF Views Defect# 29556 Ends
                    slObjectSelects.add(pgV3Constants.SELECT_ATTRIBUTE_PGRELEASECRITERIA);
                    slObjectSelects.add(pgV3Constants.SELECT_ATTRIBUTE_PGBASIS);
                    slObjectSelects.add(pgV3Constants.SELECT_ATTRIBUTE_PGAPPLICATION);
                    slObjectSelects.add(pgV3Constants.SELECT_ATTRIBUTE_PGACTIONREQUIRED);
                    slObjectSelects.add(pgV3Constants.SELECT_ATTRIBUTE_PGMETHODORIGIN);
                    slObjectSelects.add(pgV3Constants.SELECT_ATTRIBUTE_PGTESTGROUP);
                    slObjectSelects.add(pgV3Constants.SELECT_ATTRIBUTE_PGRETESTINGUOM);
                    slObjectSelects.add(pgV3Constants.SELECT_ATTRIBUTE_PGPLANTTESTINGRETESTING);
                    slObjectSelects.add(pgV3Constants.SELECT_ATTRIBUTE_PGPLANTTESTING);
                    slObjectSelects.add(pgV3Constants.SELECT_ATTRIBUTE_PGREPORTTYPE);
                    slObjectSelects.add(pgV3Constants.SELECT_ATTRIBUTE_PGCRITICALITYFACTOR);
                    //Commented by DSM(Sogeti)-2018x.2 for PDF Views Defect# 29629/29556 Starts
                    //slObjectSelects.add(pgPDFViewConstants.SELECT_ATTRIBUTE_PGPLMPARAMDISPLAYUNIT);
                    //Commented by DSM(Sogeti)-2018x.2 for PDF Views Defect# 29629/29556 Ends
                    //Added//Commented by DSM(Sogeti)-2018x.3 for PDF Views Req# 32858 - Starts
                    slObjectSelects.add(pgV3Constants.SELECT_ATTRIBUTE_PGREPORTTONEAREST);
                    //slObjectSelects.add(pgPDFViewConstants.SELECT_ATTRIBUTE_PGMEASUREMENTPRECISION);
                    //Added//Commented by DSM(Sogeti)-2018x.3 for PDF Views Req# 32858 - Ends
                    slObjectSelects.add(pgPDFViewConstants.SELECT_ATTRIBUTE_PGTESTMETHODREFDOCGCAS);
                    //Modified by DSM(Sogeti)-2018x.3 for PDF Views Req #32861  - Starts
                    slObjectSelects.add(pgPDFViewConstants.SELECT_ATTRIBUTE_CHAR_NOTES);
                    slObjectSelects.add(pgV3Constants.SELECT_DESCRIPTION);
                    //Modified by DSM(Sogeti)-2018x.3 for PDF Views Req #32861  - Ends
                    // Added by DSM(Sogeti) for 2018x.5 PDF Views : Starts
                    slObjectSelects.add(pgPDFViewConstants.SELECT_ATTRIBUTE_CHARACTERISTICCATEGORY);
                    slObjectSelects.add(pgPDFViewConstants.SELECT_ATTRIBUTE_PGDESIGNSPECIFICS);
                    //Added by DSM-2018x.6 July CW for PDF Views Req #39025 : Start
                    slObjectSelects.add(pgPDFViewConstants.SELECT_ATTRIBUTE_PGCATEGORYSPECIFICS);
                    //Added by DSM-2018x.6 July CW for PDF Views Req #39025 : Start
                    StringList s1RelSelects = new StringList(1);
                    s1RelSelects.add(pgPDFViewConstants.SELECT_ATTRIBUTE_SEQUENCEORDER);
                    StringList s1ChildRelSelects = new StringList(1);
                    s1ChildRelSelects.add(pgV3Constants.SELECT_ID);
                    s1ChildRelSelects.add(pgPDFViewConstants.SELECT_ATTRIBUTE_EVALUATEDCRITERIA);
                    MapList mlCharacteristicsInfo = domainObject.getRelatedObjects(context,
                            pgV3Constants.RELATIONSHIP_PARAMETER_AGGREGATION, //relationshipPattern
                            pgV3Constants.TYPE_PLM_PARAMETER, //typePattern
                            slObjectSelects, //objectSelects
                            s1RelSelects, //relationshipSelects
                            false, //getTo
                            true, //getFrom
                            (short)1, //recurseToLevel
                            null, //objectWhere
                            null, //relationshipWhere
                            0);
                    if(mlCharacteristicsInfo != null && !mlCharacteristicsInfo.isEmpty()){

                        sbCharacteristicsInfo.append("<TR><TD><TABLE class=\"WordWrappdf\" cellspacing=\"0\" width=\"1000px\" id=\"FPPIsATS\">");
                        sbCharacteristicsInfo.append("<thead>");
                        sbCharacteristicsInfo.append("<TR><TD class=\"new\" colspan='10'><B><font size ='4'>Characteristics</font></B></TD></TR>");
                        sbCharacteristicsInfo.append("<TR align='center'><TH width=\"30px\" align=\"center\"><B>Chg.</B></TH>");
                        //Modified table width by DSM-2018x.1.1 for PDF Views Defect 26791 - Updated px Starts
                        //Modified by DSM(Sogeti)-2018x.3 for PDF Views Req #32860  - Starts
                        //Modified by DSM-2018x.6 July CW for PDF Views Req #39025 : Start
                        sbCharacteristicsInfo.append("<TH width=\"80px\" align=\"center\"><B>Category(CA)<BR/>Sequence Order(SO)<BR/>Category Specifics (CS) <BR/>Characteristic (Ch)<BR/>Characteristic Specifics (CHS)<BR/>Design Specifics(DS)</B></TH>");
                        //Modified by DSM-2018x.6 July CW for PDF Views Req #39025 : End
                        //Modified by DSM(Sogeti)-2018x.3 for PDF Views Req #32860  - Starts
                        sbCharacteristicsInfo.append("<TH width=\"140px\" align=\"center\"><B>Test Method (Name)<BR/>Test Method Logic (TML)<BR/>Test Method Origin (TMO) <BR/>Other Test Method Number (TM#)<BR/>Test Method Specifics (Sp)<BR/>Test Method Reference Document Name (TMRDN)</B></TH>");
                        sbCharacteristicsInfo.append("<TH width=\"75px\" align=\"center\"><B>Sampling (SM) <BR/>Subgroup (SG)</B></TH>");
                        sbCharacteristicsInfo.append("<TH width=\"140px\" align=\"center\"><B>Plant Testing Level (LVL)<BR/>Plant Testing:Retesting (RT)<BR/>Retesting Unit of Measure (UoM)<BR/>Dimension(DI) </B></TH>");
                        sbCharacteristicsInfo.append("<TH width=\"330px\" align=\"center\"><B>Lower Specification Limit (LSL)<BR></BR>Lower Routine Release<BR></BR>Limit (LRRL)<BR></BR>Lower Target (LTGT)<BR></BR>Target (TGT)<BR></BR>Upper Target (UTGT)<BR></BR>Upper Routine Release<BR></BR>Limit (URRL)<BR></BR>Upper Specification Limit (USL)</B></TH>");
                        //Modified by DSM(Sogeti)-2018x.3 for PDF Views Req# 32859 & 32859 - Starts
                        sbCharacteristicsInfo.append("<TH width=\"140px\" align=\"center\"><B>Unit of Measure (UoM)<BR/>Report to Nearest (RN)<BR/>Report Type (RT)</B></TH>");
                        //Modified by DSM(Sogeti)-2018x.3 for PDF Views Req# 32859 & 32859 - Ends
                        //Modified by DSM(Sogeti) 2018x.6 July for PDF Views Req #39026 -Start
                        sbCharacteristicsInfo.append("<TH width=\"140px\" align=\"center\"><B>Release Criteria<BR/>(RC)<BR/>Action Required<BR/>(AC)<BR/>Criticality Factor<BR/>(CR)<BR/>Basis (BA)</B></TH>");
                        //Modified by DSM(Sogeti) 2018x.6 July for PDF Views Req #39026 -Start
                        //Modified by DSM(Sogeti)-2018x.3 for PDF Views Req #32861  - Starts
                        //Modified by DSM(Sogeti) 2018x.6 July CW for PDF Views Req #39027 -Starts
                        //Modified by DSM(Sogeti) 2018x.6 July CW for PDF Views Req #39026 -Starts
                        sbCharacteristicsInfo.append("<TH width=\"50px\" align=\"center\"><B>Test Group (TG)<BR/>Notes(N) <BR/> Description(D)<BR/>Application(A)</B></TH>");
                        sbCharacteristicsInfo.append("<TH width=\"50px\" align=\"center\"><B>Characteristic<BR/>Master Title<BR/>(CMT)<BR/>Characteristic<BR/>Master Name<BR/>(CMN)<BR/>Characteristic<BR/>Master Revision<BR/>(CMR)<BR/>Criteria(Cr)<BR/></B></TH>");
                        //Modified by DSM(Sogeti) 2018x.6 July CW for PDF Views Req #39027 -End
                        //Modified by DSM(Sogeti) 2018x.6 July CW for PDF Views Req #39026 -End
                        //Modified by DSM(Sogeti)-2018x.3 for PDF Views Req #32861  - Ends
                        sbCharacteristicsInfo.append("</TR></thead>");
                        sbCharacteristicsInfo.append("<tbody>");
                        //Added by DSM(Sogeti)-2018x.2 for PDF Views Defect# 29556 Starts
                        Characteristic charObjPLMParam = null;
                        //Added by DSM(Sogeti)-2018x.2 for PDF Views Defect# 29556 Ends
                        for (Iterator iterator = mlCharacteristicsInfo.iterator(); iterator.hasNext();){
                            //Added by DSM(Sogeti)-2018x.5 for PDF Views Defect# 34507 Starts
                            StringList slCriteriaTitle = new StringList();
                            StringList slCriteriaSelects = new StringList(2);
                            slCriteriaSelects.add(DomainConstants.SELECT_CURRENT);
                            slCriteriaSelects.add(pgV3Constants.SELECT_ATTRIBUTE_TITLE);
                            slCriteriaSelects.add(DomainConstants.SELECT_ID);
                            slCriteriaSelects.add(DomainConstants.SELECT_IS_LAST);
                            slCriteriaSelects.add(DomainConstants.SELECT_LAST_ID);
                            slCriteriaSelects.add(pgPDFViewConstants.SELECT_LAST_TITLE);

                            String strCriteriaTitle = DomainConstants.EMPTY_STRING;
                            String strCriteriaCurrent = DomainConstants.EMPTY_STRING;
                            Map<String, String> mpCriteria = new HashMap<>();
                            //Added by DSM(Sogeti)-2018x.5 for PDF Views Defect# 34507 Ends
                            //Added by DSM-2018x.5 for PDF Views Defect #34815 - Starts
                            sbReferenceDoc = new StringBuffer();
                            boolean isMulipleDataConnected = false;
                            //Added by DSM-2018x.5 for PDF Views Defect #34815 - Ends
                            String strCriteria = DomainConstants.EMPTY_STRING;
                            //Modified by DSM(Sogeti) 2018x.6 July CW for PDF Views Req #39026 -Starts
                            String strCharMasterTitle = DomainConstants.EMPTY_STRING;
                            String strCharMasterRevision = DomainConstants.EMPTY_STRING;
                            String strCharMasterName = DomainConstants.EMPTY_STRING;
                            //Modified by DSM(Sogeti) 2018x.6 July CW for PDF Views Req #39026 -Starts
                            mpCharInfo = (Map) iterator.next();
                            strId = (String)mpCharInfo.get(pgV3Constants.SELECT_ID);
                            DomainObject dom1= DomainObject.newInstance(context,strId);
                            //Modified by DSM 2018x.6 Dec CW for PDF Views Defect #45428 -Starts
                            MapList mlCharacteristicsConnected = dom1.getRelatedObjects(context,
                                    pgV3Constants.RELATIONSHIP_REFERENCE_DOCUMENT, //relationshipPattern
                                    "*", //typePattern
                                    s1ObjSelects, //objectSelects
                                    null, //relationshipSelects
                                    false, //getTo
                                    true, //getFrom
                                    (short)1, //recurseToLevel
                                    null, //objectWhere
                                    null, //relationshipWhere
                                    0);
                            //Modified by DSM 2018x.6 Dec CW for PDF Views Defect #45428 -End
                            for (Iterator iterator1 = mlCharacteristicsConnected.iterator(); iterator1.hasNext();){
                                mpCharConnected = (Map) iterator1.next();
                                //Added by DSM-2018x.5 for PDF Views Defect #34815 - Starts
                                if(isMulipleDataConnected){
                                    sbReferenceDoc.append("<br/>"+(String)mpCharConnected.get(pgV3Constants.SELECT_NAME));
                                } else{
                                    sbReferenceDoc.append((String)mpCharConnected.get(pgV3Constants.SELECT_NAME));
                                    isMulipleDataConnected = true;
                                }
                                //Added by DSM-2018x.5 for PDF Views Defect #34815 - Ends
                            }
                            //Modified by DSM(Sogeti) 2018x.6 July for PDF Views Req #39026 -Start
                            MapList mlCharacteristicsMasterData = dom1.getRelatedObjects(context,
                                    pgPDFViewConstants.RELATIONSHIP_DERIVEDCHARACTERISTIC, //relationshipPattern
                                    "*", //typePattern
                                    derivedCharObjSelectable, //objectSelects
                                    s1ChildRelSelects, //relationshipSelects
                                    true, //getTo
                                    false, //getFrom
                                    (short)1, //recurseToLevel
                                    null, //objectWhere
                                    null, //relationshipWhere
                                    0);
                            //Modified by DSM(Sogeti) 2018x.6 July for PDF Views Req #39026 - End
                            //context is pushed to get Master Characteristics connected Criteria details
                            ContextUtil.pushContext(context, pgV3Constants.PERSON_USER_AGENT , DomainConstants.EMPTY_STRING, DomainConstants.EMPTY_STRING);
                            isPushContext = true;
                            for (Iterator iterator1 = mlCharacteristicsMasterData.iterator(); iterator1.hasNext();){
                                Map mpMasterData = (Map) iterator1.next();
                                //Added by DSM(Sogeti)-2018x.5 for PDF Views Defect# 34507 Starts
                                Object objCriteriaPhyId = mpMasterData.get(pgPDFViewConstants.SELECT_ATTRIBUTE_EVALUATEDCRITERIA);
                                StringList slCriteriaPhyIds = convertObjectToStringList(objCriteriaPhyId);
                                List<String> processedRevisionList = new ArrayList<>();
                                for (int i = 0; i < slCriteriaPhyIds.size(); i++) {
                                    String strCriteriaPhyId = slCriteriaPhyIds.get(i);
                                    if (UIUtil.isNotNullAndNotEmpty(strCriteriaPhyId)) {
                                        DomainObject domObj = DomainObject.newInstance(context, strCriteriaPhyId);
                                        mpCriteria = domObj.getInfo(context, slCriteriaSelects);
                                        String critLastObjId = (String)mpCriteria.get(DomainConstants.SELECT_LAST_ID);
                                        // if the current criteria object is not of last revision and last revision is not processed already
                                        if(pgV3Constants.FALSE.equalsIgnoreCase((String)mpCriteria.get(DomainConstants.SELECT_IS_LAST))
                                                && !processedRevisionList.contains(critLastObjId)) {
                                            // add the title from last revision
                                            slCriteriaTitle.add(checkLessThanGreaterThan((String)mpCriteria.get(pgPDFViewConstants.SELECT_LAST_TITLE)));
                                            processedRevisionList.add(critLastObjId);

                                        } if(pgV3Constants.TRUE.equalsIgnoreCase((String)mpCriteria.get(DomainConstants.SELECT_IS_LAST))
                                                && !processedRevisionList.contains(critLastObjId)) {
                                            // add the title from current revision which itself is last.
                                            slCriteriaTitle.add(checkLessThanGreaterThan((String) mpCriteria.get(pgV3Constants.SELECT_ATTRIBUTE_TITLE)));
                                            processedRevisionList.add(critLastObjId);
                                        }
                                    }
                                }
                                //Added by DSM(Sogeti)-2018x.5 for PDF Views Defect# 34507 Ends
                                //Modified by DSM(Sogeti) 2018x.6 July for PDF Views Req #39026 - Start
                                strCharMasterTitle= checkLessThanGreaterThan((String)mpMasterData.get(pgV3Constants.SELECT_ATTRIBUTE_TITLE));
                                strCharMasterName= (String) mpMasterData.get(DomainConstants.SELECT_NAME);
                                strCharMasterRevision= (String) mpMasterData.get(DomainConstants.SELECT_REVISION);
                                //Modified by DSM(Sogeti) 2018x.6 July for PDF Views Req #39026 - Start
                            }
                            //context is poped
                            if(isPushContext){
                                ContextUtil.popContext(context);
                                isPushContext = false;
                            }
                            strCharCategory = (String)mpCharInfo.get(pgPDFViewConstants.SELECT_ATTRIBUTE_CHARACTERISTICCATEGORY);
                            strSeqOrder = (String)mpCharInfo.get(pgPDFViewConstants.SELECT_ATTRIBUTE_SEQUENCEORDER);
                            //Modified by DSM(Sogeti) 2018x.6 July for PDF Views Req #39025 - Start
                            strCategorySpecifics=(String)mpCharInfo.get(pgPDFViewConstants.SELECT_ATTRIBUTE_PGCATEGORYSPECIFICS);
                            //Modified by DSM(Sogeti) 2018x.6 July for PDF Views Req #39025 - End
                            strChg = (String)mpCharInfo.get(pgV3Constants.SELECT_ATTRIBUTE_PGCHANGE);
                            //Modified by DSM-2018x.1 for PDF Views Defect 25865 - Starts
                            strChara = (String)mpCharInfo.get(DomainConstants.SELECT_ATTRIBUTE_TITLE);
                            //Modified by DSM-2018x.1 for PDF Views Defect 25865 - Ends
                            strCharaSpe = (String)mpCharInfo.get(pgV3Constants.SELECT_ATTRIBUTE_PGCHARACTERISTICSPECIFICS);

                            sbCharacteristicsInfo.append("<TR>");
                            //Modified by DSM(Sogeti)-2018x.1.1 for PDF Views Defect# 26791  - Starts
                            sbCharacteristicsInfo.append("<TD width=\"30px\" align=\"center\" valign=\"top\">"+validateString1(wrapCharTable(strChg,5))+"</TD>");
                            //Added by DSM(Sogeti)-2018x.3 for PDF Views Req #32861  - Starts
                            strApplication = (String)mpCharInfo.get(pgV3Constants.SELECT_ATTRIBUTE_PGAPPLICATION);

                            if(UIUtil.isNullOrEmpty(strApplication)){
                                strApplication = DomainConstants.EMPTY_STRING;
                            }
                            //Added by DSM(Sogeti)-2018x.3 for PDF Views Req #32861  - Ends
                            strApplication =strApplication.replaceAll("[<]","#LESS_THAN");

                            if(mpCharInfo.containsKey(pgPDFViewConstants.SELECT_ATTRIBUTE_PGDESIGNSPECIFICS))
                                strDesignSpecific=(String)mpCharInfo.get(pgPDFViewConstants.SELECT_ATTRIBUTE_PGDESIGNSPECIFICS);
                            else
                                strDesignSpecific=DomainConstants.EMPTY_STRING;

                            strDesignSpecific =strDesignSpecific.replaceAll("[<]","#LESS_THAN");
                            //Modified by DSM(Sogeti)-2018x.3 for PDF Views Req #32860
                            //Modified by DSM(Sogeti) 2018x.6 July for PDF Views Req #39025 - Start  - Starts
                            sbCharacteristicsInfo.append("<TD width=\"80px\" align=\"left\" valign=\"top\"><B>CA: </B>"+validateString1(wrapCharTable(strCharCategory,15))+"<BR></BR><B>SO: </B>"+validateString1(wrapCharTable(strSeqOrder,15))+"<BR></BR><B>CS: </B>"+validateString1(wrapCharTable(strCategorySpecifics,15))+"<BR></BR><B>Ch: </B>"+validateString1(wrapCharTable(strChara,15))+"<BR></BR><B>CHS: </B>"+validateString1(wrapCharTable(strCharaSpe,15))+"<BR></BR><B>DS: </B>"+validateString1(wrapCharTable(strDesignSpecific,15))+"</TD>");
                            //Modified by DSM(Sogeti) 2018x.6 July for PDF Views Req #39025 - End
                            //Modified by DSM(Sogeti)-2018x.3 for PDF Views Req #32860  - Ends
                            //Modified by DSM(Sogeti)-2018x.1.1 for PDF Views Defect# 26791  - Ends
                            if(UIUtil.isNotNullAndNotEmpty(strId)){
                                domCharObject = DomainObject.newInstance(context,strId);
                                //Modified by DSM-2018x.1 for PDF Views Defect 25865 - Starts
                                slTMList = domCharObject.getInfoList(context, "from["+pgV3Constants.REL_CHARACTERISTICTESTMETHOD+"].to.name");
                                //Modified by DSM-2018x.1 for PDF Views Defect 25865 - Ends
                            }

                            if(slTMList != null && !slTMList.isEmpty()){
                                strTM = slTMList.toString().replaceAll(",","\n").replace("[","").replace("]","");
                            }else{
                                strTM = DomainConstants.EMPTY_STRING;
                            }
                            strTMLogic = (String)mpCharInfo.get(pgV3Constants.SELECT_ATTRIBUTE_PGTMLOGIC);
                            strOtherTMNumber = (String)mpCharInfo.get(pgV3Constants.SELECT_ATTRIBUTE_PGMETHODNUMBER);

                            if(UIUtil.isNullOrEmpty(strOtherTMNumber)){
                                strOtherTMNumber = DomainConstants.EMPTY_STRING;
                            }
                            strOtherTMNumber = strOtherTMNumber.replaceAll("[<]","#LESS_THAN");
                            strTsetMethodSpecs = (String)mpCharInfo.get(pgV3Constants.SELECT_ATTRIBUTE_PGMETHODSPECIFICS);
                            if(UIUtil.isNullOrEmpty(strTsetMethodSpecs)){
                                strTsetMethodSpecs = DomainConstants.EMPTY_STRING;
                            }

                            strTsetMethodSpecs = strTsetMethodSpecs.replaceAll("[<]","#LESS_THAN");
                            strMethodOrigin = (String)mpCharInfo.get(pgV3Constants.SELECT_ATTRIBUTE_PGMETHODORIGIN);
                            //strReferenceDoc = (String)mpCharInfo.get(pgPDFViewConstants.SELECT_ATTRIBUTE_PGTESTMETHODREFDOCGCAS);
                            //Modified by DSM(Sogeti)-2018x.1.1 for PDF Views Defect# 26791 #34815  - Starts
                            sbCharacteristicsInfo.append("<TD width=\"140px\" align=\"left\" valign=\"top\"><B>NAME: </B>"+validateString1(wrapCharTable(strTM,15))+"<BR></BR><B>TML: </B>"+validateString1(wrapCharTable(strTMLogic,15))+"<BR></BR><B>TMO: </B>"+validateString1(wrapCharTable(strMethodOrigin,15))+"<BR></BR><B>TM#: </B>"+validateString1(wrapCharTable(strOtherTMNumber,15))+"<BR></BR><B>SP: </B>"+validateString1(wrapCharTable(strTsetMethodSpecs,15))+"<BR></BR><B>TMRDN: </B>"+validateString1(sbReferenceDoc.toString())+"</TD>");
                            //Modified by DSM(Sogeti)-2018x.1.1 for PDF Views Defect# 26791 #34815 - Ends
                            strSampling = (String)mpCharInfo.get(pgV3Constants.SELECT_ATTRIBUTE_PGSAMPLING);
                            if(UIUtil.isNullOrEmpty(strSampling)){
                                strSampling = DomainConstants.EMPTY_STRING;
                            }

                            strSampling = strSampling.replaceAll("[<]","#LESS_THAN");
                            strRetestingUOM = (String)mpCharInfo.get(pgV3Constants.SELECT_ATTRIBUTE_PGRETESTINGUOM);
                            strRetesting = (String)mpCharInfo.get(pgV3Constants.SELECT_ATTRIBUTE_PGPLANTTESTINGRETESTING);
                            strSSubGroup = (String)mpCharInfo.get(pgV3Constants.SELECT_ATTRIBUTE_PGSUBGROUP);
                            if(UIUtil.isNullOrEmpty(strSSubGroup)){
                                strSSubGroup = DomainConstants.EMPTY_STRING;
                            }
                            strSSubGroup = strSSubGroup.replaceAll("[<]","#LESS_THAN");
                            strPlantTestingLvl = (String)mpCharInfo.get(pgV3Constants.SELECT_ATTRIBUTE_PGPLANTTESTING);

                            //Modified by DSM(Sogeti)-2018x.2 for PDF Views Defect# 29556 Starts
                            //strLowerSpecificationLimit = (String)mpCharInfo.get(pgV3Constants.SELECT_ATTRIBUTE_PGLOWERSPECIFICATIONLIMIT);
                            //strLowerRoutineReleaseLimit = (String)mpCharInfo.get(pgV3Constants.SELECT_ATTRIBUTE_PGLOWERROUTINRRELEASELIMIT);
                            //strLowerTarget = (String)mpCharInfo.get(pgV3Constants.SELECT_ATTRIBUTE_PGLOWERTARGET);
                            //Modified by DSM-2018x.1 for PDF Views Defect 25865 - Starts
                            //strTarget = (String)mpCharInfo.get(pgV3Constants.SELECT_ATTRIBUTE_PGSTRINGPARAMETERVALUE);
                            //Modified by DSM-2018x.1 for PDF Views Defect 25865 - Ends
                            //strUpperTarget = (String)mpCharInfo.get(pgV3Constants.SELECT_ATTRIBUTE_PGUPPERTARGET);
                            //strUpperRoutineReleaseLimit = (String)mpCharInfo.get(pgV3Constants.SELECT_ATTRIBUTE_PGUPPERROUTINERELEASELIMIT);
                            //strUpperSpecificationLimit = (String)mpCharInfo.get(pgV3Constants.SELECT_ATTRIBUTE_PGUPPERSPECIFICATIONLIMIT);
                            if(UIUtil.isNotNullAndNotEmpty(strId)){
                                charObjPLMParam = new Characteristic(context,strId,true);
                                strLowerTarget = charObjPLMParam.getMinimalValue(context);
                                strTarget = charObjPLMParam.getNominalValue(context);
                                strUpperTarget = charObjPLMParam.getMaximalValue(context);
                                strUpperRoutineReleaseLimit = charObjPLMParam.getUpperRoutineReleaseLimit(context);
                                strUpperSpecificationLimit = charObjPLMParam.getUpperSpecificationLimit(context);
                                strLowerSpecificationLimit = charObjPLMParam.getLowerSpecificationLimit(context);
                                strLowerRoutineReleaseLimit = charObjPLMParam.getLowerRoutineReleaseLimit(context);
                                strDisplayUnit = charObjPLMParam.getDisplayUnit();
                                strDimension = charObjPLMParam.getDimension();
                                if(UIUtil.isNotNullAndNotEmpty(strDimension)){
                                    strDimension = FrameworkUtil.findAndReplace(strDimension, "Parameter", " ");
                                    strDimension = strDimension.substring(0,1).toUpperCase()+strDimension.substring(1).toLowerCase();
                                }
                            }
                            //Modified by DSM(Sogeti)-2018x.2 for PDF Views Defect# 29556 Ends
                            //Modified by DSM(Sogeti)-2018x.1.1 for PDF Views Defect# 26791  - Starts
                            sbCharacteristicsInfo.append("<TD width=\"75px\" align=\"left\" valign=\"top\"><B>SM: </B>"+validateString1(wrapCharTable(strSampling,15))+"<BR></BR><B>SG: </B>"+validateString1(wrapCharTable(strSSubGroup,15))+"</TD>");

                            sbCharacteristicsInfo.append("<TD width=\"140px\" align=\"left\" valign=\"top\"><B>LVL: </B>"+validateString1(wrapCharTable(strPlantTestingLvl,10))+"<BR></BR><B>RT: </B>"+validateString1(wrapCharTable(strRetesting,10))+"<BR></BR><B>UoM: </B>"+validateString1(wrapCharTable(strRetestingUOM,10))+"<BR></BR><B>DI: </B>"+validateString1(wrapCharTable(strDimension,10))+"</TD>");
                            //Modified by DSM(Sogeti)-2018x.1.1 for PDF Views Defect# 26791  - Ends
                            //Modified by DSM(Sogeti)-2018x.1.1 for PDF Views Defect# 26791  - Starts
                            sbCharacteristicsInfo.append("<TD width=\"330px\" align=\"left\" valign=\"top\"><B>LSL: </B>"+validateString1(wrapCharTable(strLowerSpecificationLimit,10))+"<BR></BR><B>LRRL: </B>"+validateString1(wrapCharTable(strLowerRoutineReleaseLimit,10))+"<BR></BR><B>LTGT: </B>"+validateString1(wrapCharTable(strLowerTarget,10))+"<BR></BR><B>TGT: </B>"+validateString1(wrapCharTable(strTarget,10))+"<BR></BR><B>UTGT: </B>"+validateString1(wrapCharTable(strUpperTarget,10))+"<BR></BR><B>URRL: </B>"+validateString1(wrapCharTable(strUpperRoutineReleaseLimit,10))+"<BR></BR><B>USL: </B>"+validateString1(wrapCharTable(strUpperSpecificationLimit,10))+"</TD>");
                            //Modified by DSM(Sogeti)-2018x.1.1 for PDF Views Defect# 26791  - Ends
                            //Commented by DSM(Sogeti)-2018x.2 for PDF Views Defect# 29629/29556 Starts
                            //strDisplayUnit = (String)mpCharInfo.get(pgPDFViewConstants.SELECT_ATTRIBUTE_PGPLMPARAMDISPLAYUNIT);
                            //Commented by DSM(Sogeti)-2018x.2 for PDF Views Defect# 29629/29556 Ends
                            //Added//Commented by DSM(Sogeti)-2018x.3 for PDF Views Req# 32858 - Starts
                            strReportToNearest  = (String)mpCharInfo.get(pgV3Constants.SELECT_ATTRIBUTE_PGREPORTTONEAREST);
                            //strMeasurementPrecision = (String)mpCharInfo.get(pgPDFViewConstants.SELECT_ATTRIBUTE_PGMEASUREMENTPRECISION);
                            //Added//Commented by DSM(Sogeti)-2018x.3 for PDF Views Req# 32858 - Ends
                            strReportType = (String)mpCharInfo.get(pgV3Constants.SELECT_ATTRIBUTE_PGREPORTTYPE);
                            //Modified by DSM(Sogeti)-2018x.1.1 for PDF Views Defect# 26791  - Starts
                            //Modified by DSM(Sogeti)-2018x.3 for PDF Views Req# 32858 & 32859 - Starts
                            sbCharacteristicsInfo.append("<TD width=\"140px\" align=\"left\" valign=\"top\"><B>UoM: </B>"+validateString1(wrapCharTable(strDisplayUnit,12))+"<BR></BR><B>RN: </B>"+validateString1(wrapCharTable(strReportToNearest,12))+"<BR></BR><B>RT: </B>"+validateString1(wrapCharTable(strReportType,12))+"</TD>");
                            //Modified by DSM(Sogeti)-2018x.3 for PDF Views Req# 32858 & 32859 - Ends
                            //Modified by DSM(Sogeti)-2018x.1.1 for PDF Views Defect# 26791  - Ends
                            //Modified by DSM-2018x.1 for PDF Views Defect 25865 - Starts
                            //Modified by DSM(Sogeti)-2018x.2 for PDF Views Defect# 29556 Starts
                            //strReleaseCriteria = (String)mpCharInfo.get(pgV3Constants.SELECT_ATTRIBUTE_PGROUTINERELEASECRITERIA);
                            strReleaseCriteria = (String)mpCharInfo.get(pgV3Constants.SELECT_ATTRIBUTE_PGRELEASECRITERIA);
                            //Modified by DSM(Sogeti)-2018x.2 for PDF Views Defect# 29556 Ends
                            //Modified by DSM-2018x.1 for PDF Views Defect 25865 - Ends

                            if(UIUtil.isNullOrEmpty(strReleaseCriteria)){
                                strReleaseCriteria = DomainConstants.EMPTY_STRING;
                            }

                            strReleaseCriteria =strReleaseCriteria.replaceAll("[<]","#LESS_THAN");
                            strReleaseCriteria =strReleaseCriteria.replaceAll("[>]","#GREATER_THAN");
                            //Modified by DSM(Sogeti)-2018x.1.1 for PDF Views Defect# 26791  - Starts
                            //Modified by DSM(Sogeti) 2018x.6 July for PDF Views Req #39026 -Start
//							sbCharacteristicsInfo.append("<TD width=\"140px\" align=\"left\" valign=\"top\"><B>RC: </B>"+validateString1(wrapCharTable(strReleaseCriteria,15))+"</TD>");
                            //Modified by DSM(Sogeti) 2018x.6 July for PDF Views Req #39026 - End
                            //Modified by DSM(Sogeti)-2018x.1.1 for PDF Views Defect# 26791  - Ends
                            strBasis = (String)mpCharInfo.get(pgV3Constants.SELECT_ATTRIBUTE_PGBASIS);

                            if(UIUtil.isNullOrEmpty(strBasis)){
                                strBasis = DomainConstants.EMPTY_STRING;
                            }

                            strBasis =strBasis.replaceAll("[<]","#LESS_THAN");

                            strActionRequiredList=(String)mpCharInfo.get(pgV3Constants.SELECT_ATTRIBUTE_PGACTIONREQUIRED);
                            strCharstopgPLICriticalityFactor=(String)mpCharInfo.get(pgV3Constants.SELECT_ATTRIBUTE_PGCRITICALITYFACTOR);
                            //Modified by DSM(Sogeti)-2018x.1.1 for PDF Views Defect# 26791  - Starts
                            //Modified by DSM(Sogeti) 2018x.6 July for PDF Views Req #39026 -Start
                            sbCharacteristicsInfo.append("<TD width=\"140px\" align=\"left\" valign=\"top\">"+"<B>RC: </B>"+validateString1(wrapCharTable(strReleaseCriteria,15))+"<BR></BR><B>AC: </B>"+validateString1(wrapCharTable(strActionRequiredList,15))+"<BR></BR><B>CR: </B>"+validateString1(wrapCharTable(strCharstopgPLICriticalityFactor,15))+"<BR></BR><B>BA: </B>"+validateString1(wrapCharTable(strBasis,15))+"</TD>");
                            //Modified by DSM(Sogeti) 2018x.6 July for PDF Views Req #39026 - End
                            //Modified by DSM(Sogeti)-2018x.1.1 for PDF Views Defect# 26791  - Ends
                            //Commented by DSM(Sogeti)-2018x.3 for PDF Views Req #32860  - Starts
                            strApplication = (String)mpCharInfo.get(pgV3Constants.SELECT_ATTRIBUTE_PGAPPLICATION);

                            if(UIUtil.isNullOrEmpty(strApplication)){
                                strApplication = DomainConstants.EMPTY_STRING;
                            }

                            strApplication =strApplication.replaceAll("[<]","#LESS_THAN");
                            //Commented by DSM(Sogeti)-2018x.3 for PDF Views Req #32860  - Ends
                            strPCharstopgPLITestGroup = (String)mpCharInfo.get(pgV3Constants.SELECT_ATTRIBUTE_PGTESTGROUP);
                            //Modified by DSM(Sogeti)-2018x.1.1 for PDF Views Defect# 26791  - Starts
                            //Modified by DSM(Sogeti)-2018x.3 for PDF Views Req #32861  - Starts
                            strCharacteristicsNotes = checkLessThanGreaterThan((String)mpCharInfo.get(pgPDFViewConstants.SELECT_ATTRIBUTE_CHAR_NOTES));
                            strDescription = checkLessThanGreaterThan((String)mpCharInfo.get(pgV3Constants.SELECT_DESCRIPTION));
                            //Modified by DSM(Sogeti)-2018x.3 for PDF Views Req #32861  - Ends
                            //Modified by DSM(Sogeti)-2018x.3 for PDF Views Req #32860  - Starts
                            //Modified by DSM(Sogeti)-2018x.5 for PDF Views Defect# 34507 Starts
                            if(slCriteriaTitle != null && slCriteriaTitle.size()>0)
                            {
                                strCriteriaTitle = StringUtils.join(slCriteriaTitle,",");
                            }
                            //Modified by DSM(Sogeti) 2018x.6 July for PDF Views Req #39026 -Start
                            //Modified by DSM(Sogeti) 2018x.6 July for PDF Views Req #39027 -Ends
                            sbCharacteristicsInfo.append("<TD width=\"50px\" align=\"left\" valign=\"top\"><B>TG: </B>"+validateString1(wrapCharTable(strPCharstopgPLITestGroup,20))+"<BR></BR><B>N: </B>"+validateString1(wrapCharTable(strCharacteristicsNotes,20))+"<BR></BR><B>D: </B>"+validateString1(wrapCharTable(strDescription,20))+"<BR></BR><B>A: </B>"+validateString1(wrapCharTable(strApplication,20))+"</TD>");
                            sbCharacteristicsInfo.append("<TD width=\"50px\" align=\"left\" valign=\"top\"><B>CMT: </B>"+validateString1(wrapCharTable(strCharMasterTitle,20))+"<BR></BR><B>CMN: </B>"+validateString1(strCharMasterName)+"<BR></BR><B>CMR: </B>"+validateString1(strCharMasterRevision)+"<BR></BR><B>CR: </B>"+validateString1(wrapCharTable(strCriteriaTitle,20))+"</TD>");
                            //Modified by DSM(Sogeti) 2018x.6 July for PDF Views Req #39026 -Ends
                            //Modified by DSM(Sogeti) 2018x.6 July for PDF Views Req #39027 -Ends
                            //Modified by DSM(Sogeti)-2018x.5 for PDF Views Defect# 34507 Ends
                            //Modified by DSM(Sogeti)-2018x.3 for PDF Views Req #32860  - Ends
                            //Modified by DSM(Sogeti)-2018x.1.1 for PDF Views Defect# 26791  - Ends
                            //Modified table width by DSM-2018x.1.1 for PDF Views Defect 26791 - Updated px Ends
                            //Added by DSM(Sogeti) for 2018x.5 PDF Views : Ends
                            sbCharacteristicsInfo.append("</TR>");
                        }
                        sbCharacteristicsInfo.append("</tbody>");
                        sbCharacteristicsInfo.append("</TABLE><TR><TD><br /></TD></TR></TD></TR>");
                        //Modify Code Refactoring
                        mlCharacteristicsInfo.clear();
                    }
                }
            }
        }catch (Exception e){
            e.printStackTrace();
            throw new MatrixException(e);
        }
        finally {
            if(isPushContext){
                ContextUtil.popContext(context);
                isPushContext = false;
            }
        }
        long endTime = new Date().getTime();
        System.out.println("Total Time has taken by the  getCharacteristicsData Method is-->"+(endTime-startTime));
        return sbCharacteristicsInfo;
    }
    //Added by DSM(Sogeti)-2018x.1 for PDF Views Requirements - Ends

    /**
     * Retrieve Detergent Surfactant Properties Table Data
     * @param context
     * @param args
     * @return
     * @throws MatrixException
     */
    private StringBuilder getDetergentSurfactantProperties(Context context, String strObjectId) throws Exception {

        StringBuilder sbAttribuesInfo = new StringBuilder();
        String  strSO3ContributorPositive	= DomainConstants.EMPTY_STRING;
        String  strSO3ContributorNegative	= DomainConstants.EMPTY_STRING;
        String  strSO3ContributorNeither	= DomainConstants.EMPTY_STRING;
        String  strSO3Contributor    = DomainConstants.EMPTY_STRING;

        if(validateString(strObjectId)) {
            //StringList slObjectSelects = new StringList(1);
            //slObjectSelects.addElement(pgV3Constants.SELECT_ATTRIBUTE_SO3CONTRIBUTOR);
            DomainObject domainObject= DomainObject.newInstance(context,strObjectId);
            //Map mpAttributeInfo = domainObject.getInfo(context, slObjectSelects);
            strSO3Contributor = (String)domainObject.getInfo(context, pgV3Constants.SELECT_ATTRIBUTE_SO3CONTRIBUTOR);
            if(UIUtil.isNotNullAndNotEmpty(strSO3Contributor)) {
                //strSO3Contributor = (String) mpAttributeInfo.get(pgV3Constants.SELECT_ATTRIBUTE_SO3CONTRIBUTOR);
                //Modified by DSM(Sogeti)-2018x.1 for PDF Views Defect #25613 - Starts
				/*if("Positive".equals(strSO3Contributor)){
					strSO3ContributorPositive = "Yes";
					strSO3ContributorNegative = "No";
					strSO3ContributorNeither = "No";
				} else if("Negative".equals(strSO3Contributor)){
					strSO3ContributorPositive = "No";
					strSO3ContributorNegative = "Yes";
					strSO3ContributorNeither = "No";
				} else {
					strSO3ContributorPositive = "No";
					strSO3ContributorNegative = "No";
					strSO3ContributorNeither = "Yes";
				}*/
                sbAttribuesInfo.append("<TR><TD><TABLE class=\"WordWrappdf\" cellspacing=\"0\" width=\"1000px\" id=\"SO3Contributor\">");

                sbAttribuesInfo.append("<thead><TR><TD colspan='2' class=\"new\" ><font size='4'><b>Detergent Surfactant Properties<br /></b></font></TD></TR></thead>");

                sbAttribuesInfo.append("<TR>");
                sbAttribuesInfo.append("<TD align='left' width=\"247px\"><B>CatSO3 Contributor</B></TD>");
                sbAttribuesInfo.append("<TD align='left' colspan ='3'>"+validateString1(strSO3Contributor)+"</TD>");
                sbAttribuesInfo.append("</TR>");

				/*sbAttribuesInfo.append("<TR>");
				sbAttribuesInfo.append("<TD align='left' width=\"250px\"><B>CatSO3 Positive Contributor</B></TD>");
				sbAttribuesInfo.append("<TD align='left' width=\"250px\">"+validateString1(strSO3ContributorPositive)+"</TD>");
				sbAttribuesInfo.append("<TD align='left' width=\"250px\"><B>CatSO3 Negative Contributor</B></TD>");
				sbAttribuesInfo.append("<TD align='left' width=\"250px\">"+validateString1(strSO3ContributorNegative)+"</TD>");
				sbAttribuesInfo.append("</TR>");
				sbAttribuesInfo.append("<TR>");
				sbAttribuesInfo.append("<TD align='left' width=\"250px\"><B>Neither</B></TD>");sbAttribuesInfo.append("<TD colspan=\"3\">"+validateString1(strSO3ContributorNeither)+"</TD>");
				sbAttribuesInfo.append("</TR>"); */
                sbAttribuesInfo.append("</TABLE></TD></TR>");
                //Modified by DSM(Sogeti)-2018x.1 for PDF Views Defect #25613 - Ends
            }
        }
        return sbAttribuesInfo;
    }

    /**
     * Retrieve Reach Table Data
     * @param context
     * @param args
     * @return
     * @throws MatrixException
     */
    private StringBuilder getReachDetail(Context context, String strObjectId) throws Exception {

        StringBuilder sbAttribuesInfo = new StringBuilder();
        String  strObjType                    = DomainConstants.EMPTY_STRING;
        String  strREACHRegistrationNumber    = DomainConstants.EMPTY_STRING;
        String  strREACHRegistrationStatus    = DomainConstants.EMPTY_STRING;

        if(validateString(strObjectId)) {

            StringList slObjectSelects = new StringList(2);
            slObjectSelects.addElement(pgV3Constants.SELECT_ATTRIBUTE_REACHREGISTRATIONNUMBER);
            slObjectSelects.addElement(pgV3Constants.SELECT_ATTRIBUTE_REACHREGISTRATIONSTATUS);
            DomainObject domainObject= DomainObject.newInstance(context,strObjectId);
            Map mpAttributeInfo = domainObject.getInfo(context, slObjectSelects);
            if(null!=mpAttributeInfo && !mpAttributeInfo.isEmpty()) {

                strREACHRegistrationNumber = (String) mpAttributeInfo.get(pgV3Constants.SELECT_ATTRIBUTE_REACHREGISTRATIONNUMBER);
                //Added by DSM(Sogeti)-2018x.0 for PDF Views Defect #24419 - Starts
                strREACHRegistrationNumber = strREACHRegistrationNumber.replaceAll("[<]","#LESS_THAN");
                //Added by DSM(Sogeti)-2018x.0 for PDF Views Defect #24419 - Ends
                strREACHRegistrationStatus = (String) mpAttributeInfo.get(pgV3Constants.SELECT_ATTRIBUTE_REACHREGISTRATIONSTATUS);
                if(UIUtil.isNotNullAndNotEmpty(strREACHRegistrationNumber) && UIUtil.isNotNullAndNotEmpty(strREACHRegistrationStatus)) {
                    sbAttribuesInfo.append("<TR><TD><BR /></TD></TR>");
                    sbAttribuesInfo.append("<TR><TD><TABLE class=\"WordWrappdf\" cellspacing=\"0\" width=\"1000px\" id=\"PDFReachStatementN\">");
                    sbAttribuesInfo.append("<TR><TD colspan='2' class=\"new\" ><font size='4'><b>REACH<br /></b></font></TD></TR>");

                    sbAttribuesInfo.append("<TR>");
                    sbAttribuesInfo.append("<TD align='left' width=\"250px\"><B>Status</B></TD>");
                    sbAttribuesInfo.append("<TD align='left' width=\"250px\">"+validateString1(strREACHRegistrationStatus)+"</TD>");
                    sbAttribuesInfo.append("<TD align='left' width=\"250px\"><B>Registration Number</B></TD>");
                    sbAttribuesInfo.append("<TD align='left' width=\"250px\">"+validateString1(strREACHRegistrationNumber)+"</TD>");
                    sbAttribuesInfo.append("</TR>");
                    sbAttribuesInfo.append("</TABLE></TD></TR>");
                    sbAttribuesInfo.append("<TR><TD><BR /></TD></TR>");
                }
            }
        }
        return sbAttribuesInfo;
    }

    /**
     * Retrieve Reach Table Data
     * @param context
     * @param args
     * @return
     * @throws MatrixException
     */
    private StringBuilder getChemicalMolecularProperties(Context context, String strObjectId) throws Exception {

        StringBuilder sbAttribuesInfo = new StringBuilder();
        String  strHLBValue              = DomainConstants.EMPTY_STRING;
        String  strPgHydrophilicIndex    = DomainConstants.EMPTY_STRING;
        String  strSaponificationValue   = DomainConstants.EMPTY_STRING;
        String  strHydroxlValue	         = DomainConstants.EMPTY_STRING;
        String  strpH                    = DomainConstants.EMPTY_STRING;
        String  strReactivity            = DomainConstants.EMPTY_STRING;
        String  strIUspergram            = DomainConstants.EMPTY_STRING;
        String  strAlkanity              = DomainConstants.EMPTY_STRING;
        String  strAnimalDerived         = DomainConstants.EMPTY_STRING;

        if(validateString(strObjectId)) {
            StringList slObjectSelects = new StringList(16);
            slObjectSelects.addElement(pgPDFViewConstants.SELECT_ATTRIBUTE_HYDROPHILICLIPOPHILICBALANCE);
            slObjectSelects.addElement(pgV3Constants.SELECT_ATTRIBUTE_SAPONIFICATIONVALUE);
            slObjectSelects.addElement(pgV3Constants.SELECT_ATTRIBUTE_PGHYDROPHILICINDEX);
            slObjectSelects.addElement(pgV3Constants.SELECT_ATTRIBUTE_HYDROXYLVALUE);
            slObjectSelects.addElement(pgV3Constants.SELECT_ATTRIBUTE_PHVALUE);
            //Added by DSM-2018x.1.1 for PDF Views Numeric Attribute - Starts
            slObjectSelects.addElement("attribute[" + pgV3Constants.ATTRIBUTE_PHVALUE + "].inputvalue");
            slObjectSelects.addElement("attribute[" + pgV3Constants.ATTRIBUTE_IUSPERGRAM + "].inputvalue");
            slObjectSelects.addElement(pgV3Constants.SELECT_ATTRIBUTE_ALKALINITY+".inputvalue");
            slObjectSelects.addElement("attribute[" + pgV3Constants.ATTRIBUTE_SAPONIFICATIONVALUE + "].inputvalue");
            slObjectSelects.addElement(pgPDFViewConstants.SELECT_ATTRIBUTE_HYDROPHILICLIPOPHILICBALANCE+".inputvalue");
            slObjectSelects.addElement(pgV3Constants.SELECT_ATTRIBUTE_HYDROXYLVALUE+".inputvalue");
            //Added by DSM-2018x.1.1 for PDF Views Numeric Attribute - Ends
            //Modified by DSM(Sogeti)-2018x.0 for PDF Views Defect #27350 - Starts
            slObjectSelects.addElement(pgV3Constants.SELECT_ATTRIBUTE_PGHYDROPHILICINDEX+".inputvalue");
            //Modified by DSM(Sogeti)-2018x.0 for PDF Views Defect #27350 - Ends
            slObjectSelects.addElement(pgV3Constants.SELECT_ATTRIBUTE_REACTIVITY);
            slObjectSelects.addElement(pgV3Constants.SELECT_ATTRIBUTE_IUSPERGRAM);
            slObjectSelects.addElement(pgV3Constants.SELECT_ATTRIBUTE_ALKALINITY);
            slObjectSelects.addElement(pgV3Constants.SELECT_ATTRIBUTE_ISANIMALDERIVED);
            DomainObject domainObject= DomainObject.newInstance(context,strObjectId);
            Map mpAttributeInfo = domainObject.getInfo(context, slObjectSelects);
            if(null!=mpAttributeInfo && !mpAttributeInfo.isEmpty()) {
                //Modified by DSM-2018x.1.1 for PDF Views Numeric Attribute - Starts
                //strHLBValue                   = (String) mpAttributeInfo.get(pgV3Constants.SELECT_ATTRIBUTE_HYDROPHILICLIPOPHILICBALANCE);
                //strSaponificationValue        = (String) mpAttributeInfo.get(pgV3Constants.SELECT_ATTRIBUTE_SAPONIFICATIONVALUE);
                //Modified by DSM(Sogeti)-2018x.0 for PDF Views Defect #27350 - Starts
                //strPgHydrophilicIndex         = (String) mpAttributeInfo.get(pgV3Constants.SELECT_ATTRIBUTE_PGHYDROPHILICINDEX);
                //Modified by DSM(Sogeti)-2018x.0 for PDF Views Defect #27350 - Ends
                //strHydroxlValue               = (String) mpAttributeInfo.get(pgV3Constants.SELECT_ATTRIBUTE_HYDROXYLVALUE);
                String strObjType = domainObject.getInfo(context, DomainConstants.SELECT_TYPE);
                if(strObjType.equalsIgnoreCase(pgV3Constants.TYPE_RAWMATERIALPART) || strObjType.equalsIgnoreCase(pgV3Constants.TYPE_FORMULATIONPART)){
                    strpH                     = (String) mpAttributeInfo.get("attribute[" + pgV3Constants.ATTRIBUTE_PHVALUE + "].inputvalue");
                } else {
                    strpH                     = (String) mpAttributeInfo.get(pgV3Constants.SELECT_ATTRIBUTE_PHVALUE);
                }
                if(strObjType.equalsIgnoreCase(pgV3Constants.TYPE_RAWMATERIALPART)){
                    strIUspergram             = (String) mpAttributeInfo.get("attribute[" + pgV3Constants.ATTRIBUTE_IUSPERGRAM + "].inputvalue");
                    strAlkanity               = (String) mpAttributeInfo.get(pgV3Constants.SELECT_ATTRIBUTE_ALKALINITY+".inputvalue");
                    strHLBValue               = (String) mpAttributeInfo.get(pgPDFViewConstants.SELECT_ATTRIBUTE_HYDROPHILICLIPOPHILICBALANCE+".inputvalue");
                    strSaponificationValue    = (String) mpAttributeInfo.get("attribute[" + pgV3Constants.ATTRIBUTE_SAPONIFICATIONVALUE + "].inputvalue");
                    strHydroxlValue           = (String) mpAttributeInfo.get(pgV3Constants.SELECT_ATTRIBUTE_HYDROXYLVALUE+".inputvalue");
                    //Added by DSM(Sogeti)-2018x.0 for PDF Views Defect #27350 - Starts
                    strPgHydrophilicIndex     = (String) mpAttributeInfo.get(pgV3Constants.SELECT_ATTRIBUTE_PGHYDROPHILICINDEX+".inputvalue");
                    //Added by DSM(Sogeti)-2018x.0 for PDF Views Defect #27350 - Ends
                } else {
                    strIUspergram             = (String) mpAttributeInfo.get(pgV3Constants.SELECT_ATTRIBUTE_IUSPERGRAM);
                    strAlkanity               = (String) mpAttributeInfo.get(pgV3Constants.SELECT_ATTRIBUTE_ALKALINITY);
                    strHLBValue               = (String) mpAttributeInfo.get(pgPDFViewConstants.SELECT_ATTRIBUTE_HYDROPHILICLIPOPHILICBALANCE);
                    strSaponificationValue    = (String) mpAttributeInfo.get(pgV3Constants.SELECT_ATTRIBUTE_SAPONIFICATIONVALUE);
                    strHydroxlValue           = (String) mpAttributeInfo.get(pgV3Constants.SELECT_ATTRIBUTE_HYDROXYLVALUE);
                    //Added by DSM(Sogeti)-2018x.0 for PDF Views Defect #27350 - Starts
                    strPgHydrophilicIndex         = (String) mpAttributeInfo.get(pgV3Constants.SELECT_ATTRIBUTE_PGHYDROPHILICINDEX);
                    //Added by DSM(Sogeti)-2018x.0 for PDF Views Defect #27350 - Ends
                }
                //Modified by DSM-2018x.1.1 for PDF Views Numeric Attribute - Ends
                strReactivity                 = (String) mpAttributeInfo.get(pgV3Constants.SELECT_ATTRIBUTE_REACTIVITY);
                //Added by DSM(Sogeti)-2018x.0 for PDF Views Defect #24419 - Starts
                strReactivity = strReactivity.replaceAll("[<]","#LESS_THAN");
                //Added by DSM(Sogeti)-2018x.0 for PDF Views Defect #24419 - Ends
                //Commented by DSM-2018x.1.1 for PDF Views Numeric Attribute - Start
                //strIUspergram                 = (String) mpAttributeInfo.get(pgV3Constants.SELECT_ATTRIBUTE_IUSPERGRAM);
                //strAlkanity                   = (String) mpAttributeInfo.get(pgV3Constants.SELECT_ATTRIBUTE_ALKALINITY);
                //Commented by DSM-2018x.1.1 for PDF Views Numeric Attribute - Ends
                strAnimalDerived              = (String) mpAttributeInfo.get(pgV3Constants.SELECT_ATTRIBUTE_ISANIMALDERIVED);
                sbAttribuesInfo.append("<TR><TD><BR /></TD></TR>");
                sbAttribuesInfo.append("<TR><TD><TABLE class=\"WordWrappdf\" cellspacing=\"0\" width=\"1000px\" id=\"ChemicalMolecularProperties\">");
                sbAttribuesInfo.append("<thead><TR><TD colspan='2' class=\"new\" ><font size='4'><b>Chemical/Molecular Properties<br/></b></font></TD></TR></thead>");

                sbAttribuesInfo.append("<TR>");
                sbAttribuesInfo.append("<TD align='left' width=\"250px\"><B>HLB Value</B></TD>");
                sbAttribuesInfo.append("<TD align='left' width=\"250px\">"+validateString1(strHLBValue)+"</TD>");
                sbAttribuesInfo.append("<TD align='left' width=\"250px\"><B>Saponification Value</B></TD>");
                sbAttribuesInfo.append("<TD align='left' width=\"250px\">"+validateString1(strSaponificationValue)+"</TD>");
                sbAttribuesInfo.append("</TR>");

                sbAttribuesInfo.append("<TR>");
                sbAttribuesInfo.append("<TD align='left' width=\"250px\"><B>Hydrophilic Index (HI)</B></TD>");
                sbAttribuesInfo.append("<TD align='left' width=\"250px\">"+validateString1(strPgHydrophilicIndex)+"</TD>");
                sbAttribuesInfo.append("<TD align='left' width=\"250px\"><B>Hydroxyl Value</B></TD>");
                sbAttribuesInfo.append("<TD align='left' width=\"250px\">"+validateString1(strHydroxlValue)+"</TD>");
                sbAttribuesInfo.append("</TR>");

                sbAttribuesInfo.append("<TR>");
                sbAttribuesInfo.append("<TD align='left' width=\"250px\"><B>pH</B></TD>");
                sbAttribuesInfo.append("<TD align='left' width=\"250px\">"+validateString1(strpH)+"</TD>");
                sbAttribuesInfo.append("<TD align='left' width=\"250px\"><B>Reactivity</B></TD>");
                sbAttribuesInfo.append("<TD align='left' width=\"250px\">"+validateString1(strReactivity)+"</TD>");
                sbAttribuesInfo.append("</TR>");

                sbAttribuesInfo.append("<TR>");
                sbAttribuesInfo.append("<TD align='left' width=\"250px\"><B><xss:encodeForHTMLAttribute>IU's per gram</xss:encodeForHTMLAttribute></B></TD>");
                sbAttribuesInfo.append("<TD align='left' width=\"250px\">"+validateString1(strIUspergram)+"</TD>");
                // Modified by DSM-2015x.5.1 for PDF Views (Req Id #11998): Starts
                // Modified by by DSM(Sogeti)--2018x.1 for Defect #25563: Starts
                // Modified by by DSM(Sogeti)--2018x.1 for Defect #27350: Starts
                if(strObjType.equalsIgnoreCase(pgV3Constants.TYPE_RAWMATERIALPART)){
                    sbAttribuesInfo.append("<TD align='left' width=\"250px\"><B>Alkalinity - %</B></TD>");
                } else {
                    sbAttribuesInfo.append("<TD align='left' width=\"250px\"><B>Alkalinity - %</B></TD>");
                }
                // Modified by by DSM(Sogeti)--2018x.1 for Defect #27350: Ends
                // Modified by by DSM(Sogeti)--2018x.1 for Defect #25563: Ends
                // Modified by DSM-2015x.5.1 for PDF Views (Req Id #11998): Ends
                sbAttribuesInfo.append("<TD align='left' width=\"250px\">"+validateString1(strAlkanity)+"</TD>");
                sbAttribuesInfo.append("</TR>");

                sbAttribuesInfo.append("<TR>");
                sbAttribuesInfo.append("<TD align='left' width=\"250px\" ><B>Animal Derived</B></TD>");
                sbAttribuesInfo.append("<TD colspan=\"3\">"+validateString1(strAnimalDerived)+"</TD>");
                sbAttribuesInfo.append("</TR>");

                sbAttribuesInfo.append("</TABLE></TD></TR>");
                sbAttribuesInfo.append("<TR><TD><BR /></TD></TR>");
                //Modify Code Refactoring
                mpAttributeInfo.clear();
            }
        }
        return sbAttribuesInfo;
    }

    /**
     * Retrieve Perfume Properties Table Data
     * @param context
     * @param args
     * @return
     * @throws MatrixException
     */
    private StringBuilder getPerfumeProperties(Context context, String strObjectId) throws Exception {

        StringBuilder sbAttribuesInfo = new StringBuilder();
        //Added by DSM(Sogeti)-2018x.2 for PDF Views Defect #24964 - Starts
        String  strObjType                    = DomainConstants.EMPTY_STRING;
        //Added by DSM(Sogeti)-2018x.2 for PDF Views Defect #24964 - Ends
        String  strPgOdorFamily               = DomainConstants.EMPTY_STRING;
        String  strPgPrimaryOdorDescriptor    = DomainConstants.EMPTY_STRING;
        String  strPgSecondaryOdorDescriptor  = DomainConstants.EMPTY_STRING;
        String  strPgOdorDescription          = DomainConstants.EMPTY_STRING;

        if(validateString(strObjectId)) {

            StringList slObjectSelects = new StringList(4);
            slObjectSelects.addElement(pgV3Constants.SELECT_ATTRIBUTE_PGODORFAMILY);
            slObjectSelects.addElement(pgV3Constants.SELECT_ATTRIBUTE_PGPRIMARYODORDESCRIPTOR);
            slObjectSelects.addElement(pgV3Constants.SELECT_ATTRIBUTE_PGSECONDARYODORDESCRIPTOR);
            slObjectSelects.addElement(pgV3Constants.SELECT_ATTRIBUTE_PGODORDESCRIPTION);

            DomainObject domainObject= DomainObject.newInstance(context,strObjectId);
            Map mpAttributeInfo = domainObject.getInfo(context, slObjectSelects);

            if(null!=mpAttributeInfo && !mpAttributeInfo.isEmpty()) {
                strPgOdorFamily               = (String) mpAttributeInfo.get(pgV3Constants.SELECT_ATTRIBUTE_PGODORFAMILY);
                //Added by DSM(Sogeti)-2018x.0 for PDF Views Defect #24419 - Starts
                strPgOdorFamily = strPgOdorFamily.replaceAll("[<]","#LESS_THAN");
                //Added by DSM(Sogeti)-2018x.0 for PDF Views Defect #24419 - Ends
                strPgPrimaryOdorDescriptor    = (String) mpAttributeInfo.get(pgV3Constants.SELECT_ATTRIBUTE_PGPRIMARYODORDESCRIPTOR);
                //Added by DSM(Sogeti)-2018x.0 for PDF Views Defect #24419 - Starts
                strPgPrimaryOdorDescriptor = strPgPrimaryOdorDescriptor.replaceAll("[<]","#LESS_THAN");
                //Added by DSM(Sogeti)-2018x.0 for PDF Views Defect #24419 - Ends
                strPgSecondaryOdorDescriptor  = (String) mpAttributeInfo.get(pgV3Constants.SELECT_ATTRIBUTE_PGSECONDARYODORDESCRIPTOR);
                //Added by DSM(Sogeti)-2018x.0 for PDF Views Defect #24419 - Starts
                strPgSecondaryOdorDescriptor = strPgSecondaryOdorDescriptor.replaceAll("[<]","#LESS_THAN");
                //Added by DSM(Sogeti)-2018x.0 for PDF Views Defect #24419 - Ends
                strPgOdorDescription          = (String) mpAttributeInfo.get(pgV3Constants.SELECT_ATTRIBUTE_PGODORDESCRIPTION);
                //Added by DSM(Sogeti)-2018x.0 for PDF Views Defect #24419 - Starts
                strPgOdorDescription = strPgOdorDescription.replaceAll("[<]","#LESS_THAN");
                //Added by DSM(Sogeti)-2018x.0 for PDF Views Defect #24419 - Ends
                strObjType           = (String) mpAttributeInfo.get(DomainConstants.SELECT_TYPE);
                //Added by DSM(Sogeti)-2018x.2 for PDF Views Defect #24964 - Starts
                if(strObjType.equalsIgnoreCase(pgV3Constants.TYPE_PGRAWMATERIAL) || strObjType.equalsIgnoreCase(pgV3Constants.TYPE_RAWMATERIALPART)) {
                    if(UIUtil.isNotNullAndNotEmpty(strPgOdorFamily) || UIUtil.isNotNullAndNotEmpty(strPgPrimaryOdorDescriptor) || UIUtil.isNotNullAndNotEmpty(strPgSecondaryOdorDescriptor) || UIUtil.isNotNullAndNotEmpty(strPgOdorDescription) ) {
                        //Added by DSM(Sogeti)-2018x.2 for PDF Views Defect #24964 - Ends
                        sbAttribuesInfo.append("<TR><TD><TABLE class=\"WordWrappdf\" cellspacing=\"0\" width=\"1000px\" id=\"PerfumeProperties\">");
                        sbAttribuesInfo.append("<thead><TR><TD colspan='2' class=\"new\" ><font size='4'><b>Perfume Properties<br /></b></font></TD></TR></thead>");

                        sbAttribuesInfo.append("<TR>");
                        sbAttribuesInfo.append("<TD align='left' width=\"250px\"><B>Odor Family</B></TD>");
                        sbAttribuesInfo.append("<TD align='left' width=\"250px\">"+validateString1(strPgOdorFamily)+"</TD>");
                        sbAttribuesInfo.append("<TD align='left' width=\"250px\"><B>Primary Odor Descriptor</B></TD>");
                        sbAttribuesInfo.append("<TD align='left' width=\"250px\">"+validateString1(strPgPrimaryOdorDescriptor)+"</TD>");
                        sbAttribuesInfo.append("</TR>");

                        sbAttribuesInfo.append("<TR>");
                        sbAttribuesInfo.append("<TD align='left' width=\"250px\"><B>Secondary Odor Description</B></TD>");
                        sbAttribuesInfo.append("<TD align='left' width=\"250px\">"+validateString1(strPgSecondaryOdorDescriptor)+"</TD>");
                        sbAttribuesInfo.append("<TD align='left' width=\"250px\"><B>Odor Description</B></TD>");
                        sbAttribuesInfo.append("<TD align='left' width=\"250px\">"+validateString1(strPgOdorDescription)+"</TD>");
                        sbAttribuesInfo.append("</TR>");

                        sbAttribuesInfo.append("</TABLE></TD></TR>");
                    }
                }

            }


        }
        return sbAttribuesInfo;
    }

    /**
     * Retrieve Physical Properties Table Data
     * @param context
     * @param args
     * @return
     * @throws MatrixException
     */
    private StringBuilder getPhysicalProperties(Context context, String strObjectId) throws Exception {

        StringBuilder sbAttribuesInfo = new StringBuilder();
        String strObjType             = DomainConstants.EMPTY_STRING;
        String strAppearance          = DomainConstants.EMPTY_STRING;
        String strColor               = DomainConstants.EMPTY_STRING;
        String strSpecificGravity     = DomainConstants.EMPTY_STRING;
        String strMeltingPoint        = DomainConstants.EMPTY_STRING;
        String strBoilingPoint        = DomainConstants.EMPTY_STRING;
        String strViscosity           = DomainConstants.EMPTY_STRING;
        String strPhysicalForm        = DomainConstants.EMPTY_STRING;
        String strVaporPressure       = DomainConstants.EMPTY_STRING;
        String strGrade    			  = DomainConstants.EMPTY_STRING;
        String strPgRMAqusSolubility  = DomainConstants.EMPTY_STRING;
        String strAutoIgnitionTemp    = DomainConstants.EMPTY_STRING;
        String strFlashPoint          = DomainConstants.EMPTY_STRING;

        if(validateString(strObjectId)) {

            StringList slObjectSelects = new StringList(13);
            slObjectSelects.addElement(pgV3Constants.SELECT_TYPE);
            slObjectSelects.addElement(pgV3Constants.SELECT_ATTRIBUTE_APPEARANCE);
            slObjectSelects.addElement(pgV3Constants.SELECT_ATTRIBUTE_COLOR);
            slObjectSelects.addElement(pgV3Constants.SELECT_ATTRIBUTE_SPECIFICGRAVITY);
            slObjectSelects.addElement(pgV3Constants.SELECT_ATTRIBUTE_MELTINGPOINT);
            slObjectSelects.addElement(pgV3Constants.SELECT_ATTRIBUTE_BOILINGPOINT);
            slObjectSelects.addElement(pgV3Constants.SELECT_ATTRIBUTE_VISCOSITY);
            slObjectSelects.addElement(pgV3Constants.SELECT_ATTRIBUTE_PHYSICALFORM);
            slObjectSelects.addElement(pgV3Constants.SELECT_ATTRIBUTE_VAPORPRESSURE);
            slObjectSelects.addElement(pgV3Constants.SELECT_ATTRIBUTE_GRADE);
            slObjectSelects.addElement(pgV3Constants.SELECT_ATTRIBUTE_PGRMAQUEOUSSOLUBILITY);
            slObjectSelects.addElement(pgV3Constants.SELECT_ATTRIBUTE_AUTOIGNITIONTEMPERATURE);
            slObjectSelects.addElement(pgV3Constants.SELECT_ATTRIBUTE_FLASHPOINT);
            //Added by DSM-2018x.1.1 for PDF Views Numeric Attribute - Starts
            slObjectSelects.addElement(pgV3Constants.SELECT_ATTRIBUTE_AUTOIGNITIONTEMPERATURE+".inputvalue");
            slObjectSelects.addElement(pgV3Constants.SELECT_ATTRIBUTE_FLASHPOINT+".inputvalue");
            slObjectSelects.addElement(pgV3Constants.SELECT_ATTRIBUTE_MELTINGPOINT+".inputvalue");
            slObjectSelects.addElement(pgV3Constants.SELECT_ATTRIBUTE_VISCOSITY+".inputvalue");
            slObjectSelects.add(pgV3Constants.SELECT_ATTRIBUTE_BOILINGPOINT+".inputvalue");
            slObjectSelects.add(pgV3Constants.SELECT_ATTRIBUTE_VAPORPRESSURE+".inputvalue");
            //Added by DSM-2018x.1.1 for PDF Views Numeric Attribute - End


            DomainObject domainObject= DomainObject.newInstance(context,strObjectId);
            Map mpAttributeInfo = domainObject.getInfo(context, slObjectSelects);

            if(null!=mpAttributeInfo && !mpAttributeInfo.isEmpty()) {

                strObjType           = (String) mpAttributeInfo.get(DomainConstants.SELECT_TYPE);
                strAppearance 		 = (String) mpAttributeInfo.get(pgV3Constants.SELECT_ATTRIBUTE_APPEARANCE);
                //Added by DSM(Sogeti)-2018x.0 for PDF Views Defect #24419 - Starts
                strAppearance = strAppearance.replaceAll("[<]","#LESS_THAN");
                //Added by DSM(Sogeti)-2018x.0 for PDF Views Defect #24419 - Ends
                strColor		     = (String) mpAttributeInfo.get(pgV3Constants.SELECT_ATTRIBUTE_COLOR);
                //Added by DSM(Sogeti)-2018x.0 for PDF Views Defect #24419 - Starts
                strColor = strColor.replaceAll("[<]","#LESS_THAN");
                //Added by DSM(Sogeti)-2018x.0 for PDF Views Defect #24419 - Ends
                strSpecificGravity	 = (String) mpAttributeInfo.get(pgV3Constants.SELECT_ATTRIBUTE_SPECIFICGRAVITY);
                //Modified by DSM-2018x.1.1 for PDF Views Numeric Attribute - Starts
                //strMeltingPoint      = (String) mpAttributeInfo.get(pgV3Constants.SELECT_ATTRIBUTE_MELTINGPOINT);
                //strBoilingPoint      = (String) mpAttributeInfo.get(pgV3Constants.SELECT_ATTRIBUTE_BOILINGPOINT);
                //strViscosity         = (String) mpAttributeInfo.get(pgV3Constants.SELECT_ATTRIBUTE_VISCOSITY);
                strPhysicalForm      = (String) mpAttributeInfo.get(pgV3Constants.SELECT_ATTRIBUTE_PHYSICALFORM);
                //strVaporPressure     = (String) mpAttributeInfo.get(pgV3Constants.SELECT_ATTRIBUTE_VAPORPRESSURE);
                strObjType = domainObject.getInfo(context, DomainConstants.SELECT_TYPE);
                if(strObjType.equalsIgnoreCase(pgV3Constants.TYPE_RAWMATERIALPART) || strObjType.equalsIgnoreCase(pgV3Constants.TYPE_FORMULATIONPART)){
                    strVaporPressure = (String) mpAttributeInfo.get(pgV3Constants.SELECT_ATTRIBUTE_VAPORPRESSURE+".inputvalue");
                    strBoilingPoint = (String) mpAttributeInfo.get(pgV3Constants.SELECT_ATTRIBUTE_BOILINGPOINT+".inputvalue");
                } else {
                    strVaporPressure = (String) mpAttributeInfo.get(pgV3Constants.SELECT_ATTRIBUTE_VAPORPRESSURE);
                    strBoilingPoint = (String) mpAttributeInfo.get(pgV3Constants.SELECT_ATTRIBUTE_BOILINGPOINT);
                }
                if(strObjType.equalsIgnoreCase(pgV3Constants.TYPE_RAWMATERIALPART)){
                    strAutoIgnitionTemp  = (String) mpAttributeInfo.get(pgV3Constants.SELECT_ATTRIBUTE_AUTOIGNITIONTEMPERATURE+".inputvalue");
                    strFlashPoint        = (String) mpAttributeInfo.get(pgV3Constants.SELECT_ATTRIBUTE_FLASHPOINT+".inputvalue");
                    strMeltingPoint      = (String) mpAttributeInfo.get(pgV3Constants.SELECT_ATTRIBUTE_MELTINGPOINT+".inputvalue");
                    strViscosity         = (String) mpAttributeInfo.get(pgV3Constants.SELECT_ATTRIBUTE_VISCOSITY+".inputvalue");
                } else {
                    strAutoIgnitionTemp  = (String) mpAttributeInfo.get(pgV3Constants.SELECT_ATTRIBUTE_AUTOIGNITIONTEMPERATURE);
                    strFlashPoint        = (String) mpAttributeInfo.get(pgV3Constants.SELECT_ATTRIBUTE_FLASHPOINT);
                    strMeltingPoint      = (String) mpAttributeInfo.get(pgV3Constants.SELECT_ATTRIBUTE_MELTINGPOINT);
                    strViscosity         = (String) mpAttributeInfo.get(pgV3Constants.SELECT_ATTRIBUTE_VISCOSITY);
                }
                //Modified by DSM-2018x.1.1 for PDF Views Numeric Attribute - Ends

                strGrade             = (String) mpAttributeInfo.get(pgV3Constants.SELECT_ATTRIBUTE_GRADE);
                strPgRMAqusSolubility= (String) mpAttributeInfo.get(pgV3Constants.SELECT_ATTRIBUTE_PGRMAQUEOUSSOLUBILITY);
                //Added by DSM(Sogeti)-2018x.0 for PDF Views Defect #24419 - Starts
                strPgRMAqusSolubility = strPgRMAqusSolubility.replaceAll("[<]","#LESS_THAN");
                //Added by DSM(Sogeti)-2018x.0 for PDF Views Defect #24419 - Ends
                //Commented by DSM-2018x.1.1 for PDF Views Numeric Attribute - Starts
                //strAutoIgnitionTemp  = (String) mpAttributeInfo.get(pgV3Constants.SELECT_ATTRIBUTE_AUTOIGNITIONTEMPERATURE);
                //strFlashPoint        = (String) mpAttributeInfo.get(pgV3Constants.SELECT_ATTRIBUTE_FLASHPOINT);
                //Commented by DSM-2018x.1.1 for PDF Views Numeric Attribute - Ends
                if(strObjType.equalsIgnoreCase(pgV3Constants.TYPE_PGRAWMATERIAL) || strObjType.equalsIgnoreCase(pgV3Constants.TYPE_RAWMATERIALPART)) {
                    sbAttribuesInfo.append("<TR><TD><BR /></TD></TR>");
                    sbAttribuesInfo.append("<TR><TD><TABLE class=\"WordWrappdf\" cellspacing=\"0\" width=\"1000px\" id=\"PhysicalProperties\">");
                    sbAttribuesInfo.append("<thead><TR><TD colspan='2' class=\"new\" ><font size='4'><b>Physical Properties<br /></b></font></TD></TR></thead>");

                    sbAttribuesInfo.append("<TR>");
                    sbAttribuesInfo.append("<TD align='left' width=\"250px\"><B>Appearance</B></TD>");
                    sbAttribuesInfo.append("<TD align='left' width=\"250px\">"+validateString1(strAppearance)+"</TD>");
                    sbAttribuesInfo.append("<TD align='left' width=\"250px\"><B>Color</B></TD>");
                    sbAttribuesInfo.append("<TD align='left' width=\"250px\">"+validateString1(strColor)+"</TD>");
                    sbAttribuesInfo.append("</TR>");
                    // Modified by DSM-2015x.5.1 for PDF Views (Req Id #11998) : Starts
                    sbAttribuesInfo.append("<TR>");
                    //Modified by DSM(Sogeti)-2018x.1.1 for PDF Views Defect 26215  - Starts
                    //Modified by DSM(Sogeti)-2018x.1.1 for PDF Views Defect 27350 : Starts
                    if(strObjType.equalsIgnoreCase(pgV3Constants.TYPE_PGRAWMATERIAL)) {
                        sbAttribuesInfo.append("<TD align='left' width=\"250px\"><B>Specific Gravity</B></TD>");
                    } else {
                        sbAttribuesInfo.append("<TD align='left' width=\"250px\"><B>Specific Gravity</B></TD>");
                    }
                    sbAttribuesInfo.append("<TD align='left' width=\"250px\">"+validateString1(strSpecificGravity)+"</TD>");
                    if(strObjType.equalsIgnoreCase(pgV3Constants.TYPE_PGRAWMATERIAL)) {
                        //Modified by DSM(Sogeti)-2018x.5 for PDF Views Requirements - Starts
                        sbAttribuesInfo.append("<TD align='left' width=\"250px\"><B>Melting Point</B></TD>");
                        //Modified by DSM(Sogeti)-2018x.5 for PDF Views Requirements - Ends
                    } else {
                        sbAttribuesInfo.append("<TD align='left' width=\"250px\"><B>Melting Point - <sup>o</sup>C</B></TD>");
                    }
                    sbAttribuesInfo.append("<TD align='left' width=\"250px\">"+validateString1(strMeltingPoint)+"</TD>");
                    sbAttribuesInfo.append("</TR>");

                    sbAttribuesInfo.append("<TR>");
                    if(strObjType.equalsIgnoreCase(pgV3Constants.TYPE_PGRAWMATERIAL)) {
                        //Modified by DSM(Sogeti)-2018x.5 for PDF Views Requirements - Starts
                        sbAttribuesInfo.append("<TD align='left' width=\"250px\"><B>Boiling Point</B></TD>");
                        //Modified by DSM(Sogeti)-2018x.5 for PDF Views Requirements - Ends
                    } else {
                        sbAttribuesInfo.append("<TD align='left' width=\"250px\"><B>Boiling Point - <sup>o</sup>C</B></TD>");
                    }
                    sbAttribuesInfo.append("<TD align='left' width=\"250px\">"+validateString1(strBoilingPoint)+"</TD>");
                    if(strObjType.equalsIgnoreCase(pgV3Constants.TYPE_PGRAWMATERIAL)) {
                        sbAttribuesInfo.append("<TD align='left' width=\"250px\"><B>Viscosity - centipoise</B></TD>");
                    } else {
                        sbAttribuesInfo.append("<TD align='left' width=\"250px\"><B>Viscosity - centipoise</B></TD>");
                    }
                    sbAttribuesInfo.append("<TD align='left' width=\"250px\">"+validateString1(strViscosity)+"</TD>");
                    sbAttribuesInfo.append("</TR>");

                    sbAttribuesInfo.append("<TR>");
                    sbAttribuesInfo.append("<TD align='left' width=\"250px\"><B>Form</B></TD>");
                    sbAttribuesInfo.append("<TD align='left' width=\"250px\">"+validateString1(strPhysicalForm)+"</TD>");
                    if(strObjType.equalsIgnoreCase(pgV3Constants.TYPE_PGRAWMATERIAL)) {
                        sbAttribuesInfo.append("<TD align='left' width=\"250px\"><B>Vapor Pressure - Pascal </B></TD>");
                    } else {
                        sbAttribuesInfo.append("<TD align='left' width=\"250px\"><B>Vapor Pressure - Pascal </B></TD>");
                    }
                    sbAttribuesInfo.append("<TD align='left' width=\"250px\">"+validateString1(strVaporPressure)+"</TD>");
                    sbAttribuesInfo.append("</TR>");

                    sbAttribuesInfo.append("<TR>");
                    sbAttribuesInfo.append("<TD align='left' width=\"250px\"><B>Grade</B></TD>");
                    sbAttribuesInfo.append("<TD align='left' width=\"250px\">"+validateString1(strGrade)+"</TD>");
                    if(strObjType.equalsIgnoreCase(pgV3Constants.TYPE_PGRAWMATERIAL)) {
                        sbAttribuesInfo.append("<TD align='left' width=\"250px\"><B>Aqueous Solubility - %</B></TD>");
                    } else {
                        sbAttribuesInfo.append("<TD align='left' width=\"250px\"><B>Aqueous Solubility - %</B></TD>");
                    }
                    sbAttribuesInfo.append("<TD align='left' width=\"250px\">"+validateString1(strPgRMAqusSolubility)+"</TD>");
                    sbAttribuesInfo.append("</TR>");

                    sbAttribuesInfo.append("<TR>");
                    if(strObjType.equalsIgnoreCase(pgV3Constants.TYPE_PGRAWMATERIAL)) {
                        sbAttribuesInfo.append("<TD align='left' width=\"250px\" ><B>Autoignition Temp - <sup>o</sup>C</B></TD>");
                    } else {
                        sbAttribuesInfo.append("<TD align='left' width=\"250px\" ><B>Autoignition Temp - <sup>o</sup>C</B></TD>");
                    }
                    sbAttribuesInfo.append("<TD align='left' width=\"250px\">"+validateString1(strAutoIgnitionTemp)+"</TD>");
                    if(strObjType.equalsIgnoreCase(pgV3Constants.TYPE_PGRAWMATERIAL)) {
                        sbAttribuesInfo.append("<TD align='left' width=\"250px\"><B>Flash Point - <sup>o</sup>C</B></TD>");
                    } else {
                        sbAttribuesInfo.append("<TD align='left' width=\"250px\"><B>Flash Point - <sup>o</sup>C</B></TD>");
                    }
                    sbAttribuesInfo.append("<TD align='left' width=\"250px\">"+validateString1(strFlashPoint)+"</TD>");
                    sbAttribuesInfo.append("</TR>");
                    // Modified by DSM-2015x.5.1 for PDF Views (Req Id #11998) : Ends
                    //Modified by DSM(Sogeti)-2018x.1.1 for PDF Views Defect 26215 : Ends
                    //Modified by DSM(Sogeti)-2018x.1.1 for PDF Views Defect 27350 : Ends
                    sbAttribuesInfo.append("</TABLE></TD></TR>");
                    sbAttribuesInfo.append("<TR><TD><BR /></TD></TR>");
                }
                //Modify Code Refactoring
                mpAttributeInfo.clear();
            }
        }
        return sbAttribuesInfo;
    }

    /**
     * Retrieve Chemical Classification Table Data
     * @param context
     * @param args
     * @return
     * @throws MatrixException
     */
    private StringBuilder getChemicalClassification(Context context, String strObjectId) throws Exception {


        StringBuilder sbAttribuesInfo = new StringBuilder();
        String strObjType         = DomainConstants.EMPTY_STRING;
        String strPgCASNum        = DomainConstants.EMPTY_STRING;
        String strEINECSNum       = DomainConstants.EMPTY_STRING;
        String strMaterialFunc    = DomainConstants.EMPTY_STRING;
        String strChemicalGroup   = DomainConstants.EMPTY_STRING;
        String strIngredientClass = DomainConstants.EMPTY_STRING;
        //Added by DSM(Sogeti)- 2018x.5 for Defect 33366 Start
        String strFlavorClusterRank = DomainConstants.EMPTY_STRING;
        //Added by DSM(Sogeti)- 2018x.5 for Defect 33366 Ends
        //Added by DSM(Sogeti)- 2018x.1 for Defect 25563 Start
        StringList slMaterialFunction = new StringList();
        //Added by DSM(Sogeti)- 2018x.1 for Defect 25563 End

        if(validateString(strObjectId)) {

            StringList slObjectSelects = new StringList(6);
            slObjectSelects.addElement(pgV3Constants.SELECT_TYPE);
            slObjectSelects.addElement(pgV3Constants.SELECT_ATTRIBUTE_PGCASNUMBER);
            slObjectSelects.addElement(pgV3Constants.SELECT_ATTRIBUTE_EINECSNUMBER);
            //Commented by DSM(Sogeti)- 2018x.1 for Defect 25563 Start
            //slObjectSelects.addElement("from["+pgV3Constants.REL_MATERIAL_FUNCTIONALITY+"].to.name");
            //Commented by DSM(Sogeti)- 2018x.1 for Defect 25563 End
            slObjectSelects.addElement(pgV3Constants.SELECT_ATTRIBUTE_PGCHEMICALGROUP);
            slObjectSelects.addElement(pgV3Constants.SELECT_ATTRIBUTE_PGINGREDIENTCLASS);
            //Added by DSM(Sogeti)- 2018x.5 for Defect 33366 Start
            slObjectSelects.addElement(pgPDFViewConstants.SELECT_ATTRIBUTE_PGFLAVORCLUSTERRANK);
            //Added by DSM(Sogeti)- 2018x.5 for Defect 33366 Start
            DomainObject domainObject= DomainObject.newInstance(context,strObjectId);
            Map mpAttributeInfo = domainObject.getInfo(context, slObjectSelects);
            //Added by DSM(Sogeti)- 2018x.1 for Defect 25563 Start
            slMaterialFunction = domainObject.getInfoList(context,"from["+pgV3Constants.REL_MATERIAL_FUNCTIONALITY+"].to.name");
            //Added by DSM(Sogeti)- 2018x.1 for Defect 25563 End
            if(slMaterialFunction != null && slMaterialFunction.size()>0)
            {
                strMaterialFunc = FrameworkUtil.join(slMaterialFunction,",");
            }
            if(null!=mpAttributeInfo && !mpAttributeInfo.isEmpty()) {

                strObjType           = (String) mpAttributeInfo.get(DomainConstants.SELECT_TYPE);
                strPgCASNum 		 = (String) mpAttributeInfo.get(pgV3Constants.SELECT_ATTRIBUTE_PGCASNUMBER);
                //Added by DSM(Sogeti)-2018x.0 for PDF Views Defect #24419 - Starts
                strPgCASNum = strPgCASNum.replaceAll("[<]","#LESS_THAN");
                //Added by DSM(Sogeti)-2018x.0 for PDF Views Defect #24419 - Ends
                strEINECSNum		 = (String) mpAttributeInfo.get(pgV3Constants.SELECT_ATTRIBUTE_EINECSNUMBER);
                //Added by DSM(Sogeti)-2018x.0 for PDF Views Defect #24419 - Starts
                strEINECSNum = strEINECSNum.replaceAll("[<]","#LESS_THAN");
                //Added by DSM(Sogeti)-2018x.0 for PDF Views Defect #24419 - Ends
                //Commented by DSM(Sogeti)- 2018x.1 for Defect 25563 Starts
                //strMaterialFunc	     = (String) mpAttributeInfo.get("from["+pgV3Constants.REL_MATERIAL_FUNCTIONALITY+"].to.name");
                //Commented by DSM(Sogeti)- 2018x.1 for Defect 25563 Ends
                strChemicalGroup     = (String) mpAttributeInfo.get(pgV3Constants.SELECT_ATTRIBUTE_PGCHEMICALGROUP);
                strIngredientClass   = (String) mpAttributeInfo.get(pgV3Constants.SELECT_ATTRIBUTE_PGINGREDIENTCLASS);
                //Added by DSM(Sogeti)- 2018x.5 for Defect 33366 Start
                strFlavorClusterRank   = (String) mpAttributeInfo.get(pgPDFViewConstants.SELECT_ATTRIBUTE_PGFLAVORCLUSTERRANK);
                //Added by DSM(Sogeti)- 2018x.5 for Defect 33366 End
                if(strObjType.equalsIgnoreCase(pgV3Constants.TYPE_PGRAWMATERIAL) || strObjType.equalsIgnoreCase(pgV3Constants.TYPE_RAWMATERIALPART)) {
                    //Added by DSM(Sogeti)-2018x.2 for PDF Views Defect #24964 - Starts
                    if(UIUtil.isNotNullAndNotEmpty(strMaterialFunc) || UIUtil.isNotNullAndNotEmpty(strPgCASNum) || UIUtil.isNotNullAndNotEmpty(strEINECSNum) || UIUtil.isNotNullAndNotEmpty(strChemicalGroup) || UIUtil.isNotNullAndNotEmpty(strIngredientClass)) {
                        //Added by DSM(Sogeti)-2018x.2 for PDF Views Defect #24964 - Ends
                        sbAttribuesInfo.append("<TR><TD><TABLE class=\"WordWrappdf\" cellspacing=\"0\" width=\"1000px\" id=\"ChemicalClassification\">");
                        sbAttribuesInfo.append("<thead><TR><TD colspan='2' class=\"new\" ><font size='4'><b>Chemical Classification<br /></b></font></TD></TR></thead>");

                        sbAttribuesInfo.append("<TR>");
                        sbAttribuesInfo.append("<TD align='left' width=\"250px\"><B>CAS#</B></TD>");
                        sbAttribuesInfo.append("<TD align='left' width=\"250px\">"+validateString1(strPgCASNum)+"</TD>");
                        sbAttribuesInfo.append("<TD align='left' width=\"250px\"><B>EINECS Number</B></TD>");
                        sbAttribuesInfo.append("<TD align='left' width=\"250px\">"+validateString1(strEINECSNum)+"</TD>");
                        sbAttribuesInfo.append("</TR>");

                        sbAttribuesInfo.append("<TR>");
                        // Modified by DSM(Sogeti) for 2018x.5 PDF Views : Starts
                        //Added by DSM(Sogeti)-2018x.5 for PDF Views Requirements - Starts
                        if(strObjType.equalsIgnoreCase(pgV3Constants.TYPE_PGRAWMATERIAL)) {
                            sbAttribuesInfo.append("<TD align='left' width=\"250px\"><B> Material Function</B></TD>");
                        }else {
                            sbAttribuesInfo.append("<TD align='left' width=\"250px\"><B> Function</B></TD>");
                        }

                        //Added by DSM(Sogeti)-2018x.5 for PDF Views Requirements - Ends
                        // Modified by DSM(Sogeti) for 2018x.5 PDF Views : Ends
                        //Modified by DSM(Sogeti)- 2018x.1 for Defect 25563 Starts
                        sbAttribuesInfo.append("<TD align='left' width=\"250px\">"+validateString1(strMaterialFunc)+"</TD>");
                        //Modified by DSM(Sogeti)- 2018x.1 for Defect 25563 Ends
                        sbAttribuesInfo.append("<TD align='left' width=\"250px\"><B>Chemical Group</B></TD>");
                        sbAttribuesInfo.append("<TD align='left' width=\"250px\">"+validateString1(strChemicalGroup)+"</TD>");
                        sbAttribuesInfo.append("</TR>");
                        //Modified by DSM(Sogeti)- 2018x.5 for Defect 33366 Start
                        if(pgV3Constants.TYPE_RAWMATERIALPART.equalsIgnoreCase(strObjType)){
                            sbAttribuesInfo.append("<TR>");
                            sbAttribuesInfo.append("<TD align='left' width=\"250px\" ><B>Ingredient Class</B></TD>");
                            sbAttribuesInfo.append("<TD colspan=\"3\">"+validateString1(strIngredientClass)+"</TD>");
                            sbAttribuesInfo.append("</TR>");
                            sbAttribuesInfo.append("<TR>");
                            sbAttribuesInfo.append("<TD align='left' width=\"250px\" ><B>Flavor Cluster Rank</B></TD>");
                            sbAttribuesInfo.append("<TD colspan=\"3\">"+validateString1(strFlavorClusterRank)+"</TD>");
                            sbAttribuesInfo.append("</TR>");
                        }
                        if(pgV3Constants.TYPE_PGRAWMATERIAL.equalsIgnoreCase(strObjType)){
                            sbAttribuesInfo.append("<TR>");
                            sbAttribuesInfo.append("<TD align='left' width=\"250px\" ><B>Ingredient Class</B></TD>");
                            sbAttribuesInfo.append("<TD align='left' width=\"250px\">"+validateString1(strIngredientClass)+"</TD>");
                            sbAttribuesInfo.append("<TD align='left' width=\"250px\" ><B>Flavor Cluster Rank</B></TD>");
                            sbAttribuesInfo.append("<TD align='left' width=\"250px\">"+validateString1(strFlavorClusterRank)+"</TD>");
                            sbAttribuesInfo.append("</TR>");
                        }
                        //Modified by DSM(Sogeti)- 2018x.5 for Defect 33366 End
                        sbAttribuesInfo.append("</TABLE></TD></TR>");
                    }
                }
            }
        }
        return sbAttribuesInfo;
    }

    /**
     * Retrieve Profile Identification Table Data
     * @param context
     * @param args
     * @return
     * @throws MatrixException
     */
    //Method modified by DSM(Sogeti) 2018x.5 for PDF View Requirement and Defect 32126
    //Added by DSM(Sogeti)- 2015x.5.1 Oct Bug Fix PDF Views Defect - 20904 - Starts
    private StringBuilder getProfileIdentification(Context context,String strObjectId,String strPDFViewKind) throws Exception {
        //Added by DSM(Sogeti)- 2015x.5.1 Oct Bug Fix PDF Views Defect - 20904 - Ends
        StringBuilder sbAttribuesInfo = new StringBuilder();
        String strObjType = DomainConstants.EMPTY_STRING;
        String strINCIName = DomainConstants.EMPTY_STRING;
        String strChemicalName = DomainConstants.EMPTY_STRING;
        String strEmpiricalFormula = DomainConstants.EMPTY_STRING;
        String strStandardCostPerKg = DomainConstants.EMPTY_STRING;
        String strColorIndex = DomainConstants.EMPTY_STRING;
        String strPgCISPro = DomainConstants.EMPTY_STRING;
        String strPgExperimentalNumber = DomainConstants.EMPTY_STRING;
        String strPgPreferredMaterial = DomainConstants.EMPTY_STRING;
        String strPgMaterialUsageGuidance = DomainConstants.EMPTY_STRING;
        //Added by DSM for 2018x.5 PDF Views : Starts
        String strpgMaterialRestriction = DomainConstants.EMPTY_STRING;
        String strpgMaterialRestrictionComment = DomainConstants.EMPTY_STRING;
        //Added by DSM for 2018x.5 PDF Views : Starts

        if(validateString(strObjectId)) {
            StringList slObjectSelects = new StringList(13);
            slObjectSelects.addElement(pgV3Constants.SELECT_TYPE);
            slObjectSelects.addElement(pgV3Constants.SELECT_ATTRIBUTE_INCINAME);
            slObjectSelects.addElement(pgV3Constants.SELECT_ATTRIBUTE_CHEMICALNAME);
            slObjectSelects.addElement(pgV3Constants.SELECT_ATTRIBUTE_EMPIRICALFORMULA);
            slObjectSelects.addElement(pgV3Constants.SELECT_ATTRIBUTE_STANDARDCOSTPERKG);
            //Added by DSM-2018x.1.1 for PDF Views Numeric Attribute - Starts
            slObjectSelects.addElement(pgV3Constants.SELECT_ATTRIBUTE_STANDARDCOSTPERKG+".inputvalue");
            //Added by DSM-2018x.1.1 for PDF Views Numeric Attribute - Ends
            slObjectSelects.addElement(pgV3Constants.SELECT_ATTRIBUTE_COLORINDEX);

            //Modified by DSM(Sogeti)-2018x.0 for PDF Views Defect #24796 - Starts
            slObjectSelects.addElement(pgV3Constants.SELECT_ATTRIBUTE_PGRMCISPRONUMBER);
            //Modified by DSM(Sogeti)-2018x.0 for PDF Views Defect #24796 - Ends

            //Added by DSM for 2018x.5 PDF Views : Starts
            slObjectSelects.addElement(pgPDFViewConstants.SELECT_ATTRIBUTE_PGMATERIALRESTRICTION);
            slObjectSelects.addElement(pgPDFViewConstants.SELECT_ATTRIBUTE_PGMATERIALRESTRICTIONCOMMENT);
            //Added by DSM for 2018x.5 PDF Views : End

            slObjectSelects.addElement(pgV3Constants.SELECT_ATTRIBUTE_PGRMEXPERIMENTNUMBER);
            slObjectSelects.addElement(pgV3Constants.SELECT_ATTRIBUTE_PGPREFERREDMATERIAL);
            slObjectSelects.addElement(pgV3Constants.SELECT_ATTRIBUTE_PGMATERIALUSAGEGUIDANCE);
            DomainObject domainObject= DomainObject.newInstance(context,strObjectId);
            Map mpAttributeInfo = domainObject.getInfo(context, slObjectSelects);
            if(null!=mpAttributeInfo && !mpAttributeInfo.isEmpty()) {
                strObjType = (String) mpAttributeInfo.get(DomainConstants.SELECT_TYPE);
                strINCIName  = (String) mpAttributeInfo.get(pgV3Constants.SELECT_ATTRIBUTE_INCINAME);
                //Added by DSM(Sogeti)-2018x.0 for PDF Views Defect #24419 - Starts
                strINCIName = strINCIName.replaceAll("[<]","#LESS_THAN");
                //Added by DSM(Sogeti)-2018x.0 for PDF Views Defect #24419 - Ends
                strChemicalName  = (String) mpAttributeInfo.get(pgV3Constants.SELECT_ATTRIBUTE_CHEMICALNAME);
                //Added by DSM(Sogeti)-2018x.0 for PDF Views Defect #24419 - Starts
                strChemicalName = strChemicalName.replaceAll("[<]","#LESS_THAN");
                //Added by DSM(Sogeti)-2018x.0 for PDF Views Defect #24419 - Ends
                strEmpiricalFormula  = (String) mpAttributeInfo.get(pgV3Constants.SELECT_ATTRIBUTE_EMPIRICALFORMULA);
                //Added by DSM(Sogeti)-2018x.0 for PDF Views Defect #24419 - Starts
                strEmpiricalFormula = strEmpiricalFormula.replaceAll("[<]","#LESS_THAN");
                //Added by DSM(Sogeti)-2018x.0 for PDF Views Defect #24419 - Ends
                //Modified by DSM-2018x.1.1 for PDF Views Numeric Attribute - Starts
                if(strObjType.equalsIgnoreCase(pgV3Constants.TYPE_RAWMATERIALPART)){
                    strStandardCostPerKg = (String) mpAttributeInfo.get(pgV3Constants.SELECT_ATTRIBUTE_STANDARDCOSTPERKG+".inputvalue");
                } else {
                    strStandardCostPerKg = (String) mpAttributeInfo.get(pgV3Constants.SELECT_ATTRIBUTE_STANDARDCOSTPERKG);
                }
                //Modified by DSM-2018x.1.1 for PDF Views Numeric Attribute - Ends
                strColorIndex = (String) mpAttributeInfo.get(pgV3Constants.SELECT_ATTRIBUTE_COLORINDEX);
                //Added by DSM(Sogeti)-2018x.0 for PDF Views Defect #24419 - Starts
                strColorIndex = strColorIndex.replaceAll("[<]","#LESS_THAN");
                //Added by DSM(Sogeti)-2018x.0 for PDF Views Defect #24419 - Ends

                //Modified by DSM(Sogeti)-2018x.0 for PDF Views Defect #24796 - Starts
                strPgCISPro  = (String) mpAttributeInfo.get(pgV3Constants.SELECT_ATTRIBUTE_PGRMCISPRONUMBER);
                //Modified by DSM(Sogeti)-2018x.0 for PDF Views Defect #24796 - Ends

                //Added by DSM(Sogeti)-2018x.0 for PDF Views Defect #24419 - Starts
                strPgCISPro = strPgCISPro.replaceAll("[<]","#LESS_THAN");
                //Added by DSM(Sogeti)-2018x.0 for PDF Views Defect #24419 - Ends
                strPgExperimentalNumber  = (String) mpAttributeInfo.get(pgV3Constants.SELECT_ATTRIBUTE_PGRMEXPERIMENTNUMBER);
                //Added by DSM(Sogeti)-2018x.0 for PDF Views Defect #24419 - Starts
                strPgExperimentalNumber = strPgExperimentalNumber.replaceAll("[<]","#LESS_THAN");
                //Added by DSM(Sogeti)-2018x.0 for PDF Views Defect #24419 - Ends
                strPgPreferredMaterial  = (String) mpAttributeInfo.get(pgV3Constants.SELECT_ATTRIBUTE_PGPREFERREDMATERIAL);
                strPgMaterialUsageGuidance = (String) mpAttributeInfo.get(pgV3Constants.SELECT_ATTRIBUTE_PGMATERIALUSAGEGUIDANCE);
                //Added by DSM(Sogeti)-2018x.0 for PDF Views Defect #24419 - Starts
                strPgMaterialUsageGuidance = strPgMaterialUsageGuidance.replaceAll("[<]","#LESS_THAN");
                //Added by DSM(Sogeti)-2018x.0 for PDF Views Defect #24419 - Ends

                //Added by DSM for 2018x.5 PDF Views : Starts
                strpgMaterialRestriction  = (String) mpAttributeInfo.get(pgPDFViewConstants.SELECT_ATTRIBUTE_PGMATERIALRESTRICTION);
                strpgMaterialRestrictionComment  = (String) mpAttributeInfo.get(pgPDFViewConstants.SELECT_ATTRIBUTE_PGMATERIALRESTRICTIONCOMMENT);
                //Added by DSM for 2018x.5 PDF Views : End
                if(strObjType.equalsIgnoreCase(pgV3Constants.TYPE_PGRAWMATERIAL) || strObjType.equalsIgnoreCase(pgV3Constants.TYPE_RAWMATERIALPART)) {

                    sbAttribuesInfo.append("<TR><TD><TABLE class=\"WordWrappdf\" cellspacing=\"0\" width=\"1000px\" id=\"ProfileIdentification\">");

                    sbAttribuesInfo.append("<thead><TR><TD colspan='2' class=\"new\" ><font size='4'><b>Profile/Identification<br /></b></font></TD></TR></thead>");
                    sbAttribuesInfo.append("<TR>");

                    sbAttribuesInfo.append("<TR>");
                    sbAttribuesInfo.append("<TD align='left' width=\"250px\"><B>INCI Name</B></TD>");
                    sbAttribuesInfo.append("<TD align='left' width=\"250px\">"+validateString1(strINCIName)+"</TD>");
                    sbAttribuesInfo.append("<TD align='left' width=\"250px\"><B>Chemical Name</B></TD>");
                    sbAttribuesInfo.append("<TD align='left' width=\"250px\">"+validateString1(strChemicalName)+"</TD>");
                    sbAttribuesInfo.append("</TR>");

                    sbAttribuesInfo.append("<TR>");
                    sbAttribuesInfo.append("<TD align='left' width=\"250px\"><B>Empirical Formula</B></TD>");
                    sbAttribuesInfo.append("<TD align='left' width=\"250px\">"+validateString1(strEmpiricalFormula)+"</TD>");
                    sbAttribuesInfo.append("<TD align='left' width=\"250px\"><B>Color Index</B></TD>");
                    sbAttribuesInfo.append("<TD align='left' width=\"250px\">"+validateString1(strColorIndex)+"</TD>");
                    sbAttribuesInfo.append("</TR>");

                    sbAttribuesInfo.append("<TR>");
                    sbAttribuesInfo.append("<TD align='left' width=\"250px\"><B>CISPro #</B></TD>");
                    sbAttribuesInfo.append("<TD align='left' width=\"250px\">"+validateString1(strPgCISPro)+"</TD>");
                    sbAttribuesInfo.append("<TD align='left' width=\"250px\"><B>Experimental Number</B></TD>");
                    sbAttribuesInfo.append("<TD align='left' width=\"250px\">"+validateString1(strPgExperimentalNumber)+"</TD>");
                    sbAttribuesInfo.append("</TR>");

                    sbAttribuesInfo.append("<TR>");
                    sbAttribuesInfo.append("<TD align='left' width=\"250px\"><B>Preferred Material</B></TD>");
                    sbAttribuesInfo.append("<TD align='left' width=\"250px\">"+validateString1(strPgPreferredMaterial)+"</TD>");
                    sbAttribuesInfo.append("<TD align='left' width=\"250px\" ><B>Material Usage Guidance</B></TD>");
                    sbAttribuesInfo.append("<TD width=\"250px\">"+validateString1(strPgMaterialUsageGuidance)+"</TD>");
                    sbAttribuesInfo.append("</TR>");
                    sbAttribuesInfo.append("</TR>");
                    //Modified DSM-2018x.5 for PDF Views (Req Id #32877,32647) : Starts
                    sbAttribuesInfo.append("</TABLE></TD></TR>");

                }
                //Modify Code Refactoring
                mpAttributeInfo.clear();
            }
        }
        return sbAttribuesInfo;
    }
    //Added by DSM(Sogeti)-2015x.5.1 for PDF Views Requirements - Ends

    //Added by DSM(Sogeti)-2018x.1.1 for PDF Views Requirements - Starts
    /**
     * Retrieve UFI(Unique Formula Identifier) Table Data
     * @param context
     * @param args
     * @return
     * @throws MatrixException
     */
    private StringBuilder getUFIData(Context context,String strObjectId) throws Exception{
        StringBuilder sbUFIInfo = new StringBuilder();
        try{
            String strUFIforChild = DomainConstants.EMPTY_STRING;
            String strUFIObj = DomainConstants.EMPTY_STRING;
            Map mpObjMap = null;
            MapList mlUFI = new MapList();
            Map mpUFIDetails = null;
            if(validateString(strObjectId)) {
                Map paramMap = new HashMap();
                paramMap.put("objectId",strObjectId);

                Map progamMap = new HashMap();
                progamMap.put("paramMap",paramMap);

                String[] args = JPO.packArgs(progamMap);
//				pgIPMProductData_mxJPO objIPMPD = new pgIPMProductData_mxJPO(context, args);
//				MapList mlGCASObjects= objIPMPD.getTopLevelObjectforFPP(context, args);
//Added for PDF Refactor
                MapList mlGCASObjects= (MapList)pgPDFViewHelper.executeMainClassMethod(context, "pgIPMProductData", "getTopLevelObjectforFPP", args);
                if(!mlGCASObjects.isEmpty()){
                    for (int i = 0;i< mlGCASObjects.size(); i++){
                        mpObjMap = (Map) mlGCASObjects.get(i);
                        strUFIforChild = (String)mpObjMap.get(pgV3Constants.SELECT_ATTRIBUTE_PGUNIQUEFORUMULAIDENTIFIER);
                        strUFIObj = (String)mpObjMap.get(DomainConstants.SELECT_NAME);
                        if(UIUtil.isNotNullAndNotEmpty(strUFIforChild)) {
                            mpUFIDetails = new HashMap();
                            mpUFIDetails.put(pgV3Constants.SELECT_ATTRIBUTE_PGUNIQUEFORUMULAIDENTIFIER, strUFIforChild);
                            mpUFIDetails.put(DomainConstants.SELECT_NAME, strUFIObj);
                            mlUFI.add(mpUFIDetails);
                        }
                    }
                }
                if(!mlUFI.isEmpty() && mlUFI.size() > 0) {
                    sbUFIInfo.append("<TR><TD><TABLE class=\"WordWrappdf\" cellspacing=\"0\" width=\"1000px\" id=\"UFIDetails\">");
                    sbUFIInfo.append("<thead>");
                    sbUFIInfo.append("<TR><TD class=\"new\" colspan='2'><font size='4'><b>Unique Formula Identifier</b></font></TD></TR>");
                    sbUFIInfo.append("<TR>");
                    sbUFIInfo.append("<TH  width=\"500\" align=\"center\"><B>Unique Formula Identifier </B></TH>");
                    sbUFIInfo.append("<TH  width=\"500\" align=\"center\"><B>Unique Formula Identifier Object</B></TH>");
                    sbUFIInfo.append("</TR>");
                    sbUFIInfo.append("</thead>");
                    sbUFIInfo.append("<tbody>");
                    for (int i = 0;i< mlUFI.size(); i++){
                        mpObjMap = (Map) mlUFI.get(i);
                        strUFIforChild = (String)mpObjMap.get(pgV3Constants.SELECT_ATTRIBUTE_PGUNIQUEFORUMULAIDENTIFIER);
                        strUFIObj = (String)mpObjMap.get(DomainConstants.SELECT_NAME);
                        sbUFIInfo.append("<TR align=\"center\" class=\"pdf\">");
                        sbUFIInfo.append("<TD align=\"center\" width=\"150\">"+validateString1(strUFIforChild)+"</TD>");
                        sbUFIInfo.append("<TD align=\"center\" width=\"850\">"+validateString1(strUFIObj)+"</TD>");
                        sbUFIInfo.append("</TR>");
                    }
                    sbUFIInfo.append("</tbody>");
                    sbUFIInfo.append("</TABLE><TR><TD><br /></TD></TR></TD></TR>");
                }
            }
        } catch (Exception e){
            throw new MatrixException(e);
        }
        return sbUFIInfo;
    }

    //Added by DSM(Sogeti)-2018x.1.1 for PDF Views Requirements - Ends

    //Start Code Refactoring
    Map argmapPUT=new HashMap();
    HashMap	paramList=new HashMap();
    Map columnMap = new  HashMap();
    Map settingMap = new  HashMap();
    public String[] getArgsMapData(MapList commomML,String CPNFieldTypeValue){
        String[] argsData=null;
        try
        {
            argmapPUT.clear();
            paramList.clear();
            columnMap.clear();
            settingMap.clear();
            argmapPUT.put("objectList", commomML);
            paramList = new HashMap();
            paramList.put("languageStr","Stren");
            argmapPUT.put("paramList", paramList);
            settingMap.put("CPNFieldType",CPNFieldTypeValue);
            columnMap.put("settings",settingMap);
            argmapPUT.put("columnMap", columnMap);
            argmapPUT.put("reportFormat","CSV");
            argsData= JPO.packArgs(argmapPUT);
        }
        catch(Exception e)
        {
            System.out.println("Exception in getArgsMapData Method ! "+e.getMessage());
        }
        return argsData;
    }
    //End Code Refactoring

    //Added by DSM(Sogeti)-2018x.1.1 for PDF Views Defect# 26791  - Starts
    public static String wrapStringInTable(String strwordWrap) throws Exception{
        StringBuilder sb = new StringBuilder();
        int iFirstFullStopIndex = 12;
        try{
            if (strwordWrap != null && (strwordWrap.length() > 12)){
                while(strwordWrap.length() > 12){
                    sb.append(strwordWrap.substring(0, 12));
                    sb.append("<br></br>");
                    strwordWrap = strwordWrap.substring(iFirstFullStopIndex);
                }
                if(strwordWrap.length() > 0){
                    sb.append(strwordWrap);
                }
                strwordWrap = sb.toString();
            }
        }catch(Exception ex){
            ex.printStackTrace();
        }
        return strwordWrap;
    }
    //Added by DSM(Sogeti)-2018x.1.1 for PDF Views Defect# 26791  - Ends

    //Added by DSM-2018x.1.1 for PDF Views (Req Id #27399 ) : Start
    /**
     * This method will return true if isAuthorizedToProduce is true
     * @param context
     * @param args
     * @return
     * @throws MatrixException
     */
    private boolean isAuthorizedToProduce(Context context,DomainObject domObjectId) throws Exception{
        boolean isAuthorizeToProduce = false;
        try {
            Map mapPlantData	=	null;
            String authorizeToProduce = DomainConstants.EMPTY_STRING;
            String plantId = DomainConstants.EMPTY_STRING;
            String personId = DomainConstants.EMPTY_STRING;

            StringList objectSelects = new StringList(2);
            objectSelects.add(DomainConstants.SELECT_ID);
            objectSelects.add(DomainConstants.SELECT_REVISION);

            StringList relSelects = new StringList(1);
            relSelects.add("attribute["+pgV3Constants.ATTRIBUTE_PGISAUTHORIZEDTOPRODUCE+"]");
            MapList mlPlantData = domObjectId.getRelatedObjects(context,pgV3Constants.RELATIONSHIP_MANUFACTURINGRESPONSIBILITY,pgV3Constants.TYPE_PLANT,objectSelects,relSelects, true, false, (short) 1, null, null, 0);
            if(mlPlantData != null && mlPlantData.size()>0)
            {
                personId = PersonUtil.getPersonObjectID(context);
                Iterator iteratorPlant = mlPlantData.iterator();
                while (iteratorPlant.hasNext())
                {
                    mapPlantData = (Map)iteratorPlant.next();
                    authorizeToProduce = (String)mapPlantData.get("attribute["+pgV3Constants.ATTRIBUTE_PGISAUTHORIZEDTOPRODUCE+"]");
                    plantId = (String)mapPlantData.get(DomainConstants.SELECT_ID);

                    if("TRUE".equals(authorizeToProduce) && DomainObject.multiLevelRecursionCheck(context,personId,plantId,pgV3Constants.RELATIONSHIP_MEMBER,false))
                    {
                        isAuthorizeToProduce = true;
                        //Modified by DSM for PDF view 2018x.3 Defect - 31167 - Starts
                        //break;
                        //Modified by DSM for PDF view 2018x.3 Defect - 31167 - Ends
                    }
                }
            }//Modified by DSM for PDF view 2018x.3 Defect - 31167 - Starts
            if(!context.isAssigned(pgV3Constants.ROLE_PGCONTRACTMANUFACTURER)) {
                isAuthorizeToProduce = true;
            }
            //Modified by DSM for PDF view 2018x.3 Defect - 31167 - Ends
        } catch(Exception exception) {
            throw exception;
        }
        return isAuthorizeToProduce;
    }
    //Added by DSM-2018x.1.1 for PDF Views (Req Id #27399 ) : Ends

//Added by DSM-2018x.2 for PDF Views Requirement : Starts
    /**
     * This method will return DGC Table
     * @param context
     * @param Part objectID
     * @return StringBuilder
     * @throws MatrixException
     */
    private StringBuilder getDGCTable(Context context,String strObjectId) throws Exception {
        StringBuilder sbDGCData = new StringBuilder();
        String strNo = DomainConstants.EMPTY_STRING;
        String strDGDescription =  DomainConstants.EMPTY_STRING;
        String strUNNumber = DomainConstants.EMPTY_STRING;
        String strProperShippingName = DomainConstants.EMPTY_STRING;
        String strHazardClass =  DomainConstants.EMPTY_STRING;
        String strPackingGroup =  DomainConstants.EMPTY_STRING;
        String strShipmentLtdQty  =  DomainConstants.EMPTY_STRING;
        String strMaxCUSize = DomainConstants.EMPTY_STRING;
        String strCOWeightVol = DomainConstants.EMPTY_STRING;
        String strCUWeightVol = DomainConstants.EMPTY_STRING;
        String strDGLabelReq = DomainConstants.EMPTY_STRING;
        String strDGCOPLabelReq = DomainConstants.EMPTY_STRING;
        String strDGCUPLabelReq = DomainConstants.EMPTY_STRING;
        StringList slstrHazardClass =  new StringList();
        StringList slstrPackingGroup =  new StringList();
        try{
            DomainObject dObj= DomainObject.newInstance(context,strObjectId);
            String strParentTaskId = dObj.getInfo(context,"from["+pgV3Constants.TYPE_PGDANGEROUSGOODS+"].to."+DomainConstants.SELECT_ID);

            if(validateString(strParentTaskId))
            {
                StringList slObjectSelects = new StringList(13);
                slObjectSelects.add(DomainConstants.SELECT_NAME);
                slObjectSelects.add(DomainConstants.SELECT_DESCRIPTION);
                slObjectSelects.add(pgV3Constants.SELECT_ATTRIBUTE_PGPUNNUMBER);
                slObjectSelects.add(pgV3Constants.SELECT_ATTRIBUTE_PGPROPERSHIPPINGNAME);
                slObjectSelects.add(pgV3Constants.SELECT_ATTRIBUTE_PGSHIPMENTLIMITEDQUANTITY);
                slObjectSelects.add(pgV3Constants.SELECT_ATTRIBUTE_PGCONSUMERWEIGHTVOLUME);
                slObjectSelects.add(pgV3Constants.SELECT_ATTRIBUTE_PGCUSTOMERWEIGHTVOLUME);
                //slObjectSelects.add(pgV3Constants.SELECT_ATTRIBUTE_PGDGLABELREQUIREMENTS);
                slObjectSelects.add(pgV3Constants.SELECT_ATTRIBUTE_PGOTHERPACKAGINGREQUIREMENTS);
                slObjectSelects.add(pgV3Constants.SELECT_ATTRIBUTE_PGDGCOPLABELREQUIRED);
                slObjectSelects.add(pgV3Constants.SELECT_ATTRIBUTE_PGDGCUPLABELREQUIRED);
                slObjectSelects.add(pgV3Constants.SELECT_HAZARDCLASS);
                slObjectSelects.add(pgV3Constants.SELECT_PACKINGGROUP);
                slObjectSelects.add(pgV3Constants.SELECT_ATTRIBUTE_PGMAXCONSUMERUNITSIZE);

                DomainObject domainObjectDGC= DomainObject.newInstance(context,strParentTaskId);
                Map mpAttributeInfo = domainObjectDGC.getInfo(context, slObjectSelects);
                slstrHazardClass = domainObjectDGC.getInfoList(context,pgV3Constants.SELECT_HAZARDCLASS);
                if(slstrHazardClass != null && slstrHazardClass.size()>0) {
                    strHazardClass = FrameworkUtil.join(slstrHazardClass," ,");
                }

                slstrPackingGroup = domainObjectDGC.getInfoList(context,pgV3Constants.SELECT_PACKINGGROUP);
                if(slstrPackingGroup != null && slstrPackingGroup.size()>0) {
                    strPackingGroup = FrameworkUtil.join(slstrPackingGroup," ,");
                }
                strNo = (String) mpAttributeInfo.get(DomainConstants.SELECT_NAME);
                strDGDescription = (String) mpAttributeInfo.get(DomainConstants.SELECT_DESCRIPTION);
                strUNNumber = (String) mpAttributeInfo.get(pgV3Constants.SELECT_ATTRIBUTE_PGPUNNUMBER);
                strProperShippingName = (String) mpAttributeInfo.get(pgV3Constants.SELECT_ATTRIBUTE_PGPROPERSHIPPINGNAME);
                strShipmentLtdQty = (String) mpAttributeInfo.get(pgV3Constants.SELECT_ATTRIBUTE_PGSHIPMENTLIMITEDQUANTITY);
                strShipmentLtdQty = setYesNo(strShipmentLtdQty);
                strCOWeightVol = (String) mpAttributeInfo.get(pgV3Constants.SELECT_ATTRIBUTE_PGCONSUMERWEIGHTVOLUME);
                strCUWeightVol = (String) mpAttributeInfo.get(pgV3Constants.SELECT_ATTRIBUTE_PGCUSTOMERWEIGHTVOLUME);
                //strDGLabelReq = (String) mpAttributeInfo.get(pgV3Constants.SELECT_ATTRIBUTE_PGDGLABELREQUIREMENTS);
                strDGLabelReq = (String) mpAttributeInfo.get(pgV3Constants.SELECT_ATTRIBUTE_PGOTHERPACKAGINGREQUIREMENTS);
                strDGCOPLabelReq = (String) mpAttributeInfo.get(pgV3Constants.SELECT_ATTRIBUTE_PGDGCOPLABELREQUIRED);
                strDGCUPLabelReq = (String) mpAttributeInfo.get(pgV3Constants.SELECT_ATTRIBUTE_PGDGCUPLABELREQUIRED);
                strMaxCUSize = (String) mpAttributeInfo.get(pgV3Constants.SELECT_ATTRIBUTE_PGMAXCONSUMERUNITSIZE);
                strMaxCUSize = setYesNo(strMaxCUSize);

                sbDGCData.append("<TR><TD><TABLE class=\"WordWrappdf\" cellspacing=\"0\" width=\"1000px\" id=\"DGCData\">");
                sbDGCData.append("<thead>");
                sbDGCData.append("<TR><TD class=\"new\" colspan='2'><font size='4'><b>Dangerous Goods Classification</b></font></TD></TR>");
                sbDGCData.append("</thead>");
                sbDGCData.append("<tbody>");

                sbDGCData.append("<TR>");
                sbDGCData.append("<TD align='left' width=\"250px\"><B>No.</B></TD>");
                sbDGCData.append("<TD align='left' colspan='3'>"+validateString1(strNo)+"</TD>");
                sbDGCData.append("</TR>");


                sbDGCData.append("<TR>");
                sbDGCData.append("<TD align='left' width=\"250px\"><B>DG Description</B></TD>");
                sbDGCData.append("<TD align='left' colspan='3'>"+validateString1(strDGDescription)+"</TD>");
                sbDGCData.append("</TR>");

                sbDGCData.append("<TR>");
                sbDGCData.append("<TD align='left' width=\"250px\"><B>UN Number</B></TD>");
                sbDGCData.append("<TD align='left' width=\"250px\">"+validateString1(strUNNumber)+"</TD>");
                sbDGCData.append("<TD align='left' width=\"250px\"><B>Proper Shipping Name</B></TD>");
                sbDGCData.append("<TD align='left' width=\"250px\">"+validateString1(strProperShippingName)+"</TD>");
                sbDGCData.append("</TR>");

                sbDGCData.append("<TR>");
                sbDGCData.append("<TD align='left' width=\"250px\"><B>Hazard Class</B></TD>");
                sbDGCData.append("<TD align='left' width=\"250px\">"+validateString1(strHazardClass)+"</TD>");
                sbDGCData.append("<TD align='left' width=\"250px\"><B>Packaging Group </B></TD>");
                sbDGCData.append("<TD align='left' width=\"250px\">"+validateString1(strPackingGroup)+"</TD>");
                sbDGCData.append("</TR>");

                sbDGCData.append("<TR> </TR>");

                sbDGCData.append("<TR>");
                sbDGCData.append("<TD align='left' colspan='4'><B>Packaging Requirements</B></TD>");
                sbDGCData.append("</TR>");

                sbDGCData.append("<TR>");
                sbDGCData.append("<TD align='left' width=\"250px\"><B>Product can be Shipped as a Limited Quantity by Ground/Vessel</B></TD>");
                sbDGCData.append("<TD align='left' width=\"250px\">"+validateString1(strShipmentLtdQty)+"</TD>");
                sbDGCData.append("<TD align='left' width=\"250px\"><B>UN Specification Packaging</B></TD>");
                sbDGCData.append("<TD align='left' width=\"250px\">"+validateString1(strMaxCUSize)+"</TD>");
                sbDGCData.append("</TR>");

                sbDGCData.append("<TR>");
                sbDGCData.append("<TD align='left' width=\"250px\"><B>Max Consumer Unit Part Weight/Volume</B></TD>");
                sbDGCData.append("<TD align='left' width=\"250px\">"+validateString1(strCOWeightVol)+"</TD>");
                sbDGCData.append("<TD align='left' width=\"250px\"><B>Max Customer Unit Part Weight/Volume</B></TD>");
                sbDGCData.append("<TD align='left' width=\"250px\">"+validateString1(strCUWeightVol)+"</TD>");
                sbDGCData.append("</TR>");

                sbDGCData.append("<TR> </TR>");

                sbDGCData.append("<TR>");
                sbDGCData.append("<TD align='left' colspan='4'><B>Other Packaging Requirements</B></TD>");
                sbDGCData.append("</TR>");

                sbDGCData.append("<TR>");
                sbDGCData.append("<TD align='left' width=\"250px\"><B>DG Marks/Labels Requirements</B></TD>");
                sbDGCData.append("<TD align='left' width=\"250px\">"+validateString1(strDGLabelReq)+"</TD>");
                sbDGCData.append("<TD align='left' width=\"250px\"><B>DG Marks/Labels Required on Consumer Unit Part</B></TD>");
                sbDGCData.append("<TD align='left' width=\"250px\">"+validateString1(strDGCUPLabelReq)+"</TD>");
                sbDGCData.append("</TR>");

                sbDGCData.append("<TR>");
                sbDGCData.append("<TD align='left' width=\"250px\"><B>DG Marks/Labels Required on Custumer Unit Part</B></TD>");
                sbDGCData.append("<TD align='left' colspan='3'>"+validateString1(strDGCOPLabelReq)+"</TD>");
                sbDGCData.append("</TR>");

                sbDGCData.append("</tbody>");
                sbDGCData.append("</TABLE><TR><TD><br /></TD></TR></TD></TR>");
            }
        } catch(Exception e) {
            throw new MatrixException(e);
        }
        return sbDGCData;
    }

    /**
     * This method will Certification tabel for type ARMP and Raw Material Type
     * @param context
     * @param Part objectID
     * @return StringBuilder
     * @throws MatrixException
     * Modified  by DSM(Sogeti)-2018x.6 for PDF Views requirements#41201 - Starts
     */
    private StringBuilder getARCertificationEquivalentTable(Context context, String strObjectId,String strPDFViewType) throws Exception {
        long startTime = new Date().getTime();
        StringBuilder sbEnterprisePartsTable = new StringBuilder();
        String sCertification = "from["+pgV3Constants.RELATIONSHIP_PG_PLI_MATERIAL_CERTIFICATIONS+"].to.name";

        StringList objectSelects = new StringList(10);
        objectSelects.add(DomainConstants.SELECT_NAME);
        objectSelects.add(DomainConstants.SELECT_REVISION);
        objectSelects.add(DomainConstants.SELECT_TYPE);
        objectSelects.add(DomainConstants.SELECT_DESCRIPTION);
        objectSelects.add(DomainConstants.SELECT_CURRENT);
        objectSelects.add(DomainConstants.SELECT_POLICY);
        objectSelects.add("to["+pgV3Constants.RELATIONSHIP_MANUFACTURINGRESPONSIBILITY+"].from.name");
        objectSelects.add("to["+pgV3Constants.RELATIONSHIP_SUPPLYRESPONSIBILITY+"].from.name");
        objectSelects.add(DomainConstants.SELECT_ID);
        objectSelects.add(sCertification);

        String sRelSelectReachStatus = "frommid["+pgV3Constants.RELATIONSHIP_PGMEPSEPCERTIFICATION+"].attribute["+pgPDFViewConstants.ATTRIBUTE_PGCERTFICATIONSTATUS+"]";
        String sRelSelectExpirationDate = "frommid["+pgV3Constants.RELATIONSHIP_PGMEPSEPCERTIFICATION+"].attribute["+pgV3Constants.ATTRIBUTE_EXPIRATION_DATE+"]";
        String sRelCertificationName = "frommid["+pgV3Constants.RELATIONSHIP_PGMEPSEPCERTIFICATION+"].torel.to.name";
        String sRelCertificationId = "frommid["+pgV3Constants.RELATIONSHIP_PGMEPSEPCERTIFICATION+"].id";
        String sRelCertificationSource = "frommid["+pgV3Constants.RELATIONSHIP_PGMEPSEPCERTIFICATION+"].torel.from.name";
        StringList relSelects = new StringList(4);
        relSelects.add(sRelSelectReachStatus);
        relSelects.add(sRelSelectExpirationDate);
        relSelects.add(sRelCertificationName);
        relSelects.add(sRelCertificationId);
        relSelects.add(sRelCertificationSource);
        try{
            if(validateString(strObjectId))
            {
                DomainObject domObjectId = DomainObject.newInstance(context,strObjectId);
                MapList mlEnterpisePart = domObjectId.getRelatedObjects(
                        context,   //Context
                        pgV3Constants.RELATIONSHIP_SUPPLIEREQUIVALENT+","+pgV3Constants.RELATIONSHIP_MANUFACTUREREQUIVALENT, //Relationship Pattern
                        pgV3Constants.TYPE_ANCILLARYRAWMATERIALPART+","+pgV3Constants.TYPE_RAWMATERIALPART, //Type Pattern
                        objectSelects,  //Object select
                        relSelects,     //relationshipSelects
                        false,	//getTo
                        true,	//getFrom
                        (short)1,	//recurseToLevel
                        "",	//objectWhere
                        ""  //relationshipWhere
                );

                if(mlEnterpisePart != null && mlEnterpisePart.size()>0 ){
                    int nMapEnterprise = mlEnterpisePart.size();

                    String strPartName = DomainConstants.EMPTY_STRING;
                    String strPartRevision  = DomainConstants.EMPTY_STRING;
                    String strPartType  = DomainConstants.EMPTY_STRING;
                    String strPartDescription  = DomainConstants.EMPTY_STRING;
                    String strManufacturer = new String();
                    String strSupplier = new String();
                    String strPartState  = DomainConstants.EMPTY_STRING;
                    String strExpirationDate = DomainConstants.EMPTY_STRING;
                    String strCertification = DomainConstants.EMPTY_STRING;
                    String smanufa = DomainConstants.EMPTY_STRING;
                    String strStatus = DomainConstants.EMPTY_STRING;
                    String strCertificationSource = DomainConstants.EMPTY_STRING;
                    //Modified by DSM(Sogeti)-2018x.5 for PDF Views requirements - Starts
                    String strPolicy = DomainConstants.EMPTY_STRING;
                    //Modified by DSM(Sogeti)-2018x.5 for PDF Views requirements - Ends
                    int nSlCertification = 0;
                    Map mpConnectedEnterpriseParts = null;
                    sbEnterprisePartsTable.append("<tr><td><table class=\"pdf\" cellspacing=\"0\" width=\"1000px\" id=\"pgFinishedProductTable\">");
                    sbEnterprisePartsTable.append("<thead>");
                    if(pgPDFViewConstants.CONST_ALLINFO.equalsIgnoreCase(strPDFViewType)) {
                        sbEnterprisePartsTable.append("<tr><td colspan='10' class=\"new\" ><font size='4'><b>Certifications</b></font></td></tr>");
                        sbEnterprisePartsTable.append("<tr>");
                        sbEnterprisePartsTable.append("<th colspan='10' width=\"1000\" align=\"center\"><b>Manufacturer Equivalent Part/Supplier Equivalent Part Certifications</b></th>");
                        sbEnterprisePartsTable.append("</tr>");
                        sbEnterprisePartsTable.append("<tr>");
                        sbEnterprisePartsTable.append("<th colspan='6' align=\"center\"><b></b><br></br></th>");
                        sbEnterprisePartsTable.append("<th colspan='4' align=\"left\"><b>Certifications</b><br></br></th>");
                    }
                    else {
                        sbEnterprisePartsTable.append("<tr><td colspan='9' class=\"new\" ><font size='4'><b>Certifications</b></font></td></tr>");
                        sbEnterprisePartsTable.append("<tr>");
                        sbEnterprisePartsTable.append("<th colspan='9' width=\"1000\" align=\"center\"><b>Manufacturer Equivalent Part/Supplier Equivalent Part Certifications</b></th>");
                        sbEnterprisePartsTable.append("</tr>");
                        sbEnterprisePartsTable.append("<tr>");
                        sbEnterprisePartsTable.append("<th colspan='6' align=\"center\"><b></b><br></br></th>");
                        sbEnterprisePartsTable.append("<th colspan='3' align=\"left\"><b>Certifications</b><br></br></th>");
                    }

                    sbEnterprisePartsTable.append("</tr>");
                    sbEnterprisePartsTable.append("<tr>");
                    sbEnterprisePartsTable.append("<td width=\"125\" align=\"center\"><b>Name</b></td>");
                    sbEnterprisePartsTable.append("<td width=\"75\" align=\"center\"><b>Revision</b></td>");
                    sbEnterprisePartsTable.append("<td width=\"175\" align=\"center\"><b>Type</b></td>");
                    sbEnterprisePartsTable.append("<td width=\"100\" align=\"center\"><b>Description</b></td>");
                    sbEnterprisePartsTable.append("<td width=\"200\" align=\"center\"><b>Manufacturer</b></td>");
                    sbEnterprisePartsTable.append("<td width=\"125\" align=\"center\"><b>State</b></td>");
                    if(pgPDFViewConstants.CONST_ALLINFO.equalsIgnoreCase(strPDFViewType)) {
                        sbEnterprisePartsTable.append("<td width=\"125\" align=\"center\"><b>Certification Source</b></td>");
                    }
                    sbEnterprisePartsTable.append("<td width=\"125\" align=\"center\"><b>Certifications</b></td>");
                    sbEnterprisePartsTable.append("<td width=\"125\" align=\"center\"><b>Status</b></td>");
                    sbEnterprisePartsTable.append("<td width=\"125\" align=\"center\"><b>Expiration Date</b></td>");
                    sbEnterprisePartsTable.append("</tr>");
                    sbEnterprisePartsTable.append("</thead>");
                    boolean isCertificationrecordAvailable=false;
                    mlEnterpisePart.addSortKey("name", "ascending", "String");
                    mlEnterpisePart.sort();
                    for (int i = 0; i <nMapEnterprise; i++){
                        mpConnectedEnterpriseParts = (Map)mlEnterpisePart.get(i);
                        strPartState = (String)mpConnectedEnterpriseParts.get(DomainConstants.SELECT_CURRENT);
                        if(UIUtil.isNotNullAndNotEmpty(strPartState) && !strPartState.equals(pgV3Constants.STATE_OBSOLETE)){
                            //Modified by DSM(Sogeti)-2018x.5 for PDF Views requirements - Starts
                            strPolicy =(String)mpConnectedEnterpriseParts.get(DomainConstants.SELECT_POLICY);
                            strPartState = EnoviaResourceBundle.getStateI18NString(context, strPolicy,
                                    strPartState, context.getLocale().getLanguage());
                            //Modified by DSM(Sogeti)-2018x.5 for PDF Views requirements - Ends
                            strStatus = DomainConstants.EMPTY_STRING;
                            strCertification =  DomainConstants.EMPTY_STRING;
                            strExpirationDate = DomainConstants.EMPTY_STRING;
                            strPartName = (String)mpConnectedEnterpriseParts.get(DomainConstants.SELECT_NAME);
                            strPartRevision = (String)mpConnectedEnterpriseParts.get(pgV3Constants.SELECT_REVISION);
                            strPartType = (String)mpConnectedEnterpriseParts.get(pgV3Constants.SELECT_TYPE);
                            strPartType = EnoviaResourceBundle.getTypeI18NString(context, strPartType, context.getSession().getLanguage());
                            strPartDescription = (String)mpConnectedEnterpriseParts.get(DomainConstants.SELECT_DESCRIPTION);
                            strManufacturer =  convertObjectToString(mpConnectedEnterpriseParts.get("to["+pgV3Constants.RELATIONSHIP_MANUFACTURINGRESPONSIBILITY+"].from.name"));
                            strSupplier =  convertObjectToString(mpConnectedEnterpriseParts.get("to["+pgV3Constants.RELATIONSHIP_SUPPLYRESPONSIBILITY+"].from.name"));
                            StringList slStatus =  convertObjectToStringList(mpConnectedEnterpriseParts.get(sRelSelectReachStatus));
                            StringList slExpirationDate = convertObjectToStringList(mpConnectedEnterpriseParts.get(sRelSelectExpirationDate));
                            StringList slCertificationName = convertObjectToStringList(mpConnectedEnterpriseParts.get(sRelCertificationName));
                            StringList slCertification = convertObjectToStringList(mpConnectedEnterpriseParts.get(sRelCertificationId));
                            StringList slCertificationSource = convertObjectToStringList(mpConnectedEnterpriseParts.get(sRelCertificationSource));
                            if(UIUtil.isNotNullAndNotEmpty(strManufacturer)){
                                smanufa = strManufacturer;
                            } else {
                                smanufa = strSupplier;
                            }
                            if(slCertification != null && slCertification.size()>0 ){
                                isCertificationrecordAvailable=true;
                                nSlCertification = slCertification.size();
                                for(int j=0;j<nSlCertification ;j++) {
                                    strCertification = (String) slCertificationName.get(j);
                                    strCertificationSource = slCertificationSource.get(j);
                                    strStatus = (String) slStatus.get(j);
                                    strExpirationDate = (String) slExpirationDate.get(j);
                                    sbEnterprisePartsTable.append("<tr>");
                                    sbEnterprisePartsTable.append("<td align=\"center\" width=\"125\">"+validateString1(strPartName)+"</td>");
                                    sbEnterprisePartsTable.append("<td align=\"center\" width=\"75\">"+validateString1(strPartRevision)+"</td>");
                                    sbEnterprisePartsTable.append("<td align=\"center\" width=\"175\">"+validateString1(strPartType)+"</td>");
                                    sbEnterprisePartsTable.append("<td align=\"center\" width=\"500\">"+validateString1(strPartDescription)+"</td>");
                                    sbEnterprisePartsTable.append("<td align=\"center\" width=\"500\">"+validateString1(smanufa)+"</td>");
                                    sbEnterprisePartsTable.append("<td align=\"center\" width=\"125\">"+validateString1(strPartState)+"</td>");
                                    if(pgPDFViewConstants.CONST_ALLINFO.equalsIgnoreCase(strPDFViewType)) {
                                        sbEnterprisePartsTable.append("<td align=\"center\" width=\"125\">"+validateString1(strCertificationSource)+"</td>");
                                    }
                                    sbEnterprisePartsTable.append("<td align=\"center\" width=\"125\">"+validateString1(strCertification)+"</td>");
                                    sbEnterprisePartsTable.append("<td align=\"center\" width=\"125\">"+validateString1(strStatus)+"</td>");
                                    sbEnterprisePartsTable.append("<td align=\"center\" width=\"125\">"+validateString1(strExpirationDate)+"</td>");
                                    sbEnterprisePartsTable.append("</tr>");
                                }

                            }
                        }
                    }
                    if(isCertificationrecordAvailable){
                        sbEnterprisePartsTable.append("</table><tr><td><br /></td></tr></td></tr>");
                    }else{
                        sbEnterprisePartsTable=new StringBuilder();
                    }
                }
            }
        }catch(Exception exception) {
            exception.printStackTrace();
            throw exception;
        }
        long endTime = new Date().getTime();
        System.out.println("Total Time has taken by the  getARCertificationEquivalentTable Method is-->"+(endTime-startTime));
        return sbEnterprisePartsTable;
    }


    /**
     * This method will Certification tabel for type MEP and SEP Type
     * @param context
     * @param Part objectID
     * @return
     * @throws MatrixException
     * Modified by DSM(Sogeti)-2018x.6 for PDF Views requirements#41200 - Starts
     */

    private StringBuilder getCertificationEquivalentTable(Context context, String strObjectId, String strPDFViewType) throws Exception {
        long startTime = new Date().getTime();
        StringBuilder sbEnterprisePartsTable = new StringBuilder();
        String sCertification = "to["+pgV3Constants.RELATIONSHIP_PG_PLI_MATERIAL_CERTIFICATIONS+"].from.name";

        StringList objectSelects = new StringList(8);
        objectSelects.add(DomainConstants.SELECT_NAME);
        objectSelects.add(DomainConstants.SELECT_REVISION);
        objectSelects.add(DomainConstants.SELECT_TYPE);
        objectSelects.add(DomainConstants.SELECT_DESCRIPTION);
        objectSelects.add(DomainConstants.SELECT_CURRENT);
        objectSelects.add(DomainConstants.SELECT_POLICY);
        objectSelects.add(DomainConstants.SELECT_ID);
        objectSelects.add(sCertification);

        String sRelSelectReachStatus = "frommid["+pgV3Constants.RELATIONSHIP_PGMEPSEPCERTIFICATION+"].attribute["+pgV3Constants.ATTRIBUTE_REACH_STATUS+"]";
        String sRelSelectExpirationDate = "frommid["+pgV3Constants.RELATIONSHIP_PGMEPSEPCERTIFICATION+"].attribute["+pgV3Constants.ATTRIBUTE_EXPIRATION_DATE+"]";
        String sRelCertificationName = "frommid["+pgV3Constants.RELATIONSHIP_PGMEPSEPCERTIFICATION+"].torel.to.name";
        String sRelCertificationId = "frommid["+pgV3Constants.RELATIONSHIP_PGMEPSEPCERTIFICATION+"].id";
        String sRelCertificationSource = "frommid["+pgV3Constants.RELATIONSHIP_PGMEPSEPCERTIFICATION+"].torel.from.name";
        StringList relSelects = new StringList(4);
        relSelects.add(sRelSelectReachStatus);
        relSelects.add(sRelSelectExpirationDate);
        relSelects.add(sRelCertificationName);
        relSelects.add(sRelCertificationId);
        relSelects.add(sRelCertificationSource);
        String hasChildAccess=DomainConstants.EMPTY_STRING;
        String strChildId=DomainConstants.EMPTY_STRING;
        MapList mlEnterpisePart =null;
        try{
            if(validateString(strObjectId))
            {
                DomainObject domObjectId = DomainObject.newInstance(context,strObjectId);
                try {
                    ContextUtil.pushContext(context, pgV3Constants.PERSON_USER_AGENT , "", "");
                    mlEnterpisePart = domObjectId.getRelatedObjects(
                            context,   //Context
                            pgV3Constants.RELATIONSHIP_SUPPLIEREQUIVALENT+","+pgV3Constants.RELATIONSHIP_MANUFACTUREREQUIVALENT, //Relationship Pattern
                            pgV3Constants.TYPE_ANCILLARYRAWMATERIALPART+","+pgV3Constants.TYPE_RAWMATERIALPART, //Type Pattern
                            objectSelects,  //Object select
                            relSelects,     //relationshipSelects
                            true,	//getTo
                            false,	//getFrom
                            (short)1,	//recurseToLevel
                            "",	//objectWhere
                            ""  //relationshipWhere
                    );
                }catch(Exception ex){
                    ex.printStackTrace();
                    throw ex;
                }finally {
                    ContextUtil.popContext(context);
                }
                mlEnterpisePart.addSortKey("name", "ascending", "String");
                mlEnterpisePart.sort();
                if(mlEnterpisePart != null && mlEnterpisePart.size()>0 ){
                    int nMapEnterprise = mlEnterpisePart.size();
                    int nSlCertification = 0;
                    String strPartName = DomainConstants.EMPTY_STRING;
                    String strPartRevision  = DomainConstants.EMPTY_STRING;
                    String strPartType  = DomainConstants.EMPTY_STRING;
                    String strPartDescription  = DomainConstants.EMPTY_STRING;
                    String strPartState  = DomainConstants.EMPTY_STRING;
                    String strCertification = DomainConstants.EMPTY_STRING;
                    String strExpirationDate = DomainConstants.EMPTY_STRING;
                    String strStatus = DomainConstants.EMPTY_STRING;
                    String strPolicy = DomainConstants.EMPTY_STRING;
                    String strCertificationSource = DomainConstants.EMPTY_STRING;
                    Map mpConnectedEnterpriseParts = (Map) mlEnterpisePart.get(0);
                    sbEnterprisePartsTable.append("<tr><td><table class=\"pdf\" cellspacing=\"0\" width=\"1000px\" id=\"pgFinishedProductTable\">");
                    sbEnterprisePartsTable.append("<thead>");
                    if(pgPDFViewConstants.CONST_ALLINFO.equalsIgnoreCase(strPDFViewType)) {
                        sbEnterprisePartsTable.append("<tr><td colspan='9' class=\"new\" ><font size='4'><b>Certifications</b></font></td></tr>");
                        sbEnterprisePartsTable.append("<tr>");
                        sbEnterprisePartsTable.append("<th colspan='9' width=\"1000\" align=\"center\"><b>Raw Material/Ancillary Raw Material Certifications</b></th>");
                        sbEnterprisePartsTable.append("</tr>");
                        sbEnterprisePartsTable.append("<tr>");
                        sbEnterprisePartsTable.append("<th colspan='5' align=\"center\"><b></b><br></br></th>");
                        sbEnterprisePartsTable.append("<th colspan='4' align=\"left\"><b>Certifications</b><br></br></th>");
                    }
                    else {
                        sbEnterprisePartsTable.append("<tr><td colspan='8' class=\"new\" ><font size='4'><b>Certifications</b></font></td></tr>");
                        sbEnterprisePartsTable.append("<tr>");
                        sbEnterprisePartsTable.append("<th colspan='8' width=\"1000\" align=\"center\"><b>Raw Material/Ancillary Raw Material Certifications</b></th>");
                        sbEnterprisePartsTable.append("</tr>");
                        sbEnterprisePartsTable.append("<tr>");
                        sbEnterprisePartsTable.append("<th colspan='5' align=\"center\"><b></b><br></br></th>");
                        sbEnterprisePartsTable.append("<th colspan='3' align=\"left\"><b>Certifications</b><br></br></th>");
                    }
                    sbEnterprisePartsTable.append("</tr>");
                    sbEnterprisePartsTable.append("<tr>");
                    sbEnterprisePartsTable.append("<td width=\"125\" align=\"center\"><b>Name</b></td>");
                    sbEnterprisePartsTable.append("<td width=\"75\" align=\"center\"><b>Revision</b></td>");
                    sbEnterprisePartsTable.append("<td width=\"175\" align=\"center\"><b>Type</b></td>");
                    sbEnterprisePartsTable.append("<td width=\"100\" align=\"center\"><b>Description</b></td>");
                    sbEnterprisePartsTable.append("<td width=\"125\" align=\"center\"><b>State</b></td>");
                    if(pgPDFViewConstants.CONST_ALLINFO.equalsIgnoreCase(strPDFViewType)) {
                        sbEnterprisePartsTable.append("<td width=\"125\" align=\"center\"><b>Certification Source</b></td>");
                    }
                    sbEnterprisePartsTable.append("<td width=\"125\" align=\"center\"><b>Certifications</b></td>");
                    sbEnterprisePartsTable.append("<td width=\"125\" align=\"center\"><b>Status</b></td>");
                    sbEnterprisePartsTable.append("<td width=\"125\" align=\"center\"><b>Expiration Date</b></td>");
                    sbEnterprisePartsTable.append("</tr>");
                    sbEnterprisePartsTable.append("</thead>");
                    boolean isCertificationrecordAvailable=false;

                    for (int i = 0; i <nMapEnterprise; i++){
                        mpConnectedEnterpriseParts = (Map)mlEnterpisePart.get(i);
                        strChildId = (String)mpConnectedEnterpriseParts.get(DomainConstants.SELECT_ID);
                        domObjectId= DomainObject.newInstance(context,strChildId);
                        hasChildAccess =domObjectId.getInfo(context, "current.access[read]");

                        if (!hasChildAccess.equals("#DENIED!")){
                            strPartState = (String)mpConnectedEnterpriseParts.get(DomainConstants.SELECT_CURRENT);
                            if(UIUtil.isNotNullAndNotEmpty(strPartState) && !strPartState.equals(pgV3Constants.STATE_OBSOLETE)){
                                strStatus = DomainConstants.EMPTY_STRING;
                                strCertification =  DomainConstants.EMPTY_STRING;
                                strExpirationDate = DomainConstants.EMPTY_STRING;
                                strPolicy =(String)mpConnectedEnterpriseParts.get(DomainConstants.SELECT_POLICY);
                                strPartState = EnoviaResourceBundle.getStateI18NString(context, strPolicy, strPartState, context.getLocale().getLanguage());
                                strPartName = (String)mpConnectedEnterpriseParts.get(DomainConstants.SELECT_NAME);
                                strPartRevision = (String)mpConnectedEnterpriseParts.get(pgV3Constants.SELECT_REVISION);
                                strPartType = (String)mpConnectedEnterpriseParts.get(pgV3Constants.SELECT_TYPE);
                                strPartType = EnoviaResourceBundle.getTypeI18NString(context, strPartType, context.getSession().getLanguage());
                                strPartDescription = (String)mpConnectedEnterpriseParts.get(DomainConstants.SELECT_DESCRIPTION);
                                StringList slStatus =  convertObjectToStringList(mpConnectedEnterpriseParts.get(sRelSelectReachStatus));
                                StringList slExpirationDate = convertObjectToStringList(mpConnectedEnterpriseParts.get(sRelSelectExpirationDate));
                                StringList slCertificationName = convertObjectToStringList(mpConnectedEnterpriseParts.get(sRelCertificationName));
                                StringList slCertification = convertObjectToStringList(mpConnectedEnterpriseParts.get(sRelCertificationId));
                                StringList slCertificationSource = convertObjectToStringList(mpConnectedEnterpriseParts.get(sRelCertificationSource));
                                if(slCertification != null && slCertification.size()>0 ){
                                    isCertificationrecordAvailable=true;
                                    nSlCertification = slCertification.size();
                                    for(int j=0;j<nSlCertification ;j++) {
                                        strCertification = (String) slCertificationName.get(j);
                                        strCertificationSource = slCertificationSource.get(j);
                                        strStatus = (String) slStatus.get(j);
                                        strExpirationDate = (String) slExpirationDate.get(j);
                                        sbEnterprisePartsTable.append("<tr>");
                                        sbEnterprisePartsTable.append("<td align=\"center\" width=\"125\">"+validateString1(strPartName)+"</td>");
                                        sbEnterprisePartsTable.append("<td align=\"center\" width=\"75\">"+validateString1(strPartRevision)+"</td>");
                                        sbEnterprisePartsTable.append("<td align=\"center\" width=\"175\">"+validateString1(strPartType)+"</td>");
                                        sbEnterprisePartsTable.append("<td align=\"center\" width=\"500\">"+validateString1(strPartDescription)+"</td>");
                                        sbEnterprisePartsTable.append("<td align=\"center\" width=\"125\">"+validateString1(strPartState)+"</td>");
                                        if(pgPDFViewConstants.CONST_ALLINFO.equalsIgnoreCase(strPDFViewType)) {
                                            sbEnterprisePartsTable.append("<td align=\"center\" width=\"125\">"+validateString1(strCertificationSource)+"</td>");
                                        }
                                        sbEnterprisePartsTable.append("<td align=\"center\" width=\"125\">"+validateString1(strCertification)+"</td>");
                                        sbEnterprisePartsTable.append("<td align=\"center\" width=\"125\">"+validateString1(strStatus)+"</td>");
                                        sbEnterprisePartsTable.append("<td align=\"center\" width=\"125\">"+validateString1(strExpirationDate)+"</td>");
                                        sbEnterprisePartsTable.append("</tr>");
                                    }
                                }
                            }
                        }
                    }
                    if(isCertificationrecordAvailable){
                        sbEnterprisePartsTable.append("</table><tr><td><br /></td></tr></td></tr>");
                    }else{
                        sbEnterprisePartsTable=new StringBuilder();
                    }
                }

            }
        } catch(Exception exception){
            exception.printStackTrace();
            throw exception;
        }

        long endTime = new Date().getTime();
        System.out.println("Total Time has taken by the  getCertificationEquivalentTable Method is-->"+(endTime-startTime));
        return sbEnterprisePartsTable;
    }

    /**
     * This method will return yes if string value set as false
     * and No if string value set as true
     * @param context
     * @param string
     * @return
     * @throws MatrixException
     */
    private String setYesNo(String strValue) {
        String strReturn = DomainConstants.EMPTY_STRING;
        try{
            if(strValue.equalsIgnoreCase("FALSE"))
                strReturn = "No";
            else if (strValue.equalsIgnoreCase("TRUE"))
                strReturn = "Yes";
        } catch(Exception exception){
            exception.printStackTrace();
            throw exception;
        }
        return strReturn;
    }

    /**
     * Retrive RolledUp Global Harmonized Standard Data
     * @param context
     * @param args
     * @return StringBuilder
     * @throws MatrixException
     */
    private StringBuilder getRolledUpGlobalHarmonizedStandardData(Context context, String strObjectId) throws Exception {
        StringBuilder sbGHSData = new StringBuilder();
        DomainObject domainObject = null;
        boolean isPushContext = false;
        ContextUtil.pushContext(context, pgV3Constants.PERSON_USER_AGENT , "", "");
        isPushContext = true;
        try {
            if(validateString(strObjectId)) {
                domainObject = DomainObject.newInstance(context, strObjectId);
                HashMap programMap  = new HashMap();

                programMap.put("objectId",strObjectId);
                programMap.put("type",pgV3Constants.TYPE_COPYLIST);
                String[] args=JPO.packArgs(programMap);
                JPO.unpackArgs(args);
                MapList mlGlobalHarmonziedStandardInfo=(MapList)pgPDFViewHelper.executeMainClassMethod(context, "pgFPPRollup", "getAllTableData",args );
                if (mlGlobalHarmonziedStandardInfo != null && !mlGlobalHarmonziedStandardInfo.isEmpty()) {
                    String copyListObjectId=DomainConstants.EMPTY_STRING;
                    String copyListObjectName = DomainConstants.EMPTY_STRING;
                    String copyListObjectState = DomainConstants.EMPTY_STRING;
                    String copyListObjectRevision = DomainConstants.EMPTY_STRING;
                    String copyListObjectDescription =DomainConstants.EMPTY_STRING;
                    String copyListObjectTitle = DomainConstants.EMPTY_STRING;
                    String copyListObjectContries = DomainConstants.EMPTY_STRING;
                    String copyListObjectLanguages = DomainConstants.EMPTY_STRING;
                    String strProdPhysicalId = DomainConstants.EMPTY_STRING;
                    String sProductPartName = DomainConstants.EMPTY_STRING;
                    String sRevision  = DomainConstants.EMPTY_STRING;
                    String sTitle = DomainConstants.EMPTY_STRING;
                    int imlEnterpisePart = mlGlobalHarmonziedStandardInfo.size();
                    StringList objectsSelect=new StringList(4);
                    objectsSelect.add(DomainConstants.SELECT_NAME);
                    objectsSelect.add(DomainConstants.SELECT_REVISION);
                    objectsSelect.add(pgV3Constants.SELECT_ATTRIBUTE_TITLE);
                    //Added by DSM ( Sogeti) for 2018x.5 PDF Defect - 33102 : Starts
                    objectsSelect.add(pgPDFViewConstants.PHYSICAL_ID);
                    //Added by DSM ( Sogeti) for 2018x.5 PDF Defect - 33102 : End
                    Map productPartInfo=null;
                    Map mpGHS =null;
                    //Modified by DSM ( Sogeti) for 2018x.5 PDF Defect - 33102 : Starts
                    Map mPhysicalProductDetails = new HashMap();
                    Set sPhysicalIds = new HashSet();
                    for (int k = 0; k < imlEnterpisePart; k++) {
                        mpGHS = (Map) mlGlobalHarmonziedStandardInfo.get(k);
                        strProdPhysicalId = convertObjectToString(mpGHS.get(pgV3Constants.SELECT_ATTRIBUTE_PGPRODUCTPARTPHYSICALID));
                        sPhysicalIds.add(strProdPhysicalId);
                    }
                    mPhysicalProductDetails = getProductDetailsWithPhysicalId(context, sPhysicalIds, objectsSelect);
                    //Modified by DSM ( Sogeti) for 2018x.5 PDF Defect - 33102 : Ends
                    sbGHSData.append("<TR><TD><TABLE class=\"WordWrappdf\" cellspacing=\"0\" width=\"1000px\" id=\"GlobalHarmonizedStandardForRolledUp\">");
                    sbGHSData.append("<thead>");
                    sbGHSData.append("<TR><TD class=\"new\" colspan='5'><font size='4'><b>Global Harmonized Standard</b></font></TD></TR>");
                    sbGHSData.append("</thead>");
                    sbGHSData.append("<tbody>");
                    sbGHSData.append("<TR>");
                    sbGHSData.append("<TD align='left' width=\"100px\"><B>Product Part Name</B></TD>");
                    sbGHSData.append("<TD align='left' width=\"100px\"><B>Product Part Revision</B></TD>");
                    sbGHSData.append("<TD align='left' width=\"100px\"><B>Product Part Title</B></TD>");
                    sbGHSData.append("<TD align='left' width=\"100px\"><B>Name</B></TD>");
                    sbGHSData.append("<TD align='left' width=\"100px\"><B>Title</B></TD>");
                    sbGHSData.append("<TD align='left' width=\"100px\"><B>Revision</B></TD>");
                    sbGHSData.append("<TD align='left' width=\"100px\"><B>Description</B></TD>");
                    sbGHSData.append("<TD align='left' width=\"100px\"><B>State</B></TD>");
                    sbGHSData.append("<TD align='left' width=\"50px\"><B>Markets</B></TD>");
                    sbGHSData.append("<TD align='left' width=\"50px\"><B>Languages</B></TD>");
                    sbGHSData.append("</TR>");
                    for (int i = 0; i < imlEnterpisePart; i++) {
                        mpGHS = (Map) mlGlobalHarmonziedStandardInfo.get(i);
                        strProdPhysicalId = convertObjectToString(mpGHS.get(pgV3Constants.SELECT_ATTRIBUTE_PGPRODUCTPARTPHYSICALID));
                        //Modified by DSM ( Sogeti) for 2018x.5 PDF Defect - 33102 : Starts
                        productPartInfo = (Map) mPhysicalProductDetails.get(strProdPhysicalId);
                        sProductPartName = convertObjectToString(productPartInfo.get(DomainConstants.SELECT_NAME));
                        sRevision = convertObjectToString(productPartInfo.get(DomainConstants.SELECT_REVISION));
                        sTitle = convertObjectToString(productPartInfo.get(pgV3Constants.SELECT_ATTRIBUTE_TITLE));
                        //Modified by DSM ( Sogeti) for 2018x.5 PDF Defect - 33102 : Ends
                        copyListObjectId = (String) mpGHS.get(DomainConstants.SELECT_ID);
                        copyListObjectName = (String) mpGHS.get(DomainConstants.SELECT_NAME);
                        copyListObjectState = (String) mpGHS.get(DomainConstants.SELECT_CURRENT);
                        copyListObjectRevision = (String) mpGHS.get(DomainConstants.SELECT_REVISION);
                        copyListObjectDescription = (String) mpGHS.get(DomainConstants.SELECT_DESCRIPTION);
                        copyListObjectTitle = (String) mpGHS.get(pgV3Constants.SELECT_ATTRIBUTE_TITLE);
                        copyListObjectContries = convertObjectToString(mpGHS.get("from["+pgV3Constants.RELATIONSHIP_COPYLISTCOUNTRY+"].to.name"));
                        copyListObjectLanguages = convertObjectToString(mpGHS.get("from["+pgV3Constants.RELATIONSHIP_COPYLISTLOCALLANGUAGE+"].to.name"));
                        sbGHSData.append("<TR>");
                        sbGHSData.append("<TD align='left' width=\"100px\">" + sProductPartName + "</TD>");
                        sbGHSData.append("<TD align='left' width=\"100px\">" + sRevision + "</TD>");
                        sbGHSData.append("<TD align='left' width=\"100px\">" + wrapStringWord(sTitle) + "</TD>");
                        sbGHSData.append("<TD align='left' width=\"100px\">" + copyListObjectName + "</TD>");
                        sbGHSData.append("<TD align='left' width=\"100px\">" + copyListObjectTitle + "</TD>");
                        sbGHSData.append("<TD align='left' width=\"100px\">" + copyListObjectRevision + "</TD>");
                        sbGHSData.append("<TD align='left' width=\"100px\">" + copyListObjectDescription + "</TD>");
                        sbGHSData.append("<TD align='left' width=\"100px\">" + copyListObjectState + "</TD>");
                        sbGHSData.append("<TD align='left' width=\"50px\">" + wrapStringWord(copyListObjectContries) + "</TD>");
                        sbGHSData.append("<TD align='left' width=\"50px\">" + wrapStringWord(copyListObjectLanguages) + "</TD>");
                        sbGHSData.append("</TR>");
                    }
                    sbGHSData.append("</tbody>");
                    sbGHSData.append("</TABLE><TR><TD><br /></TD></TR></TD></TR>");
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        }finally {
            if(isPushContext){
                ContextUtil.popContext(context);
                isPushContext = false;
            }
        }
        return sbGHSData;
    }

    /**
     * Retrive Global Harmonized Standard Data
     * @param context
     * @param args
     * @return StringBuilder
     * @throws MatrixException
     */
    // Modified parameter by DSM(Sogeti) for 2018x.5 PDF Views Requirement : Starts
    private StringBuilder getGlobalHarmonizedStandardData(Context context, String strObjectId, String pdfViewType) {
        long startTime = new Date().getTime();
        StringBuilder sbGHSData = new StringBuilder();
        try {
            if(validateString(strObjectId)) {
                MapList mlGlobalHarmonziedStandardInfo = EnoviaTableUtils.getGlobalHarmonizedStandardData(context, strObjectId);
                if (mlGlobalHarmonziedStandardInfo != null && !mlGlobalHarmonziedStandardInfo.isEmpty()) {
                    int imlGlobalHarmonziedStandardInfo = mlGlobalHarmonziedStandardInfo.size();
                    Map<String,String> mapGlobalHarmonziedStandardInfo =null;
                    sbGHSData.append("<TR><TD><TABLE class=\"WordWrappdf\" cellspacing=\"0\" width=\"1000px\" id=\"GlobalHarmonizedStandard\">");
                    sbGHSData.append("<thead>");
                    sbGHSData.append("<TR><TD class=\"new\" colspan='5'><font size='4'><b>Global Harmonized Standard</b></font></TD></TR>");
                    sbGHSData.append("</thead>");
                    sbGHSData.append("<tbody>");
                    sbGHSData.append("<TR>");
                    sbGHSData.append("<TD align='left' width=\"110px\"><B>Name</B></TD>");
                    sbGHSData.append("<TD align='left' width=\"110px\"><B>Title</B></TD>");
                    if(!(pgPDFViewConstants.CONS_GENDOC.equalsIgnoreCase(pdfViewType.trim()))){
                        sbGHSData.append("<TD align='left' width=\"110px\"><B>Revision</B></TD>");
                    }
                    sbGHSData.append("<TD align='left' width=\"110px\"><B>Description</B></TD>");
                    sbGHSData.append("<TD align='left' width=\"110px\"><B>State</B></TD>");
                    sbGHSData.append("<TD align='left' width=\"110px\"><B>Markets</B></TD>");
                    sbGHSData.append("<TD align='left' width=\"110px\"><B>Languages</B></TD>");
                    sbGHSData.append("</TR>");
                    for (int i = 0; i <imlGlobalHarmonziedStandardInfo ; i++) {
                        mapGlobalHarmonziedStandardInfo = (Map) mlGlobalHarmonziedStandardInfo.get(i);
                        sbGHSData.append("<TR>");
                        sbGHSData.append("<TD align='left' width=\"110px\">" + mapGlobalHarmonziedStandardInfo.get("Name") + "</TD>");
                        sbGHSData.append("<TD align='left' width=\"110px\">" + wrapStringWord(mapGlobalHarmonziedStandardInfo.get("Title")) + "</TD>");
                        if(!(pgPDFViewConstants.CONS_GENDOC.equalsIgnoreCase(pdfViewType.trim()))){
                            sbGHSData.append("<TD align='left' width=\"110px\">" + mapGlobalHarmonziedStandardInfo.get("Revision") + "</TD>");
                        }
                        sbGHSData.append("<TD align='left' width=\"110px\">" + mapGlobalHarmonziedStandardInfo.get("Description") + "</TD>");
                        sbGHSData.append("<TD align='left' width=\"110px\">" +  mapGlobalHarmonziedStandardInfo.get("State") + "</TD>");
                        sbGHSData.append("<TD align='left' width=\"110px\">" + wrapStringWord(mapGlobalHarmonziedStandardInfo.get("Countries")) + "</TD>");
                        sbGHSData.append("<TD align='left' width=\"110px\">" + wrapStringWord(mapGlobalHarmonziedStandardInfo.get("Language")) + "</TD>");
                        sbGHSData.append("</TR>");
                    }
                    sbGHSData.append("</tbody>");
                    sbGHSData.append("</TABLE><TR><TD><br /></TD></TR></TD></TR>");
                    mlGlobalHarmonziedStandardInfo.clear();
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        long endTime = new Date().getTime();
        logger.log(Level.INFO,"Total Time has taken by the getGlobalHarmonizedStandardData Method is--> {0}",(endTime-startTime));
        return sbGHSData;
    }

    /**
     * Retrive Stability Results Data
     * @param context
     * @param args
     * @return StringBuilder
     * @throws MatrixException
     */
    private StringBuilder getStabilityResultsData(Context context, String strObjectId) throws Exception {
        StringBuilder sbStabilityData = new StringBuilder();
        try {
            if(validateString(strObjectId)) {
                //Added/Modified by DSM(Sogeti)-2018x.5 for PDF Views Requirements - Starts
                StringList slbusSelect=new StringList(2);
                slbusSelect.add(DomainConstants.SELECT_TYPE);
                slbusSelect.add(pgV3Constants.SELECT_ATTRIBUTE_PGSAPTYPE);

                MapList mlAllTableData=null;
                HashMap programMap  = new HashMap();
                programMap.put("objectId",strObjectId);
                DomainObject doObj = DomainObject.newInstance(context, strObjectId);
                Map<String,String> specInfoMap=doObj.getInfo(context,slbusSelect);
                String strSAPType = specInfoMap.get(pgV3Constants.SELECT_ATTRIBUTE_PGSAPTYPE);
                String strType = specInfoMap.get(DomainConstants.SELECT_TYPE);
                if(pgPDFViewConstants.CONS_HALB.equals(strSAPType) && (pgV3Constants.TYPE_PGRAWMATERIAL.equals(strType)||pgV3Constants.TYPE_RAWMATERIALPART.equals(strType))) {
                    String[] args=JPO.packArgs(programMap);
                    mlAllTableData = (MapList) JPO.invoke(context, "pgFPPRollup", null, "getStabilityDocumentsonRM", args, MapList.class);
                }else{
                    programMap.put("type",pgV3Constants.TYPE_PGSTABILITYRESULTS);
                    String[] args=JPO.packArgs(programMap);
                    mlAllTableData=(MapList)pgPDFViewHelper.executeMainClassMethod(context, "pgFPPRollup", "getAllTableData",args );
                }
                //Added/Modified by DSM(Sogeti)-2018x.5 for PDF Views Requirements - Ends
                String expirationDate=DomainConstants.EMPTY_STRING;
                String totalShelfLife=DomainConstants.EMPTY_STRING;
                String temparatureGroup=DomainConstants.EMPTY_STRING;
                String humidityGroup=DomainConstants.EMPTY_STRING;
                String transportFreezeProtection=DomainConstants.EMPTY_STRING;
                String transportHeatProtection=DomainConstants.EMPTY_STRING;
                String boundaryConditions=DomainConstants.EMPTY_STRING;
                String strProdPhysicalId = DomainConstants.EMPTY_STRING;
                String sProductPartName = DomainConstants.EMPTY_STRING;
                String sRevision  = DomainConstants.EMPTY_STRING;
                String sTitle = DomainConstants.EMPTY_STRING;
                String stabilityReport = DomainConstants.EMPTY_STRING;
                StringList objectsSelect=new StringList(4);
                objectsSelect.add(DomainConstants.SELECT_NAME);
                objectsSelect.add(DomainConstants.SELECT_REVISION);
                objectsSelect.add(pgV3Constants.SELECT_ATTRIBUTE_TITLE);
                objectsSelect.add(pgPDFViewConstants.PHYSICAL_ID);
                Map productPartInfo=null;
                //Modified by DSM ( Sogeti) for 2018x.5 PDF Defect - 33102 : Starts
                Map sStabilityResultsMap = null;
                Map mPhysicalProductDetails = new HashMap();

                int imlAllTableData = mlAllTableData.size();
                //Added/Modified by DSM(Sogeti)-2018x.5 for PDF Views Requirements - Starts
                if(!(pgPDFViewConstants.CONS_HALB.equals(strSAPType) && (pgV3Constants.TYPE_PGRAWMATERIAL.equals(strType)||pgV3Constants.TYPE_RAWMATERIALPART.equals(strType)))) {
                    Set sPhysicalIds = new HashSet();
                    for (int k = 0; k < imlAllTableData; k++) {
                        sStabilityResultsMap = (Map) mlAllTableData.get(k);
                        strProdPhysicalId = convertObjectToString(sStabilityResultsMap.get(pgV3Constants.SELECT_ATTRIBUTE_PGPRODUCTPARTPHYSICALID));
                        sPhysicalIds.add(strProdPhysicalId);
                    }
                    mPhysicalProductDetails = getProductDetailsWithPhysicalId(context, sPhysicalIds, objectsSelect);
                }
                //Added/Modified by DSM(Sogeti)-2018x.5 for PDF Views Requirements - Starts
                //Modified by DSM ( Sogeti) for 2018x.5 PDF Defect - 33102 : Ends
                if(mlAllTableData!=null && !mlAllTableData.isEmpty()) {
                    sbStabilityData.append("<TR><TD><TABLE class=\"WordWrappdf\" cellspacing=\"0\" width=\"1000px\" id=\"DSOStabilityResults\">");
                    sbStabilityData.append("<thead>");
                    sbStabilityData.append("<TR><TD class=\"new\" colspan='5'><font size='4'><B>Stability Document</B></font></TD></TR>");
                    sbStabilityData.append("</thead>");
                    sbStabilityData.append("<tbody>");

                    sbStabilityData.append("<TR>");
                    sbStabilityData.append("<TD align='left' width=\"100px\"><B>Product Part Name</B></TD>");
                    sbStabilityData.append("<TD align='left' width=\"100px\"><B>Product Part Revision</B></TD>");
                    sbStabilityData.append("<TD align='left' width=\"100px\"><B>Product Part Title</B></TD>");
                    sbStabilityData.append("<TD align='left' width=\"100px\"><B>Product Expiration Date Required</B></TD>");
                    sbStabilityData.append("<TD align='left' width=\"100px\"><B>Total Shelf Life \\- Days</B></TD>");
                    sbStabilityData.append("<TD align='left' width=\"100px\"><B>Temperature Group</B></TD>");
                    sbStabilityData.append("<TD align='left' width=\"100px\"><B>Humidity Group</B></TD>");
                    sbStabilityData.append("<TD align='left' width=\"50px\"><B>Transport Freeze Protection</B></TD>");
                    sbStabilityData.append("<TD align='left' width=\"50px\"><B>Transport Heat Protection</B></TD>");
                    sbStabilityData.append("<TD align='left' width=\"50px\"><B>Boundary Conditions</B></TD>");
                    sbStabilityData.append("<TD align='left' width=\"50px\"><B>Stability Document</B></TD>");
                    sbStabilityData.append("</TR>");
                    for (int i = 0; i < imlAllTableData; i++) {
                        sStabilityResultsMap = (Map) mlAllTableData.get(i);
                        //Added/Modified by DSM(Sogeti)-2018x.5 for PDF Views Requirements - Starts
                        if(pgPDFViewConstants.CONS_HALB.equals(strSAPType) && (pgV3Constants.TYPE_PGRAWMATERIAL.equals(strType)||pgV3Constants.TYPE_RAWMATERIALPART.equals(strType))) {
                            sProductPartName =(String) sStabilityResultsMap.get(pgV3Constants.SELECT_FROMNAME);
                            sRevision =(String) sStabilityResultsMap.get("from.revision");
                            sTitle =(String) sStabilityResultsMap.get("from."+pgV3Constants.SELECT_ATTRIBUTE_TITLE);
                        }else {
                            strProdPhysicalId = convertObjectToString(sStabilityResultsMap.get(pgV3Constants.SELECT_ATTRIBUTE_PGPRODUCTPARTPHYSICALID));
                            //Modified by DSM ( Sogeti) for 2018x.5 PDF Defect - 33102 : Starts
                            productPartInfo = (Map) mPhysicalProductDetails.get(strProdPhysicalId);
                            sProductPartName = convertObjectToString(productPartInfo.get(DomainConstants.SELECT_NAME));
                            sRevision = convertObjectToString(productPartInfo.get(DomainConstants.SELECT_REVISION));
                            sTitle = convertObjectToString(productPartInfo.get(pgV3Constants.SELECT_ATTRIBUTE_TITLE));
                            //Modified by DSM ( Sogeti) for 2018x.5 PDF Defect - 33102 : Ends
                        }
                        //Added/Modified by DSM(Sogeti)-2018x.5 for PDF Views Requirements - Ends
                        expirationDate = convertObjectToString(sStabilityResultsMap.get(pgV3Constants.SELECT_ATTRIBUTE_PGPRODUCTEXPIRATIONDATE));
                        totalShelfLife = convertObjectToString(sStabilityResultsMap.get(pgV3Constants.SELECT_ATTRIBUTE_PGTOTALSHELFLIFE));
                        temparatureGroup = convertObjectToString(sStabilityResultsMap.get(pgV3Constants.SELECT_ATTRIBUTE_PGTEMPERATUREGROUP));
                        humidityGroup = convertObjectToString(sStabilityResultsMap.get(pgV3Constants.SELECT_ATTRIBUTE_PGHUMIDITYGROUP));
                        transportFreezeProtection = convertObjectToString(sStabilityResultsMap.get(pgV3Constants.SELECT_ATTRIBUTE_PGTRANSPORTFREEZEPROTECTION));
                        transportHeatProtection = convertObjectToString(sStabilityResultsMap.get(pgV3Constants.SELECT_ATTRIBUTE_PGTRANSPORTHEATPROTECTION));
                        boundaryConditions = convertObjectToString(sStabilityResultsMap.get(pgV3Constants.SELECT_ATTRIBUTE_PGBOUNDARYCONDITIONS));
                        stabilityReport = convertObjectToString(sStabilityResultsMap.get(DomainConstants.SELECT_NAME));
                        sbStabilityData.append("<TR>");
                        sbStabilityData.append("<TD align='left'>" + sProductPartName + "</TD>");
                        sbStabilityData.append("<TD align='left'>" + sRevision + "</TD>");
                        sbStabilityData.append("<TD align='left'>" + wrapStringWord(sTitle) + "</TD>");
                        sbStabilityData.append("<TD align='left'>" + expirationDate + "</TD>");
                        sbStabilityData.append("<TD align='left'>" + totalShelfLife + "</TD>");
                        sbStabilityData.append("<TD align='left'>" + temparatureGroup + "</TD>");
                        sbStabilityData.append("<TD align='left'>" + humidityGroup + "</TD>");
                        sbStabilityData.append("<TD align='left'>" + transportFreezeProtection + "</TD>");
                        sbStabilityData.append("<TD align='left'>" + transportHeatProtection + "</TD>");
                        sbStabilityData.append("<TD align='left'>" + boundaryConditions + "</TD>");
                        sbStabilityData.append("<TD align='left'>" + stabilityReport + "</TD>");
                        sbStabilityData.append("</TR>");
                    }
                    sbStabilityData.append("</tbody>");
                    sbStabilityData.append("</TABLE><TR><TD><br /></TD></TR></TD></TR>");
                }
            }
        }catch (Exception e) {
            e.printStackTrace();
        }
        return sbStabilityData;
    }

    /**
     * Retrive Certifications Data
     * @param context
     * @param args
     * @return StringBuilder
     * @throws MatrixException
     */
    private StringBuilder getCertificationsData(Context context, String strObjectId) throws Exception {
        StringBuilder sCertificationData = new StringBuilder();
        try {
            if(validateString(strObjectId)) {
                HashMap programMap  = new HashMap();
                programMap.put("objectId",strObjectId);
                programMap.put("type",pgV3Constants.TYPE_PGPLIMATERIALCERTIFICATIONS);
                String[] args=JPO.packArgs(programMap);
                JPO.unpackArgs(args);
                MapList mlAllTableData=(MapList)pgPDFViewHelper.executeMainClassMethod(context, "pgFPPRollup", "getAllTableData",args );
                String sProductPart=DomainConstants.EMPTY_STRING;
                String sCertificationClaim=DomainConstants.EMPTY_STRING;
                String sCountry=DomainConstants.EMPTY_STRING;
                String strProdPhysicalId =DomainConstants.EMPTY_STRING;
                //Added by DSM ( Sogeti) for 2018x.5 PDF Defect - 33102 : Starts
                StringList objectsSelect=new StringList(2);
                objectsSelect.add(DomainConstants.SELECT_NAME);
                objectsSelect.add(pgPDFViewConstants.PHYSICAL_ID);
                Map<String,String> mCertification = null;
                Map<String,Map> mProductdetail = null;
                Map<String,Map> mPhysicalProductDetails = new HashMap();
                Set sPhysicalIds = new HashSet();
                int imlAllTableData = mlAllTableData.size();
                for (int k = 0; k < imlAllTableData; k++) {
                    mCertification = (Map) mlAllTableData.get(k);
                    strProdPhysicalId = convertObjectToString(mCertification.get(pgV3Constants.SELECT_ATTRIBUTE_PGPRODUCTPARTPHYSICALID));
                    sPhysicalIds.add(strProdPhysicalId);
                }
                mPhysicalProductDetails = getProductDetailsWithPhysicalId(context, sPhysicalIds, objectsSelect);
                //Added by DSM ( Sogeti) for 2018x.5 PDF Defect - 33102 : Ends

                if(mlAllTableData!=null && !mlAllTableData.isEmpty()) {
                    sCertificationData.append("<TR><TD><TABLE class=\"WordWrappdf\" cellspacing=\"0\" width=\"1000px\" id=\"DSOCertifications\">");
                    sCertificationData.append("<thead>");
                    sCertificationData.append("<TR><TD class=\"new\" colspan='5'><font size='4'><b>Certifications</b></font></TD></TR>");
                    sCertificationData.append("</thead>");
                    sCertificationData.append("<tbody>");

                    sCertificationData.append("<TR>");
                    sCertificationData.append("<TD align='left' width=\"200px\"><B>Product Part</B></TD>");
                    sCertificationData.append("<TD align='left' width=\"400px\"><B>Certification Claim</B></TD>");
                    //Modified by DSM (Sogeti) for 2018x.3 PDF View Req Id - 32375 : Starts
                    sCertificationData.append("<TD align='left' width=\"400px\"><B>Market</B></TD>");
                    //Modified by DSM (Sogeti) for 2018x.3 PDF View Req Id - 32375 : Ends
                    sCertificationData.append("</TR>");
                    //Modified by DSM ( Sogeti) for 2018x.5 PDF Defect - 33102 : Ends
                    for (int i = 0; i < imlAllTableData; i++) {
                        mCertification = (Map) mlAllTableData.get(i);
                        strProdPhysicalId = convertObjectToString(mCertification.get(pgV3Constants.SELECT_ATTRIBUTE_PGPRODUCTPARTPHYSICALID));
                        mProductdetail = (Map) mPhysicalProductDetails.get(strProdPhysicalId);
                        sProductPart = convertObjectToString(mProductdetail.get(DomainConstants.SELECT_NAME));
                        sCertificationClaim = convertObjectToString(mCertification.get(DomainConstants.SELECT_NAME));
                        sCountry = convertObjectToString(mCertification.get("tomid["+pgV3Constants.RELATIONSHIP_PGCOUNTRIESCERTIFIED+"].from.name"));
                        sCertificationData.append("<TR>");
                        sCertificationData.append("<TD align='left' width=\"200px\">" + sProductPart + "</TD>");
                        sCertificationData.append("<TD align='left' width=\"400px\">" + sCertificationClaim + "</TD>");
                        sCertificationData.append("<TD align='left' width=\"400px\">" + sCountry + "</TD>");
                        sCertificationData.append("</TR>");
                    }
                    //Modified by DSM ( Sogeti) for 2018x.5 PDF Defect - 33102 : Ends
                    sCertificationData.append("</tbody>");
                    sCertificationData.append("</TABLE><TR><TD><br /></TD></TR></TD></TR>");
                }
            }
        }catch (Exception e) {
            e.printStackTrace();
        }
        return sCertificationData;
    }

    /**
     * Retrive Warehouse Classification Data
     * @param context
     * @param args
     * @return StringBuilder
     * @throws MatrixException
     */
    private StringBuilder getWarehouseClassificationData(Context context, String strObjectId) throws Exception {
        StringBuilder sWareHouseData = new StringBuilder();
        DomainObject domainObject = null;
        try {
            if(validateString(strObjectId)) {
                String sWarehousingClassification=DomainConstants.EMPTY_STRING;
                String sCorrosive=DomainConstants.EMPTY_STRING;
                HashMap requestMap  = new HashMap();
                requestMap.put("objectId",strObjectId);
                HashMap programMap =new HashMap();
                programMap.put("requestMap", requestMap);
                String[] args=JPO.packArgs(programMap);
                JPO.unpackArgs(args);
                sWarehousingClassification=(String)pgPDFViewHelper.executeMainClassMethod(context, "pgIPMProductData", "getWarehouseClassification",args );
                if(UIUtil.isNotNullAndNotEmpty(sWarehousingClassification)) {
                    sWarehousingClassification = sWarehousingClassification.replaceAll("[<]","#LESS_THAN");
                    sWarehousingClassification = sWarehousingClassification.replaceAll("[>]","#GREATER_THAN");
                }
                domainObject=DomainObject.newInstance(context, strObjectId);
                sCorrosive=domainObject.getInfo(context, pgV3Constants.SELECT_ATTRIBUTE_PGCORROSIVE);

                if(!sCorrosive.isEmpty() || !sWarehousingClassification.isEmpty()) {
                    sWareHouseData.append("<TR><TD><TABLE class=\"WordWrappdf\" cellspacing=\"0\" width=\"1000px\" id=\"DSOWarehouseClassification\">");
                    sWareHouseData.append("<thead>");
                    sWareHouseData.append("<TR><TD class=\"new\" colspan='5'><font size='4'><b>Warehouse Classification</b></font></TD></TR>");
                    sWareHouseData.append("</thead>");
                    sWareHouseData.append("<tbody>");
                    // Modified by DSM(Sogeti) for 2018x.5 PDF Views Requirement : Starts
                    sWareHouseData.append("<TR>");
                    sWareHouseData.append("<TD align='left' width=\"250px\"><B>Warehousing Classification</B></TD>");
                    sWareHouseData.append("<TD align='left' width=\"250px\">" + sWarehousingClassification + "</TD>");
                    sWareHouseData.append("<TD align='left' width=\"250px\"><B>Corrosive</B></TD>");
                    sWareHouseData.append("<TD align='left' width=\"250px\">" + sCorrosive + "</TD>");
                    sWareHouseData.append("</TR>");
                    // Modified by DSM(Sogeti) for 2018x.5 PDF Views Requirement : Ends
                    sWareHouseData.append("</tbody>");
                    sWareHouseData.append("</TABLE><TR><TD><br /></TD></TR></TD></TR>");
                }
            }
        }catch (Exception e) {
            e.printStackTrace();
        }
        return sWareHouseData;
    }

    /**
     * Retrive Certification Table Data
     * @param context
     * @param args
     * @return StringBuilder
     * @throws MatrixException
     */
    private StringBuilder getCertificationTable(Context context, String strObjectId) {
        long startTime = new Date().getTime();
        StringBuilder sbCertificationData = new StringBuilder();
        try {
            if(validateString(strObjectId)) {
                MapList mlPLIMaterialmlCertifications = EnoviaTableUtils.getCertificationTable(context, strObjectId);
                if(mlPLIMaterialmlCertifications!=null && !mlPLIMaterialmlCertifications.isEmpty()) {
                    sbCertificationData.append("<TR><TD><TABLE class=\"WordWrappdf\" cellspacing=\"0\" width=\"1000px\" id=\"MLCERTIFICATION\">");
                    sbCertificationData.append("<thead>");
                    sbCertificationData.append("<TR><TD class=\"new\" colspan='2'><font size='4'><b>Certifications</b></font></TD></TR>");
                    sbCertificationData.append("</thead>");
                    sbCertificationData.append("<tbody>");
                    sbCertificationData.append("<TR>");
                    sbCertificationData.append("<TD align='center' width=\"500px\"><B>Certification Claim</B></TD>");
                    sbCertificationData.append("<TD align='center' width=\"500px\"><B>Market</B></TD>");
                    sbCertificationData.append("</TR>");
                    Map<String,String> mapPLIMaterial=null;
                    int iSize=mlPLIMaterialmlCertifications.size();
                    for (int i = 0; i < iSize; i++) {
                        mapPLIMaterial=(Map)mlPLIMaterialmlCertifications.get(i);
                        sbCertificationData.append("<TR>");
                        sbCertificationData.append("<TD align='center' width=\"500px\">" + convertObjectToString(mapPLIMaterial.get("CertificationClaim")) + "</TD>");
                        sbCertificationData.append("<TD align='center' width=\"500px\">" + convertObjectToString((mapPLIMaterial.get("Country")).replace(pgV3Constants.SYMBOL_PIPE, pgV3Constants.SYMBOL_COMMA)) + "</TD>");
                        sbCertificationData.append("</TR>");
                    }
                    sbCertificationData.append("</tbody>");
                    sbCertificationData.append("</TABLE><TR><TD><br /></TD></TR></TD></TR>");
                    mlPLIMaterialmlCertifications.clear();
                }
            }
        }catch (Exception e) {
            logger.log(Level.WARNING, null, e);
        }
        long endTime = new Date().getTime();
        logger.log(Level.INFO,"Total Time has taken by the getCertificationTable Method is-->{0}",(endTime-startTime));
        return sbCertificationData;
    }

    /**
     * Retrive Material Certifications BOM/Substitute Data
     * @param context
     * @param args
     * @return StringBuilder
     * @throws MatrixException
     */
    private String getPLIMaterialCertifications(Context context, String strObjectId) throws Exception {
        DomainObject domainObject = null;
        StringList certificationsList= new StringList();
        Map mlCertificationMAP=null;
        try {
            if(validateString(strObjectId)) {
                StringList objectSelects = new StringList(1);
                objectSelects.add(DomainConstants.SELECT_NAME);
                domainObject = DomainObject.newInstance(context, strObjectId);

                MapList mlCertificationsInfo = domainObject.getRelatedObjects(context, pgV3Constants.RELATIONSHIP_PG_PLI_MATERIAL_CERTIFICATIONS,
                        pgV3Constants.TYPE_PGPLIMATERIALCERTIFICATIONS, objectSelects, null, false, true, (short) 1, "", "");
                if(mlCertificationsInfo!=null && !mlCertificationsInfo.isEmpty()) {
                    int iSize = mlCertificationsInfo.size();
                    for (int i = 0; i <iSize ; i++) {
                        mlCertificationMAP=(Map)mlCertificationsInfo.get(i);
                        if(mlCertificationMAP!=null && !mlCertificationMAP.isEmpty()) {
                            certificationsList.add(convertObjectToString(mlCertificationMAP.get(DomainConstants.SELECT_NAME)));
                        }
                    }
                }
            }
        }catch (Exception e) {
            e.printStackTrace();
        }
        return FrameworkUtil.join(certificationsList, ",");
    }

    /**
     * Retrive Dangerous Goods Classification Data
     * @param context
     * @param args
     * @return StringBuilder
     * @throws MatrixException
     */
    private StringBuilder getDangerousGoodsClassificationData(Context context, String strObjectId) throws Exception {
        StringBuilder sbDGCData = new StringBuilder();
        boolean isPushContext = false;
        ContextUtil.pushContext(context, pgV3Constants.PERSON_USER_AGENT , "", "");
        isPushContext = true;
        try {
            if(validateString(strObjectId)) {
                HashMap programMap  = new HashMap();
                programMap.put("objectId",strObjectId);
                programMap.put("type",pgV3Constants.TYPE_PGDANGEROUSGOODS);
                String[] args=JPO.packArgs(programMap);
                JPO.unpackArgs(args);
                MapList mlDangerousGoodsClassifications=(MapList)pgPDFViewHelper.executeMainClassMethod(context, "pgFPPRollup", "getAllTableData",args );
                if (mlDangerousGoodsClassifications != null && !mlDangerousGoodsClassifications.isEmpty()) {
                    String sDGCNo = DomainConstants.EMPTY_STRING;
                    String sProductPartName = DomainConstants.EMPTY_STRING;
                    String strProdPhysicalId = DomainConstants.EMPTY_STRING;
                    String sRevision  = DomainConstants.EMPTY_STRING;
                    String sTitle = DomainConstants.EMPTY_STRING;
                    String sDGDescription = DomainConstants.EMPTY_STRING;
                    String sUNNumber  =DomainConstants.EMPTY_STRING;
                    String sProperShippingName  = DomainConstants.EMPTY_STRING;
                    String sHazardClass = DomainConstants.EMPTY_STRING;
                    String sPackagingGroup  = DomainConstants.EMPTY_STRING;
                    String sDGMarksRequirements  = DomainConstants.EMPTY_STRING;
                    String sDGMarksRequirementsOnCOP  = DomainConstants.EMPTY_STRING;
                    String sDGMarksRequirementsOnCUP  = DomainConstants.EMPTY_STRING;
                    String sShippedLimitQuantity  = DomainConstants.EMPTY_STRING;
                    String sUNSpecificationPackaging  =DomainConstants.EMPTY_STRING;
                    String sMaxConsumerUnitPart  =DomainConstants.EMPTY_STRING;
                    String sMaxCustomerUnitPart  =DomainConstants.EMPTY_STRING;
                    //Added by DSM(Sogeti) - 2018x.5 PDF Views Requirement START
                    String sTechnicalName1 = DomainConstants.EMPTY_STRING;
                    String sTechnicalName2 = DomainConstants.EMPTY_STRING;
                    //Added by DSM(Sogeti) - 2018x.5 PDF Views Requirement END
                    StringList objectsSelect=new StringList(4);
                    objectsSelect.add(DomainConstants.SELECT_NAME);
                    objectsSelect.add(DomainConstants.SELECT_REVISION);
                    objectsSelect.add(pgV3Constants.SELECT_ATTRIBUTE_TITLE);
                    //Added by DSM ( Sogeti) for 2018x.5 PDF Defect - 33102 : Starts
                    objectsSelect.add(pgPDFViewConstants.PHYSICAL_ID);
                    //Added by DSM ( Sogeti) for 2018x.5 PDF Defect - 33102 : Ends
                    Map productPartInfo=null;
                    Map mapDGC =null;
                    //Modified by DSM ( Sogeti) for 2018x.5 PDF Defect - 33102 : Starts
                    DomainObject domProductPart = DomainObject.newInstance(context);
                    Map mPhysicalProductDetails = new HashMap();
                    Set sPhysicalIds = new HashSet();
                    int iDGC = mlDangerousGoodsClassifications.size();
                    for (int k = 0; k < iDGC; k++) {
                        mapDGC = (Map) mlDangerousGoodsClassifications.get(k);
                        strProdPhysicalId = convertObjectToString(mapDGC.get(pgV3Constants.SELECT_ATTRIBUTE_PGPRODUCTPARTPHYSICALID));
                        sPhysicalIds.add(strProdPhysicalId);
                    }
                    mPhysicalProductDetails = getProductDetailsWithPhysicalId(context, sPhysicalIds, objectsSelect);
                    //Modified by DSM ( Sogeti) for 2018x.5 PDF Defect - 33102 : Ends
                    sbDGCData.append("<TR><TD><TABLE class=\"WordWrappdf\" cellspacing=\"0\" width=\"1000px\" id=\"DangerousGoodsClassification\">");
                    sbDGCData.append("<thead>");
                    sbDGCData.append("<TR><TD class=\"new\" colspan='11'><font size='4'><b>Dangerous Goods Classification</b></font></TD></TR>");
                    sbDGCData.append("</thead>");
                    sbDGCData.append("<tbody>");

                    sbDGCData.append("<TR>");
                    //Modified by DSM(Sogeti) - 2018x.5 PDF Views Requirement START
                    sbDGCData.append("<TD align='left' width=\"100px\"><B>Product Part Name (PPN) <BR/>Product Part Revision (PPR)</B></TD>");
                    sbDGCData.append("<TD align='left' width=\"100px\"><B>Product Part Title (PPT)<BR/>DG Description(DGD)</B></TD>");
                    sbDGCData.append("<TD align='left' width=\"100px\"><B>UN Number (UNN)<BR/>Proper Shipping Name (PSN)</B></TD>");
                    sbDGCData.append("<TD align='left' width=\"50px\"><B>Technical<BR/>Name 1<BR/>(TN1)<BR/>Technical<BR/>Name 2<BR/>(TN2)</B></TD>");
                    sbDGCData.append("<TD align='left' width=\"100px\"><B>Hazard Class<BR/>(HC)<BR/>Packing Group <BR/>(PG)</B></TD>");
                    sbDGCData.append("<TD align='left' width=\"100px\"><B>Product can be Shipped as a Limited Quantity by Ground/Vessel</B></TD>");
                    sbDGCData.append("<TD align='left' width=\"100px\"><B>UN Specification Packaging is Required</B></TD>");
                    sbDGCData.append("<TD align='left' width=\"100px\"><B>Max Consumer Unit<BR/>Part Weight/Volume <BR/>(CON)<BR/>Max Customer Unit <BR/>Part Weight/Volume <BR/>(CUST)</B></TD>");
                    sbDGCData.append("<TD align='left' width=\"50px\"><B>Other Packaging Requirements</B></TD>");
                    sbDGCData.append("<TD align='left' width=\"100px\"><B>DG Marks / Labels Required on Consumer Unit Part</B></TD>");
                    sbDGCData.append("<TD align='left' width=\"100px\"><B>DG Marks / Labels Required on Customer Unit Part</B></TD>");
                    //Modified by DSM(Sogeti) - 2018x.5 PDF Views Requirement END
                    sbDGCData.append("</TR>");
                    for (int i = 0; i < iDGC; i++) {
                        mapDGC = (Map) mlDangerousGoodsClassifications.get(i);
                        sDGCNo =convertObjectToString(mapDGC.get(DomainConstants.SELECT_NAME));
                        strProdPhysicalId = convertObjectToString(mapDGC.get(pgV3Constants.SELECT_ATTRIBUTE_PGPRODUCTPARTPHYSICALID));
                        //Modified by DSM ( Sogeti) for 2018x.5 PDF Defect - 33102 : Starts
                        productPartInfo = (Map) mPhysicalProductDetails.get(strProdPhysicalId);
                        sProductPartName = convertObjectToString(productPartInfo.get(DomainConstants.SELECT_NAME));
                        sRevision = convertObjectToString(productPartInfo.get(DomainConstants.SELECT_REVISION));
                        sTitle = convertObjectToString(productPartInfo.get(pgV3Constants.SELECT_ATTRIBUTE_TITLE));
                        //Modified by DSM ( Sogeti) for 2018x.5 PDF Defect - 33102 : Ends
                        sDGDescription = convertObjectToString(mapDGC.get(DomainConstants.SELECT_DESCRIPTION));
                        sUNNumber  =convertObjectToString(mapDGC.get(pgV3Constants.SELECT_ATTRIBUTE_PGPUNNUMBER));
                        sProperShippingName  = convertObjectToString(mapDGC.get(pgV3Constants.SELECT_ATTRIBUTE_PGPROPERSHIPPINGNAME));
                        sHazardClass = convertObjectToString(mapDGC.get(pgV3Constants.SELECT_HAZARDCLASS));
                        sPackagingGroup  = convertObjectToString(mapDGC.get(pgV3Constants.SELECT_PACKINGGROUP));
                        sDGMarksRequirements  = convertObjectToString(mapDGC.get(pgV3Constants.SELECT_ATTRIBUTE_PGOTHERPACKAGINGREQUIREMENTS));
                        sDGMarksRequirementsOnCOP  = convertObjectToString(mapDGC.get(pgV3Constants.SELECT_ATTRIBUTE_PGDGCOPLABELREQUIRED));
                        sDGMarksRequirementsOnCUP  = convertObjectToString(mapDGC.get(pgV3Constants.SELECT_ATTRIBUTE_PGDGCUPLABELREQUIRED));
                        sShippedLimitQuantity  = convertObjectToString(mapDGC.get(pgV3Constants.SELECT_ATTRIBUTE_PGSHIPMENTLIMITEDQUANTITY));
                        sUNSpecificationPackaging  =convertObjectToString(mapDGC.get(pgV3Constants.SELECT_ATTRIBUTE_PGMAXCONSUMERUNITSIZE));
                        sMaxConsumerUnitPart  =convertObjectToString(mapDGC.get(pgV3Constants.SELECT_ATTRIBUTE_PGCONSUMERWEIGHTVOLUME));
                        sMaxCustomerUnitPart  =convertObjectToString(mapDGC.get(pgV3Constants.SELECT_ATTRIBUTE_PGCUSTOMERWEIGHTVOLUME));
                        //Modified by DSM(Sogeti) - 2018x.5 PDF Views Requirement START
                        sTechnicalName1 = convertObjectToString(mapDGC.get(pgPDFViewConstants.SELECT_ATTRIBUTE_TECHNICAL_NAME_1));
                        sTechnicalName2 = convertObjectToString(mapDGC.get(pgPDFViewConstants.SELECT_ATTRIBUTE_TECHNICAL_NAME_2));
                        sbDGCData.append("<TR>");
                        sbDGCData.append("<TD align='left' width=\"100px\"><B>PPN:</B>" +sProductPartName + "<BR/><B>PPR:</B>"+sRevision+"</TD>");
                        sbDGCData.append("<TD align='left' width=\"100px\"><B>PPT:</B>" +wrapCharTable(sTitle,15) + "<BR/><B>DGD:</B>"+wrapCharTable(sDGDescription,15)+"</TD>");
                        sbDGCData.append("<TD align='left' width=\"100px\"><B>UNN:</B>" +sUNNumber + "<BR/><B>PSN:</B>"+sProperShippingName+"</TD>");
                        sbDGCData.append("<TD align='left' width=\"50px\"><B>TN1:</B>" +sTechnicalName1 + "<BR/><B>TN2:</B>"+sTechnicalName2+"</TD>");
                        sbDGCData.append("<TD align='left' width=\"100px\"><B>HC:</B>" + sHazardClass + "<BR/><B>PG:</B>"+sPackagingGroup+"</TD>");
                        sbDGCData.append("<TD align='left' width=\"100px\">" + sShippedLimitQuantity + "</TD>");
                        sbDGCData.append("<TD align='left' width=\"100px\">" + sUNSpecificationPackaging + "</TD>");
                        sbDGCData.append("<TD align='left' width=\"100px\"><B>CON:</B>" + sMaxConsumerUnitPart + "<BR/><B>CUST:</B>"+sMaxCustomerUnitPart+"</TD>");
                        sbDGCData.append("<TD align='left' width=\"50px\">" + sDGMarksRequirements + "</TD>");
                        sbDGCData.append("<TD align='left' width=\"100px\">" + wrapCharTable(sDGMarksRequirementsOnCOP,15) + "</TD>");
                        sbDGCData.append("<TD align='left' width=\"100px\">" + wrapCharTable(sDGMarksRequirementsOnCUP,15) + "</TD>");
                        //Modified by DSM(Sogeti) - 2018x.5 PDF Views Requirement END
                        sbDGCData.append("</TR>");
                    }
                    sbDGCData.append("</tbody>");
                    sbDGCData.append("</TABLE><TR><TD><br /></TD></TR></TD></TR>");
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        }finally {
            if(isPushContext){
                ContextUtil.popContext(context);
                isPushContext = false;
            }
        }
        return sbDGCData;
    }


    /**
     * Method to remove the last Pipe(|) from string input value
     *
     * @param String
     * @param String
     * @return String
     * @throws Exception if the operation fails
     */
    public static String removeLastPipe(String inputStr, String symbol) {
        if (inputStr.length() > 0) {
            inputStr = inputStr.substring(0, inputStr.lastIndexOf(symbol));
        }
        return inputStr;
    }


    /**
     * Method to concate from string input value
     *
     * @param String
     * @return String
     * @throws Exception if the operation fails
     */
    private static String convertObjectToString(Object obj) {
        String convertedString=DomainConstants.EMPTY_STRING;
        if(obj!=null) {
            if(obj instanceof StringList) {
                convertedString=FrameworkUtil.join((StringList)obj, pgV3Constants.SYMBOL_COMMA);
            }else if(obj instanceof String) {
                convertedString=(String)obj;
            }
        }
        return convertedString;
    }

    /**
     * Method to concate from stringlist input value
     *
     * @param String
     * @return StringList
     * @throws Exception if the operation fails
     */
    private static StringList convertObjectToStringList(Object obj) {
        StringList convertedStringList = new StringList();
        if(obj!=null) {
            if(obj instanceof StringList) {
                convertedStringList=(StringList)obj;
                return convertedStringList;
            }else if(obj instanceof String) {
                convertedStringList.add(obj.toString());
            }
        }
        return convertedStringList;
    }

    /**
     * Method to split and wrap the string
     *
     * @param String
     * @return String
     * @throws Exception if the operation fails
     */
    public static String wrapStringWord(String strwordWrap){
        return WordUtils.wrap(strwordWrap,30, "<br/>", true);
    }
    /**
     * Method to split and wrap the string
     * @param String
     * @return String
     * @throws Exception if the operation fails
     */
    public static String wrapStringColumn(String strwordWrap){
        return WordUtils.wrap(strwordWrap,30, "\n", true);
    }
    /**
     * Method to split and wrap the string only for CATIA APP Characteristics
     * Table content
     *
     * @param String
     * @return String
     * @throws Exception if the operation fails
     */
    public static String wrapCharTable(String strwordWrap, int wLength){
        return WordUtils.wrap(strwordWrap,wLength, "<br/>", true);
    }


    /**
     * Retrive Dangerous Goods Classification Data for APP
     * @param context
     * @param args
     * @return StringBuilder
     * @throws MatrixException
     */
    private StringBuilder getDangerousGoodsClassificationDataForProduct(Context context, String strObjectId) throws Exception {
        long startTime = new Date().getTime();
        StringBuilder sbDGCData = new StringBuilder();
        try {
            if(validateString(strObjectId)) {
                MapList mlDangerousGoodsClassifications = EnoviaTableUtils.getDGC(context, strObjectId);
                if (mlDangerousGoodsClassifications != null && !mlDangerousGoodsClassifications.isEmpty()) {
                    Map mapDGC;
                    int iSize = mlDangerousGoodsClassifications.size();
                    sbDGCData.append("<TR><TD><TABLE class=\"WordWrappdf\" cellspacing=\"0\" width=\"1000px\" id=\"DSODGC\">");
                    sbDGCData.append("<thead>");
                    sbDGCData.append("<TR><TD class=\"new\" colspan='5'><font size='4'><b>Dangerous Goods Classification</b></font></TD></TR>");
                    sbDGCData.append("</thead>");
                    sbDGCData.append("<tbody>");
                    sbDGCData.append("<TR>");
                    sbDGCData.append("<TD align='left' width=\"100px\"><B>No. (N) <BR/>DG Description (DGD) </B></TD>");
                    sbDGCData.append("<TD align='left' width=\"100px\"><B>UN Number (UNN)<BR/>Proper Shipping Name (PSN)</B></TD>");
                    sbDGCData.append("<TD align='left' width=\"100px\"><B>Technical<BR/>Name 1<BR/>(TN1)<BR/>Technical<BR/>Name 2<BR/>(TN2)</B></TD>");
                    sbDGCData.append("<TD align='left' width=\"100px\"><B>Hazard Class (HC)<BR/>Packing Group (PG)</B></TD>");
                    sbDGCData.append("<TD align='left' width=\"100px\"><B>Product can be Shipped as a Limited Quantity by Ground/Vessel</B></TD>");
                    sbDGCData.append("<TD align='left' width=\"100px\"><B>UN Specification Packaging is Required</B></TD>");
                    sbDGCData.append("<TD align='left' width=\"100px\"><B>Max Consumer Unit Part<BR/>Weight/Volume (CON)<BR/>Max Customer Unit Part<BR/>Weight/Volume (CUST)</B></TD>");
                    sbDGCData.append("<TD align='left' width=\"100px\"><B>Other Packaging Requirements</B></TD>");
                    sbDGCData.append("<TD align='left' width=\"100px\"><B>DG Marks / Labels Required on Consumer Unit Part</B></TD>");
                    sbDGCData.append("<TD align='left' width=\"100px\"><B>DG Marks / Labels Required on Customer Unit Part</B></TD>");
                    sbDGCData.append("</TR>");
                    for (int i = 0; i < iSize; i++) {
                        mapDGC = (Map) mlDangerousGoodsClassifications.get(i);
                        sbDGCData.append("<TR>");
                        sbDGCData.append("<TD align='left' width=\"100px\"><B>N :</B>" +convertObjectToString(mapDGC.get("pgSequenceNumber")) + "<BR/><B>DGD:</B>"+convertObjectToString(mapDGC.get("Description"))+"</TD>");
                        sbDGCData.append("<TD align='left' width=\"100px\"><B>UNN:</B>" +convertObjectToString(mapDGC.get("pgUNNumber")) + "<BR/><B>PSN:</B>"+convertObjectToString(mapDGC.get("pgProperShippingName"))+"</TD>");
                        sbDGCData.append("<TD align='left' width=\"100px\"><B>TN1:</B>" +convertObjectToString(mapDGC.get("pgTechnicalName1")) + "<BR/><B>TN2:</B>"+convertObjectToString(mapDGC.get("pgTechnicalName2"))+"</TD>");
                        sbDGCData.append("<TD align='left' width=\"100px\"><B>HC:</B>" + convertObjectToString(mapDGC.get("HazardClass")) + "<BR/><B>PG:</B>"+convertObjectToString(mapDGC.get("PackingGroup"))+"</TD>");
                        sbDGCData.append("<TD align='left' width=\"100px\">" + convertObjectToString(mapDGC.get("pgShipmentLimitedQuantity")) + "</TD>");
                        sbDGCData.append("<TD align='left' width=\"100px\">" + convertObjectToString(mapDGC.get("pgMaxConsumerUnitSize")) + "</TD>");
                        sbDGCData.append("<TD align='left' width=\"100px\"><B>CON:</B>" + convertObjectToString(mapDGC.get("pgConsumerWeightVolume")) + "<BR/><B>CUST:</B>"+convertObjectToString(mapDGC.get("pgCustomerWeightVolume"))+"</TD>");
                        sbDGCData.append("<TD align='left' width=\"100px\">" + convertObjectToString(mapDGC.get("pgOtherPackagingRequirements")) + "</TD>");
                        sbDGCData.append("<TD align='left' width=\"100px\">" + convertObjectToString(mapDGC.get("pgDGCOPLabelRequired")) + "</TD>");
                        sbDGCData.append("<TD align='left' width=\"100px\">" + convertObjectToString(mapDGC.get("pgDGCUPLabelRequired")) + "</TD>");
                        sbDGCData.append("</TR>");
                    }
                    sbDGCData.append("</tbody>");
                    sbDGCData.append("</TABLE><TR><TD><br /></TD></TR></TD></TR>");
                    mlDangerousGoodsClassifications.clear();
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        long endTime = new Date().getTime();
        logger.log(Level.INFO,"aaTotal Time has taken by the getDangerousGoodsClassificationDataForProduct Method is-->{0}", (endTime-startTime));
        return sbDGCData;
    }

    /**
     * This method returns maplist of stability results for APP/DPP/FOP.
     * @param context the eMatrix <code>Context</code> object
     * @param args
     * @returns Maplist of Stability Results
     * @throws Exception
     */
    public StringBuilder getStabilityResultsonProductPartData(Context context, String strObjectId)
    {
        StringBuilder sbStabilityResults= new StringBuilder();
        String sMasterName =DomainConstants.EMPTY_STRING;
        String sMasterRevision =DomainConstants.EMPTY_STRING;
        String sMasterTitle =DomainConstants.EMPTY_STRING;
        String sExpirationDateForStabilityResults =DomainConstants.EMPTY_STRING;
        String sTotalShelfLife =DomainConstants.EMPTY_STRING;
        String sTemparatureGroup =DomainConstants.EMPTY_STRING;
        String sHumidityGroup =DomainConstants.EMPTY_STRING;
        String sTransportFreezeProtection =DomainConstants.EMPTY_STRING;
        String sTransportHeatProtection =DomainConstants.EMPTY_STRING;
        String sBoundaryConditions=DomainConstants.EMPTY_STRING;
        String sStabilityReport=DomainConstants.EMPTY_STRING;
        try {
            //Added by DSM(Sogeti)-2018x.5 for PDF Views Defect #34965 - Starts
            String strObjType=DomainConstants.EMPTY_STRING;
            if(validateString(strObjectId)){
                DomainObject doObj = DomainObject.newInstance(context, strObjectId);
                strObjType = doObj.getInfo(context, DomainConstants.SELECT_TYPE);
            }
            //Added by DSM(Sogeti)-2018x.5 for PDF Views Defect #34965 - Ends
            HashMap programMap  = new HashMap();
            programMap.put("objectId",strObjectId);
            //Added/Modified by DSM(Sogeti)-2018x.5 for PDF Views Requirements - Starts
            programMap.put(DomainConstants.SELECT_TYPE,pgV3Constants.TYPE_PGSTABILITYRESULTS);
            String[] args=JPO.packArgs(programMap);
            MapList mlStabilityResults=(MapList)pgPDFViewHelper.executeMainClassMethod(context, "pgFPPRollup", "getStabilityResultsonProductPart",args );
            programMap.put(DomainConstants.SELECT_TYPE,pgV3Constants.TYPE_MASTERPRODUCTPART);
            String[] masterArgs=JPO.packArgs(programMap);
            MapList mlMasterStabilityResults=(MapList)pgPDFViewHelper.executeMainClassMethod(context, "pgFPPRollup", "getStabilityResultsonProductPart",masterArgs );
            mlStabilityResults.addAll(mlMasterStabilityResults);
            //Added/Modified by DSM(Sogeti)-2018x.5 for PDF Views Requirements - Ends
            DomainObject domProductPart = DomainObject.newInstance(context);
            Map productPartInfo=null;
            if(mlStabilityResults!=null && !mlStabilityResults.isEmpty()) {
                sbStabilityResults.append("<TR><TD><TABLE class=\"WordWrappdf\" cellspacing=\"0\" width=\"1000px\" id=\"DSOStabilityResultsTab\">");
                sbStabilityResults.append("<thead>");
                sbStabilityResults.append("<TR><TD class=\"new\" colspan='5'><font size='4'><B>Stability Document</B></font></TD></TR>");
                sbStabilityResults.append("</thead>");
                sbStabilityResults.append("<tbody>");
                sbStabilityResults.append("<TR>");
                //Modified by DSM(Sogeti)-2018x.5 for PDF Views Defect #34965 - Starts
                if(!(pgV3Constants.TYPE_MASTERPRODUCTPART.equalsIgnoreCase(strObjType))){
                    sbStabilityResults.append("<TD align='left' width=\"100px\"><B>Master Product Part Name</B></TD>");
                    sbStabilityResults.append("<TD align='left' width=\"100px\"><B>Master Product Part Revision</B></TD>");
                    sbStabilityResults.append("<TD align='left' width=\"100px\"><B>Master Product Part Title</B></TD>");
                }
                //Modified by DSM(Sogeti)-2018x.5 for PDF Views Defect #34965 - Ends
                sbStabilityResults.append("<TD align='left' width=\"110px\"><B>Product Expiration Date Required</B></TD>");
                sbStabilityResults.append("<TD align='left' width=\"110px\"><B>Total Shelf Life \\- Days</B></TD>");
                sbStabilityResults.append("<TD align='left' width=\"110px\"><B>Temperature Group</B></TD>");
                sbStabilityResults.append("<TD align='left' width=\"110px\"><B>Humidity Group</B></TD>");
                sbStabilityResults.append("<TD align='left' width=\"110px\"><B>Transport Freeze Protection</B></TD>");
                sbStabilityResults.append("<TD align='left' width=\"110px\"><B>Transport Heat Protection</B></TD>");
                sbStabilityResults.append("<TD align='left' width=\"110px\"><B>Boundary Conditions</B></TD>");
                sbStabilityResults.append("<TD align='left' width=\"110px\"><B>Stability Document</B></TD>");
                sbStabilityResults.append("</TR>");
                int iSize = mlStabilityResults.size();
                for (int i = 0; i < iSize; i++) {
                    Map mpStabilityResultMap=(Map)mlStabilityResults.get(i);
                    sMasterName=(String)mpStabilityResultMap.get("from.name");
                    sMasterName=UIUtil.isNullOrEmpty(sMasterName)?DomainConstants.EMPTY_STRING:sMasterName;
                    sMasterRevision=(String)mpStabilityResultMap.get("from.revision");
                    sMasterRevision=UIUtil.isNullOrEmpty(sMasterRevision)?DomainConstants.EMPTY_STRING:sMasterRevision;
                    sMasterTitle=(String)mpStabilityResultMap.get("from."+pgV3Constants.SELECT_ATTRIBUTE_TITLE);
                    sMasterTitle=UIUtil.isNullOrEmpty(sMasterTitle)?DomainConstants.EMPTY_STRING:sMasterTitle;
                    sExpirationDateForStabilityResults=(String)mpStabilityResultMap.get(pgV3Constants.SELECT_ATTRIBUTE_PGPRODUCTEXPIRATIONDATE);
                    sTotalShelfLife=(String)mpStabilityResultMap.get(pgV3Constants.SELECT_ATTRIBUTE_PGTOTALSHELFLIFE);
                    sTemparatureGroup=(String)mpStabilityResultMap.get(pgV3Constants.SELECT_ATTRIBUTE_PGTEMPERATUREGROUP);
                    sHumidityGroup=(String)mpStabilityResultMap.get(pgV3Constants.SELECT_ATTRIBUTE_PGHUMIDITYGROUP);
                    sTransportFreezeProtection=(String)mpStabilityResultMap.get(pgV3Constants.SELECT_ATTRIBUTE_PGTRANSPORTFREEZEPROTECTION);
                    sTransportHeatProtection=(String)mpStabilityResultMap.get(pgV3Constants.SELECT_ATTRIBUTE_PGTRANSPORTHEATPROTECTION);
                    sStabilityReport = (String)mpStabilityResultMap.get(DomainConstants.SELECT_NAME);
                    sBoundaryConditions = (String)mpStabilityResultMap.get(pgV3Constants.SELECT_ATTRIBUTE_PGBOUNDARYCONDITIONS);

                    sbStabilityResults.append("<TR>");
                    //Modified by DSM(Sogeti)-2018x.5 for PDF Views Defect #34965 - Starts
                    if(!(pgV3Constants.TYPE_MASTERPRODUCTPART.equalsIgnoreCase(strObjType))){
                        sbStabilityResults.append("<TD align='left'>" + sMasterName+ "</TD>");
                        sbStabilityResults.append("<TD align='left'>" + sMasterRevision + "</TD>");
                        sbStabilityResults.append("<TD align='left'>" + sMasterTitle + "</TD>");
                    }
                    //Modified by DSM(Sogeti)-2018x.5 for PDF Views Defect #34965 - Ends
                    sbStabilityResults.append("<TD align='left'>" + sExpirationDateForStabilityResults + "</TD>");
                    sbStabilityResults.append("<TD align='left'>" + sTotalShelfLife + "</TD>");
                    sbStabilityResults.append("<TD align='left'>" + sTemparatureGroup + "</TD>");
                    sbStabilityResults.append("<TD align='left'>" + sHumidityGroup + "</TD>");
                    sbStabilityResults.append("<TD align='left'>" + sTransportFreezeProtection + "</TD>");
                    sbStabilityResults.append("<TD align='left'>" + sTransportHeatProtection + "</TD>");
                    sbStabilityResults.append("<TD align='left'>" + sBoundaryConditions + "</TD>");
                    sbStabilityResults.append("<TD align='left'>" + sStabilityReport + "</TD>");
                    sbStabilityResults.append("</TR>");
                }
                sbStabilityResults.append("</tbody>");
                sbStabilityResults.append("</TABLE><TR><TD><br /></TD></TR></TD></TR>");
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return sbStabilityResults;
    }

//Added by DSM-2018x.2.1 for PDF Views Requirement : Starts
    /**
     * This method is for FOP Chemical/Physical properties selectables.
     * @param context
     * @param ObjectId
     * @throws Exception
     */
    private void getChemicalAndPhysicalData(Context context,String strObjectId) throws Exception{
        if(mpFOPAttributeInfo==null || mpFOPAttributeInfo.isEmpty()) {
            mpFOPAttributeInfo=new HashMap();
            if(validateString(strObjectId)){
                StringList slObjectSelects = new StringList(86);
                slObjectSelects.add(pgV3Constants.SELECT_TYPE);
                slObjectSelects.add(pgV3Constants.SELECT_ATTRIBUTE_PGMAXCONSUMERUNITSIZE);
                slObjectSelects.add(pgV3Constants.SELECT_ATTRIBUTE_PGCUSTOMERUNITLABELING);
                slObjectSelects.add(pgV3Constants.SELECT_ATTRIBUTE_PGCONSUMERUNITLABELING);
                slObjectSelects.add(pgV3Constants.SELECT_ATTRIBUTE_PGPUNNUMBER);
                slObjectSelects.add(pgV3Constants.SELECT_ATTRIBUTE_PGHAZARDCLASS);
                slObjectSelects.add(pgV3Constants.SELECT_ATTRIBUTE_PGPACKINGGROUP);
                slObjectSelects.add(pgV3Constants.SELECT_ATTRIBUTE_PGGAUGEPRESSURE+".inputvalue");
                slObjectSelects.add(pgV3Constants.SELECT_ATTRIBUTE_PGIGNITIONDISTANCE+".inputvalue");
                slObjectSelects.add(pgV3Constants.SELECT_ATTRIBUTE_PGENCLOSEDSPACEIGNITION+".inputvalue");
                slObjectSelects.add(pgV3Constants.SELECT_ATTRIBUTE_PGFOAMFLAMMABILITY);
                slObjectSelects.add(pgV3Constants.SELECT_ATTRIBUTE_PHVALUE);
                slObjectSelects.add(pgV3Constants.SELECT_ATTRIBUTE_PGCONTENTCONDUCTIVITY+".inputvalue");
                slObjectSelects.add(pgV3Constants.SELECT_ATTRIBUTE_PGCORROSIVETOMETALS);
                slObjectSelects.add(pgV3Constants.SELECT_ATTRIBUTE_PGCLOSEDCUPFLASHPOINT);
                slObjectSelects.add(pgV3Constants.SELECT_ATTRIBUTE_PGEVAPORATIONRATE+".inputvalue");
                slObjectSelects.add(pgV3Constants.SELECT_ATTRIBUTE_PGRESERVEACIDITY+".inputvalue");
                slObjectSelects.add(pgV3Constants.SELECT_ATTRIBUTE_PGRESERVERALKALINITY+".inputvalue");
                slObjectSelects.add(pgV3Constants.SELECT_ATTRIBUTE_BOILINGPOINT);
                slObjectSelects.add(pgV3Constants.SELECT_ATTRIBUTE_PGSUSTAINCOMBUSTION);
                slObjectSelects.add(pgV3Constants.SELECT_ATTRIBUTE_PGOXIDIZER);
                slObjectSelects.add(pgV3Constants.SELECT_ATTRIBUTE_PGAVAILABLEOXYGEN);
                slObjectSelects.add(pgV3Constants.SELECT_ATTRIBUTE_PGBYVOLUME+".inputvalue");
                slObjectSelects.add(pgV3Constants.SELECT_ATTRIBUTE_PGBYWEIGHT+".inputvalue");
                slObjectSelects.add(pgV3Constants.SELECT_ATTRIBUTE_PGPROPELLANTEMULSIFIEDPRODUCT);
                slObjectSelects.add(pgV3Constants.SELECT_ATTRIBUTE_PGPROPELLANTNONFLAMMABLE);
                slObjectSelects.add(pgV3Constants.SELECT_ATTRIBUTE_PGKINEMATICVISCOSITY+".inputvalue");
                slObjectSelects.add(pgV3Constants.SELECT_ATTRIBUTE_VAPORPRESSURE);
                slObjectSelects.add(pgV3Constants.SELECT_ATTRIBUTE_BOILINGPOINT+".inputvalue");
                slObjectSelects.add(pgV3Constants.SELECT_ATTRIBUTE_VAPORPRESSURE+".inputvalue");
                slObjectSelects.add("attribute[" + pgV3Constants.ATTRIBUTE_PHVALUE + "].inputvalue");
                slObjectSelects.add(pgV3Constants.SELECT_ATTRIBUTE_PGWTPARAMETERIZED+".inputvalue");
                slObjectSelects.add(pgV3Constants.SELECT_ATTRIBUTE_PGRELATIVEDENSITYORSPECIFICGRAVITY+".inputvalue");
                slObjectSelects.add(pgV3Constants.SELECT_ATTRIBUTE_PGBURNRATE+".inputvalue");
                slObjectSelects.add(pgV3Constants.SELECT_ATTRIBUTE_PGHEATOFDECOMPOSITION+".inputvalue");
                slObjectSelects.add(pgV3Constants.SELECT_ATTRIBUTE_PGSELFACCELDECOMTEMP+".inputvalue");
                slObjectSelects.add(pgV3Constants.SELECT_ATTRIBUTE_PGPROPERSHIPPINGNAME);
                slObjectSelects.add(pgV3Constants.SELECT_ATTRIBUTE_PGKSTDUSTDEFLAGRATIONINDEX+".inputvalue");
                slObjectSelects.add(pgV3Constants.SELECT_ATTRIBUTE_PGPMAXEXPLOSIONPRESSURE+".inputvalue");
                slObjectSelects.add(pgV3Constants.SELECT_ATTRIBUTE_PGDANGEROUSGOODSCLASSIFICATION);
                slObjectSelects.add(pgV3Constants.SELECT_ATTRIBUTE_PGCOLOR);
                slObjectSelects.add(pgV3Constants.SELECT_ATTRIBUTE_PG_COLOR_INTENSITY);
                slObjectSelects.add(pgV3Constants.SELECT_ATTRIBUTE_PG_ODOUR);
                slObjectSelects.add(pgV3Constants.SELECT_ATTRIBUTE_PG_CLOSEDCUPFLASHPOINTVALUE+".inputvalue");
                slObjectSelects.add(pgV3Constants.SELECT_ATTRIBUTE_PG_BOILINGPOINTVALUE+".inputvalue");
                slObjectSelects.add(pgV3Constants.SELECT_ATTRIBUTE_PG_BASEPRODUCTSUSTAINCOMBUSTION);
                slObjectSelects.add(pgV3Constants.SELECT_ATTRIBUTE_PG_OXIDIZERSODIUMPERCARBONATE);
                slObjectSelects.add(pgV3Constants.SELECT_ATTRIBUTE_PG_OXIDIZERHYDROGENPEROXIDE);
                slObjectSelects.add(pgV3Constants.SELECT_ATTRIBUTE_PG_ORGANIC_PEROXIDE);
                slObjectSelects.add(pgV3Constants.SELECT_ATTRIBUTE_PG_AVAILABLE_OXYGEN_CONTENT+".inputvalue");
                slObjectSelects.add(pgV3Constants.SELECT_ATTRIBUTE_PG_FLAMMABLE_GAS_PROPELLANT);
                slObjectSelects.add(pgV3Constants.SELECT_ATTRIBUTE_PG_PROPELLANT);
                slObjectSelects.add(pgV3Constants.SELECT_ATTRIBUTE_PG_PH_DILUTION);
                slObjectSelects.add(pgV3Constants.SELECT_ATTRIBUTE_PG_LIQUID_CORROSIVE_TO_METAL);
                slObjectSelects.add(pgV3Constants.SELECT_ATTRIBUTE_PG_TECHNICAL_CTM);
                slObjectSelects.add(pgV3Constants.SELECT_ATTRIBUTE_PG_FLAMMABLE_LIQUID);
                slObjectSelects.add(pgV3Constants.SELECT_ATTRIBUTE_PG_SELF_REACTIVE_PROPERTIES);
                slObjectSelects.add(pgV3Constants.SELECT_ATTRIBUTE_PG_PH_AVAILABILITY);
                slObjectSelects.add(pgV3Constants.SELECT_ATTRIBUTE_PG_PRODUCT_CONTAIN_ETHANOL);
                slObjectSelects.add(pgV3Constants.SELECT_ATTRIBUTE_PG_PRODUCT_CONTAIN_GAS);
                slObjectSelects.add(pgV3Constants.SELECT_ATTRIBUTE_PG_HEAT_OF_COMBUSTION+".inputvalue");
                slObjectSelects.add(pgV3Constants.SELECT_ATTRIBUTE_PG_CAN_CONSTRUCTION);
                slObjectSelects.add(pgV3Constants.SELECT_ATTRIBUTE_PG_AEROSOLTYPE);
                slObjectSelects.add(pgV3Constants.SELECT_ATTRIBUTE_PG_IS_AEROSOLTYPE_TEST);
                slObjectSelects.add(pgV3Constants.SELECT_ATTRIBUTE_PG_FLAMEHEIGHT+".inputvalue");
                slObjectSelects.add(pgV3Constants.SELECT_ATTRIBUTE_PG_FLAME_DURATION+".inputvalue");
                slObjectSelects.add(pgV3Constants.SELECT_ATTRIBUTE_PG_AEROSOL_CONDUCTIVITY+".inputvalue");
                slObjectSelects.add(pgV3Constants.SELECT_ATTRIBUTE_PG_PERCENT_OF_WEIGHT_FLAMMABLE+".inputvalue");
                slObjectSelects.add(pgV3Constants.SELECT_ATTRIBUTE_VAPOUR_DENSITY+".inputvalue");
                slObjectSelects.add(pgV3Constants.SELECT_ATTRIBUTE_PG_PH+".inputvalue");
                slObjectSelects.add(pgV3Constants.SELECT_ATTRIBUTE_ODOUR);
                slObjectSelects.add(pgV3Constants.SELECT_ATTRIBUTE_PGPRODUCTOXIDIZER);
                slObjectSelects.add(pgV3Constants.SELECT_ATTRIBUTE_PGBOILINGPOINT+".inputvalue");
                slObjectSelects.add(pgV3Constants.SELECT_ATTRIBUTE_PGPCBBYVWMISCIBLEALOHOLS);
                slObjectSelects.add(pgV3Constants.SELECT_ATTRIBUTE_PGPRODUCTHAVEAFIREPOINT);
                slObjectSelects.add(pgV3Constants.SELECT_ATTRIBUTE_PGAEROSOLCANCORROSIVETOMETALS);
                slObjectSelects.add(pgV3Constants.SELECT_ATTRIBUTE_PGFLAMMABLEORNONFLAMMABLE);
                slObjectSelects.add(pgPDFViewConstants.SELECT_ATTRIBUTE_PGCONDUCTIVITYOFTHELIQUID+".inputvalue");
                slObjectSelects.add(pgPDFViewConstants.SELECT_ATTRIBUTE_PGPRODUCTTOINCREASEBURNRATE);
                //Added by DSM(Sogeti) - 2018x.5 PDF Views Requirement START
                slObjectSelects.add(pgPDFViewConstants.SELECT_ATTRIBUTE_IS_LIQUID_AQE_SOL);
                slObjectSelects.add(pgPDFViewConstants.SELECT_ATTRIBUTE_RESERVE_ALKALINITY_UOM);
                slObjectSelects.add(pgPDFViewConstants.SELECT_ATTRIBUTE_RESERVE_ALKALINITY_TIT_END_POINT+".inputvalue");
                slObjectSelects.add(pgPDFViewConstants.SELECT_ATTRIBUTE_PH_MIN+".inputvalue");
                slObjectSelects.add(pgPDFViewConstants.SELECT_ATTRIBUTE_PH_MAX+".inputvalue");
                slObjectSelects.add(pgPDFViewConstants.SELECT_ATTRIBUTE_PH_DATA_AVAILABLE);
                //Added by DSM(Sogeti) - 2018x.5 PDF Views Requirement END
                //Added by DSM(Sogeti)-2018x.5 for PDF Views Defect #35276: Starts
                slObjectSelects.add(pgPDFViewConstants.SELECT_ATTRIBUTE_PGPRODUCTSUSTAINCOMBUSTION);
                //Added by DSM(Sogeti)-2018x.5 for PDF Views Defect #35276: Ends
                DomainObject domainObject= DomainObject.newInstance(context,strObjectId);
                mpFOPAttributeInfo = domainObject.getInfo(context, slObjectSelects);
            }
        }
    }

    /**
     * This method returns result of Chemical And Physical For GHS And DGC Classification.
     * @param context
     * @param objectID
     * @throws Exception
     */
    //Modified by DSM(Sogeti) - 2018x.5 PDF Views Requirement
    private StringBuilder getChemicalAndPhysicalForGHSAndDGCClassification(Context context,String strObjectId) throws Exception {
        long startTime = new Date().getTime();
        StringBuilder sbChemicalDataInfo = new StringBuilder();
        String strGaugePressure = DomainConstants.EMPTY_STRING;
        String strIgnitionDistance = DomainConstants.EMPTY_STRING;
        String strEnclosedSpaceIgnition = DomainConstants.EMPTY_STRING;
        String strClosedCupFlashpoint = DomainConstants.EMPTY_STRING;
        String strKinematicViscosity = DomainConstants.EMPTY_STRING;
        String strVaporPressure = DomainConstants.EMPTY_STRING;
        String strRelativeDensityOrSpecificGravity = DomainConstants.EMPTY_STRING;
        String strEvpRate = DomainConstants.EMPTY_STRING;
        String strResAcdity = DomainConstants.EMPTY_STRING;
        String strResAlknity = DomainConstants.EMPTY_STRING;
        String strBurnRate = DomainConstants.EMPTY_STRING;
        String strHeatOfDecomposition =DomainConstants.EMPTY_STRING;
        String strSelfAccelDecompTemp = DomainConstants.EMPTY_STRING;
        String strColorIntensity = DomainConstants.EMPTY_STRING;
        String strOdour = DomainConstants.EMPTY_STRING;
        String strBolingPointValue = DomainConstants.EMPTY_STRING;
        String strDoesPdtCombustion = DomainConstants.EMPTY_STRING;
        String strOxidizerNaPerCa = DomainConstants.EMPTY_STRING;
        String strHydrogenPeroxide = DomainConstants.EMPTY_STRING;
        String strOrganicPeroxide = DomainConstants.EMPTY_STRING;
        String strAvailableOxyContent = DomainConstants.EMPTY_STRING;
        String strDilution = DomainConstants.EMPTY_STRING;
        String strLiquidCorrMetal =  DomainConstants.EMPTY_STRING;
        String strTechCorrMetal  = DomainConstants.EMPTY_STRING;
        String strFlammabelLiq = DomainConstants.EMPTY_STRING;
        String strConductivityoftheLiq = DomainConstants.EMPTY_STRING;
        String strProdReactiveProp =  DomainConstants.EMPTY_STRING;
        String strPHAvalibility =  DomainConstants.EMPTY_STRING;
        String strHeatOfCombustion = DomainConstants.EMPTY_STRING;
        String strCanConst = DomainConstants.EMPTY_STRING;
        String strAerosolType = DomainConstants.EMPTY_STRING;
        String strAerosolTestData = DomainConstants.EMPTY_STRING;
        String strFlameHt = DomainConstants.EMPTY_STRING;
        String strFlameDuration = DomainConstants.EMPTY_STRING;
        String strCondAerosol = DomainConstants.EMPTY_STRING;
        String strVaporDensity = DomainConstants.EMPTY_STRING;
        String strBoiling_Point = DomainConstants.EMPTY_STRING;
        String str_PH = DomainConstants.EMPTY_STRING;
        String strPGProductOxidizer = DomainConstants.EMPTY_STRING;
        String strPGAerosolCanCorrosiveToMetals = DomainConstants.EMPTY_STRING;
        String strColor = DomainConstants.EMPTY_STRING;
        String strProductPotentialToIncreaseBurningRate = DomainConstants.EMPTY_STRING;
        //Added by DSM(Sogeti) - 2018x.5 PDF Views Requirement START
        String strIsTheLiquidAqueousSol = DomainConstants.EMPTY_STRING;
        String strReserveAlkalinityUoM = DomainConstants.EMPTY_STRING;
        String strReserveAlkalinityTitrationEndPoint = DomainConstants.EMPTY_STRING;
        String strPHMin = DomainConstants.EMPTY_STRING;
        String strPHMax = DomainConstants.EMPTY_STRING;
        String strPHDataAvailable = DomainConstants.EMPTY_STRING;
        //Added by DSM(Sogeti) - 2018x.5 PDF Views Requirement END
        try{
            getChemicalAndPhysicalData(context, strObjectId);
            if(validateString(strObjectId)){
                if(!mpFOPAttributeInfo.isEmpty()){
                    strGaugePressure = (String) mpFOPAttributeInfo.get(pgV3Constants.SELECT_ATTRIBUTE_PGGAUGEPRESSURE+".inputvalue");
                    strColor =(String)mpFOPAttributeInfo.get(pgV3Constants.SELECT_ATTRIBUTE_PGCOLOR);
                    strColorIntensity =(String)mpFOPAttributeInfo.get(pgV3Constants.SELECT_ATTRIBUTE_PG_COLOR_INTENSITY);
                    strOdour = (String)mpFOPAttributeInfo.get(pgV3Constants.SELECT_ATTRIBUTE_ODOUR);
                    if(UIUtil.isNotNullAndNotEmpty(strOdour)) {
                        strOdour = strOdour.replaceAll("[<]","#LESS_THAN");
                    }
                    strBolingPointValue = (String)mpFOPAttributeInfo.get(pgV3Constants.SELECT_ATTRIBUTE_PG_BOILINGPOINTVALUE+".inputvalue");
                    strDoesPdtCombustion = (String)mpFOPAttributeInfo.get(pgPDFViewConstants.SELECT_ATTRIBUTE_PGPRODUCTSUSTAINCOMBUSTION);
                    //Modified by DSM(Sogeti)-2018x.5 for PDF Views Defect #35276: Ends
                    strOxidizerNaPerCa = (String)mpFOPAttributeInfo.get(pgV3Constants.SELECT_ATTRIBUTE_PG_OXIDIZERSODIUMPERCARBONATE);
                    strHydrogenPeroxide = (String)mpFOPAttributeInfo.get(pgV3Constants.SELECT_ATTRIBUTE_PG_OXIDIZERHYDROGENPEROXIDE);
                    strOrganicPeroxide = (String)mpFOPAttributeInfo.get(pgV3Constants.SELECT_ATTRIBUTE_PG_ORGANIC_PEROXIDE);
                    strAvailableOxyContent = (String)mpFOPAttributeInfo.get(pgV3Constants.SELECT_ATTRIBUTE_PG_AVAILABLE_OXYGEN_CONTENT+".inputvalue");
                    strDilution = (String)mpFOPAttributeInfo.get(pgV3Constants.SELECT_ATTRIBUTE_PG_PH_DILUTION);
                    strLiquidCorrMetal = (String)mpFOPAttributeInfo.get(pgV3Constants.SELECT_ATTRIBUTE_PG_LIQUID_CORROSIVE_TO_METAL);
                    strTechCorrMetal = (String)mpFOPAttributeInfo.get(pgV3Constants.SELECT_ATTRIBUTE_PG_TECHNICAL_CTM);
                    if(UIUtil.isNotNullAndNotEmpty(strTechCorrMetal)) {
                        strTechCorrMetal = strTechCorrMetal.replaceAll("[<]","#LESS_THAN");
                    }
                    strFlammabelLiq = (String)mpFOPAttributeInfo.get(pgV3Constants.SELECT_ATTRIBUTE_PG_FLAMMABLE_LIQUID);
                    strConductivityoftheLiq=(String)mpFOPAttributeInfo.get(pgPDFViewConstants.SELECT_ATTRIBUTE_PGCONDUCTIVITYOFTHELIQUID+".inputvalue");
                    strProdReactiveProp = (String)mpFOPAttributeInfo.get(pgV3Constants.SELECT_ATTRIBUTE_PG_SELF_REACTIVE_PROPERTIES);
                    strPHAvalibility = (String)mpFOPAttributeInfo.get(pgV3Constants.SELECT_ATTRIBUTE_PG_PH_AVAILABILITY);
                    strHeatOfCombustion  = (String)mpFOPAttributeInfo.get(pgV3Constants.SELECT_ATTRIBUTE_PG_HEAT_OF_COMBUSTION+".inputvalue");
                    strCanConst  = (String)mpFOPAttributeInfo.get(pgV3Constants.SELECT_ATTRIBUTE_PG_CAN_CONSTRUCTION);
                    strAerosolType = (String)mpFOPAttributeInfo.get(pgV3Constants.SELECT_ATTRIBUTE_PG_AEROSOLTYPE);
                    strAerosolTestData = (String)mpFOPAttributeInfo.get(pgV3Constants.SELECT_ATTRIBUTE_PG_IS_AEROSOLTYPE_TEST);
                    if(UIUtil.isNotNullAndNotEmpty(strAerosolTestData)) {
                        strAerosolTestData = strAerosolTestData.replaceAll("[<]","#LESS_THAN");
                    }
                    strFlameHt = (String)mpFOPAttributeInfo.get(pgV3Constants.SELECT_ATTRIBUTE_PG_FLAMEHEIGHT+".inputvalue");
                    strFlameDuration = (String)mpFOPAttributeInfo.get(pgV3Constants.SELECT_ATTRIBUTE_PG_FLAME_DURATION+".inputvalue");
                    strCondAerosol = (String)mpFOPAttributeInfo.get(pgV3Constants.SELECT_ATTRIBUTE_PG_AEROSOL_CONDUCTIVITY+".inputvalue");
                    strBoiling_Point = (String)mpFOPAttributeInfo.get(pgV3Constants.SELECT_ATTRIBUTE_PGBOILINGPOINT+".inputvalue");
                    str_PH = (String)mpFOPAttributeInfo.get(pgV3Constants.SELECT_ATTRIBUTE_PG_PH+".inputvalue");
                    strVaporDensity = (String) mpFOPAttributeInfo.get(pgV3Constants.SELECT_ATTRIBUTE_VAPOUR_DENSITY+".inputvalue");
                    strIgnitionDistance = (String) mpFOPAttributeInfo.get(pgV3Constants.SELECT_ATTRIBUTE_PGIGNITIONDISTANCE+".inputvalue");
                    strEnclosedSpaceIgnition = (String) mpFOPAttributeInfo.get(pgV3Constants.SELECT_ATTRIBUTE_PGENCLOSEDSPACEIGNITION+".inputvalue");
                    strClosedCupFlashpoint = (String) mpFOPAttributeInfo.get(pgV3Constants.SELECT_ATTRIBUTE_PGCLOSEDCUPFLASHPOINT);
                    strPGProductOxidizer = (String) mpFOPAttributeInfo.get(pgV3Constants.SELECT_ATTRIBUTE_PGPRODUCTOXIDIZER);
                    strKinematicViscosity = (String) mpFOPAttributeInfo.get(pgV3Constants.SELECT_ATTRIBUTE_PGKINEMATICVISCOSITY+".inputvalue");
                    String strObjType = (String) mpFOPAttributeInfo.get(DomainConstants.SELECT_TYPE);
                    // Modified by DSM (Sogeti)- for 2018x.6 PDF Views Defect# 40153  - Starts
                    if(strObjType.equalsIgnoreCase(pgV3Constants.TYPE_RAWMATERIALPART) || strObjType.equalsIgnoreCase(pgV3Constants.TYPE_FORMULATIONPART) ||strObjType.equalsIgnoreCase(pgV3Constants.TYPE_ASSEMBLEDPRODUCTPART)){
                        // Modified by DSM (Sogeti)- for 2018x.6 PDF Views Defect# 40153  - Ends
                        strVaporPressure = (String) mpFOPAttributeInfo.get(pgV3Constants.SELECT_ATTRIBUTE_VAPORPRESSURE+".inputvalue");
                    } else {
                        strVaporPressure = (String) mpFOPAttributeInfo.get(pgV3Constants.SELECT_ATTRIBUTE_VAPORPRESSURE);
                    }
                    strRelativeDensityOrSpecificGravity = (String) mpFOPAttributeInfo.get(pgV3Constants.SELECT_ATTRIBUTE_PGRELATIVEDENSITYORSPECIFICGRAVITY+".inputvalue");
                    strEvpRate = (String) mpFOPAttributeInfo.get(pgV3Constants.SELECT_ATTRIBUTE_PGEVAPORATIONRATE+".inputvalue");
                    strResAcdity = (String) mpFOPAttributeInfo.get(pgV3Constants.SELECT_ATTRIBUTE_PGRESERVEACIDITY+".inputvalue");
                    strResAlknity = (String) mpFOPAttributeInfo.get(pgV3Constants.SELECT_ATTRIBUTE_PGRESERVERALKALINITY+".inputvalue");
                    strBurnRate = (String) mpFOPAttributeInfo.get(pgV3Constants.SELECT_ATTRIBUTE_PGBURNRATE+".inputvalue");
                    strHeatOfDecomposition = (String) mpFOPAttributeInfo.get(pgV3Constants.SELECT_ATTRIBUTE_PGHEATOFDECOMPOSITION+".inputvalue");
                    strSelfAccelDecompTemp = (String) mpFOPAttributeInfo.get(pgV3Constants.SELECT_ATTRIBUTE_PGSELFACCELDECOMTEMP+".inputvalue");
                    strPGAerosolCanCorrosiveToMetals = (String) mpFOPAttributeInfo.get(pgV3Constants.SELECT_ATTRIBUTE_PGAEROSOLCANCORROSIVETOMETALS);
                    strProductPotentialToIncreaseBurningRate = (String) mpFOPAttributeInfo.get(pgPDFViewConstants.SELECT_ATTRIBUTE_PGPRODUCTTOINCREASEBURNRATE);
                    //Added by DSM(Sogeti) - 2018x.5 PDF Views Requirement START
                    strIsTheLiquidAqueousSol = (String) mpFOPAttributeInfo.get(pgPDFViewConstants.SELECT_ATTRIBUTE_IS_LIQUID_AQE_SOL);
                    strReserveAlkalinityUoM = (String) mpFOPAttributeInfo.get(pgPDFViewConstants.SELECT_ATTRIBUTE_RESERVE_ALKALINITY_UOM);
                    strReserveAlkalinityTitrationEndPoint = (String) mpFOPAttributeInfo.get(pgPDFViewConstants.SELECT_ATTRIBUTE_RESERVE_ALKALINITY_TIT_END_POINT+".inputvalue");
                    strPHMin = (String) mpFOPAttributeInfo.get(pgPDFViewConstants.SELECT_ATTRIBUTE_PH_MIN+".inputvalue");
                    strPHMax = (String) mpFOPAttributeInfo.get(pgPDFViewConstants.SELECT_ATTRIBUTE_PH_MAX+".inputvalue");
                    strPHDataAvailable = (String) mpFOPAttributeInfo.get(pgPDFViewConstants.SELECT_ATTRIBUTE_PH_DATA_AVAILABLE);
                    //Added by DSM(Sogeti) - 2018x.5 PDF Views Requirement END
                    sbChemicalDataInfo.append("<TR><TD><TABLE class=\"WordWrappdf\" cellspacing=\"0\" width=\"990px\" id=\"pgFormulatedProductTable\">");
                    sbChemicalDataInfo.append("<thead>");
                    sbChemicalDataInfo.append("<TR><TD colspan='4' class=\"new\" ><font size='4'><b>Chemical and Physical Properties - GHS/DGC Classification<br/></b></font></TD></TR>");
                    sbChemicalDataInfo.append("</thead>");

                    sbChemicalDataInfo.append("<TR>");
                    sbChemicalDataInfo.append("<TD align='left' width=\"250px\"><B>Color</B></TD>");
                    sbChemicalDataInfo.append("<TD align='left' width=\"250px\">"+validateString1(strColor)+"</TD>");
                    sbChemicalDataInfo.append("<TD align='left' width=\"250px\"><B>Color Intensity</B></TD>");
                    sbChemicalDataInfo.append("<TD align='left' width=\"250px\">"+validateString1(strColorIntensity)+"</TD>");
                    sbChemicalDataInfo.append("</TR>");

                    sbChemicalDataInfo.append("<TR>");
                    sbChemicalDataInfo.append("<TD align='left' width=\"250px\"><B>Odour</B></TD>");
                    sbChemicalDataInfo.append("<TD align='left' width=\"250px\">"+validateString1(strOdour)+"</TD>");
                    sbChemicalDataInfo.append("<TD align='left' width=\"250px\"><B>Heat of Combustion (kJ/g) [calculated or tested value]</B></TD>");
                    sbChemicalDataInfo.append("<TD align='left' width=\"250px\">"+validateString1(strHeatOfCombustion)+"</TD>");
                    sbChemicalDataInfo.append("</TR>");

                    sbChemicalDataInfo.append("<TR>");
                    sbChemicalDataInfo.append("<TD align='left' width=\"250px\"><B>Can Construction</B></TD>");
                    sbChemicalDataInfo.append("<TD align='left' width=\"250px\">"+validateString1(strCanConst)+"</TD>");
                    sbChemicalDataInfo.append("<TD align='left' width=\"250px\"><B>Gauge Pressure @ 130F/55C (kPa)[maximum value]</B></TD>");
                    sbChemicalDataInfo.append("<TD align='left' width=\"250px\">"+validateString1(strGaugePressure)+"</TD>");
                    sbChemicalDataInfo.append("</TR>");

                    sbChemicalDataInfo.append("<TR>");
                    sbChemicalDataInfo.append("<TD align='left' width=\"250px\"><B>Aerosol Type</B></TD>");
                    sbChemicalDataInfo.append("<TD align='left' width=\"250px\">"+validateString1(strAerosolType)+"</TD>");
                    sbChemicalDataInfo.append("<TD align='left' width=\"250px\"><B>Is aerosol test data needed?</B></TD>");
                    sbChemicalDataInfo.append("<TD align='left' width=\"250px\">"+validateString1(strAerosolTestData)+"</TD>");
                    sbChemicalDataInfo.append("</TR>");

                    sbChemicalDataInfo.append("<TR>");
                    sbChemicalDataInfo.append("<TD align='left' width=\"250px\"><B>Ignition Distance - cm [maximum tested value]</B></TD>");
                    sbChemicalDataInfo.append("<TD align='left' width=\"250px\">"+validateString1(strIgnitionDistance)+"</TD>");
                    sbChemicalDataInfo.append("<TD align='left' width=\"250px\"><B>Enclosed Space Ignition Time Equivalent (s/m3) [maximum tested value]</B></TD>");
                    sbChemicalDataInfo.append("<TD align='left' width=\"250px\">"+validateString1(strEnclosedSpaceIgnition)+"</TD>");
                    sbChemicalDataInfo.append("</TR>");

                    sbChemicalDataInfo.append("<TR>");
                    sbChemicalDataInfo.append("<TD align='left' width=\"250px\"><B>Foam Flammability Test: Flame Height (cm) [maximum tested value]</B></TD>");
                    sbChemicalDataInfo.append("<TD align='left' width=\"250px\">"+validateString1(strFlameHt)+"</TD>");
                    sbChemicalDataInfo.append("<TD align='left' width=\"250px\"><B>Foam Flammability Test: Flame Duration (sec) [maximum tested value]</B></TD>");
                    sbChemicalDataInfo.append("<TD align='left' width=\"250px\">"+validateString1(strFlameDuration)+"</TD>");
                    sbChemicalDataInfo.append("</TR>");

                    sbChemicalDataInfo.append("<TR>");
                    sbChemicalDataInfo.append("<TD align='left' width=\"250px\"><B>Vapor Pressure (pascals)</B></TD>");
                    sbChemicalDataInfo.append("<TD align='left' width=\"250px\">"+validateString1(strVaporPressure)+"</TD>");
                    sbChemicalDataInfo.append("<TD align='left' width=\"250px\"><B>Relative Vapor Density(Hydrogen=1) [Mandatory for Air Care products to be sold in the EU]</B></TD>");
                    sbChemicalDataInfo.append("<TD align='left' width=\"250px\">"+validateString1(strVaporDensity)+"</TD>");
                    sbChemicalDataInfo.append("</TR>");
                    //		Modified for PDF Defect 32199 -Starts
                    sbChemicalDataInfo.append("<TR>");
                    sbChemicalDataInfo.append("<TD align='left' width=\"250px\"><B>Relative Density</B></TD>");
                    sbChemicalDataInfo.append("<TD align='left' width=\"250px\">"+validateString1(strRelativeDensityOrSpecificGravity)+"</TD>");
                    //Modify by DSM(Sogeti) 2018x.6.1 Req #39478 - Starts
                    sbChemicalDataInfo.append("<TD align='left' width=\"250px\"><B>Does the formula contain water (i.e. can pH be measured)?</B></TD>");
                    //Modify by DSM(Sogeti) 2018x.6.1 Req #39478 - Ends
                    sbChemicalDataInfo.append("<TD align='left' width=\"250px\">"+validateString1(strIsTheLiquidAqueousSol)+"</TD>");
                    sbChemicalDataInfo.append("</TR>");
                    //		Modified for PDF Defect 32199 -Ends

                    //		Modified for PDF Defect 32199 -Starts
                    sbChemicalDataInfo.append("<TR>");
                    sbChemicalDataInfo.append("<TD align='left' width=\"250px\"><B>Is pH data available?</B></TD>");
                    sbChemicalDataInfo.append("<TD align='left' width=\"250px\">"+validateString1(strPHDataAvailable)+"</TD>");
                    sbChemicalDataInfo.append("<TD align='left' width=\"250px\"><B>pH [Target]</B></TD>");
                    sbChemicalDataInfo.append("<TD align='left' width=\"250px\">"+validateString1(str_PH)+"</TD>");
                    sbChemicalDataInfo.append("</TR>");
                    //		Modified for PDF Defect 32199 -Ends
                    //Added by DSM(Sogeti) - 2018x.5 PDF Views Requirement START
                    sbChemicalDataInfo.append("<TR>");
                    sbChemicalDataInfo.append("<TD align='left' width=\"250px\"><B>pH [minimum]</B></TD>");
                    sbChemicalDataInfo.append("<TD align='left' width=\"250px\">"+validateString1(strPHMin)+"</TD>");
                    sbChemicalDataInfo.append("<TD align='left' width=\"250px\"><B>pH [maximum]</B></TD>");
                    sbChemicalDataInfo.append("<TD align='left' width=\"250px\">"+validateString1(strPHMax)+"</TD>");
                    sbChemicalDataInfo.append("</TR>");
                    //Added by DSM(Sogeti) - 2018x.5 PDF Views Requirement END

                    sbChemicalDataInfo.append("<TR>");
                    sbChemicalDataInfo.append("<TD align='left' width=\"250px\"><B>pH Dilution</B></TD>");
                    sbChemicalDataInfo.append("<TD align='left' width=\"250px\">"+validateString1(strDilution)+"</TD>");
                    sbChemicalDataInfo.append("<TD align='left' width=\"250px\"><B>Are the Contents of the aerosol can Corrosive to Metals (Aluminum or Carbon Steel)?</B></TD>");
                    sbChemicalDataInfo.append("<TD align='left' width=\"250px\">"+validateString1(strPGAerosolCanCorrosiveToMetals)+"</TD>");
                    sbChemicalDataInfo.append("</TR>");

                    sbChemicalDataInfo.append("<TR>");
                    sbChemicalDataInfo.append("<TD align='left' width=\"250px\"><B>Technical basis for the Corrosive to Metals determination provided</B></TD>");
                    sbChemicalDataInfo.append("<TD align='left' width=\"250px\">"+validateString1(strTechCorrMetal)+"</TD>");
                    sbChemicalDataInfo.append("<TD align='left' width=\"250px\"><B>Conductivity of the contents in the aerosol can (microsiemens/cm)</B></TD>");
                    sbChemicalDataInfo.append("<TD align='left' width=\"250px\">"+validateString1(strCondAerosol)+"</TD>");
                    sbChemicalDataInfo.append("</TR>");

                    sbChemicalDataInfo.append("<TR>");
                    sbChemicalDataInfo.append("<TD align='left' width=\"250px\"><B>Closed Cup Flashpoint (C)</B></TD>");
                    // Modified by DSM - for 2018x.6 PDF Views Defect# 38652  - Starts
                    sbChemicalDataInfo.append("<TD align='left' width=\"250px\">"+validateString1(checkLessThanGreaterThan(strClosedCupFlashpoint))+"</TD>");
                    // Modified by DSM - for 2018x.6 PDF Views Defect# 38652  - End
                    sbChemicalDataInfo.append("<TD align='left' width=\"250px\"></TD>");
                    sbChemicalDataInfo.append("<TD align='left' width=\"250px\"></TD>");
                    sbChemicalDataInfo.append("</TR>");

                    sbChemicalDataInfo.append("<TR>");
                    sbChemicalDataInfo.append("<TD align='left' width=\"250px\"><B>Boiling Point (C)</B></TD>");
                    sbChemicalDataInfo.append("<TD align='left' width=\"250px\">"+validateString1(strBoiling_Point)+"</TD>");
                    sbChemicalDataInfo.append("<TD align='left' width=\"250px\"><B>Boiling Point Value (C)</B></TD>");
                    sbChemicalDataInfo.append("<TD align='left' width=\"250px\">"+validateString1(strBolingPointValue)+"</TD>");
                    sbChemicalDataInfo.append("</TR>");

                    sbChemicalDataInfo.append("<TR>");
                    sbChemicalDataInfo.append("<TD align='left' width=\"250px\"><B>Does the product Sustain Combustion?</B></TD>");
                    sbChemicalDataInfo.append("<TD align='left' width=\"250px\">"+validateString1(strDoesPdtCombustion)+"</TD>");
                    sbChemicalDataInfo.append("<TD align='left' width=\"250px\"><B>Does the Product Contain an Oxidizer as a Raw Material?</B></TD>");
                    sbChemicalDataInfo.append("<TD align='left' width=\"250px\">"+validateString1(strPGProductOxidizer)+"</TD>");
                    sbChemicalDataInfo.append("</TR>");

                    sbChemicalDataInfo.append("<TR>");
                    sbChemicalDataInfo.append("<TD align='left' width=\"250px\"><B>Is the Oxidizer Sodium percarbonate #LESS_THAN 60%?</B></TD>");
                    sbChemicalDataInfo.append("<TD align='left' width=\"250px\">"+validateString1(strOxidizerNaPerCa)+"</TD>");
                    sbChemicalDataInfo.append("<TD align='left' width=\"250px\"><B>Is the Oxidizer Hydrogen Peroxide #LESS_THAN 8%</B></TD>");
                    sbChemicalDataInfo.append("<TD align='left' width=\"250px\">"+validateString1(strHydrogenPeroxide)+"</TD>");
                    sbChemicalDataInfo.append("</TR>");

                    sbChemicalDataInfo.append("<TR>");
                    sbChemicalDataInfo.append("<TD align='left' width=\"250px\"><B>Does the product has the potential to increase the burning rate or intensity of a combustible substance?</B></TD>");
                    sbChemicalDataInfo.append("<TD align='left' width=\"250px\">"+validateString1(strProductPotentialToIncreaseBurningRate)+"</TD>");
                    sbChemicalDataInfo.append("<TD align='left' width=\"250px\"><B>Does product contain an Organic Peroxide as a raw material?</B></TD>");
                    sbChemicalDataInfo.append("<TD align='left' width=\"250px\">"+validateString1(strOrganicPeroxide)+"</TD>");
                    sbChemicalDataInfo.append("</TR>");

                    sbChemicalDataInfo.append("<TR>");
                    sbChemicalDataInfo.append("<TD align='left' width=\"250px\"><B>Available oxygen content (%)</B></TD>");
                    sbChemicalDataInfo.append("<TD align='left' width=\"250px\">"+validateString1(strAvailableOxyContent)+"</TD>");
                    //		Modified for PDF Defect 32199 -Starts
//					sbChemicalDataInfo.append("<TD align='left' width=\"250px\">"+validateString1(strKinematicViscosity)+"</TD>");
                    sbChemicalDataInfo.append("<TD align='left' width=\"250px\"><B>Dynamic Viscosity (centipoise) [mandatory for products sold in the EU]</B></TD>");
                    sbChemicalDataInfo.append("<TD align='left' width=\"250px\"></TD>");
                    //		Modified for PDF Defect 32199 -Starts
                    sbChemicalDataInfo.append("</TR>");

                    sbChemicalDataInfo.append("<TR>");
                    //Modified by DSM for PDF View for Defect 32199 -- Starts
                    //sbChemicalDataInfo.append("<TD align='left' width=\"250px\"><B>Evaporation Rate</B></TD>");
                    sbChemicalDataInfo.append("<TD align='left' width=\"250px\"><B>Relative Evaporation Rate (butyl acetate=1) [Mandatory for Air Care products to be sold in the EU]</B></TD>");
                    sbChemicalDataInfo.append("<TD align='left' width=\"250px\">"+validateString1(strEvpRate)+"</TD>");
                    //Modified by DSM for PDF View for Defect 32199 -- Ends
                    //Modified by DSM for PDF View for Defect 32199 -- Starts
//					sbChemicalDataInfo.append("<TD align='left' width=\"250px\"><B>pH availability</B></TD>");
//					sbChemicalDataInfo.append("<TD align='left' width=\"250px\">"+validateString1(strPHAvalibility)+"</TD>");
                    //Modified by DSM for PDF View for Defect 32199 -- Ends
                    sbChemicalDataInfo.append("<TD align='left' width=\"250px\"><B>Reserve Alkalinity, % (required if pH[target] or pH [maximum] #GREATER_THAN 10)</B></TD>");
                    sbChemicalDataInfo.append("<TD align='left' width=\"250px\">"+validateString1(strResAlknity)+"</TD>");

                    sbChemicalDataInfo.append("</TR>");
                    //Modified by DSM for PDF View for Defect 32199 -- Starts
                    sbChemicalDataInfo.append("<TR>");
//					sbChemicalDataInfo.append("<TD align='left' width=\"250px\"><B>Reserve Alkalinity, % (required if pH #GREATER_THAN 10)</B></TD>");
//					sbChemicalDataInfo.append("<TD align='left' width=\"250px\">"+validateString1(strResAlknity)+"</TD>");
                    sbChemicalDataInfo.append("<TD align='left' width=\"250px\"><B>Reserve Acidity, % (required if pH[target] or pH [minimum] #LESS_THAN 4)</B></TD>");
                    sbChemicalDataInfo.append("<TD align='left' width=\"250px\">"+validateString1(strResAcdity)+"</TD>");
                    sbChemicalDataInfo.append("<TD align='left' width=\"250px\"><B>Reserve Alkalinity/Acidity Unit of Measure</B></TD>");
                    sbChemicalDataInfo.append("<TD align='left' width=\"250px\">"+validateString1(strReserveAlkalinityUoM)+"</TD>");
                    //Modified by DSM for PDF View for Defect 32199 -- Ends
                    sbChemicalDataInfo.append("</TR>");
                    //Modified by DSM for PDF View for Defect 32199 -- Starts
                    sbChemicalDataInfo.append("<TR>");
                    sbChemicalDataInfo.append("<TD align='left' width=\"250px\"><B>Reserve Alkalinity/Acidity pH titration endpoint</B></TD>");
                    sbChemicalDataInfo.append("<TD align='left' width=\"250px\">"+validateString1(strReserveAlkalinityTitrationEndPoint)+"</TD>");
                    sbChemicalDataInfo.append("<TD align='left' width=\"250px\"><B>Is the liquid corrosive to metal (Aluminum or Carbon Steel)?</B></TD>");
                    sbChemicalDataInfo.append("<TD align='left' width=\"250px\">"+validateString1(strLiquidCorrMetal)+"</TD>");
                    sbChemicalDataInfo.append("</TR>");
                    //Modified by DSM for PDF View for Defect 32199 -- Starts
                    sbChemicalDataInfo.append("<TR>");
                    sbChemicalDataInfo.append("<TD align='left' width=\"250px\"><B>Conductivity of the liquid(microsiemens/cm)</B></TD>");
                    sbChemicalDataInfo.append("<TD align='left' width=\"250px\">"+validateString1(strConductivityoftheLiq)+"</TD>");
                    sbChemicalDataInfo.append("<TD align='left' width=\"250px\"><B>Is a Flammable Liquid absorbed or Contained within the solid?</B></TD>");
                    sbChemicalDataInfo.append("<TD align='left' width=\"250px\">"+validateString1(strFlammabelLiq)+"</TD>");
                    sbChemicalDataInfo.append("</TR>");
                    sbChemicalDataInfo.append("<TR>");
                    sbChemicalDataInfo.append("<TD align='left' width=\"250px\"><B>Burn Rate, mm/sec [maximum tested value]</B></TD>");
                    sbChemicalDataInfo.append("<TD align='left' width=\"250px\">"+validateString1(strBurnRate)+"</TD>");
                    sbChemicalDataInfo.append("<TD align='left' width=\"250px\"></TD>");
                    sbChemicalDataInfo.append("<TD align='left' width=\"250px\"></TD>");
                    sbChemicalDataInfo.append("</TR>");
                    //Modified by DSM for PDF View for Defect 32199 --Ends
                    sbChemicalDataInfo.append("<TR>");
                    sbChemicalDataInfo.append("<TD align='left' width=\"250px\"><B>Does the product have any self reactive properties or is it thermally unstable?</B></TD>");
                    sbChemicalDataInfo.append("<TD align='left' width=\"250px\">"+validateString1(strProdReactiveProp)+"</TD>");
                    sbChemicalDataInfo.append("<TD align='left' width=\"250px\"><B>Heat of Decomposition (kJ/g)</B></TD>");
                    sbChemicalDataInfo.append("<TD align='left' width=\"250px\">"+validateString1(strHeatOfDecomposition)+"</TD>");
                    sbChemicalDataInfo.append("</TR>");

                    sbChemicalDataInfo.append("<TR>");
                    sbChemicalDataInfo.append("<TD align='left' width=\"250px\"><B>Self-Accelerating Decomposition Temperature (SADT) (C) [maximum tested value]</B></TD>");
                    sbChemicalDataInfo.append("<TD align='left' width=\"250px\">"+validateString1(strSelfAccelDecompTemp)+"</TD>");
                    sbChemicalDataInfo.append("<TD align='left' width=\"250px\"></TD>");
                    sbChemicalDataInfo.append("<TD align='left' width=\"250px\"></TD>");
                    sbChemicalDataInfo.append("</TR>");

                    sbChemicalDataInfo.append("</TABLE></TD></TR>");
                    sbChemicalDataInfo.append("<TR><TD><BR /></TD></TR>");
                }
            }
        }
        catch (Exception e){
            e.printStackTrace();
            throw new MatrixException(e);
        }
        long endTime = new Date().getTime();
        System.out.println("Total Time has taken by the  getChemicalAndPhysicalForDGSAndGHS Method is-->"+(endTime-startTime));
        return sbChemicalDataInfo;
    }

    /**
     * This method returns result of Chemical And Physical For Warehouse Classification
     * @param context
     * @param objectID
     * @throws Exception
     */
    private StringBuilder getChemicalAndPhysicalForWarehouseClassification (Context context,String strObjectId) throws Exception {
        long startTime = new Date().getTime();
        StringBuilder sbChemicalDataInfo = new StringBuilder();
        String strDoesPdtCombustion = DomainConstants.EMPTY_STRING;
        String strWeightEmulsified = DomainConstants.EMPTY_STRING;
        String strBaseEthanolProponal=  DomainConstants.EMPTY_STRING;
        String strWtEmulsifiedLiq=  DomainConstants.EMPTY_STRING;
        String strPerFlamePropAerosol = DomainConstants.EMPTY_STRING;
        String strPGPCBByVWMiscibleAlcohols = DomainConstants.EMPTY_STRING;
        String strPGDoesBaseProductHaveAFirePoint = DomainConstants.EMPTY_STRING;
        String strPGFlammableOrNonFlammable = DomainConstants.EMPTY_STRING;
        try{
            getChemicalAndPhysicalData(context, strObjectId);
            if(validateString(strObjectId)){
                if(!mpFOPAttributeInfo.isEmpty()){
                    strDoesPdtCombustion = (String)mpFOPAttributeInfo.get(pgV3Constants.SELECT_ATTRIBUTE_PG_BASEPRODUCTSUSTAINCOMBUSTION);
                    strWeightEmulsified = (String)mpFOPAttributeInfo.get(pgV3Constants.SELECT_ATTRIBUTE_PG_FLAMMABLE_GAS_PROPELLANT);
                    strBaseEthanolProponal = (String)mpFOPAttributeInfo.get(pgV3Constants.SELECT_ATTRIBUTE_PG_PRODUCT_CONTAIN_ETHANOL);
                    strWtEmulsifiedLiq  = (String)mpFOPAttributeInfo.get(pgV3Constants.SELECT_ATTRIBUTE_PG_PRODUCT_CONTAIN_GAS);
                    strPerFlamePropAerosol = (String)mpFOPAttributeInfo.get(pgV3Constants.SELECT_ATTRIBUTE_PG_PERCENT_OF_WEIGHT_FLAMMABLE+".inputvalue");
                    strPGPCBByVWMiscibleAlcohols = (String) mpFOPAttributeInfo.get(pgV3Constants.SELECT_ATTRIBUTE_PGPCBBYVWMISCIBLEALOHOLS);
                    strPGDoesBaseProductHaveAFirePoint = (String) mpFOPAttributeInfo.get(pgV3Constants.SELECT_ATTRIBUTE_PGPRODUCTHAVEAFIREPOINT);
                    strPGFlammableOrNonFlammable = (String) mpFOPAttributeInfo.get(pgV3Constants.SELECT_ATTRIBUTE_PGFLAMMABLEORNONFLAMMABLE);
                    sbChemicalDataInfo.append("<TR><TD><TABLE class=\"WordWrappdf\" cellspacing=\"0\" width=\"990px\" id=\"pgFormulatedProductTableForWarehouseClassification\">");
                    sbChemicalDataInfo.append("<thead>");
                    sbChemicalDataInfo.append("<TR><TD colspan='4' class=\"new\" ><font size='4'><b>Chemical and Physical Properties - Warehouse Classification<br/></b></font></TD></TR>");
                    sbChemicalDataInfo.append("</thead>");

                    sbChemicalDataInfo.append("<TR>");
                    sbChemicalDataInfo.append("<TD align='left' width=\"250px\"><B>Is the propellant flammable or nonflammable?</B></TD>");
                    sbChemicalDataInfo.append("<TD align='left' width=\"250px\">"+validateString1(strPGFlammableOrNonFlammable)+"</TD>");
                    sbChemicalDataInfo.append("<TD align='left' width=\"250px\"><B>Percent by weight of flammable propellant in aerosol container, %</B></TD>");
                    sbChemicalDataInfo.append("<TD align='left' width=\"250px\">"+validateString1(strPerFlamePropAerosol)+"</TD>");
                    sbChemicalDataInfo.append("</TR>");

                    sbChemicalDataInfo.append("<TR>");
                    sbChemicalDataInfo.append("<TD align='left' width=\"250px\"><B>Does the base product contain #LESS_THAN= 50% water by volume AND contain #LESS_THAN=50% by volume water-miscible alcohols?</B></TD>");
                    sbChemicalDataInfo.append("<TD align='left' width=\"250px\">"+validateString1(strPGPCBByVWMiscibleAlcohols)+"</TD>");
                    sbChemicalDataInfo.append("<TD align='left' width=\"250px\"><B>Does the base product contain >= 50% water AND #LESS_THAN= 15.8% by weight (20% by volume) ethanol plus isopropanol?</B></TD>");
                    sbChemicalDataInfo.append("<TD align='left' width=\"250px\">"+validateString1(strBaseEthanolProponal)+"</TD>");
                    sbChemicalDataInfo.append("</TR>");

                    sbChemicalDataInfo.append("<TR>");
                    sbChemicalDataInfo.append("<TD align='left' width=\"250px\"><B>Does the base product (no propellant) Sustain Combustion?</B></TD>");
                    sbChemicalDataInfo.append("<TD align='left' width=\"250px\">"+validateString1(strDoesPdtCombustion)+"</TD>");
                    sbChemicalDataInfo.append("<TD align='left' width=\"250px\"><B>Does the base product have a Fire Point?</B></TD>");
                    sbChemicalDataInfo.append("<TD align='left' width=\"250px\">"+validateString1(strPGDoesBaseProductHaveAFirePoint)+"</TD>");
                    sbChemicalDataInfo.append("</TR>");

                    sbChemicalDataInfo.append("<TR>");
                    sbChemicalDataInfo.append("<TD align='left' width=\"250px\"><B>Does the base product contain >= 50% water AND #LESS_THAN=4% by weight of an emulsified liquefied non-flammable gas propellant?</B></TD>");
                    sbChemicalDataInfo.append("<TD align='left' width=\"250px\">"+validateString1(strWeightEmulsified)+"</TD>");
                    sbChemicalDataInfo.append("<TD align='left' width=\"250px\"><B>Does the base product contain >= 50% water AND #LESS_THAN=4% by weight of an emulsified liquefied flammable gas propellant that remains emulsified for the life of the product?</B></TD>");
                    sbChemicalDataInfo.append("<TD align='left' width=\"250px\">"+validateString1(strWtEmulsifiedLiq)+"</TD>");
                    sbChemicalDataInfo.append("</TR>");
                    sbChemicalDataInfo.append("</TABLE></TD></TR>");
                    sbChemicalDataInfo.append("<TR><TD><BR /></TD></TR>");
                }
            }
        }
        catch (Exception e){
            e.printStackTrace();
            throw new MatrixException(e);
        }
        long endTime = new Date().getTime();
        System.out.println("Total Time has taken by the  getChemicalAndPhysicalForWarehouseClassification Method is-->"+(endTime-startTime));
        return sbChemicalDataInfo;
    }

    /**
     * This method returns result of Chemical And Physical For Enginuity And Legacy Data
     * @param context
     * @param objectID
     * @throws Exception
     */
    private StringBuilder getChemicalAndPhysicalForEnginuityAndLegacyData(Context context,String strObjectId) throws Exception {
        long startTime = new Date().getTime();
        StringBuilder sbChemicalDataInfo = new StringBuilder();
        String strPropellantEmulsProd = DomainConstants.EMPTY_STRING;
        String strPropellantNonflame = DomainConstants.EMPTY_STRING;
        String strWTParameterized = DomainConstants.EMPTY_STRING;
        String strKstDustDeflagrationIndex = DomainConstants.EMPTY_STRING;
        String strPMAXExplosionPressure = DomainConstants.EMPTY_STRING;
        try{
            getChemicalAndPhysicalData(context, strObjectId);
            if(validateString(strObjectId)){
                if(!mpFOPAttributeInfo.isEmpty()){
                    strPropellantEmulsProd = (String) mpFOPAttributeInfo.get(pgV3Constants.SELECT_ATTRIBUTE_PGPROPELLANTEMULSIFIEDPRODUCT);
                    strPropellantNonflame = (String) mpFOPAttributeInfo.get(pgV3Constants.SELECT_ATTRIBUTE_PGPROPELLANTNONFLAMMABLE);
                    strWTParameterized = (String) mpFOPAttributeInfo.get(pgV3Constants.SELECT_ATTRIBUTE_PGWTPARAMETERIZED+".inputvalue");
                    strKstDustDeflagrationIndex = (String) mpFOPAttributeInfo.get(pgV3Constants.SELECT_ATTRIBUTE_PGKSTDUSTDEFLAGRATIONINDEX+".inputvalue");
                    strPMAXExplosionPressure = (String) mpFOPAttributeInfo.get(pgV3Constants.SELECT_ATTRIBUTE_PGPMAXEXPLOSIONPRESSURE+".inputvalue");

                    sbChemicalDataInfo.append("<TR><TD><TABLE class=\"WordWrappdf\" cellspacing=\"0\" width=\"990px\" id=\"pgFormulatedProductTableForEnginuityAndLegacy\">");
                    sbChemicalDataInfo.append("<thead>");
                    sbChemicalDataInfo.append("<TR><TD colspan='4' class=\"new\" ><font size='4'><b>Chemical and Physical Properties - Enginuity/Legacy Data<br/></b></font></TD></TR>");
                    sbChemicalDataInfo.append("</thead>");

                    sbChemicalDataInfo.append("<TR>");
                    sbChemicalDataInfo.append("<TD align='left' width=\"250px\"><B>Propellant emulsified for life of product</B></TD>");
                    sbChemicalDataInfo.append("<TD align='left' width=\"250px\">"+validateString1(strPropellantEmulsProd)+"</TD>");
                    sbChemicalDataInfo.append("<TD align='left' width=\"250px\"><B>Propellant is non-flammable</B></TD>");
                    sbChemicalDataInfo.append("<TD align='left' width=\"250px\">"+validateString1(strPropellantNonflame)+"</TD>");
                    sbChemicalDataInfo.append("</TR>");

                    sbChemicalDataInfo.append("<TR>");
                    sbChemicalDataInfo.append("<TD align='left' width=\"250px\"><B>WT % Parameterized</B></TD>");
                    sbChemicalDataInfo.append("<TD align='left' width=\"250px\">"+validateString1(strWTParameterized)+"</TD>");
                    sbChemicalDataInfo.append("<TD align='left' width=\"250px\"><B>Kst - Dust Deflagration Index - bar*m/sec</B></TD>");
                    sbChemicalDataInfo.append("<TD align='left' width=\"250px\">"+validateString1(strKstDustDeflagrationIndex)+"</TD>");
                    sbChemicalDataInfo.append("</TR>");

                    sbChemicalDataInfo.append("<TR>");
                    sbChemicalDataInfo.append("<TD align='left' width=\"250px\"><B>pmax - max explosion pressure - bar</B></TD>");
                    sbChemicalDataInfo.append("<TD align='left' width=\"250px\">"+validateString1(strPMAXExplosionPressure)+"</TD>");
                    sbChemicalDataInfo.append("<TD align='left' width=\"250px\"></TD>");
                    sbChemicalDataInfo.append("<TD align='left' width=\"250px\"></TD>");
                    sbChemicalDataInfo.append("</TR>");
                    sbChemicalDataInfo.append("</TABLE></TD></TR>");
                    sbChemicalDataInfo.append("<TR><TD><BR /></TD></TR>");
                }
            }
        }
        catch (Exception e){
            e.printStackTrace();
            throw new MatrixException(e);
        }
        long endTime = new Date().getTime();
        System.out.println("Total Time has taken by the  getChemicalAndPhysicalForEnginuityAndLegacyData  Method is-->"+(endTime-startTime));
        return sbChemicalDataInfo;
    }
//Added by DSM-2018x.2.1 for PDF Views Requirement : Ends
    //Added for IRM PDF View for Requirement 32753 for Release 2018x.3 - Starts
    /**
     * This method returns result Net Sample Count
     * @param context
     * @param objectID
     * @throws Exception
     */
    public static String getNetSampleCount(String sStabilitySampleCount, String sAnalyticalSampleCount, String sRnDTeamSampleCount, String sInventorySampleCount, String sNumberOfUnitsToShip )throws Exception
    {
        String sNetSampleCount = DomainConstants.EMPTY_STRING;
        try {
            int iStabilitySampleCount = 0;
            int iAnalyticalSampleCount = 0;
            int iRnDTeamSampleCount = 0;
            int iInventorySampleCount = 0;
            int iNumberOfUnitsToShip = 0;
            int iNetSampleCount = 0;
            if(UIUtil.isNotNullAndNotEmpty(sStabilitySampleCount)) {
                iStabilitySampleCount = Integer.parseInt(sStabilitySampleCount);
            }
            if(UIUtil.isNotNullAndNotEmpty(sAnalyticalSampleCount)) {
                iAnalyticalSampleCount = Integer.parseInt(sAnalyticalSampleCount);
            }
            if(UIUtil.isNotNullAndNotEmpty(sRnDTeamSampleCount)) {
                iRnDTeamSampleCount = Integer.parseInt(sRnDTeamSampleCount);
            }
            if(UIUtil.isNotNullAndNotEmpty(sInventorySampleCount)) {
                iInventorySampleCount = Integer.parseInt(sInventorySampleCount);
            }
            if(UIUtil.isNotNullAndNotEmpty(sNumberOfUnitsToShip)) {
                iNumberOfUnitsToShip = Integer.parseInt(sNumberOfUnitsToShip);
            }
            iNetSampleCount = iStabilitySampleCount + iAnalyticalSampleCount + iRnDTeamSampleCount + iInventorySampleCount + iNumberOfUnitsToShip;
            sNetSampleCount = Integer.toString(iNetSampleCount);
        } catch (Exception e) {
            e.printStackTrace();
        }
        return sNetSampleCount;
    }
    //Added for IRM PDF View for Requirement 32753 for Release 2018x.3 - Ends
    //Added by DSM-2018x.3 for PDF Views (Req Id-32753 ) - Starts
    /**
     * This method returns object revisions data
     * @param context
     * @param strObjectId
     * @return
     */
    public StringBuilder getRevisions(Context context, String strObjectId){
        long startTime = new Date().getTime();
        StringBuilder objectRevisionssBuffer= new StringBuilder();
        try{
            if(validateString(strObjectId)){

                DomainObject busObj   = DomainObject.newInstance(context, strObjectId);

                StringList busSelects = new StringList(5);
                busSelects.add(DomainObject.SELECT_NAME);
                busSelects.add(DomainObject.SELECT_ATTRIBUTE_TITLE);
                busSelects.add(DomainObject.SELECT_REVISION);
                busSelects.add(DomainObject.SELECT_DESCRIPTION);
                busSelects.add(DomainObject.SELECT_CURRENT);
                // for the Id passed, get revisions Info
                MapList mlRevisions = busObj.getRevisionsInfo(context,busSelects,new StringList(0));
                String strName = DomainConstants.EMPTY_STRING;
                String strTitle = DomainConstants.EMPTY_STRING;
//						String strState = DomainConstants.EMPTY_STRING;
                String strRevision= DomainConstants.EMPTY_STRING;
                String strDescription= DomainConstants.EMPTY_STRING;
                if(mlRevisions != null && !mlRevisions.isEmpty()){
                    objectRevisionssBuffer.append("<TR><TD><TABLE class=\"pdf\" cellspacing=\"0\" width=\"1000px\" id=\"SPRevisions\">");
                    objectRevisionssBuffer.append("<thead>");
                    objectRevisionssBuffer.append("<TR><TD colspan='4' class=\"new\" ><font size='4'><b>Revisions<br /></b></font></TD></TR>");

                    objectRevisionssBuffer.append("<TR>");
                    objectRevisionssBuffer.append("<TD align=\"center\" width=\"180px\" ><B>Name</B></TD>");
                    objectRevisionssBuffer.append("<TD align=\"center\" width=\"160px\" ><B>Title</B></TD>");
                    objectRevisionssBuffer.append("<TD align=\"center\" width=\"160px\" ><B>Revision</B></TD>");
                    objectRevisionssBuffer.append("<TD align=\"center\" width=\"160px\" ><B>Description</B></TD>");
//							objectRevisionssBuffer.append("<TD align=\"center\" width=\"170px\" ><B>State</B></TD>");
                    objectRevisionssBuffer.append("</TR></thead>");
                    objectRevisionssBuffer.append("<tbody>");
                    int iSize = mlRevisions.size();
                    Map mpRevisionMap = null;
                    for (int i = 0; i < iSize; i++) {
                        mpRevisionMap=(Map)mlRevisions.get(i);
                        strName = (String)mpRevisionMap.get(DomainConstants.SELECT_NAME);
                        strTitle = (String)mpRevisionMap.get(DomainConstants.SELECT_ATTRIBUTE_TITLE);
//								strState = (String)mpRevisionMap.get(DomainConstants.SELECT_CURRENT);
                        strRevision = (String)mpRevisionMap.get(DomainConstants.SELECT_REVISION);
                        strDescription = (String)mpRevisionMap.get(DomainConstants.SELECT_DESCRIPTION);

                        objectRevisionssBuffer.append("<TR align=\"center\" class=\"pdf\">");
                        objectRevisionssBuffer.append("<TD width=\"180px\">"+validateString1(strName)+"</TD>");
                        objectRevisionssBuffer.append("<TD width=\"160px\">"+validateString1(strTitle)+"</TD>");

                        objectRevisionssBuffer.append("<TD width=\"160px\">"+validateString1(strRevision)+"</TD>");
                        objectRevisionssBuffer.append("<TD width=\"160px\">"+validateString1(strDescription)+"</TD>");
//								objectRevisionssBuffer.append("<TD width=\"170px\">"+validateString1(strState)+"</TD>");
                        objectRevisionssBuffer.append("</TR>");
                    }
                    objectRevisionssBuffer.append("</tbody>");
                    objectRevisionssBuffer.append("</TABLE><TR><TD><br /></TD></TR></TD></TR>");
                }
                //Modify code Refactoring
                mlRevisions.clear();
            }
        }
        catch (Exception e)
        {
            e.printStackTrace();
        }
        long endTime = new Date().getTime();
        System.out.println("Total Time has taken by the  getRevisions Method is-->"+(endTime-startTime));
        return objectRevisionssBuffer;
    }
    //Added by DSM-2018x.3 for PDF Views (Req Id-32753 ) - Ends

    //Added by DSM ( Sogeti) for 2018x.5 PDF Defect - 33102 : Starts
    /**
     * Method to get the Name, revision and title details based on physiclid
     * of product data for FPP rollup details
     *
     * @param String
     * @param String
     * @return String
     * @throws FrameworkException
     * @throws Exception if the operation fails
     */
    private Map getProductDetailsWithPhysicalId(Context context, Set sPhysicalIds, StringList objectsSelect) {
        Map mPhysicalProductDetails = new HashMap();
        try {
            Map mPhysicalDetail ;
            String[] objIDs = new String[sPhysicalIds.size()];
            sPhysicalIds.toArray(objIDs);
            MapList mlPhysicalIdDetail = DomainObject.getInfo(context, objIDs, objectsSelect);
            for(int j=0; j<mlPhysicalIdDetail.size(); j++) {
                mPhysicalDetail = (Map) mlPhysicalIdDetail.get(j);
                mPhysicalProductDetails.put((String)mPhysicalDetail.get(pgPDFViewConstants.PHYSICAL_ID), mPhysicalDetail);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return mPhysicalProductDetails;
    }
    //Added by DSM ( Sogeti) for 2018x.5 PDF Defect - 33102 : Ends
    /**
     * Method to get  Base Code details table data
     * @param context - matrix context
     * @param String  -  Object Id
     * @return StringBuilder  - Base Code details table
     * @since DSM 2018x.5
     */
    private StringBuilder getBaseCodeDetails(Context context,String strObjectId){
        long startTime = new Date().getTime();
        StringBuilder baseCodeBuilder = new StringBuilder();
        try {
            MapList mlBaseCodeData = getBaseCodeMapList(context,strObjectId);
            int mlSize= mlBaseCodeData.size();
            if(mlSize>0){
                String strBaseCodeType = DomainConstants.EMPTY_STRING;
                String strBaseCodeName = DomainConstants.EMPTY_STRING;
                String strBaseCodeId = DomainConstants.EMPTY_STRING;
                Map<String , String> mapObject = null;
                baseCodeBuilder.append("<TR><TD><TABLE class=\"WordWrappdf\" cellspacing=\"0\" width=\"1000px\" id=\"pgFinishedProductTable\">");
                baseCodeBuilder.append(getBaseCodeTableHeader());
                for (int i = 0;i< mlSize; i++){
                    mapObject = new HashMap <String , String>();
                    mapObject = (Map) mlBaseCodeData.get(i);
                    strBaseCodeType = (String)mapObject.get(DomainConstants.SELECT_TYPE);
                    strBaseCodeName = (String)mapObject.get(DomainConstants.SELECT_NAME);
                    strBaseCodeId = (String)mapObject.get(DomainConstants.SELECT_ID);
                    if(pgV3Constants.TYPE_FINISHEDPRODUCTPART.equalsIgnoreCase(strBaseCodeType) || pgV3Constants.TYPE_PGFINISHEDPRODUCT.equalsIgnoreCase(strBaseCodeType)){
                        MapList mlBOM=null;
                        if(pgV3Constants.TYPE_FINISHEDPRODUCTPART.equalsIgnoreCase(strBaseCodeType)) {
                            mlBOM= getEBOMMap(context,strBaseCodeId);
                        }
                        baseCodeBuilder.append(getBaseCodeTableWithData(context,mlBOM,strBaseCodeId,strBaseCodeName,strBaseCodeType));
                    }
                }
                baseCodeBuilder.append("</TABLE><TR><TD><br /></TD></TR></TD></TR>");
                boolean isTableHeaderRequired=false;
                StringBuilder baseCodeBuilderTemp = new StringBuilder();
                for (int i = 0;i< mlSize; i++){
                    mapObject  = (Map) mlBaseCodeData.get(i);
                    strBaseCodeType = (String)mapObject.get(DomainConstants.SELECT_TYPE);
                    strBaseCodeName = (String)mapObject.get(DomainConstants.SELECT_NAME);
                    strBaseCodeId = (String)mapObject.get(DomainConstants.SELECT_ID);
                    if(pgV3Constants.TYPE_FINISHEDPRODUCTPART.equalsIgnoreCase(strBaseCodeType)){
                        if(getBaseCodeSubstituteTable(context,strBaseCodeId,strBaseCodeName,baseCodeBuilderTemp)) {
                            isTableHeaderRequired=true;
                        }
                    }
                }
                if(isTableHeaderRequired) {
                    baseCodeBuilder.append("<TR><TD><TABLE class=\"WordWrappdf\" cellspacing=\"0\" width=\"1000px\" id=\"pgFinishedProductTable\">");
                    baseCodeBuilder.append(getBaseCodeSubstitueTableHeader());
                    baseCodeBuilder.append("<tbody>");
                    baseCodeBuilder.append(baseCodeBuilderTemp.toString());
                    baseCodeBuilder.append("</tbody>");
                    baseCodeBuilder.append("</TABLE><TR><TD><br /></TD></TR></TD></TR>");
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        long endTime = new Date().getTime();
        System.out.println("Total Time has taken by the getBaseCodeBOMDetails Method is-->"+(endTime-startTime));
        return baseCodeBuilder;
    }
    /**
     * Helper method to get  Base Code FPP MapList
     * @param context - matrix context
     * @param String  -  Object Id
     * @return MapList  - Base Code FPP details
     * @since DSM 2018x.5
     */
    private MapList getBaseCodeMapList(Context context, String strObjectId) {
        StringBuilder sbPostTypePattern = new StringBuilder();
        sbPostTypePattern.append(pgV3Constants.TYPE_FINISHEDPRODUCTPART+","+pgV3Constants.TYPE_PGFINISHEDPRODUCT);
        StringList slEBOMObjSelects = new StringList(3);
        slEBOMObjSelects.add(DomainConstants.SELECT_ID);
        slEBOMObjSelects.add(DomainConstants.SELECT_TYPE);
        slEBOMObjSelects.add(DomainConstants.SELECT_NAME);
        MapList mlBaseCodeData = new MapList();
        MapList finalMapList = new MapList();
        try {
            DomainObject domFPPObj = DomainObject.newInstance(context,strObjectId);
            mlBaseCodeData = domFPPObj.getRelatedObjects(context,
                    pgV3Constants.RELATIONSHIP_EBOM, // relationship pattern
                    DomainConstants.QUERY_WILDCARD, // Type pattern
                    false, // to side
                    true, // from side
                    (short) 0, // recursionLevel
                    slEBOMObjSelects, // object selects
                    null, // rel selects
                    null, // object where clause
                    null, // relWhereClause
                    null, // postRelPattern,
                    sbPostTypePattern.toString(), // postTypePattern
                    null);
            List<String> uniqueObjectId = new ArrayList<String>();
            for (int i = 0; i < mlBaseCodeData.size(); i++) {
                Map nextMap = (Map)mlBaseCodeData.get(i);
                String strID = (String) nextMap.get(DomainConstants.SELECT_ID);
                if(!(uniqueObjectId.contains(strID))) {
                    finalMapList.add(nextMap);
                    uniqueObjectId.add(strID);
                }
            }
        } catch (FrameworkException e) {
            e.printStackTrace();
        }
        return finalMapList;
    }
    /**
     * Helper method to get  BOM details for Base Code table
     * @param context - matrix Context
     * @param String  - Object Id
     * @return MapList  - MapList
     * @since DSM 2018x.5
     */
    private MapList getEBOMMap(Context context, String strBaseCodeId) {
        MapList mlBOM = new MapList();
        try {
            StringList busSelects = new StringList(3);
            busSelects.add(DomainConstants.SELECT_NAME);
            busSelects.add(DomainConstants.SELECT_TYPE);
            busSelects.add(DomainConstants.SELECT_ID);
            StringList relSelects = new StringList(2);
            relSelects.add(DomainConstants.SELECT_RELATIONSHIP_ID);
            relSelects.add(DomainConstants.SELECT_ATTRIBUTE_QUANTITY);
            String typePattern =  pgV3Constants.TYPE_PGCUSTOMERUNITPART+","+pgV3Constants.TYPE_PGINNERPACKUNITPART+","+pgV3Constants.TYPE_PGCONSUMERUNITPART;
            String relPattern = DomainConstants.RELATIONSHIP_EBOM;
            DomainObject domObject = DomainObject.newInstance(context, strBaseCodeId);
            mlBOM = domObject.getRelatedObjects(context,
                    relPattern, // relationship pattern
                    typePattern, // Type pattern
                    busSelects, // Obj selects
                    relSelects, //rel selects
                    false,
                    true,
                    (short) 2,//recursionLevel
                    null,
                    null,
                    0);
        } catch (FrameworkException e) {
            e.printStackTrace();
        }
        return mlBOM;
    }
    /**
     * Helper method to get  Base Code details table data
     * @param context - matrix Context
     * @param MapList - BOM details MapList
     * @param String  -  Object Name
     * @return String  - Base Code details table data
     * @since DSM 2018x.5
     */
    private String getBaseCodeTableWithData(Context context, MapList mlBOM, String strBaseCodeId, String strBaseCodeName,String strBaseCodeType) {
        long startTime = new Date().getTime();
        StringBuilder baseCodeBuilder = new StringBuilder();
        try {
            Map<String, String> mapObject = new HashMap<>();
            Map<String, String> mapWeightAttributeInfo = null;
            StringList slWeigth = new StringList(2);
            slWeigth.addElement(pgV3Constants.SELECT_ATTRIBUTE_PGGROSSWEIGHTUNITOFMEASURE);
            slWeigth.addElement(pgV3Constants.SELECT_ATTRIBUTE_PGGROSSWEIGHTREAL);
            String strType= DomainConstants.EMPTY_STRING;
            String strId = DomainConstants.EMPTY_STRING;
            String strDepth = DomainConstants.EMPTY_STRING;
            String strWidth = DomainConstants.EMPTY_STRING;
            String strHeight= DomainConstants.EMPTY_STRING;
            String strGrossWgt = DomainConstants.EMPTY_STRING;
            String strGrossWth = DomainConstants.EMPTY_STRING;
            String strCUPGTIN = DomainConstants.EMPTY_STRING;
            String strIPGTIN = DomainConstants.EMPTY_STRING;
            String strCOPGTIN = DomainConstants.EMPTY_STRING;
            String strCUPLWD = DomainConstants.EMPTY_STRING;
            String strCOPLWD = DomainConstants.EMPTY_STRING;
            String strIPLWD = DomainConstants.EMPTY_STRING;
            String strLWD = DomainConstants.EMPTY_STRING;
            String strGrossWtAndUOM = DomainConstants.EMPTY_STRING;
            String strCUPGrossWtAndUOM = DomainConstants.EMPTY_STRING;
            String strCOPGrossWtAndUOM = DomainConstants.EMPTY_STRING;
            String strIPGrossWtAndUOM = DomainConstants.EMPTY_STRING;
            String pgCSSType =DomainConstants.EMPTY_STRING;
            String sGTIN = DomainConstants.EMPTY_STRING;

            if(pgV3Constants.TYPE_PGFINISHEDPRODUCT.equalsIgnoreCase(strBaseCodeType)) {
                StringList busSelect = new StringList(7);
                busSelect.add(pgV3Constants.SELECT_ATTRIBUTE_PGCSSTYPE);
                busSelect.add(pgV3Constants.SELECT_ATTRIBUTE_PGGTIN);
                busSelect.add(pgV3Constants.SELECT_ATTRIBUTE_PGDEPTH);
                busSelect.add(pgV3Constants.SELECT_ATTRIBUTE_PGWIDTH);
                busSelect.add(pgV3Constants.SELECT_ATTRIBUTE_PGHEIGHT);
                busSelect.add(pgV3Constants.SELECT_ATTRIBUTE_PGGROSSWEIGHT);
                busSelect.add(pgV3Constants.SELECT_ATTRIBUTE_PGGROSSWEIGHTUNITOFMEASURE);

                DomainObject domainObject = DomainObject.newInstance(context,strBaseCodeId);
                MapList mlRelatedObjects = domainObject.getRelatedObjects(context,
                        pgV3Constants.RELATIONSHIP_CHARACTERISTIC,
                        pgV3Constants.TYPE_PGPACKINGUNITCHARACTERISTIC,
                        busSelect,
                        null,
                        false,
                        true,
                        (short) 1,
                        null,
                        null,
                        0);
                for (Iterator iterator = mlRelatedObjects.iterator(); iterator.hasNext();){
                    mapObject = (Map) iterator.next();
                    pgCSSType = (String) mapObject.get(pgV3Constants.SELECT_ATTRIBUTE_PGCSSTYPE);
                    strHeight=validateString1(mapObject.get(pgV3Constants.SELECT_ATTRIBUTE_PGHEIGHT));
                    strWidth=validateString1(mapObject.get(pgV3Constants.SELECT_ATTRIBUTE_PGWIDTH));
                    strDepth=validateString1(mapObject.get(pgV3Constants.SELECT_ATTRIBUTE_PGDEPTH));
                    strGrossWgt=validateString1(mapObject.get(pgV3Constants.SELECT_ATTRIBUTE_PGGROSSWEIGHT));
                    strGrossWth=validateString1(mapObject.get(pgV3Constants.SELECT_ATTRIBUTE_PGGROSSWEIGHTUNITOFMEASURE));
                    strLWD=addSymbolStar(strHeight, strWidth, strDepth);
                    strGrossWtAndUOM= validateString1(strGrossWgt)+pgV3Constants.SYMBOL_SPACE+validateString1(strGrossWth);
                    sGTIN=validateString1(mapObject.get(pgV3Constants.SELECT_ATTRIBUTE_PGGTIN));

                    if(pgCSSType.equalsIgnoreCase("Consumer_Unit")){
                        strCOPGTIN=sGTIN;
                        strCOPLWD=strLWD;
                        strCOPGrossWtAndUOM= strGrossWtAndUOM;
                        //Added by DSM(Sogeti) 2018x.6 July Release  Defect #43661
                        logger.log(Level.INFO, "When Type is Consumer Unit - GTIN Value is {0}", sGTIN);
                    }
                    if(pgCSSType.equalsIgnoreCase("Inner_Pack")){
                        strIPGTIN=sGTIN;
                        strIPLWD=strLWD;
                        strIPGrossWtAndUOM= strGrossWtAndUOM;
                        //Added by DSM(Sogeti) 2018x.6 July Release  Defect #43661
                        logger.log(Level.INFO, "When Type is Inner Pack - GTIN Value is {0}", sGTIN);
                    }
                    if(pgCSSType.equalsIgnoreCase("Customer_Unit")){
                        strCUPGTIN=sGTIN;
                        strCUPLWD=strLWD;
                        strCUPGrossWtAndUOM= strGrossWtAndUOM;
                        //Added by DSM(Sogeti) 2018x.6 July Release  Defect #43661
                        logger.log(Level.INFO, "When Type is Customer Unit - GTIN Value is {0}", sGTIN);
                    }
                }
            }else {
                int mlBOMsize= mlBOM.size();
                MapList commomML =  new MapList();
                //Provide the parametized type for this generic. This sonar rule not be applicable to below map
                //as it includes both map and maplist
                Map argmapGTIN = new HashMap();
                String[] argsFPPGTIN = null;
                String[] argsFPPDM=null;
                StringList slDM = null;
                String strDM = DomainConstants.EMPTY_STRING;
                StringTokenizer stDM = null;
                List<String> vGTIN = new ArrayList();
                for (int j = 0;j< mlBOMsize; j++){
                    //Modify by DSM(Sogeti) 2018x.6 July Release Defect #43661 -Starts
                    sGTIN = DomainConstants.EMPTY_STRING;
                    //Modify by DSM(Sogeti) 2018x.6 July Release Defect #43661 - End
                    mapObject = (Map) mlBOM.get(j);
                    strType = (String) mapObject.get(DomainConstants.SELECT_TYPE);
                    strId = (String)mapObject.get(DomainConstants.SELECT_ID);
                    commomML = getCommonArgs(mapObject);
                    //Provide the parametized type for this generic. This sonar rule not be applicable to below map
                    //as it includes both map and maplist
                    argmapGTIN = getArgsMapforGTIN(strBaseCodeId,commomML);
                    argsFPPGTIN= JPO.packArgs(argmapGTIN);
                    vGTIN=(List) pgPDFViewHelper.executeMainClassMethod(context, "pgDSOCPNProductData", "getGTINValue", argsFPPGTIN);
                    if(!vGTIN.isEmpty()) {
                        sGTIN = (String)vGTIN.get(0);
                    }
                    //Modify by DSM(Sogeti) 2018x.6 July Release Defect #43661 -Starts
                    logger.log(Level.INFO, "{0}|Retrived GTIN Value is {1}", new Object[]{strId, sGTIN});
                    //Modify by DSM(Sogeti) 2018x.6 July Release Defect #43661 -Ends
                    argsFPPDM = getArgsMapData(commomML,"");
                    slDM=(StringList)pgPDFViewHelper.executeMainClassMethod(context, "pgVPDFinishedProductPart", "getPackagingDimensions", argsFPPDM);
                    strDM = (String)slDM.get(0);
                    stDM = new StringTokenizer(strDM,"|");
                    if(stDM.hasMoreTokens())
                    {
                        strDepth = (String)stDM.nextToken();
                        strWidth = (String)stDM.nextToken();
                        strHeight = (String)stDM.nextToken();
                    }
                    mapWeightAttributeInfo = new HashMap<String , String>();
                    DomainObject domainObj= DomainObject.newInstance(context,strId);
                    mapWeightAttributeInfo = domainObj.getInfo(context, slWeigth);
                    strGrossWgt = (String)mapWeightAttributeInfo.get(pgV3Constants.SELECT_ATTRIBUTE_PGGROSSWEIGHTREAL);
                    strGrossWth = (String)mapWeightAttributeInfo.get(pgV3Constants.SELECT_ATTRIBUTE_PGGROSSWEIGHTUNITOFMEASURE);
                    strLWD=addSymbolStar(strHeight, strWidth, strDepth);
                    strGrossWtAndUOM= validateString1(strGrossWgt)+pgV3Constants.SYMBOL_SPACE+validateString1(strGrossWth);

                    if(pgV3Constants.TYPE_PGCUSTOMERUNITPART.equalsIgnoreCase(strType)){
                        strCUPGTIN = sGTIN;
                        strCUPLWD=strLWD;
                        strCUPGrossWtAndUOM= strGrossWtAndUOM;
                        //Added by DSM(Sogeti) 2018x.6 July Release  Defect #43661
                        logger.log(Level.INFO, "When Type is Customer Unit - GTIN Value is {0}", sGTIN);
                    }
                    if(pgV3Constants.TYPE_PGINNERPACKUNITPART.equalsIgnoreCase(strType)){
                        strIPGTIN = sGTIN;
                        strIPLWD=strLWD;
                        strIPGrossWtAndUOM= strGrossWtAndUOM;
                        //Added by DSM(Sogeti) 2018x.6 July Release  Defect #43661
                        logger.log(Level.INFO, "When Type is Inner Pack - GTIN Value is {0}", sGTIN);
                    }
                    if(pgV3Constants.TYPE_PGCONSUMERUNITPART.equalsIgnoreCase(strType)){
                        strCOPGTIN = sGTIN;
                        strCOPLWD=strLWD;
                        strCOPGrossWtAndUOM= strGrossWtAndUOM;
                        //Added by DSM(Sogeti) 2018x.6 July Release  Defect #43661
                        logger.log(Level.INFO, "When Type is Consumer Unit Part - GTIN Value is {0}", sGTIN);
                    }
                }
            }
            baseCodeBuilder.append("<TR align=\"center\"  class=\"pdf\">");
            baseCodeBuilder.append("<TD width=\"100px\">"+validateString1(strBaseCodeName)+"</TD>");
            baseCodeBuilder.append("<TD width=\"150px\">"+validateString1(strCUPGTIN)+"</TD>");
            baseCodeBuilder.append("<TD width=\"150px\">"+validateString1(strIPGTIN)+"</TD>");
            baseCodeBuilder.append("<TD width=\"150px\">"+validateString1(strCOPGTIN)+"</TD>");
            baseCodeBuilder.append("<TD width=\"150px\">"+validateString1(strCUPLWD)+"<br/><b>GW:</b>"+validateString1(strCUPGrossWtAndUOM)+"</TD>");
            baseCodeBuilder.append("<TD width=\"150px\">"+validateString1(strIPLWD)+"<br/><b>GW:</b>"+validateString1(strIPGrossWtAndUOM)+"</TD>");
            baseCodeBuilder.append("<TD width=\"150px\">"+validateString1(strCOPLWD)+"<br/><b>GW:</b>"+validateString1(strCOPGrossWtAndUOM)+"</TD>");
            baseCodeBuilder.append("</TR>");
        } catch (Exception e) {
            e.printStackTrace();
        }
        long endTime = new Date().getTime();
        System.out.println("Total Time has taken by the getBaseCodeTableWithData Method is-->"+(endTime-startTime));
        return baseCodeBuilder.toString();
    }
    /**
     * Helper method to Add STAR(*) between three values
     * @param String  -  height
     * @param String  -  width
     * @param String  -  depth
     * @return String  - h*w*d
     * @since DSM 2018x.5
     */
    public static String addSymbolStar(String height,String width, String depth) {
        if (UIUtil.isNotNullAndNotEmpty(height) && (UIUtil.isNotNullAndNotEmpty(width) || UIUtil.isNotNullAndNotEmpty(depth))) {
            height = height+pgV3Constants.SYMBOL_STAR;
        }else if(UIUtil.isNotNullAndNotEmpty(height)){
            height = height;
        }
        if(UIUtil.isNotNullAndNotEmpty(width) && UIUtil.isNotNullAndNotEmpty(depth)) {
            width = width+pgV3Constants.SYMBOL_STAR;
        }else if(UIUtil.isNotNullAndNotEmpty(width)){
            width = width;
        }
        return height+width+depth;
    }
    /**
     * Helper method to get arguments,which are required to get GTIN value for  Base Code details table
     * @param String  -  Object Id
     * @param MapList -  MapList
     * @return Map  - GTIN args
     * @since DSM 2018x.5
     */
    private Map getArgsMapforGTIN(String strBaseCodeId, MapList commomML) {
        //Provide the parametized type for this generic. This sonar rule not be applicable to below map
        //as it includes both map and maplist
        Map argmapGTIN = new HashMap();
        argmapGTIN.put("objectList", commomML);
        Map<String , String> paramListGTIN = new HashMap<>();
        paramListGTIN.put("languageStr","Stren");
        paramListGTIN.put("objectId",strBaseCodeId);
        paramListGTIN.put("table","pgVPDPackingUnitWeightAndDimensionsTable");
        argmapGTIN.put("paramList", paramListGTIN);
        Map<String , Map<String , String>> columnMapGTIN = new  HashMap<>();
        Map<String , String> settingMapGTIN = new  HashMap<>();
        settingMapGTIN.put("CPNFieldType","attribute_pgGTIN");
        columnMapGTIN.put("settings",settingMapGTIN);
        argmapGTIN.put("columnMap", columnMapGTIN);
        argmapGTIN.put("reportFormat","CSV");
        return argmapGTIN;
    }
    /**
     * Helper method to get common arguments for  Base Code details table
     * @param Map -  BOM map
     * @return MapList  - Map List
     * @since DSM 2018x.5
     */
    private MapList getCommonArgs(Map<String, String> mapObject) {
        MapList commomML = new 	MapList();
        Map<String , String> commomArgs = new HashMap<>();
        String strId = (String)mapObject.get(DomainConstants.SELECT_ID);
        String strType = (String) mapObject.get(DomainConstants.SELECT_TYPE);
        String strName = (String) mapObject.get(DomainConstants.SELECT_NAME);
        String strLevel = (String) mapObject.get(DomainConstants.SELECT_LEVEL);
        String strAttrQty = (String) mapObject.get(DomainConstants.SELECT_ATTRIBUTE_QUANTITY);
        commomArgs.put(DomainConstants.SELECT_ID, strId);
        commomArgs.put(DomainConstants.SELECT_TYPE, strType);
        commomArgs.put(DomainConstants.SELECT_NAME, strName);
        commomArgs.put(DomainConstants.SELECT_LEVEL, strLevel);
        commomArgs.put(DomainConstants.SELECT_ATTRIBUTE_QUANTITY, strAttrQty);
        commomML.add(commomArgs);
        return commomML;
    }
    /**
     * Helper method to get table header for  Base Code details table
     * @return String  - Base Code details
     * @since DSM 2018x.5
     */
    private String getBaseCodeTableHeader(){
        StringBuilder baseCodeBuilder = new StringBuilder();
        baseCodeBuilder.append("<thead>");
        baseCodeBuilder.append("<TR><TD class=\"new\" colspan='7'><B><font size ='3'>Base Code Details</font></B></TD></TR>");
        baseCodeBuilder.append("<TR><TD align=\"center\" width=\"100px\" rowspan='2'><B>Name</B></TD>");
        baseCodeBuilder.append("<TD align=\"center\" width=\"450px\" colspan='3'><B>GTIN</B></TD>");
        baseCodeBuilder.append("<TD align=\"center\" width=\"450px\" colspan='3'><B>W&D (L*W*D)<br/> Gross Weight (GW)</B></TD>");
        baseCodeBuilder.append("</TR>");
        baseCodeBuilder.append("<TR>");
        baseCodeBuilder.append("<TD align=\"center\" width=\"150px\"><B>Customer Unit Part</B></TD>");
        baseCodeBuilder.append("<TD align=\"center\" width=\"150px\"><B>Inner Pack</B></TD>");
        baseCodeBuilder.append("<TD align=\"center\" width=\"150px\"><B>Consumer Unit Part</B></TD>");
        baseCodeBuilder.append("<TD align=\"center\" width=\"150px\"><B>Customer Unit Part</B></TD>");
        baseCodeBuilder.append("<TD align=\"center\" width=\"150px\"><B>Inner Pack</B></TD>");
        baseCodeBuilder.append("<TD align=\"center\" width=\"150px\"><B>Consumer Unit Part</B></TD>");
        baseCodeBuilder.append("</TR></thead>");
        return baseCodeBuilder.toString();
    }

    /**
     * Helper method to get 1st level BOM details of Base Code's
     * @param context - matrix context
     * @param String  -  Object Id
     * @param String  -  Object Name
     * @return String  - Base Code Substitute details
     * @since DSM 2018x.5
     */
    private boolean getBaseCodeSubstituteTable(Context context,
                                               String strBaseCodeId, String strBaseCodeName, StringBuilder baseCodeSubstituteBuilder) {
        boolean isHeaderRequired=false;
        try {
            ArrayList<String> alEBOMParents = getParentEBOMsWOIntermediateObjects(context, strBaseCodeId, new ArrayList(), "First");
            String strEBOMData = DomainConstants.EMPTY_STRING;
            String strType=DomainConstants.EMPTY_STRING;
            String strParentId = DomainConstants.EMPTY_STRING;
            String strRelId = DomainConstants.EMPTY_STRING;
            String strlevel = DomainConstants.EMPTY_STRING;
            String strIntermediatePartId = DomainConstants.EMPTY_STRING;
            StringList slMainEBOM = new StringList();
            StringList slCOPEBOM = new StringList();
            StringList slCUPEBOM = new StringList();
            StringList slIPEBOM = new StringList();
            boolean isFPPSubAvaialable=false;
            boolean isCUPSubAvaialable=false;
            boolean isCOPSubAvaialable=false;
            boolean isIPSubAvaialable=false;
            for (int i = 0; i < alEBOMParents.size(); i++) {
                strEBOMData = (String)alEBOMParents.get(i);
                StringTokenizer stEBOMData = new StringTokenizer(strEBOMData, pgV3Constants.DUMP_CHARACTER);
                if(stEBOMData.hasMoreTokens()) {
                    strType = (String)stEBOMData.nextToken();
                    strParentId = (String)stEBOMData.nextToken();
                    strRelId = (String)stEBOMData.nextToken();
                    strlevel = (String)stEBOMData.nextToken();
                    strIntermediatePartId = (String)stEBOMData.nextToken();
                    if(pgPDFViewConstants.CONS_MAIN.equals(strType)) {
                        slMainEBOM.add(strParentId+pgV3Constants.DUMP_CHARACTER+strType+pgV3Constants.DUMP_CHARACTER+strRelId+pgV3Constants.DUMP_CHARACTER+strlevel+pgV3Constants.DUMP_CHARACTER+strIntermediatePartId);
                    }else if(pgPDFViewConstants.CONS_COP.equals(strType)) {
                        slCOPEBOM.add(strParentId+pgV3Constants.DUMP_CHARACTER+strType+pgV3Constants.DUMP_CHARACTER+strRelId+pgV3Constants.DUMP_CHARACTER+strlevel+pgV3Constants.DUMP_CHARACTER+strIntermediatePartId);
                    } else if(pgPDFViewConstants.CONS_CUP.equals(strType)) {
                        slCUPEBOM.add(strParentId+pgV3Constants.DUMP_CHARACTER+strType+pgV3Constants.DUMP_CHARACTER+strRelId+pgV3Constants.DUMP_CHARACTER+strlevel+pgV3Constants.DUMP_CHARACTER+strIntermediatePartId);
                    } else if(pgPDFViewConstants.CONS_IP.equals(strType)) {
                        slIPEBOM.add(strParentId+pgV3Constants.DUMP_CHARACTER+strType+pgV3Constants.DUMP_CHARACTER+strRelId+pgV3Constants.DUMP_CHARACTER+strlevel+pgV3Constants.DUMP_CHARACTER+strIntermediatePartId);
                    }
                }
            }
            if(null!=slMainEBOM && slMainEBOM.size() > 0){
                isFPPSubAvaialable=getBaseCodeSubstituteTableMap(context,slMainEBOM,strBaseCodeName,baseCodeSubstituteBuilder);
            }
            if(null!=slCUPEBOM && slCUPEBOM.size() > 0){
                isCUPSubAvaialable=getBaseCodeSubstituteTableMap(context,slCUPEBOM,strBaseCodeName,baseCodeSubstituteBuilder);
            }
            if(null!=slCOPEBOM && slCOPEBOM.size() > 0){
                isCOPSubAvaialable=getBaseCodeSubstituteTableMap(context,slCOPEBOM,strBaseCodeName,baseCodeSubstituteBuilder);
            }
            if(null!=slIPEBOM && slIPEBOM.size() > 0){
                isIPSubAvaialable=getBaseCodeSubstituteTableMap(context,slIPEBOM,strBaseCodeName,baseCodeSubstituteBuilder);
            }
            if(isFPPSubAvaialable || isCUPSubAvaialable || isCOPSubAvaialable || isIPSubAvaialable) {
                isHeaderRequired=true;
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return isHeaderRequired;
    }
    /**
     * Helper method to get  Substitute details of 1st level objects
     * @param context - matrix context
     * @param String  -  Object Id
     * @param String  -  Object Name
     * @return String  - Base Code Substitute details
     * @since DSM 2018x.5
     */
    private boolean getBaseCodeSubstituteTableMap(Context context, StringList slEBOM, String strBaseCodeName,StringBuilder baseCodeSubstituteBuilder) {
        boolean isSubstituePresent=false;
        try {
            MapList mlMain = getBOMRelData(context,slEBOM);
            int cntSub = 0;
            boolean bFPPTable = false;
            String strParentType = DomainConstants.EMPTY_STRING;
            String strIntermediatePartId = DomainConstants.EMPTY_STRING;
            int mlMainSize = mlMain.size();
            if(null!=mlMain && mlMainSize> 0){
                Map<String, String> mapBOM = null;
                MapList mlSub = null;
                cntSub = 0;
                bFPPTable = false;
                for (int i = 0;i< mlMainSize; i++){
                    mapBOM = (Map) mlMain.get(i);
                    strIntermediatePartId = (String)mapBOM.get("IntermediatePartId");
                    DomainObject doObj = DomainObject.newInstance(context, strIntermediatePartId);
                    String strChildName = doObj.getInfo(context, DomainConstants.SELECT_NAME);
                    strParentType = (String)mapBOM.get("ParentType");
                    mlSub = getSubstituteData(context, mapBOM);
                    int mlSubSize = mlSub.size();
                    if(null != mlSub && mlSubSize>0){
                        isSubstituePresent=true;
                        for (int j = 0;j< mlSubSize; j++){
                            Map<String, String> mapSub = (Map) mlSub.get(j);
                            baseCodeSubstituteBuilder.append(getBaseCodeSubstituteTablewithData(context, mapSub,mapBOM,strBaseCodeName,strChildName,strParentType));
                        }
                    }
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return isSubstituePresent;
    }
    /**
     * Helper method to get  Base code substitute table header
     * @param context - matrix context
     * @param String - Object Type
     * @param String  -  Object Id
     * @param String  -  Object Name
     * @return String  - Base Code Substitute details
     * @since DSM 2018x.5
     */
    private String getBaseCodeSubstitueTableHeader() {
        StringBuilder baseCodeSubstituteBuilder = new StringBuilder();
        baseCodeSubstituteBuilder.append("<thead>");
        baseCodeSubstituteBuilder.append("<TR><TD class=\"new\" colspan='13'><B><font size ='3'>Substitute Base Code Details</font></B></TD></TR>");
        baseCodeSubstituteBuilder.append("<TR align='center'><TH align='center' width=\"300\"><B>Base Code (BC)<br/>Child Name (CN)</B></TH>");
        baseCodeSubstituteBuilder.append("<TH align ='center' width=\"100\"><B>Substitute<br/>Parts (SP)<br/>REV</B></TH>");
        baseCodeSubstituteBuilder.append("<TH align ='center' width=\"60\"><B>Chg</B></TH>");
        baseCodeSubstituteBuilder.append("<TH align ='center' width=\"l00\"><B>Title</B></TH>");
        baseCodeSubstituteBuilder.append("<TH align ='center' width=\"140\"><B>Type (T)<br/>Specification<br />SubType (SST)</B></TH>");
        baseCodeSubstituteBuilder.append("<TH align ='center' width=\"50\"><B>QTY</B></TH>");
        baseCodeSubstituteBuilder.append("<TH align ='center' width=\"50\"><B>Base<br/>Unit of<br/>Measure</B></TH>");
        baseCodeSubstituteBuilder.append("<TH align ='center' width=\"50\"><B>Valid<br/>Start<br/>Date</B></TH>");
        baseCodeSubstituteBuilder.append("<TH align ='center' width=\"50\"><B>Valid<br/>Until<br/>Date</B></TH>");
        baseCodeSubstituteBuilder.append("<TH align ='center' width=\"100\"><B>Ref Des (RD)<br />Optional<br/>Components (OC)</B></TH>");
        baseCodeSubstituteBuilder.append("<TH align ='center' width=\"120\"><B>Comments</B></TH>");
        baseCodeSubstituteBuilder.append("<TH align ='center' width=\"100\"><B>Substitute<br/>For (SF)<br/>REV</B></TH>");
        baseCodeSubstituteBuilder.append("<TH align ='center' width=\"80\"><B>Title</B></TH>");
        baseCodeSubstituteBuilder.append("</TR></thead>");
        return baseCodeSubstituteBuilder.toString();
    }
    /**
     * Helper method to get  Base code substitute table with content
     * @param context - matrix context
     * @param strChildName
     * @param strBaseCodeName
     * @param Map - Substitute Map
     * @param Map  -  BOM  Map
     * @return String  - Base Code Substitute details
     * @throws FrameworkException
     * @since DSM 2018x.5
     */
    private String getBaseCodeSubstituteTablewithData(Context context,Map<String, String> mapSub,Map<String, String> mapBOM, String strBaseCodeName, String strChildName, String strParentType) throws FrameworkException{
        long startTime = new Date().getTime();
        StringBuilder baseCodeSubstituteBuilder = new StringBuilder();
        boolean isPushContext = false;
        try{
            StringList selectStmtSub = new StringList(5);
            selectStmtSub.add(DomainConstants.SELECT_TYPE);
            selectStmtSub.add(DomainConstants.SELECT_REVISION);
            selectStmtSub.add(DomainConstants.SELECT_NAME);
            selectStmtSub.add(pgV3Constants.SELECT_ATTRIBUTE_RELEASE_PHASE);
            selectStmtSub.add(pgV3Constants.SELECT_ATTRIBUTE_TITLE);
            selectStmtSub.add(pgV3Constants.SELECT_ATTRIBUTE_RELEASE_DATE);
            String strSubId = (String)mapSub.get(DomainConstants.SELECT_ID);
            String strSubQty = (String)mapSub.get("Quantity");
            String strSubValidUntil = (String)mapSub.get("ValidUntil");
            String strSubComments = (String)mapSub.get("Comment");
            String strSubReferenceDesignator = (String)mapSub.get("Reference Designator");
            String strOriginatingSource = (String)mapSub.get("pgOriginatingSource");
            String strBaseUnitOfMeasure = (String)mapSub.get("pgBaseUnitOfMeasure");
            String strEBOMSubstituteRelId = (String)mapSub.get("EBOMSubstituteRelId");
            baseCodeSubstituteBuilder.append("<TR align=\"center\" class=\"WordWrappdf\">");
            String strSubName = getSubName(context,strSubId);
            DomainObject dmoBomSub = DomainObject.newInstance(context, strSubId);
            Map<String, String> mpBomSub = dmoBomSub.getInfo(context, selectStmtSub);
            String strRev = (String)mpBomSub.get(DomainConstants.SELECT_REVISION);
            if(pgPDFViewConstants.CONS_MAIN.equals(strParentType)){
                baseCodeSubstituteBuilder.append("<TD align ='left' width=\"300\"><B>BC: </B>"+validateString1(strBaseCodeName)+"<br/><B>CN:</B>"+""+"</TD>");
            }
            else{
                baseCodeSubstituteBuilder.append("<TD align ='left' width=\"300\"><B>BC: </B>"+validateString1(strBaseCodeName)+"<br/><B>CN: <br/></B>"+validateString1(strChildName)+"</TD>");
            }
            baseCodeSubstituteBuilder.append("<TD align ='left' width=\"100px\"><B>SP: </B>"+validateString1(strSubName)+"<br/><B>REV: </B>"+validateString1(strRev)+"</TD>");
            String strChg = (String) mapSub.get("Chg");
            baseCodeSubstituteBuilder.append("<TD align ='left' width=\"60px\">" +strChg+"</TD>");
            String strTitle = (String)mapSub.get("SAPDesc");
            if(UIUtil.isNullOrEmpty(strTitle)){
                strTitle = DomainConstants.EMPTY_STRING;
            }
            strTitle =strTitle.replaceAll("[<]","#LESS_THAN");
            strTitle =strTitle.replaceAll("[>]","#GREATER_THAN");
            baseCodeSubstituteBuilder.append("<TD align ='left' width=\"100px\">" +validateString1(strTitle)+"</TD>");
            String strType2 = (String)mpBomSub.get(DomainConstants.SELECT_TYPE);
            String strValue = UINavigatorUtil.getAdminI18NString("Type", strType2, context.getSession().getLanguage());
            String strSpecSubType = getSpecificationSubType(context,strSubId);
            baseCodeSubstituteBuilder.append("<TD align ='left' width=\"140px\"><B>T: </B>"+validateString1(strValue)+"<br /><B>SST: </B>" +validateString1(strSpecSubType)+"</TD>");
            String strQty = (String)mapSub.get(pgV3Constants.ATTRIBUTE_QUANTITY);
            baseCodeSubstituteBuilder.append("<TD width=\"50px\">"+validateString1(strQty)+"</TD>");
            String strUoM = getSubUOM(context,strOriginatingSource,strBaseUnitOfMeasure);
            baseCodeSubstituteBuilder.append("<TD width=\"50px\">"+validateString1(strUoM)+"</TD>");
            String strValidStart = getSubValidStart(context,strEBOMSubstituteRelId);
            baseCodeSubstituteBuilder.append("<TD width=\"50px\">"+validateString1(strValidStart)+"</TD>");
            String strValidUntil = getSubValidUntil(context,strSubValidUntil,strEBOMSubstituteRelId);
            baseCodeSubstituteBuilder.append("<TD width=\"50px\">"+validateString1(strValidUntil)+"</TD>");
            String strRefDes = getSubRefDes(context,strSubReferenceDesignator);
            DomainRelationship relObj = new DomainRelationship(strEBOMSubstituteRelId);
            String strOptComponent = relObj.getAttributeValue(context,pgV3Constants.ATTRIBUTE_PGOPTIONALCOMPONENT);
            baseCodeSubstituteBuilder.append("<TD align ='left' width=\"100px\"><B>RD: </B>"+validateString1(strRefDes)+"<br /><B>OC:</B>" +validateString1(strOptComponent)+"</TD>");
            String strComment = getSubComment(context,strSubComments);
            baseCodeSubstituteBuilder.append("<TD width=\"120px\">"+validateString1(strComment)+"</TD>");
            String strParentId = (String)mapBOM.get("ParentId");
            DomainObject dmoBom = DomainObject.newInstance(context, strParentId);
            //context is pushed to get the BOM of Object
            ContextUtil.pushContext(context);
            isPushContext = true;
            Map mpBom = dmoBom.getInfo(context, selectStmtSub);
            String strBomName = (String)mpBom.get(DomainConstants.SELECT_NAME);
            String strBomRev = (String)mpBom.get(DomainConstants.SELECT_REVISION);
            baseCodeSubstituteBuilder.append("<TD align ='left' width=\"100px\"><B>SF: </B>"+validateString1(strBomName)+"<br /><B>REV: </B>"+validateString1(strBomRev)+"</TD>");
            String strBomTitle = (String)mpBom.get(pgV3Constants.SELECT_ATTRIBUTE_TITLE);
            if(UIUtil.isNullOrEmpty(strBomTitle)){
                strBomTitle = DomainConstants.EMPTY_STRING;
            }
            strBomTitle =strBomTitle.replaceAll("[<]","#LESS_THAN");
            strBomTitle =strBomTitle.replaceAll("[>]","#GREATER_THAN");
            baseCodeSubstituteBuilder.append("<TD width=\"80px\">"+validateString1(strBomTitle)+"</TD>");
            baseCodeSubstituteBuilder.append("</TR>");
        }catch (Exception e){
            e.printStackTrace();
        }
        finally {
            if(isPushContext){
                //context is poped
                ContextUtil.popContext(context);
                isPushContext = false;
            }
        }
        long endTime = new Date().getTime();
        System.out.println("Total Time has taken by the getBaseCodeSubstituteTablewithData Method is-->"+(endTime-startTime));
        return baseCodeSubstituteBuilder.toString();
    }
    /**
     * Helper method to get substitute name field for Base code substitute details table
     * @param context - matrix context
     * @param String - Substitute object Id
     * @return String  - substitute name
     * @since DSM 2018x.5
     */
    private String getSubName(Context context, String strSubId){
        String strSubName = DomainConstants.EMPTY_STRING;
        try {
            Map<String, String> mpParamName = new HashMap<>();
            mpParamName.put("reportFormat","pdf");
            MapList mlObjListName = new MapList();
            Map<String, String> mpObjName = new HashMap<>();
            mpObjName.put("id",strSubId);
            mlObjListName.add(mpObjName);
            // The sonar lint error/comment(Generic types shouldn't be used) can't be applicable here, as the below mentioned map includes both map and maplist
            Map mpBOMSubsName=new HashMap();
            mpBOMSubsName.put("paramList",mpParamName);
            mpBOMSubsName.put("objectList", mlObjListName);
            String[] argsSubsName = JPO.packArgs(mpBOMSubsName);
            List<String> lEBOMSubName = (List)pgPDFViewHelper.executeMainClassMethod(context, "emxPart", "getModifiedName", argsSubsName);
            if((lEBOMSubName != null) && (lEBOMSubName.size() > 0) )
                strSubName = (String)lEBOMSubName.get(0);
        } catch (Exception e) {
            e.printStackTrace();
        }
        return strSubName;
    }
    /**
     * Helper method to get Specification sub type field for Base code substitute details table
     * @param context - matrix context
     * @param String - Substitute object Id
     * @return String  - Specification sub type
     * @since DSM 2018x.5
     */
    private String getSpecificationSubType(Context context,String strId){
        String strSpecSubType = DomainConstants.EMPTY_STRING;
        try {
            Map<String, String> mpObjNameSST = new HashMap<>();
            mpObjNameSST.put("id",strId);
            MapList mlObjListNameSST = new MapList();
            mlObjListNameSST.add(mpObjNameSST);
            Map<String, String> mpSettingsSub = new HashMap<>();
            mpSettingsSub.put("Column Name","");
            Map<String, Map<String, String>> mpColumnMap = new HashMap<>();
            mpColumnMap.put("settings",mpSettingsSub);
            // The sonar lint error/comment(Generic types shouldn't be used) can't be applicable here, as the below mentioned map includes both map and maplist
            Map mpBOMSubsSST = new HashMap();
            mpBOMSubsSST.put("objectList", mlObjListNameSST);
            mpBOMSubsSST.put("columnMap", mpColumnMap);
            String[] argsSubsSST = JPO.packArgs(mpBOMSubsSST);
            List<String> lEBOMSubSpecSubType = (List)pgPDFViewHelper.executeMainClassMethod(context, "emxPart", "getSpecificationSubtype", argsSubsSST);
            if((lEBOMSubSpecSubType != null) && (lEBOMSubSpecSubType.size() > 0) )
                strSpecSubType = (String)lEBOMSubSpecSubType.get(0);
        } catch (Exception e) {
            e.printStackTrace();
        }
        return strSpecSubType;
    }
    /**
     * Helper method to get Quantity  field for Base code substitute details table
     * @param context - matrix context
     * @param String - Substitute EBOM rel Id
     * @return String  - Quantity
     * @since DSM 2018x.5
     */
    private String getSubQuantity(Context context,String strSubQty, String strEBOMSubstituteRelId){
        String strQty = DomainConstants.EMPTY_STRING;
        try {
            MapList mlObjListQty = new MapList();
            Map<String, String> mpObjNameQty = new HashMap<>();
            mpObjNameQty.put("Quantity",strSubQty);
            mpObjNameQty.put("EBOMSubstituteRelId",strEBOMSubstituteRelId);
            mlObjListQty.add(mpObjNameQty);
            Map<String, MapList> mpBOMSubsQty=new HashMap<>();
            mpBOMSubsQty.put("objectList", mlObjListQty);
            String[] argsSubsQty = JPO.packArgs(mpBOMSubsQty);
            List<String> lEBOMSubQty = (List)pgPDFViewHelper.executeMainClassMethod(context, "pgIPMTablesJPO", "getSubstitutePartQuantityColumnData", argsSubsQty);
            if((lEBOMSubQty != null) && (lEBOMSubQty.size() > 0) )
                strQty =(String)lEBOMSubQty.get(0);
        } catch (Exception e) {
            e.printStackTrace();
        }
        return strQty;
    }
    /**
     * Helper method to get Base unit of measure field for Base code substitute details table
     * @param context - matrix context
     * @param String - Unit of measure
     * @return String  - Base unit of measure
     * @since DSM 2018x.5
     */
    private String getSubUOM(Context context, String strOriginatingSource,String strBaseUnitOfMeasure){
        String strUoM = DomainConstants.EMPTY_STRING;
        try {
            MapList mlObjListUom = new MapList();
            Map<String, String> mpObjNameUoM = new HashMap<>();
            mpObjNameUoM.put("pgOriginatingSource",strOriginatingSource);
            mpObjNameUoM.put("pgBaseUnitOfMeasurePickList",strBaseUnitOfMeasure);
            mpObjNameUoM.put("pgBaseUnitOfMeasure",strBaseUnitOfMeasure);
            mlObjListUom.add(mpObjNameUoM);
            Map<String, MapList> mpBOMSubsUoM=new HashMap<>();
            mpBOMSubsUoM.put("objectList", mlObjListUom);
            String[] argsSubsUoM = JPO.packArgs(mpBOMSubsUoM);
            List<String> lEBOMSubUoM = (List)pgPDFViewHelper.executeMainClassMethod(context, "pgDSOCPNProductData", "getSubstitutePartBaseUnitOfMeasureColumnData", argsSubsUoM);
            if((lEBOMSubUoM != null) && (lEBOMSubUoM.size() > 0) )
                strUoM = (String)lEBOMSubUoM.get(0);
        } catch (Exception e) {
            e.printStackTrace();
        }
        return strUoM;
    }
    /**
     * Helper method to get Valid start date field for Base code substitute details table
     * @param context - matrix context
     * @param String - Substitute EBOM rel Id
     * @return String  - Valid start date
     * @since DSM 2018x.5
     */
    private String getSubValidStart(Context context, String strEBOMSubstituteRelId){
        String strValidStart = DomainConstants.EMPTY_STRING;
        try {
            MapList mlObjListValidStart = new MapList();
            Map<String, String> mpObjNameValidStart = new HashMap<>();
            mpObjNameValidStart.put("EBOMSubstituteRelId",strEBOMSubstituteRelId);
            mlObjListValidStart.add(mpObjNameValidStart);
            Map<String, MapList> mpBOMSubsValidStart = new HashMap<>();
            mpBOMSubsValidStart.put("objectList", mlObjListValidStart);
            String[] argsSubsValidStart = JPO.packArgs(mpBOMSubsValidStart);
            List<String> lEBOMSubValidStart = (List)pgPDFViewHelper.executeMainClassMethod(context, "pgDSOCPNProductData", "getValidStartDateColumnDataForDSO", argsSubsValidStart);
            if((lEBOMSubValidStart != null) && (lEBOMSubValidStart.size() > 0) )
                strValidStart = (String)lEBOMSubValidStart.get(0);
            if(UIUtil.isNotNullAndNotEmpty(strValidStart))
                strValidStart=pgIPMPDFViewUtil_mxJPO.getFormattedDate(strValidStart);
        } catch (Exception e) {
            e.printStackTrace();
        }
        return strValidStart;
    }
    /**
     * Helper method to get Valid until date field for Base code substitute details table
     * @param context - matrix context
     * @param String - Substitute EBOM rel Id
     * @return String  - Valid until date
     * @since DSM 2018x.5
     */
    private String getSubValidUntil(Context context, String strSubValidUntil, String strEBOMSubstituteRelId){
        String strValidUntil = DomainConstants.EMPTY_STRING;
        try {
            MapList mlObjListValidUntil = new MapList();
            Map<String, String> mpObjNameValidUntil = new HashMap<>();
            mpObjNameValidUntil.put("ValidUntil",strSubValidUntil);
            mpObjNameValidUntil.put("EBOMSubstituteRelId",strEBOMSubstituteRelId);
            mlObjListValidUntil.add(mpObjNameValidUntil);
            Map<String, MapList> mpBOMSubsValidUntil = new HashMap<>();
            mpBOMSubsValidUntil.put("objectList", mlObjListValidUntil);
            String[] argsSubsValidUntil = JPO.packArgs(mpBOMSubsValidUntil);
            List<String> lEBOMSubValidUntil = (List)pgPDFViewHelper.executeMainClassMethod(context, "pgDSOCPNProductData", "getValidUntilDateColumnDataForDSO", argsSubsValidUntil);
            if((lEBOMSubValidUntil != null) && (lEBOMSubValidUntil.size() > 0) )
                strValidUntil = (String)lEBOMSubValidUntil.get(0);
            if(UIUtil.isNotNullAndNotEmpty(strValidUntil))
                strValidUntil=pgIPMPDFViewUtil_mxJPO.getFormattedDate(strValidUntil);
        } catch (Exception e) {
            e.printStackTrace();
        }
        return strValidUntil;
    }
    /**
     * Helper method to get Ref Des field for Base code substitute details table
     * @param context - matrix context
     * @param String -  designature value
     * @return String  - Ref Des
     * @since DSM 2018x.5
     */
    private String getSubRefDes(Context context, String strSubReferenceDesignator){
        String strRefDes = DomainConstants.EMPTY_STRING;
        try {
            MapList mlObjListRefDes = new MapList();
            Map<String, String> mpObjNameRefDes = new HashMap<>();
            mpObjNameRefDes.put("Reference Designator",strSubReferenceDesignator);
            mlObjListRefDes.add(mpObjNameRefDes);
            Map<String, MapList> mpBOMSubsRefDes = new HashMap<>();
            mpBOMSubsRefDes.put("objectList", mlObjListRefDes);
            String[] argsSubsRefDes = JPO.packArgs(mpBOMSubsRefDes);
            List<String> lEBOMSubRefDes = (List)pgPDFViewHelper.executeMainClassMethod(context, "pgDSOCPNProductData", "getSubstitutePartReferenceDesignatorColumnData", argsSubsRefDes);
            if((lEBOMSubRefDes != null) && (lEBOMSubRefDes.size() > 0) )
                strRefDes =(String)lEBOMSubRefDes.get(0);
            if(UIUtil.isNotNullAndNotEmpty(strRefDes)) {
                strRefDes  = strRefDes.replaceAll("[<]","#LESS_THAN");
                strRefDes = strRefDes.replaceAll("[>]","#GREATER_THAN");
            }
            else{
                strRefDes = DomainConstants.EMPTY_STRING;
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return strRefDes;
    }
    /**
     * Helper method to get Comment field for Base code substitute details table
     * @param context - matrix context
     * @param String -  substitute comments
     * @return String  - Comment
     * @since DSM 2018x.5
     */
    private String getSubComment(Context context, String strSubComments){
        String strComment = DomainConstants.EMPTY_STRING;
        try {
            MapList mlObjListComments = new MapList();
            Map<String, String> mpObjNameComments = new HashMap<>();
            mpObjNameComments.put("Comment",strSubComments);
            mlObjListComments.add(mpObjNameComments);
            Map<String, MapList> mpBOMSubsComments = new HashMap<>();
            mpBOMSubsComments.put("objectList", mlObjListComments);
            String[] argsSubsComments = JPO.packArgs(mpBOMSubsComments);
            List<String> lEBOMSubComments = (List)pgPDFViewHelper.executeMainClassMethod(context, "pgIPMTablesJPO", "getSubstitutePartCommentsColumnData", argsSubsComments);
            if((lEBOMSubComments != null) && (lEBOMSubComments.size() > 0) )
                strComment = (String)lEBOMSubComments.get(0);
            if(UIUtil.isNotNullAndNotEmpty(strComment)) {
                strComment = strComment.replaceAll("[<]","#LESS_THAN");
                strComment = strComment.replaceAll("[>]","#GREATER_THAN");
            }
            else{
                strComment = DomainConstants.EMPTY_STRING;
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return strComment;
    }

    /**
     * Generic method to check if a Part is a CATIA APP
     * @param context
     * @param objectId - id of object
     * @return boolean
     * @throws Exception
     * @since DSM 2018x.5
     */
    public static boolean isCatia(Context context, String objectId) {
        boolean bReturn = false;
        try{
            DomainObject domPartObj = DomainObject.newInstance(context, objectId);
            StringList slSelects = new StringList(2);
            slSelects.addElement(DomainConstants.SELECT_TYPE);
            slSelects.addElement(pgV3Constants.SELECT_ATTRIBUTE_PGAUTHORINGAPPLICATION);
            Map<String, String> partInfoMap = domPartObj.getInfo(context,slSelects);
            if(null != partInfoMap){
                if(pgV3Constants.TYPE_ASSEMBLEDPRODUCTPART.equals((String)partInfoMap.get(DomainConstants.SELECT_TYPE)) && pgPDFViewConstants.CATIA_LPD.equals((String)partInfoMap.get(pgV3Constants.SELECT_ATTRIBUTE_PGAUTHORINGAPPLICATION))){
                    bReturn = true;
                }
            }
        } catch (Exception e){
            e.printStackTrace();
        }
        return bReturn;
    }

    /**
     * Generic method to get the value for CATIA APP EBOM attributes
     * @param context
     * @param objectId - rel id
     * @param string setting attribute name
     * @param string setting column name
     * @return string
     * @throws Exception
     * @since DSM 2018x.5
     */
    public String getLayerName(Context context, String stridConn, String strLayerAtr, String strColumnName) {
        String strLayerValue = DomainConstants.EMPTY_STRING;
        try
        {
            Map<String, String> commonArgsLayer = new HashMap<>();
            commonArgsLayer.put("id[connection]",stridConn);
            MapList commonLayerML = new MapList();
            commonLayerML.add(commonArgsLayer);

            Map<String, String> mSettingLayer = new HashMap<>();
            mSettingLayer.put("Admin Type",strLayerAtr);
            mSettingLayer.put("ColumnName",strColumnName);
            Map<String, Map<String, String>> mColumnMapLayer = new HashMap<>();
            mColumnMapLayer.put("settings", mSettingLayer);
            //The sonar lint comment to generalise the map is not applicable here, as the below mentioned map including both map and maplist.
            Map mLayer = new HashMap();
            mLayer.put("objectList", commonLayerML);
            mLayer.put("columnMap", mColumnMapLayer);
            String[] args = JPO.packArgs(mLayer);
            Vector vLayerValues = (Vector)pgPDFViewHelper.executeMainClassMethod(context, "emxPart", "getEBOMAttributeValues", args);
            if(vLayerValues !=null && !vLayerValues.isEmpty()) {
                strLayerValue = (String)vLayerValues.get(0);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return  strLayerValue;
    }

    /**
     * Generic method to get the value for MinMax Substitute attributes
     * @param context
     * @param objectId - rel id
     * @param string - attribute name
     * @param string - column name
     * @return string
     * @throws Exception
     * @since DSM 2018x.5
     */
    public String getMinMaxForSubstitute(Context context, String stridConn, String strAtr, String strColumnName) {
        String strValue = DomainConstants.EMPTY_STRING;
        try
        {
            Map<String,String> commonArgs = new HashMap<>();
            commonArgs.put("id[connection]",stridConn);
            MapList commonLayer = new MapList();
            commonLayer.add(commonArgs);

            Map<String,String> mSettingLayer = new HashMap<>();
            mSettingLayer.put("Admin Type",strAtr);
            mSettingLayer.put("ColumnName",strColumnName);
            Map<String, Map<String, String>> mColumnMapLayer = new HashMap<>();
            mColumnMapLayer.put("settings", mSettingLayer);
            //The sonar lint comment to generalise the map is not applicable here, as the below mentioned map including both map and maplist.
            Map mMinMax = new HashMap();
            mMinMax.put("objectList", commonLayer);
            mMinMax.put("columnMap", mColumnMapLayer);
            String[] args = JPO.packArgs(mMinMax);
            Vector vLayerValues = (Vector)pgPDFViewHelper.executeMainClassMethod(context, "emxPart", "getMinMax", args);
            if(vLayerValues!=null && !vLayerValues.isEmpty()){
                strValue = (String)vLayerValues.get(0);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return  strValue;
    }

    /**
     * Generic method to get the value for CATIA APP EBOM Substitute attributes
     * @param context
     * @param objectId - rel id
     * @param string setting method name
     * @return string
     * @throws Exception
     * @since DSM 2018x.5
     */
    public String getLayerDetailsSubstitute(Context context, String stridConn, String sMethod){
        String strValue = DomainConstants.EMPTY_STRING;
        try {
            Map<String,String> commonArgs = new HashMap<>();
            commonArgs.put("id[connection]",stridConn);
            MapList commonLayer = new MapList();
            commonLayer.add(commonArgs);

            Map<String,MapList> mpLayer = new HashMap<>();
            mpLayer.put("objectList", commonLayer);
            String[] args = JPO.packArgs(mpLayer);
            StringList slValues = (StringList)pgPDFViewHelper.executeMainClassMethod(context, "pgDSMLayeredProductUtil", sMethod, args);
            if(slValues != null && !slValues.isEmpty())
                strValue = StringUtils.join(slValues,",");
        } catch (Exception e) {
            e.printStackTrace();
        }
        return  strValue;
    }

    //Added by DSM(Sogeti)-2018x.5 for PDF Views Requirements 35306, 32960, 32964, 32965, 32966, 35338, 34926, 32866 and 32869 POA ATS Gendoc- Starts
    /**
     * This method returns object related parts for pgArtwork
     * @param context
     * @param strObjectId
     * @return
     */
    public StringBuilder getPOARelatedParts(Context context, String strObjectId) {
        long startTime = new Date().getTime();
        StringBuilder objectDatasBuffer= new StringBuilder();
        try{
            if(validateString(strObjectId)){
                MapList mlObjects = EnoviaTableUtils.getARTRelatedParts(context, strObjectId);
                if(mlObjects!=null && !mlObjects.isEmpty()) {
                    objectDatasBuffer.append("<TR><TD><TABLE class=\"WordWrappdf\" cellspacing=\"0\" width=\"1000px\" id=\"POARelatedParts\">");
                    objectDatasBuffer.append("<thead>");
                    objectDatasBuffer.append("<TR><TD class=\"new\" colspan='11'><font size='4'><B>Related Part</B></font></TD></TR>");
                    objectDatasBuffer.append("</thead>");
                    objectDatasBuffer.append("<tbody>");
                    objectDatasBuffer.append("<TR>");
                    objectDatasBuffer.append("<TD align='left' width=\"100px\"><B>Name</B></TD>");
                    objectDatasBuffer.append("<TD align='left' width=\"100px\"><B>Title</B></TD>");
                    objectDatasBuffer.append("<TD align='left' width=\"100px\"><B>Rev</B></TD>");
                    objectDatasBuffer.append("<TD align='left' width=\"100px\"><B>Type</B></TD>");
                    objectDatasBuffer.append("<TD align='left' width=\"100px\"><B>Specification <BR/>SubType</B></TD>");
                    objectDatasBuffer.append("<TD align='left' width=\"100px\"><B>State</B></TD>");
                    objectDatasBuffer.append("<TD align='left' width=\"100px\"><B>Security Group</B></TD>");
                    objectDatasBuffer.append("<TD align='left' width=\"100px\"><B>Region</B></TD>");
                    objectDatasBuffer.append("<TD align='left' width=\"100px\"><B>Owner</B></TD>");
                    objectDatasBuffer.append("<TD align='left' width=\"100px\"><B>Release <BR/> Date</B></TD>");
                    objectDatasBuffer.append("<TD align='left' width=\"100px\"><B>Expiration <BR/> Date</B></TD>");
                    objectDatasBuffer.append("</TR>");
                    int iSize = mlObjects.size();
                    Map<String, String> mpRelatedPartMap ;
                    String sReleaseDate ;
                    String sExpirationDate ;
                    String state;
                    String policy;
                    String sStateDisplay;
                    for (int i = 0; i < iSize; i++) {
                        mpRelatedPartMap= (Map) mlObjects.get(i);
                        sReleaseDate = pgIPMPDFViewUtil_mxJPO.getFormattedDate(mpRelatedPartMap.get("Issued Date"));
                        sExpirationDate = pgIPMPDFViewUtil_mxJPO.getFormattedDate(mpRelatedPartMap.get("Expiration Date"));
                        state= mpRelatedPartMap.get("State");
						//DSM (DS) 2022x.5 Defect #55052 - POA shows some technical text in Gendoc PDF - STARTS
                        policy= mpRelatedPartMap.get("Policy");
						//DSM (DS) 2022x.5 Defect #55052 - POA shows some technical text in Gendoc PDF - ENDS
                        sStateDisplay = EnoviaResourceBundle.getStateI18NString(context, policy, state,context.getLocale().getLanguage());
                        objectDatasBuffer.append("<TR>");
                        objectDatasBuffer.append("<TD align='left'>" + validateString1(mpRelatedPartMap.get("Name"))+ "</TD>");
                        objectDatasBuffer.append("<TD align='left'>" + validateString1(checkLessThanGreaterThan(mpRelatedPartMap.get("pgSAPDescription")))+ "</TD>");
                        objectDatasBuffer.append("<TD align='left'>" + validateString1(mpRelatedPartMap.get("Revision"))+ "</TD>");
                        objectDatasBuffer.append("<TD align='left'>" + validateString1(mpRelatedPartMap.get("Type"))+ "</TD>");
                        objectDatasBuffer.append("<TD align='left'>" + validateString1(mpRelatedPartMap.get("pgSpecificationSubtype"))+ "</TD>");
                        objectDatasBuffer.append("<TD align='left'>" + validateString1(sStateDisplay)+ "</TD>");
                        objectDatasBuffer.append("<TD align='left'>" + validateString1(mpRelatedPartMap.get("pgSecurityGroup"))+ "</TD>");
                        objectDatasBuffer.append("<TD align='left'>" + validateString1(mpRelatedPartMap.get("Region"))+ "</TD>");
                        objectDatasBuffer.append("<TD align='left'>" + validateString1(mpRelatedPartMap.get("Owner"))+ "</TD>");
                        objectDatasBuffer.append("<TD align='left'>" + validateString1(sReleaseDate)+ "</TD>");
                        objectDatasBuffer.append("<TD align='left'>" + validateString1(sExpirationDate)+ "</TD>");
                        objectDatasBuffer.append("</TR>");
                    }
                    objectDatasBuffer.append("</tbody>");
                    objectDatasBuffer.append("</TABLE><TR><TD><br /></TD></TR></TD></TR>");
                    mlObjects.clear();
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        long endTime = new Date().getTime();
        System.out.println("Total Time has taken by the getPOARelatedParts Method is-->"+(endTime-startTime));
        return objectDatasBuffer;
    }

    /**
     * This method returns object related parts for ATS
     * @param context
     * @param strObjectId
     * @return
     */
    public StringBuilder getATSRelatedParts(Context context, String strObjectId) {
        long startTime = new Date().getTime();
        StringBuilder objectDatasBuffer= new StringBuilder();
        try{
            if(validateString(strObjectId)){
                MapList mlObjects = EnoviaTableUtils.getATSRelParts(context, strObjectId);
                if(mlObjects!=null && !mlObjects.isEmpty()) {
                    objectDatasBuffer.append("<TR><TD><TABLE class=\"WordWrappdf\" cellspacing=\"0\" width=\"1000px\" id=\"POARelatedParts\">");
                    objectDatasBuffer.append("<thead>");
                    objectDatasBuffer.append("<TR><TD class=\"new\" colspan='4'><font size='4'><B>Related Parts</B></font></TD></TR>");
                    objectDatasBuffer.append("</thead>");
                    objectDatasBuffer.append("<tbody>");
                    objectDatasBuffer.append("<TR>");
                    objectDatasBuffer.append("<TD align='left' width=\"250px\"><B>Name</B></TD>");
                    objectDatasBuffer.append("<TD align='left' width=\"250px\"><B>Type</B></TD>");
                    objectDatasBuffer.append("<TD align='left' width=\"250px\"><B>Rev</B></TD>");
                    objectDatasBuffer.append("<TD align='left' width=\"250px\"><B>Title</B></TD>");
                    objectDatasBuffer.append("</TR>");
                    int iSize = mlObjects.size();
                    String sType;
                    String sTypeDisplay;
                    Map<String,String> mpRelatedPartMap = null;
                    for (int i = 0; i < iSize; i++) {
                        mpRelatedPartMap= (Map) mlObjects.get(i);
                        sType = mpRelatedPartMap.get("Type");
                        sTypeDisplay = UINavigatorUtil.getAdminI18NString("Type", sType, context.getSession().getLanguage());
                        objectDatasBuffer.append("<TR>");
                        objectDatasBuffer.append("<TD align='left'>" + validateString1(mpRelatedPartMap.get("Name"))+ "</TD>");
                        objectDatasBuffer.append("<TD align='left'>" + validateString1(sTypeDisplay)+ "</TD>");
                        objectDatasBuffer.append("<TD align='left'>" + validateString1(mpRelatedPartMap.get("Revision"))+ "</TD>");
                        objectDatasBuffer.append("<TD align='left'>" + validateString1(checkLessThanGreaterThan(mpRelatedPartMap.get("Title")))+ "</TD>");
                        objectDatasBuffer.append("</TR>");
                    }
                    objectDatasBuffer.append("</tbody>");
                    objectDatasBuffer.append("</TABLE><TR><TD><br /></TD></TR></TD></TR>");
                    mlObjects.clear();
                }
            }
        }catch (Exception e) {
            e.printStackTrace();
        }
        long endTime = new Date().getTime();
        System.out.println("Total Time has taken by the getATSRelatedParts Method is-->"+(endTime-startTime));
        return objectDatasBuffer;
    }

    /**
     * This method returns object revisions data for ATS type
     * @param context
     * @param strObjectId
     * @return
     */
    public StringBuilder getATSRevisions(Context context, String strObjectId){
        long startTime = new Date().getTime();
        StringBuilder objectRevisionssBuffer= new StringBuilder();
        try{
            if(validateString(strObjectId)){
                MapList mlRevisions = EnoviaTableUtils.getATSRevision(context, strObjectId);
                if(mlRevisions != null && !mlRevisions.isEmpty()){
                    objectRevisionssBuffer.append("<TR><TD><TABLE class=\"pdf\" cellspacing=\"0\" width=\"1000px\" id=\"ATSRevisions\">");
                    objectRevisionssBuffer.append("<thead>");
                    objectRevisionssBuffer.append("<TR><TD colspan='6' class=\"new\" ><font size='4'><b>Revisions<br /></b></font></TD></TR>");
                    objectRevisionssBuffer.append("<TR>");
                    objectRevisionssBuffer.append("<TD align=\"center\" width=\"180px\" ><B>Name</B></TD>");
                    objectRevisionssBuffer.append("<TD align=\"center\" width=\"160px\" ><B>Rev</B></TD>");
                    objectRevisionssBuffer.append("<TD align=\"center\" width=\"170px\" ><B>State</B></TD>");
                    objectRevisionssBuffer.append("<TD align=\"center\" width=\"160px\" ><B>Originator</B></TD>");
                    objectRevisionssBuffer.append("<TD align=\"center\" width=\"160px\" ><B>Release Date</B></TD>");
                    objectRevisionssBuffer.append("<TD align=\"center\" width=\"160px\" ><B>Expiration Date</B></TD>");
                    objectRevisionssBuffer.append("</TR></thead>");
                    objectRevisionssBuffer.append("<tbody>");
                    int iSize = mlRevisions.size();
                    Map<String, String> mpRevisionMap ;
                    String strReleaseDate ;
                    String strExpirationDate ;
                    for (int i = 0; i < iSize; i++) {
                        mpRevisionMap=(Map)mlRevisions.get(i);
                        strReleaseDate = pgIPMPDFViewUtil_mxJPO.getFormattedDate(mpRevisionMap.get("Released Date"));
                        strExpirationDate = pgIPMPDFViewUtil_mxJPO.getFormattedDate(mpRevisionMap.get("Expiration Date"));
                        objectRevisionssBuffer.append("<TR align=\"center\" class=\"pdf\">");
                        objectRevisionssBuffer.append("<TD width=\"180px\">"+validateString1(mpRevisionMap.get("Name"))+"</TD>");
                        objectRevisionssBuffer.append("<TD width=\"160px\">"+validateString1(mpRevisionMap.get("Revision"))+"</TD>");
                        objectRevisionssBuffer.append("<TD width=\"170px\">"+validateString1(mpRevisionMap.get("State"))+"</TD>");
                        objectRevisionssBuffer.append("<TD width=\"160px\">"+validateString1(mpRevisionMap.get("Owner"))+"</TD>");
                        objectRevisionssBuffer.append("<TD width=\"160px\">"+validateString1(strReleaseDate)+"</TD>");
                        objectRevisionssBuffer.append("<TD width=\"160px\">"+validateString1(strExpirationDate)+"</TD>");
                        objectRevisionssBuffer.append("</TR>");
                    }
                    objectRevisionssBuffer.append("</tbody>");
                    objectRevisionssBuffer.append("</TABLE><TR><TD><br /></TD></TR></TD></TR>");
                    mlRevisions.clear();
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        long endTime = new Date().getTime();
        System.out.println("Total Time has taken by the getATSRevisions Method is-->"+(endTime-startTime));
        return objectRevisionssBuffer;
    }
    /**
     * This method returns object related specfication data for ATS type
     * @param context
     * @param strObjectId
     * @return
     */
    public StringBuilder getATSRelatedSpefication(Context context, String strObjectId) {
        long startTime = new Date().getTime();
        StringBuilder objectDatasBuffer= new StringBuilder();
        try{
            if(validateString(strObjectId)){
                String sName = DomainConstants.EMPTY_STRING;
                String sTitle = DomainConstants.EMPTY_STRING;
                String sSource = DomainConstants.EMPTY_STRING;
                String sRev = DomainConstants.EMPTY_STRING;
                String sType = DomainConstants.EMPTY_STRING;
                String sTypeDisplay = DomainConstants.EMPTY_STRING;
                String sSpecificationSubType = DomainConstants.EMPTY_STRING;
                String sOriginator = DomainConstants.EMPTY_STRING;
                String strObjectWhere = "Policy=='"+pgPDFViewConstants.POLICY_PRODUCT_DATA_SPECIFICATION+"'";
                MapList mlObjects = getATSRelatedDetails(context, strObjectId, strObjectWhere);
                if(mlObjects!=null && !mlObjects.isEmpty()) {
                    objectDatasBuffer.append("<TR><TD><TABLE class=\"WordWrappdf\" cellspacing=\"0\" width=\"1000px\" id=\"POARelatedParts\">");
                    objectDatasBuffer.append("<thead>");
                    objectDatasBuffer.append("<TR><TD class=\"new\" colspan='7'><font size='4'><B>Related Specifications</B></font></TD></TR>");
                    objectDatasBuffer.append("</thead>");
                    objectDatasBuffer.append("<tbody>");
                    objectDatasBuffer.append("<TR>");
                    objectDatasBuffer.append("<TD align='left' width=\"250px\"><B>Name</B></TD>");
                    objectDatasBuffer.append("<TD align='left' width=\"250px\"><B>Title</B></TD>");
                    objectDatasBuffer.append("<TD align='left' width=\"250px\"><B>Source</B></TD>");
                    objectDatasBuffer.append("<TD align='left' width=\"250px\"><B>Rev</B></TD>");
                    objectDatasBuffer.append("<TD align='left' width=\"250px\"><B>Type</B></TD>");
                    objectDatasBuffer.append("<TD align='left' width=\"250px\"><B>Specification SubType</B></TD>");
                    objectDatasBuffer.append("<TD align='left' width=\"250px\"><B>Originator</B></TD>");
                    objectDatasBuffer.append("</TR>");
                    int iSize = mlObjects.size();
                    Map<String, String> mpRelatedPartMap = new HashMap<>();
                    for (int i = 0; i < iSize; i++) {
                        mpRelatedPartMap= (Map) mlObjects.get(i);
                        sName=(String)mpRelatedPartMap.get(DomainConstants.SELECT_NAME);
                        sType = (String)mpRelatedPartMap.get(DomainConstants.SELECT_TYPE);
                        sTypeDisplay = UINavigatorUtil.getAdminI18NString("Type", sType, context.getSession().getLanguage());
                        sRev =(String)mpRelatedPartMap.get(DomainConstants.SELECT_REVISION);
                        sTitle =(String)mpRelatedPartMap.get(pgV3Constants.SELECT_ATTRIBUTE_TITLE);
                        sSource = CPNUIUtil.getProperty(context, "emxCPN.Table.Label.Direct");
                        sSpecificationSubType =(String)mpRelatedPartMap.get(pgV3Constants.SELECT_ATTRIBUTE_PGASSEMBLYTYPE);
                        sOriginator =(String)mpRelatedPartMap.get(DomainConstants.SELECT_ORIGINATOR);
                        objectDatasBuffer.append("<TR>");
                        objectDatasBuffer.append("<TD align='left'>" + validateString1(sName)+ "</TD>");
                        objectDatasBuffer.append("<TD align='left'>" + validateString1(checkLessThanGreaterThan(sTitle))+ "</TD>");
                        objectDatasBuffer.append("<TD align='left'>" + validateString1(sSource)+ "</TD>");
                        objectDatasBuffer.append("<TD align='left'>" + validateString1(sRev)+ "</TD>");
                        objectDatasBuffer.append("<TD align='left'>" + validateString1(sTypeDisplay)+ "</TD>");
                        objectDatasBuffer.append("<TD align='left'>" + validateString1(sSpecificationSubType)+ "</TD>");
                        objectDatasBuffer.append("<TD align='left'>" + validateString1(sOriginator)+ "</TD>");
                        objectDatasBuffer.append("</TR>");
                    }
                    objectDatasBuffer.append("</tbody>");
                    objectDatasBuffer.append("</TABLE><TR><TD><br /></TD></TR></TD></TR>");
                }
            }
        }catch (Exception e) {
            e.printStackTrace();
        }
        long endTime = new Date().getTime();
        System.out.println("Total Time has taken by the getATSRelatedParts Method is-->"+(endTime-startTime));
        return objectDatasBuffer;
    }

    /**
     * This method returns maplist of revisions data
     * @param context
     * @param strObjectId
     * @return
     */
    public MapList getRevisionDetails(Context context, String strObjectId){
        MapList objList = new MapList();
        try{
            StringList busSelects = new StringList(6);
            busSelects.add(DomainConstants.SELECT_NAME);
            busSelects.add(DomainConstants.SELECT_REVISION);
            busSelects.add(DomainConstants.SELECT_CURRENT);
            busSelects.add(DomainConstants.SELECT_ORIGINATOR);
            busSelects.add(pgV3Constants.SELECT_ATTRIBUTE_RELEASE_DATE);
            busSelects.add(pgV3Constants.SELECT_ATTRIBUTE_EXPIRATION_DATE);
            DomainObject busObj   = DomainObject.newInstance(context, strObjectId);
            objList = busObj.getRevisionsInfo(context,busSelects,new StringList(0));
        } catch(Exception e){
            e.printStackTrace();
        }
        return objList;
    }

    /**
     * This method returns maplist of related specification and parts data
     * for type ATS
     * @param context
     * @param strObjectId
     * @param sWhere
     * @return
     */
    public MapList getATSRelatedDetails(Context context, String strObjectId, String sWhere){
        MapList objList = new MapList();
        try{
            StringList busSelects = new StringList(9);
            busSelects.add(DomainConstants.SELECT_NAME);
            busSelects.add(DomainConstants.SELECT_TYPE);
            busSelects.add(DomainConstants.SELECT_REVISION);
            busSelects.add(DomainConstants.SELECT_CURRENT);
            busSelects.add(DomainConstants.SELECT_ORIGINATOR);
            busSelects.add(pgV3Constants.SELECT_ATTRIBUTE_RELEASE_DATE);
            busSelects.add(pgV3Constants.SELECT_ATTRIBUTE_EXPIRATION_DATE);
            busSelects.add(DomainConstants.SELECT_ATTRIBUTE_TITLE);
            busSelects.add(pgV3Constants.SELECT_ATTRIBUTE_PGASSEMBLYTYPE);
            DomainObject doObj   = DomainObject.newInstance(context, strObjectId);
            objList = doObj.getRelatedObjects(context,
                    pgV3Constants.RELATIONSHIP_AUTHORIZEDTEMPORARYSPECIFICATION, //relPattern
                    DomainConstants.QUERY_WILDCARD, //typePattern
                    busSelects, //objectSelects
                    null,//relationshipSelects
                    false, //getTo - Get Parent Data
                    true, //getFrom - Get Child Data
                    (short)1, //recurseToLevel
                    sWhere, //objectWhere
                    null, //relationshipWhere
                    0 //limit
            );
        } catch(Exception e){
            e.printStackTrace();
        }
        return objList;
    }
    //Added by DSM(Sogeti)-2018x.5 for PDF Views Requirements 35306, 32960, 32964, 32965, 32966, 35338, 34926, 32866 and 32869 POA ATS Gendoc- Ends
    //Modified by DSM(Sogeti)-2018x.5 for PDF Views (Defect-34789 ) - Starts
    public String getVectorData(Vector vcTaskData) {
        String strTask = "";
        for (int i = 0; i < vcTaskData.size(); i++)
        {
            strTask = (String)vcTaskData.get(i);
        }
        return strTask;
    }
    //Modified by DSM(Sogeti)-2018x.5 for PDF Views (Defect-34789 ) - Ends
    //Added by DSM(Sogeti) - for 2018x.5 PDF Views Requirement
    /**
     * This method returns String of sequence number (Find Number)
     *
     * @param context
     * @param phaseId -phase id
     * @param strAttributeValue - relationship find number value
     * @param mpSubFor
     * @return
     */
    public String getPrimaryNumbar(Context context,String phaseId, String strAttributeValue, Map mpSubFor){

        StringBuffer strBuffForExport = new StringBuffer();
        try {
            String sID = (String)mpSubFor.get(DomainConstants.SELECT_ID);
            String sAttribute=(String)mpSubFor.get(DomainConstants.SELECT_NAME);
            DomainObject dObj = new DomainObject(sID);
            String sType = dObj.getInfo(context, DomainConstants.SELECT_TYPE);

            if (FormulationType.PARENT_SUB.getType(context).equals(sType))
            {
                String targetPercentConsumed = (String)mpSubFor.get("targetPercentConsumed");
                double percentConsumed = 0.0D;
                if (UIUtil.isNotNullAndNotEmpty(targetPercentConsumed)) {
                    percentConsumed = Double.parseDouble(targetPercentConsumed);
                }

                String subRelId = null;
                String subId = null;
                int counter = 0;
                if (ATTRIBUTE_FIND_NUMBER.equals(sAttribute)) {
                    DomainObject phaseObj = new DomainObject(phaseId);

                    StringList relSelects = StringList.create(new String[] { "id[connection]", pgV3Constants.SELECT_ATTRIBUTE_FINDNUMBER+".value"});

                    MapList phaseInHierarchy = phaseObj.getRelatedObjects(context, CPNRelationship.FBOM
                                    .getRelationship(context),
                            FormulationType.FORMULATION_PROCESS
                                    .getType(context)
                                    .concat(",").concat(FormulationType.FORMULATION_PHASE.getType(context)), null, relSelects, true, false, (short)0, "", "", 0);

                    phaseInHierarchy.sort("level", "descending", "integer");
                    Iterator phaseItr = phaseInHierarchy.iterator();
                    String strFindNumber = DomainConstants.EMPTY_STRING;
                    String realFindNumber = DomainConstants.EMPTY_STRING;
                    Map mp = null;
                    while (phaseItr.hasNext()) {
                        mp = (Hashtable)phaseItr.next();
                        realFindNumber = (String)mp.get(pgV3Constants.SELECT_ATTRIBUTE_FINDNUMBER+".value");
                        strFindNumber = strFindNumber.concat(realFindNumber).concat(".");
                    }
                    strAttributeValue = strFindNumber.concat(strAttributeValue);
                }
                if ((percentConsumed > 0.0D) && (sAttribute.equals(FormulationAttribute.QUANTITY.getAttribute(context))) &&
                        (UIUtil.isNotNullAndNotEmpty(strAttributeValue)))
                {
                    strAttributeValue = Double.toString(Double.parseDouble(strAttributeValue) * percentConsumed / 100.0D);
                }

                if (counter == 0)
                    strBuffForExport.append(strAttributeValue);
                else
                    strBuffForExport.append('\n').append(strAttributeValue);
                ++counter;
            }else{
                String sEBOMSubsRelid = (String)mpSubFor.get("EBOM ID");
                DomainRelationship domRel = new DomainRelationship(sEBOMSubsRelid);
                strAttributeValue = DomainRelationship.getAttributeValue(context, sEBOMSubsRelid, sAttribute);
                strBuffForExport.append(strAttributeValue);
            }
        }catch (Exception ex){
            ex.printStackTrace();
        }
        return strBuffForExport.toString();
    }
    //Added by DSM(Sogeti) - for 2018x.5 PDF Views Requirement - Ends

    /**
     *
     * @param context
     * @param strObjectId
     * @return
     */
//Added by DSM-2018x.6 for PDF Views for Req_37091 & 37092 - Start
    private StringBuilder getRegistrationTableDetails(Context context,String strObjectId) {
        long startTime = new Date().getTime();
        StringBuilder sbRegDetails = new StringBuilder();
        try {
            Map programMap = new HashMap(2);
            programMap.put("objectId", strObjectId);
            programMap.put("type", "pgMarketRegistration");

            MapList mlRegistrationDetails = JPO.invoke(context, "pgFPPRollup", null, "getAllTableData", JPO.packArgs(programMap), MapList.class);
            ArrayList listPrimarySubsAlt = getRegistrationFieldsValue(context, mlRegistrationDetails, "");
            if(!mlRegistrationDetails.isEmpty()) {
                // Table
                sbRegDetails.append("<TR><TD><br /></TD></TR><TR><TD><br /></TD></TR><TR><TD><br /></TD></TR><TR><TD>");
                sbRegDetails.append("<TABLE class=\"pdf\" cellspacing=\"0\" width=\"1000px\" id=\"pgRegistrationDetails\">");
                sbRegDetails.append("<thead>");
                //	Header
                sbRegDetails.append("<TR><TD class=\"new\" colspan=\"14\" ><font size='4'><b>Registration Details<br /></b></font></TD></TR>");
                sbRegDetails.append("<TR align=\"top\">");

                sbRegDetails.append("<TD  width=\"77\" align=\"left\"><B>Product Part Name</B></TD>");
                sbRegDetails.append("<TD  width=\"71\" align=\"left\"><B>Product Part Title<br/></B></TD>");
                sbRegDetails.append("<TD  width=\"71\" align=\"left\"><B>Primary Part<br/>Substitute Part<br/>Alternate</B></TD>");
                sbRegDetails.append("<TD  width=\"71\" align=\"left\"><B><br/>Registered Country</B></TD>");
                sbRegDetails.append("<TD  width=\"71\" align=\"left\"><B>Market Approval Holder</B></TD>");
                sbRegDetails.append("<TD  width=\"71\" align=\"left\"><B>Legal Entity (LE)<br/>Business Channel(BC)</B></TD>");
                sbRegDetails.append("<TD  width=\"71\" align=\"left\"><B>Pack Size (PS)<br/>Pack Size UoM (PSU)</B></TD>");
                sbRegDetails.append("<TD  width=\"71\" align=\"left\"><B>Market Product Registration Number</B></TD>");
                sbRegDetails.append("<TD  width=\"71\" align=\"left\"><B>Registration Status</B></TD>");
                sbRegDetails.append("<TD  width=\"71\" align=\"left\"><B>Registration Expiration Date</B></TD>");
                sbRegDetails.append("<TD  width=\"71\" align=\"left\"><B>Registered Product Name (RPN)<br/>Restriction (R)</B></TD>");
                sbRegDetails.append("<TD  width=\"71\" align=\"left\"><B>GPS Comments</B></TD>");
                sbRegDetails.append("<TD  width=\"71\" align=\"left\"><B>Packing Site</B></TD>");
                sbRegDetails.append("<TD  width=\"71\" align=\"left\"><B>Bulk Making /Manufacturing Site</B></TD>");

                sbRegDetails.append("</TR></thead>");

                int count = 0;
                Map<?, ?> sProductPart, sRegisteredCountry;
                MapList CountriesList;
                int counteryRowSize;
                boolean flag;
                // Values
                for (Object object : mlRegistrationDetails) {
                    sProductPart = (Map<?,?>) object;
                    CountriesList = (MapList) sProductPart.get("CountriesList");

                    if(!CountriesList.isEmpty()) {
                        for(Object obj : CountriesList) {
                            sRegisteredCountry = (Map<?, ?>) obj;
                            counteryRowSize = ((StringList) convertObjectToStringList(sRegisteredCountry.get(pgV3Constants.SELECT_ATTRIBUTE_PGMARKETAPPROVERHOLDER))).size();
                            flag = true;
                            for(int i= 0 ; i < counteryRowSize; i++) {

                                sbRegDetails.append("<TR align=\"center\" class=\"WordWrappdf\">");

                                if(flag) {
                                    sbRegDetails.append("<TD rowspan=\""+ counteryRowSize +"\" width=\"77\" align=\"left\">"+sProductPart.get(pgV3Constants.NAME)+"</TD>");
                                    sbRegDetails.append("<TD rowspan=\""+ counteryRowSize +"\" width=\"71\" align=\"left\">"+wrapCharTable((String) sProductPart.get(pgV3Constants.SELECT_ATTRIBUTE_TITLE),10)+"</TD>");
                                    sbRegDetails.append("<TD rowspan=\""+ counteryRowSize +"\" width=\"71\" align=\"left\">"+listPrimarySubsAlt.get(count)+"</TD>");
                                    sbRegDetails.append("<TD rowspan=\""+ counteryRowSize +"\" width=\"71\" align=\"left\">"+sRegisteredCountry.get(pgV3Constants.NAME)+"</TD>");
                                    flag = false;
                                }

                                // Country Details
                                sbRegDetails.append("<TD  width=\"71\" align=\"left\">"+				((StringList) convertObjectToStringList(sRegisteredCountry.get(pgV3Constants.SELECT_ATTRIBUTE_PGMARKETAPPROVERHOLDER))).get(i)	+"</TD>");
                                sbRegDetails.append("<TD  width=\"71\" align=\"left\">"+"<B>LE:</B>"+	((StringList) convertObjectToStringList(sRegisteredCountry.get(pgV3Constants.SELECT_ATTRIBUTE_PGLEGALENTITY))).get(i)			+"<B><br/>BC:</B>"+((StringList) convertObjectToStringList(sRegisteredCountry.get(pgV3Constants.SELECT_ATTRIBUTE_PGBUSINESSCHANNEL))).get(i)+"</TD>");
                                if(pgPDFViewConstants.TYPE_PGCONSUMERUNITPART.equalsIgnoreCase((String)sProductPart.get(DomainConstants.SELECT_TYPE)))
                                    sbRegDetails.append("<TD  width=\"71\" align=\"left\">"+"<B>PS:</B>"+	(sRegisteredCountry.get(pgV3Constants.SELECT_ATTRIBUTE_PGPACKSIZE_INPUTVALUE))					+"<B><br/>PSU:</B>"+(sRegisteredCountry.get(pgV3Constants.SELECT_ATTRIBUTE_PGPACKSIZEUOM))	+"</TD>");
                                else
                                    sbRegDetails.append("<TD  width=\"71\" align=\"left\">"+"<B>PS:</B>"+	((StringList) convertObjectToStringList(sRegisteredCountry.get(pgV3Constants.SELECT_ATTRIBUTE_PGPACKSIZE_INPUTVALUE))).get(i)				+"<B><br/>PSU:</B>"+((StringList) convertObjectToStringList(sRegisteredCountry.get(pgV3Constants.SELECT_ATTRIBUTE_PGPACKSIZEUOM))).get(i)+"</TD>");
                                sbRegDetails.append("<TD  width=\"71\" align=\"left\">"+				((StringList) convertObjectToStringList(sRegisteredCountry.get(pgV3Constants.SELECT_ATTRIBUTE_PGCOUNTRYPRODUCTREGISTRATIONNUMBER))).get(i)+"</TD>");
                                sbRegDetails.append("<TD  width=\"71\" align=\"left\">"+				((StringList) convertObjectToStringList(sRegisteredCountry.get(pgV3Constants.SELECT_ATTRIBUTE_PGREGISTRATIONSTATUS))).get(i)	+"</TD>");
                                sbRegDetails.append("<TD  width=\"71\" align=\"left\">"+				((StringList) convertObjectToStringList(sRegisteredCountry.get(pgV3Constants.SELECT_ATTRIBUTE_PGREGISTRATIONENDDATE))).get(i)	+"</TD>");
                                sbRegDetails.append("<TD  width=\"71\" align=\"left\">"+"<B>RPN:</B>"+	((StringList) convertObjectToStringList(sRegisteredCountry.get(pgV3Constants.SELECT_ATTRIBUTE_REGISTEREDPRODUCTNAME))).get(i)	+"<B><br/>R:</B>"+((StringList) convertObjectToStringList(sRegisteredCountry.get(pgV3Constants.SELECT_ATTRIBUTE_PGPLANTRESTRICTION))).get(i)+"</TD>");
                                sbRegDetails.append("<TD  width=\"71\" align=\"left\">"+				((StringList) convertObjectToStringList(sRegisteredCountry.get(pgV3Constants.SELECT_ATTRIBUTE_PGCLEARANCECOMMENT))).get(i)		+"</TD>");
                                sbRegDetails.append("<TD  width=\"71\" align=\"left\">"+replaceCapsWithComma(((StringList) convertObjectToStringList(sRegisteredCountry.get(pgV3Constants.SELECT_ATTRIBUTE_PGPACKINGSITE))).get(i))	+"</TD>");
                                sbRegDetails.append("<TD  width=\"71\" align=\"left\">"+replaceCapsWithComma(((StringList) convertObjectToStringList(sRegisteredCountry.get(pgV3Constants.SELECT_ATTRIBUTE_PGMANUFACTURINGSITE))).get(i))+"</TD>");

                                sbRegDetails.append("</TR>");
                            }
                        }
                    }else {
                        sbRegDetails.append("<TR align=\"center\" class=\"pdf\">");

                        sbRegDetails.append("<TD width=\"77\" align=\"left\">"+sProductPart.get(pgV3Constants.NAME)+"</TD>");
                        sbRegDetails.append("<TD width=\"71\" align=\"left\">"+sProductPart.get(pgV3Constants.SELECT_ATTRIBUTE_TITLE)+"</TD>");
                        sbRegDetails.append("<TD width=\"71\" align=\"left\">"+listPrimarySubsAlt.get(count)+"</TD>");
                        sbRegDetails.append("<TD width=\"71\" align=\"left\">"+""+"</TD>");

                        // Country Details
                        sbRegDetails.append("<TD  width=\"71\" align=\"left\">"+""+"</TD>");
                        sbRegDetails.append("<TD  width=\"71\" align=\"left\">"+"<B>LE:</B>"+ "" +"<B><br/>BC:</B>"+ "" +"</TD>");
                        sbRegDetails.append("<TD  width=\"71\" align=\"left\">"+"<B>PS:</B>"+ "" +"<B><br/>PSU:</B>"+ "" +"</TD>");
                        sbRegDetails.append("<TD  width=\"71\" align=\"left\">"+ "" +"</TD>");
                        sbRegDetails.append("<TD  width=\"71\" align=\"left\">"+ "" +"</TD>");
                        sbRegDetails.append("<TD  width=\"71\" align=\"left\">"+ "" +"</TD>");
                        sbRegDetails.append("<TD  width=\"71\" align=\"left\">"+"<B>RPN:</B>"+ "" +"<B><br/>R:</B>"+ "" +"</TD>");
                        sbRegDetails.append("<TD  width=\"71\" align=\"left\">"+ "" +"</TD>");
                        sbRegDetails.append("<TD  width=\"71\" align=\"left\">"+ "" +"</TD>");
                        sbRegDetails.append("<TD  width=\"71\" align=\"left\">"+ "" +"</TD>");

                        sbRegDetails.append("</TR>");

                    }
                    count++;
                }
                sbRegDetails.append("</TABLE><TR><TD><br /></TD></TR>");
                sbRegDetails.append("</TD></TR>");
            }


        }
        catch (Exception e) {
            logger.log(Level.WARNING, null, e);
        }
        long endTime = new Date().getTime();
        logger.log(Level.INFO,"Total Time has taken by the getRegistrationTableDetails Method is--> {0}",(endTime-startTime));
        return sbRegDetails;
    }
    /**
     *
     * @param context
     * @param mlRegistrationDetails
     * @param columnName
     * @return
     */
    public ArrayList getRegistrationFieldsValue(Context context, MapList mlRegistrationDetails, String columnName) {
        HashMap requestMap = new HashMap();
        HashMap settingsMap = new HashMap();
        HashMap colMap = new HashMap();
        settingsMap.put("ColumnName", columnName);
        colMap.put("settings", settingsMap);
        requestMap.put("objectList", mlRegistrationDetails);
        requestMap.put("columnMap", colMap);
        Vector batteryInfo = null;
        try {
            batteryInfo = (Vector) JPO.invoke(context, "pgFPPRollup", null, "getProductFrom", JPO.packArgs(requestMap), Vector.class);
        } catch (MatrixException e) {
            logger.log(Level.WARNING, null, e);
        }
        return new ArrayList(batteryInfo);
    }
//Added by DSM-2018x.6 for PDF Views for Req_37091 & 37092 - End
//Added by DSM-2018x.6 for PDF Views for Req_36346 - Start
    /**
     *
     * @param context - matrix Context
     * @param Map  - Attribute map
     * @return String - String of table data
     * @since DSM 2018x.5
     */
    private StringBuilder getBatteryRollUp(Context context,String strObjectId, String pdfViewType) {
        long startTime = new Date().getTime();
        StringBuilder sbBatteryRollUp = new StringBuilder();
        try {

            MapList mlObjects = EnoviaTableUtils.getBatteryRollUp(context, strObjectId);
            Map<String,String> mObj ;

            // Table

            sbBatteryRollUp.append("<TR><TD>");
            if(!mlObjects.isEmpty()) {
                sbBatteryRollUp.append("<TABLE class=\"pdf\" cellspacing=\"0\" width=\"1000px\" id=\"pgBatteryRollUp\">");
                sbBatteryRollUp.append("<thead>");
                //	Header
                sbBatteryRollUp.append("<TR><TD class=\"new\" colspan=\"11\" ><font size='4'><b>Battery Roll Up<br /></b></font></TD></TR>");
                sbBatteryRollUp.append("<TR align=\"top\">");

                sbBatteryRollUp.append("<TD  width=\"83\" align=\"left\"><B>Name(N)<br/><br/>Revision (R)<br/><br/>Title (T)</B></TD>");
                sbBatteryRollUp.append("<TD  width=\"83\" align=\"left\"><B>DPP Qty per COP (DQPC)<br/><br/>Net Weight [form DPP](NWFD)<br/><br/>Weight UoM [form DPP] (WUFD)</B></TD>");
                sbBatteryRollUp.append("<TD  width=\"83\" align=\"left\"><B>Power Source (PS)<br/><br/>Battery Type (BT)</B></TD>");
                sbBatteryRollUp.append("<TD  width=\"83\" align=\"left\"><B>Number of cells/batteries shipped inside Device (NFSID)<br/><br/>Number of cells/batteries shipped outside Device (NFSOD)</B></TD>");
                sbBatteryRollUp.append("<TD  width=\"83\" align=\"left\"><B>Number of Batteries Required (NFBR)<br/><br/>Battery Chemical Composition (BCC)</B></TD>");
                sbBatteryRollUp.append("<TD  width=\"83\" align=\"left\"><B>Nominal Battery Weight</B></TD>");
                sbBatteryRollUp.append("<TD  width=\"83\" align=\"left\"><B>Battery Weight UoM (BUM)<br/><br/>Battery Size (BS)</B></TD>");
                sbBatteryRollUp.append("<TD  width=\"83\" align=\"left\"><B>Nominal Battery Voltage (NBV)<br/><br/>Battery Voltage UoM (BVU)</B></TD>");
                sbBatteryRollUp.append("<TD  width=\"83\" align=\"left\"><B>Typical Capacity (TC)<br/><br/>Typical Capacity UoM (TCU)</B></TD>");
                sbBatteryRollUp.append("<TD  width=\"83\" align=\"left\"><B>Number of cells (NOC)<br/><br/>Grams of Lithium per cell (GOLPC)<br/>Grams of Lithium UoM (GOLU)</B></TD>");
                sbBatteryRollUp.append("<TD  width=\"83\" align=\"left\"><B>Is this a Button Battery? (ITBB)<br/><br/>Lithium Battery Energy (LBE) Lithium Battery Energy UoM (LBEU)<br/><br/></B></TD>");


                sbBatteryRollUp.append("</TR></thead>");

                // Values
                for (Object object : mlObjects) {
                    mObj = (Map) object;
                    sbBatteryRollUp.append("<TR align=\"center\" class=\"pdf\">");
                    sbBatteryRollUp.append("<TD align=\"left\" width=\"83\">"+"<B>N:</B>"+mObj.get("Name")+"<br/><B>R:</B>"+mObj.get("Revision")+"<br/><B>T:</B>"+mObj.get("Title")+"</TD>");
                    sbBatteryRollUp.append("<TD align=\"left\" width=\"83\">"+"<B>DQPC:</B>"+mObj.get("DPP Qty per COP")+"<br/><B>NWFD:</B>"+mObj.get("Net Weight")+"<br/><B>WUFD:</B>"+mObj.get("Weight UoM")+"</TD>");
                    sbBatteryRollUp.append("<TD align=\"left\" width=\"83\">"+"<B>PS:</B>"+mObj.get("Power Source")+"<br/><B>BT:</B>"+mObj.get("Battery Type")+"</TD>");
                    sbBatteryRollUp.append("<TD align=\"left\" width=\"83\">"+"<B>NFSID:</B>"+mObj.get("Number of cells/batteries shipped inside Device")+"<br/><B>NFSOD:</B>"+mObj.get("Number of cells/batteries shipped outside Device")+"</TD>");
                    sbBatteryRollUp.append("<TD align=\"left\" width=\"83\">"+"<B>NFBR:</B>"+mObj.get("Number of Batteries Required")+"<br/><B>BCC:</B>"+mObj.get("Battery Chemical Composition")+"</TD>");
                    sbBatteryRollUp.append("<TD align=\"left\" width=\"83\">"+mObj.get("Nominal Battery Weight")+"</TD>");
                    sbBatteryRollUp.append("<TD align=\"left\" width=\"83\">"+"<B>BUM:</B>"+mObj.get("Battery Weight UoM")+"<br/><B>BS:</B>"+mObj.get("Battery Size")+"</TD>");
                    sbBatteryRollUp.append("<TD align=\"left\" width=\"83\">"+"<B>NBV:</B>"+mObj.get("Nominal Battery Voltage")+"<br/><B>BVU:</B>"+mObj.get("Battery Voltage UoM")+"</TD>");
                    sbBatteryRollUp.append("<TD align=\"left\" width=\"83\">"+"<B>TC:</B>"+mObj.get("Typical Capacity")+"<br/><B>TCU:</B>"+mObj.get("Typical Capacity UoM")+"</TD>");
                    sbBatteryRollUp.append("<TD align=\"left\" width=\"83\">"+"<B>NOC:</B>"+mObj.get("Number of cells")+"<br/><B>GOLPC:</B>"+mObj.get("Grams of Lithium per cell")+"<br/><B>GOLU:</B>"+mObj.get("Grams of Lithium UoM")+"</TD>");
                    sbBatteryRollUp.append("<TD align=\"left\" width=\"83\">"+"<br/><B>ITBB:</B>"+mObj.get("Is this a Button Battery")+"<br/><B>LBE:</B>"+mObj.get("Lithium Battery Energy")+"<B>LBEU:</B>"+mObj.get("Lithium Battery Energy UoM")+"</TD>");
                    sbBatteryRollUp.append("</TR>");
                }
                sbBatteryRollUp.append("</TABLE><TR><TD><br /></TD></TR>");

            }
            // Table Battery Calculation
            sbBatteryRollUp.append("<TABLE class=\"pdf\" cellspacing=\"0\" width=\"1000px\" id=\"pgBatteryRollUp\">");
            sbBatteryRollUp.append("<thead>");
            //	Header
            sbBatteryRollUp.append("<TR><TD class=\"new\" colspan=\"3\" ><font size='4'><b>Battery Calculation<br /></b></font></TD></TR>");
            sbBatteryRollUp.append("<TR align=\"top\">");

            sbBatteryRollUp.append("<TD  width=\"83\" align=\"left\"><B>Are Batteries Included</B></TD>");
            sbBatteryRollUp.append("<TD  width=\"83\" align=\"left\"><B>Are Batteries Required</B></TD>");
            sbBatteryRollUp.append("<TD  width=\"83\" align=\"left\"><B>Are Batteries Built-in</B></TD>");


            sbBatteryRollUp.append("</TR></thead>");

            Map mObject = EnoviaTableUtils.getBatteryRollUpFormDetails(context, strObjectId);
            // Values
            sbBatteryRollUp.append("<TR align=\"center\" class=\"pdf\">");
            sbBatteryRollUp.append("<TD align=\"left\" width=\"83\">"+mObject.get("Are Batteries Included")+"</TD>");
            sbBatteryRollUp.append("<TD align=\"left\" width=\"83\">"+mObject.get("Are Batteries Required")+"</TD>");
            sbBatteryRollUp.append("<TD align=\"left\" width=\"83\">"+mObject.get("Are Batteries Built-in")+"</TD>");

            sbBatteryRollUp.append("</TR>");

            sbBatteryRollUp.append("</TABLE><TR><TD><br /></TD></TR>");
            sbBatteryRollUp.append("</TD></TR>");


        }
        catch (Exception e) {
            logger.log(Level.WARNING, null, e);
        }
        long endTime = new Date().getTime();
        logger.log(Level.INFO,"Total Time has taken by the getBatteryRollUp Method is--> {0}",(endTime-startTime));
        return sbBatteryRollUp;
    }
//Added by DSM-2018x.6 for PDF Views for Req_36346 - end
//Added by DSM-2018x.6 for PDF Views for Defect-39337 - Start
    /**
     *
     * @param context - matrix Context
     * @param Map  - Attribute map
     * @return String - String of table data
     * @since DSM 2018x.6
     */
    private StringBuilder getMarketClearance(Context context,String strObjectId, String strType) {
        long startTime = new Date().getTime();
        StringBuilder sbMarketClearance = new StringBuilder();
        try {
            MapList mlObjects = null;
            mlObjects = getmlObjectsData(context,strObjectId);

            if(!mlObjects.isEmpty()) {
                // Table
                sbMarketClearance.append("<TR><TD>");
                sbMarketClearance.append("<TABLE class=\"WordWrappdf\" cellspacing=\"0\" width=\"1000px\" id=\"pgFormulatedProductTable\">");
                sbMarketClearance.append("<thead>");
                //	Header
                sbMarketClearance.append("<TR><TD class=\"new\" colspan=\"14\" ><font size='4'><b>Market Clearance<br /></b></font></TD></TR>");
                sbMarketClearance.append("<TR align=\"top\">");

                sbMarketClearance.append("<TD  width=\"77\" align=\"left\"><B>Market</B></TD>");
                sbMarketClearance.append("<TD  width=\"71\" align=\"left\"><B>Overall Clearance Status</B></TD>");
                sbMarketClearance.append("<TD  width=\"71\" align=\"left\"><B>GPS Approval Status (GPSAS)<BR/>Clearance Number (CN)</B></TD>");
                sbMarketClearance.append("<TD  width=\"71\" align=\"left\"><B>Product Regulatory Classification (PRC)<BR/>Market Approval Holder (MAH)</B></TD>");
                //Modified by DSM(Sogeti)-2022x.01 Feb CW 2022 for PDF Views (Defect-51145) - Starts
                sbMarketClearance.append("<TD  width=\"71\" align=\"left\"><B>Legal Entity (LE)<BR/>Business Channel<BR/>(BC)</B></TD>");
                //Modified by DSM(Sogeti)-2022x.01 Feb CW 2022 for PDF Views (Defect-51145) - Ends
                if(!pgV3Constants.TYPE_PGCONSUMERUNITPART.equals(strType)) {
                    sbMarketClearance.append("<TD  width=\"71\" align=\"left\"><B>Pack Size (PS)<BR/>Pack Size UoM(PSU)</B></TD>");
                }
				//Modified by DSM(Sogeti)-2022x.01 Feb CW 2022 for PDF Views (Defect-51145) - Starts
                sbMarketClearance.append("<TD  width=\"71\" align=\"left\"><B>Market Product<BR/>Registration Number</B></TD>");
                //Modified by DSM(Sogeti)-2022x.01 Feb CW 2022 for PDF Views (Defect-51145) - Ends
                sbMarketClearance.append("<TD  width=\"71\" align=\"left\"><B>Registration Status (Rs)<BR/>Registration Expiration Date (Re)</B></TD>");
                sbMarketClearance.append("<TD  width=\"71\" align=\"left\"><B>Registration Renewal Lead Time(Days) (Rr)<BR/>Registration Renewal Status (Rw)</B></TD>");
                sbMarketClearance.append("<TD  width=\"71\" align=\"left\"><B>Registered Product Name (RPN)<BR/>Restrictions(R)</B></TD>");
                sbMarketClearance.append("<TD  width=\"71\" align=\"left\"><B>GPS<BR/>Comments</B></TD>");
                sbMarketClearance.append("<TD  width=\"71\" align=\"left\"><B>Packing<BR/>Site</B></TD>");
                //Modified by DSM(Sogeti)-2022x.01 Feb CW 2022 for PDF Views (Defect-51145) - Starts
                sbMarketClearance.append("<TD  width=\"71\" align=\"left\"><B>Bulk Making /<BR/> Manufacturing Site</B></TD>");
                //Modified by DSM(Sogeti)-22022x.01 Feb CW 2022 for PDF Views (Defect-51145) - Ends
                sbMarketClearance.append("</TR></thead>");

                // Values
                Map<?, ?> htMarketClearance = null;
                boolean flag = false;
                int iObjetsSize = mlObjects.size();

                mlObjects.sort("name", "ascending", "String");
                for (int i=0; i < iObjetsSize; i++) {
                    htMarketClearance = (Map<?, ?>) mlObjects.get(i);
                    // determine the size of max multivalue
                    int maxlength = htMarketClearance.values()
                            .stream()
                            .mapToInt(v->getSizeof(v))
                            .max().orElse(0);
                    String strOverallClearance 	= (String)htMarketClearance.get(pgV3Constants.SELECT_ATTRIBUTE_PGOVERALLCLEARANCESTATUS);
                    StringList slGPSApprovalStatus 	= cleanUpHTMLTags(putEmptyIfEmptyList(convertObjectToStringList(htMarketClearance.get(pgV3Constants.SELECT_ATTRIBUTE_PGPSRAAPPROVALSTATUS)),maxlength));
                    StringList slPGCTNumber 	= cleanUpHTMLTags(putEmptyIfEmptyList(convertObjectToStringList(htMarketClearance.get(pgV3Constants.SELECT_ATTRIBUTE_PGCTNUMBER)),maxlength));
                    StringList slProductRegulatoryClassification 	= cleanUpHTMLTags(putEmptyIfEmptyList(convertObjectToStringList(htMarketClearance.get(pgV3Constants.SELECT_ATTRIBUTE_PGPRODUCTREGULATORYCLASSIFICATION)),maxlength));
                    StringList slMarketApprovalHolder 	= cleanUpHTMLTags(putEmptyIfEmptyList(convertObjectToStringList(htMarketClearance.get(pgV3Constants.SELECT_ATTRIBUTE_PGMARKETAPPROVERHOLDER)),maxlength));
                    StringList slBusinessChannel 	= cleanUpHTMLTags(putEmptyIfEmptyList(convertObjectToStringList(htMarketClearance.get("attribute[" +pgV3Constants.ATTRIBUTE_PGBUSINESSCHANNEL+ "]")),maxlength));
                    StringList slLegalEntity 	= cleanUpHTMLTags(putEmptyIfEmptyList(convertObjectToStringList(htMarketClearance.get("attribute[" +pgV3Constants.ATTRIBUTE_PGLEGALENTITY+ "]")),maxlength));
                    StringList slMPRN 	= cleanUpHTMLTags(putEmptyIfEmptyList(convertObjectToStringList(htMarketClearance.get(pgV3Constants.SELECT_ATTRIBUTE_PGCOUNTRYPRODUCTREGISTRATIONNUMBER)),maxlength));
                    StringList slRegistrationStatus 	= cleanUpHTMLTags(putEmptyIfEmptyList(convertObjectToStringList(htMarketClearance.get(pgV3Constants.SELECT_ATTRIBUTE_PGREGISTRATIONSTATUS)),maxlength));
                    StringList slRegistrationEndDate 	= cleanUpHTMLTags(putEmptyIfEmptyList(convertObjectToStringList(htMarketClearance.get(pgV3Constants.SELECT_ATTRIBUTE_PGREGISTRATIONENDDATE)),maxlength));
                    StringList slRegRenewalLeadTime 	= cleanUpHTMLTags(putEmptyIfEmptyList(convertObjectToStringList(htMarketClearance.get("attribute[" +pgV3Constants.ATTRIBUTE_REGISTRATIONRENEWALLEADTIME+ "]")),maxlength));
                    StringList slRegRenewalStatus 	= cleanUpHTMLTags(putEmptyIfEmptyList(convertObjectToStringList(htMarketClearance.get("attribute[" +pgV3Constants.ATTRIBUTE_REGISTRTATIONRENEWALSTATUS+ "]")),maxlength));
                    StringList slRegProductName 	= cleanUpHTMLTags(putEmptyIfEmptyList(convertObjectToStringList(htMarketClearance.get("attribute[" +pgV3Constants.ATTRIBUTE_REGISTEREDPRODUCTNAME+ "]")),maxlength));
                    StringList slPlantRestriction 	= cleanUpHTMLTags(putEmptyIfEmptyList(convertObjectToStringList(htMarketClearance.get(pgV3Constants.SELECT_ATTRIBUTE_PGPLANTRESTRICTION)),maxlength));
                    StringList slClearanceComment 	= cleanUpHTMLTags(putEmptyIfEmptyList(convertObjectToStringList(htMarketClearance.get(pgV3Constants.SELECT_ATTRIBUTE_PGCLEARANCECOMMENT)),maxlength));
                    StringList slPackingSite 	= cleanUpHTMLTags(putEmptyIfEmptyList(convertObjectToStringList(htMarketClearance.get(pgV3Constants.SELECT_ATTRIBUTE_PGPACKINGSITE)),maxlength));
                    StringList slManufacturingSite 	= cleanUpHTMLTags(putEmptyIfEmptyList(convertObjectToStringList(htMarketClearance.get(pgV3Constants.SELECT_ATTRIBUTE_PGMANUFACTURINGSITE)),maxlength));
                    StringList slPackSize 	= cleanUpHTMLTags(putEmptyIfEmptyList(convertObjectToStringList(htMarketClearance.get(pgV3Constants.SELECT_ATTRIBUTE_PGPACKSIZE_INPUTVALUE)),maxlength));
                    StringList slPackSizeUoM 	= cleanUpHTMLTags(putEmptyIfEmptyList(convertObjectToStringList(htMarketClearance.get("attribute[" +pgV3Constants.ATTRIBUTE_PGPACKSIZEUOM+ "]")),maxlength));

                    flag=false;
                    for (int j = 0; j < maxlength; j++) {
                        sbMarketClearance.append("<TR align=\"center\" class=\"pdf\">");
                        if(!flag) {
                            sbMarketClearance.append("<TD rowspan=\""+maxlength+"\" align=\"left\" width=\"83\">"+htMarketClearance.get("name")+"</TD>");
                            sbMarketClearance.append("<TD rowspan=\""+maxlength+"\" align=\"left\" width=\"83\">"+(strOverallClearance)+"</TD>");
                            flag=true;
                        }

                        sbMarketClearance.append("<TD align=\"left\" width=\"83\"><B>GPSAS: </B>"+(slGPSApprovalStatus.get(j))+"<BR></BR><B>CN: </B>"+(slPGCTNumber.get(j))+"</TD>");
                        //Modified by DSM(Sogeti)-2022x.01 Feb CW 2022 for PDF Views (Defect-51145) - Starts
                        sbMarketClearance.append("<TD align=\"left\" width=\"83\"><B>PRC: </B>"+wrapCharTable(slProductRegulatoryClassification.get(j),10)+"<BR></BR><B>MAH: </B>"+wrapCharTable(slMarketApprovalHolder.get(j),10)+"</TD>");
                        sbMarketClearance.append("<TD align=\"left\" width=\"83\"><B>LE: </B>"+wrapCharTable(slLegalEntity.get(j),10)+"<BR></BR><B>BC: </B>"+wrapCharTable(slBusinessChannel.get(j),10)+"</TD>");
                        //Modified by DSM(Sogeti)-2022x.01 Feb CW 2022 for PDF Views (Defect-51145) - Ends
                        if(!pgV3Constants.TYPE_PGCONSUMERUNITPART.equals(strType)) {
                            sbMarketClearance.append("<TD align=\"left\" width=\"83\"><B>PS: </B>"+(slPackSize.get(j))+"<BR></BR><B>PSU: </B>"+(slPackSizeUoM.get(j))+"</TD>");
                        }
                        //Modified by DSM(Sogeti)-2022x.01 Feb CW 2022 for PDF Views (Defect-51145) - Starts
                        sbMarketClearance.append("<TD align=\"left\" width=\"83\">"+wrapCharTable(slMPRN.get(j),10)+"</TD>");
                        //Modified by DSM(Sogeti)-2022x.01 Feb CW 2022 for PDF Views (Defect-51145) - Ends
                        sbMarketClearance.append("<TD align=\"left\" width=\"83\"><B>Rs: </B>"+(slRegistrationStatus.get(j))+"<BR></BR><B>Re: </B>"+(slRegistrationEndDate.get(j))+"</TD>");
                        sbMarketClearance.append("<TD align=\"left\" width=\"83\"><B>Rr: </B>"+(slRegRenewalLeadTime.get(j))+"<BR></BR><B>Rw: </B>"+(slRegRenewalStatus.get(j))+"</TD>");
                        //Modified by DSM(Sogeti)-2022x.01 Feb CW 2022 for PDF Views (Defect-51145) - Starts
                        sbMarketClearance.append("<TD align=\"left\" width=\"83\"><B>RPN: </B>"+wrapCharTable(slRegProductName.get(j),10)+"<BR></BR><B>R: </B>"+wrapCharTable(slPlantRestriction.get(j),10)+"</TD>");
						//Added by DSM (Infosys) 2022x.06 for Defect-55080 : All Info view PDF does not load when ‘GPS Comments’ Column of ‘Market Clearance’ tab has special characters  - Starts	
					    sbMarketClearance.append("<TD align=\"left\" width=\"83\">"+wrapCharTable(checkLessThanGreaterThan(addSpace(slClearanceComment.get(j))),13)+"</TD>");
						//Added by DSM (Infosys) 2022x.06 for Defect-55080 : All Info view PDF does not load when ‘GPS Comments’ Column of ‘Market Clearance’ tab has special characters  - Ends
                        sbMarketClearance.append("<TD align=\"left\" width=\"83\">"+wrapCharTable(replaceCapsWithComma(slPackingSite.get(j)),10)+"</TD>");
                        sbMarketClearance.append("<TD align=\"left\" width=\"83\">"+wrapCharTable(replaceCapsWithComma(slManufacturingSite.get(j)),10)+"</TD>");
                        //Modified by DSM(Sogeti)-2022x.01 Feb CW 2022 for PDF Views (Defect-51145) - Ends
                        sbMarketClearance.append("</TR>");
                    }
                }
                sbMarketClearance.append("</TABLE><TR><TD><br /></TD></TR>");
                sbMarketClearance.append("</TD></TR>");
            }
        }
        catch (Exception e) {
            logger.log(Level.WARNING, null, e);
        }
        long endTime = new Date().getTime();
        logger.log(Level.INFO,"Total Time has taken by the getMarketClearance Method is--> {0}",(endTime-startTime));
        return sbMarketClearance;
    }

    /**
     *
     * @param obj
     * @return
     */
    private static int getSizeof(Object obj) {
        if (obj == null)
            return 0;
        return (obj instanceof String) ? 1 : ((StringList) obj).size();
    }
    /**
     *
     * @param sl
     * @param length
     * @return
     */
    private static StringList putEmptyIfEmptyList(StringList sl,int length) {
        if(length==1 && sl.isEmpty())
            sl.add("");
        return sl;
    }

    /**
     * Check pased String returns special character
     * with comma separated value in PDF
     * @param string
     * @return
     */
    private String replaceCapsWithComma(String string) {
        return string.replace('^', ',');
    }

    /**
     * This method returns MapList containing Market Clearance Details
     * on the product part
     * @param context
     * @param strObjectId
     * @return
     */
    private MapList getmlObjectsData(Context context, String strObjectId) throws FrameworkException {

        DomainObject dObject = null;
        dObject = DomainObject.newInstance(context, strObjectId);

        StringList businessObjectSelectable = new StringList(1);
        businessObjectSelectable.addElement(DomainConstants.SELECT_NAME);

        StringList relSelectTable = new StringList(19);
        relSelectTable.addElement(pgV3Constants.SELECT_ATTRIBUTE_PGOVERALLCLEARANCESTATUS);
        relSelectTable.addElement(pgV3Constants.SELECT_ATTRIBUTE_PGPSRAAPPROVALSTATUS);
        relSelectTable.addElement(pgV3Constants.SELECT_ATTRIBUTE_PGCTNUMBER);
        relSelectTable.addElement(pgV3Constants.SELECT_ATTRIBUTE_PGPRODUCTREGULATORYCLASSIFICATION);
        relSelectTable.addElement(pgV3Constants.SELECT_ATTRIBUTE_PGMARKETAPPROVERHOLDER);
        relSelectTable.addElement("attribute[" +pgV3Constants.ATTRIBUTE_PGLEGALENTITY+ "]");
        relSelectTable.addElement("attribute[" +pgV3Constants.ATTRIBUTE_PGBUSINESSCHANNEL+ "]");
        relSelectTable.addElement(pgV3Constants.SELECT_ATTRIBUTE_PGPACKSIZE_INPUTVALUE);
        relSelectTable.addElement("attribute[" +pgV3Constants.ATTRIBUTE_PGPACKSIZEUOM+ "]");
        relSelectTable.addElement(pgV3Constants.SELECT_ATTRIBUTE_PGCOUNTRYPRODUCTREGISTRATIONNUMBER);
        relSelectTable.addElement(pgV3Constants.SELECT_ATTRIBUTE_PGREGISTRATIONSTATUS);
        relSelectTable.addElement(pgV3Constants.SELECT_ATTRIBUTE_PGREGISTRATIONENDDATE);
        relSelectTable.addElement("attribute[" +pgV3Constants.ATTRIBUTE_REGISTRATIONRENEWALLEADTIME+ "]");
        relSelectTable.addElement("attribute[" +pgV3Constants.ATTRIBUTE_REGISTRTATIONRENEWALSTATUS+ "]");
        relSelectTable.addElement("attribute[" +pgV3Constants.ATTRIBUTE_REGISTEREDPRODUCTNAME+ "]");
        relSelectTable.addElement(pgV3Constants.SELECT_ATTRIBUTE_PGPLANTRESTRICTION);
        relSelectTable.addElement(pgV3Constants.SELECT_ATTRIBUTE_PGCLEARANCECOMMENT);
        relSelectTable.addElement(pgV3Constants.SELECT_ATTRIBUTE_PGPACKINGSITE);
        relSelectTable.addElement(pgV3Constants.SELECT_ATTRIBUTE_PGMANUFACTURINGSITE);

        return  dObject.getRelatedObjects(
                context, //context
                pgV3Constants.RELATIONSHIP_PGPRODUCTCOUNTRYCLEARANCE, //relPattern
                pgV3Constants.TYPE_COUNTRY, //typePattern
                businessObjectSelectable, //objectSelects
                relSelectTable, //relationshipSelects
                Boolean.FALSE, //getTo
                Boolean.TRUE, //getFrom
                (short) 1, 					 //recurseToLevel
                DomainConstants.EMPTY_STRING, 	//objectWhere
                DomainConstants.EMPTY_STRING, 	//relationshipWhere
                0);//limit
    }
//Added by DSM-2018x.6 for PDF Views for Defect-39337 - End
    //Added by DSM-2018x.6 July CW for PDF Views Req #39480: Start
    /**
     * @since DSM 2018x.6 July CW
     * @param context
     * @param strObjectId
     * @return
     */
    private StringBuilder getDesignParameter(Context context,String strObjectId) {
        long startTime = new Date().getTime();
        StringBuilder sbMarketClearance = new StringBuilder();
        try {
            MapList mlObjects = getDesignParameterData(context,strObjectId);
            if(mlObjects!=null && !mlObjects.isEmpty()) {

                StringList slTableColumnValueKeys=StringUtil.split(EnoviaResourceBundle.getProperty(context,"emxCPNStringResource",context.getLocale(),"emxCPN.Column.Key.DesignParameterTableKey"),pgPDFViewConstants.STR_COMMA);
                StringList slTableColumnNames=StringUtil.split(EnoviaResourceBundle.getProperty(context,"emxCPNStringResource",context.getLocale(),"emxCPN.Table.Column.Names.DesignParameter"),pgPDFViewConstants.STR_COMMA);

                sbMarketClearance.append("<TR><TD>");
                sbMarketClearance.append("<TABLE class=\"WordWrappdf\" cellspacing=\"0\" width=\"1000px\" id=\"DesignParameter\">");
                sbMarketClearance.append("<thead>");
                sbMarketClearance.append("<TR><TD class=\"new\" colspan=\"8\" ><font size='4'><b>Design Parameter<br /></b></font></TD></TR>");
                sbMarketClearance.append("<TR align=\"top\">");
                for (String column : slTableColumnNames) {
                    sbMarketClearance.append("<TD align=\"left\"><B>").append(column).append("</B></TD>");
                }
                sbMarketClearance.append("</TR></thead>");

                Map<?, ?> mpDesignParameter = null;
                int iObjetsSize = mlObjects.size();
                for (int i=0; i < iObjetsSize; i++) {
                    mpDesignParameter = (Map<?, ?>) mlObjects.get(i);
                    sbMarketClearance.append("<TR align=\"center\" class=\"pdf\">");
                    for (String columnKey : slTableColumnValueKeys) {
                        sbMarketClearance.append("<TD align=\"left\" width=\"83\">"+(String)(mpDesignParameter.get(columnKey))+"</TD>");
                    }
                    sbMarketClearance.append("</TR>");
                }
                sbMarketClearance.append("</TABLE><TR><TD><br /></TD></TR>");
                sbMarketClearance.append("</TD></TR>");
            }
        } catch (Exception e) {
            logger.log(Level.WARNING, null, e);
        }
        long endTime = new Date().getTime();
        logger.log(Level.INFO,"Total Time has taken by the getDesignParameter Method is--> {0}",(endTime-startTime));
        return sbMarketClearance;
    }
    //Added by DSM-2018x.6 July CW for PDF Views Req #39480: END

    /**
     * @param context
     * @param strObjectId
     * @return
     * @throws FrameworkException
     */
    //Added by DSM-2018x.6 July CW for PDF Views Req #39480: Start
    private MapList getDesignParameterData(Context context, String strObjectId){
        MapList mlDesignParameters=new MapList();
        try {
            Map<Object,Object> programMap = new HashMap<>();
            programMap.put("objectId", strObjectId);
            mlDesignParameters = (MapList)pgPDFViewHelper.executeMainClassMethod(context, "pgDSMLayeredProductUtil", "getValuesFromXML", JPO.packArgs(programMap));
        } catch (Exception e) {
            logger.log(Level.WARNING, null, e);
        }
        return mlDesignParameters;
    }
    //Added by DSM-2018x.6 July CW for PDF Views Req #39480: End

    /**
     *
     * @param context
     * @return
     * @throws MatrixException
     * Added by DSM-2018x.6_Oct CW for PDF Views Req #40098
     */
    private boolean isContractManufacturerUser(Context context) throws MatrixException {
        String loggedInUser = PropertyUtil.getGlobalRPEValue(context, ContextUtil.MX_LOGGED_IN_USER_NAME);
        if(context.getUser().equals(loggedInUser)) {
            return  context.isAssigned(pgV3Constants.ROLE_PGCONTRACTMANUFACTURER);
        } else {
            Person person = new Person(loggedInUser);
            return person.isAssigned(context, pgV3Constants.ROLE_PGCONTRACTMANUFACTURER);
        }
    }


    /**
     *
     * @param context
     * @param objectId
     * @param type
     * @param pdfView
     * @return
     * @throws Exception
     * Added by DSM-2018x.6_Oct_CW for PDF Views (Req Id #39799)
     */
    public StringBuilder getSEPSubstanceAndMaterials(Context context,String objectId,String type, String pdfView) throws Exception {

        StringBuilder substanceAndMaterials ;
        List<String> subsAndMatAllowedTypes =  StringUtil.split(EnoviaResourceBundle.getProperty(context,"emxCPN",context.getLocale(),"emxCPN.Type.SubsAndMat.Allowed"),pgPDFViewConstants.STR_COMMA);
        List<String> matAndCompAllowedTypes =  StringUtil.split(EnoviaResourceBundle.getProperty(context,"emxCPN",context.getLocale(),"emxCPN.Type.MatAndComp.Allowed"),pgPDFViewConstants.STR_COMMA);

        if (subsAndMatAllowedTypes.contains(type)) {
            substanceAndMaterials = getDSOMaterial(context,objectId,pdfView);
        }else if(matAndCompAllowedTypes.contains(type)) {
            substanceAndMaterials = getSubstancesMaterialsTable(context, objectId);
        } else {
            return new StringBuilder();
        }

        return substanceAndMaterials;
    }

    /**
     * Added by DSM-2018x.6 Feb CW for PDF Views Req #41363,41364
     * @param context
     * @param strObjectId
     * @param strType
     * @return
     */
    public StringBuilder getSustainability(Context context, String strObjectId,String strType) {
        StringBuilder sustainabilityTableData = new StringBuilder();
        List<String> sustainabilityCOP =  StringUtil.split(pgPDFViewConstants.STR_SUSTAINABILITYCOP,pgPDFViewConstants.STR_COMMA);
        List<String> sustainabilityPackMaterial =  StringUtil.split(pgPDFViewConstants.STR_SUSTAINABILITYPACKMATERIAL,pgPDFViewConstants.STR_COMMA);
        //Added by DSM (Sogeti) for 22x.05 (APR CW 2024) Req 48209,48203 and 48221 - START  
        List<String> slSustainabilityType =  StringUtil.split(pgPDFViewConstants.SUSTAINABILITY_TYPE_FAB_AND_APMP,pgPDFViewConstants.STR_COMMA);
        //Added by DSM (Sogeti) for 22x.05 (APR CW 2024) Req 48209,48203 and 48221 - END
        if (sustainabilityCOP.contains(strType)) {
            sustainabilityTableData = getCOPSustainability(context,strObjectId);
        }
        else if(sustainabilityPackMaterial.contains(strType)){
            sustainabilityTableData = getPackMaterialSustainability(context,strObjectId);
        }
        //Added by DSM (Sogeti) for 22x.05 (APR CW 2024) Req 48209,48203 and 48221 - START
        else if(slSustainabilityType.contains(strType)){
            sustainabilityTableData = getSustaibilityAttrInfo(context,strObjectId);
        }
        //Added by DSM (Sogeti) for 22x.05 (APR CW 2024) Req 48209,48203 and 48221 - END
        return sustainabilityTableData;
    }
    
    /**
     * Added by 22x.05 APR CW for PDF Views Req #48209, #48203 and #48221.
     * method to get Sustainability Table Data for FAB and APMP.
     * @param context
     * @param objectId
     * @return
     */
    private StringBuilder getSustaibilityAttrInfo(Context context, String objectId) {
    	long startTime = new Date().getTime();
    	StringBuilder sustainabilityData  = new StringBuilder();
    	boolean bRMSustainability=true;
    	if(validateString(objectId)) {
    		StringList slBusSelects = new StringList(7);
    		slBusSelects.add(DomainConstants.SELECT_TYPE);
    		slBusSelects.add(pgPDFViewConstants.SELECT_ATTRIBUTE_PGPACKAGECOMPONENTOPTICALPROPERTIES);
    		slBusSelects.add(pgPDFViewConstants.SELECT_ATTRIBUTE_PGMATERIALTHICKNESS);
    		slBusSelects.add(pgPDFViewConstants.SELECT_ATTRIBUTE_PGPACKAGEDURABILITY);
    		slBusSelects.add(pgPDFViewConstants.SELECT_ATTRIBUTE_PGPAPERDISSOLVABILITY);
    		slBusSelects.add(pgPDFViewConstants.SELECT_ATTRIBUTE_PGMATERIALDENSITY);
    		slBusSelects.add(pgV3Constants.SELECT_ATTRIBUTE_PGASSEMBLYTYPE);
    		try {
    			Map<String,String> dataMap;
    			DomainObject domainObject = DomainObject.newInstance(context, objectId);
    			dataMap = domainObject.getInfo(context, slBusSelects);
    			if (null != dataMap && !dataMap.isEmpty()) {
    				String sType=dataMap.get(DomainConstants.SELECT_TYPE);
    				String AttrAssemblyType = dataMap.get(pgV3Constants.SELECT_ATTRIBUTE_PGASSEMBLYTYPE);
    				if(pgV3Constants.TYPE_RAWMATERIALPART.equals(sType)) {
    					if(!(pgPDFViewConstants.ATTRIBUTE_PG_ASSEMBLYTYPE_RANGE_PACKAGING.equals(AttrAssemblyType))) {
    						bRMSustainability=false;
    					}
    				}
    				if(bRMSustainability) {
    					sustainabilityData.append("<TR><TD><TABLE class=\"WordWrappdf\" cellspacing=\"0\" width=\"1000px\" id=\"SustainabilityTable\">");
    					sustainabilityData.append("<thead>");
    					sustainabilityData.append("<TR><TD colspan='4' class=\"new\" ><font size='4'><b>Sustainability<br /></b></font></TD></TR>");
    					sustainabilityData.append("</thead>");
    					sustainabilityData.append("<tbody>");
    					sustainabilityData.append("<TR>");
    					sustainabilityData.append("<TD align='left'  width=\"250px\" ><B>Optical Properties</B></TD>");
    					sustainabilityData.append("<TD align='left' width=\"250px\">"+validateString1(dataMap.get(pgPDFViewConstants.SELECT_ATTRIBUTE_PGPACKAGECOMPONENTOPTICALPROPERTIES))+"</TD>");
    					sustainabilityData.append("<TD align='left'  width=\"250px\" ><B>Material Density</B></TD>");
    					sustainabilityData.append("<TD align='left' width=\"250px\">"+checkLessThanGreaterThan(validateString1(dataMap.get(pgPDFViewConstants.SELECT_ATTRIBUTE_PGMATERIALDENSITY)))+"</TD>");
    					sustainabilityData.append("</TR>");
    					sustainabilityData.append("<TR>");
    					sustainabilityData.append("<TD align='left'  width=\"250px\" ><B>Material Thickness</B></TD>");
    					sustainabilityData.append("<TD align='left' width=\"250px\">"+checkLessThanGreaterThan(validateString1((dataMap.get(pgPDFViewConstants.SELECT_ATTRIBUTE_PGMATERIALTHICKNESS))))+"</TD>");
    					sustainabilityData.append("<TD align='left'  width=\"250px\" ><B>Package Durability</B></TD>");
    					sustainabilityData.append("<TD align='left' width=\"250px\">"+checkLessThanGreaterThan(validateString1(dataMap.get(pgPDFViewConstants.SELECT_ATTRIBUTE_PGPACKAGEDURABILITY)))+"</TD>");
    					sustainabilityData.append("</TR>");
    					sustainabilityData.append("<TR>");
    					sustainabilityData.append("<TD align='left'  width=\"250px\" ><B>Paper Dissolvability</B></TD>");
    					sustainabilityData.append("<TD align='left' colspan='4'>"+checkLessThanGreaterThan(validateString1(dataMap.get(pgPDFViewConstants.SELECT_ATTRIBUTE_PGPAPERDISSOLVABILITY)))+"</TD>");
    					sustainabilityData.append("</TR>");
    					sustainabilityData.append("</tbody>");
    					sustainabilityData.append("</TABLE><TR><TD><BR/></TD></TR></TD></TR>");
    				}
    			}
    		}catch (Exception e) {
    			logger.log(Level.WARNING, null, e);
    		}
    	}
    	long endTime = new Date().getTime();
    	logger.log(Level.INFO,"Total Time has taken by the getPackMaterialSustainability Method is--> {0}",(endTime-startTime));
    	return sustainabilityData;
    }
    
    /**
     * Added by DSM-2018x.6 Feb CW for PDF Views Req #41364
     * method to get Sustainability Table Data for PMP and OPP
     * @param context
     * @param objectId
     * @return
     */
    private StringBuilder getPackMaterialSustainability(Context context, String objectId) {
        long startTime = new Date().getTime();
        StringBuilder sustainabilityData  = new StringBuilder();
        try {
            if(validateString(objectId)) {
                StringList businessObjectSelectable = new StringList(7);
                businessObjectSelectable.addElement(pgPDFViewConstants.SELECT_ATTRIBUTE_PGMINERALOILSADDEDTOPRINTINGINKS);
                businessObjectSelectable.addElement(pgPDFViewConstants.SELECT_ATTRIBUTE_PGPACKAGECOMPONENTOPTICALPROPERTIES);
                businessObjectSelectable.addElement(pgPDFViewConstants.SELECT_ATTRIBUTE_PGMATERIALTHICKNESS);
                businessObjectSelectable.addElement(pgPDFViewConstants.SELECT_ATTRIBUTE_PGPACKAGEDURABILITY);
                businessObjectSelectable.addElement(pgPDFViewConstants.SELECT_ATTRIBUTE_PGPAPERDISSOLVABILITY);
					businessObjectSelectable.addElement(pgPDFViewConstants.SELECT_ATTRIBUTE_PGPAPERWETSTRENGTH_INPUTVALUE);
                //Added by DSM(Sogeti)-2018x.6 Apr CW for PDF Views (Req-41372 ) - Starts
                businessObjectSelectable.addElement(pgPDFViewConstants.SELECT_ATTRIBUTE_PGMATERIALDENSITY);
                Map<String,String> dataMap;
                DomainObject domainObject = DomainObject.newInstance(context, objectId);
                dataMap = domainObject.getInfo(context, businessObjectSelectable);
                if (null != dataMap && !dataMap.isEmpty()) {
                    if(pgV3Constants.TYPE_PACKAGINGMATERIALPART.equalsIgnoreCase(dataMap.get(DomainConstants.SELECT_TYPE))) {
                        sustainabilityData.append("<TR><TD><TABLE class=\"WordWrappdf\" cellspacing=\"0\" width=\"1000px\" id=\"SustainabilityTable\">");
                        sustainabilityData.append("<thead>");
                        sustainabilityData.append("<TR><TD colspan='4' class=\"new\" ><font size='4'><b>Sustainability<br /></b></font></TD></TR>");
                        sustainabilityData.append("</thead>");
                        sustainabilityData.append("<tbody>");
                        sustainabilityData.append("<TR>");
                        sustainabilityData.append("<TD align='left'  width=\"250px\" ><B>Optical Properties</B></TD>");
                        sustainabilityData.append("<TD align='left' width=\"250px\">"+validateString1(dataMap.get(pgPDFViewConstants.SELECT_ATTRIBUTE_PGPACKAGECOMPONENTOPTICALPROPERTIES))+"</TD>");
                        sustainabilityData.append("<TD align='left'  width=\"250px\" ><B>Material Density</B></TD>");
                        sustainabilityData.append("<TD align='left' width=\"250px\">"+checkLessThanGreaterThan(validateString1(dataMap.get(pgPDFViewConstants.SELECT_ATTRIBUTE_PGMATERIALDENSITY)))+"</TD>");
                        sustainabilityData.append("</TR>");
                        sustainabilityData.append("<TR>");
                        sustainabilityData.append("<TD align='left'  width=\"250px\" ><B>Material Thickness</B></TD>");
                        sustainabilityData.append("<TD align='left' width=\"250px\">"+checkLessThanGreaterThan(validateString1((dataMap.get(pgPDFViewConstants.SELECT_ATTRIBUTE_PGMATERIALTHICKNESS))))+"</TD>");
                        sustainabilityData.append("<TD align='left'  width=\"250px\" ><B>Package Durability</B></TD>");
                        sustainabilityData.append("<TD align='left' width=\"250px\">"+checkLessThanGreaterThan(validateString1(dataMap.get(pgPDFViewConstants.SELECT_ATTRIBUTE_PGPACKAGEDURABILITY)))+"</TD>");
                        sustainabilityData.append("</TR>");
                        sustainabilityData.append("<TR>");
                        //Modified by DSM(Sogeti)-2018x.6 May CW 2022 for PDF Views (Req-42940) - Starts
                        //Modified by DSM(Sogeti)-2018x.6 June CW 2022 for PDF Views (Req-43139) - Starts
                        //Modified by DSM(Sogeti)-2018x.6 May CW 2022 for PDF Views (Req-42940) - Ends
                        sustainabilityData.append("<TD align='left'  width=\"250px\" ><B>Paper Dissolvability</B></TD>");
                        //Modified by DSM(Sogeti)-22x.01 Feb CW for PDF Views (Defect-51111 ) - Starts
                        sustainabilityData.append("<TD align='left' colspan=\"3\" width=\"250px\">"+checkLessThanGreaterThan(validateString1(dataMap.get(pgPDFViewConstants.SELECT_ATTRIBUTE_PGPAPERDISSOLVABILITY)))+"</TD>");
                        //Modified by DSM(Sogeti)-22x.01 Feb CW for PDF Views (Defect-51111 ) - Ends
                        sustainabilityData.append("</TR>");								//Added by DSM(Sogeti)-2018x.6 Apr CW for PDF Views (Req-41372 ) - Starts
                        //Modified by DSM(Sogeti)-2018x.6 June CW 2022 for PDF Views (Req-43139) - Ends
                        sustainabilityData.append("</tbody>");
                        sustainabilityData.append("</TABLE><TR><TD><BR/></TD></TR></TD></TR>");
                    }
                    else {

                        sustainabilityData.append("<TR><TD><TABLE class=\"WordWrappdf\" cellspacing=\"0\" width=\"1000px\" id=\"SustainabilityTable\">");
                        sustainabilityData.append("<thead>");
                        sustainabilityData.append("<TR><TD colspan='4' class=\"new\" ><font size='4'><b>Sustainability<br /></b></font></TD></TR>");
                        sustainabilityData.append("</thead>");
                        sustainabilityData.append("<tbody>");
                        sustainabilityData.append("<TR>");
                        sustainabilityData.append("<TD align='left'  width=\"250px\" ><B>Mineral Oils added to Printing Inks</B></TD>");
					    sustainabilityData.append("<TD align='left' colspan=\"3\">"+validateString1(dataMap.get(pgPDFViewConstants.SELECT_ATTRIBUTE_PGMINERALOILSADDEDTOPRINTINGINKS))+"</TD>");
						sustainabilityData.append("</TR>");
                        sustainabilityData.append("</tbody>");
                        sustainabilityData.append("</TABLE><TR><TD><BR/></TD></TR></TD></TR>");

                    }
                }
            }
        }catch (Exception e) {
            logger.log(Level.WARNING, null, e);
        }
        long endTime = new Date().getTime();
        logger.log(Level.INFO,"Total Time has taken by the getPackMaterialSustainability Method is--> {0}",(endTime-startTime));
        return sustainabilityData;
    }


    /**
     * Added by DSM-2018x.6 Feb CW for PDF Views Req #41363
     * method to get Sustainability Table Data for COP and MCOP
     * @param context
     * @param strObjectId
     * @return
     */
    public StringBuilder getCOPSustainability(Context context, String strObjectId) {
        StringBuilder sbAttributesInfo = new StringBuilder();
        long startTime = new Date().getTime();
        if (validateString(strObjectId)) {
            try {
                StringList slObjectSelects = new StringList(1);
                slObjectSelects.addElement(pgPDFViewConstants.SELECT_ATTRIBUTE_PGINTEGRATEDLIDGLASSBOTTLEONLY);
                //Modified by DSM(Sogeti)-2018x.6 Apr CW 2022 for PDF Views (Req-42183 ) - Starts
                slObjectSelects.addElement(pgPDFViewConstants.SELECT_ATTRIBUTE_PGDESIGNEDFORRESUSE);
                //Added by DSM(Sogeti)-2018x.6 June CW 2022 for PDF Views (Req-43133 ) - Starts
                slObjectSelects.addElement(pgPDFViewConstants.SELECT_ATTRIBUTE_PGLABELREMOVABILITY);
                //Added by DSM(Sogeti)-2018x.6 June CW 2022 for PDF Views (Req-43133 ) - Ends
                DomainObject domainObject = DomainObject.newInstance(context, strObjectId);
                Map<String, String> mpAttributeInfo = domainObject.getInfo(context, slObjectSelects);
                if (null != mpAttributeInfo && !mpAttributeInfo.isEmpty()) {
                    sbAttributesInfo.append("<TR><TD><TABLE class=\"WordWrappdf\" cellspacing=\"0\" width=\"1000px\" id=\"Sustainability\">");
                    sbAttributesInfo.append("<thead><TR><TD colspan='2' class=\"new\" ><font size='4'><b>Sustainability<br /></b></font></TD></TR></thead>");

                    String strIntegratedLid = mpAttributeInfo.get(pgPDFViewConstants.SELECT_ATTRIBUTE_PGINTEGRATEDLIDGLASSBOTTLEONLY);
                    if(pgV3Constants.TYPE_PGCONSUMERUNITPART.equals(mpAttributeInfo.get(DomainConstants.SELECT_TYPE))) {
                        String strDesignedForReuse = mpAttributeInfo.get(pgPDFViewConstants.SELECT_ATTRIBUTE_PGDESIGNEDFORRESUSE);
                        //Added by DSM(Sogeti)-2018x.6 June CW 2022 for PDF Views (Req-43133 ) - Starts
                        String strLableRemovability = mpAttributeInfo.get(pgPDFViewConstants.SELECT_ATTRIBUTE_PGLABELREMOVABILITY);
                        //Added by DSM(Sogeti)-2018x.6 June CW 2022 for PDF Views (Req-43133 ) - Ends
                        sbAttributesInfo.append("<TR>");
                        sbAttributesInfo.append("<TD align='left' width=\"250px\"><B>Designed for Re-Use</B></TD>");
                        sbAttributesInfo.append("<TD align='left' width=\"250px\">" + validateString1(strDesignedForReuse) + "</TD>");
                        sbAttributesInfo.append("<TD align='left' width=\"250px\"><B>Integrated Lid (Glass Bottle only)</B></TD>");
                        sbAttributesInfo.append("<TD align='left' width=\"250px\">" + validateString1(strIntegratedLid) + "</TD>");
                        sbAttributesInfo.append("</TR>");
                        //Added by DSM(Sogeti)-2018x.6 June CW 2022 for PDF Views (Req-43133 ) - Starts
                        sbAttributesInfo.append("<TR>");
                        sbAttributesInfo.append("<TD align='left' width=\"250px\"><B>Label Removability</B></TD>");
                        sbAttributesInfo.append("<TD align='left' colspan='3'>" +checkLessThanGreaterThan(validateString1(strLableRemovability)) + "</TD>");
                        sbAttributesInfo.append("</TR>");
                        //Added by DSM(Sogeti)-2018x.6 June CW 2022 for PDF Views (Req-43133 ) - Ends
                    }
                    else {
                        sbAttributesInfo.append("<TR>");
                        sbAttributesInfo.append("<TD align='left' width=\"250px\"><B>Integrated Lid (Glass Bottle only)</B></TD>");
                        sbAttributesInfo.append("<TD align='left' colspan='3'>" + validateString1(strIntegratedLid) + "</TD>");
                        sbAttributesInfo.append("</TR>");
                    } //Modified by DSM(Sogeti)-2018x.6 Apr CW 2022 for PDF Views (Req-42183 ) - Ends

                    sbAttributesInfo.append("</TABLE></TD></TR>");
                }
            } catch (FrameworkException e) {
                logger.log(Level.WARNING, null, e);
            }
            long endTime = new Date().getTime();
            logger.log(Level.INFO, "Time to execute getSustainabilityInfo method : {0}", endTime - startTime);
        }
        return sbAttributesInfo;
    }
    /**
     * Added by DSM-2018x.6 April CW for PDF Views Req #40098
     * @param context
     * @return
     */
    private String getPersonId(Context context) {
        StringList slSelect = new StringList(DomainConstants.SELECT_ID);
        String strPersonId = DomainConstants.EMPTY_STRING;
        String userName=context.getUser();
        try{

            if(isUserAgentContextPushed(context)) {
                userName = PropertyUtil.getGlobalRPEValue(context, ContextUtil.MX_LOGGED_IN_USER_NAME);
            }
            MapList mlPerson = DomainObject.findObjects(context,DomainConstants.TYPE_PERSON,userName,"-",null,pgV3Constants.VAULT_ESERVICEPRODUCTION,DomainConstants.EMPTY_STRING,false,slSelect);
            int maplistSize = mlPerson.size();
            for(int i=0;i<maplistSize;i++){
                Map<String,String> mpPersonData = (Map)mlPerson.get(i);
                strPersonId = mpPersonData.get(DomainConstants.SELECT_ID);
            }
        }
        catch(Exception e){
            logger.log(Level.WARNING, null, e);
        }
        return strPersonId;
    }
    /**
     * Added by DSM-2018x.6 April CW for PDF Views Req #40098
     * @param context
     * @param userID
     * @return
     */
    private List<String> getUserPlantList(Context context, String userID) {
        DomainObject domPersonObj;
        List<String> list = new StringList();
        StringList slObjSelect = new StringList(DomainConstants.SELECT_NAME);
        try {
            domPersonObj = DomainObject.newInstance(context,userID);
            MapList mlRelatedUserVendors = domPersonObj.getRelatedObjects(context, RELATIONSHIP_MEMBER,TYPE_PLANT , slObjSelect, new StringList(),true,false,(short) 1,null, null, 0);
            list = (List) mlRelatedUserVendors.stream()
                    .filter(map -> ((Hashtable)map).containsKey(DomainConstants.SELECT_NAME))
                    .map(map -> ((Hashtable)map).get(DomainConstants.SELECT_NAME))
                    .collect(Collectors.toList());
        } catch (FrameworkException e) {
            logger.log(Level.WARNING, null, e);
        }
        return list;
    }
    /**
     * Added by DSM-2018x.6 April CW for PDF Views Req #40098
     * @param context
     * @return
     */
    private boolean isUserAgentContextPushed(Context context) {
        return context.getUser().equalsIgnoreCase(pgV3Constants.PERSON_USER_AGENT);
    }

    /**
     *
     * @param context
     * @return
     * @throws MatrixException
     * Added by DSM-2018x.6_Oct CW for PDF Views Req #40098
     */
    private boolean isContractSupplierUser(Context context) throws MatrixException {
        String loggedInUser = PropertyUtil.getGlobalRPEValue(context, ContextUtil.MX_LOGGED_IN_USER_NAME);
        if(context.getUser().equals(loggedInUser)) {
            return  context.isAssigned(pgV3Constants.ROLE_PGCONTRACTSUPPLIER) ;
        } else {
            Person person = new Person(loggedInUser);
            return person.isAssigned(context, pgV3Constants.ROLE_PGCONTRACTSUPPLIER ) ;
        }
    }
    /**
     * Added by (DSM Sogeti) for (2018x.6 Apr CW 2022) - PDF Views Req #41365,41373
     * Method to fetch Supporting documents for Certifications in Packaging Material
     * list page.
     *
     * @param context
     * @param args
     * @return StringList list of Docs connected to Certifications
     * @throws Exception
     */
    public StringList getSupportDocsData(Context context, String[] args) throws Exception {
        StringList slSupportDocs = new StringList();

        boolean bIsContextPushed = false;
        try {
            Map<?, ?> paramMap = (Map) JPO.unpackArgs(args);
            MapList objectList = (MapList) paramMap.get(pgPDFViewConstants.OBJECTLIST);

            Map objectMap = null;
            Map tmpMap = null;
            StringBuilder sbReturnValue = null;
            String strSupportDocName = null;
            String strSupportDocIsLast = null;
            String strRelID = null;
            StringList slSupportDocName = null;
            StringList slSupportDocIsLast = null;
            Iterator<?> itrSupportDocName = null;
            Iterator<?> itrSupportDocIsLast = null;
            Iterator<?> itrSupportDocs = null;

            StringList relSelectList = new StringList(4);
            relSelectList.addElement(pgPDFViewConstants.STR_SEL_CERTIFICATION_DOC_NAME);
            relSelectList.addElement(pgPDFViewConstants.STR_SEL_CERTIFICATION_DOC_ID);
            relSelectList.addElement(pgPDFViewConstants.STR_SEL_CERTIFICATION_DOC_IS_LAST);
            relSelectList.addElement(DomainRelationship.SELECT_ID);

            // EBP users will not have access to all the IRM Documents. So we need to push
            // the context.
            // In the table column program we are checking for the context user access on
            // the IRM Document, if no access then we are disabling the hyperlink.
            if (!isUserAgentContextPushed(context)) {
                ContextUtil.pushContext(context, pgV3Constants.PERSON_USER_AGENT, null, context.getVault().getName());
                bIsContextPushed = true;
            }

            // get list of relationship IDs from a given MapList.
            //Modified by (DSM Sogeti) for (2018x.6 May CW 2022) - PDF Views Req #43020 Starts
            StringList strRelList = getPackagingCertRelIDs(objectList);

            // get required info from all rel IDs into a MapList.
            MapList mlSupportDocs = DomainRelationship.getInfo(context,
                    strRelList.toArray(new String[strRelList.size()]), relSelectList);
            //Modified by (DSM Sogeti) for (2018x.6 May CW 2022) - PDF Views Req #43020 Ends
            if (bIsContextPushed) {
                ContextUtil.popContext(context);
                bIsContextPushed = false;
            }

            // convert MapList to flat Map (Relationship ID as key in Map).
            itrSupportDocs = mlSupportDocs.iterator();
            Map<Object, Object> mRelDocMapping = new HashMap<>();
            while (itrSupportDocs.hasNext()) {
                tmpMap = (Map<Object, Object>) itrSupportDocs.next();
                mRelDocMapping.put(tmpMap.get(DomainRelationship.SELECT_ID), tmpMap);
            }

            // iterate original maplist (objectList) and convert its supporting doc
            // (multiple) as a comma separated string as a list.
            //Added by (DSM Sogeti) for (2018x.6 May CW 2022) - PDF Views Req #43020 Starts
            String relName;
            Iterator<?> mlObjectListItr = objectList.iterator();
            while (mlObjectListItr.hasNext()) {
                objectMap = (Map) mlObjectListItr.next();
                relName = (String) objectMap.get(DomainRelationship.SELECT_NAME);
                strRelID = (String) objectMap.get(DomainConstants.SELECT_RELATIONSHIP_ID);
                if (pgV3Constants.RELATIONSHIP_PG_PLI_PACKAGING_CERTIFICATIONS.equalsIgnoreCase(relName)) {
                    tmpMap = (Map) mRelDocMapping.get(strRelID);
                    slSupportDocName = convertObjectToStringList(tmpMap.get(pgPDFViewConstants.STR_SEL_CERTIFICATION_DOC_NAME));
                    slSupportDocIsLast = convertObjectToStringList(tmpMap.get(pgPDFViewConstants.STR_SEL_CERTIFICATION_DOC_IS_LAST));
                    sbReturnValue = new StringBuilder();
                    if (slSupportDocName != null && !slSupportDocName.isEmpty()) {
                        itrSupportDocName = slSupportDocName.iterator();
                        itrSupportDocIsLast = slSupportDocIsLast.iterator();
                        while (itrSupportDocName.hasNext()) {
                            strSupportDocName = (String) itrSupportDocName.next();
                            strSupportDocIsLast = (String) itrSupportDocIsLast.next();
                            if (pgPDFViewConstants.RANGE_VALUE_TRUE.equalsIgnoreCase(strSupportDocIsLast)
                                    && BusinessUtil.isNotNullOrEmpty(strSupportDocName)) {
                                if (sbReturnValue.length() > 0) {
								sbReturnValue.append(CONSTANT_STRING_COMMA)
											.append(BLANK_SPACE);
                                }
                                sbReturnValue.append(strSupportDocName);
                            }
                        }
                    }
                    if (sbReturnValue.length() > 0) {
                        slSupportDocs.add(sbReturnValue.toString());
                    } else {
                        // in case the iterating object does not have a supporting doc - add empty
                        // string to the list.
                        slSupportDocs.add(DomainConstants.EMPTY_STRING);
                    }
                } else {
                    if (objectMap.containsKey(pgV3Constants.KEY_HAS_DOC)) {
                        if ((Boolean) objectMap.get(pgV3Constants.KEY_HAS_DOC)) {
                            slSupportDocs.addElement((String) objectMap.get(pgV3Constants.KEY_DOC_NAME_WITHOUT_LINK));
                        } else {
                            slSupportDocs.addElement(DomainConstants.EMPTY_STRING);
                        }
                    } else {
                        slSupportDocs.addElement(DomainConstants.EMPTY_STRING);
                    }
                    //Added by (DSM Sogeti) for (2018x.6 May CW 2022) - PDF Views Req #43020 Ends
                }
            }
        } catch (Exception e) {
            logger.log(Level.WARNING, null, e);
        } finally {
            if (bIsContextPushed) {
                ContextUtil.popContext(context);
            }
        }
        return slSupportDocs;
    }
    /**
     * Added by (DSM Sogeti) for (2018x.6 Apr CW 2022) - PDF Views Req #41365,41373
     * This method gets certifications connected to the Packaging objects.
     *
     * @param context
     * @param strObjectId
     * @param strType
     * @return
     */
    public StringBuilder getCertifications(Context context, String strObjectId, String strType) {
        StringBuilder sbCertificationsInfo = new StringBuilder();


        long startTime = new Date().getTime();
        if (UIUtil.isNotNullAndNotEmpty(strObjectId)) {
            try {
                DomainObject domainObject = DomainObject.newInstance(context, strObjectId);

                boolean isValidType = isValidTypesForPackagingCertifications(context, strType, domainObject);
                if( isValidType ) {
                    HashMap argMap = new HashMap();
                    argMap.put(pgPDFViewConstants.CONS_OBJECTID, strObjectId);

                    // get connected certifications.
                    MapList objectList = (MapList) pgPDFViewHelper.executeMainClassMethod(context,"pgDSMMaterialCertificationsUtil", "getPackagingCertificationsList", JPO.packArgs(argMap));
                    // Added by (DSM Sogeti) for (2018x.6 Apr CW 2022) - PDF Views Def #46673 start
                    if (!objectList.isEmpty()) {
                        //Added by (DSM Sogeti) for (2018x.6 Apr CW 2022) - PDF Views Def #46673 End
                        //Added by (DSM Sogeti) for (2018x.6 May CW 2022) - PDF Views Req #43020 Starts
                        getPackagingCertificationRefinedData(objectList);
                        //Added by (DSM Sogeti) for (2018x.6 May CW 2022) - PDF Views Req #43020 End
                        argMap.put(pgPDFViewConstants.CONST_OBJECTLIST, objectList);

                        // get connected supporting documents for each certification object.
                        StringList docList = getSupportDocsData(context, JPO.packArgs(argMap));

                        // get certifications expiration date.
                        final Map<String, Map<Object, Object>> expirationDateInfoList = getCertificationExpirationDate(context,objectList);


                        // get (Intended Packaging Material Certifications) which is a multi-value
                        // attribute.
                        StringList slAttributeValueList = domainObject.getInfoList(context,pgPDFViewConstants.SELECT_ATTR_PG_PACKAGING_MATERIAL_CERTIFICATIONS);
                        String attrIntendedPackagingMatCert = StringUtil.join(slAttributeValueList, ", ");



                        if (pgV3Constants.TYPE_FINISHEDPRODUCTPART.equalsIgnoreCase(strType)) {
                            sbCertificationsInfo.append("<TR><TD><TABLE class=\"WordWrappdf\" cellspacing=\"0\" width=\"1000px\" id=\"DSOCertTbale\">");
                            sbCertificationsInfo.append("<thead><TR><TD colspan='2' class=\"new\" ><font size='4'><b>Packaging Certification<br /></b></font></TD></TR></thead>");
                        } else {
                            sbCertificationsInfo.append("<TR><TD><TABLE class=\"WordWrappdf\" cellspacing=\"0\" width=\"1000px\" id=\"DSOCertTbale\">");
                            sbCertificationsInfo.append("<thead><TR><TD colspan='2' class=\"new\" ><font size='4'><b>Certifications<br /></b></font></TD></TR></thead>");
                            sbCertificationsInfo.append("<TR>");
                            sbCertificationsInfo.append("<TD align=\"left\" colspan='3' ><B><font size ='3'>Intended Packaging Material Certifications</font></B></TD>");
                            sbCertificationsInfo.append("<TD align='left' colspan='4'>" + attrIntendedPackagingMatCert + "</TD>");
                            sbCertificationsInfo.append("</TR>");

                        }
                        sbCertificationsInfo.append("<TR>");
                        sbCertificationsInfo.append("<TD align=\"center\" width=\"111px\" ><B>Name</B></TD>");
                        sbCertificationsInfo.append("<TD align=\"center\" width=\"111px\" ><B>Type</B></TD>");
                        sbCertificationsInfo.append("<TD align=\"center\" width=\"111px\" ><B>Certification Source</B></TD>");
                        sbCertificationsInfo.append("<TD align=\"center\" width=\"111px\" ><B>Certification</B></TD>");
                        sbCertificationsInfo.append("<TD align=\"center\" width=\"111px\" ><B>Expiration Date</B></TD>");
                        sbCertificationsInfo.append("<TD align=\"center\" width=\"111px\" ><B>Support Docs</B></TD>");
                        sbCertificationsInfo.append("<TD align=\"center\" width=\"111px\" ><B>Certification Comments</B></TD>");
                        sbCertificationsInfo.append("</TR>");
                        Map<Object, Object> objectMap;
                        String certName;
                        String expDate;
                        String comments;
                        String docNames;
                        String relID;
                        Map<Object, Object> relMap;
                        for (int i = 0; i < objectList.size(); i++) {
                            objectMap = (Map<Object, Object>) objectList.get(i);
                            docNames = docList.get(i);
                            certName = (String) objectMap.get(DomainConstants.SELECT_NAME);
                            relID = (String) objectMap.get(DomainRelationship.SELECT_ID);
                            relMap = expirationDateInfoList.get(relID);
                            expDate = (String) relMap.get("attribute[Expiration Date]");
                            // Added by (DSM Sogeti) for (2018x.6 Apr CW 2022) - PDF Views Def #46673 start
                            expDate = getMatrixFormattedDate(context,expDate,pgPDFViewConstants.EXP_DATE_FORMAT);
                            comments = (String) relMap.get("attribute[Comments]");

                            sbCertificationsInfo.append("<TR>");
                            sbCertificationsInfo.append("<TD align=\"center\" width=\"111px\" >"+ objectMap.get(pgPDFViewConstants.STR_LABEL_SOURCE_PART_NAME) + "</TD>");
                            sbCertificationsInfo.append("<TD align=\"center\" width=\"111px\" >"+ objectMap.get(pgPDFViewConstants.STR_LABEL_PART_TYPE) + "</TD>");
                            sbCertificationsInfo.append("<TD align=\"center\" width=\"111px\" >"+ objectMap.get(pgPDFViewConstants.STR_LABEL_PART_NAME) + "</TD>");
                            sbCertificationsInfo.append("<TD align=\"center\" width=\"111px\" >" + certName + "</TD>");
                            sbCertificationsInfo.append("<TD align=\"center\" width=\"111px\" >" + expDate + "</TD>");
                            sbCertificationsInfo.append("<TD align=\"center\" width=\"111px\" >" + docNames + "</TD>");
                            sbCertificationsInfo.append("<TD align=\"center\" width=\"111px\" >" + comments + "</TD>");
                            // Added by (DSM Sogeti) for (2018x.6 Apr CW 2022) - PDF Views Def #46673 End
                            sbCertificationsInfo.append("</TR>");
                        }


                        sbCertificationsInfo.append("</TABLE></TD></TR>");
                    }
                }
            } catch (Exception e) {
                logger.log(Level.WARNING, null, e);
            }
            long endTime = new Date().getTime();
            logger.log(Level.INFO, "Time to execute getCertifications method : {0}", endTime - startTime);
        }

        return sbCertificationsInfo;
    }
    //Added by (DSM Sogeti) for (2018x.6 May CW 2022) - PDF Views Req #43020 Starts
    /**
     * @param objectList
     * @return
     */
    public StringList getPackagingCertRelIDs(MapList objectList) {
        StringList relIDs = new StringList();
        Map<Object, Object> objectMap;
        String relName;
        for (int i = 0; i < objectList.size(); i++) {
            objectMap = (Map<Object, Object>) objectList.get(i);
            relName = (String) objectMap.get(DomainRelationship.SELECT_NAME);
            if (pgV3Constants.RELATIONSHIP_PG_PLI_PACKAGING_CERTIFICATIONS.equalsIgnoreCase(relName)) {
                relIDs.add((String) objectMap.get(DomainRelationship.SELECT_ID));
            }
        }
        return relIDs;
    }
    /**
     * @param objectList
     */
    public void getPackagingCertificationRefinedData(MapList objectList) {
        Map<String, String> mappingKeys = new HashMap<>();
        mappingKeys.put(pgV3Constants.KEY_SOURCE_WITHOUT_LINK, pgPDFViewConstants.STR_LABEL_SOURCE_PART_NAME);
        mappingKeys.put(pgV3Constants.KEY_SOURCE_TYPE, pgPDFViewConstants.STR_LABEL_PART_TYPE);
        mappingKeys.put(pgV3Constants.KEY_SOURCE_NAME_WITHOUT_LINK, pgPDFViewConstants.STR_LABEL_PART_NAME);
        final Set<Map.Entry<String, String>> entries = mappingKeys.entrySet();
        Map<Object, Object> objectMap;
        String relName;
        String key;
        final String relPkgCertRollup = pgV3Constants.RELATIONSHIP_ROLLED_UP_PACKAGING_MATERIAL_CERTIFICATIONS;
        for (int i = 0; i < objectList.size(); i++) {
            objectMap = (Map<Object, Object>) objectList.get(i);
            relName = (String) objectMap.get(DomainRelationship.SELECT_NAME);
            if (relPkgCertRollup.equalsIgnoreCase(relName)) {
                for (Map.Entry<String, String> entry : entries) {
                    key = entry.getKey();
                    if (objectMap.containsKey(key)) {
                        objectMap.put(entry.getValue(), objectMap.get(key));
                    }
                }
            }
        }
    }  //Added by (DSM Sogeti) for (2018x.6 May CW 2022) - PDF Views Req #43020 End
    /**
     * Added by (DSM Sogeti) for (2018x.6 Apr CW 2022) - PDF Views Def #46673 start
     * @param context
     * @param expDate
     * @param dateformat
     * @return
     * @throws ParseException
     */
    private String getMatrixFormattedDate(Context context, String expDate, String dateformat) throws ParseException {
    	logger.log(Level.INFO,"\n****OK: ==== START :: getMatrixFormattedDate() Successfully Executed ==== \n\n\t****");
    	logger.log(Level.INFO,"expDate", expDate);
    	logger.log(Level.INFO,"dateformat", dateformat);
    	String sFormattedExpDate=DomainConstants.EMPTY_STRING;
    	if(UIUtil.isNotNullAndNotEmpty(expDate)) {
    		try {
				java.text.SimpleDateFormat sdf = new java.text.SimpleDateFormat(eMatrixDateFormat.getEMatrixDateFormat(), context.getLocale());
				final Date expirationDate = sdf.parse(expDate);
				java.text.SimpleDateFormat requireSdf = new java.text.SimpleDateFormat(dateformat);
				sFormattedExpDate = requireSdf.format(expirationDate);
			} catch (ParseException e) {
				logger.log(Level.WARNING, "Exception in method getMatrixFormattedDate() ", e);
			}
    	}
    	logger.log(Level.INFO,"sFormattedExpDate", sFormattedExpDate);
    	logger.log(Level.INFO,"\n****OK: ==== END :: getMatrixFormattedDate() Successfully Executed ==== \n\n\t****");
    	return sFormattedExpDate;
    }
    /**
     * Added by (DSM Sogeti) for (2018x.6 Apr CW 2022) - PDF Views Req #41365,41373
     * @param context
     * @param strType
     * @param domainObject
     * @throws FrameworkException
     */
    private boolean  isValidTypesForPackagingCertifications(Context context, String strType, DomainObject domainObject)
            throws FrameworkException {
        StringList pqrSelectable = new StringList(2);
        pqrSelectable.add(DomainConstants.SELECT_POLICY);
        //Added by DSM(Sogeti)-2022x.5 for PDF Views (Req-48452) - Starts
        pqrSelectable.add("attribute["+pgV3Constants.ATTRIBUTE_PGASSEMBLYTYPE+"]");
        Map <?, ?> mPartInfo= domainObject.getInfo(context, pqrSelectable);
        String policy = (String)mPartInfo.get(DomainConstants.SELECT_POLICY);
        String strAssemblyType = (String)mPartInfo.get("attribute["+pgV3Constants.ATTRIBUTE_PGASSEMBLYTYPE+"]");
        //Added by DSM(Sogeti)-2022x.5 for PDF Views (Req-48452) - Ends
        boolean isPolicyMEPOrSEP = pgV3Constants.POLICY_MANUFACTUREREQUIVALENT.equalsIgnoreCase(policy)
                || pgV3Constants.POLICY_SUPPLIEREQUIVALENT.equalsIgnoreCase(policy);
        boolean isTypePAPandPMP =pgV3Constants.TYPE_PACKAGINGASSEMBLYPART.equalsIgnoreCase(strType)
                || pgV3Constants.TYPE_PACKAGINGMATERIALPART.equalsIgnoreCase(strType);
        //Modified by DSM(Sogeti)-2018x.6,2022x.5 for PDF Views (Req-43022,48452) - Starts
        boolean isValidTypes = isTypePAPandPMP || pgV3Constants.TYPE_PGCONSUMERUNITPART.equalsIgnoreCase(strType) || pgV3Constants.TYPE_FABRICATEDPART.equalsIgnoreCase(strType) || (pgV3Constants.TYPE_RAWMATERIALPART.equalsIgnoreCase(strType) && "Packaging".equalsIgnoreCase(strAssemblyType));
        //Modified by DSM(Sogeti)-2018x.6,2022x.5 for PDF Views (Req-43022,48452) - Ends
        return  (isPolicyMEPOrSEP ? isTypePAPandPMP : isValidTypes);
    }
    /**
     * Added by (DSM Sogeti) for (2018x.6 Apr CW 2022) - PDF Views Req #41365,41373
     *
     * @param context
     * @param objectList
     * @return
     * @throws FrameworkException
     */
    public Map<String, Map<Object, Object>> getCertificationExpirationDate(Context context, MapList objectList)
            throws FrameworkException {
        Map<String, Map<Object, Object>> retMap = new HashMap<>();
        // get list of relationship IDs from a given MapList.
        StringList relOiDList = BusinessUtil.toStringList(objectList, DomainRelationship.SELECT_ID);

        StringList relSelectList = StringList.create(pgPDFViewConstants.SELECT_ATTR_EXPIRATION_DATE,
                pgPDFViewConstants.SELECT_ATTR_COMMENTS,
                DomainRelationship.SELECT_ID);

        MapList mlCertificationsExpirationDate = DomainRelationship.getInfo(context, relOiDList.toArray(new String[objectList.size()]), relSelectList);
        final Iterator iterator = mlCertificationsExpirationDate.iterator();
        Map<Object, Object> tempMap;
        while (iterator.hasNext()) {
            tempMap = (Map<Object, Object>) iterator.next();
            retMap.put((String) tempMap.get(DomainRelationship.SELECT_ID), tempMap);
        }
        return retMap;
    }

    /**
     * Modified by DSM(Sogeti)-2018x.6 May CW 2022 for PDF Views (Req-42227) - Starts
     * @param context
     * @param strObjectId
     * @return
     * @throws Exception
     */
    private StringBuilder getPackagingCertificationsData(Context context, String strObjectId) throws Exception {
        StringBuilder sPackagingCertificationData = new StringBuilder();
        try {
            if(validateString(strObjectId)) {
                Map<String, String> programMap  = new HashMap<>();
                programMap.put("objectId", strObjectId);
                String[] args=JPO.packArgs(programMap);
                JPO.unpackArgs(args);
                MapList mlPackagingCertData=(MapList)pgPDFViewHelper.executeMainClassMethod(context, "pgFPPRollup", "getPackagingCertData",args );

                if(mlPackagingCertData!=null && !mlPackagingCertData.isEmpty()) {
                    sPackagingCertificationData.append("<TR><TD><TABLE class=\"WordWrappdf\" cellspacing=\"0\" width=\"1000px\" id=\"DSOPackagingCertifications\">");
                    sPackagingCertificationData.append("<thead>");
                    sPackagingCertificationData.append("<TR><TD class=\"new\" colspan='5'><font size='4'><b>Packaging Certification</b></font></TD></TR>");
                    sPackagingCertificationData.append("</thead>");
                    sPackagingCertificationData.append("<tbody>");

                    sPackagingCertificationData.append("<TR>");
                    sPackagingCertificationData.append("<TD align='left' width=\"200px\"><B>Name</B></TD>");
                    sPackagingCertificationData.append("<TD align='left' width=\"400px\"><B>Type</B></TD>");
                    sPackagingCertificationData.append("<TD align='left' width=\"400px\"><B>Title</B></TD>");
                    sPackagingCertificationData.append("<TD align='left' width=\"400px\"><B>Relationship Type</B></TD>");
                    sPackagingCertificationData.append("<TD align='left' width=\"400px\"><B>Certification Source</B></TD>");
                    sPackagingCertificationData.append("<TD align='left' width=\"400px\"><B>Certification</B></TD>");
                    sPackagingCertificationData.append("<TD align='left' width=\"400px\"><B>Expiration Date</B></TD>");
                    sPackagingCertificationData.append("<TD align='left' width=\"400px\"><B>Support Docs</B></TD>");
                    sPackagingCertificationData.append("<TD align='left' width=\"400px\"><B>Certification Comments</B></TD>");
                    sPackagingCertificationData.append("</TR>");
                    int imlPackagingCertData = mlPackagingCertData.size();

                    SimpleDateFormat formatter = new SimpleDateFormat(pgPDFViewConstants.PACKAGING_CERTIFICATION_DATE_FORMAT);
                    for (int i = 0; i < imlPackagingCertData; i++) {
                        Map mPackagingCertData = (Map) mlPackagingCertData.get(i);
                        String sDate = validateString1(convertObjectToString(mPackagingCertData.get(pgPDFViewConstants.SELECT_ATTR_EXPIRATION_DATE)));
                        if(UIUtil.isNotNullAndNotEmpty(sDate)) {
                            Date date = new Date(sDate);
                            sDate = formatter.format(date);
                        }
                        sPackagingCertificationData.append("<TR>");
                        sPackagingCertificationData.append("<TD align='left' width=\"400px\">" + validateString1(convertObjectToString(mPackagingCertData.get(pgV3Constants.KEY_SOURCE_WITHOUT_LINK))) + "</TD>");
                        sPackagingCertificationData.append("<TD align='left' width=\"400px\">" + validateString1(wrapCharTable(convertObjectToString(mPackagingCertData.get(pgPDFViewConstants.STR_LABEL_SOURCETYPE)),10)) + "</TD>");
                        sPackagingCertificationData.append("<TD align='left' width=\"400px\">" + validateString1(wrapCharTable(convertObjectToString(mPackagingCertData.get(pgPDFViewConstants.STR_LABEL_SOURCETITLE)),10)) + "</TD>");
                        sPackagingCertificationData.append("<TD align='left' width=\"200px\">" + validateString1(wrapCharTable(convertObjectToString(mPackagingCertData.get(pgPDFViewConstants.SELECT_ATTRIBUTE_PGROLLUPSOURCERELTYPE)),10)) + "</TD>");
                        sPackagingCertificationData.append("<TD align='left' width=\"400px\">" + validateString1(wrapCharTable(convertObjectToString(mPackagingCertData.get(pgPDFViewConstants.STR_LABEL_SOURCENAMEWITHOUTLINK)),10)) + "</TD>");
                        sPackagingCertificationData.append("<TD align='left' width=\"400px\">" + validateString1(wrapCharTable(convertObjectToString(mPackagingCertData.get(pgPDFViewConstants.STR_LABEL_CERTNAMEWITHOUTLINK)),10)) + "</TD>");
                        sPackagingCertificationData.append("<TD align='left' width=\"200px\">" + validateString1(sDate)  + "</TD>");
                        sPackagingCertificationData.append("<TD align='left' width=\"400px\">" + validateString1(wrapCharTable(convertObjectToString(mPackagingCertData.get(pgPDFViewConstants.STR_LABEL_DOCNAMEWITHOUTLINK)),10)) + "</TD>");
                        sPackagingCertificationData.append("<TD align='left' width=\"400px\">" + validateString1(wrapCharTable(convertObjectToString(mPackagingCertData.get(pgPDFViewConstants.STR_LABEL_CERTCOMMENTS)),10)) + "</TD>");
                        sPackagingCertificationData.append("</TR>");
                    }
                    sPackagingCertificationData.append("</tbody>");
                    sPackagingCertificationData.append("</TABLE><TR><TD><br /></TD></TR></TD></TR>");
                }
            }
        }catch (Exception e) {
            logger.log(Level.WARNING, null, e);
        }
        return sPackagingCertificationData;
    }
    //Modified by DSM(Sogeti)-2018x.6 May CW 2022 for PDF Views (Req-42227) - Ends
	
	/**
     * Added by (DSM-Sogeti) for 22x.02 Defect - 52113
     *
     * @param object
     * @return
     */
    public StringList cleanUpHTMLTags(Object object) {
        StringList cleanedList = new StringList();
        StringList dataList = new StringList();
        if (object != null) {
            if (object instanceof StringList) {
                dataList = (StringList) object;
                if (null != dataList && !dataList.isEmpty()) {
                    for (String data : dataList) {
                        if (UIUtil.isNotNullAndNotEmpty(data)) {
                            data = data.replaceAll("<[/]?br>", ""); // replace <br> and </br> with ""
                            data = data.replaceAll("<[/]?br/>", ""); // replace <br/> with ""
                        }
                        cleanedList.add(data);
                    }
                }
            } else if (object instanceof String) {
                String data = object.toString();
                if (UIUtil.isNotNullAndNotEmpty(data)) {
	                data = data.replaceAll("<[/]?br>", ""); // replace <br> and </br> with ""
	                data = data.replaceAll("<[/]?br/>", ""); // replace <br/> with ""
                }
                cleanedList.add(data);
            }
        }
        return cleanedList;
    }
	
	//Added by DSM (Infosys) 2022x.4 for Defect 53327 - EBP users able to access F-Process in CM view PDF when 'Authorize to Use' is Yes - Starts
	/**
     * This method will return true if any of the Plant isAuthorizedToProduce is true
     * @param context
     * @param args
     * @return
     * @throws Exception
     */
    private boolean isAuthorizedToViewFormulationProcAndSubs(Context context,DomainObject domObjectId) throws Exception {
    	String strLoggedInUser 		 = PropertyUtil.getGlobalRPEValue(context, ContextUtil.MX_LOGGED_IN_USER_NAME);
        boolean isAutorizedtoDisplay = false;
        boolean isMemberOfPlant      = false;
        Iterator iteratorPlant 		 = null;
        Map<?,?> mapPlantData	 	 = null;
        String strAuthToProduce      = null;
        String strPlantId 		     = null;
        String strPersonId 		     = PersonUtil.getPersonObjectID(context, strLoggedInUser);
		String strSelectPGIsAuthToProduce = "attribute["+pgV3Constants.ATTRIBUTE_PGISAUTHORIZEDTOPRODUCE+"]";
		
		StringList slObjectSelects = new StringList(1);
		slObjectSelects.add(DomainConstants.SELECT_ID);

        StringList slRelSelects = new StringList(1);
        slRelSelects.add(strSelectPGIsAuthToProduce);
       
        MapList mlPlantData = domObjectId.getRelatedObjects(context,//Context of the User
			            		pgV3Constants.RELATIONSHIP_MANUFACTURINGRESPONSIBILITY,  //Relationship Pattern
			            		pgV3Constants.TYPE_PLANT, //Type Pattern
			            		slObjectSelects, //Business Object Selectables
			            		slRelSelects, //Relationship Selectables
			            		true, //Get To Side
			            		false, //Get From Side
			            		(short) 1, //Expand Level
			            		null, //Bus where 
			            		null, //Rel where 
			            		(short) 0);   //Objects Limit
        
        if(mlPlantData != null && !mlPlantData.isEmpty()) {
            iteratorPlant = mlPlantData.iterator();
            while (iteratorPlant.hasNext()) {
                mapPlantData 	  = (Map<?,?>) iteratorPlant.next();
                strPlantId 		  = (String) mapPlantData.get(DomainConstants.SELECT_ID);
                isMemberOfPlant   = DomainObject.multiLevelRecursionCheck(context, strPersonId, strPlantId, pgV3Constants.RELATIONSHIP_MEMBER, false);
                strAuthToProduce  = (String) mapPlantData.get(strSelectPGIsAuthToProduce);
                
                if(pgV3Constants.CAPS_TRUE.equals(strAuthToProduce) && isMemberOfPlant){
                    isAutorizedtoDisplay = true; 
                    break;
                }
            }
        }
        return isAutorizedtoDisplay;
    }
  //Added by DSM (Infosys) 2022x.4 for Defect 53327 - EBP users able to access F-Process in CM view PDF when 'Authorize to Use' is Yes - Ends

//Added by DSM (Sogeti) for 22x.04 (Dec CW 2023) Defect 55289 - Start   
    
    /**
     * This method will return Structured ATS Characteristics information
     * @param context
     * @param strType
     * @param strConnectionId
     * @return
     * @throws Exception
     */
    private Map getATSContextFormulaCharDetails(Context context,String strType, String strConnectionId) throws Exception {
    	Map mpATSCharDetails = null;

    	if(strType.equals(pgV3Constants.TYPE_STRUCTURED_ATS)) {
    		StringList slRelSelects = new StringList();
    		slRelSelects.add("frommid["+pgPDFViewConstants.RELATIONSHIP_PGATSCONTEXT+"].attribute["+pgPDFViewConstants.ATTRIBUTE_PGSTRUCTUREATSACTION+"]");
    		slRelSelects.add("frommid["+pgPDFViewConstants.RELATIONSHIP_PGATSCONTEXT+"].to.to["+pgV3Constants.RELATIONSHIP_CHARACTERISTIC+"].from.name");
    		slRelSelects.add("frommid["+pgPDFViewConstants.RELATIONSHIP_PGATSCONTEXT+"].to.to["+pgV3Constants.RELATIONSHIP_CHARACTERISTIC+"].to.id");
    		//Modified by DSM (Sogeti) for 22x.04 (Dec CW 2023) Defect 55877 - Starts
    		slRelSelects.add("attribute["+pgPDFViewConstants.ATTRIBUTE_PGSATSCONTEXT_ID+"]");
    		//Modified by DSM (Sogeti) for 22x.04 (Dec CW 2023) Defect 55877 - Ends
    		
    		String[] strRelIdArray = new String[1];
    		strRelIdArray[0] = strConnectionId;
    		MapList mlATSConnectionAttrList = DomainRelationship.getInfo(context, strRelIdArray, slRelSelects);
    		if(!mlATSConnectionAttrList.isEmpty()) {
    			mpATSCharDetails = (Map) mlATSConnectionAttrList.get(0);
    		}
    	}
    	return mpATSCharDetails;
    }
   //Added by DSM (Sogeti) for 22x.04 (Dec CW 2023) Defect 55289 - Ends
    
    
  //Added by DSM (Sogeti) for 22x.04 (Dec CW 2023) Defect 55638 - Starts
    
    /**
     * This Method will give all Structured ATS replacement EBOM and Substitutes ids till level 2
     * @param context
     * @param StrType
     * @param strObjectId
     * @return
     */
    private MapList getATSBOMandSubstituteData(Context context, String StrType, String strObjectId) {

    	MapList mlATSEBOMandSubsDetails = new MapList();
    	MapList mlFinalATSEBOMandSubsDetails = new MapList();
    	try {
    		//Modified by DSM (Sogeti) for 22x.04 (Dec CW 2023) Defect 56132 - Starts
    		String strTypePattern = pgV3Constants.TYPE_RAWMATERIALPART+ ","+ pgV3Constants.TYPE_PARENTSUB + "," +pgV3Constants.TYPE_FORMULATIONPART;
    		//Modified by DSM (Sogeti) for 22x.04 (Dec CW 2023) Defect 56132 - Ends
    		
    		StringList SL_OBJECT_INFO_SELECT = getObjectSelects();
    		StringList SL_RELATION_INFO_SELECT = getRelationshipSelects();
    		String objectWhere = DomainObject.SELECT_CURRENT + " != " + DomainConstants.STATE_PART_OBSOLETE;
    		DomainObject dobSATSobj = DomainObject.newInstance(context,strObjectId);

    		if ((pgV3Constants.TYPE_STRUCTURED_ATS.equalsIgnoreCase(StrType))) {
    			mlATSEBOMandSubsDetails = dobSATSobj.getRelatedObjects(context,
    					pgV3Constants.RELATIONSHIP_PGATSOPERATION,    // relationship pattern
    					strTypePattern,								 // Type pattern
    					SL_OBJECT_INFO_SELECT,                // object selects
    					SL_RELATION_INFO_SELECT,            // rel selects
    					false,                                // to side
    					true,                                // from side
    					(short) 2,                            // recursion level
    					objectWhere,                        // object where clause
    					null, 0);     

    		}

    	}catch (Exception e) {
    		logger.log(Level.WARNING, null, e);
    	}
    	return mlATSEBOMandSubsDetails;
    }
    private StringList getObjectSelects() {
    	StringList slSelectable = new StringList(5);
    	try {
    		slSelectable.add(DomainConstants.SELECT_ID);
    		slSelectable.add(DomainConstants.SELECT_TYPE);
    		slSelectable.add(DomainConstants.SELECT_NAME);
    		slSelectable.add(DomainConstants.SELECT_REVISION);
    		slSelectable.add(DomainConstants.SELECT_CURRENT);
    		slSelectable.add(pgV3Constants.SELECT_ATTRIBUTE_TITLE);
    		slSelectable.add(DomainConstants.SELECT_LEVEL);
    	} catch (Exception e) {
    		logger.log(Level.WARNING, null, e);
    	}

    	return slSelectable;
    }
    private StringList getRelationshipSelects() {
    	StringList slRelAttributeSelectable = new StringList(1);
    	try {

    		slRelAttributeSelectable.add("frommid["+pgPDFViewConstants.RELATIONSHIP_PGATSCONTEXT+"].attribute["+pgPDFViewConstants.ATTRIBUTE_PGSTRUCTUREATSACTION+"].value");
    		slRelAttributeSelectable.add("from.to["+pgV3Constants.RELATIONSHIP_PGATSOPERATION+"].frommid["+pgPDFViewConstants.RELATIONSHIP_PGATSCONTEXT+"].attribute["+pgPDFViewConstants.ATTRIBUTE_PGSTRUCTUREATSACTION+"].value");
    		slRelAttributeSelectable.add(pgV3Constants.SELECT_ATTRIBUTE_MINACTUAL_PERCENTWET);
    		slRelAttributeSelectable.add(pgV3Constants.SELECT_ATTRIBUTE_QUANTITY);
    		slRelAttributeSelectable.add(pgV3Constants.SELECT_ATTRIBUTE_MAXACTUALPERCENTWET);
    		slRelAttributeSelectable.add(pgV3Constants.SELECT_ATTRIBUTE_TARGETWETWEIGHT);
    		slRelAttributeSelectable.add(pgV3Constants.SELECT_ATTRIBUTE_PGMINIMUMACTUALWEIGHTWET);
    		slRelAttributeSelectable.add(pgV3Constants.SELECT_ATTRIBUTE_PGMAXIMUMACTUALWEIGHTWET);
    		slRelAttributeSelectable.add(pgV3Constants.SELECT_ATTRIBUTE_TOTAL);
    		slRelAttributeSelectable.add(pgV3Constants.SELECT_ATTRIBUTE_TARGETWEIGHTDRY);
    		slRelAttributeSelectable.add(pgV3Constants.SELECT_ATTRIBUTE_LOSS);
    		slRelAttributeSelectable.add(pgV3Constants.SELECT_ATTRIBUTE_PROCESSINGNOTE);

    		//RM Primary Formula Name,Rev(APP)
    		slRelAttributeSelectable.add("frommid["+pgPDFViewConstants.RELATIONSHIP_PGATSCONTEXT+"].torel.from."+DomainConstants.SELECT_NAME+"");
    		slRelAttributeSelectable.add("frommid["+pgPDFViewConstants.RELATIONSHIP_PGATSCONTEXT+"].torel.from."+DomainConstants.SELECT_REVISION+"");

    		//RM Substitute Formula Name,Rev(APP Substitute)
    		slRelAttributeSelectable.add("frommid["+pgPDFViewConstants.RELATIONSHIP_PGATSCONTEXT+"].torel.fromrel.from."+DomainConstants.SELECT_NAME+"");
    		slRelAttributeSelectable.add("frommid["+pgPDFViewConstants.RELATIONSHIP_PGATSCONTEXT+"].torel.fromrel.from."+DomainConstants.SELECT_REVISION+"");

    		//RM Substitute Formula(APP) Primary part, Primary & Substitute Quantity
    		slRelAttributeSelectable.add("frommid["+pgPDFViewConstants.RELATIONSHIP_PGATSCONTEXT+"].torel.fromrel.to."+DomainConstants.SELECT_NAME+"");
    		slRelAttributeSelectable.add("frommid["+pgPDFViewConstants.RELATIONSHIP_PGATSCONTEXT+"].torel."+pgV3Constants.SELECT_ATTRIBUTE_QUANTITY+"");
    		slRelAttributeSelectable.add("frommid["+pgPDFViewConstants.RELATIONSHIP_PGATSCONTEXT+"].torel.fromrel."+pgV3Constants.SELECT_ATTRIBUTE_QUANTITY+"");

    		//RM FBOM Formula(FOP)
    		slRelAttributeSelectable.add("from.to["+pgV3Constants.RELATIONSHIP_PGATSOPERATION+"].frommid["+pgPDFViewConstants.RELATIONSHIP_PGATSCONTEXT+"].torel.from.to["+pgV3Constants.RELATIONSHIP_PLBOM+"].from.to["+pgV3Constants.RELATIONSHIP_PLANNEDFOR+"].from."+DomainConstants.SELECT_NAME+"");
    		slRelAttributeSelectable.add("from.to["+pgV3Constants.RELATIONSHIP_PGATSOPERATION+"].frommid["+pgPDFViewConstants.RELATIONSHIP_PGATSCONTEXT+"].torel.from.to["+pgV3Constants.RELATIONSHIP_PLBOM+"].from.to["+pgV3Constants.RELATIONSHIP_PLANNEDFOR+"].from."+DomainConstants.SELECT_REVISION+"");

    		//RM FBOM Substitute Formula Name,Rev(FOP)
    		slRelAttributeSelectable.add("from.to["+pgV3Constants.RELATIONSHIP_PGATSOPERATION+"].frommid["+pgPDFViewConstants.RELATIONSHIP_PGATSCONTEXT+"].to.to["+pgV3Constants.RELATIONSHIP_PLBOMSUBSTITUTE+"].fromrel.from.to["+pgV3Constants.RELATIONSHIP_PLBOM+"].from.to["+pgV3Constants.RELATIONSHIP_PLANNEDFOR+"].from."+DomainConstants.SELECT_NAME+"");
    		slRelAttributeSelectable.add("from.to["+pgV3Constants.RELATIONSHIP_PGATSOPERATION+"].frommid["+pgPDFViewConstants.RELATIONSHIP_PGATSCONTEXT+"].to.to["+pgV3Constants.RELATIONSHIP_PLBOMSUBSTITUTE+"].fromrel.from.to["+pgV3Constants.RELATIONSHIP_PLBOM+"].from.to["+pgV3Constants.RELATIONSHIP_PLANNEDFOR+"].from."+DomainConstants.SELECT_REVISION+"");

    		//RM Primary Formula Name,Rev(FOP Substitute)
    		slRelAttributeSelectable.add("from.to["+pgV3Constants.RELATIONSHIP_PGATSOPERATION+"].frommid["+pgPDFViewConstants.RELATIONSHIP_PGATSCONTEXT+"].to.to["+pgV3Constants.RELATIONSHIP_PLBOMSUBSTITUTE+"].fromrel.to."+DomainConstants.SELECT_NAME+"");
    		slRelAttributeSelectable.add("from.to["+pgV3Constants.RELATIONSHIP_PGATSOPERATION+"].frommid["+pgPDFViewConstants.RELATIONSHIP_PGATSCONTEXT+"].to.to["+pgV3Constants.RELATIONSHIP_PLBOMSUBSTITUTE+"]."+pgV3Constants.SELECT_ATTRIBUTE_QUANTITY_ADJUSTMENT+"");
    		slRelAttributeSelectable.add("from.to["+pgV3Constants.RELATIONSHIP_PGATSOPERATION+"].frommid["+pgPDFViewConstants.RELATIONSHIP_PGATSCONTEXT+"].to.from["+pgV3Constants.RELATIONSHIP_PLBOM+"]."+pgV3Constants.SELECT_ATTRIBUTE_QUANTITY+"");

    	} catch (Exception e) {
    		logger.log(Level.WARNING, null, e);

    	}
    	return slRelAttributeSelectable;
    }

    /**
     * This method will return ATS FBOM replacement substitute quantity 
     * @param context
     * @param iReplacedSubQty
     * @param slReplaceSusbQty
     * @return
     */
    private String getReplacedSubstituteQuantity(Context context, int iReplacedSubQty, StringList slReplaceSusbQty) {

    	String strReplacedSubsQty = DomainConstants.EMPTY_STRING;
    	try {

    		if(!slReplaceSusbQty.isEmpty() && slReplaceSusbQty.size()>0) {

    			//To get last element from list
    			strReplacedSubsQty = slReplaceSusbQty.get(slReplaceSusbQty.size()-1);

    			//To get previous elments and skips last element
    			if(iReplacedSubQty>0 && slReplaceSusbQty.size()>iReplacedSubQty) {
    				strReplacedSubsQty = slReplaceSusbQty.get(slReplaceSusbQty.size()- (iReplacedSubQty+1));
    			}
    		}
    	} catch (Exception e) {
    		logger.log(Level.WARNING, null, e);
    	}
    	return strReplacedSubsQty;
    }
    /**
     * Method to get the StringList from object
     * @param objInputValue
     * @return
     */
    public StringList getStringListFromObject(Object objInputValue) {
    	StringList slObjValuesList = null;
    	if(objInputValue == null) {
    		return slObjValuesList;
    	} else {
    		if(objInputValue instanceof StringList) {
    			slObjValuesList = (StringList)objInputValue;
    		} else {
    			String strObjValue = (String)objInputValue;
    			slObjValuesList = StringUtil.split(strObjValue, SelectConstants.cSelectDelimiter);
    		}
    	}
    	return slObjValuesList;
    }
  //Added by DSM (Sogeti) for 22x.04 (Dec CW 2023) Defect 55638 - Ends
    
  //Added by DSM (Sogeti) for 22x.05 (April CW 2024) Defect 56153 - Starts
    /**
     * This method will return ATS characteristics context formula sorted list 
     * @param context
     * @param mlPerfChar
     * @return
     */
    public MapList getATSCharacteristicsSortedlist(Context context, MapList mlPerfChar) {
    	
    	//Context Formula for modify & delete ATS Operation
    	String strContextFormulaName = "frommid["+pgPDFViewConstants.RELATIONSHIP_PGATSCONTEXT+"].to.to["+pgV3Constants.RELATIONSHIP_CHARACTERISTIC+"].from.name";
    	//Context Formula Id for Add Operation
    	String strContextFormulaId = "attribute["+pgPDFViewConstants.ATTRIBUTE_PGSATSCONTEXT_ID+"]";
    	String strAddOperationATSId = DomainConstants.EMPTY_STRING;
    	
    	try {
    		Iterator objIt = mlPerfChar.iterator();
    		while (objIt.hasNext()) {
    			Map mapATSChar = (Map) objIt.next();
    			Object objATSContext=mapATSChar.get(strContextFormulaName);
    			
    			if(objATSContext==null) {
    				strAddOperationATSId = (String) mapATSChar.get(strContextFormulaId);
    				if(UIUtil.isNotNullAndNotEmpty(strAddOperationATSId)) {
    					objATSContext = getATSContextFormulaName(context,strAddOperationATSId);
        				mapATSChar.put(strContextFormulaName,objATSContext);
    				}
    			}
    			if (objATSContext instanceof StringList) {
    				StringList slAttrVal = (StringList) objATSContext;
    				mapATSChar.put(strContextFormulaName, slAttrVal.get(0));

    			}
    		}
    		mlPerfChar.sort(strContextFormulaName, "ascending", "String");
    	}
    	catch(Exception e) {
    		logger.log(Level.WARNING, null, e);
    	}
    	
    	return mlPerfChar;
    }
    /**
     * This method will return ATS Context formula name for Add Operation
     * @param context
     * @param strAddOperationATSId
     * @return
     * @throws Exception
     */
	public Object getATSContextFormulaName(Context context, String strAddOperationATSId) throws Exception {
		
		DomainObject domSATSFomulaId = DomainObject.newInstance(context,strAddOperationATSId);
		Object objATSContext = domSATSFomulaId.getInfo(context,DomainConstants.SELECT_NAME);
		
		return objATSContext;
	}
	
	//Added by DSM (Sogeti) for 22x.05 (April CW 2024) Defect 56153 - Ends
	//Added by DSM-2022x.5 for PDF Views (Req:48198) : Starts
	public StringBuilder getPackagingComponentType(Context context, String strObjectId) 
	{
		StringBuilder sbPackagingComponentTypeRow = new StringBuilder();
        long startTime = new Date().getTime();
        if (UIUtil.isNotNullAndNotEmpty(strObjectId)) {
            try {
            	StringList slPkgComponentTypeRowValues = new StringList(3);
            	slPkgComponentTypeRowValues.add("attribute["+pgV3Constants.ATTRIBUTE_PGASSEMBLYTYPE+"]");
            	slPkgComponentTypeRowValues.add("attribute["+pgV3Constants.ATTRIBUTE_PGPACKAGINGCOMPONENTTYPE+"]");
            	slPkgComponentTypeRowValues.add("attribute["+pgV3Constants.ATTRIBUTE_PGSHIPPINGINSTRUCTIONS+"]");
                DomainObject domainObject = DomainObject.newInstance(context, strObjectId);
                Map <?, ?> mPartInfo = domainObject.getInfo(context, slPkgComponentTypeRowValues);
                String strAssemblyType = (String)mPartInfo.get("attribute["+pgV3Constants.ATTRIBUTE_PGASSEMBLYTYPE+"]");
                String strPkgComponentType = (String)mPartInfo.get("attribute["+pgV3Constants.ATTRIBUTE_PGPACKAGINGCOMPONENTTYPE+"]");
                String strShippingInfo = (String)mPartInfo.get("attribute["+pgV3Constants.ATTRIBUTE_PGSHIPPINGINSTRUCTIONS+"]");
			
                if("Packaging".equalsIgnoreCase(strAssemblyType)) {        
	                sbPackagingComponentTypeRow.append("<TD valign='top' width='195px'><B>Shipping Information</B></TD><TD width='300px' valign='bottom'>");
	                sbPackagingComponentTypeRow.append(strShippingInfo);
	                sbPackagingComponentTypeRow.append("</TD>");
	                sbPackagingComponentTypeRow.append("<TD valign='top' width='195px'><B>Packaging Component Type</B></TD><TD width='300px' valign='bottom'>");
                	sbPackagingComponentTypeRow.append(strPkgComponentType);
                    sbPackagingComponentTypeRow.append("</TD>");
                }
                else {                    
	                sbPackagingComponentTypeRow.append("<TD valign='top' width='195px'><B>Shipping Information</B></TD><TD colspan ='3'>");
	                sbPackagingComponentTypeRow.append(strShippingInfo);
	                sbPackagingComponentTypeRow.append("</TD>");
                }

            } catch (Exception e) {
            	logger.log(Level.WARNING, null, e);
            }
            long endTime = new Date().getTime();
            logger.log(Level.INFO, "Time to execute getPackagingComponentType method : {0}", endTime - startTime);
        }
        return sbPackagingComponentTypeRow;
	}
	//Added by DSM-2022x.5 for PDF Views (Req:48198) : Ends
	
	//Added DSM-2022x.5 for for PDF Views for Requirement-$49482 - Start
	 /** Gets the Consumer Design Basis  values.
     * @param strObjectID
     * @param typePattern
     * @author V2 */
    public MapList getRelatedObjectDetails(Context context, String strObjectID,String strRelationship,String strType,StringList BusSelect,StringList RelSelect) throws Exception{
    	logger.log(Level.INFO, "\n****OK: ==== START :: getRelatedObjectDetails() Successfully Executed ==== \n\n\t****");
    	logger.log(Level.INFO, "strObjectID ", strObjectID);
    	logger.log(Level.INFO, "strRelationship ", strRelationship);
    	logger.log(Level.INFO, "strType ", strType);
    	MapList objList = new MapList();
        DomainObject dObject = null;
        try{
            dObject = DomainObject.newInstance(context, strObjectID);
        	objList = dObject.getRelatedObjects(
                    context, //context
                    strRelationship, //relPattern
                    strType, //typePattern
                    BusSelect, //objectSelects
                    RelSelect, //relationshipSelects
                    Boolean.FALSE, //getTo
                    Boolean.TRUE, //getFrom
                    (short) 1, 					 //recurseToLevel
                    DomainConstants.EMPTY_STRING, 	//objectWhere
                    DomainConstants.EMPTY_STRING, 	//relationshipWhere
                    0);
        	}catch(Exception e){
              logger.log(Level.WARNING, "Exception in Method getRelatedObjectDetails ", e);
        }  
        logger.log(Level.INFO, "\n****OK: ==== END :: getRelatedObjectDetails() Successfully Executed ==== \n\n\t****");
        return objList;
    }
	
	/**
    *
    * @param context - matrix Context
    * @param Map  - Attribute map
    * @return String - String of table data
    * @since DSM 2022x.5
    */
   private StringBuilder getIngredientTransparency(Context context,String strObjectId, String strType) {
       long startTime = new Date().getTime();
       StringBuilder sbIngredientTransparency = new StringBuilder();
     //Added by DSM-2022x.6 for PDF Views (Defect-57272) - Start
       String strPhysicalId = DomainConstants.EMPTY_STRING;
       String strPartName= DomainConstants.EMPTY_STRING;
        String strSmlId = DomainConstants.EMPTY_STRING;
        String strCountryName= DomainConstants.EMPTY_STRING;
     //Added by DSM-2022x.6 for PDF Views (Defect-57272) - End
       MapList mlObjects = null;
       DomainObject dObjectIT = null;
       MapList mlRelatedObjects = null;
       try {
           // String RelID = DomainConstants.EMPTY_STRING; 
           // String strName = DomainConstants.EMPTY_STRING;
           StringList busSelect1 = new StringList(); 
           busSelect1.add(DomainConstants.SELECT_ID);
           StringList busSelectRow = new StringList(); 
           busSelectRow.add(pgV3Constants.SELECT_ATTRIBUTE_LANGUAGE);
           busSelectRow.add(pgV3Constants.SELECT_ATTRIBUTE_TITLE);
           busSelectRow.add(pgV3Constants.SELECT_ATTRIBUTE_CAS_NUMBER);
           busSelectRow.add(DomainConstants.SELECT_ID);
           StringList relSelect = new StringList(1);
           relSelect.add(pgV3Constants.SELECT_ATTRIBUTE_PG_PRODUCT_PART_PHYSICALID);
           StringList relSelectROW = new StringList(5);
           relSelectROW.add(pgV3Constants.SELECT_ATTRIBUTE_PG_SEQUENCE_NUMBER);
           relSelectROW.add(pgV3Constants.SELECT_ATTRIBUTE_PG_AICN);
           relSelectROW.add(pgV3Constants.SELECT_ATTRIBUTE_PG_ADJTARGET);
           relSelectROW.add(pgV3Constants.SELECT_ATTRIBUTE_PG_PERFUME_ALLERGENS);
           relSelectROW.add(pgV3Constants.SELECT_ATTRIBUTE_PG_IS_PERFUME_CHILD);
           relSelectROW.add(pgV3Constants.SELECT_ATTRIBUTE_CASB258_LIST_OF_NON_FUNCTIONAL_CONSTITUENTS);
           relSelectROW.add(pgV3Constants.SELECT_ATTRIBUTE_CASB25822_DESIGNATED_REGULATION_NAME);
           relSelectROW.add(pgV3Constants.SELECT_ATTRIBUTE_CASB25822_DESIGNATED_LISTS);
           String sType=pgV3Constants.TYPE_PGSMARTLABEL;
           String strRel=pgV3Constants.RELATIONSHIP_PGSMARTLABEL;
           //Added DSM-2022x.5 for for PDF Views for Requirement-$49483 - Start
           if(pgV3Constants.TYPE_ASSEMBLEDPRODUCTPART.equals(strType) || pgV3Constants.TYPE_DEVICEPRODUCTPART.equals(strType) || pgV3Constants.TYPE_FORMULATIONPART.equals(strType)) {   
	           mlObjects= getRelatedObjectDetails(context,strObjectId,strRel,sType,busSelect1,null);     	           
           } else if(pgV3Constants.TYPE_FINISHEDPRODUCTPART.equals(strType)) {
               strRel=pgV3Constants.RELATIONSHIP_PGROLLEDUPSMARTLABEL;
               mlObjects= getRelatedObjectDetails(context,strObjectId,strRel,sType,busSelect1,relSelect);   
           }
		   //Added DSM-2022x.5 for for PDF Views for Requirement-$49483 - End
            //Added DSM-2022x.6 for for PDF Views for (Defect-57272) - Start
           int mpSize = mlObjects.size();
           for(int i = 0; i<mpSize; i++) {
        	   if(!mlObjects.isEmpty() && null !=mlObjects ){
        		   Map<String, String> mpConnectedData = (Map<String, String>) mlObjects.get(i);
        		   strPhysicalId= mpConnectedData.get(pgV3Constants.SELECT_ATTRIBUTE_PG_PRODUCT_PART_PHYSICALID);
				   Map<String, String> connectedData = (Map<String, String>) mlObjects.get(i);
         		   strSmlId =mpConnectedData.get(DomainConstants.SELECT_ID);
        		   if(strPhysicalId != null && !strPhysicalId.isEmpty() && strSmlId != null && !strSmlId.isEmpty()) {
					   DomainObject domPart = DomainObject.newInstance(context, strPhysicalId);
					   strPartName = domPart.getInfo(context,DomainConstants.SELECT_NAME);
					   connectedData.put("PartName", strPartName);
 					   
 					   DomainObject Object = DomainObject.newInstance(context, strSmlId);
 					   strCountryName = Object.getInfo(context, pgV3Constants.SELECT_RELATIONSHIP_PGSMARTLABELCOUNTRY);			
 					   connectedData.put("CountryName", strCountryName);
        		   }else if(strSmlId != null && !strSmlId.isEmpty()) {
         			   DomainObject Object = DomainObject.newInstance(context, strSmlId);
					   strCountryName = Object.getInfo(context, pgV3Constants.SELECT_RELATIONSHIP_PGSMARTLABELCOUNTRY);			
					   connectedData.put("CountryName", strCountryName);
				   }					   
			   }
		   } 
            mlObjects.sort("CountryName", "ascending", "string");
            mlObjects.sort("PartName", "ascending", "string");
            //Added DSM-2022x.6 for for PDF Views for (Defect-57272) - End
		    sbIngredientTransparency=getIngredientTransparencyTable(context,mlObjects,busSelectRow,relSelectROW,strType);
		   } catch (Exception e) {
			   logger.log(Level.WARNING, null, e);
	   }
       long endTime = new Date().getTime();
       logger.log(Level.INFO,"Total Time has taken by the getIngredientTransparency Method is--> {0}",(endTime-startTime));
       return sbIngredientTransparency;
   }
   

	/**
   *
   * @param context - matrix Context
   * @param MapList : Object List.
   * @param StringList : Bus Selects.
   * @param StringList : RelSelects.
   * @param String : type
   * @return StringBuilder
   * @since DSM 2022x.5
   */
   private StringBuilder getIngredientTransparencyTable(Context context, MapList mlObjects, StringList busSelectRow, StringList relSelectROW,String strType)throws Exception {
	   long startTime = new Date().getTime();
	   MapList mlRelatedObjects = null;
	   StringBuilder sbIngredientTransparency = new StringBuilder();
	   String strRolledPartName = DomainConstants.EMPTY_STRING;

	   MapList mlIngredientFunc = new MapList();
	   StringList busSelect = new StringList(2); 
	   busSelect.add(DomainConstants.SELECT_ID);
	   busSelect.add(DomainConstants.SELECT_NAME);
	   StringList relSelect = new StringList(1);
	   relSelect.add(pgV3Constants.SELECT_ATTRIBUTE_PG_CONSUMER_FRIENDLY_DESCRIPTION);
	   //Added DSM-2022x.6 for for PDF Views for (Defect-57272) - Start
	   StringList slProdNames = new StringList();
	   //Added DSM-2022x.6 for for PDF Views for (Defect-57272) - End
	   if(null != mlObjects && mlObjects.size() > 0){
		   // Table
		   sbIngredientTransparency = getIngredientHTMLTable(strType);
		   for(int a=0; a<mlObjects.size();a++) {
			   Map<String, String> mpConnectedData = (Map<String, String>) mlObjects.get(a);
			   //Modified DSM-2022x.6 for for PDF Views for (Defect-57272) - Start
			   String strSMLID =mpConnectedData.get(DomainConstants.SELECT_ID);
			   String sType=pgV3Constants.TYPE_PGSMARTLABELROW;
			   String Rel = pgV3Constants.RELATIONSHIP_PGSMARTLABELROW;
			   String strCountryName = mpConnectedData.get("CountryName");
			   //Added DSM-2022x.5 for for PDF Views for Requirement-$49483 - Start
			   if(pgV3Constants.TYPE_FINISHEDPRODUCTPART.equals(strType)) {
				   // String sPhysicalid= mpConnectedData.get(pgV3Constants.SELECT_ATTRIBUTE_PG_PRODUCT_PART_PHYSICALID);
				   // DomainObject dobj = DomainObject.newInstance(context, sPhysicalid);
				   //strRolledPartName = dobj.getInfo(context,DomainConstants.SELECT_NAME);
				   strRolledPartName = mpConnectedData.get("PartName");
				   //Modified DSM-2022x.6 for for PDF Views for (Defect-57272) - End   
			   }
			   //Added DSM-2022x.5 for for PDF Views for Requirement-$49483 - End
			   mlRelatedObjects=getRelatedObjectDetails(context,strSMLID,Rel,sType,busSelectRow,relSelectROW);
			   //DomainObject Object = DomainObject.newInstance(context, strRELID);
			   //String strCountryName = Object.getInfo(context, pgV3Constants.SELECT_RELATIONSHIP_PGSMARTLABELCOUNTRY);
			   //Added DSM-2022x.6 for for PDF Views for (Defect-57272) - Start			
			   if (strCountryName==null){
				   strCountryName="";				   
			   }
			   slProdNames.add(strRolledPartName);
			   if (slProdNames.subList(0, slProdNames.size() - 1).contains(strRolledPartName)) {
                   strRolledPartName="ProductPartName_Repeated";
               }
			   addIngredientDetails(sbIngredientTransparency, strCountryName,strRolledPartName,strType);
			   //Added DSM-2022x.6 for for PDF Views for (Defect-57272) - End
			   for(int b=0;b<mlRelatedObjects.size();b++) {
				   try {
					   Map<String, String> mpRowConnectedData = (Map<String, String>)mlRelatedObjects.get(b);
					   String sObjectID = mpRowConnectedData.get(DomainConstants.SELECT_ID);
					   Rel = pgV3Constants.RELATIONSHIP_PGINGREDIENTFUNCTION;
					   String sChildType= pgV3Constants.TYPE_PGPLIINGRDIENTFUNCTION;
					   mlIngredientFunc = getRelatedObjectDetails(context,sObjectID,Rel,sChildType,busSelect,relSelect);
					   String strTitle =mpRowConnectedData.get(pgV3Constants.SELECT_ATTRIBUTE_TITLE);
					   String strLanguage =mpRowConnectedData.get(pgV3Constants.SELECT_ATTRIBUTE_LANGUAGE);
					   String strPerfumeChild=mpRowConnectedData.get(pgV3Constants.SELECT_ATTRIBUTE_PG_IS_PERFUME_CHILD);
					   String strActiveIngredient = mpRowConnectedData.get(pgV3Constants.SELECT_ATTRIBUTE_PG_AICN);
					   String strSequence = mpRowConnectedData.get(pgV3Constants.SELECT_ATTRIBUTE_PG_SEQUENCE_NUMBER);
					   String strPerAdjTarget = mpRowConnectedData.get(pgV3Constants.SELECT_ATTRIBUTE_PG_ADJTARGET);
					   String strCAS = mpRowConnectedData.get(pgV3Constants.SELECT_ATTRIBUTE_CAS_NUMBER); 
					   String strNonFunConstituents = mpRowConnectedData.get(pgV3Constants.SELECT_ATTRIBUTE_CASB258_LIST_OF_NON_FUNCTIONAL_CONSTITUENTS);
					   String strDesignatedRegulationName = mpRowConnectedData.get(pgV3Constants.SELECT_ATTRIBUTE_CASB25822_DESIGNATED_REGULATION_NAME);
					   String strDesignatedList = mpRowConnectedData.get(pgV3Constants.SELECT_ATTRIBUTE_CASB25822_DESIGNATED_LISTS);
					   String strPerfumeAllergens = mpRowConnectedData.get(pgV3Constants.SELECT_ATTRIBUTE_PG_PERFUME_ALLERGENS);

					   sbIngredientTransparency.append("<TR align=\"center\" class=\"pdf\">");
					   //Added DSM-2022x.5 for for PDF Views for Requirement-$49483 - Start
					   if(pgV3Constants.TYPE_FINISHEDPRODUCTPART.equals(strType)) {
						   sbIngredientTransparency.append("<TD  width=\"77\" align=\"center\"></TD>");
					   }
					   //Added DSM-2022x.5 for for PDF Views for Requirement-$49483 - End
					   sbIngredientTransparency.append("<TD  width=\"71\" align=\"center\">"+strTitle+"</TD>");
					   sbIngredientTransparency.append("<TD  width=\"71\" align=\"center\">"+strLanguage+"</TD>");
					   sbIngredientTransparency.append("<TD  width=\"71\" align=\"center\">"+strPerfumeChild+"</TD>");
					   sbIngredientTransparency.append("<TD  width=\"71\" align=\"center\">"+strActiveIngredient+"</TD>");
					   sbIngredientTransparency.append("<TD  width=\"71\" align=\"center\">"+strSequence+"</TD>");
					   sbIngredientTransparency.append("<TD  width=\"71\" align=\"center\">"+strPerAdjTarget+"</TD>");
					   sbIngredientTransparency.append("<TD  width=\"71\" align=\"center\">"+strCAS+"</TD>");
					   sbIngredientTransparency.append("<TD  width=\"71\" align=\"center\">"+strNonFunConstituents+"</TD>");
					   sbIngredientTransparency.append("<TD  width=\"71\" align=\"center\">"+strDesignatedRegulationName+"</TD>");
					   sbIngredientTransparency.append("<TD  width=\"71\" align=\"center\">"+strDesignatedList+"</TD>");
					   sbIngredientTransparency.append("<TD  width=\"71\" align=\"center\">"+strPerfumeAllergens+"</TD>");
					   sbIngredientTransparency.append("<TD  width=\"71\" align=\"center\"><TABLE>");
					 
					   if(null != mlIngredientFunc && mlIngredientFunc.size() > 0) {
						   for(int c=0;c<mlIngredientFunc.size();c++) {
							   Map<String, String> mpIngredientFunc = (Map<String, String>)mlIngredientFunc.get(c);
							   String strIngredientName = mpIngredientFunc.get(DomainConstants.SELECT_NAME);
							   String strDescription = mpIngredientFunc.get(pgV3Constants.SELECT_ATTRIBUTE_PG_CONSUMER_FRIENDLY_DESCRIPTION);
							   sbIngredientTransparency.append("<TR><TD width=\"71\" align=\"center\">"+strIngredientName+"</TD><TD width=\"71\" align=\"center\">"+strDescription+"</TD></TR>");
						   }
					   }
					   sbIngredientTransparency.append("</TABLE></TD></TR>");
				   } catch (Exception e) {
					   logger.log(Level.WARNING, null, e);
				   }
			   }
		   }
		   sbIngredientTransparency.append("</TABLE><TR><TD><br/></TD></TR>");
		   sbIngredientTransparency.append("</TD></TR>");
	   }
	   long endTime = new Date().getTime();
	   logger.log(Level.INFO,"Total Time has taken by the getIngredientTransparency Method is--> {0}",(endTime-startTime));
	   return sbIngredientTransparency;
   }
   
   /**
   *
   * @param context - matrix Context
   * @param String  : Name.
   * @param String  : RolledPartName.
   * @param String  : Type.
   * @return StringBuilder
   * @since DSM 2022x.5
   */
  private void addIngredientDetails(StringBuilder sbIngredientTransparency, String strCountryName,String strRolledPartName,String strType)throws Exception {
	  sbIngredientTransparency.append("<TR align=\"center\" class=\"pdf\">");
	  //Added DSM-2022x.5 for for PDF Views for Requirement-$49483 - Start
	  //Added DSM-2022x.5 for for PDF Views for Defect-57235 - Start
	  //Modified DSM-2022x.6 for for PDF Views for (Defect-57272) - Start
	  if(pgV3Constants.TYPE_FINISHEDPRODUCTPART.equals(strType)) {
		  if(strRolledPartName.contains("ProductPartName_Repeated")) {
	    	  sbIngredientTransparency.append("<TD  width=\"77\" align=\"left\">"+strCountryName+"<BR/>"+"</TD>");
	    	  sbIngredientTransparency.append("<TD  width=\"77\" align=\"left\"><B></B></TD>");
		  } else {
	    	  sbIngredientTransparency.append("<TD  width=\"77\" align=\"left\">"+strRolledPartName+"<BR/>"+strCountryName+"</TD>");          
	    	  sbIngredientTransparency.append("<TD  width=\"77\" align=\"left\"><B></B></TD>");
	      }	  
	  } 
	  //Modified DSM-2022x.6 for for PDF Views for (Defect-57272) - End
	  else if(pgV3Constants.TYPE_ASSEMBLEDPRODUCTPART.equals(strType) || pgV3Constants.TYPE_DEVICEPRODUCTPART.equals(strType) || pgV3Constants.TYPE_FORMULATIONPART.equals(strType)) {
		  sbIngredientTransparency.append("<TD  width=\"77\" align=\"left\">"+strCountryName+"</TD>");
	  }
	  //Added DSM-2022x.5 for for PDF Views for Defect-57235 - End
	  //Added DSM-2022x.5 for for PDF Views for Requirement-$49483 - End
	  sbIngredientTransparency.append("<TD  width=\"71\" align=\"left\"><B></B></TD>");
	  sbIngredientTransparency.append("<TD  width=\"71\" align=\"left\"><B></B></TD>");
	  sbIngredientTransparency.append("<TD  width=\"71\" align=\"left\"><B></B></TD>");
	  sbIngredientTransparency.append("<TD  width=\"71\" align=\"left\"><B></B></TD>");
	  sbIngredientTransparency.append("<TD  width=\"71\" align=\"left\"><B></B></TD>");
	  sbIngredientTransparency.append("<TD  width=\"71\" align=\"left\"><B></B></TD>");
	  sbIngredientTransparency.append("<TD  width=\"71\" align=\"left\"><B></B></TD>");
	  sbIngredientTransparency.append("<TD  width=\"71\" align=\"left\"><B></B></TD>");
	  sbIngredientTransparency.append("<TD  width=\"71\" align=\"left\"><B></B></TD>");
	  sbIngredientTransparency.append("<TD  width=\"71\" align=\"left\"><B></B></TD>");
	  sbIngredientTransparency.append("<TD  width=\"71\" align=\"left\"><B></B></TD>");
	  sbIngredientTransparency.append("</TR>");
  }
  
  /**
  *
  * @param context - matrix Context
  * @param String  : Type.
  * @return StringBuilder
  * @since DSM 2022x.5
  */
  private StringBuilder getIngredientHTMLTable(String strType) throws Exception {
	  StringBuilder sbIngredientTransparency = new StringBuilder();
	  sbIngredientTransparency.append("<TR><TD>");
	  sbIngredientTransparency.append("<TABLE class=\"WordWrappdf\" cellspacing=\"0\" width=\"1000px\" id=\"pgFormulatedProductTable\">");
	  sbIngredientTransparency.append("<thead>");
	  //Header
	  sbIngredientTransparency.append("<TR><TD class=\"new\" colspan=\"14\" ><font size='4'><b>Ingredient Transparency<br /></b></font></TD></TR>");
	  sbIngredientTransparency.append("<TR align=\"top\">");
	  //Added DSM-2022x.5 for for PDF Views for Requirement-$49483 - Start
	  if(pgV3Constants.TYPE_FINISHEDPRODUCTPART.equals(strType)) {
		  //Added DSM-2022x.5 for for PDF Views for Defect-$56965 - Start
		  sbIngredientTransparency.append("<TD  width=\"77\" align=\"center\"><B>Product<BR/>Part<BR/>Name</B></TD>");
		  //Added DSM-2022x.5 for for PDF Views for Defect-$56965 - End

	  }
	  //Added DSM-2022x.5 for for PDF Views for Requirement-$49483 - End
	  sbIngredientTransparency.append("<TD  width=\"71\" align=\"center\"><B>Ingredient</B></TD>");
	  sbIngredientTransparency.append("<TD  width=\"71\" align=\"center\"><B>Language</B></TD>");
	  sbIngredientTransparency.append("<TD  width=\"71\" align=\"center\"><B>Is<BR/> Perfume Child</B></TD>");
	  sbIngredientTransparency.append("<TD  width=\"71\" align=\"center\"><B>Active<BR/> Ingredient<BR/>Flag</B></TD>");
	  sbIngredientTransparency.append("<TD  width=\"71\" align=\"center\"><B>Sequence</B></TD>");
	  sbIngredientTransparency.append("<TD  width=\"71\" align=\"center\"><B>Percentage</B></TD>");
	  sbIngredientTransparency.append("<TD  width=\"71\" align=\"center\"><B>CAS#</B></TD>");
	  sbIngredientTransparency.append("<TD  width=\"71\" align=\"center\"><B>CA<BR/>SB258<BR/>List of<BR/>Nonfunctional<BR/>Constituents</B></TD>");
	  sbIngredientTransparency.append("<TD  width=\"71\" align=\"center\"><B>CA<BR/>SB258<BR/>22<BR/>Designated<BR/>Regulation<BR/>Name</B></TD>");
	  sbIngredientTransparency.append("<TD  width=\"71\" align=\"center\"><B>On<BR/>CA SB258<BR/>22<BR/>Designated<BR/>Lists</B></TD>");
	  sbIngredientTransparency.append("<TD  width=\"71\" align=\"center\"><B>Perfume<BR/>Allergens</B></TD>");
	  sbIngredientTransparency.append("<TD  width=\"71\" align=\"center\"><B>Ingredient<BR/>Function/<BR/>Consumer<BR/>Friendly<BR/>Description</B></TD>");
	  sbIngredientTransparency.append("</TR></thead>");
	  return sbIngredientTransparency;
  }
  //Added DSM-2022x.5 for for PDF Views for Requirement-$49482 - END
  
  	//Added by DSM (Infosys) 2022x.06 for Defect-55080 : All Info view PDF does not load when ‘GPS Comments’ Column of ‘Market Clearance’ tab has special characters  - Starts

      public static String addSpace(String strReplace) throws Exception {
        String strReplaced = new String();
        if(UIUtil.isNotNullAndNotEmpty(strReplace)) {
                strReplaced=strReplace.replaceAll("<"," <");
				strReplaced=strReplaced.replaceAll(">"," >");
                strReplaced=strReplaced.toString();
        }
		return strReplaced;
    }
	//Added by DSM (Infosys) 2022x.06 for Defect-55080 : All Info view PDF does not load when ‘GPS Comments’ Column of ‘Market Clearance’ tab has special characters  - Ends
}

