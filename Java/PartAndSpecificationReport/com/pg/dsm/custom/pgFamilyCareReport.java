package com.pg.dsm.custom;
/*   ${CLASSNAME}.java -
     Author:DSM L4
     Copyright (c) 2018
     All Rights Reserved.
 */
import java.util.HashMap;
import java.util.HashSet;

import matrix.db.BusinessObject;
import matrix.db.Context;
import matrix.db.JPO;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileOutputStream;
import java.io.FileReader;
import java.io.IOException;
import java.io.PrintWriter;
import java.util.Hashtable;
import java.util.Iterator;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Properties;
import java.util.Set;
import java.util.StringTokenizer;
import java.util.Vector;
import java.util.Map.Entry;
import java.util.ArrayList;
import java.util.Date;
//Added for defect 44448 Starts
import java.text.DecimalFormat;
//Added for defect 44448 Starts
import java.text.SimpleDateFormat;
import matrix.util.MatrixException;
import matrix.util.Pattern;
import matrix.util.StringList;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.FillPatternType;
import org.apache.poi.ss.usermodel.IndexedColors;
import org.apache.poi.ss.util.CellRangeAddress;
import org.apache.poi.xssf.usermodel.XSSFCellStyle;
import org.apache.poi.xssf.usermodel.XSSFFont;
import org.apache.poi.xssf.usermodel.XSSFRow;
import org.apache.poi.xssf.usermodel.XSSFSheet;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import com.dassault_systemes.enovia.changeaction.factory.ChangeActionFactory;
import com.dassault_systemes.enovia.changeaction.interfaces.IChangeAction;
import com.dassault_systemes.enovia.changeaction.interfaces.IChangeActionServices;
import com.dassault_systemes.enovia.changeaction.interfaces.IOperation;
import com.dassault_systemes.enovia.changeaction.interfaces.IRealizedChange;
import com.dassault_systemes.enovia.enterprisechangemgt.common.ChangeAction;
import com.dassault_systemes.enovia.formulation.custom.enumeration.FormulationRelationship;
import com.dassault_systemes.enovia.formulation.custom.enumeration.FormulationType;
import com.dassault_systemes.enovia.formulation.custom.virtualintermediates.model.VirtualIntermediate;
import com.dassault_systemes.enovia.formulation.enumeration.FormulationAttribute;
import com.matrixone.apps.awl.util.AWLUtil;
import com.matrixone.apps.common.CommonDocument;
import com.matrixone.apps.cpn.CPNCommonConstants;
import com.matrixone.apps.cpn.enumeration.CPNRelationship;
import com.matrixone.apps.cpn.util.CPNUIUtil;
import com.matrixone.apps.domain.DomainConstants;
import com.matrixone.apps.domain.DomainAccess;
import com.matrixone.apps.domain.DomainObject;
import com.matrixone.apps.domain.DomainRelationship;
import com.matrixone.apps.domain.util.BackgroundProcess;
import com.matrixone.apps.domain.util.ContextUtil;
import com.matrixone.apps.domain.util.EnoviaResourceBundle;
import com.matrixone.apps.domain.util.FrameworkException;
import com.matrixone.apps.domain.util.FrameworkUtil;
import com.matrixone.apps.domain.util.MapList;
import com.matrixone.apps.domain.util.MqlUtil;
import com.matrixone.apps.domain.util.PersonUtil;
import com.matrixone.apps.domain.util.PropertyUtil;
import com.matrixone.apps.domain.util.XSSUtil;
import com.matrixone.apps.domain.util.i18nNow;
import com.matrixone.apps.framework.ui.UIUtil;
import com.pg.v3.custom.pgV3Constants;
import matrix.db.Person;
//Added code for 39692 Starts
import matrix.db.SelectConstants;
//Added code for 39692 Ends
//Added code for Requirement Id:29012-The report shall include new tab For FOP-Formula Ingredient-Starts
import matrix.db.Access;
//Added code for Requirement Id:29012-The report shall include new tab For FOP-Formula Ingredient-Ends
//Added for Defect : 31814 Starts
import com.dassault_systemes.enovia.apps.materialcomposition.util.MATCUtil;
import com.dassault_systemes.enovia.apps.materialcomposition.enumeration.MATCSchema;
//Added for Defect : 31814 Ends
//added for REq Id:33634-starts
import org.apache.poi.ss.usermodel.Font;
//added for REq Id:33634-Ends
import org.apache.poi.xssf.usermodel.XSSFHyperlink;
import org.apache.poi.common.usermodel.HyperlinkType;
import org.apache.poi.ss.usermodel.CreationHelper;
import org.apache.poi.hssf.util.HSSFColor;

//Added for Requirement -- 34942--starts
import com.matrixone.apps.domain.util.StringUtil;
import java.math.BigDecimal;
//Added for Requirement -- 34942  --ends
//Added for Defect - 32736--starts
import com.matrixone.apps.cpn.util.BusinessUtil;
//Added for Defect - 32736--ends
//Added for requirement 40223 Starts
import com.dassault_systemes.enovia.characteristic.impl.CharacteristicServices;
import com.dassault_systemes.enovia.characteristic.interfaces.ENOCharacteristicFactory;
import com.dassault_systemes.enovia.characteristic.interfaces.ENOICharacteristic;
import com.dassault_systemes.enovia.characteristic.interfaces.ENOICharacteristicsUtil;
import com.dassault_systemes.enovia.characteristic.util.CharacteristicMasterConstants;
//Added for requirement 40223 Ends

// Platform Security 2022x Upgrade : Start
import com.matrixone.apps.exportcontrol.ExportControlConstants;
// Platform Security 2022x Upgrade : End
//Added for Req 41655:18x6 Apr CW -- Starts
import com.matrixone.apps.domain.util.eMatrixDateFormat;
//Added for Req 41655:18x6 Apr CW -- Ends

public class pgFamilyCareReport implements DomainConstants {
	

public pgFamilyCareReport(Context context, String[] args) {
		
}
/**Method used to generate XLS reports

 * @param context

 * @param args

 */
private static final String VAULT_ESERVICEPRODUCTION = pgV3Constants.VAULT_ESERVICEPRODUCTION;
private StringList SL_OBJECT_WEIGHT_SELECT = getObjectSelectsTablesWeight();
private StringList SL_REL_WEIGHT_SELECT = getRelSelectsTablesWeight();
private StringList SL_OBJECT_WEIGHT_PARENT_SELECT = getObjectSelectsTablesWeightParent();
private StringList slObjectPlantSelect = getObjectSelectsPlants();	
private StringList SL_OBJECT_COMMONINFO_SELECT = getObjectCommonSelects();
//Modified for Requirement 45505,45511,45517: 22x 01 CW -- Starts
private StringList SL_OBJECT_ATTRIBUTE_SELECT = getObjectSelectsAttribute();
//Modified for Requirement 45505,45511,45517: 22x 01 CW -- Ends
//Modified for Requirement -- 34942--starts
private StringList SL_OBJECT_SUBSMATERIALS_SELECT = getObjectSelectsSubMaterials();
private static final String STRINPUTVALUE = ".inputvalue";

private static final String STRFINALCOMMONCOLUMNS = "CommonColumns";

private static final String STRFINALCHILDTYPE = "ChildType";
private static final String STRFINALLEVEL = "level";

private static final String STRFINALQUANTITY = "Quantity";
private static final String STRFINALQUANTITYUNITOFMEASURE = "QuantityUnitOfMeasure";
private static final String STRFINALMINIMUMWEIGHT = "Minimum Weight";
private static final String STRFINALMAXIMUMWEIGHT = "Maximum Weight";
private static final String STRFINALCOMMENT = "Comment";

private static final String STRFINALCHILDTITLE = "ChildTitle";
private static final String STRFINALCHILDREVISION = "ChildRevision"; //Added by DSM Reports (Sogeti) for 2022x.6 --- Defect#57760
private static final String STRFINALPARTFAMILYNAME = "PartFamilyName";
private static final String STRFINALENVCLASS = "EnvClass";
private static final String STRFROMSTART ="from[";
private static final String STRTONAME ="].to.name";
private static final String STRFROM = "].from.";
private static final String ISPARENT = "isParent";
private static final String STRCONSUMERCYCLATE = "ConsumerRecyclate";
private static final String STRINDUSTRIALCYCLATE = "IndustrialRecyclate";
private static final String INDUSTRIALCYCLATEATTRIBUTESELECT = "attribute_PercentPostIndustrialRecyclate";
private static final String COMMA = ",";
//Modified for Requirement -- 34942--ends
//Added for Requirement -- 35336--starts
private static final String PGHASARTATTRIBUTESELECT = "attribute_pgHasArt";
//Added for Requirement -- 35336--starts
private StringList SL_OBJECT_PEERREVIEW_SELECT = getObjectSelectsPeerReview();
private StringList slObjectApproveSelect = getObjectSelectsForApprove();
private StringList SL_OBJECT_BOM_SELECT = getObjectSelectsBOM();
private StringList SL_OBJECT_BOM_PARENT_SELECT = getObjectSelectsBOMParent();
private StringList SL_REL_BOM_SELECT = getRelSelectsBOM();
private StringList SL_OBJECT_TM_SELECT = getObjectSelectsTM();
private StringList SL_REL_COMPEQU_SELECT = getRelSelectsCompEqu();
private StringList SL_OBJECT_COMPONENTEQUIVALENT_SELECT = getComponentEquivalentSelects();
		
public static Properties props = new Properties();
// Removed the static keyword, as it is merging user report data on 04-02-2019-- Starts
MapList mlPlantList	= new MapList();
MapList mlWeightAndDimList= new MapList();

MapList charObjList = new MapList();
MapList mlParentChildWeightEachPart = new MapList();
MapList mlParentChildBOMEachPart = new MapList();
MapList mlParentChildEBOMWDEachPart = new MapList();
// Removed the static keyword, as it is merging user report data on 04-02-2019 -- Ends
// For Performance Characteristic --Begin
private static final String ATTRIBUTE_SHAREDTABLECHARACTERISTICSEQUENCE = PropertyUtil.getSchemaProperty("attribute_SharedTableCharacteristicSequence");				
private static final String ATTR_PG_CHANGE = PropertyUtil.getSchemaProperty("attribute_pgChange");
private static final String SELECT_ATTRIBUTE_SHAREDTABLECHARACTERISTICSEQUENCE = (new StringBuilder()).append("attribute[").append(ATTRIBUTE_SHAREDTABLECHARACTERISTICSEQUENCE).append("]").toString();
private static final String ATTR_PG_CHARACTERISTIC = PropertyUtil.getSchemaProperty("attribute_pgCharacteristic"); 
private static final String ATTR_PG_CHARACTERISTIC_SPECIFIC = PropertyUtil.getSchemaProperty("attribute_pgCharacteristicSpecifics"); 
private static final String ATTR_PG_TM_LOGIC = PropertyUtil.getSchemaProperty("attribute_pgTMLogic"); 
private static final String ATTR_PG_METHOD_ORIGIN = PropertyUtil.getSchemaProperty("attribute_pgMethodOrigin"); 
private static final String ATTR_PG_METHOD_NUMBER = PropertyUtil.getSchemaProperty("attribute_pgMethodNumber"); 
private static final String ATTR_PG_METHOD_SPECIFICS = PropertyUtil.getSchemaProperty("attribute_pgMethodSpecifics"); 
private static final String ATTR_PG_SAMPLING = PropertyUtil.getSchemaProperty("attribute_pgSampling"); 
private static final String TYPE_PART = PropertyUtil.getSchemaProperty("type_Part");
private static final String TYPE_PG_IMP_DOCUMENT = PropertyUtil.getSchemaProperty("type_pgDSMReport");
private static final String ATTR_PG_SUB_GROUP = PropertyUtil.getSchemaProperty("attribute_pgSubGroup"); 
private static final String ATTR_PG_PLANT_RETESTING = PropertyUtil.getSchemaProperty("attribute_pgPlantTestingRetesting"); 
private static final String ATTR_PG_PLANT_TESTING = PropertyUtil.getSchemaProperty("attribute_pgPlantTesting"); 
private static final String ATTR_PG_RETESTING_UOM = PropertyUtil.getSchemaProperty("attribute_pgRetestingUOM"); 
private static final String ATTR_PG_LOWER_SPECIFICATION_LIMIT = PropertyUtil.getSchemaProperty("attribute_pgLowerSpecificationLimit"); 
private static final String ATTR_PG_LOWER_TARGET = PropertyUtil.getSchemaProperty("attribute_pgLowerTarget"); 
private static final String ATTR_PG_TARGET = PropertyUtil.getSchemaProperty("attribute_pgTarget"); 
private static final String ATTR_PG_UPPER_TARGET = PropertyUtil.getSchemaProperty("attribute_pgUpperTarget"); 
private static final String ATTR_PG_UPPER_SPECIFICATION_LIMIT = PropertyUtil.getSchemaProperty("attribute_pgUpperSpecificationLimit"); 
private static final String ATTR_PG_UOM = PropertyUtil.getSchemaProperty("attribute_pgUnitOfMeasure");
private static final String ATTR_PG_REPORT_NEAREST = PropertyUtil.getSchemaProperty("attribute_pgReportToNearest");
private static final String ATTR_PG_REPORT_TYPE = PropertyUtil.getSchemaProperty("attribute_pgReportType");
private static final String ATTR_PG_RELEASE_CRITERIA = PropertyUtil.getSchemaProperty("attribute_pgReleaseCriteria");
private static final String TYPE_PG_TEST_METHOD = PropertyUtil.getSchemaProperty("type_pgTestMethod");
private static final String TYPE_TEST_METHOD = PropertyUtil.getSchemaProperty("type_TestMethodSpecification");
private static final String ATTR_PG_ACTION_REQUIRED = PropertyUtil.getSchemaProperty("attribute_pgActionRequired");
private static final String ATTR_PG_CRITICALITY_FACTOR = PropertyUtil.getSchemaProperty("attribute_pgCriticalityFactor");
private static final String ATTR_PG_BASIS = PropertyUtil.getSchemaProperty("attribute_pgBasis");
private static final String ATTR_PG_TEST_GROUP = PropertyUtil.getSchemaProperty("attribute_pgTestGroup");
private static final String ATTR_PG_APPLICATION = PropertyUtil.getSchemaProperty("attribute_pgApplication");
private static final String RELATIONSHIP_CHARACTERISTIC = PropertyUtil.getSchemaProperty("relationship_Characteristic");
// Added for Shared Table
private static final String RELATIONSHIP_SHARED_TABLE = PropertyUtil.getSchemaProperty("relationship_SharedTable");
private static final String TYPE_SHARED_TABLE = PropertyUtil.getSchemaProperty("type_SharedTable");
private static final String RELATIONSHIP_SHARED_CHARACTERISTIC = PropertyUtil.getSchemaProperty("relationship_SharedCharacteristic");	
// Added for Shared Table	
private static final String RELATIONSHIP_PG_MASTER = PropertyUtil.getSchemaProperty("relationship_pgMaster");
private static final String TYPE_PG_MASTER = PropertyUtil.getSchemaProperty("type_pgMaster");
private StringList SL_OBJECT_COMMON = getObjectCommonSelects();
private static final String TYPE_PG_TMRD_TYPES = PropertyUtil.getSchemaProperty("type_pgQualitySpecification")+","+PropertyUtil.getSchemaProperty("type_pgStandardOperatingProcedure")+","+PropertyUtil.getSchemaProperty("type_pgIllustration");
private static final String REL_PARTFAMILYREFERENCE = PropertyUtil.getSchemaProperty("relationship_PartFamilyReference");
//  For Performance Characteristic --End    
// Specs  Docs --Begin
private static final String RELATIONSHIP_PART_SPECIFICATION = PropertyUtil.getSchemaProperty("relationship_PartSpecification");
private static final String RELATIONSHIP_PG_APPROVED_SUPPLIER_LIST = PropertyUtil.getSchemaProperty("relationship_pgApprovedSupplierList");
private static final String RELATIONSHIP_PG_CAD_SPECIFICATION = PropertyUtil.getSchemaProperty("relationship_pgInheritedCADSpecification");
private static final String RELATIONSHIP_REFERENCE_DOC = PropertyUtil.getSchemaProperty("relationship_ReferenceDocument");
private static final String RELATIONSHIP_AUTHORIZEDTEMPORARYSPECIFICATION = PropertyUtil.getSchemaProperty("relationship_AuthorizedTemporarySpecification");
private static final String ATTR_PG_ASSEMBLY_TYPE = PropertyUtil.getSchemaProperty("attribute_pgAssemblyType");
// Specs Docs --End
// Weight & Dimension Begin
private static final String ATTR_PG_CSS_TYPE = PropertyUtil.getSchemaProperty("attribute_pgCSSType");
private static final String ATTRIBUTE_PGUNITOFMEASURESYSTEM = PropertyUtil.getSchemaProperty("attribute_pgUnitOfMeasureSystem");
private static final String ATTRIBUTE_PGGTIN = PropertyUtil.getSchemaProperty("attribute_pgGTIN");
private static final String ATTRIBUTE_PGDEPTH = PropertyUtil.getSchemaProperty("attribute_pgDepth");
private static final String ATTRIBUTE_PGWIDTH = PropertyUtil.getSchemaProperty("attribute_pgWidth");
private static final String ATTRIBUTE_PGHEIGHT = PropertyUtil.getSchemaProperty("attribute_pgHeight");
private static final String ATTRIBUTE_PGDIMENSIONUNITOFMEASURE = PropertyUtil.getSchemaProperty("attribute_pgDimensionUnitOfMeasure");
private static final String ATTRIBUTE_PGGROSSWEIGHT = PropertyUtil.getSchemaProperty("attribute_pgGrossWeight");
private static final String ATTRIBUTE_PGGROSSWEIGHTUNITOFMEASURE = PropertyUtil.getSchemaProperty("attribute_pgGrossWeightUnitOfMeasure");
private static final String ATTRIBUTE_PGCONSUMERUNITSPERPACKINGUNIT = PropertyUtil.getSchemaProperty("attribute_pgConsumerUnitsPerPackingUnit");
private static final String ATTRIBUTE_PGNETWEIGHTOFPRODUCTINCONSUMERUNIT = PropertyUtil.getSchemaProperty("attribute_pgNetWeightOfProductInConsumerUnit");
private static final String ATTRIBUTE_PGNETWEIGHTUNITOFMEASURE = PropertyUtil.getSchemaProperty("attribute_pgNetWeightUnitOfMeasure");
private static final String ATTRIBUTE_PGCUBEEFFICIENCY = PropertyUtil.getSchemaProperty("attribute_pgCubeEfficiency");
private static final String ATTRIBUTE_PGPALLETTYPE = PropertyUtil.getSchemaProperty("attribute_pgPalletType");
private static final String SELECT_ATTRIBUTE_PGVOLUME = PropertyUtil.getSchemaProperty("attribute_pgVolume");
private static final String ATTRIBUTE_PGVOLUMEUNITOFMEASURE = PropertyUtil.getSchemaProperty("attribute_pgVolumeUnitOfMeasure");
private static final String SELECT_ATTRIBUTE_PGGROSSWEIGHTWITHPALLET = PropertyUtil.getSchemaProperty("attribute_pgGrossWeightWithPallet");
private static final String SELECT_ATTRIBUTE_PGGROSSWEIGHTWITHOUTPALLET = PropertyUtil.getSchemaProperty("attribute_pgGrossWeightWithoutPallet");;
private static final String SELECT_ATTRIBUTE_PGCUSTOMERUNITPERLAYER = PropertyUtil.getSchemaProperty("attribute_pgCustomerUnitsPerLayer");
private static final String SELECT_ATTRIBUTE_PGLAYERSPERTRANSPORTUNIT = PropertyUtil.getSchemaProperty("attribute_pgLayersPerTransportUnit");
private static final String SELECT_ATTRIBUTE_PGCUSTUNITPERTRANSPORTUNIT = PropertyUtil.getSchemaProperty("attribute_pgCustomerUnitsPerTransportUnit");
private static final String SELECT_ATTRIBUTE_PGMAXPALLETSTACKHEIGHT = PropertyUtil.getSchemaProperty("attribute_pgMaxPalletStackHeight");
private static final String SELECT_ATTRIBUTE_PGMAXCASESTACKHEIGHT = PropertyUtil.getSchemaProperty("attribute_pgMaxCaseStackHeight");
private static final String SELECT_ATTRIBUTE_PGMAXTRUCKPALLETHEIGHT = PropertyUtil.getSchemaProperty("attribute_pgMaxTruckPalletStackHeight");
private static final String ATTRIBUTE_PGALTERNATEUNITOFMEASURE = PropertyUtil.getSchemaProperty("attribute_pgAlternateUnitOfMeasure");
private static final String ATTRIBUTE_PGGROSSWEIGHTREAL = PropertyUtil.getSchemaProperty("attribute_pgGrossWeightReal");
private static final String ATTRIBUTE_PGNETWEIGHTOFPRODUCTINCONSUMERUNITREAL = PropertyUtil.getSchemaProperty("attribute_pgNetWeightOfProductInConsumerUnitReal");
private static final String ATTRIBUTE_PGNUMBEROFCONSUMERUNITSINCUSTOMERUNIT = PropertyUtil.getSchemaProperty("attribute_pgNumberOfConsumerUnitsInCustomerUnit");
private static final String ATTRIBUTE_PGVOLUMEREAL = PropertyUtil.getSchemaProperty("attribute_pgVolumeReal");
private static final String ATTRIBUTE_PGGROSSWEIGHTWITHPALLETREAL = PropertyUtil.getSchemaProperty("attribute_pgGrossWeightWithPalletReal");
private static final String ATTRIBUTE_PGGROSSWEIGHTWITHOUTPALLETREAL = PropertyUtil.getSchemaProperty("attribute_pgGrossWeightWithoutPalletReal");
private static final String ATTRIBUTE_PGWHSEPALLETSTACKMAXHEIGHT = PropertyUtil.getSchemaProperty("attribute_pgWhsePalletStackMaxHeight");
private static final String ATTRIBUTE_PGWHSECASEMAXHEIGHT = PropertyUtil.getSchemaProperty("attribute_pgWhseCaseMaxHeight");
private static final String ATTRIBUTE_PGOUTERDIMENSIONLENGTH = PropertyUtil.getSchemaProperty("attribute_pgOuterDimensionLength");
//2018x1.1 Spet Requirement
private static final String ATTRIBUTE_PGSTRUCTUREDRELEASECRITERIA_REQUIRED = PropertyUtil.getSchemaProperty ("attribute_pgStructuredReleaseCriteriaRequired");
private static final String ATTRIBUTE_PGISPRIMARY = PropertyUtil.getSchemaProperty("attribute_pgIsPrimary");
//Added code for Requirement id 38092 Refactor Part & Specs code as per SonarQube and Enovia rules Starts
private static final String ATTRIBUTE_PGARTWORKPRIMARY = PropertyUtil.getSchemaProperty(null,"attribute_pgArtworkPrimary");
//Added code for Requirement id 38092 Refactor Part & Specs code as per SonarQube and Enovia rules Ends
private static final String ATTRIBUTE_PGOPTIONALCOMPONENT = PropertyUtil.getSchemaProperty("attribute_pgOptionalComponent");
//2018x1.1 Spet Requirement End.
private static final String POLICY_VERSION = PropertyUtil.getSchemaProperty("policy_Version");
public static String RenderingFormat = PropertyUtil.getSchemaProperty("format_JView");
private static final String RELATIONSHIP_EXCLICENSEDPEOPLE = PropertyUtil.getSchemaProperty("relationship_EXCLicensedPeople");
private static final String TYPE_IPCONTROLCLASS = PropertyUtil.getSchemaProperty("type_IPControlClass");
private static final String TYPE_PGDSMREPORT = PropertyUtil.getSchemaProperty("type_pgDSMReport");
private static final String REL_PG_DEFINES_MATERIAL = PropertyUtil.getSchemaProperty("relationship_pgDefinesMaterial");
//Added the code for Defect ID : 27579 - Family Care - Performance Characteristics of FPP in not included in report : Starts
private static final String TYPE_FINISHED_PRODUCT_PART = PropertyUtil.getSchemaProperty("type_FinishedProductPart");
private static final String TYPE_PG_CUSTOMERUNIT = PropertyUtil.getSchemaProperty("type_pgCustomerUnitPart");
private static final String TYPE_PG_INNERPACK = PropertyUtil.getSchemaProperty("type_pgInnerPackUnitPart");
private static final String TYPE_PG_CONSUMERUNIT = PropertyUtil.getSchemaProperty("type_pgConsumerUnitPart");
private static final String ATTRIBUTE_STAGE = PropertyUtil.getSchemaProperty("attribute_ReleasePhase");
//Added code for Requirement Id:29012-The report shall include new tab For FOP-Formula Ingredient-Starts
private static final String ATTRIBUTE_APPLICATION = PropertyUtil.getSchemaProperty("attribute_Application");
private static final String TYPE_PG_PLIREPORTEDFUNCTION = PropertyUtil.getSchemaProperty("type_pgPLIReportedFunction");
private static final String STRING_CERTIFICATION = "certification";
private static final String STRING_REPORTEDFUNCTION = "reportedFunction";
private static final String STRING_VINAME = "VIname";
private static final String STRING_VIID = "VIId";
//Added code for Requirement Id:29012-The report shall include new tab For FOP-Formula Ingredient-Ends
private static final String TYPE_PG_PERFORMANCECHARACTERISTIC = PropertyUtil.getSchemaProperty("type_pgPerformanceCharacteristic");
private static final String CONST_DENIED = "#DENIED!";
private static final String TYPE_PG_ANCILLARY_RAW_MATERIAL_PART = PropertyUtil.getSchemaProperty("type_pgAncillaryRawMaterialPart");
private static final String REL_PG_PLI_MATERIAL_CERTIFICATIONS = PropertyUtil.getSchemaProperty("relationship_pgPLIMaterialCertifications");
private static final String INIT_CAPS_YES = "Yes";
private static final String INIT_CAPS_NO = "No";
//Added the code for Defect ID : 27579 - Family Care - Performance Characteristics of FPP in not included in report : Ends
private static final String STATE_IN_WORK = "In Work";
private static final String STATE_RELEASED = "Released";
private static final String STATE_ACTIVE = "Active";
private static final String STATE_OBSOLETE = "Obsolete";
private static final String STATE_FROZEN = "Frozen";
private static final String STATE_RELEASE = "Release";
private static final String ATTRIBUTE_PGORIGINATINGSOURCE = "pgOriginatingSource";
//Added the code for defect Id :30015 - data displayed in family care report Specs and Docs sheet doesn't match the value in UI - Starts
private static final String SYMBOL_UNDERSCORE = "_";
//Added the code for defect Id :30015 - data displayed in family care report Specs and Docs sheet doesn't match the value in UI - Ends
private static final String PARENT_ATTR_FINDNUMBER= "to[FBOM].attribute[Find Number]";
//Added code for Defect Id - 29969 : FOP not showing on FOP-Formula Ingredient--Starts
private static final String TYPE_VIRTUALINTERMEDIATE = "Virtual Intermediate";
//Added code for Defect Id - 29969 : FOP not showing on FOP-Formula Ingredient--Ends
private static final String TYPE_INTERMEDIATEFORMULA = "Intermediate Formula";
//Added code for Reqirement Id:31965- 2018x.3 -The report shall include new Tab for GPS Assessment-Starts
private static final String RELATIONSHIP_PG_GPSASSESSMENTTASKINPUT = PropertyUtil.getSchemaProperty("relationship_pgGPSAssessmentTaskInputs");
private static final String TYPE_PG_GPSASSESSMENTTASK = PropertyUtil.getSchemaProperty("type_pgGPSAssessmentTask");
private static final String ATTRIBUTE_PG_GPSSTATUS = PropertyUtil.getSchemaProperty("attribute_pgGPSStatus");
private static final String ATTRIBUTE_PG_GPSORIGINATEDTASKNAME = PropertyUtil.getSchemaProperty("attribute_pgOriginalTaskName");
private static final String ATTRIBUTE_PG_NRQID = PropertyUtil.getSchemaProperty("attribute_pgNRQID");
private static final String ATTRIBUTE_PG_GPSASSESSMENTCATEGORY = PropertyUtil.getSchemaProperty("attribute_pgGPSAssessmentCategory");
//Modified for Requirement : 35249- Starts
private static final String CONST_HTTPS = "https://";
private static final String CONSTANT_PGGPSASSESSMENTADMIN = "pgGPSAssessmentAdmin";
//Modified for Requirement : 35249- Ends
//Added code for Reqirement Id:31965- 2018x.3 -The report shall include new Tab for GPS Assessment-Ends
//Added code for Requirement Id:31971 -The report shall include new tab Country Clearance tab for FOP-Starts
//Added for Code refactoring requirement : 38092-starts
private static final String ATTRIBUTE_PG_PACKINGSITE = PropertyUtil.getSchemaProperty(null,"attribute_pgPackingSite");
private static final String ATTRIBUTE_PG_MANUFACTURINGSITE = PropertyUtil.getSchemaProperty(null,"attribute_pgManufacturingSite");
//Added for Defect Id : 32292 - Starts
private static final String ATTRIBUTE_PG_REGISTRATIONRENEWALLEADTIME = PropertyUtil.getSchemaProperty(null,"attribute_pgRegistrationRenewalLeadTime");
private static final String ATTRIBUTE_PG_REGISTRATIONRENEWALSTATUS = PropertyUtil.getSchemaProperty(null,"attribute_pgRegistrationRenewalStatus");
//Added for Code refactoring requirement : 38092-ends
//Added for Defect Id : 32292 - Ends
//Added code for Requirement Id:31971 -The report shall include new tab Country Clearance tab for FOP-Ends
//Added code for defect id: 32246--Starts
private static final String RELATIONSHIP_PROJECT_TASK = "Project Task";
private static final String TYPE_INBOX_TASK = "Inbox Task";
private static final String TYPE_ROUTE = PropertyUtil.getSchemaProperty(pgV3Constants.TYPE_ROUTE);
//Added code for defect id: 32246--Ends
//Added code for Req Id : 33655: The report shall include new tab MEP-SEP Certification--Starts
private static final String EMXCPNSTRINGRESOURCE= "emxCPNStringResource";
private static final String CERTIFICATION_NAME = "frommid["+pgV3Constants.RELATIONSHIP_PGMEPSEPCERTIFICATION+"].torel["+pgV3Constants.RELATIONSHIP_PG_PLI_MATERIAL_CERTIFICATIONS+"].to.name";
private static final String CERTIFICATION_ID = "frommid["+pgV3Constants.RELATIONSHIP_PGMEPSEPCERTIFICATION+"].torel["+pgV3Constants.RELATIONSHIP_PG_PLI_MATERIAL_CERTIFICATIONS+"].to.id";
private static final String CERTIFICATION_STATUS = "frommid["+pgV3Constants.RELATIONSHIP_PGMEPSEPCERTIFICATION+"].attribute[pgCertficationStatus]";
private static final String CERTIFICATION_EXPDATE = "frommid["+pgV3Constants.RELATIONSHIP_PGMEPSEPCERTIFICATION+"]."+pgV3Constants.SELECT_ATTRIBUTE_EXPIRATION_DATE;
private static final String COMMONCOLUMNS= "CommonColumns";
//Added code for Req Id : 33655: The report shall include new tab MEP-SEP Certification--Ends
//Added code for Req Id : 34226: The report shall include new tab Part Certification--Starts
private static final String MARKET_NAME = "tomid["+pgV3Constants.RELATIONSHIP_PGCOUNTRIESCERTICATIONCLAIMED+"].from.name";
private static final String MARKET_ID = "tomid["+pgV3Constants.RELATIONSHIP_PGCOUNTRIESCERTICATIONCLAIMED+"].from.id";
private static final String PRODUCT_NAME = "productName";
private static final String PRODUCT_ID = "productID";
private static final String FPP_CERTIFICATION="from["+pgV3Constants.RELATIONSHIP_PG_PLI_MATERIAL_CERTIFICATIONS+"].to.id";
private static final String COUNTRY_NAME = "tomid["+pgV3Constants.RELATIONSHIP_PGCOUNTRIESCERTIED+"].from.name";
private static final String COUNTRY_ID = "tomid["+pgV3Constants.RELATIONSHIP_PGCOUNTRIESCERTIED+"].from.id";
//Added code for Req Id : 34226: The report shall include new tab Part Certification--Ends
//Added code for Req Ids : 34946, 34306, 34307, 34308, 34309, 34311, 34312, 34313, 34314 New Tab: Alternates--Starts
private static final String PLANTNAME = "to["+pgV3Constants.RELATIONSHIP_MANUFACTURINGRESPONSIBILITY+"].from.name";
private static final String ISACTIVATED = "to["+pgV3Constants.RELATIONSHIP_MANUFACTURINGRESPONSIBILITY+"]."+pgV3Constants.SELECT_ATTRIBUTE_PGISACTIVATED;
private static final String ISAUTHORIZEDUSE = "to["+pgV3Constants.RELATIONSHIP_MANUFACTURINGRESPONSIBILITY+"]."+pgV3Constants.SELECT_ATTRIBUTE_PGISAUTHORIZEDTOUSE;
private static final String ISAUTHORIZEDPRODUCE = "to["+pgV3Constants.RELATIONSHIP_MANUFACTURINGRESPONSIBILITY+"]."+pgV3Constants.SELECT_ATTRIBUTE_PGISAUTHORIZEDTOPRODUCE;
private static final String ISAUTHORIZEDVIEW = "to["+pgV3Constants.RELATIONSHIP_MANUFACTURINGRESPONSIBILITY+"]."+pgV3Constants.SELECT_ATTRIBUTE_PGISAUTHORIZEDTOVIEW;
private static final String VENDOR_NAME = "to["+pgV3Constants.RELATIONSHIP_MANUFACTURINGRESPONSIBILITY+"].from.name";
private static final String VENDOR_CODE = "to["+pgV3Constants.RELATIONSHIP_MANUFACTURINGRESPONSIBILITY+"].from."+pgV3Constants.SELECT_ATTRIBUTE_PGSHORTCODE;
private static final String ALNAME = "alName";
private static final String ALREV = "alRev";
private static final String ALSTATE = "alState";
private static final String TITLE = "Title";
private static final String SUBTYPE = "SubType";
private static final String RELEASEDATE = "ReleaseDate";
private static final String EXPRDATE = "ExpirationDate";
private static final String ALID = "alId";
private static final String ORGANIZATION = "from["+pgV3Constants.RELATIONSHIP_PGPRIMARYORGANIZATION+"].to.name";
private static final String INPUTMEPSEP = "InputMEPSEP";
private static final String INPUTPLANT = "InputPlant";
private static final String ALMEPSEP= "AlternateMEPSEP";
private static final String ALPLANT= "AlternatePlant";
private static final String MEPSEPUSER = "MEPSEPUser";
private static final String VENDORNAME = "VendorName";
private static final String VENDORCODE = "VendorCode";
//Added code for Req Ids : 34946, 34306, 34307, 34308, 34309, 34311, 34312, 34313, 34314 New Tab: Alternates--Ends
//Added code for Requirement Id:33635 -The report should only show tabs which user selected as the input--Starts
private static final String TAB_ATTRIBUTES = "~Attributes";
private static final String TAB_PERFORMANCECHAR = "~Performance Characteristics";
private static final String TAB_WEIGHTCHAR = "~Weight Characteristics";
private static final String TAB_PLANTS = "~Plants";
private static final String TAB_SPECSDOCS = "~Specs and Docs";
private static final String TAB_BOM = "~Bill of Materials";
private static final String TAB_WEIGHTDIM = "~Weights and Dimensions";
//Added code for Requirement id 46223 - IP & Export Control Tab in Part & Spec Reports - Starts
//Modified the code for 2022x.02 May CW Defect 52202 - Starts
private static final String TAB_IPEXPORTCONTROL = "~IP and Export Control";
//Modified the code for 2022x.02 May CW Defect 52202 - Ends
//Added code for Requirement id 46223 - IP & Export Control Tab in Part & Spec Reports - Ends
private static final String TAB_MATCOM = "~Materials And Composition";
//Added for Requirement Id : 33870 - Starts
private static final String TAB_COMPEQUV = "~Part Component Equivalents";
//Added for Requirement Id : 33870 - Ends
private static final String TAB_APPROVE = "~Approve";
private static final String TAB_PRODFORMULA = "~Producing Formula";
private static final String TAB_EBOMWD = "~EBOM W and D";
private static final String TAB_NOTES = "~Notes";
private static final String TAB_FOPINGREDIENT = "~FOP-Formula Ingredient";
private static final String TAB_SAPBOMASFED = "~SAP BOM As Fed";
private static final String TAB_VIEWSUBSTITUTES = "~View Substitutes";
private static final String TAB_GPSASSESMENTS = "~GPS Assesments";
private static final String TAB_MARKETCLEARANCE = "~Market Clearance";
private static final String TAB_MARKETOFSALE = "~Market Of Sale";
private static final String TAB_MOSCOMDETAILS = "~MOS Component Details"; //Added by DSM for 22x CW-05 for Requirement 49721  -changes for DSM Reports MOS Components - START/END
private static final String TAB_MEPSEPCOMEQUV = "~MEP-SEP Component Equivalents";
private static final String TAB_MEPSEPCERTI = "~MEP-SEP Certifications";
private static final String TAB_PARTCERTI = "~Part Certifications";
private static final String TAB_ALTERNATE = "~Alternate";
private static final String TAB_SUBSMATERIAL ="~Substances and Materials";
//Added code for 2018x6.1 Oct CW requirement 39692 Add new tab Battery Rollup in Part and Spec report Starts
private static final String TAB_BATTERYROLLUP ="~Battery Roll-Up";
//Added code for 2018x6.1 Oct CW requirement 39692 Add new tab Battery Rollup in Part and Spec report Ends
//Added code for 2018x6.1 Oct CW requirement 40223 Add new Tab Characteristics - Apollo in Part and Spec Report Starts
private static final String TAB_CHARACTERISTICSAPOLLO ="~Characteristics - Apollo";
//Added code for 2018x6.1 Oct CW requirement 40223 Add new Tab Characteristics - Apollo in Part and Spec Report Ends
//Added code for 2018x6.1 Oct CW requirement 40223 Add new Tab Characteristics - Apollo in Part and Spec Report Starts
private static final String TAB_DESIGNPARAMETER ="~Design Parameter";
//Added code for 2018x6.1 Oct CW requirement 40223 Add new Tab Characteristics - Apollo in Part and Spec Report Ends
//Added code for 2018x6.1 Oct CW requirement 40223 Add new Tab Characteristics - Apollo in Part and Spec Report Starts
private static final String TAB_CHEMPHYSICALPROPERTIES ="~Chemical and Physical Properties";
//Added code for 2018x6.1 Oct CW requirement 40223 Add new Tab Characteristics - Apollo in Part and Spec Report Ends
//Added code for Apr22 CW requirement 41600 Starts
private static final String TAB_SUSTAINIBILITY = "~Sustainibility";
//Added code for Apr22 CW requirement 41600 Ends
//Added code for Requirement Id:33635 -The report should only show tabs which user selected as the input--Ends
//Added code for Apr22 CW requirement 41969 - Starts
private static final String TAB_DGCLASSIFICATION = "~DG Classification";
//Added code for Apr22 CW requirement 41969 - Ends
//Added code for defect: 33591--Starts
private static final String ATTR_ROUTE_INSTRUCTIONS= "attribute[Route Instructions]";	
//Added code for defect: 33591--Ends
//Added the code for 22x Feb CW Requirement 45443 - Starts
private static final String TAB_SUBSTITUTEPARTSIN = "~SubstitutePartsIn";
//Added the code for 22x Feb CW Requirement 45443 - Ends
private static final String CAREALIZEDNAME= "CARealizedName";
private static final String CAPROPOSEDNAME = "CAProposedName";
private static final String SCAID = "sCAId";
private static final String MANUFACTURER= "Manufacturer";
private static final String MRID = "MRId";
private static final String MRNAME = "MRName";
private static final String MRREV = "MRRev";
private static final String MRTYPE = "MRType";
private static final String MRDESC = "MRDesc";
private static final String MRSTATE = "MRState";
private static final String MRTITLE = "MRTitle";
private static final String MRPQRNAME = "MRPQRName";
private static final String MRPQRSTATE = "MRPQRState";
private static final String MRPQRREV = "MRPQRRev";
private static final String SUPPLIER = "Supplier";
private static final String SUPID = "SupId";
private static final String SUPNAME = "SupName";
private static final String SUPREV = "SupRev";
private static final String SUPTYPE = "SupType";
private static final String SUPTITLE = "SupTitle";
private static final String SUPDESC= "SupDesc";
private static final String SUPSTATE = "SupState";
private static final String SUPPQRNAME = "SUPPQRName";
private static final String SUPPQRSTATE = "SUPPQRState";
private static final String SUPPQRREV = "SUPPQRRev";
//EBP View Configuration
//Modified for Defect - 33187 --Starts
private static final String strEBPNotes_CM="~pgAssembledProductPart~pgDeviceProductPart~pgFabricatedPart~Finished Product Part~pgInnerPackUnitPart~pgIntermediateProductPart~pgMasterConsumerUnitPart~pgMasterCustomerUnitPart~pgMasterInnerPackUnitPart~pgMasterPackagingAssemblyPart~pgMasterPackingMaterial~pgMasterProductPart~pgMasterFinishedProduct~pgMasterRawMaterialPart~Packaging Assembly Part~pgPackingSubassembly~pgSoftwarePart~pgTransportUnitPart~pgConsumerUnitPart~pgCustomerUnitPart~";
//Updated code for defect id 34897 Starts
private static final String strEBPNotes_Supplier="~pgDeviceProductPart~pgFabricatedPart~pgFinishedProduct~Finished Product Part~pgIntermediateProductPart~pgMasterConsumerUnitPart~pgMasterCustomerUnitPart~pgMasterInnerPackUnitPart~pgMasterPackagingAssemblyPart~pgMasterPackingMaterial~pgMasterProductPart~pgMasterFinishedProduct~pgMasterRawMaterialPart~Packaging Assembly Part~pgPackingSubassembly~pgSoftwarePart~pgConsumerUnitPart~pgCustomerUnitPart~pgInnerPackUnitPart~";
//Updated code for defect id 34897 Ends
//Modified for Defect - 33187 --ends
private static final String strEBPProducingFormula_CM="~pgRawMaterial~Raw Material~";
private static final String strEBPProducingFormula_Supplier="~pgRawMaterial~Raw Material~";
private static final String strEBPWeightsAndDimensions_CM="~pgFinishedProduct~Finished Product Part~pgMasterFinishedProduct~pgPackingSubassembly~";
private static final String strEBPWeightsAndDimensions_Supplier="";
private static final String strEBPWeightCharacteristics_CM="~pgAncillaryPackagingMaterialPart~pgAssembledProductPart~pgAncillaryRawMaterialPart~pgConsumerUnitPart~pgCustomerUnitPart~pgDeviceProductPart~pgFabricatedPart~Formulation Part~Finished Product Part~pgInnerPackUnitPart~pgIntermediateProductPart~Packaging Assembly Part~pgPromotionalItemPart~Packaging Material Part~Packaging Assembly Part~Raw Material~pgRawMaterial~";
private static final String strEBPWeightCharacteristics_Supplier="~pgAncillaryPackagingMaterialPart~pgAncillaryRawMaterialPart~pgDeviceProductPart~pgFabricatedPart~Finished Product Part~pgIntermediateProductPart~Packaging Assembly Part~pgPromotionalItemPart~Packaging Material Part~Raw Material~pgRawMaterial~";
private static final String strEBPPlants_CM="";
private static final String strEBPPlants_Supplier="";
private static final String strEBPCompEquivalent_CM="~pgAncillaryPackagingMaterialPart~pgAncillaryRawMaterialPart~pgDeviceProductPart~pgFabricatedPart~pgIntermediateProductPart~pgOnlinePrintingPart~Packaging Assembly Part~pgPromotionalItemPart~Packaging Material Part~Raw Material~pgRawMaterial~pgSoftwarePart~";
private static final String strEBPCompEquivalent_Supplier="~pgAncillaryPackagingMaterialPart~pgAncillaryRawMaterialPart~pgDeviceProductPart~pgFabricatedPart~pgIntermediateProductPart~pgOnlinePrintingPart~Packaging Assembly Part~pgPromotionalItemPart~Packaging Material Part~Raw Material~pgRawMaterial~pgSoftwarePart~";
private static final String strEBPComponentMaterials_CM="~pgAncillaryPackagingMaterialPart~pgAssembledProductPart~pgAncillaryRawMaterialPart~pgDeviceProductPart~Formulation Part~pgIntermediateProductPart~Raw Material~pgRawMaterial~pgFabricatedPart~pgMasterPackagingMaterialPart~Packaging Material Part~";
private static final String strEBPComponentMaterialsProduce_CM="~pgAssembledProductPart~pgDeviceProductPart~pgIntermediateProductPart~";
private static final String strEBPComponentMaterials_Supplier="~pgAncillaryRawMaterialPart~pgDeviceProductPart~pgIntermediateProductPart~";
private static final String strEBPPerformanceCharacteristics_CM="~pgAncillaryPackagingMaterialPart~pgAssembledProductPart~pgAncillaryRawMaterialPart~pgConsumerUnitPart~pgCustomerUnitPart~pgDeviceProductPart~pgFabricatedPart~pgFormulatedProduct~Formulation Part~pgFinishedProduct~Finished Product Part~pgInnerPackUnitPart~pgIntermediateProductPart~pgPackingMaterial~pgRawMaterial~pgMasterConsumerUnitPart~pgMasterCustomerUnitPart~pgMasterInnerPackUnitPart~pgMasterPackagingAssemblyPart~pgMasterPackagingMaterialPart~pgMasterPackingMaterial~pgMasterProductPart~pgMasterFinishedProduct~pgMasterRawMaterialPart~pgMasterRawMaterialPart~pgMasterRawMaterial~pgOnlinePrintingPart~Packaging Assembly Part~pgPromotionalItemPart~Packaging Material Part~pgPackingSubassembly~Packaging Assembly Part~Raw Material~pgSoftwarePart~";
//Updated code for defect id 34897 Starts
//Modified by IRM(Sogeti) for August 2023 CW 22x.3 Defect 52968 -- START
private static final String strEBPPerformanceCharacteristics_Supplier="~pgAncillaryPackagingMaterialPart~pgAncillaryRawMaterialPart~pgDeviceProductPart~pgFabricatedPart~pgFinishedProduct~Finished Product Part~pgIntermediateProductPart~pgMasterConsumerUnitPart~pgMasterCustomerUnitPart~pgMasterInnerPackUnitPart~pgMasterPackagingAssemblyPart~pgMasterPackingMaterial~pgMasterProductPart~pgMasterFinishedProduct~pgMasterRawMaterialPart~pgMasterRawMaterial~pgOnlinePrintingPart~Packaging Assembly Part~pgPromotionalItemPart~Packaging Material Part~pgPackingSubassembly~pgRawMaterial~pgPackingMaterial~Raw Material~pgSoftwarePart~pgMasterPackagingMaterialPart~pgInnerPackUnitPart~pgConsumerUnitPart~pgCustomerUnitPart~";
//Modified by IRM(Sogeti) for August 2023 CW 22x.3 Defect 52968 -- Ends
//Updated code for defect id 34897 Ends
//Modified for Defect 49830:22x 01 CW -- Starts
private static final String strEBPSpecsDocs_CM="~pgAuthorizedConfigurationStandard~pgAncillaryPackagingMaterialPart~pgAssembledProductPart~pgAncillaryRawMaterialPart~pgApprovedSupplierList~pgAuthorizedTemporarySpecification~pgConsumerUnitPart~pgCustomerUnitPart~pgDeviceProductPart~pgFabricatedPart~pgFormulatedProduct~Formulation Part~pgFinishedProduct~Finished Product Part~Formula Technical Specification~pgIllustration~pgInnerPackUnitPart~pgIntermediateProductPart~pgLaboratoryIndexSpecification~pgPackingMaterial~pgRawMaterial~pgMasterConsumerUnitPart~pgMasterCustomerUnitPart~pgMakingInstructions~pgMasterInnerPackUnitPart~pgMasterPackagingAssemblyPart~pgMasterPackagingMaterialPart~pgMasterPackingMaterial~pgMasterProductPart~pgMasterFinishedProduct~pgMasterRawMaterialPart~pgMasterRawMaterialPart~pgMasterRawMaterial~pgOnlinePrintingPart~Packaging Assembly Part~pgPromotionalItemPart~Packaging Material Part~pgProcessStandard~pgPackingSubassembly~Packaging Assembly Part~pgQualitySpecification~Raw Material~pgRawMaterial~pgStandardOperatingProcedure~pgStackingPattern~pgSoftwarePart~Test Method Specification~pgTestMethod~pgTransportUnitPart~";
//Updated code for defect id 34897 Starts
private static final String strEBPSpecsDocs_Supplier="~pgAncillaryPackagingMaterialPart~pgAncillaryRawMaterialPart~pgAuthorizedTemporarySpecification~pgDeviceProductPart~pgFabricatedPart~pgFormulatedProduct~pgFinishedProduct~pgIllustration~Finished Product Part~pgIntermediateProductPart~pgMasterConsumerUnitPart~pgMasterCustomerUnitPart~pgMakingInstructions~pgMasterInnerPackUnitPart~pgMasterPackagingAssemblyPart~pgMasterPackingMaterial~pgMasterPackagingMaterialPart~pgMasterProductPart~pgMasterFinishedProduct~pgMasterRawMaterialPart~pgMasterRawMaterial~pgOnlinePrintingPart~Packaging Assembly Part~pgPackingInstructions~pgPromotionalItemPart~Packaging Material Part~pgPackingSubassembly~pgQualitySpecification~pgRawMaterial~pgPackingMaterial~Raw Material~pgSupplierInformationSheet~pgStandardOperatingProcedure~pgStackingPattern~pgSoftwarePart~Test Method Specification~pgTestMethod~pgInnerPackUnitPart~Formula Technical Specification~";
//Updated code for defect id 34897 Ends		
private static final String strEBPSpecsDocsRefDoc_CM="~pgAuthorizedConfigurationStandard~pgAncillaryPackagingMaterialPart~pgAssembledProductPart~pgAncillaryRawMaterialPart~pgApprovedSupplierList~pgAuthorizedTemporarySpecification~pgConsumerUnitPart~pgCustomerUnitPart~pgDeviceProductPart~pgFabricatedPart~Formulation Part~pgFinishedProduct~Finished Product Part~Formula Technical Specification~pgIllustration~pgInnerPackUnitPart~pgIntermediateProductPart~pgLaboratoryIndexSpecification~pgPackingMaterial~pgRawMaterial~pgMasterConsumerUnitPart~pgMasterCustomerUnitPart~pgMakingInstructions~pgMasterInnerPackUnitPart~pgMasterPackagingAssemblyPart~pgMasterPackagingMaterialPart~pgMasterPackingMaterial~pgMasterProductPart~pgMasterFinishedProduct~pgMasterRawMaterialPart~pgMasterRawMaterialPart~pgMasterRawMaterial~pgOnlinePrintingPart~Packaging Assembly Part~pgPackingInstructions~pgPromotionalItemPart~Packaging Material Part~pgProcessStandard~pgPackingSubassembly~Packaging Assembly Part~pgQualitySpecification~Raw Material~pgRawMaterialPlantInstruction~pgStandardOperatingProcedure~pgStackingPattern~pgSoftwarePart~Test Method Specification~pgTestMethod~pgTransportUnitPart~pgFormulatedProduct~";
//Updated code for defect id 34897 Starts
private static final String strEBPSpecsDocsRefDoc_Supplier="~pgAncillaryPackagingMaterialPart~pgAncillaryRawMaterialPart~pgAuthorizedTemporarySpecification~pgDeviceProductPart~pgFabricatedPart~pgFormulatedProduct~pgFinishedProduct~pgIllustration~Finished Product Part~pgIntermediateProductPart~pgMasterConsumerUnitPart~pgMasterCustomerUnitPart~pgMakingInstructions~pgMasterInnerPackUnitPart~pgMasterPackagingAssemblyPart~pgMasterPackingMaterial~pgMasterPackagingMaterialPart~pgMasterProductPart~pgMasterFinishedProduct~pgMasterRawMaterialPart~pgMasterRawMaterial~pgOnlinePrintingPart~Packaging Assembly Part~pgPackingInstructions~pgPromotionalItemPart~Packaging Material Part~POA~pgPackingSubassembly~pgQualitySpecification~pgRawMaterial~pgPackingMaterial~Raw Material~pgRawMaterialPlantInstruction~pgSupplierInformationSheet~pgStandardOperatingProcedure~pgStackingPattern~pgSoftwarePart~Test Method Specification~pgTestMethod~pgInnerPackUnitPart~Formula Technical Specification~";
//Updated code for defect id 34897 Ends
//Modified for Defect 49830:22x 01 CW -- Ends
private static final String strEBPSpecsDocsCharRef_CM="~pgAuthorizedConfigurationStandard~pgAncillaryPackagingMaterialPart~pgAssembledProductPart~pgAncillaryRawMaterialPart~pgAuthorizedTemporarySpecification~pgConsumerUnitPart~pgCustomerUnitPart~pgDeviceProductPart~pgFabricatedPart~Formulation Part~Finished Product Part~Formula Technical Specification~pgInnerPackUnitPart~pgIntermediateProductPart~pgLaboratoryIndexSpecification~pgRawMaterial~pgMasterConsumerUnitPart~pgMasterCustomerUnitPart~pgMakingInstructions~pgMasterInnerPackUnitPart~pgMasterPackagingAssemblyPart~pgMasterPackagingMaterialPart~pgMasterProductPart~pgMasterRawMaterialPart~pgOnlinePrintingPart~Packaging Assembly Part~pgPromotionalItemPart~Packaging Material Part~pgProcessStandard~Packaging Assembly Part~Raw Material~pgSoftwarePart~Test Method Specification~pgTestMethod~pgTransportUnitPart~";
//Updated code for defect id 34897 Starts
private static final String strEBPSpecsDocsCharRef_Supplier="~pgAncillaryPackagingMaterialPart~pgAncillaryRawMaterialPart~pgAuthorizedTemporarySpecification~pgDeviceProductPart~pgFabricatedPart~Finished Product Part~pgIntermediateProductPart~pgMasterConsumerUnitPart~pgMasterCustomerUnitPart~pgMakingInstructions~pgMasterInnerPackUnitPart~pgMasterPackagingAssemblyPart~pgMasterPackagingMaterialPart~pgMasterProductPart~pgMasterRawMaterialPart~pgOnlinePrintingPart~Packaging Assembly Part~pgPromotionalItemPart~Packaging Material Part~Raw Material~pgSoftwarePart~Test Method Specification~pgInnerPackUnitPart~Formula Technical Specification~";
//Updated code for defect id 34897 Ends
private static final String strEBPBOM_CM="~pgAssembledProductPart~pgConsumerUnitPart~pgCustomerUnitPart~pgDeviceProductPart~pgFabricatedPart~Finished Product Part~pgInnerPackUnitPart~pgIntermediateProductPart~pgMasterConsumerUnitPart~pgMasterCustomerUnitPart~pgMasterInnerPackUnitPart~pgMasterPackagingAssemblyPart~pgMasterProductPart~Packaging Assembly Part~pgTransportUnitPart~";
private static final String strEBPBOMProduce_CM="~pgAssembledProductPart~pgDeviceProductPart~pgIntermediateProductPart~";
//Updated code for defect id 34897 Starts
private static final String strEBPBOM_Supplier="~pgDeviceProductPart~pgFabricatedPart~pgFormulatedProduct~pgFinishedProduct~Finished Product Part~pgIntermediateProductPart~pgMasterConsumerUnitPart~pgMasterCustomerUnitPart~pgMasterInnerPackUnitPart~pgMasterPackagingAssemblyPart~pgMasterProductPart~Packaging Assembly Part~pgPackingSubassembly~pgMasterPackingMaterial~pgInnerPackUnitPart~";
//Updated code for defect id 34897 Ends
private static final String strEBPEBOMWD_CM="~pgAssembledProductPart~pgConsumerUnitPart~pgCustomerUnitPart~pgDeviceProductPart~pgFabricatedPart~Finished Product Part~pgInnerPackUnitPart~pgIntermediateProductPart~Packaging Assembly Part~";
private static final String strEBPEBOMWDProduce_CM="~pgAssembledProductPart~pgDeviceProductPart~pgIntermediateProductPart~";
//Updated code for defect id 34897 Starts
private static final String strEBPEBOMWD_Supplier="~pgDeviceProductPart~pgFabricatedPart~Finished Product Part~pgIntermediateProductPart~Packaging Assembly Part~pgInnerPackUnitPart~";
//Updated code for defect id 34897 Ends
private static final String strEBPSAPBOMAsFed_CM="~pgDeviceProductPart~pgFormulatedProduct~Formulation Part~pgFinishedProduct~Finished Product Part~Packaging Assembly Part~";	
//Updated code for defect id 39311 Starts
private static final String strEBPSAPBOMAsFed_Supplier="~pgDeviceProductPart~pgFabricatedPart~pgFormulatedProduct~Finished Product Part~pgIntermediateProductPart~Packaging Assembly Part~Formulation Part~";
//Updated code for defect id 39311 Ends
private static final String strEBPFormulaIngredient_CM="~Formulation Part~Formulation~Virtual Intermediate~";
private static final String strEBPFormulaIngredient_Supplier="";
private static final String strEBPViewSubstitutes_CM="~Formulation Part~Formulation~Virtual Intermediate~";
private static final String strEBPViewSubstitutes_Supplier="";
//22x Upgrade - Added Raw Material for ALM-50646 - Start
//Added the code for the Defect 51675 - Starts
private static final String strEBPSubstancesAndMaterials_CM="~pgRawMaterial~pgMasterPackagingMaterialPart~pgAncillaryPackagingMaterialPart~pgOnlinePrintingPart~pgFabricatedPart~Packaging Material Part~Raw Material~pgAncillaryRawMaterialPart~pgDeviceProductPart~pgIntermediateProductPart~Raw Material~Formulation Part~pgAssembledProductPart~Assembled Product Part~Packaging Assembly Part~Internal Material~pgPromotionalItemPart~";
//Added the code for the Defect 51675 - Ends
//22x Upgrade - Added Raw Material for ALM-50646 - End
//Modified the code for the Defect 51675 - Starts
private static final String strEBPSubstancesAndMaterials_Supplier="~pgRawMaterial~pgMasterPackagingMaterialPart~pgAncillaryPackagingMaterialPart~pgOnlinePrintingPart~pgFabricatedPart~Packaging Material Part~pgAncillaryRawMaterialPart~pgDeviceProductPart~pgIntermediateProductPart~Raw Material~Packaging Assembly Part~Internal Material~pgPromotionalItemPart~";
//Modified the code for the Defect 51675 - Ends
private static final String strEBPGPSAssessment_CM="~pgAncillaryPackagingMaterialPart~pgAssembledProductPart~pgAncillaryRawMaterialPart~pgDeviceProductPart~Formulation Part~Packaging Assembly Part~Packaging Material Part~Raw Material~pgRawMaterial~";
private static final String strEBPGPSAssessment_Supplier="~pgAncillaryPackagingMaterialPart~pgAncillaryRawMaterialPart~pgDeviceProductPart~Packaging Assembly Part~Packaging Material Part~Raw Material~pgRawMaterial~";
private static final String strEBPCountryClearance_CM="~pgAssembledProductPart~pgDeviceProductPart~Formulation Part~";
private static final String strEBPCountryClearance_Supplier="~pgDeviceProductPart~";
private static final String strPerformanceCharacteristics_NonEBP="~pgFinishedProduct~pgPackingMaterial~pgPackingSubassembly~pgRawMaterial~pgMasterPackagingMaterialPart~pgMasterRawMaterial~Packaging Assembly Part~pgMasterConsumerUnitPart~pgMasterCustomerUnitPart~pgMasterInnerPackUnitPart~pgMasterPackagingAssemblyPart~pgAncillaryPackagingMaterialPart~pgPromotionalItemPart~pgOnlinePrintingPart~pgFabricatedPart~pgAncillaryRawMaterialPart~pgDeviceProductPart~pgMasterProductPart~pgMasterRawMaterialPart~pgIntermediateProductPart~pgSoftwarePart~Finished Product Part~Packaging Material Part~Raw Material~pgMasterFinishedProduct~pgFormulatedProduct~Formulation Part~pgAssembledProductPart~pgConsumerUnitPart~pgCustomerUnitPart~pgInnerPackUnitPart~Assembled Product Part~Consumer Unit Part~pgMasterPackingMaterial~";
private static final String strWeightCharacteristics_NonEBP="~Packaging Assembly Part~pgAncillaryPackagingMaterialPart~pgPromotionalItemPart~pgAncillaryRawMaterialPart~pgDeviceProductPart~pgIntermediateProductPart~Finished Product Part~Packaging Material Part~Raw Material~pgRawMaterial~Formulation Part~pgAssembledProductPart~pgConsumerUnitPart~pgCustomerUnitPart~pgInnerPackUnitPart~Assembled Product Part~Consumer Unit Part~pgFabricatedPart~";
//Updated for Defect 42277 2018x6_June
private static final String strPlant_NonEBP="~pgFinishedProduct~pgMakingInstructions~pgPackingMaterial~pgPackingSubassembly~pgRawMaterial~pgStandardOperatingProcedure~Packaging Assembly Part~pgAncillaryPackagingMaterialPart~pgAuthorizedTemporarySpecification~pgPromotionalItemPart~pgOnlinePrintingPart~pgFabricatedPart~pgAncillaryRawMaterialPart~pgDeviceProductPart~pgIntermediateProductPart~pgSoftwarePart~Packaging Material Part~Raw Material~pgFormulatedProduct~Formula Technical Specification~Formulation Part~pgAssembledProductPart~pgAuthorizedConfigurationStandard~pgConsumerUnitPart~pgCustomerUnitPart~pgInnerPackUnitPart~pgLaboratoryIndexSpecification~pgProcessStandard~Assembled Product Part~Consumer Unit Part~Finished Product Part~pgConsumerDesignBasis~";
//Modified for Defect 49830:22x 01 CW -- Starts
private static final String strSpecsDocs_NonEBP="~POA~pgArtwork~pgFinishedProduct~pgIllustration~pgMakingInstructions~pgPackingInstructions~pgPackingMaterial~pgPackingSubassembly~pgQualitySpecification~pgRawMaterial~pgStackingPattern~pgStandardOperatingProcedure~pgSupplierInformationSheet~pgMasterPackingMaterial~pgMasterRawMaterial~Packaging Assembly Part~pgMasterConsumerUnitPart~pgMasterCustomerUnitPart~pgMasterInnerPackUnitPart~pgMasterPackagingAssemblyPart~pgMasterPackagingMaterialPart~pgAncillaryPackagingMaterialPart~pgAuthorizedTemporarySpecification~pgPromotionalItemPart~pgOnlinePrintingPart~pgFabricatedPart~pgAncillaryRawMaterialPart~pgDeviceProductPart~pgMasterProductPart~pgMasterRawMaterialPart~pgIntermediateProductPart~pgSoftwarePart~Test Method Specification~Finished Product Part~Packaging Material Part~Raw Material~pgMasterFinishedProduct~pgFormulatedProduct~pgTestMethod~Formula Technical Specification~Formulation Part~pgApprovedSupplierList~pgAssembledProductPart~pgAuthorizedConfigurationStandard~pgConsumerUnitPart~pgCustomerUnitPart~pgInnerPackUnitPart~pgLaboratoryIndexSpecification~pgProcessStandard~pgTransportUnitPart~Assembled Product Part~pgConsumerDesignBasis~Consumer Unit Part~Transport Unit Part~";
private static final String strSpecsDocsRefDocs_NonEBP="~POA~pgArtwork~pgFinishedProduct~pgIllustration~pgMakingInstructions~pgMasterFinishedProduct~pgPackingInstructions~pgPackingMaterial~pgPackingSubassembly~pgQualitySpecification~pgRawMaterial~pgStackingPattern~pgStandardOperatingProcedure~pgSupplierInformationSheet~pgTestMethod~pgMasterPackingMaterial~pgMasterRawMaterial~POA~Packaging Assembly Part~pgMasterConsumerUnitPart~pgMasterCustomerUnitPart~pgMasterInnerPackUnitPart~pgMasterPackagingAssemblyPart~pgMasterPackagingMaterialPart~pgAncillaryPackagingMaterialPart~pgAuthorizedTemporarySpecification~pgPromotionalItemPart~pgFormulatedProduct~pgOnlinePrintingPart~pgFabricatedPart~pgAncillaryRawMaterialPart~pgDeviceProductPart~pgMasterProductPart~pgMasterRawMaterialPart~pgIntermediateProductPart~pgRawMaterialPlantInstruction~pgSoftwarePart~Test Method Specification~Finished Product Part~Packaging Material Part~Raw Material~Formula Technical Specification~Formulation Part~pgApprovedSupplierList~pgAssembledProductPart~pgAuthorizedConfigurationStandard~pgConsumerUnitPart~pgCustomerUnitPart~pgInnerPackUnitPart~pgLaboratoryIndexSpecification~pgProcessStandard~pgTransportUnitPart~Assembled Product Part~pgConsumerDesignBasis~pgCompetitiveProductPart~pgDSOAffectedFPPList~Formulation~Consumer Unit Part~Transport Unit Part~Processing Instruction~";
//Modified for Defect 49830:22x 01 CW -- Ends
private static final String strSpecsDocsCharDocs_NonEBP="~pgMakingInstructions~pgRawMaterial~pgMasterPackagingMaterialPart~Packaging Assembly Part~pgMasterConsumerUnitPart~pgMasterCustomerUnitPart~pgMasterInnerPackUnitPart~pgMasterPackagingAssemblyPart~pgAncillaryPackagingMaterialPart~pgAuthorizedTemporarySpecification~pgPromotionalItemPart~pgOnlinePrintingPart~pgFabricatedPart~pgAncillaryRawMaterialPart~pgDeviceProductPart~pgMasterProductPart~pgMasterRawMaterialPart~pgIntermediateProductPart~pgSoftwarePart~Test Method Specification~Finished Product Part~Packaging Material Part~Raw Material~Formula Technical Specification~Formulation Part~pgAssembledProductPart~pgAuthorizedConfigurationStandard~pgConsumerUnitPart~pgCustomerUnitPart~pgInnerPackUnitPart~pgLaboratoryIndexSpecification~pgProcessStandard~pgTransportUnitPart~Assembled Product Part~Consumer Unit Part~Transport Unit Part~";
private static final String strEBOM_NonEBP="~pgFinishedProduct~pgPackingSubassembly~Packaging Assembly Part~pgMasterConsumerUnitPart~pgMasterCustomerUnitPart~pgMasterInnerPackUnitPart~pgMasterPackagingAssemblyPart~pgMasterPackingMaterial~pgFormulatedProduct~pgFabricatedPart~pgDeviceProductPart~pgMasterProductPart~pgIntermediateProductPart~Finished Product Part~pgAssembledProductPart~pgConsumerUnitPart~pgCustomerUnitPart~pgInnerPackUnitPart~pgTransportUnitPart~Assembled Product Part~pgBaseFormula~Consumer Unit Part~Transport Unit Part~";
private static final String strEBOMWD_NonEBP="~Packaging Assembly Part~pgFabricatedPart~pgDeviceProductPart~pgIntermediateProductPart~Finished Product Part~pgAssembledProductPart~pgConsumerUnitPart~pgCustomerUnitPart~pgInnerPackUnitPart~Assembled Product Part~Consumer Unit Part~";
private static final String strSAPBOMAsFed_NonEBP="~Packaging Assembly Part~pgFormulatedProduct~pgFabricatedPart~pgDeviceProductPart~pgIntermediateProductPart~Finished Product Part~Formulation Part~pgAssembledProductPart~Assembled Product Part~";
private static final String strWeightDim_NonEBP="~pgFinishedProduct~pgMasterFinishedProduct~pgPackingSubassembly~Finished Product Part~";
//Updated code for defect id:33335--Starts
private static final String strCompMaterial_NonEBP="~pgAncillaryRawMaterialPart~pgDeviceProductPart~pgIntermediateProductPart~Raw Material~pgRawMaterial~pgAssembledProductPart~Formulation Part~pgAssembledProductPart~Assembled Product Part~pgFabricatedPart~Packaging Material Part~pgOnlinePrintingPart~pgMasterPackagingMaterialPart~pgAncillaryPackagingMaterialPart~";
//Updated code for defect id:33335--Ends
private static final String strCompEquivalent_NonEBP="~Packaging Assembly Part~pgAncillaryPackagingMaterialPart~pgPromotionalItemPart~pgOnlinePrintingPart~pgFabricatedPart~pgAncillaryRawMaterialPart~pgDeviceProductPart~pgIntermediateProductPart~pgSoftwarePart~Packaging Material Part~Raw Material~pgRawMaterial~";
private static final String strProducingFormula_NonEBP="~pgRawMaterial~Raw Material~";
//22x Upgrade - Added Raw Material and pgAncillaryRawMaterialPart for ALM-50646 - Start
//Added the code for the Defect 51675 - Starts
private static final String strSubstanceMaterial_NonEBP="~pgRawMaterial~pgMasterPackagingMaterialPart~pgAncillaryPackagingMaterialPart~pgOnlinePrintingPart~pgFabricatedPart~Packaging Material Part~Raw Material~pgAncillaryRawMaterialPart~pgDeviceProductPart~pgIntermediateProductPart~Raw Material~Formulation Part~pgAssembledProductPart~Assembled Product Part~Packaging Assembly Part~Internal Material~pgPromotionalItemPart~";
//Added the code for the Defect 51675 - Ends
//22x Upgrade - Added Raw Material and pgAncillaryRawMaterialPart for ALM-50646 - End
private static final String strNotes_NonEBP="~pgFinishedProduct~Finished Product Part~pgIntermediateProductPart~pgMasterFinishedProduct~pgPackingSubassembly~Packaging Assembly Part~pgMasterConsumerUnitPart~pgMasterCustomerUnitPart~pgMasterPackagingAssemblyPart~pgMasterPackingMaterial~pgFabricatedPart~pgDeviceProductPart~pgMasterProductPart~pgMasterRawMaterialPart~pgSoftwarePart~pgAssembledProductPart~pgConsumerUnitPart~pgCustomerUnitPart~pgInnerPackUnitPart~pgTransportUnitPart~Assembled Product Part~Consumer Unit Part~Transport Unit Part~pgMasterInnerPackUnitPart~";
private static final String strGPSAssessment_NonEBP="~Packaging Assembly Part~pgAncillaryPackagingMaterialPart~pgAncillaryRawMaterialPart~pgDeviceProductPart~Packaging Material Part~Raw Material~pgRawMaterial~Formulation Part~pgAssembledProductPart~Assembled Product Part~";
private static final String strCountryClearance_NonEBP="~pgDeviceProductPart~Formulation Part~pgAssembledProductPart~Assembled Product Part~pgFormulatedProduct~";
private static final String strViewSubstitutes_NonEBP="~Formulation Part~Virtual Intermediate~";
private static final String strFormulaIngredient_NonEBP="~Formulation Part~Virtual Intermediate~";
private static final String strNoWeightCharacteristicDisplay="~pgAncillaryPackagingMaterialPart~pgAncillaryRawMaterialPart~pgDeviceProductPart~pgFabricatedPart~pgIntermediateProductPart~Packaging Assembly Part~pgPromotionalItemPart~Packaging Material Part~Raw Material~pgRawMaterial~Formulation Part~pgAssembledProductPart~pgConsumerUnitPart~pgCustomerUnitPart~Consumer Unit Part~pgInnerPackUnitPart~Assembled Product Part~Finished Product Part~pgFinishedProduct~pgIntermediateProductPart~";

//Added code for Requirement Id:33646 -The report shall include new tab Market Of Sale tab-Starts
private static final String strEBPMarketOfSale_CM = "~pgFabricatedPart~pgFinishedProduct~Finished Product Part~Packaging Assembly Part~";
private static final String strEBPMarketOfSale_Supplier = "~pgFabricatedPart~pgFinishedProduct~Finished Product Part~Packaging Assembly Part~pgPackingSubassembly~";
private static final String strMarketOfSale_NonEBP = "~pgFabricatedPart~pgFinishedProduct~Finished Product Part~Packaging Assembly Part~pgPackingSubassembly~";
//Added by DSM for 22x CW-05 for Requirement 49721  -changes for DSM Reports MOS Components - START
private static final String strEBPMosCompDetails_CM = "~pgFabricatedPart~pgFinishedProduct~Finished Product Part~Packaging Assembly Part~pgFinishedProduct~FinishedProduct~";
private static final String strEBPMosCompDetails_Supplier = "";
private static final String strMosCompDetails_NonEBP = "~pgFabricatedPart~pgFinishedProduct~Finished Product Part~Packaging Assembly Part~pgFinishedProduct~FinishedProduct~";
//Added by DSM for 22x CW-05 for Requirement 49721  -changes for DSM Reports MOS Components - END
//Added code for Requirement Id:33646 -The report shall include new tab Market Of Sale tab-Ends
//Added the code for Defect ID : 33186 - Family Care - DSMReport not correct for CM and Supplier User : Starts
private static final String strCompEq_MEPSEP_CM = "~Packaging Assembly Part~pgAncillaryPackagingMaterialPart~pgPromotionalItemPart~pgOnlinePrintingPart~pgFabricatedPart~pgAncillaryRawMaterialPart~pgDeviceProductPart~pgIntermediateProductPart~pgSoftwarePart~Packaging Material Part~Raw Material~";
private static final String strCompEq_MEPSEP_Supplier = "~Packaging Assembly Part~pgAncillaryPackagingMaterialPart~pgPromotionalItemPart~pgOnlinePrintingPart~pgFabricatedPart~pgAncillaryRawMaterialPart~pgDeviceProductPart~pgIntermediateProductPart~pgSoftwarePart~Packaging Material Part~Raw Material~";
		
private static final String strCompEq_MEPSEP_NonEBP = "~pgAncillaryPackagingMaterialPart~pgAncillaryRawMaterialPart~pgDeviceProductPart~pgFabricatedPart~pgIntermediateProductPart~Packaging Assembly Part~Packaging Material Part~pgOnlinePrintingPart~Raw Material~pgPromotionalItemPart~pgSoftwarePart";
//Added the code for Defect ID : 33186 - Family Care - DSMReport not correct for CM and Supplier User : Ends
//Added code for Requirement Id:33646 -The report shall include new tab Market Of Sale tab-Starts
private static final String ATTRIBUTE_PGCOSRESTRICTION = "attribute[pgCOSRestriction]";
//Added code for Requirement Id:33646 -The report shall include new tab Market Of Sale tab-Ends

//Added for 2018x.6 CW Apr CW Defect 46862 - starts
//Added the code for the Defect 51675 - Starts
private static final String strEBPSubstancesAndMaterials_MEPSEP_CM="~pgAncillaryPackagingMaterialPart~pgFabricatedPart~Packaging Assembly Part~Packaging Material Part~pgOnlinePrintingPart~pgPromotionalItemPart~pgAncillaryRawMaterialPart~Raw Material~";
private static final String strEBPSubstancesAndMaterials_MEPSEP_Supplier="~pgAncillaryRawMaterialPart~pgDeviceProductPart~pgIntermediateProductPart~pgAncillaryPackagingMaterialPart~pgFabricatedPart~Packaging Assembly Part~Packaging Material Part~pgOnlinePrintingPart~";
private static final String strSubstanceMaterial_MEPSEP_NonEBP="~pgAncillaryPackagingMaterialPart~pgFabricatedPart~Packaging Assembly Part~Packaging Material Part~pgOnlinePrintingPart~pgAncillaryRawMaterialPart~pgDeviceProductPart~pgIntermediateProductPart~Raw Material~";
//Added the code for the Defect 51675 - Ends
//Added for 2018x.6 CW Apr CW Defect 46862 - Ends

//Added for 2018x.6 May22 CW requirement 41969-Starts
private static final String strEBPDGClassification_CM="~pgAssembledProductPart~Formulation Part~Finished Product Part~pgDeviceProductPart~";
private static final String strEBPDGClassification_Supplier="~pgAssembledProductPart~Formulation Part~Finished Product Part~pgDeviceProductPart~";
private static final String strEBPDGClassification_NonEBP="~pgAssembledProductPart~Formulation Part~Finished Product Part~pgDeviceProductPart~";
//Added for 2018x.6 May22 CW requirement 41969-Ends

//Added code for Req Id : 33634 - Hyperlinks--Starts
private static final String HYPERLINK = "Hyperlink:|";
private static final String HYPERLINK_PIPE = "|";
private static final String HYPERLINK_COMPARE = "Hyperlink:";
private static final String EMXCPN = "emxCPN";
//Added code for Req Id : 33634 - Hyperlinks--Ends
//Added code for Req Id : 33655: The report shall include new tab MEP-SEP Certification--Starts
//Added the code for Defect ID : 33186 - Family Care - DSMReport not correct for CM and Supplier User -Starts
//Modified for Defect 49452:22x01 CW  -- Starts
private static final String strEBPMEPSEPCerti_CM = "~pgAncillaryPackagingMaterialPart~pgAncillaryRawMaterialPart~pgDeviceProductPart~pgFabricatedPart~pgIntermediateProductPart~pgOnlinePrintingPart~Packaging Assembly Part~Packaging Material Part~pgAncillaryRawMaterialPart~Raw Material~pgPromotionalItemPart~pgSoftwarePart~";
private static final String strEBPMEPSEPCerti_Supplier = "~pgAncillaryPackagingMaterialPart~pgAncillaryRawMaterialPart~pgDeviceProductPart~pgFabricatedPart~pgIntermediateProductPart~pgOnlinePrintingPart~Packaging Assembly Part~Packaging Material Part~pgAncillaryRawMaterialPart~Raw Material~pgPromotionalItemPart~pgSoftwarePart~";
private static final String strMEPRSEPCerti_NonEBP = "~pgAncillaryPackagingMaterialPart~pgAncillaryRawMaterialPart~pgDeviceProductPart~pgFabricatedPart~pgIntermediateProductPart~pgOnlinePrintingPart~Packaging Assembly Part~Packaging Material Part~pgAncillaryRawMaterialPart~Raw Material~pgPromotionalItemPart~pgSoftwarePart~";
//Modified for Defect 49452:22x01 CW  -- Ends
//Added the code for Defect ID : 33186 - Family Care - DSMReport not correct for CM and Supplier User -ends
//Added code for Req Id : 33655: The report shall include new tab MEP-SEP Certification--Ends
//Added code for Req Id : 34226: The report shall include new tab Part Certification--Starts
//Modified for Apr22 CW Defect 46614-starts
private static final String strEBPPartCerti_CM = "~pgDeviceProductPart~Formulation Part~Finished Product Part~pgAssembledProductPart~Assembled Product Part~pgConsumerUnitPart~Packaging Material Part~Packaging Assembly Part~";
//Modified for Apr22 CW Defect 46614-Ends
private static final String strEBPPartCerti_Supplier = "~pgDeviceProductPart~Packaging Material Part~Packaging Assembly Part~";
//Added for 2018x.6 Apr CW Requirement 41655 - starts
private static final String strPartCerti_NonEBP = "~pgDeviceProductPart~Finished Product Part~Formulation Part~pgAssembledProductPart~Assembled Product Part~pgConsumerUnitPart~Packaging Material Part~Packaging Assembly Part~Raw Material~pgRawMaterial~pgAncillaryRawMaterialPart~Internal Material~";
//Added for 2018x.6 Apr CW Requirement 41655 - Ends
private static final String strProductPart = "~pgFinishedProduct~Finished Product Part~";
//Added code for Req Id : 34226: The report shall include new tab Part Certification--Ends

//Added for Requirement 34941-- Materials And Composition New Tab--starts
private static final String ATTRIBUTE_ACTIVEINGREDIENTFLAG = "attribute[Active Ingredient Flag]";
private static final String ATTRIBUTE_ISCOLORANT = "attribute[Is Colorant]";
private static final String ATTRIBUTE_PRESERVATIVEFLAG = "attribute[Preservative Flag]";
private static final String STRQUANTITY = "TargetQuantity";
private static final String STRMAXWEIGHT = "MaxWeight";
private static final String STRCOMPONENTSUBSTANCE ="Component Substance";
private static final String ATTRFILL = "attribute[Fill]";
//Added for Requirement 34941-- Materials And Composition New Tab--ends
//Added the code for Defect ID : 33186 - Family Care - DSMReport not correct for CM and Supplier User : Starts
private static final String strEBPSAPBOMAsFed_MEPSEP_CM="~pgDeviceProductPart~pgFabricatedPart~pgIntermediateProductPart~Packaging Assembly Part~";
private static final String strEBPMarketOfSale_MEPSEP_CM="~pgFabricatedPart~Packaging Assembly Part~Raw Material~";
//Added the code for Defect ID : 33186 - Family Care - DSMReport not correct for CM and Supplier User : Ends
//Added for Req 41655:18x6 Apr CW -- Starts

private static final String strPartCertTypes = "~pgDeviceProductPart~Finished Product Part~Formulation Part~pgAssembledProductPart~Assembled Product Part~";
private static final String strPackagingPartCertTypes = "~pgConsumerUnitPart~Packaging Material Part~Packaging Assembly Part~Internal Material~";
private static final String strRawMaterialCertTypes = "~Raw Material~pgRawMaterial~pgAncillaryRawMaterialPart~";
private static final String RELATIONSHIP_PG_PLIPACKAGINGCERTIFICATIONS = PropertyUtil.getSchemaProperty(null,"relationship_pgPLIPackagingCertifications");
private static final String TYPE_PG_PLIPACKAGINGMATERIALCERTIFICATION = PropertyUtil.getSchemaProperty(null,"type_pgPLIPackagingMaterialCertification");
private static final String RELATIONSHIP_PG_CERTIFICATIONDOCUMENT = PropertyUtil.getSchemaProperty(null,"relationship_pgCertificationDocument");
private static final String PG_PACKAGING_SUPPORTDOCUMENT = "frommid["+RELATIONSHIP_PG_CERTIFICATIONDOCUMENT+"].to.name";
private static final String ATTRIBUTE_PG_CERTFICATION_STATUS = PropertyUtil.getSchemaProperty(null,"attribute_pgCertficationStatus");
private static final String RM_CERTIFICATION_EXPDATE = "tomid["+pgV3Constants.RELATIONSHIP_PGMEPSEPCERTIFICATION+"]."+pgV3Constants.SELECT_ATTRIBUTE_EXPIRATION_DATE;
private static final String RM_CERTIFICATION_STATUS = "tomid["+pgV3Constants.RELATIONSHIP_PGMEPSEPCERTIFICATION+"].attribute["+ATTRIBUTE_PG_CERTFICATION_STATUS+"]";
private static final String RM_CERTIFICATION_NAME = "to.name";
private static final String ATTRIBUTE_PG_INTENDEDCERTIFICATIONS = PropertyUtil.getSchemaProperty(null,"attribute_pgPackagingMaterialCertifications");
private static final String SELECT_ATTRIBUTE_PG_INTENDEDCERTIFICATIONS="attribute["+ATTRIBUTE_PG_INTENDEDCERTIFICATIONS+"]";
private static final String SELECT_ATTRIBUTE_PG_CERTFICATION_STATUS = "attribute["+ATTRIBUTE_PG_CERTFICATION_STATUS+"]";
private static final String SYSTEMDATEFORMAT = eMatrixDateFormat.getEMatrixDateFormat();
//Added for Req 41655:18x6 Apr CW -- Ends
//Added code for Reqirement Id: 34940 - 2018x.5 Part And Specification Report shall add  function, Business area and product category platform, Product Technology Platform,  Product Technology Chassis and Franchise  in attribute tab-Starts
private static final String PRODUCTECHNOLOGYPLATFORM="Product Technology Platform";
private static final String PRODUCTCATEGORYPLATFORM="Product Category Platform";
private static final String FRANCHISEPLATFORM="Franchise Platform";
private static final String TYPE_MATERIAL_FUNCTIONALITY="Material Functionality";
private static final String TYPE_PGPLIBUSINESSAREA="pgPLIBusinessArea";
private static final String PRODUCTECHNOLOGYCHASSIS="Product Technology Chassis";
private static final String MATERIALFUNCTION="Material Function";
private static final String BUSINESSAREA="Business area";
private static final String DATE_YMDHS = "yyyy-MM-dd HH:mm:ss";
private static final String NO_ACCESS = "No Access";
private static final String CATALINA_BASE="catalina.base";
private static final String PATH_SEPARATOR="/";	
//Added code for 2018x.6 MAY CW Requirement 43024 - Starts
private static final String REASONFORCHANGEMANFSTATUS="ReasonForChangeManfStatus";
//Added code for 2018x.6 MAY CW Requirement 43024 - Ends
private PrintWriter outLog = null;
//Defect 36905 Missing Packaging Component Type on PMP DSM Report starts
private static final String PRIMARYPACKAGINGTYPE="Primary Packaging Type";
//Defect 36905 Missing Packaging Component Type on PMP DSM Report ends
//Added code for defect id 37558 Product Form is not displayed in the Report Ends
private static final String TYPE_PG_PLIPRODUCTFORM=PropertyUtil.getSchemaProperty("type_pgPLIProductForm");
//Added code for defect id 37558 Product Form is not displayed in the Report Ends
//Added code for Reqirement Id: 34940 - 2018x.5 Part And Specification Report shall add  function, Business area and product category platform, Product Technology Platform,  Product Technology Chassis and Franchise  in attribute tab:Ends
private static final String SELECT_ATTRIBUTE_PGHASART = PropertyUtil.getSchemaProperty(null,"attribute_pgHasArt");
private static final String SELECT_ATTRIBUTE_PGHASMULTIPLEGTINS = PropertyUtil.getSchemaProperty(null,"attribute_pgHasMultipleGTINS");
private static final String ATSNAME = "ATSName";
private static final String PARTFAMILYNAME= "PartFamilyName";
private static final String SELECT_ATTR_STRUCTUREDRELEASECRITERIAREQ= PropertyUtil.getSchemaProperty(null,"attribute_pgStructuredReleaseCriteriaRequired");
private static final String SELECT_ATTR_PGLEGACYPRODUCTWEIGHT = PropertyUtil.getSchemaProperty(null,"attribute_pgLegacyProductWeight");	
private static final String SELECT_ATTR_PGLEGACYWEIGHTFACTOR = PropertyUtil.getSchemaProperty(null,"attribute_pgLegacyWeightFactor");
private static final String SELECT_ATTR_PGLEGACYWEIGHTFACTORUOM = PropertyUtil.getSchemaProperty(null,"attribute_pgLegacyWeightFactorUoM");
private static final String ATTRIBUTE = "attribute[";
private static final String CLOSINGBRACKET = "]";
//Updated for Defect Id : 32175, 32244-- Starts
String strType = "pgPackingSubassembly,Software Part,pgIntermediateProductPart,pgCustomerUnitPart,pgAssembledProductPart,pgMasterInnerPackUnitPart,pgDeviceProductPart,pgTransportUnitPart,pgAncillaryPackagingMaterialPart,pgMasterFinishedProduct,pgFormulatedProduct,pgInnerPackUnitPart,pgArtwork,pgOnlinePrintingPart,pgRawMaterial,pgMasterRawMaterialPart,pgMasterProductPart,pgMasterPackingMaterial,pgAncillaryRawMaterialPart,pgFabricatedPart,pgMasterPackagingMaterialPart,pgMasterPackagingAssemblyPart,pgMasterRawMaterial,POA,pgConsumerUnitPart,Finished Product Part,Formulation Part,Packaging Material Part,Raw Material,pgSoftwarePart,pgFinishedProduct,pgPackingMaterial,Packaging Assembly Part,pgMasterCustomerUnitPart,pgMasterConsumerUnitPart,pgPromotionalItemPart,pgFormulatedMaterial,pgSupplierInformationSheet,pgTestMethod,pgIllustration,pgMakingInstructions,pgProcessStandard,pgApprovedSupplierList,pgQualitySpecification,pgCommonPerformanceSpecification,pgRawMaterialPlantInstruction,pgConsumerDesignBasis,pgStackingPattern,Test Method Specification,pgTestMethod,pgPackingInstructions,pgStandardOperatingProcedure,pgAuthorizedConfigurationStandard,pgBaseFormula,pgCompetitiveProductPart,Formulation,pgLaboratoryIndexSpecification,pgMaterialComposition,Substance,Supplier Equivalent Part,Assembled Product Part,Consumer Unit Part,Transport Unit Part,pgDSOAffectedFPPList,pgAuthorizedTemporarySpecification,Virtual Intermediate,Formula Technical Specification";
//Updated for Defect Id : 32175, 32244-- Ends
//Added code for 2018x.6 Requirement id 36700 Ability to generate Part and Spec report with without hyperlink Starts
private static final String HYPERLINKASINPUT = "HyperlinkAsInput";
//Added code for 2018x.6 Requirement id 36700 Ability to generate Part and Spec report with without hyperlink Starts Ends
//Added code for 2018x.6 Requirement id 36701 Generate Part and Specs report directly Starts
private static final String REALTIMEPROCESS = "RealTimeProcess";
//Added code for 2018x.6 Requirement id 36701 Generate Part and Specs report directly Ends
//Added code for 2018x.6 Requirement id 36695,37821 Add new attributes in Attribute tab of Part and Spec report Starts
private static final String ATTR_PGROLLUPNETWEIGHT = PropertyUtil.getSchemaProperty(null,"attribute_pgRollUpNetWeightToCOP");
//Added code for 2018x.6 Requirement id 36695,37821 Add new attributes in Attribute tab of Part and Spec report Ends
private static final String ATTR_SHELFLIFE = PropertyUtil.getSchemaProperty(null,"attribute_ShelfLife");
//Added code for 2018x6.1 Oct requirement 38913 Starts
private static final String TYPE_ASSEMBLEDPRODUCTPART = PropertyUtil.getSchemaProperty(null,"type_AssembledProductPart");
private static final String REL_PGRELATEDCONTEXTOFUSE = PropertyUtil.getSchemaProperty(null,"relationship_pgRelatedContextOfUse");
private static final String SELECT_ATTR_ESTIMATEDUPPERLEVELOFMATERIALINPRODUCT = "attribute["+PropertyUtil.getSchemaProperty(null,"attribute_pgEstimatedupperlevelofMaterialinProduct")+"]";
private static final String SELECT_ATTR_ESTIMATEDUPPERLEVELOFMATERIALINPRODUCTUOM = "attribute["+PropertyUtil.getSchemaProperty(null,"attribute_pgEstimatedupperlevelofMaterialinProductUoM")+"]";
private static final String SELECT_ATTR_CLEARANCELEVELREQUESTED = "attribute["+PropertyUtil.getSchemaProperty(null,"attribute_pgClearanceLevelRequested")+"]";
private static final String REL_COUNTRIESTOBECLEARED = PropertyUtil.getSchemaProperty(null,"relationship_pgCountriesToBeCleared");
private static final String RELATIONSHIP_COMPONENTMATERIAL = PropertyUtil.getSchemaProperty(null,"relationship_ComponentMaterial");
private static final String TYPE_EXTERNALMATERIAL = PropertyUtil.getSchemaProperty(null,"type_ExternalMaterial");
//Added code for 2018x6.1 Oct requirement 38913 Ends
//Added for requirement 39708 Starts
private static final String ATTR_UNDERHANGACTUALLENGTH = PropertyUtil.getSchemaProperty(null,"attribute_pgUnderhangActualLength");
private static final String ATTR_UNDERHANGACTUALWIDTH = PropertyUtil.getSchemaProperty(null,"attribute_pgUnderhangActualWidth");
private static final String ATTR_OVERHANGACTUALLENGTH = PropertyUtil.getSchemaProperty(null,"attribute_pgOverhangActualLength");
private static final String ATTR_OVERHANGACTUALWIDTH = PropertyUtil.getSchemaProperty(null,"attribute_pgOverhangActualWidth");
private static final String SELECT_ATTR_PRODUCTCATEGORYPLATFORM = "attribute["+PropertyUtil.getSchemaProperty(null,"attribute_pgProductCategoryPlatform")+"]";
//Added for requirement 39708 Ends
//Added for 2018x6.1 Oct CW requirement 39692 Starts
private static final String EBPBATTERYROLLUP_CM = "~Finished Product Part~";
private static final String EBPBATTERYROLLUP_SUPPLIER = "~Finished Product Part~";
private static final String EBPBATTERYROLLUP_NONEBP = "~Finished Product Part~";
private static final String PICKLISTTYPENAME = "pgPicklistTypeName";
private static final String PICKLISTATTRIBUTENAME = "pgPicklistAttributeName";
private static final String ATTRIBUTENAME = "AttributeName";
private static final String PRODUCTPARTDETAILS = "ProductPartDetails";
private static final String PGBATTERY = "pgBattery";
public static final String FORMAT_DECIMAL_SIX = "0.000000";
//Added for 2018x6.1 Oct CW requirement 39692 Ends
//Added for 2018x6.1 Oct CW requirement 40750 Starts
private static final String ATTR_PGTRANSPORTTEMPCONTROL = PropertyUtil.getSchemaProperty(null,"attribute_pgTransportationTempControl");
//Added for 2018x6.1 Oct CW requirement 40750 Ends
//Added code for 2018x6.1 Oct CW requirement 39407 Starts
private static final String INCLUDEFOPCHILDTOBOM = "IncludeFOPChildToBOM";
//Added code for 2018x6.1 Oct CW requirement 39407 Ends
//Added code for 2018x6.1 Oct CW requirement 40223 Add new Tab Characteristics - Apollo in Part and Spec Report Starts
private static final String RELATIONSHIP_DERIVED_CHARACTERISTIC = PropertyUtil.getSchemaProperty(null,"relationship_DerivedCharacteristic");
private static final String SELECT_ATTRIBUTE_EVALUATED_CRITERIA = "attribute["+PropertyUtil.getSchemaProperty(null,"attribute_EvaluatedCriteria")+"]";
private static final String SELECT_ATTRIBUTE_PG_CHARACTERISTIC_CATEGORY = "attribute["+PropertyUtil.getSchemaProperty(null,"attribute_CharacteristicCategory")+"]";
private static final String SELECT_TM_NAME = new StringBuilder("from[").append(pgV3Constants.REL_CHARACTERISTICTESTMETHOD).append("].to.name").toString();
private static final String SELECT_TM_PHYSICALID = new StringBuilder("from[").append(pgV3Constants.REL_CHARACTERISTICTESTMETHOD).append("].to.physicalid").toString();
private static final String SELECT_TM_TYPE = new StringBuilder("from[").append(pgV3Constants.REL_CHARACTERISTICTESTMETHOD).append("].to.type").toString();
private static final String SELECT_TMRD_ID = new StringBuilder("to[").append(DomainConstants.RELATIONSHIP_REFERENCE_DOCUMENT).append("].from.id").toString();
//Updated for defect 45524 starts
private static final String SELECT_TMRD_NAME = new StringBuilder("from[").append(DomainConstants.RELATIONSHIP_REFERENCE_DOCUMENT).append("].to.name").toString();
//Updated for defect 45524 ends
private static final String SELECT_TMRD_PHYSICALID = new StringBuilder("to[").append(DomainConstants.RELATIONSHIP_REFERENCE_DOCUMENT).append("].from.physicalid").toString();
private static final String SELECT_TMRD_TYPE = new StringBuilder("to[").append(DomainConstants.RELATIONSHIP_REFERENCE_DOCUMENT).append("].from.type").toString();
private static final String SELECT_CHAR_MASTER=new StringBuilder("to[").append(RELATIONSHIP_DERIVED_CHARACTERISTIC).append("].from.physicalid").toString();
private static final String SELECT_CHAR_MASTER_NAME=new StringBuilder("to[").append(RELATIONSHIP_DERIVED_CHARACTERISTIC).append("].from.name").toString();
private static final String SELECT_CHAR_MASTER_REVISION=new StringBuilder("to[").append(RELATIONSHIP_DERIVED_CHARACTERISTIC).append("].from.revision").toString();
private static final String SELECT_CHAR_MASTER_TITLE=new StringBuilder("to[").append(RELATIONSHIP_DERIVED_CHARACTERISTIC).append("].from.attribute[Title]").toString();
private static final String SELECT_TMRD = new StringBuilder("from[").append(pgV3Constants.REL_CHARACTERISTICTESTMETHOD).append("].to.id").toString();
private static final String SELECT_CRITERIA=new StringBuilder("to[").append(RELATIONSHIP_DERIVED_CHARACTERISTIC).append("]").append( pgV3Constants.SYMBOL_DOT).append(SELECT_ATTRIBUTE_EVALUATED_CRITERIA).toString();
private static final String EBPCHARCTERISTICS_CM = "~Assembled Product Part~pgAssembledProductPart~";
private static final String EBPCHARCTERISTICS_SUPPLIER = "~Assembled Product Part~pgAssembledProductPart~";
private static final String CHARCTERISTICS_NONEBP = "~Assembled Product Part~pgAssembledProductPart~";
private static final String SELECT_CRITERIA_TITLE=new StringBuilder("to[").append(RELATIONSHIP_DERIVED_CHARACTERISTIC).append("]").append( pgV3Constants.SYMBOL_DOT).append(pgV3Constants.SELECT_ATTRIBUTE_TITLE).toString();
private static final String SELECT_ATTRIBUTE_REPORTTONEAREST = "attribute["+ATTR_PG_REPORT_NEAREST+"]";
private static final String SELECT_ATTRIBUTE_DESIGNSPECIFICS = "attribute["+PropertyUtil.getSchemaProperty(null,"attribute_pgDesignSpecifics")+"]";
private static final String SELECT_ATTRIBUTE_CHARNOTES = "attribute["+PropertyUtil.getSchemaProperty(null,"attribute_CharacteristicNotes")+"]";
private static final String SELECT_ATTRIBUTE_SEQUENCEORDER = "attribute["+PropertyUtil.getSchemaProperty(null,"attribute_SequenceOrder")+"]";
private static final String SELECT_ATTRIBUTE_CATEGORYSPECIFICS = "attribute["+PropertyUtil.getSchemaProperty(null,"attribute_pgCategorySpecifics")+"]";
private static final String SELECT_LOGICAL_ID = "logicalid";
private static final String SELECT_PHYSICAL_ID = "physicalid";
//Added code for 2018x6.1 Oct CW requirement 40223 Add new Tab Characteristics - Apollo in Part and Spec Report Ends
//Added code for 2018x6.1 Oct CW requirement 40224 Add new tab Design Parameter in Part and Spec report Starts
private static final String EBPDESIGNPARAMETER_CM = "~Assembled Product Part~pgAssembledProductPart~";
private static final String EBPDESIGNPARAMETER_SUPPLIER = "~Assembled Product Part~pgAssembledProductPart~";
private static final String DESIGNPARAMETER_NONEBP = "~Assembled Product Part~pgAssembledProductPart~";
//Added code for 2018x6.1 Oct CW requirement 40224 Add new tab Design Parameter in Part and Spec report Ends
//Added code for 2018x6.1 Oct CW requirement 40224 Add new tab Design Parameter in Part and Spec report Starts
private static final String EBPCHEMPHYSICALPROP_CM = "~Assembled Product Part~pgAssembledProductPart~Formulation Part~";
private static final String EBPCHEMPHYSICALPROP_SUPPLIER = "~Assembled Product Part~pgAssembledProductPart~Formulation Part~";
private static final String CHEMPHYSICALPROP_NONEBP = "~Assembled Product Part~pgAssembledProductPart~Formulation Part~";
//Added code for 2018x6.1 Oct CW requirement 40224 Add new tab Design Parameter in Part and Spec report Ends
//Added for Jan22_CW defect 44566 Strats
private static final String TYPE_LANGUAGE = PropertyUtil.getSchemaProperty(null,"type_Language");
//Added for Jan22_CW defect 44566 Ends
//Added for Apr22 CW requirement 41600 Starts
//Modified for Apr22 CW Defect 46592-starts
//Added by DSM Reports (Sogeti) for 2022x.5 (APR CW 2024) Defect 56855 - Start
private static final String EBPSUSTAINABILITY_CM = "~Packaging Material Part~pgConsumerUnitPart~pgMasterConsumerUnitPart~";
private static final String EBPSUSTAINABILITY_SUPPLIER = "~Packaging Material Part~pgConsumerUnitPart~pgMasterConsumerUnitPart~";
//Modified for Apr22 CW Defect 46592-Ends
private static final String SUSTAINABILITY_NONEBP = "~Packaging Material Part~pgConsumerUnitPart~pgMasterConsumerUnitPart~";
//Added by DSM Reports (Sogeti) for 2022x.5 (APR CW 2024) Defect 56855 - End
private static final String ATTR_PGPACKAGECOMPONENTOPTICALPROPERTIES = "attribute["+PropertyUtil.getSchemaProperty(null,"attribute_pgPackageComponentOpticalProperties")+"]";
//Modified for Apr22 CW Defect 46592-starts
private static final String ATTR_PGMATERIALDENSITY = "attribute["+PropertyUtil.getSchemaProperty(null,"attribute_pgMaterialDensity")+"]"+pgV3Constants.KEY_INPUTVALUE;
//Modified for Apr22 CW Defect 46592-Ends
private static final String ATTR_PGMATERIALTHICKNESS = "attribute["+PropertyUtil.getSchemaProperty(null,"attribute_pgMaterialThickness")+"]";
private static final String ATTR_PGPACKAGEDURABILITY = "attribute["+PropertyUtil.getSchemaProperty(null,"attribute_pgPackageDurability")+"]";
private static final String ATTR_PGMINERALOILSADDEDTOPRINTINGINKS = "attribute["+PropertyUtil.getSchemaProperty(null,"attribute_pgMineralOilsAddedToPrintingInks")+"]";
private static final String ATTR_PGLABELREMOVABILITY = "attribute["+PropertyUtil.getSchemaProperty(null,"attribute_pgLabelRemovability")+"]";
//Modified for Apr22 CW Defect 46592-starts
private static final String ATTR_PGPAPERWETSTRENGTH = "attribute["+PropertyUtil.getSchemaProperty(null,"attribute_pgPaperWetStrength")+"]"+pgV3Constants.KEY_INPUTVALUE;
//Modified for Apr22 CW Defect 46592-Ends
private static final String ATTR_PGPAPERDISSOLVABILITY = "attribute["+PropertyUtil.getSchemaProperty(null,"attribute_pgPaperDissolvability")+"]";
private static final String ATTR_PGINTEGRATEDLIDGLASSBOTTLEONLY = "attribute["+PropertyUtil.getSchemaProperty(null,"attribute_pgIntegratedLidGlassBottleOnly")+"]";
private static final String ATTR_PGDESIGNEDFORREUSE = "attribute["+PropertyUtil.getSchemaProperty(null,"attribute_pgDesignedforReUse")+"]";
//Added for Apr22 CW requirement 41600 Ends
//Added for Apr22 CW requirement 41656 Starts
private static final String ATTR_PGNSPCG = "attribute["+PropertyUtil.getSchemaProperty(null,"attribute_pgNSPCG")+"]";
//Added for Apr22 CW requirement 41656 Ends
//Added the code for 2018x.6 APR CW Defect 47053,47037,47013,47011 - starts
private static final String PG_PMP_CERTIFICATION_NAME = "to.from["+PropertyUtil.getSchemaProperty(null,"relationship_pgPLIPackagingCertifications")+"].to.name";
private static final String PG_PMP_CERTIFICATION_EXPDATE = "to.from["+PropertyUtil.getSchemaProperty(null,"relationship_pgPLIPackagingCertifications")+"]."+pgV3Constants.SELECT_ATTRIBUTE_EXPIRATION_DATE;
private static final String PG_PMP_CERTIFICATION_SUPPORTDOC = "to.from["+PropertyUtil.getSchemaProperty(null,"relationship_pgPLIPackagingCertifications")+"].frommid["+PropertyUtil.getSchemaProperty(null,"relationship_pgCertificationDocument")+"].to.name";
//Added the code for 2018x.6 APR CW Defect 47053,47037,47013,47011 - Ends
//Added for Apr22 CW requirement 42014 Ends
//Added for Apr22 CW requirement 41502 Starts
//Modified by DSM Reports for 2022x.5 (APR CW 2024) Defect 57310 - Start
public String strOriginatingSource = "";
//Modified by DSM Reports for 2022x.5 (APR CW 2024) Defect 57310 - End
private static final String TYPE_GLOBALSUBSCRIPTIONCOFIGURATION = "Global Subscription Configuration";
//Added for Apr22 CW requirement 41502 Ends
//Added for 2018x.6 May22 CW requirement 41969-Starts
private static final String PRODUCTPARTNAME = "Product Part Name";
private static final String PRODUCTPARTREVISION = "Product Part Revision";
private static final String PRODUCTPARTTITLE = "Product Part Title";
private static final String DGDESCRIPTION = "DG Description";
private static final String DGMLONCUP = "DGMLonCUP";
private static final String PRODUCTPARTOBJECTID = "ProductPartObjectId";
//Added for 2018x.6 May22 CW requirement 41969-Ends
//Added the code for 2018x.6 MAYCW requirement 43024 - Starts
private static final String PG_ATTR_REASONFORCHANGEMANFSTATUS = PropertyUtil.getSchemaProperty(null,"attribute_pgReasonForChangeManfStatus");
//Added the code for 2018x.6 MAYCW requirement 43024 - Ends
//Added the code for 2018x.6 MAYCW requirement 41969 - Starts
private static final String STRDGCLASSIFICATIONCOLUMN = "emxCPN.FamilyCareReport.Worksheet.DGClassification.Column";
//Added the code for 2018x.6 MAYCW requirement 41969 - Ends
//Added the code for Defect 49698 - Spec Reader Access Issue - Starts
private static final String SPECREADER = "SpecReader";
//Added the code for Defect 49698 - Spec Reader Access Issue - Ends
//Added the code for 22x.01 Feb CW Defect 49642 - Starts
private static final String SEP_VENDOR_NAME = "to["+pgV3Constants.RELATIONSHIP_SUPPLYRESPONSIBILITY+"].from.name";
private static final String SEP_VENDOR_CODE = "to["+pgV3Constants.RELATIONSHIP_SUPPLYRESPONSIBILITY+"].from."+pgV3Constants.SELECT_ATTRIBUTE_PGSHORTCODE;
//Added the code for 22x.01 Feb CW Defect 49642 - Ends
//Added the code for 22x Feb CW Requirement 45443 - Starts
private static final String EBPSUBTITUTEPARTSIN_CM="~pgConsumerUnitPart~Consumer Unit Part~pgMasterConsumerUnitPart~pgCustomerUnitPart~pgMasterCustomerUnitPart~Finished Product Part~pgMasterProductPart~pgTransportUnitPart~Transport Unit Part~Packaging Assembly Part~pgMasterPackagingAssemblyPart~pgDeviceProductPart~pgAssembledProductPart~Assembled Product Part~pgFabricatedPart~pgInnerPackUnitPart~pgMasterInnerPackUnitPart~pgIntermediateProductPart~";
private static final String EBPSUBTITUTEPARTSIN_Supplier="~pgConsumerUnitPart~Consumer Unit Part~pgMasterConsumerUnitPart~pgCustomerUnitPart~pgMasterCustomerUnitPart~Finished Product Part~pgMasterProductPart~pgTransportUnitPart~Transport Unit Part~Packaging Assembly Part~pgMasterPackagingAssemblyPart~pgDeviceProductPart~pgAssembledProductPart~Assembled Product Part~pgFabricatedPart~pgInnerPackUnitPart~pgMasterInnerPackUnitPart~pgIntermediateProductPart~";
private static final String EBPSUBTITUTEPARTSIN_NonEBP="~pgConsumerUnitPart~Consumer Unit Part~pgMasterConsumerUnitPart~pgCustomerUnitPart~pgMasterCustomerUnitPart~Finished Product Part~pgMasterProductPart~pgTransportUnitPart~Transport Unit Part~Packaging Assembly Part~pgMasterPackagingAssemblyPart~pgDeviceProductPart~pgAssembledProductPart~Assembled Product Part~pgFabricatedPart~pgInnerPackUnitPart~pgMasterInnerPackUnitPart~pgIntermediateProductPart~";
private static final String STRSUBSTITUTEPARTSINCOLUMN = "emxCPN.FamilyCareReport.Worksheet.SubstitutePartsIn.ColumnTypes";
//Added the code for 22x Feb CW Requirement 45443 - Ends
//Added for Requirement 45443:22x 01 CW -- Starts
public static final String RELATIONSHIP_EBOM_SUBSTITUTE = PropertyUtil.getSchemaProperty(null,"relationship_EBOMSubstitute");
public static final String ATTRIBUTE_PG_MINACTUALPERCENTWET = PropertyUtil.getSchemaProperty(null,"attribute_pgMinActualPercenWet");
public static final String SELECT_ATTRIBUTE_PG_MINACTUALPERCENTWET = "attribute[" + ATTRIBUTE_PG_MINACTUALPERCENTWET  + "]";
public static final String ATTRIBUTE_PG_MAXACTUALPERCENTWET = PropertyUtil.getSchemaProperty(null,"attribute_pgMaxActualPercenWet");
public static final String SELECT_ATTRIBUTE_PG_MAXACTUALPERCENTWET = "attribute[" + ATTRIBUTE_PG_MAXACTUALPERCENTWET  + "]";
public static final String ATTRIBUTE_PG_VALID_START_DATE = PropertyUtil.getSchemaProperty(null,"attribute_pgValidStartDate");
public static final String SELECT_ATTRIBUTE_PG_VALID_START_DATE = "attribute[" + ATTRIBUTE_PG_VALID_START_DATE  + "]";
public static final String ATTRIBUTE_PG_VALID_UNTIL_DATE = PropertyUtil.getSchemaProperty(null,"attribute_pgValidUntilDate");
public static final String SELECT_ATTRIBUTE_PG_VALID_UNTIL_DATE = "attribute[" + ATTRIBUTE_PG_VALID_UNTIL_DATE  + "]";
public static final String ATTRIBUTE_START_EFFECTIVITY_DATE = PropertyUtil.getSchemaProperty(null,"attribute_StartEffectivity");
public static final String SELECT_ATTRIBUTE_START_EFFECTIVITY_DATE = "attribute[" + ATTRIBUTE_START_EFFECTIVITY_DATE  + "]";
public static final String SELECT_ATTR_PG_ASSEMBLY_TYPE = "attribute[" + ATTR_PG_ASSEMBLY_TYPE  + "]";
public static final String ATTRIBUTE_BASEUNITOFMEASURE = PropertyUtil.getSchemaProperty(null,"attribute_UnitofMeasure");
public static final String SELECT_ATTRIBUTE_BASEUNITOFMEASURE = "attribute[" + ATTRIBUTE_BASEUNITOFMEASURE  + "]";
public static final String ATTRIBUTE_REFERENCE_DESIGNATOR = PropertyUtil.getSchemaProperty(null,"attribute_ReferenceDesignator");
public static final String SELECT_ATTRIBUTE_REFERENCE_DESIGNATOR = "attribute[" + ATTRIBUTE_REFERENCE_DESIGNATOR  + "]";
public static final String ATTRIBUTE_PG_OPTIONAL_COMPONENT = PropertyUtil.getSchemaProperty(null,"attribute_pgOptionalComponent");
public static final String SELECT_ATTRIBUTE_PG_OPTIONAL_COMPONENT = "attribute[" + ATTRIBUTE_PG_OPTIONAL_COMPONENT  + "]";
//Added for Requirement 45443:22x 01 CW -- Ends
//Added for Requirement 45505,45511,45517: 22x 01 CW -- Starts
public static final String ATTRIBUTE_PG_WDEXCEPTIONCOMMENT = PropertyUtil.getSchemaProperty(null, "attribute_pgWnDExcpCmt");
public static final String ATTRIBUTE_PG_WDEXCEPTIONSUPPORTDOC = PropertyUtil.getSchemaProperty(null, "attribute_pgWnDExcpSupportDoc");
public static final String ATTRIBUTE_PG_WDVALIDATIONEXCEPTION = PropertyUtil.getSchemaProperty(null, "attribute_pgWnDValExcp");
public static final String RELATIONSHIP_PG_WDVALIDATIONEXPSUPPORTDOC = PropertyUtil.getSchemaProperty(null, "relationship_pgWnDExcpSupportDoc");
//Added for Requirement 45505,45511,45517: 22x 01 CW -- Ends
//Added for Defect 49998:22x 01 -- Starts
public static final String FROM_TYPE = "from.type";
//Added code for defect: 46222--Starts
public static final String ATTRIBUTE_PGPREVIOUSREVISIONOBSOLETEDATE = PropertyUtil.getSchemaProperty(null,"attribute_pgPreviousRevisionObsoleteDate");
public static final String SELECT_ATTRIBUTE_PGPREVIOUSREVISIONOBSOLETEDATE = "attribute[" + ATTRIBUTE_PGPREVIOUSREVISIONOBSOLETEDATE  + "]";
//Added code for defect: 46222--Ends
//Adding the code for W&D Exception Support Doc - Starts
private static final String STRWDVALIDATIONEXCEPTIONSUPPORTDOC="strWDValidationExceptionSupportDoc";
//Added code for Requirement Id:46224 - Master Specification info addition to Part & Spec report - Starts 
private static final String strMasterSpecs="~pgAncillaryPackagingMaterialPart~pgAssembledProductPart~pgAncillaryRawMaterialPart~pgConsumerUnitPart~pgCustomerUnitPart~pgDeviceProductPart~pgFabricatedPart~pgFormulatedProduct~Formulation Part~pgInnerPackUnitPart~pgIntermediateProductPart~pgOnlinePrintingPart~Packaging Assembly Part~Packaging Material Part~Raw Material~pgRawMaterial~Finished Product Part~";
private static final String strMasterSpecs_Supplier="~pgAncillaryPackagingMaterialPart~pgAssembledProductPart~pgAncillaryRawMaterialPart~pgConsumerUnitPart~pgCustomerUnitPart~pgDeviceProductPart~pgFabricatedPart~pgFormulatedProduct~Formulation Part~pgInnerPackUnitPart~pgIntermediateProductPart~pgOnlinePrintingPart~Packaging Assembly Part~Packaging Material Part~Raw Material~pgRawMaterial~Finished Product Part~";
private static final String strMasterSpecs_NonEBP="~pgAncillaryPackagingMaterialPart~pgAssembledProductPart~pgAncillaryRawMaterialPart~pgConsumerUnitPart~pgCustomerUnitPart~pgDeviceProductPart~pgFabricatedPart~pgFormulatedProduct~Formulation Part~pgInnerPackUnitPart~pgIntermediateProductPart~pgOnlinePrintingPart~Packaging Assembly Part~Packaging Material Part~Raw Material~pgRawMaterial~Finished Product Part~";
//Added code for Requirement Id:46224 - Master Specification info addition to Part & Spec report - Ends 

//Added code for Requirement id 46223 - IP & Export Control Tab in Part & Spec Reports - Starts	
private static final String strEBPIpAndExportControl_CM="";
private static final String strEBPIpAndExportControl_Supplier="";
private static final String strIpAndExportControl_NonEBP="~pgAuthorizedConfigurationStandard~pgDSOAffectedFPPList~pgAncillaryPackagingMaterialPart~pgAssembledProductPart~pgAncillaryRawMaterialPart~pgAuthorizedTemporarySpecification~pgConsumerUnitPart~pgCustomerUnitPart~pgCompetitiveProductPart~pgDeviceProductPart~pgFabricatedPart~Formulation Part~pgFormulatedProduct~Formulation~Finished Product Part~pgIllustration~pgInnerPackUnitPart~pgIntermediateProductPart~pgLaboratoryIndexSpecification~pgMasterCustomerUnitPart~pgMasterConsumerUnitPart~pgMakingInstructions~pgMasterInnerPackUnitPart~pgMasterPackagingAssemblyPart~pgMasterPackagingMaterialPart~pgMasterProductPart~pgMasterRawMaterialPart~pgOnlinePrintingPart~Packaging Assembly Part~pgPromotionalItemPart~Packaging Material Part~POA~pgProcessStandard~pgQualitySpecification~pgRawMaterial~Raw Material~pgRawMaterialPlantInstruction~pgStandardOperatingProcedure~pgStackingPattern~pgTransportUnitPart~";
//Added code for Requirement id 46223 - IP & Export Control Tab in Part & Spec Reports - Ends	

//Adding the code for W&D Exception Support Doc - Ends
pgPartSpecReport pg = new pgPartSpecReport();
//Added for Defect 49998:22x 01 -- Ends
//Added the code for 22x.02 CW Requirment 46218 - Starts
public static final String ATTRIBUTE_PGMOSPOAOVERRIDELRR = PropertyUtil.getSchemaProperty("attribute_pgMOSPOAOverrideLRR");
public static final String SELECT_ATTRIBUTE_PGMOSPOAOVERRIDELRR = "attribute[" + ATTRIBUTE_PGMOSPOAOVERRIDELRR+ "]";
public static final String STR_PG_IS_PRODUCT_REQUIREMENT_MET = "pgIsFCExist";
public static final String STR_PG_IS_ART_WITH_MARKET_REQ_MET = "pgIsArtExist";
public static final String STR_PG_NON_RELEASED_ART_EXIST = "pgNonReleasedArtExist";
public static final String STR_PG_MOS_CALCULATION_OVERRIDDEN = "pgHasCOSFPPOverridden";
public static final String STR_PG_MOS_POA_OVERRIDE_LRR = "pgMOSPOAOverrideLRR";
public static final String STR_YES="Yes";
public static final String STR_NO="No";

//Added the code for 22x.02 CW Requirment 46218 - Ends
//Added the code for 22x.02 May CW Requirement 46196 - Starts
public static final String ATTRIBUTE_RELATIONSHIP_RESTRICTION = PropertyUtil.getSchemaProperty(null,"attribute_pgMaterialRestriction");
public static final String ATTRIBUTE_RELATIONSHIP_RESTRICTION_COMMENT = PropertyUtil.getSchemaProperty(null,"attribute_pgMaterialRestrictionComment");

//Added the code for 22x.02 May CW Requirement 46196 - Ends
//Added the code for 22x.02 May CW Requirement 46148 - Starts
public static final String ATTRIBUTE_CONSUMER_PRIMARY_PACKAGING_TYPE =  PropertyUtil.getSchemaProperty(null,"attribute_pgConsumerPrimaryPackagingType");
public static final String ATTRIBUTE_CONSUMER_PACK_FAMILY =  PropertyUtil.getSchemaProperty(null,"attribute_pgConsumerPackFamily");
public static final String ATTRIBUTE_CONSUMER_SECONDARY_PACKAGING_TYPE =  PropertyUtil.getSchemaProperty(null,"attribute_pgConsumerSecondaryPackagingType");
public static final String ATTRIBUTE_COMPONENT_PACK_FAMILY_LEVEL_1 =  PropertyUtil.getSchemaProperty(null,"attribute_pgComponentPackFamilyLevel1");
public static final String ATTRIBUTE_COMPONENT_PACK_FAMILY_LEVEL_2 =  PropertyUtil.getSchemaProperty(null,"attribute_pgComponentPackFamilyLevel2");
public static final String ATTRIBUTE_COMPONENT_PACK_FAMILY_LEVEL_3 =  PropertyUtil.getSchemaProperty(null,"attribute_pgComponentPackFamilyLevel3");
//Added the code for 22x.02 May CW Requirement 46148 - Ends
//Modified the code for 2022x.02 May CW Defect 52204 - Starts
private static final String STRMINIMUMPERCENTAGEWEIGHTBYWEIGHT = "Minimum Percentage Weight By Weight";
private static final String STRMAXIMUMPERCENTAGEWEIGHTBYWEIGHT = "Maximum Percentage Weight By Weight";
//Modified the code for 2022x.02 May CW Defect 52204 - Starts

//Added the code for 2022x.03 Aug CW Defect 49457 - Starts
private static final String ATTRIBUTE_FINDNUMBER = "attribute[Find Number]";
private static final String ATTRIBUTE_QUANTITY = "attribute[Quantity]";
private static final String STRLEVEL = "level";
//Added the code for 2022x.03 Aug CW Defect 49457 - End

// Added by DSM Reports (Sogeti) for 22x.04 (Dec CW 2023) Defect 56156 - Start
private static final String FROM_ALTERNATE = "from["+pgV3Constants.RELATIONSHIP_ALTERNATE+"].to.name"; 
private static final String TO_CLASSIFIED_ITEM = "to["+pgV3Constants.RELATIONSHIP_CLASSIFIEDITEM+"].from["+pgV3Constants.TYPE_PARTFAMILY+"].name"; 
private static String strPPartFamilyName = "";
// Added by DSM Reports (Sogeti) for 22x.04 (Dec CW 2023) Defect 56156 - End



//Added by DSM Reports (Sogeti) for 22x.03 (August CW 2023) Requirement 47102 - Starts
private static final String STR_VAULT_ADMINISTRATION=PropertyUtil.getSchemaProperty(null,"vault_eServiceAdministration");
//Added by DSM Reports (Sogeti) for 22x.03 (August CW 2023) Requirement 47102 - Ends

//Modified by DSM Reports for 2022x.5 (APR CW 2024) Defect 57310 - Start
public pgFamilyCareReport(Context context , String str, String strOriginatingSource ) {
	this.strOriginatingSource = strOriginatingSource;
}
//Modified by DSM Reports for 2022x.5 (APR CW 2024) Defect 57310 - End
/**Method used to generate XLS reports

 * @param context

 * @param args

 */

	/**
     * this method is to generate the Exel Sheet
     * 
     * @param args
     * @return void
     * @throws Exception
     */
// we have requirement to handle cognitive complexity 38401
public void generateFamilyCareReport(Context context,String strUserName,String strPartNames,String strChangeActions,String strReportFileName, String strReportObjectId,Map<String,String> mPassValue) throws Exception {
	try {
		String sStringResourceFile="emxCPNStringResource";
		String strCPNResource="emxCPN";
		String sLanguage = context.getSession().getLanguage();
		String strDirectoryNotCreated = "Could not create directory ";
		File fLogFolder = null;
		StringBuilder sbLogFolder = new StringBuilder();
		//Added code for 2018x.6 Requirement id 36701 Generate Part and Specs report directly Starts
		String configLOGFilePath = DomainConstants.EMPTY_STRING;
	    String strRealTimeProcess = mPassValue.get(REALTIMEPROCESS);
	    //Updated for requirement 39845 Starts
	    configLOGFilePath = EnoviaResourceBundle.getProperty(context, strCPNResource, context.getLocale(),"emxCPN.DSMReportCTRLMJob.Log.FilePath");
	    //Updated for requirement 39845 Ends
	    //Added code for 2018x.6 Requirement id 36701 Generate Part and Specs report directly Ends
	    sbLogFolder.append(configLOGFilePath).append(File.separator);
		fLogFolder = new File(sbLogFolder.toString());
		if (!fLogFolder.exists() && !fLogFolder.mkdirs())  {
			throw new IOException(strDirectoryNotCreated + fLogFolder);
		}
		//Log file for Report
		String strStartTime = null;
		String strJVM = getJVMInstance();
		strStartTime = new SimpleDateFormat(DATE_YMDHS).format(new Date());	  			
		 //Updated for requirement 39845 Starts
		if(UIUtil.isNotNullAndNotEmpty(strRealTimeProcess) && pgV3Constants.TRUE.equalsIgnoreCase(strRealTimeProcess))
			outLog = new PrintWriter(new FileOutputStream(fLogFolder.toString()+ File.separator  +"PartAndSpecificationLogSmall.log",true));
		else
			outLog = new PrintWriter(new FileOutputStream(fLogFolder.toString()+ File.separator  +"PartAndSpecificationLog.log",true));
		 //Updated for requirement 39845 Ends
		outLog.print("-------Report requested by: " +strUserName+" | "+strStartTime+" | JVM: "+strJVM+"--------\n");
	 	outLog.print("Parts: "+strPartNames+"\n");
	 	outLog.print("Change Actions: "+strChangeActions+"\n");
	 	outLog.print("Report Object Id: "+strReportObjectId+"\n");
	 	outLog.flush(); 
	 	
		//String strType = i18nNow.getI18nString("emxCPN.FamilyCareReport.queryTypes",sStringResourceFile, sLanguage);
		
        boolean bIsEBPUser = isEBP(context, strUserName);
		//boolean bHasCMAccess = hasCMAccess(context, strUserName,strPartId);
		//boolean bHasSupplierAccess = hasSupplierAccess(context, strUserName,strPartId);
			
		Map mpWeightCharacteristics = new HashMap<>();
		MapList mlParentChildWeight= new MapList();
		//BOM Begin
		Map mpBOMCharacteristics = new HashMap<>();			
		MapList mlBOMChild= new MapList();
		MapList mlParentChildBOM= new MapList();
		MapList mlParentChildEBOMWD = new MapList();
		//BOM End
		//Added For DSM Report 2018x1.1 Scope : 1 - Report shall include Substances & Martials Tab for the parts/specs with Material Composition MCP : Starts
		MapList mlSubstanceAndMaterials= new MapList();	
		//Added For DSM Report 2018x1.1 Scope : 1 - Report shall include Substances & Martials Tab for the parts/specs with Material Composition MCP : Ends
		//Added the code for the Defect : ALM 30204 (Req 27949) -On Substance & Material tab, only release parts are shown, not non-release parts. Both Release and pre-Release parts must be displayed on the tab - Starts
		MapList mlSubstanceAndMaterialsAll = new MapList();
		int iTempSubstanceAndMaterialSize =0;
		//Added the code for the Defect : ALM 30204 (Req 27949) -On Substance & Material tab, only release parts are shown, not non-release parts. Both Release and pre-Release parts must be displayed on the tab - Ends

		//Added For DSM Report 2018x1.1 Scope :10 - Create new tab for FOP BOM Substitute : Starts
		MapList mlViewSubstituteDetails = new MapList();
		int iTempViewSubSize =0; 
		Map mpViewSubDetails=null;
		MapList mlViewSubstituteDetailsAll = new MapList();
		//Added code for Requirement :29012- The report should add new View SubstituteTab-Ends
		//Added For DSM Report 2018x1.1 Scope :10 - Create new tab for FOP BOM Substitute : Ends
		Map mpCommonColumnsDetail  = new HashMap<>();
		MapList mlPlantDetails = new MapList();
		MapList mlAttribute = new MapList();
		MapList mlPerformanceCharacteristics= new MapList();
		MapList mlPerformanceCharacteristicsAll= new MapList();
		MapList mlCompMaterials=new MapList();
		MapList mlWeightChild=new MapList();
		MapList mlPeerReviewTask = new MapList();
		MapList mlCompEquiDetails=new MapList();
		Map mpCompEquiDetails = null;
		int iTempCompEquiDetails = 0;
		MapList mlCompEquiDetailsAll = new MapList();
		MapList mlWeightsAndDim=new MapList();
		//Added code for Requirement id 46223 - IP & Export Control Tab in Part & Spec Reports - Starts	
		MapList mlIpClassAll = new MapList();
		//Added code for Requirement id 46223 - IP & Export Control Tab in Part & Spec Reports - Ends	
		MapList mlSpecsDocsAll= new MapList();
		MapList mlSpecsRefDocsAll=new MapList();
		//Added the code for 22x.02 May CW Requirement 46224 - Starts
		MapList mlMasterSpecAll = new MapList();
		//Added the code for 22x.02 May CW Requirement 46224 - Ends
		MapList mlApprove=new MapList();
		MapList mlProducingFormulaAll=new MapList();
		//Sogeti: DSM Reports 2018x1.1 Sept. Req#30366
		MapList mlNotes=new MapList();
		MapList mlNotesAll=new MapList();
		//Sogeti: DSM Reports 2018x1.1 Sept. Req#30366
	
		//Added code for Requirement Id:29012-The report shall include new tab For FOP-Formula Ingredient-Starts
		MapList mlFormulaIngredient=new MapList();
		MapList mlFormulaIngredientAll=new MapList();
		Map mpFormulaIngredientTemp=null;
		
		int iTempFormulaIngredientSize=0;
		MapList mlSAPBOM=new MapList();
		MapList mlSAPBOMAll=new MapList();
		Map mpSAPBOMTemp =null;
		int iTempSAPBOMSize=0;
		
		//Added code for Reqirement Id:31965- 2018x.3 -The report shall include new Tab for GPS Assessment-Starts
		MapList mlGPSAssessments=new MapList();
		MapList mlGPSAssessmentsAll=new MapList();
		Map mpGPSAssessmentsTemp =null;
		int iTempGPSAssessmentsize=0;
		//Added for 2018x6.1 Oct CW requirement 38912 Starts
		MapList mlGPSAssessmentsListAll = null;
		//Added for 2018x6.1 Oct CW requirement 38912 Ends
		//Added code for Reqirement Id:31965- 2018x.3 -The report shall include new Tab for GPS Assessment-Starts
		
		//Added code for Requirement Id:31971 -The report shall include new tab Country Clearance tab for FOP-Starts
		MapList mlCountryClearance=new MapList();
		MapList mlCountryClearanceAll=new MapList();
		Map mpCountryClearanceTemp =null;
		int iTempCountryClearanceSize=0;
		//Added code for Requirement Id:31971-The report shall include new tab Country Clearance tab for FOP-Ends
		
		//Added code for Requirement Id:33646 -The report shall include new tab Market Of Sale tab-Starts
		MapList mlMarketOfSale=new MapList();
		MapList mlMarketOfSaleAll=new MapList();
		Map mpMarketOfSaleTemp =null;
		int iTempMarketOfSaleSize=0;
		
		//Added by DSM for 22x CW-05 for Requirement 49721  -changes for DSM Reports MOS Components - START
		MapList mlMOSCompDetails=new MapList();
		MapList mlMOSCompDetailsAll=new MapList();
		Map mpMOSCompDetailsTemp =null;
		int iTempMOSCompDetailsSize=0;
		//Added by DSM for 22x CW-05 for Requirement 49721  -changes for DSM Reports MOS Components - END
		
		//Added code for Requirement Id:33646 -The report shall include new tab Market Of Sale tab-Ends
		//Added code for Req Ids : 33656, 33871, 33872-New Tab : MEP-SEP Component Equivalents--Starts
		MapList mlCompEquiDetailsMEP = new MapList();
		String strPartPolicy = DomainConstants.EMPTY_STRING;
		Map mpMEPSEPEquv = null;
		MapList mlMEPSEPEquvAll = new MapList();
		int iTempMEPSEPEquvSize = 0;
		//Added code for Req Ids : 33656, 33871, 33872-New Tab : MEP-SEP Component Equivalents--Ends
		//Added code for Req Id : 33655 New Tab : MEP-SEP Certification--Starts
		MapList mlMEPSEPCerti = new MapList();
		MapList mlMEPSEPCertiAll = new MapList();
		Map mpMEPSEPCerti = null;
		int iTempMEPSEPCertiSize = 0;
		//Added code for Req Id : 33655 New Tab : MEP-SEP Certification--Ends
		//Added code for Req Id : 34941 New Tab: Materials & Composition--Starts
		MapList mlMaterialsAndCompositions  = new MapList();
		MapList mlMaterialsAndCompositionsAll = new MapList();
		Map mpMaterialsAndCompositions = null;
		int iTempMaterialsAndCompositionSize = 0;
		//Added code for Req Id : 34941 New Tab: Materials & Composition--Ends
		//Added code for Req Id : 34226 New Tab : Part Certification--Starts
		MapList mlPartCerti = new MapList();
		MapList mlPartCertiAll = new MapList();
		Map mpPartCerti = null;
		int iTempPartCertiSize = 0;
		//Added code for Req Id : 34226 New Tab : Part Certification--Ends
		//Added code for Req Ids: 34946, 34306, 34307, 34308, 34309, 34311, 34312, 34313, 34314 New Tab: Alternates--Starts
		MapList mlAlternate = new MapList();
		MapList mlAlternateAll = new MapList();
		Map mpAlternate = null;
		int iTempAlternateSize = 0;
		//Added code for Req Ids: 34946, 34306, 34307, 34308, 34309, 34311, 34312, 34313, 34314 New Tab: Alternates--Ends
		//Added code for 2018x.6 Requirement 37983, 38062 Add certification section to the Part Component Equivalents tab Starts
		MapList mlCertification = new MapList();
		//Added code for 2018x.6 Requirement 37983, 38062 Add certification section to the Part Component Equivalents tab Ends
		//Added code for 2018x6.1 Oct CW requirement 39692 Add new tab Battery Rollup in Part and Spec report Starts
		MapList mlBatteryRollUpAll = new MapList();
		Map<String,Object> mpBatteryRollUpTemp = new HashMap<>();
		MapList mlBatteryRollUp = new MapList();
		int iBatteryRollUpsize = 0;
		//Added code for 2018x6.1 Oct CW requirement 39692 Add new tab Battery Rollup in Part and Spec report Ends
		//Added for 2018x6.1 Dec CW Requirement 39976 Starts
		MapList mlCharacteristicsAll = new MapList();
		Map<String,Object> mpCharacteristicsTemp = new HashMap<>();
		MapList mlCharacteristics = new MapList();
		int iCharacteristicssize = 0;
		//Added for 2018x6.1 Dec CW Requirement 39976 Ends
		//Added for 2018x6.1 Dec CW Requirement 40224 Starts
		MapList mlDesignParameterAll = new MapList();
		Map<String,Object> mpDesignParameterTemp = new HashMap<>();
		MapList mlDesignParameter = new MapList();
		int iDesignParametersize = 0;
		//Added for 2018x6.1 Dec CW Requirement 40224 Ends
		//Added code for 2018x6.1 Oct CW requirement 40942 Add new tab Chem/Phys Properties in Part and Spec report Starts
		MapList mlChemPhysicalPropertiesAll = new MapList();
		Map<String,Object> mpChemPhysicalPropertiesTemp = new HashMap<>();
		MapList mlChemPhysicalProperties = new MapList();
		int iChemPhysicalPropertiessize = 0;
		//Added code for 2018x6.1 Oct CW requirement 40942 Add new tab Chem/Phys Properties in Part and Spec report Ends
		//Added code for 2018x6.1 Oct CW requirement 40942 Add new tab Chem/Phys Properties in Part and Spec report Starts
		MapList mlSustainabilityAll = new MapList();
		Map<String,Object> mpSustainabilityTemp = new HashMap<>();
		MapList mlSustainability = new MapList();
		int iSustainabilitysize = 0;
		
		//Added the code for 2018x.6  MAY CW Requirement 41969 - starts
		MapList mlDGClassificationAll = new MapList();
		Map<String,Object> mpDGClassificationTemp = new HashMap<>();
		MapList mlDGClassification = new MapList();
		int iDGClassificationsize = 0;
		//Added the code for 2018x.6  MAY CW Requirement 41969 - Ends
		
		//Added the code for 22x Feb CW Requirement 45443 - Starts
		//MapList mlSubstitutePartsInAll = new MapList();
		Map<String,Object> mpSubstitutePartsInTemp = new HashMap<>();
		MapList mlSubstitutePartsIn = new MapList();
		int iSubstitutePartsInsize = 0;
		//Added the code for 22x Feb CW Requirement 45443 - Ends
		
		
		//Added code for 2018x6.1 Oct CW requirement 40942 Add new tab Chem/Phys Properties in Part and Spec report Ends
		StringList slIndividualPartNames = new StringList();
		StringList slSelect = new StringList(10);			
		slSelect.add("id");	
		slSelect.add("attribute[Title]");	
		slSelect.add("current");
		slSelect.add("name");	
		slSelect.add("type");
		slSelect.add("revision");
		slSelect.add("last.id");
		slSelect.add(DomainConstants.SELECT_POLICY);
		String strPartCurrentState=null;
		String strPartName=null;
		int iTempSize=0;
		int iTempNoteSize=0;
		//Added code for Reqirement Id:31275-The report shall include new tab for SAP BOM As Fed-Starts
		//Added code for Reqirement Id:31275-The report shall include new tab for SAP BOM As Fed-Ends
		StringBuffer sbRelPattern = new StringBuffer();		
		//Updated code for defect id: 32246--Starts
		sbRelPattern.append(pgV3Constants.RELATIONSHIP_ROUTETASK);
		//Updated code for defect id: 32246--Ends
		sbRelPattern.append(",");
		//Updated code for defect id: 32246--Starts
		sbRelPattern.append(RELATIONSHIP_PROJECT_TASK);
		//Updated code for defect id: 32246--Ends
		StringBuffer sbTypePattern = new StringBuffer();
		//Updated code for defect id: 32246--Starts
		sbTypePattern.append(TYPE_INBOX_TASK);
		//Updated code for defect id: 32246--Ends
		sbTypePattern.append(",");
		sbTypePattern.append(pgV3Constants.TYPE_PERSON);
		
		StringList slDuplicates=new StringList();
		String strRelName = DomainConstants.EMPTY_STRING;
		// Added by DSM Reports (Sogeti) for 22x.04 (Dec CW 2023) Defect 56156 - Start
		strPPartFamilyName = "";
		// Added by DSM Reports (Sogeti) for 22x.04 (Dec CW 2023) Defect 56156 - End
       //Code for Change Action ---Begin				
		if(UIUtil.isNotNullAndNotEmpty(strChangeActions)){
			String strConnectedParts = getConnectedPartFromCA(context,strChangeActions);
			if(UIUtil.isNotNullAndNotEmpty(strPartNames))
				strPartNames = strPartNames+pgV3Constants.SYMBOL_COMMA+strConnectedParts;
			else
				strPartNames = strConnectedParts;
		}
		//Code for Change Action ---End
		//Added code for 2018x.6 Requirement 36698, 37286, 37290, 37294, 37295 Report of BOM children parts  Starts 
		String strExpandProductChildBOM = mPassValue.get("ExpandProductChildBOM");
		if(pgV3Constants.TRUE.equalsIgnoreCase(strExpandProductChildBOM)){
			String strChildPartNames = getExpandProductChildBOM(context,strPartNames,strUserName,mPassValue);
			strPartNames = strPartNames+pgV3Constants.SYMBOL_COMMA+strChildPartNames;
		}
		//Added code for 2018x.6 Requirement 36698, 37286, 37290, 37294, 37295 Report of BOM children parts  Ends
		//Added code for 2018x6.1 Oct CW requirement 39407 Starts
		String strIncludeFOPChildToBOM = mPassValue.get(INCLUDEFOPCHILDTOBOM);
		if(pgV3Constants.TRUE.equalsIgnoreCase(strIncludeFOPChildToBOM)){
			String strChildPartNames = getFOPMaterials(context,strPartNames,strUserName,mPassValue);
			strPartNames = strPartNames+pgV3Constants.SYMBOL_COMMA+strChildPartNames;
		}
		//Added code for 2018x6.1 Oct CW requirement 39407 Ends
		//Added for Apr22 CW requirement 42019 Starts
		String strIncludeMatCompFromCompEquv = mPassValue.get("IncludeMatCompFromCompEquv");
		if(pgV3Constants.TRUE.equalsIgnoreCase(strIncludeMatCompFromCompEquv)) {
			String strMatComPartNames = getMEPSEPFromPart(context,strPartNames,mPassValue);
			strPartNames = strPartNames+pgV3Constants.SYMBOL_COMMA+strMatComPartNames;
		}
		//Added for Apr22 CW requirement 42019 Ends
			//Code for Part ---Begin
			String strPartReleaseId	= "";
			String strPartState = "";
			Map mPartSelects = null;
			DomainObject domPart = null;
			MapList mlReleaseRevisions = new  MapList();
	        slIndividualPartNames = FrameworkUtil.split(strPartNames, ",");
	        //Added code to reduce parameter starts
			String strLatestReleasePartOnly = mPassValue.get("LatestReleasePartOnly");
			String strSelectedtabs = mPassValue.get("SelectedTabs");
			String strexpandProductBOM = mPassValue.get("ExpandProductBOM");
			//Added for Defect 40145 - starts
			boolean isReport = true;
			//Added code to reduce parameter starts
			for (Object PartName : slIndividualPartNames) {
				strPartName = String.valueOf(PartName).trim();
				isReport = isReportExist(context,strReportObjectId);
				if(!isReport) {
					break;
				}
				//Added for Defect 40145 - ends
				outLog.print("Processing : "+strPartName+"\n");
			 	outLog.flush(); 
				//Added for Added For DSM Report 2018x1.1 Scope 13.	Requirement # 27949 :Starts 
				MapList mlPartRelease = new MapList();
				MapList mlPart = new MapList();	
				//Added by DSM Reports (Sogeti) for 22x.04 (December CW 2023) Defect 54465 - Starts
				MapList mlPartTempRelease = new MapList();
				boolean isContextPushedforFindObjects = false;
				MapList mpMEPSEPPartRelease = new MapList();
				//Added byDSM Reports (Sogeti) for 22x.04 (December CW 2023) Defect 54465 - Ends
				
				if(UIUtil.isNotNullAndNotEmpty(strLatestReleasePartOnly) && strLatestReleasePartOnly.equals("true")) {
					//Code to feth the Latest Release Parts only
					mlPartRelease = DomainObject.findObjects(context,strType,strPartName,"*","*",pgV3Constants.VAULT_ESERVICEPRODUCTION,"(current==Release)",false,slSelect);
					//Added by DSM Reports (Sogeti) for 22x.04 (December CW 2023) Defect 54465 - Starts
					mlPartTempRelease = pg.getMEPSEPforSpecReaderEBPUser(context, strType,strPartName, strOriginatingSource);
					if(null != mlPartTempRelease && !mlPartTempRelease.isEmpty()) {
						mlPartRelease = mlPartTempRelease;
					}
					//Added byDSM Reports (Sogeti) for 22x.04 (December CW 2023) Defect 54465 - Ends
					//Fetching Highest Release revision --Begin	
					mlPartRelease.sort(DomainConstants.SELECT_REVISION, "descending", "string");
					for (int iRelRevNum = 0; iRelRevNum < mlPartRelease.size(); iRelRevNum++) {
						Map mReleaseHighestRevision =(Map)mlPartRelease.get(iRelRevNum);								
						mlPart.add(mReleaseHighestRevision);
						break;
					}
					//Fetching Highest Release revision --End
					} else {
					//Code to feth Latest Release Parts and any existing preliminary/pre-Release 
					mlPartRelease = DomainObject.findObjects(context,strType,strPartName,"*","*",pgV3Constants.VAULT_ESERVICEPRODUCTION,"(current==Release)",false,slSelect);
					mlPart = DomainObject.findObjects(context,strType,strPartName,"*","*",pgV3Constants.VAULT_ESERVICEPRODUCTION,"(current!=Release && current!=Obsolete) && revision==last",false,slSelect);
					//Fetching Highest Release revision --Begin	
					mlPartRelease.sort(DomainConstants.SELECT_REVISION, "descending", "string");
					for (int iRelRevNum = 0; iRelRevNum < mlPartRelease.size(); iRelRevNum++) {
						Map mReleaseHighestRevision =(Map)mlPartRelease.get(iRelRevNum);								
						mlPart.add(mReleaseHighestRevision);
						break;
					}
					//Fetching Highest Release revision --End
					}
				//Added for Added For DSM Report 2018x1.1 Scope 13.	Requirement # 27949 :Ends 
				if(mlPart.size()>0 && mlPart!=null){
					Iterator itr = mlPart.iterator();
					StringList slPartInfo = new StringList();
					slPartInfo.add(DomainConstants.SELECT_TYPE);
					slPartInfo.add(DomainConstants.SELECT_POLICY);
					Map<String,Object> mpPartInfo = new HashMap<>();
					while(itr.hasNext()){
						//Added by DSM Reports (Sogeti) for 22x.04 (December CW 2023) Defect 54465 - Starts
						DomainObject dobjPart = null;
						//Added byDSM Reports (Sogeti) for 22x.04 (December CW 2023) Defect 54465 - ends
						Map mp = (Map)itr.next();
						String strPartObjectId= (String)mp.get("id");									
						String strPartType = "";
						boolean bAccess = accessCheck(context,strUserName,strPartObjectId);
						//Added by DSM Reports (Sogeti) for 22x.04 (December CW 2023) Defect 54465 - Starts
						if(SPECREADER.equalsIgnoreCase(strOriginatingSource) && (pgV3Constants.POLICY_MANUFACTUREREQUIVALENT.equals((String)mp.get(DomainConstants.SELECT_POLICY)) || pgV3Constants.POLICY_SUPPLIEREQUIVALENT.equals((String) mp.get(DomainConstants.SELECT_POLICY)))) {
							bAccess = true;
						}
						//Added byDSM Reports (Sogeti) for 22x.04 (December CW 2023) Defect 54465 - Ends
						if (bAccess) {			
						//Find out if user is EBP and has Supplier or CM Authorized to Use or Authorized to Produce Access	
							boolean bHasTabAccess = false;
							boolean bHasCMAccess = hasCMAccess(context, strUserName,strPartObjectId);
							boolean bHasSupplierAccess = hasSupplierAccess(context, strUserName,strPartObjectId);
							boolean bIsAuthorizedToProduce = isAuthorizedToProduce(context, strUserName, strPartObjectId);
							//Added by DSM Reports (Sogeti) for 22x.04 (December CW 2023) Defect 54465 - Starts
							boolean isContextPushedforSpecMEP = false;
							if(SPECREADER.equalsIgnoreCase(strOriginatingSource) && (pgV3Constants.POLICY_MANUFACTUREREQUIVALENT.equals((String)mp.get(DomainConstants.SELECT_POLICY)) || pgV3Constants.POLICY_SUPPLIEREQUIVALENT.equals((String)mp.get(DomainConstants.SELECT_POLICY)))) {
								bHasCMAccess = true;
								bHasSupplierAccess = true;
								bIsAuthorizedToProduce = true;
							}	
							//Added byDSM Reports (Sogeti) for 22x.04 (December CW 2023) Defect 54465 - Ends	
							if(!slDuplicates.contains(strPartObjectId)){
								//Added by DSM Reports (Sogeti) for 22x.04 (December CW 2023) Defect 54465 - Starts
								try {
								if(!pgV3Constants.PERSON_USER_AGENT.equalsIgnoreCase(context.getUser()) && SPECREADER.equalsIgnoreCase(strOriginatingSource) && (pgV3Constants.POLICY_MANUFACTUREREQUIVALENT.equals((String)mp.get(DomainConstants.SELECT_POLICY)) || pgV3Constants.POLICY_SUPPLIEREQUIVALENT.equals((String)mp.get(DomainConstants.SELECT_POLICY)))) {
									ContextUtil.pushContext(context,PropertyUtil.getSchemaProperty(context,pgV3Constants.PERSON_USER_AGENT),DomainConstants.EMPTY_STRING,DomainConstants.EMPTY_STRING);
									isContextPushedforSpecMEP = true;
								}
								//Added byDSM Reports (Sogeti) for 22x.04 (December CW 2023) Defect 54465 - Ends
								dobjPart = DomainObject.newInstance(context, strPartObjectId);
								mpPartInfo = dobjPart.getInfo(context,slPartInfo);
								strPartType= (String)mpPartInfo.get(DomainConstants.SELECT_TYPE);
								// Added by DSM Reports (Sogeti) for 22x.04 (Dec CW 2023) Defect 56156 - Start
								strPPartFamilyName = pg.getPartFamilyName(context, dobjPart, outLog, strOriginatingSource);
								// Added by DSM Reports (Sogeti) for 22x.04 (Dec CW 2023) Defect 56156 - End
								//Added code for Req Ids: 33656, 33871, 33872 New Tab: MEP-SEP Component Equivalents--Starts
								strPartPolicy =(String)mpPartInfo.get(DomainConstants.SELECT_POLICY);
								//Added code for Req Ids: 33656, 33871, 33872 New Tab: MEP-SEP Component Equivalents--Ends
								//Calling 9 methods for all 9 Tabs
								//Common Map for the first 5 Columns
								//Modified by DSM Reports (Sogeti) for 2022x.4 (DEC CW 2023) Defect 55875 - Start	
								mpCommonColumnsDetail = getCommonColumnsDetail(context,strUserName,dobjPart);
								//Modified by DSM Reports (Sogeti) for 2022x.4 (DEC CW 2023) Defect 55875 - End	
								//For Weight Characteristics --Begin	
								//Added by DSM Reports (Sogeti) for 22x.04 (December CW 2023) Defect 54465 - Starts
								} finally {
									if(isContextPushedforSpecMEP){
										ContextUtil.popContext(context);
										isContextPushedforSpecMEP = false;
									}
								}
								//Added byDSM Reports (Sogeti) for 22x.04 (December CW 2023) Defect 54465 - Ends
								//Added code for Requirement Id:33635 -The report should only show tabs which user selected as the input--Starts
								if(strSelectedtabs.contains(TAB_WEIGHTCHAR)){
								//Added code for Requirement Id:33635 -The report should only show tabs which user selected as the input--Ends
								mpWeightCharacteristics=getWeightCharacteristics(context,strUserName,dobjPart,mpCommonColumnsDetail);		
										
								//Part Family Name -- Begin										
								// Added by DSM Reports (Sogeti) for 22x.04 (Dec CW 2023) Defect 56156 - Start
								mpWeightCharacteristics.put("PartFamilyName", strPPartFamilyName);
								// Added by DSM Reports (Sogeti) for 22x.04 (Dec CW 2023) Defect 56156 - End
								//Part Family Name --End
										
								mpWeightCharacteristics.put("CommonColumns", mpCommonColumnsDetail);								
								mpWeightCharacteristics.put("ParentName", mpCommonColumnsDetail.get(DomainConstants.SELECT_NAME));
								mpWeightCharacteristics.put("ParentTitle", mpCommonColumnsDetail.get(pgV3Constants.SELECT_ATTRIBUTE_TITLE));
								mpWeightCharacteristics.put("ParentCurrent", mpCommonColumnsDetail.get(pgV3Constants.SELECT_CURRENT));
								//Code for requirement to addition of revision and state on all tabs except attribute -- Starts
								mpWeightCharacteristics.put("ParentRevision", mpCommonColumnsDetail.get(pgV3Constants.SELECT_REVISION));
								//Code for requirement to addition of revision and state on all tabs except attribute -- Ends
								if(mpCommonColumnsDetail.get("to[Derived].from.name") != null){
									mpWeightCharacteristics.put("DerivedFromName", mpCommonColumnsDetail.get("to[Derived].from.name"));
									//Added code for Req Id : 33634 - Hyperlinks--Starts
									mpWeightCharacteristics.put("DerivedFromId", mpCommonColumnsDetail.get("to[Derived].from.id"));
									//Added code for Req Id : 33634 - Hyperlinks--Ends
								} else {
									mpWeightCharacteristics.put("DerivedFromName", "");
									//Added code for Req Id : 33634 - Hyperlinks--Starts
									mpWeightCharacteristics.put("DerivedFromId", "");
									//Added code for Req Id : 33634 - Hyperlinks--Ends
								}
								if(mpCommonColumnsDetail.get("to[Derived].from.attribute[Title]") != null){
									mpWeightCharacteristics.put("DerivedFromTitle", mpCommonColumnsDetail.get("to[Derived].from.attribute[Title]"));
								} else{
									mpWeightCharacteristics.put("DerivedFromTitle", "");
								}
								
								//Added the code for the Defect ID : 25104 - CA Tab is Empty : Starts
								if(mpCommonColumnsDetail.get("CARealizedName") != null && mpCommonColumnsDetail.get("CAProposedName") != null) {
									mpWeightCharacteristics.put("ChangeAction", mpCommonColumnsDetail.get("CARealizedName"));
									//Added code for Req Id : 33634 - Hyperlinks--Starts
									mpWeightCharacteristics.put("sCAId",mpCommonColumnsDetail.get("sCAId"));
									//Added code for Req Id : 33634 - Hyperlinks--Ends
								} else if(mpCommonColumnsDetail.get("CARealizedName") != null){
									mpWeightCharacteristics.put("ChangeAction", mpCommonColumnsDetail.get("CARealizedName"));
									//Added code for Req Id : 33634 - Hyperlinks--Starts
									mpWeightCharacteristics.put("sCAId",mpCommonColumnsDetail.get("sCAId"));
									//Added code for Req Id : 33634 - Hyperlinks--Ends
								} else if(mpCommonColumnsDetail.get("CAProposedName") != null){
									mpWeightCharacteristics.put("ChangeAction", mpCommonColumnsDetail.get("CAProposedName"));
									//Added code for Req Id : 33634 - Hyperlinks--Starts
									mpWeightCharacteristics.put("sCAId",mpCommonColumnsDetail.get("sCAId"));
									//Added code for Req Id : 33634 - Hyperlinks--Ends
								} else {
									mpWeightCharacteristics.put("ChangeAction", "");
									//Added code for Req Id : 33634 - Hyperlinks--Starts
									mpWeightCharacteristics.put("sCAId", "");
									//Added code for Req Id : 33634 - Hyperlinks--Ends
								}
								//Added the code for the Defect ID : 25104 - CA Tab is Empty : Ends
								if(mpCommonColumnsDetail.get("attribute[Reason for Change]") != null){
									mpWeightCharacteristics.put("CAReasonForChange", mpCommonColumnsDetail.get("attribute[Reason for Change]"));											
								} else {
									mpWeightCharacteristics.put("ChangeAction", "");
								}
								//Added the code for Defect ID : 33186 - Family Care - DSMReport not correct for CM and Supplier User : Starts
								if(strPartPolicy.equalsIgnoreCase(pgV3Constants.POLICY_MANUFACTUREREQUIVALENT) || strPartPolicy.equalsIgnoreCase(pgV3Constants.POLICY_SUPPLIEREQUIVALENT)){
									bHasTabAccess=false;
								} else{
									bHasTabAccess = getUserTabAccess(bIsEBPUser, bHasCMAccess, bHasSupplierAccess, strPartType, strEBPWeightCharacteristics_CM, strEBPWeightCharacteristics_Supplier, strWeightCharacteristics_NonEBP);
								}
								//Added the code for Defect ID : 33186 - Family Care - DSMReport not correct for CM and Supplier User : Ends
								//2018x2_December BOM should not be displayed in the Weights and CHaracteristics Tab
								//Updated for Defect 42639 2018x6_June
								if(bHasTabAccess && !strNoWeightCharacteristicDisplay.contains("~"+strPartType+"~")) {
									mlParentChildWeight=addingParentChildWeights(context,mlWeightChild,mpWeightCharacteristics,mpCommonColumnsDetail);
								}
								}
								//For Weight Characteristics --End
								//For Bill Of Materials --Begin	
								//if type - FOP APP, DPP,FOP, && User == EMP, non-emp, or CM authorized to Produced,
								//Code to add BOM elements if user is EMP, Non-EMP or Authorized to Producte
								//boolean bIsEBP = isEBP(context, strUserName);
								//boolean bIsAuthorizedToProduce = isAuthorizedToProduce(context, strUserName,strPartObjectId);
								////if (!bIsEBP) 
								//{
								//	mpBOMCharacteristics=getBOMCharacteristics(context,strUserName,dobjPart,mpCommonColumnsDetail);
								//} else {
									//ONLY display BOM DATA for CM if they are IsAuthorizedToProduce
									//if (strPartType.equals("Finished Product Part") || strPartType.equals("pgFinishedProduct") || strPartType.equals("pgFormulatedProduct") || strPartType.equals("Formulation Part") || strPartType.equals("pgAssembledProductPart") || strPartType.equals("pgDeviceProductPart") || strPartType.equals("pgIntermediateProductPart"))
									//{
									//	if (bIsAuthorizedToProduce) {
									//		mpBOMCharacteristics=getBOMCharacteristics(context,strUserName,dobjPart,mpCommonColumnsDetail);
									//	}
									//} else {
								if(strSelectedtabs.contains(TAB_BOM) || strSelectedtabs.contains(TAB_EBOMWD)){
									//Added the code for Defect 49698 - Spec Reader Access Issue - Starts
									boolean hasAccess = false;
									boolean isContextPushed = false;
								try {
									if(SPECREADER.equalsIgnoreCase(strOriginatingSource)) {
										//Added by DSM Reports (Sogeti) for 2022x.4 (DEC CW 2023) Defect 54465 - Start
										hasAccess = accessCheck(context, strUserName, strPartObjectId);
										//Added by DSM Reports (Sogeti) for 2022x.4 (DEC CW 2023) Defect 54465 - Start
										if(hasAccess) {
								//Pushing User Agent Context to get the Data if the Spec Reader User have access
											ContextUtil.pushContext(context,PropertyUtil.getSchemaProperty(context,"User Agent"),DomainConstants.EMPTY_STRING,DomainConstants.EMPTY_STRING);
											isContextPushed = true;
											
										}
									}
									//Added the code for Defect 49698 - Spec Reader Access Issue - Ends
								mpBOMCharacteristics=getBOMCharacteristics(context,strUserName,dobjPart,mpCommonColumnsDetail);
									//}
									//}
								if(!mpBOMCharacteristics.isEmpty()){
									mpBOMCharacteristics.put("CommonColumns", mpCommonColumnsDetail);
									mpBOMCharacteristics.put("ParentName", mpCommonColumnsDetail.get(DomainConstants.SELECT_NAME));
									mpBOMCharacteristics.put("ParentTitle", mpCommonColumnsDetail.get(pgV3Constants.SELECT_ATTRIBUTE_TITLE));
									mpBOMCharacteristics.put("ParentCurrentState", mpCommonColumnsDetail.get(pgV3Constants.SELECT_CURRENT));
									mpBOMCharacteristics.put("ParentRevision", mpCommonColumnsDetail.get(pgV3Constants.SELECT_REVISION));

									//Part Family Name -- Begin

									// Added by DSM Reports (Sogeti) for 22x.04 (Dec CW 2023) Defect 56156 - Start
									mpBOMCharacteristics.put("PartFamilyName", strPPartFamilyName);
									// Added by DSM Reports (Sogeti) for 22x.04 (Dec CW 2023) Defect 56156 - End
									//Part Family Name --End
								
									//Modified For Alternate Name --Begin
									StringList slAlternateNames = new StringList();
									slAlternateNames.addElement(DomainConstants.SELECT_NAME);
									// Navigation from Part should be only on to direction not both directions
									MapList mlBOMParentAlternate= (MapList)dobjPart.getRelatedObjects(context, pgV3Constants.RELATIONSHIP_ALTERNATE, pgV3Constants.TYPE_PART, slAlternateNames, SL_REL_BOM_SELECT, false,true, (short)1, null, null, 0);
									StringList slAlternateNamesAll = new StringList();
									String strAlternateNamesAll=DomainConstants.EMPTY_STRING;
									if(mlBOMParentAlternate.size()>0){
										for(int k=0;k<mlBOMParentAlternate.size();k++){
											String strAlternateName =DomainConstants.EMPTY_STRING;
											Map mpAlternateName=(Map)mlBOMParentAlternate.get(k);
											strAlternateName = (String)mpAlternateName.get("name");
											slAlternateNamesAll.add(strAlternateName);											
										}											
										strAlternateNamesAll=  slAlternateNamesAll.toString();
											strAlternateNamesAll = strAlternateNamesAll.replace("[", "").replace("]", "");											
										}										
										mpBOMCharacteristics.put("AlternateName", strAlternateNamesAll);	
										//Modified For Alternate Name --End
									
										if(mpCommonColumnsDetail.get("to[Derived].from.name") != null){
											mpBOMCharacteristics.put("DerivedFromName", mpCommonColumnsDetail.get("to[Derived].from.name"));
											//Added code for Req Id : 33634 - Hyperlinks--Starts
											mpBOMCharacteristics.put("DerivedFromId", mpCommonColumnsDetail.get("to[Derived].from.id"));
											//Added code for Req Id : 33634 - Hyperlinks--Ends
										} else {
											mpBOMCharacteristics.put("DerivedFromName", "");
											//Added code for Req Id : 33634 - Hyperlinks--Starts
											mpBOMCharacteristics.put("DerivedFromId", "");
											//Added code for Req Id : 33634 - Hyperlinks--Ends
										}
										if(mpCommonColumnsDetail.get("to[Derived].from.attribute[Title]") != null){
											mpBOMCharacteristics.put("DerivedFromTitle", mpCommonColumnsDetail.get("to[Derived].from.attribute[Title]"));
										} else{
											mpBOMCharacteristics.put("DerivedFromTitle", "");
										}																	
									    //Code Upgrade for 2018x Data Model - Starts
										if((mpCommonColumnsDetail.get("CARealizedName") != null && mpCommonColumnsDetail.containsKey("CARealizedName")) && (mpCommonColumnsDetail.get("CAProposedName") != null &&  mpCommonColumnsDetail.containsKey("CAProposedName"))) {
											mpBOMCharacteristics.put("ChangeAction", mpCommonColumnsDetail.get("CARealizedName"));
											//Added code for Req Id : 33634 - Hyperlinks--Starts
											mpBOMCharacteristics.put("sCAId", mpCommonColumnsDetail.get("sCAId"));
											//Added code for Req Id : 33634 - Hyperlinks--Ends
										} else if (mpCommonColumnsDetail.get("CARealizedName") != null && mpCommonColumnsDetail.containsKey("CARealizedName")){
											mpBOMCharacteristics.put("ChangeAction", mpCommonColumnsDetail.get("CARealizedName"));
											//Added code for Req Id : 33634 - Hyperlinks--Starts
											mpBOMCharacteristics.put("sCAId", mpCommonColumnsDetail.get("sCAId"));
											//Added code for Req Id : 33634 - Hyperlinks--Ends
										} else if( mpCommonColumnsDetail.get("CAProposedName") != null && mpCommonColumnsDetail.containsKey("CAProposedName")) {
											mpBOMCharacteristics.put("ChangeAction", mpCommonColumnsDetail.get("CAProposedName"));
											//Added code for Req Id : 33634 - Hyperlinks--Starts
											mpBOMCharacteristics.put("sCAId", mpCommonColumnsDetail.get("sCAId"));
											//Added code for Req Id : 33634 - Hyperlinks--Ends
										} else {
											
											mpBOMCharacteristics.put("ChangeAction", "");
											//Added code for Req Id : 33634 - Hyperlinks--Starts
											mpBOMCharacteristics.put("sCAId", "");
											//Added code for Req Id : 33634 - Hyperlinks--Ends
										}
										//Code Upgrade for 2018x Data Model - Ends
										if(mpCommonColumnsDetail.get("attribute[Reason for Change]") != null && mpCommonColumnsDetail.containsKey("attribute[Reason for Change]")){
											mpBOMCharacteristics.put("CAReasonForChange", mpCommonColumnsDetail.get("attribute[Reason for Change]"));											
										} else {
											mpBOMCharacteristics.put("CAReasonForChange", "");
										}
										
										mpBOMCharacteristics.put("frommid[EBOM Substitute]", "False");
										mlBOMChild = getBOMDataWithRestrictedDataCheck(context,dobjPart,strUserName,strexpandProductBOM);
										//Added the code for Defect ID : 33186 - Family Care - DSMReport not correct for CM and Supplier User : Starts
										if(strPartPolicy.equalsIgnoreCase(pgV3Constants.POLICY_MANUFACTUREREQUIVALENT) || strPartPolicy.equalsIgnoreCase(pgV3Constants.POLICY_SUPPLIEREQUIVALENT)){	
											bHasTabAccess=false;
										} else{
											//if EBOM Tab access EBOM W&D
											bHasTabAccess = getUserTabAccess(bIsEBPUser, bHasCMAccess, bHasSupplierAccess, strPartType, strEBPEBOMWD_CM, strEBPEBOMWD_Supplier, strEBOMWD_NonEBP);
											if (strEBPEBOMWDProduce_CM.contains("~"+strPartType+"~") && bHasCMAccess) {
												if (bIsAuthorizedToProduce && bHasTabAccess) {
													bHasTabAccess = true;
												} else {
													bHasTabAccess = false;
												}
											}
										}
										//Added the code for Defect ID : 33186 - Family Care - DSMReport not correct for CM and Supplier User : Ends
										
										if(bHasTabAccess){
											mlParentChildEBOMWD = addingParentChildEBOMWD(context,mlBOMChild,mpBOMCharacteristics,mpCommonColumnsDetail,strUserName);
											
										}
										//Added the code for Defect ID : 33186 - Family Care - DSMReport not correct for CM and Supplier User : Starts
										if(strPartPolicy.equalsIgnoreCase(pgV3Constants.POLICY_MANUFACTUREREQUIVALENT) || strPartPolicy.equalsIgnoreCase(pgV3Constants.POLICY_SUPPLIEREQUIVALENT)){
											bHasTabAccess=false;
										} else{
											//if tab access
											bHasTabAccess = getUserTabAccess(bIsEBPUser, bHasCMAccess, bHasSupplierAccess, strPartType, strEBPBOM_CM, strEBPBOM_Supplier, strEBOM_NonEBP);
											if (strEBPBOMProduce_CM.contains("~"+strPartType+"~") && bHasCMAccess) {
												if (bIsAuthorizedToProduce && bHasTabAccess) {
													bHasTabAccess = true;
												} else {
													bHasTabAccess = false;
												}
											}
										}
										if(bHasTabAccess){
											mlParentChildBOM = addingParentChildBOM(context,mlBOMChild,mpBOMCharacteristics,mpCommonColumnsDetail,strUserName);
											
										}
									}
								//Added the code for Defect 49698 - Spec Reader Access Issue - Starts
								}catch(Exception e) {
									e.printStackTrace();
								}finally {
									if(isContextPushed) {
										ContextUtil.popContext(context);
									}
								}
								//Added the code for Defect 49698 - Spec Reader Access Issue - Ends
								}
									//For Bill Of Materials  --End
									//For Plants
								    //Added code for Requirement Id:33635 -The report should only show tabs which user selected as the input--Starts
									if(strSelectedtabs.contains(TAB_PLANTS)){
									//Added code for Requirement Id:33635 -The report should only show tabs which user selected as the input--Ends
										//Added the code for Defect 49698 - Spec Reader Access Issue - Starts
										boolean hasAccess = false;
										boolean isContextPushed = false;
										try {
										if(SPECREADER.equalsIgnoreCase(strOriginatingSource)) {
											hasAccess = accessCheck(context, strUserName, (String)dobjPart.getInfo(context, DomainConstants.SELECT_ID));
											if(hasAccess) {
												//Pushing User Agent Context to get the Data if the Spec Reader User have access
												ContextUtil.pushContext(context,PropertyUtil.getSchemaProperty(context,"User Agent"),DomainConstants.EMPTY_STRING,DomainConstants.EMPTY_STRING);
												isContextPushed = true;
												
											}
										}
										//Added the code for Defect 49698 - Spec Reader Access Issue - Ends
									Map mpPlants = getPlants(context,dobjPart);
									//Added the code for Defect ID : 33186 - Family Care - DSMReport not correct for CM and Supplier User : Starts
									if(strPartPolicy.equalsIgnoreCase(pgV3Constants.POLICY_MANUFACTUREREQUIVALENT) || strPartPolicy.equalsIgnoreCase(pgV3Constants.POLICY_SUPPLIEREQUIVALENT)){
										bHasTabAccess=false;
									} else{
										//if tab access
										bHasTabAccess = getUserTabAccess(bIsEBPUser, bHasCMAccess, bHasSupplierAccess, strPartType, strEBPPlants_CM, strEBPPlants_Supplier, strPlant_NonEBP);
									}
									//Added the code for Defect ID : 33186 - Family Care - DSMReport not correct for CM and Supplier User : Ends
									if(bHasTabAccess){
										//Modified the code for Defect 49698 - Spec Reader Access Issue - Starts
										mlPlantDetails = getPlantsDetails(context,dobjPart,mpPlants,mpCommonColumnsDetail,strUserName);
										//Modified the code for Defect 49698 - Spec Reader Access Issue - Ends
									}
									//Added the code for Defect 49698 - Spec Reader Access Issue - Starts
									}catch(Exception e) {
										outLog.print("Exception while getting plant Details "+e+"\n");
										outLog.flush();
									}finally {
										if(isContextPushed) {
											ContextUtil.popContext(context);
										}
									}
										//Added the code for Defect 49698 - Spec Reader Access Issue - Ends
									}
									//For Attribute
									//Added code for Requirement Id:33635 -The report should only show tabs which user selected as the input--Starts
									if(strSelectedtabs.contains(TAB_ATTRIBUTES)){
									//Added code for Requirement Id:33635 -The report should only show tabs which user selected as the input--Ends
										//Modified the code for Defect 49698 - Spec Reader Access Issue - Starts
									//Modified for Requirement 45505,45511,45517: 22x 01 CW -- Starts
									// Added by DSM Reports (Sogeti) for 22x.04 (Dec CW 2023) Defect 56156 - Start
									Map mpAttribute= getAttribute(context,dobjPart,strUserName,mpCommonColumnsDetail);
									// Added by DSM Reports (Sogeti) for 22x.04 (Dec CW 2023) Defect 56156 - End
									//Modified for Requirement 45505,45511,45517: 22x 01 CW -- Ends
									//Modified the code for Defect 49698 - Spec Reader Access Issue - Ends
									mpAttribute.put("CommonColumns", mpCommonColumnsDetail);
									mlAttribute.add(mpAttribute);
									}
									//For Approve------Begin
									//Added code for Requirement Id:33635 -The report should only show tabs which user selected as the input--Starts
									if(strSelectedtabs.contains(TAB_APPROVE)){
										//Added the code for Defect 49698 - Spec Reader Access Issue - Starts
										boolean hasAccess = false;
										boolean isContextPushed = false;
									//Added code for Requirement Id:33635 -The report should only show tabs which user selected as the input--Ends
										if(SPECREADER.equalsIgnoreCase(strOriginatingSource)) {
											hasAccess = accessCheck(context, strUserName, (String)dobjPart.getInfo(context, DomainConstants.SELECT_ID));
											if(hasAccess) {
												//Pushing User Agent Context to get the Data if the Spec Reader User have access
												ContextUtil.pushContext(context,PropertyUtil.getSchemaProperty(context,"User Agent"),DomainConstants.EMPTY_STRING,DomainConstants.EMPTY_STRING);
												isContextPushed = true;
												
											}
										}
										//Added the code for Defect 49698 - Spec Reader Access Issue - Ends
									//Modified by DSM Reports (Sogeti) for 2022x.4 (DEC CW 2023) Defect 55875 - Start	
									Map mpApproverCommonColumns = getCommonColumnsDetail(context,strUserName,dobjPart);
									//Modified by DSM Reports (Sogeti) for 2022x.4 (DEC CW 2023) Defect 55875 - End	
									//Code Upgrade for 2018x Data Model - Starts
									String strApprovChangeAction=DomainConstants.EMPTY_STRING;		
								    if(mpApproverCommonColumns.get("CARealizedName") != null && mpApproverCommonColumns.get("CAProposedName") != null) {
										strApprovChangeAction=(String)mpApproverCommonColumns.get("CARealizedName");
									} else if(mpApproverCommonColumns.get("CARealizedName") != null){
										strApprovChangeAction=(String)mpApproverCommonColumns.get("CARealizedName");
									} else if(mpApproverCommonColumns.get("CAProposedName") != null){
										strApprovChangeAction=(String)mpApproverCommonColumns.get("CAProposedName");	
									} else {
										strApprovChangeAction=DomainConstants.EMPTY_STRING;		
									}
								   //Code Upgrade for 2018x Data Model - Ends
								    String strRouteID = DomainConstants.EMPTY_STRING;
									String strRelaName = DomainConstants.EMPTY_STRING;
									String strApprovePersonName = DomainConstants.EMPTY_STRING;
									String strApprovePartFamilyName = DomainConstants.EMPTY_STRING;
									String strCAObjectID = DomainConstants.EMPTY_STRING;
									StringList slApproveRelSelect = new StringList();
									slApproveRelSelect.add(pgV3Constants.SELECT_ATTRIBUTE_REASON_FOR_CHANGE);	
									MapList mlApproveChangeAction=DomainObject.findObjects(context,pgV3Constants.TYPE_CHANGEACTION,strApprovChangeAction,"-","*",pgV3Constants.VAULT_ESERVICEPRODUCTION,"",false,slSelect);
									if(!mlApproveChangeAction.isEmpty()){
										Iterator itrApproveCA = mlApproveChangeAction.iterator();
										while(itrApproveCA.hasNext()){
											Map mpCA = (Map)itrApproveCA.next();
											strCAObjectID= (String)mpCA.get(DomainConstants.SELECT_ID);							
											DomainObject domObjChangeAction = DomainObject.newInstance(context, strCAObjectID);	
											String sWhereExpression = "(type == Route) && (revision == '')";

											//Added code for defect id: 32246--Starts
											MapList mlApproveRoute= (MapList)domObjChangeAction.getRelatedObjects(context, pgV3Constants.RELATIONSHIP_OBJECTROUTE, TYPE_ROUTE, slSelect, slApproveRelSelect, false,true, (short)1, sWhereExpression, null, 0);
											//Added code for defect id: 32246--Ends
											for(int k=0;k<mlApproveRoute.size();k++){
												Map mpPeerReviewRouteTask=(Map)mlApproveRoute.get(k);
												strRouteID=(String)mpPeerReviewRouteTask.get(DomainConstants.SELECT_ID);
												DomainObject dobjPeerRoute = DomainObject.newInstance(context, strRouteID);
												//Added code for defect id: 32246--Starts
												MapList mlPeerReviewRouteTask = dobjPeerRoute.getRelatedObjects(context,pgV3Constants.RELATIONSHIP_ROUTETASK, TYPE_INBOX_TASK, slSelect, slApproveRelSelect, true,false, (short)1, null, null, 0);
												//Added code for defect id: 32246--Ends
												for(int i=0;i<mlPeerReviewRouteTask.size();i++){
													Map mpPeerReviewRoute = (Map) mlPeerReviewRouteTask.get(i);
													String strInboxTaskId = (String)mpPeerReviewRoute.get(DomainConstants.SELECT_ID);
													//Added code for defect id:33591--Starts
													String strInboxTaskName = (String)mpPeerReviewRoute.get(DomainConstants.SELECT_NAME);
													//Added code for defect id:33591--Ends										 			  
													DomainObject dobjPeerRouteTask = DomainObject.newInstance(context, strInboxTaskId);
													Map mpApprove = getApprove(context,dobjPeerRouteTask);
													//Added code for defect id: 32246--Starts
													MapList mlPeerReviewTaskPerson= dobjPeerRouteTask.getRelatedObjects(context, RELATIONSHIP_PROJECT_TASK, pgV3Constants.TYPE_PERSON, slSelect, null, false,true, (short)1, null, null, 0);
													//Added code for defect id: 32246--Ends
													if(!mlPeerReviewTaskPerson.isEmpty()){
														for(int m=0;m<mlPeerReviewTaskPerson.size();m++){
															Map mpPersonPeerReview=(Map)mlPeerReviewTaskPerson.get(m);
															strApprovePersonName = (String)mpPersonPeerReview.get(DomainConstants.SELECT_NAME);
															//Added code for defect id: 32246--Starts
															mpApprove.put("TaskName", strInboxTaskName);
															mpApprove.put("TaskId", strInboxTaskName);
															//Added code for defect id: 32246--Ends																			  
															mpApprove.put("Person Name", strApprovePersonName);
															//Added the code for the Defect ID : 25104 - CA Tab is Empty : Starts
															//Code Upgrade for 2018x Data Model - Starts
															if((mpApproverCommonColumns.get("CARealizedName") != null && mpApproverCommonColumns.get("CAProposedName") != null) || mpApproverCommonColumns.get("CARealizedName") != null) {
																mpApprove.put("Change Action", mpApproverCommonColumns.get("CARealizedName"));
																//Added code for Req Id : 33634 - Hyperlinks--Starts
																mpApprove.put("sCAId", mpApproverCommonColumns.get("sCAId"));
																//Added code for Req Id : 33634 - Hyperlinks--Ends
																//Added code for 2018x.6 Requirement 35515 Show reviewer in Approve tab Starts
																mpApprove.put("CACurrent", mpApproverCommonColumns.get("CARealizedCurrent"));
																//Added code for 2018x.6 Requirement 35515 Show reviewer in Approve tab Ends
															} else if(mpApproverCommonColumns.get("CAProposedName") != null){
																mpApprove.put("Change Action", mpApproverCommonColumns.get("CAProposedName"));
																//Added code for Req Id : 33634 - Hyperlinks--Starts
																mpApprove.put("sCAId", mpApproverCommonColumns.get("sCAId"));
																//Added code for Req Id : 33634 - Hyperlinks--Ends
																//Added code for 2018x.6 Requirement 35515 Show reviewer in Approve tab Starts
																mpApprove.put("CACurrent", mpApproverCommonColumns.get("CAProposedCurrent"));
																//Added code for 2018x.6 Requirement 35515 Show reviewer in Approve tab Ends
															} else {
																mpApprove.put("Change Action", "");
																//Added code for Req Id : 33634 - Hyperlinks--Starts
																mpApprove.put("sCAId", "");
																//Added code for Req Id : 33634 - Hyperlinks--Ends
																mpApprove.put("CACurrent", "");
															}
															//Code Upgrade for 2018x Data Model - Ends
															//Added the code for the Defect ID : 25104 - CA Tab is Empty : Ends
															mpApprove.put("Reason for Change",mpApproverCommonColumns.get(pgV3Constants.SELECT_ATTRIBUTE_REASON_FOR_CHANGE));
															mpApprove.put("name",mpApproverCommonColumns.get(DomainConstants.SELECT_NAME));
															//Added code for Req Id : 33634 - Hyperlinks--Starts
															mpApprove.put("parentId",mpApproverCommonColumns.get(DomainConstants.SELECT_ID));
															//Added code for Req Id : 33634 - Hyperlinks--Ends
															//Updated code for defect id: 32246--Starts
															mpApprove.put("PartTitle",mpApproverCommonColumns.get(pgV3Constants.SELECT_ATTRIBUTE_TITLE));
															//Updated code for defect id: 32246--Ends
															mpApprove.put("type",mpApproverCommonColumns.get(DomainConstants.SELECT_TYPE));
															mpApprove.put("CurrentState",mpApproverCommonColumns.get(DomainConstants.SELECT_CURRENT));
															//Code for requirement to addition of revision and state on all tabs except attribute -- Starts
															mpApprove.put("revision",mpApproverCommonColumns.get(DomainConstants.SELECT_REVISION));
															//Code for requirement to addition of revision and state on all tabs except attribute -- Ends
															// Added by DSM Reports (Sogeti) for 22x.03 (August CW 2023) Defect 54222 - Start
															if(mpApproverCommonColumns.containsKey("to["+pgV3Constants.RELATIONSHIP_DERIVED+"].from.name") && mpApproverCommonColumns.get("to["+pgV3Constants.RELATIONSHIP_DERIVED+"].from.name") != null){
																mpApprove.put("DerivedFromName", mpApproverCommonColumns.get("to["+pgV3Constants.RELATIONSHIP_DERIVED+"].from.name"));
																//Added code for Req Id : 33634 - Hyperlinks--Starts
																mpApprove.put("DerivedFromId", mpApproverCommonColumns.get("to["+pgV3Constants.RELATIONSHIP_DERIVED+"].from.id"));
																//Added code for Req Id : 33634 - Hyperlinks--Ends
															} else {
																mpApprove.put("DerivedFromName", "");
																mpApprove.put("DerivedFromId", "");
															}
															if(mpApproverCommonColumns.containsKey("to["+pgV3Constants.RELATIONSHIP_DERIVED+"].from."+pgV3Constants.SELECT_ATTRIBUTE_TITLE) &&  mpApproverCommonColumns.get("to["+pgV3Constants.RELATIONSHIP_DERIVED+"].from."+pgV3Constants.SELECT_ATTRIBUTE_TITLE)!= null){
																mpApprove.put("DerivedFromTitle", mpApproverCommonColumns.get("to["+pgV3Constants.RELATIONSHIP_DERIVED+"].from."+pgV3Constants.SELECT_ATTRIBUTE_TITLE));
															} else {
																mpApprove.put("DerivedFromTitle", "");
															}
															// Added by DSM Reports (Sogeti) for 22x.03 (August CW 2023) Defect 54222 - End
														}
													}
													//Added by DSM Reports (Sogeti) for 22x.04 (Dec CW 2023) Defect 56156 -- START
													mpApprove.put("PartFamilyName", strPPartFamilyName);
													//Added by DSM Reports (Sogeti) for 22x.04 (Dec CW 2023) Defect 56156 -- END
													mpApprove.put("Policy", strPartPolicy);
													mlApprove.add(mpApprove);
												}
											}
										}
									}
									//Added the code for Defect 49698 - Spec Reader Access Issue - Starts
									if(isContextPushed) {
										ContextUtil.popContext(context);	
									}
									//Added the code for Defect 49698 - Spec Reader Access Issue - Ends
									
									}
									//For Approve------End
										
									// Weights And Dimensions
									//if tab access
									//Added code for Requirement Id:33635 -The report should only show tabs which user selected as the input--Starts
									if(strSelectedtabs.contains(TAB_WEIGHTDIM)){
									//Added code for Requirement Id:33635 -The report should only show tabs which user selected as the input---Ends
										//Added the code for Defect ID : 33186 - Family Care - DSMReport not correct for CM and Supplier User : Starts
										if(strPartPolicy.equalsIgnoreCase(pgV3Constants.POLICY_MANUFACTUREREQUIVALENT) || strPartPolicy.equalsIgnoreCase(pgV3Constants.POLICY_SUPPLIEREQUIVALENT)){
											bHasTabAccess=false;
										} else{
											bHasTabAccess = getUserTabAccess(bIsEBPUser, bHasCMAccess, bHasSupplierAccess, strPartType, strEBPWeightsAndDimensions_CM, strEBPWeightsAndDimensions_Supplier, strWeightDim_NonEBP);
										}
										//Added the code for Defect ID : 33186 - Family Care - DSMReport not correct for CM and Supplier User : Ends
								
								   if(bHasTabAccess){
										mlWeightsAndDim = getWeightAndDimDetails(context,strUserName,dobjPart,mpCommonColumnsDetail);
								   	}
									}
									
									//IP & Export Control
									//Added code for Requirement id 46223 - IP & Export Control Tab in Part & Spec Reports - Starts	
									if(strSelectedtabs.contains(TAB_IPEXPORTCONTROL)){
										MapList mlIpAndExportControl = pg.getRelatedIpAndExportControl(context,dobjPart,mpCommonColumnsDetail);
										bHasTabAccess = getUserTabAccess(bIsEBPUser, bHasCMAccess, bHasSupplierAccess, strPartType, strEBPIpAndExportControl_CM, strEBPIpAndExportControl_Supplier, strIpAndExportControl_NonEBP);
										iTempSize=mlIpAndExportControl.size();
										if(iTempSize>0){
											for(int iIndex=0;iIndex<iTempSize;iIndex++){
												Map mpTemp=(Map)mlIpAndExportControl.get(iIndex);
												if(bHasTabAccess){
													mlIpClassAll.add(mpTemp);
												}
											}
										}
										mlIpAndExportControl.clear();	
									}
									//Added code for Requirement id 46223 - IP & Export Control Tab in Part & Spec Reports - Ends	
									
								   // Component Equivalent
									//Added code for Requirement Id:33635 -The report should only show tabs which user selected as the input--Starts
									if(strSelectedtabs.contains(TAB_COMPEQUV) && (!strPartPolicy.equalsIgnoreCase(pgV3Constants.POLICY_MANUFACTUREREQUIVALENT) && !strPartPolicy.equalsIgnoreCase(pgV3Constants.POLICY_SUPPLIEREQUIVALENT))){
									//Added code for Requirement Id:33635 -The report should only show tabs which user selected as the input--Ends
										if((!strPartName.startsWith("MEP-") && !strPartName.startsWith("SEP-"))){
										Map mpCompEquivalent = getComponentEquivalent(context,strUserName,dobjPart,mpCommonColumnsDetail);
										//Added code for Requirement 37983,38062 Add  Certification Section to the Part Component Equivalents tab Starts
										//Added by DRA (Sogeti) for 22x.04 (December CW 2023) Defect 55205  - Starts
										mlCertification = getMEPSEPCertification(context, dobjPart, mpCommonColumnsDetail,strPartPolicy,strUserName);
										//Added by DRA (Sogeti) for 22x.04 (December CW 2023) Defect 55205  - Ends
										//Added code for Requirement 37983,38062 Add  Certification Section to the Part Component Equivalents tab Starts
										bHasTabAccess = getUserTabAccess(bIsEBPUser, bHasCMAccess, bHasSupplierAccess, strPartType, strEBPCompEquivalent_CM, strEBPCompEquivalent_Supplier, strCompEquivalent_NonEBP);
										mlCompEquiDetailsAll = getCompEquiDetails(context,dobjPart,mpCommonColumnsDetail,strUserName,mlCertification);
										iTempCompEquiDetails = mlCompEquiDetailsAll.size();
										if(iTempCompEquiDetails>0){
											for(int iIndex=0;iIndex<iTempCompEquiDetails;iIndex++){
												mpCompEquiDetails=(Map)mlCompEquiDetailsAll.get(iIndex);
												if (bHasTabAccess) {
													mlCompEquiDetails.add(mpCompEquiDetails);
												}
											}
										}
									}
									
									}
									//For Performance Characteristic --Begin
									//Added code for Requirement Id:33635 -The report should only show tabs which user selected as the input--Starts
									if(strSelectedtabs.contains(TAB_PERFORMANCECHAR)){
										//Added the code for Defect 49698 - Spec Reader Access Issue - Starts
										boolean hasAccess = false;
										boolean isContextPushed = false;
										//Modified by DSM Reports (Sogeti) for 2022x.6 CW Defect 57310 - Start
										boolean  isSpecReaderUser = SPECREADER.equalsIgnoreCase(strOriginatingSource);
										//Modified by DSM Reports (Sogeti) for 2022x.6 CW Defect 57310 - End
										try {
										//Added code for Requirement Id:33635 -The report should only show tabs which user selected as the input--Ends
										if(isSpecReaderUser) {
											hasAccess = accessCheck(context, strUserName, (String)dobjPart.getInfo(context, DomainConstants.SELECT_ID));
											if(hasAccess) {
												//Pushing User Agent Context to get the Data if the Spec Reader User have access
												ContextUtil.pushContext(context,PropertyUtil.getSchemaProperty(context,"User Agent"),DomainConstants.EMPTY_STRING,DomainConstants.EMPTY_STRING);
												isContextPushed = true;
												
											}
										}
										//Added the code for Defect 49698 - Spec Reader Access Issue - Ends
									Map mpObjectCommon= dobjPart.getInfo(context, SL_OBJECT_COMMON);
										
									//Code Upgrade for 2018x Data Model - Starts
									String strPartId = (String) mpObjectCommon.get(DomainConstants.SELECT_ID);
									if (UIUtil.isNotNullAndNotEmpty(strPartId)) {
										String [] args = new String [3];
										args[0] = strPartId;
										MapList mlChanges = new MapList();
										//Modified by DSM Reports (Sogeti) for 2022x.5 (APR CW 2024) Defect 55875 - Start
											//Added by DSM Reports (Sogeti) for 2022x.6 CW Defect 57310 - Start
											if(isSpecReaderUser && bIsEBPUser) {
												mlChanges = null;
											}else {
												mlChanges = getConnectedChanges(context,args,strUserName);
											}
											//Added by DSM Reports (Sogeti) for 2022x.6 CW Defect 57310 - End
										StringBuilder sbCA = new StringBuilder();
										StringBuilder sbCAID = new StringBuilder();
										//Modified by DSM Reports (Sogeti) for 2022x.5 (APR CW 2024) Defect 55875 - End
										
											if(mlChanges != null && !mlChanges.isEmpty()){
											int caMapListSize = mlChanges.size();
											for(Object caObject:mlChanges){
												Map caMap = (Map)caObject;
												String sCAProposedName = (String) caMap.get(CAPROPOSEDNAME); 
												String sCARealizedName = (String) caMap.get(CAREALIZEDNAME);
												//Added code for Req Id : 33634 - Hyperlinks--Starts
												String sCAId = (String) caMap.get(DomainConstants.SELECT_ID);
												//Added code for Req Id : 33634 - Hyperlinks--Ends
												//Added the code for the Defect ID : 25104 - CA Tab is Empty : Starts
												//Added by DSM Reports (Sogeti) for 2022x.5 (APR CW 2024) Defect 55875 - Start
												if(caMapListSize>1) {
													if(UIUtil.isNotNullAndNotEmpty(sCAProposedName) && UIUtil.isNotNullAndNotEmpty(sCARealizedName)){
														sbCA.append(sCARealizedName + "\n");
														sbCAID.append(sCAId + HYPERLINK_PIPE);
													}else if(UIUtil.isNotNullAndNotEmpty(sCAProposedName)){
														sbCA.append(sCAProposedName + "\n");
														sbCAID.append(sCAId+HYPERLINK_PIPE);
													}else {
														sbCA.append(DomainConstants.EMPTY_STRING);
														sbCAID.append(DomainConstants.EMPTY_STRING);
													}
												}else {
													//Added by DSM Reports (Sogeti) for 2022x.5 (APR CW 2024) Defect 55875 - End
													if(UIUtil.isNotNullAndNotEmpty(sCAProposedName) && UIUtil.isNotNullAndNotEmpty(sCARealizedName)) {
														mpObjectCommon.put(CAREALIZEDNAME, sCARealizedName);
														//Added code for Req Id : 33634 - Hyperlinks--Starts
														mpObjectCommon.put(SCAID, sCAId);
														//Added code for Req Id : 33634 - Hyperlinks--Ends
													} else if(UIUtil.isNotNullAndNotEmpty(sCARealizedName)) {
														mpObjectCommon.put(CAREALIZEDNAME, sCARealizedName);
														//Added code for Req Id : 33634 - Hyperlinks--Starts
														mpObjectCommon.put(SCAID, sCAId);
														//Added code for Rq Id : 33634 - Hyperlinks--Ends
													}else if(UIUtil.isNotNullAndNotEmpty(sCAProposedName)) {
														mpObjectCommon.put(CAPROPOSEDNAME, sCAProposedName);
														//Added code for Req Id : 33634 - Hyperlinks--Starts
														mpObjectCommon.put(SCAID, sCAId);
														//Added code for Req Id : 33634 - Hyperlinks--Ends
													} else {
														mpObjectCommon.put(CAPROPOSEDNAME,DomainConstants.EMPTY_STRING);
														mpObjectCommon.put(CAREALIZEDNAME, DomainConstants.EMPTY_STRING);
														//Added code for Req Id : 33634 - Hyperlinks--Starts
														mpObjectCommon.put(SCAID, DomainConstants.EMPTY_STRING);
														//Added code for Req Id : 33634 - Hyperlinks--Ends
													}
												}
											}
											//Added by DSM Reports (Sogeti) for 2022x.5 (APR CW 2024) Defect 55875 - Start
											if(caMapListSize>1 && (sbCA.toString()).length()>1) {
												sbCA.deleteCharAt(sbCA.length() - 1);
												sbCAID.deleteCharAt(sbCAID.length() - 1);
												mpObjectCommon.put(CAPROPOSEDNAME, sbCA.toString());
												mpObjectCommon.put(SCAID, sbCAID.toString());
											}
											//Added by DSM Reports (Sogeti) for 2022x.5 (APR CW 2024) Defect 55875 - End
											
										}
									}
									//Code Upgrade for 2018x Data Model - Ends
									//Added the code for Defect ID : 33186 - Family Care - DSMReport not correct for CM and Supplier User : Starts
									if(strPartPolicy.equalsIgnoreCase(pgV3Constants.POLICY_MANUFACTUREREQUIVALENT) || strPartPolicy.equalsIgnoreCase(pgV3Constants.POLICY_SUPPLIEREQUIVALENT)){
										bHasTabAccess=false;
									} else{
										//if tab access
										bHasTabAccess = getUserTabAccess(bIsEBPUser, bHasCMAccess, bHasSupplierAccess, strPartType, strEBPPerformanceCharacteristics_CM, strEBPPerformanceCharacteristics_Supplier, strPerformanceCharacteristics_NonEBP);
										}
									//Added the code for Defect ID : 33186 - Family Care - DSMReport not correct for CM and Supplier User : Ends
									mlPerformanceCharacteristics=getPerformanceCharacteristics(context,strUserName,dobjPart,mpObjectCommon);
									iTempSize=mlPerformanceCharacteristics.size();
									if(iTempSize>0){
										for(int iIndex=0;iIndex<iTempSize;iIndex++){
											Map mpTemp=(Map)mlPerformanceCharacteristics.get(iIndex);
											if(bHasTabAccess){
												mlPerformanceCharacteristicsAll.add(mpTemp);
											}
										}
									}
									mlPerformanceCharacteristics.clear();
									//Added the code for Defect 49698 - Spec Reader Access Issue - Starts
									}catch(Exception e) {
										outLog.print("Exception while getting the performance Characterisitics "+e+"\n");
										outLog.flush();
									}finally {
										if(isContextPushed) {
											ContextUtil.popContext(context);
										}
									}
										//Added the code for Defect 49698 - Spec Reader Access Issue - Ends
									}
									//For Performance Characteristic --End
									//Commented for requirement-- 34943--starts
									/* //For Component Materials --Begin
									//Added code for Requirement Id:33635 -The report should only show tabs which user selected as the input--Starts
									if(strSelectedtabs.contains("Component Materials")){
									//Added code for Requirement Id:33635 -The report should only show tabs which user selected as the input--Ends
									Map mpCompMat=getCompMaterials(context,strUserName,dobjPart,mpCommonColumnsDetail);
									Map mpCommonColumnsDetal = getCommonColumnsDetail(context,dobjPart);
									StringList slRelSlct = new StringList(2);
									slRelSlct.addElement("attribute[pgSequence]");
									slRelSlct.addElement("attribute[Quantity Unit Of Measure]");
									//Updated for Defect : 31814 Starts
									slRelSlct.addElement("attribute[Quantity].inputvalue");
									//Updated for Defect : 31814 Ends
									slRelSlct.addElement("attribute[Comment]");
									//Updated for Defect : 31814 Starts
									slRelSlct.addElement("attribute[Minimum Weight].inputvalue");
									slRelSlct.addElement("attribute[Maximum Weight].inputvalue");
									//Updated for Defect : 31814 Ends
									slRelSlct.addElement("attribute[pgMaterialLayer]");
									String strCmpMatChildId = DomainConstants.EMPTY_STRING;
									String strCmpMatChildType = DomainConstants.EMPTY_STRING;
									String strLevel = DomainConstants.EMPTY_STRING;
									String strSeqValue = DomainConstants.EMPTY_STRING;
									String strQuantity = DomainConstants.EMPTY_STRING;
									String strQuantityUOM = DomainConstants.EMPTY_STRING;
									String strMinWeight = DomainConstants.EMPTY_STRING;
									String strMaxWeight = DomainConstants.EMPTY_STRING;
									String strComment = DomainConstants.EMPTY_STRING;
									String strMaterialLayer = DomainConstants.EMPTY_STRING;
									String strComponentName = DomainConstants.EMPTY_STRING;
									String strComponentTitle = DomainConstants.EMPTY_STRING;
									//String strRelName = DomainConstants.EMPTY_STRING;
									//String strPartFamilyName = DomainConstants.EMPTY_STRING;
									String strParentPartName = (String)mpCommonColumnsDetail.get(DomainConstants.SELECT_NAME);
									StringList objectSelects1=new StringList();
									objectSelects1.add(DomainConstants.SELECT_ID);
									//Added for Defect : 31814 Starts
									String strChildComponentTitle = DomainConstants.EMPTY_STRING;
									String strParentPartId = (String)mpCommonColumnsDetal.get(DomainConstants.SELECT_ID);
									Pattern objType = new Pattern(FormulationType.MATERIAL.getType(context));
									objType.addPattern(FormulationType.SUBSTANCE.getType(context));
									Pattern relType = new Pattern(FormulationRelationship.COMPONENT_MATERIAL.getRelationship(context));
									relType.addPattern(FormulationRelationship.COMPONENT_SUBSTANCE.getRelationship(context));
									relType.addPattern(FormulationRelationship.SECURE_COMPONENT_SUBSTANCE.getRelationship(context));
									boolean isSubstance = MATCUtil.isKindOfParentType(context, strParentPartId, MATCSchema.Type.SUBSTANCE.get(context));
									boolean isPart = MATCUtil.isKindOfParentType(context, strParentPartId, MATCSchema.Type.PART.get(context)) ;
									DomainObject doobj = new DomainObject(strParentPartId);
									if(isSubstance){
										strComponentTitle = (String) doobj.getInfo(context,MATCSchema.Attribute.SUBSTANCE_NAME.getAttributeSelect(context));
									}else if(isPart) {
										strComponentTitle = (String) doobj.getInfo(context,MATCSchema.Attribute.V_NAME.getAttributeSelect(context));
									}else{
										strComponentTitle =  (String) doobj.getInfo(context,MATCSchema.Attribute.TITLE.getAttributeSelect(context));
									}
									//Added for Defect : 31814 Ends
									MapList mlATSName = (MapList) dobjPart.getRelatedObjects(context,pgV3Constants.RELATIONSHIP_CLASSIFIEDITEM ,pgV3Constants.TYPE_PARTFAMILY, slSelect, null, true,true, (short)1, null, null, 0);
									for(int i=0;i<mlATSName.size();i++){
										Map mpPart = (Map)mlATSName.get(i);
										strRelName = (String)mpPart.get("relationship");
										if(strRelName.equalsIgnoreCase(pgV3Constants.RELATIONSHIP_CLASSIFIEDITEM)){				
										if (mpPart.get("name") instanceof StringList){
											strPartFamilyName = mpPart.get("name").toString();
											strPartFamilyName = strPartFamilyName.replace("[", "").replace("]", "");
										} else {
											strPartFamilyName = (String) mpPart.get("name").toString();
										}
									}
								}
								MapList	mlMaterial=DomainObject.findObjects(context,pgV3Constants.TYPE_MATERIAL,strParentPartName, null, null, pgV3Constants.VAULT_ESERVICEPRODUCTION, null, false, objectSelects1);
								//Updated for Defect : 31814 Starts
								MapList mlConnectedMaterial= (MapList)dobjPart.getRelatedObjects(context, relType.getPattern(), objType.getPattern(), slSelect, null, false,true, (short)1, null, null, 0);
								//Updated for Defect : 31814 Ends
								if(mlMaterial.size()>0 && mlConnectedMaterial.size()>0){
									HashMap materialMap = (HashMap)mlMaterial.get(0);
									String strMaterialId=(String)materialMap.get(DomainConstants.SELECT_ID);	
									DomainObject dobjMaterial = DomainObject.newInstance(context, strMaterialId);
									//Updated for Defect : 31814 Starts
									MapList mlCompMatChild= (MapList)dobjMaterial.getRelatedObjects(context, relType.getPattern(), objType.getPattern(), slSelect, slRelSlct, false,true, (short)0, null, null, 0);
									//Updated for Defect : 31814 Ends
									if(mlCompMatChild.size()>0){
											for(int i=0;i<mlCompMatChild.size();i++){
												Map mpCompMatChild=(Map)mlCompMatChild.get(i);
												strCmpMatChildId=(String)mpCompMatChild.get("id");											
												strCmpMatChildType=(String)mpCompMatChild.get("type");
												strLevel =(String)mpCompMatChild.get("level");
												strSeqValue = (String)mpCompMatChild.get("attribute[pgSequence]");
												//Updated for Defect : 31814 Starts
												strQuantity = (String)mpCompMatChild.get("attribute[Quantity].inputvalue");
												//Updated for Defect : 31814 Ends
												strQuantityUOM = (String)mpCompMatChild.get("attribute[Quantity Unit Of Measure]");
												//Updated for Defect : 31814 Starts
												strMinWeight = (String)mpCompMatChild.get("attribute[Minimum Weight].inputvalue");
												strMaxWeight = (String)mpCompMatChild.get("attribute[Maximum Weight].inputvalue");
												//Updated for Defect : 31814 Ends
												strComment = (String)mpCompMatChild.get("attribute[Comment]");
												if (UIUtil.isNullOrEmpty(strComment)){
													strComment=DomainConstants.EMPTY_STRING;
												}
												strMaterialLayer = (String)mpCompMatChild.get("attribute[pgMaterialLayer]");
												strComponentName= (String)mpCommonColumnsDetal.get(DomainConstants.SELECT_NAME);
												//Added for Defect : 31814 Starts
												//strComponentTitle=(String)mpCommonColumnsDetal.get(pgV3Constants.SELECT_ATTRIBUTE_TITLE);
												boolean isSubstanceChild = MATCUtil.isKindOfParentType(context, strCmpMatChildId, MATCSchema.Type.SUBSTANCE.get(context)) ;
												boolean isPartChild = MATCUtil.isKindOfParentType(context, strCmpMatChildId, MATCSchema.Type.PART.get(context)) ;
												DomainObject doObjChild = new DomainObject(strCmpMatChildId);
												if(isSubstanceChild){
													strChildComponentTitle = (String) doObjChild.getInfo(context,MATCSchema.Attribute.SUBSTANCE_NAME.getAttributeSelect(context));
												}else if(isPartChild) {
													strChildComponentTitle = (String) doObjChild.getInfo(context,MATCSchema.Attribute.V_NAME.getAttributeSelect(context));
												}else{
													strChildComponentTitle =  (String) doObjChild.getInfo(context,MATCSchema.Attribute.TITLE.getAttributeSelect(context));
												}
												//Added for Defect : 31814 Ends
												DomainObject dobjCompChild = DomainObject.newInstance(context, strCmpMatChildId);
												Map mpCompMatChild1=getCompMaterials(context,strUserName,dobjCompChild,mpCommonColumnsDetail);
												Map mpCommonColumns = getCommonColumnsDetail(context,dobjCompChild);
												mpCompMatChild1.put("CommonColumns", mpCommonColumnsDetal);
												mpCompMatChild1.put("ComponentTitle", strComponentTitle);
												mpCompMatChild1.put("ChildName", mpCompMatChild1.get(DomainConstants.SELECT_NAME));
												mpCompMatChild1.put("level", strLevel);
												mpCompMatChild1.put("ParentName", mpCommonColumnsDetal.get(DomainConstants.SELECT_NAME));
												mpCompMatChild1.put("Sequence value", strSeqValue);
												mpCompMatChild1.put("Quantity", strQuantity);
												mpCompMatChild1.put("QuantityUnitOfMeasure", strQuantityUOM);
												//Updated for Defect : 31814 Starts
												mpCompMatChild1.put("Minimum Weight", strMinWeight);
												mpCompMatChild1.put("Maximum Weight", strMaxWeight);
												//Updated for Defect : 31814 Ends
												mpCompMatChild1.put("Comment", strComment);
												mpCompMatChild1.put("MaterialLayer", strMaterialLayer);
												//Updated for Defect : 31814 Starts
												mpCompMatChild1.put("ChildTitle",strChildComponentTitle);
												//Updated for Defect : 31814 Ends
												mpCompMatChild1.put("PartFamilyName",strPartFamilyName);
												//if tab access
												bHasTabAccess = getUserTabAccess(bIsEBPUser, bHasCMAccess, bHasSupplierAccess, strPartType, strEBPComponentMaterials_CM, strEBPComponentMaterials_Supplier, strCompMaterial_NonEBP);
												if (strEBPComponentMaterialsProduce_CM.contains("~"+strPartType+"~") && bHasCMAccess) {
													if (bIsAuthorizedToProduce && bHasTabAccess) {
														bHasTabAccess = true;
													} else {
														bHasTabAccess = false;
													}
												}
												
												if(bHasTabAccess){
													mlCompMaterials.add(mpCompMatChild1);
												}
											}
										}
									} else {
										//Updated for Defect : 31814 Starts
										MapList mlCompMatChild= (MapList)dobjPart.getRelatedObjects(context, relType.getPattern(), objType.getPattern(), slSelect, slRelSlct, false,true, (short)0, null, null, 0);
										//Updated for Defect : 31814 Ends
										if(mlCompMatChild.size()>0){
											for(int i=0;i<mlCompMatChild.size();i++){
												Map mpCompMatChild=(Map)mlCompMatChild.get(i);
												strCmpMatChildId=(String)mpCompMatChild.get("id");											
												strCmpMatChildType=(String)mpCompMatChild.get("type");
												strLevel =(String)mpCompMatChild.get("level");
												strSeqValue = (String)mpCompMatChild.get("attribute[pgSequence]");
												//Updated for Defect : 31814 Starts
												strQuantity = (String)mpCompMatChild.get("attribute[Quantity].inputvalue");
												//Updated for Defect : 31814 Ends
												strQuantityUOM = (String)mpCompMatChild.get("attribute[Quantity Unit Of Measure]");
												//Updated for Defect : 31814 Starts
												strMinWeight = (String)mpCompMatChild.get("attribute[Minimum Weight].inputvalue");
												strMaxWeight = (String)mpCompMatChild.get("attribute[Maximum Weight].inputvalue");
												//Updated for Defect : 31814 Ends
												strComment = (String)mpCompMatChild.get("attribute[Comment]");
												if (UIUtil.isNullOrEmpty(strComment)){
													strComment=DomainConstants.EMPTY_STRING;
												}													
												strMaterialLayer = (String)mpCompMatChild.get("attribute[pgMaterialLayer]");
												strComponentName= (String)mpCommonColumnsDetal.get(DomainConstants.SELECT_NAME);
												//Added for Defect : 31814 Starts
												//strComponentTitle=(String)mpCommonColumnsDetal.get(pgV3Constants.SELECT_ATTRIBUTE_TITLE);
												boolean isSubstanceChild = MATCUtil.isKindOfParentType(context, strCmpMatChildId, MATCSchema.Type.SUBSTANCE.get(context)) ;
												boolean isPartChild = MATCUtil.isKindOfParentType(context, strCmpMatChildId, MATCSchema.Type.PART.get(context)) ;
												DomainObject doObjChild = new DomainObject(strCmpMatChildId);
												if(isSubstanceChild){
													strChildComponentTitle = (String) doObjChild.getInfo(context,MATCSchema.Attribute.SUBSTANCE_NAME.getAttributeSelect(context));
												}else if(isPartChild) {
													strChildComponentTitle = (String) doObjChild.getInfo(context,MATCSchema.Attribute.V_NAME.getAttributeSelect(context));
												}else{
													strChildComponentTitle =  (String) doObjChild.getInfo(context,MATCSchema.Attribute.TITLE.getAttributeSelect(context));
												}
												//Added for Defect : 31814 Ends
												DomainObject dobjCompChild = DomainObject.newInstance(context, strCmpMatChildId);
												Map mpCompMatChild1=getCompMaterials(context,strUserName,dobjCompChild,mpCommonColumnsDetail);
												Map mpCommonColumns = getCommonColumnsDetail(context,dobjCompChild);
												mpCompMatChild1.put("CommonColumns", mpCommonColumnsDetal);
												mpCompMatChild1.put("ComponentTitle", strComponentTitle);
												mpCompMatChild1.put("ChildName", mpCompMatChild1.get(DomainConstants.SELECT_NAME));
												mpCompMatChild1.put("level", strLevel);
												mpCompMatChild1.put("ParentName", mpCommonColumnsDetal.get(DomainConstants.SELECT_NAME));
												mpCompMatChild1.put("Sequence value", strSeqValue);
												mpCompMatChild1.put("Quantity", strQuantity);
												mpCompMatChild1.put("QuantityUnitOfMeasure", strQuantityUOM);
												//Updated for Defect : 31814 Starts
												mpCompMatChild1.put("Minimum Weight", strMinWeight);
												mpCompMatChild1.put("Maximum Weight", strMaxWeight);
												//Updated for Defect : 31814 Ends
												mpCompMatChild1.put("Comment", strComment);
												mpCompMatChild1.put("MaterialLayer", strMaterialLayer);
												//Updated for Defect : 31814 Starts
												mpCompMatChild1.put("ChildTitle",strChildComponentTitle);
												//Updated for Defect : 31814 Ends
												mpCompMatChild1.put("PartFamilyName",strPartFamilyName);
												//if tab access
												bHasTabAccess = getUserTabAccess(bIsEBPUser, bHasCMAccess, bHasSupplierAccess, strPartType, strEBPComponentMaterials_CM, strEBPComponentMaterials_Supplier, strCompMaterial_NonEBP);
												if (strEBPComponentMaterialsProduce_CM.contains("~"+strPartType+"~") && bHasCMAccess) {
													if (bIsAuthorizedToProduce && bHasTabAccess) {
														bHasTabAccess = true;
													} else {
														bHasTabAccess = false;
													}
												}
													
												if(bHasTabAccess){
													mlCompMaterials.add(mpCompMatChild1);
												}
											}
										} else {
											mpCompMat.put("CommonColumns", mpCommonColumnsDetal);
											mpCompMat.put("ParentName", mpCommonColumnsDetal.get(DomainConstants.SELECT_NAME));
											mpCompMat.put("ComponentTitle", strComponentTitle);
											mpCompMat.put("PartFamilyName",strPartFamilyName);
											//if tab access
											bHasTabAccess = getUserTabAccess(bIsEBPUser, bHasCMAccess, bHasSupplierAccess, strPartType, strEBPComponentMaterials_CM, strEBPComponentMaterials_Supplier, strCompMaterial_NonEBP);
											if (strEBPComponentMaterialsProduce_CM.contains("~"+strPartType+"~") && bHasCMAccess) {
												if (bIsAuthorizedToProduce && bHasTabAccess) {
													bHasTabAccess = true;
												} else {
													bHasTabAccess = false;
												}
											}
							
												
											if(bHasTabAccess){
												mlCompMaterials.add(mpCompMat);
											}
										}
									}
									}
									//For Component Materials --End	 */								
									//Commented for requirement-- 34943--ends
									//For Peer Review------Begin
									//Added code for Requirement Id:33635 -The report should only show tabs which user selected as the input--Starts
									if(strSelectedtabs.contains("~Peer Review")){
									//Added code for Requirement Id:33635 -The report should only show tabs which user selected as the input--Ends
									//Modified by DSM Reports (Sogeti) for 2022x.4 (DEC CW 2023) Defect 55875 - Start
									Map mpCommonColumnsDetails = getCommonColumnsDetail(context,strUserName,dobjPart);//Modified by DSM Reports (Sogeti) for 2022x.4 (DEC CW 2023) Defect 55875 - End									
									//Code Upgrade for 2018x Data Model - Starts
									String strChangeAction=DomainConstants.EMPTY_STRING;		
									if(mpCommonColumnsDetails.get("CAProposedName") != null && (mpCommonColumnsDetails.get("CARealizedName") != null)) {
										strChangeAction=(String)mpCommonColumnsDetails.get("CARealizedName");
									} else if(mpCommonColumnsDetails.get("CARealizedName") != null){	
										strChangeAction=(String)mpCommonColumnsDetails.get("CARealizedName");
									} if(mpCommonColumnsDetails.get("CAProposedName") != null){
										strChangeAction=(String)mpCommonColumnsDetails.get("CAProposedName");	
									} else {
										strChangeAction=DomainConstants.EMPTY_STRING;	
									}
									//Code Upgrade for 2018x Data Model - Ends
									StringList slRelSelect = new StringList();
									slRelSelect.add("attribute[Reason for Change]");
									String strCAObjectId = DomainConstants.EMPTY_STRING;
									String strPersonName = DomainConstants.EMPTY_STRING;
									MapList mlChangeAction=DomainObject.findObjects(context,pgV3Constants.TYPE_CHANGEACTION,strChangeAction,"-","*",pgV3Constants.VAULT_ESERVICEPRODUCTION,"",false,slSelect);
									if(mlChangeAction.size()>0 && mlChangeAction!=null){
										Iterator itrtr = mlChangeAction.iterator();
										while(itrtr.hasNext()){
										Map mptr = (Map)itrtr.next();
											strCAObjectId= (String)mptr.get("id");							
											DomainObject dobjChangeAction = DomainObject.newInstance(context, strCAObjectId);
											StringList slRelSelct = new StringList();
											slRelSelct.add("attribute[Reason for Change]");
											String sWhereEx = "(type == Route) && (name ~= 'R-*') && (revision == '')";
											MapList mlPeerReviewRoute= (MapList)dobjChangeAction.getRelatedObjects(context, pgV3Constants.RELATIONSHIP_OBJECTROUTE, pgV3Constants.TYPE_ROUTE, slSelect, slRelSelect, false,true, (short)1, sWhereEx, null, 0);
											for(int k=0;k<mlPeerReviewRoute.size();k++){
												Map mpPeerReviewRouteTask=(Map)mlPeerReviewRoute.get(k);
												String strRouteId=(String)mpPeerReviewRouteTask.get("id");
												DomainObject dobjPeerRoute = DomainObject.newInstance(context, strRouteId);
												MapList mlPeerReviewRouteTask = (MapList)dobjPeerRoute.getRelatedObjects(context,pgV3Constants.RELATIONSHIP_ROUTETASK, TYPE_INBOX_TASK, slSelect, slRelSelect, true,false, (short)1, null, null, 0);
												for(int i=0;i<mlPeerReviewRouteTask.size();i++){
													Map mpPeerReviewRoute = (Map) mlPeerReviewRouteTask.get(i);
													String strInboxTaskId = (String)mpPeerReviewRoute.get("id");
													DomainObject dobjPeerRouteTask = DomainObject.newInstance(context, strInboxTaskId);
													Map mpPeerReview=getPeerReview(context,strUserName,dobjPeerRouteTask,mpCommonColumnsDetail);
													MapList mlPeerReviewTaskPerson= (MapList)dobjPeerRouteTask.getRelatedObjects(context, RELATIONSHIP_PROJECT_TASK, pgV3Constants.TYPE_PERSON, slSelect, null, false,true, (short)1, null, null, 0);
														
													for(int m=0;m<mlPeerReviewTaskPerson.size();m++){
														Map mpPersonPeerReview=(Map)mlPeerReviewTaskPerson.get(m);
														strPersonName = (String)mpPersonPeerReview.get("name");
														mpPeerReview.put("Person Name", strPersonName);
														//Code Upgrade for 2018x Data Model - Starts
														if(mpCommonColumnsDetail.get("CARealizedName") != null && mpCommonColumnsDetail.get("CAProposedName") != null) {
															mpPeerReview.put("Change Action", mpCommonColumnsDetail.get("CARealizedName"));
														} else if(mpCommonColumnsDetail.get("CARealizedName") != null){
															mpPeerReview.put("Change Action", mpCommonColumnsDetail.get("CARealizedName"));
																	
														} else if(mpCommonColumnsDetail.get("CAProposedName") != null){
															mpPeerReview.put("Change Action", mpCommonColumnsDetail.get("CAProposedName"));
														} else {
															mpPeerReview.put("Change Action", "");
														}
														//Code Upgrade for 2018x Data Model - Ends
														mpPeerReview.put("Reason for Change",mpCommonColumnsDetails.get("attribute[Reason for Change]"));
														mpPeerReview.put("name",mpCommonColumnsDetails.get(DomainConstants.SELECT_NAME));
														mpPeerReview.put("Title",mpCommonColumnsDetails.get(pgV3Constants.SELECT_ATTRIBUTE_TITLE));
														mpPeerReview.put("type",mpCommonColumnsDetails.get(DomainConstants.SELECT_TYPE));
														mpPeerReview.put("CurrentState",mpCommonColumnsDetails.get(DomainConstants.SELECT_CURRENT));
														mpPeerReview.put("revision",mpCommonColumnsDetails.get(DomainConstants.SELECT_REVISION));
														if(mpCommonColumnsDetails.get("to[Derived].from.name") != null){
															mpPeerReview.put("DerivedFromName", mpCommonColumnsDetail.get("to[Derived].from.name"));
														} else {
														mpPeerReview.put("DerivedFromName", "");
														}
														if(mpCommonColumnsDetails.get("to[Derived].from.attribute[Title]") != null){
															mpPeerReview.put("DerivedFromTitle", mpCommonColumnsDetail.get("to[Derived].from.attribute[Title]"));
														}
														else{
															mpPeerReview.put("DerivedFromTitle", "");
														}
														//Added by DSM Reports (Sogeti) for 22x.04 (Dec CW 2023) Defect 56156 -- START
														mpPeerReview.put("PartFamilyName", strPPartFamilyName);
														//Added by DSM Reports (Sogeti) for 22x.04 (Dec CW 2023) Defect 56156 -- END
													}
													mlPeerReviewTask.add(mpPeerReview);
												}
											}
										}
									}
									}
									//For Peer Review------End

									// Code for Specs Docs --Begin
									//if tab access
									//Added code for Requirement Id:33635 -The report should only show tabs which user selected as the input--Starts
									if(strSelectedtabs.contains(TAB_SPECSDOCS)){
									//Added code for Requirement Id:33635 -The report should only show tabs which user selected as the input--Ends
										try {
									bHasTabAccess = getUserTabAccess(bIsEBPUser, bHasCMAccess, bHasSupplierAccess, strPartType, strEBPSpecsDocs_CM, strEBPSpecsDocs_Supplier, strSpecsDocs_NonEBP);								
									//if(bHasTabAccess){
									MapList mlRelatedSpecsDocs=getRelatedSpecsDocs(context,dobjPart,mpCommonColumnsDetail,strUserName);
									iTempSize=mlRelatedSpecsDocs.size();
									if(iTempSize>0){
										for(int iIndex=0;iIndex<iTempSize;iIndex++){
											Map mpTemp=(Map)mlRelatedSpecsDocs.get(iIndex);
											if(bHasTabAccess){
												mlSpecsDocsAll.add(mpTemp);
											}
										}
									}
									mlRelatedSpecsDocs.clear();	
																		
									//if tab access
									bHasTabAccess = getUserTabAccess(bIsEBPUser, bHasCMAccess, bHasSupplierAccess, strPartType, strEBPSpecsDocsRefDoc_CM, strEBPSpecsDocsRefDoc_Supplier, strSpecsDocsRefDocs_NonEBP);
									
									MapList mlRelatedRefDocs=getRelatedSpecsDocsRefDoc(context,strUserName,dobjPart,mpCommonColumnsDetail);
									iTempSize=mlRelatedRefDocs.size();
									if(iTempSize>0){
										for(int iIndex=0;iIndex<iTempSize;iIndex++){
											Map mpTemp=(Map)mlRelatedRefDocs.get(iIndex);
											if(bHasTabAccess){
												mlSpecsRefDocsAll.add(mpTemp);
											}
										}
									}
									mlRelatedRefDocs.clear();
									
									//Added code for Requirement Id:46224 - Master Specification info addition to Part & Spec report - Starts 
									bHasTabAccess= getUserTabAccess(bIsEBPUser, bHasCMAccess, bHasSupplierAccess, strPartType, strMasterSpecs, strMasterSpecs_Supplier, strMasterSpecs_NonEBP);
									//Added the code for 22x.02 May Cw Defect 52202-Starts
									MapList mlMasterSpecification = pg.getRelatedMasterSpecDoc(context,dobjPart,mpCommonColumnsDetail, strUserName);
									//Added the code for 22x.02 May Cw Defect 52202-Ends
									iTempSize=mlMasterSpecification.size();
									if(iTempSize>0){
										for(int iIndex=0;iIndex<iTempSize;iIndex++){
											Map mpTemp=(Map)mlMasterSpecification.get(iIndex);
											if(bHasTabAccess){
												mlMasterSpecAll.add(mpTemp);
											}
										}
									}
									mlMasterSpecification.clear();
									//Added the code for 2022x.02 May CW Defect 52204 - Starts
									pg.getPerformanceCharcteristicsforSpecsandDocs(context,strUserName,dobjPart,mpCommonColumnsDetail,mlPerformanceCharacteristicsAll,strSelectedtabs);
									//Added the code for 2022x.02 May CW Defect 52204 - Ends
									//Added code for Requirement Id:46224 - Master Specification info addition to Part & Spec report - Ends 
										}catch(Exception e){
										outLog.print("Exception in the specs and docs.."+e+"\n");
										outLog.flush();
										}
									}
									// Code for Specs Docs --End
										
									// Code Added for Producing Formula --Start
									//Added code for Requirement Id:33635 -The report should only show tabs which user selected as the input--Starts
									if(strSelectedtabs.contains(TAB_PRODFORMULA)){
									//Added code for Requirement Id:33635 -The report should only show tabs which user selected as the input--Ends
										//Added the code for Defect 49698 - Spec Reader Access Issue - Starts
										boolean hasAccess = false;
										boolean isContextPushed = false;
										try {
										if(SPECREADER.equalsIgnoreCase(strOriginatingSource)) {
											hasAccess = accessCheck(context, strUserName, (String)dobjPart.getInfo(context, DomainConstants.SELECT_ID));
											if(hasAccess) {
												//Push Context User Agent
												ContextUtil.pushContext(context,PropertyUtil.getSchemaProperty(context,"User Agent"),DomainConstants.EMPTY_STRING,DomainConstants.EMPTY_STRING);
												isContextPushed = true;
												
											}
										}
										//Added the code for Defect 49698 - Spec Reader Access Issue - Ends
									//Modified by DSM Reports (Sogeti) for 2022x.4 (DEC CW 2023) Defect 55875 - Start
									Map mpCommonColumnsDetails = getCommonColumnsDetail(context,strUserName,dobjPart);
									//Modified by DSM Reports (Sogeti) for 2022x.4 (DEC CW 2023) Defect 55875 - End
									Map mpProducingFormulaCommon = dobjPart.getInfo(context, SL_OBJECT_COMMON);	
									String strPFRelName = DomainConstants.EMPTY_STRING;
									String strPFapprovePartFamilyName = DomainConstants.EMPTY_STRING;
									StringList slPFSelects = new StringList();
									slPFSelects.add(DomainConstants.SELECT_ID);
									slPFSelects.add(DomainConstants.SELECT_NAME);
									slPFSelects.add(DomainConstants.SELECT_TYPE);
									slPFSelects.add(DomainConstants.SELECT_REVISION);
									slPFSelects.add(DomainConstants.SELECT_CURRENT);
									slPFSelects.add(DomainConstants.SELECT_DESCRIPTION);
									slPFSelects.add(DomainConstants.SELECT_ATTRIBUTE_TITLE);
									//Added for Defect : 34908 - Starts
									slPFSelects.add(DomainConstants.SELECT_POLICY);
									//Added for Defect : 34908 - Starts
											
									MapList mlPFApprovePart = (MapList) dobjPart.getRelatedObjects(context,REL_PG_DEFINES_MATERIAL ,"*", slPFSelects, null, true,false, (short)1, null, null, 0);
									for(int i=0;i<mlPFApprovePart.size();i++){
										Map mpProducingFormula 	= (Map)mlPFApprovePart.get(i);
										mpProducingFormula.put("ParentType", mpProducingFormulaCommon.get(DomainConstants.SELECT_TYPE));
										mpProducingFormula.put("ParentName", mpProducingFormulaCommon.get(DomainConstants.SELECT_NAME));
										mpProducingFormula.put("ParentTitle", mpProducingFormulaCommon.get(pgV3Constants.SELECT_ATTRIBUTE_TITLE));
										mpProducingFormula.put("ParentCurrent", mpProducingFormulaCommon.get(pgV3Constants.SELECT_CURRENT));
										mpProducingFormula.put("ParentRevision", mpProducingFormulaCommon.get(pgV3Constants.SELECT_REVISION));
										//Added code for Req Id : 33634 - Hyperlinks--Starts
										mpProducingFormula.put("ParentId", mpProducingFormulaCommon.get(pgV3Constants.SELECT_ID));
										//Added code for Req Id : 33634 - Hyperlinks--Ends
										// Reason for change Attribute value missing in Producing formula
										mpProducingFormula.put("attribute[Reason for Change]",mpProducingFormulaCommon.get("attribute[Reason for Change]"));
										//Added the code for the Defect ID : 25104 - CA Tab is Empty : Starts
										if(mpCommonColumnsDetails.get("CARealizedName") != null && mpCommonColumnsDetails.get("CAProposedName") != null) {
											mpProducingFormula.put("Change Action", mpCommonColumnsDetails.get("CARealizedName"));
											//Added code for Req Id : 33634 - Hyperlinks--Starts
											mpProducingFormula.put("sCAId", mpCommonColumnsDetails.get("sCAId"));
											//Added code for Req Id : 33634 - Hyperlinks--Ends
										} else if(mpCommonColumnsDetails.get("CARealizedName") != null){
											mpProducingFormula.put("Change Action", mpCommonColumnsDetails.get("CARealizedName"));
											//Added code for Req Id : 33634 - Hyperlinks--Starts
											mpProducingFormula.put("sCAId", mpCommonColumnsDetails.get("sCAId"));
											//Added code for Req Id : 33634 - Hyperlinks--Ends
										} else if(mpCommonColumnsDetails.get("CAProposedName") != null){
											mpProducingFormula.put("Change Action", mpCommonColumnsDetails.get("CAProposedName"));
											//Added code for Req Id : 33634 - Hyperlinks--Starts
											mpProducingFormula.put("sCAId", mpCommonColumnsDetails.get("sCAId"));
											//Added code for Req Id : 33634 - Hyperlinks--Ends
										} else {
											mpProducingFormula.put("Change Action", "");
											//Added code for Req Id : 33634 - Hyperlinks--Starts
											mpProducingFormula.put("sCAId", "");
											//Added code for Req Id : 33634 - Hyperlinks--Ends
										}
										//Added the code for the Defect ID : 25104 - CA Tab is Empty : Ends
										//Added the code for Defect ID : 33186 - Family Care - DSMReport not correct for CM and Supplier User : Starts
										if(strPartPolicy.equalsIgnoreCase(pgV3Constants.POLICY_MANUFACTUREREQUIVALENT) || strPartPolicy.equalsIgnoreCase(pgV3Constants.POLICY_SUPPLIEREQUIVALENT)){
											bHasTabAccess=false;
										} else{
											//if tab access
											bHasTabAccess = getUserTabAccess(bIsEBPUser, bHasCMAccess, bHasSupplierAccess, strPartType, strEBPProducingFormula_CM, strEBPProducingFormula_Supplier, strProducingFormula_NonEBP);
										}
										//Added the code for Defect ID : 33186 - Family Care - DSMReport not correct for CM and Supplier User : Ends
										if(bHasTabAccess){
											mlProducingFormulaAll.add(mpProducingFormula);
										}
									}	
									//Added the code for Defect 49698 - Spec Reader Access Issue - Starts
									}catch(Exception e) {
										outLog.print("Exception while fetching the Producing Data "+e+"\n");
										outLog.flush();
									}finally {
										if(isContextPushed) {
											ContextUtil.popContext(context);
										}
									}
										//Added the code for Defect 49698 - Spec Reader Access Issue - Ends
									}
									// Code Added for Producing Formula --End
									//code Added for Substances & Materials -- Begins
									//if tab access
									//Added code for Requirement Id:33635 -The report should only show tabs which user selected as the input--Starts
									
									//Modified for Requirement -- 34942--starts
									//Commented the code for the Defect 51675 - Starts
//									if(strSelectedtabs.contains(TAB_SUBSMATERIAL)){
//									//Added the code for Defect ID : 33186 - Family Care - DSMReport not correct for CM and Supplier User : Starts
//										
//											//Updated if condition (bIsEBPUser) Added for Apr CW 18x6 for defect id 46628 - starts
//										//Modified for 2018x.6 CW Apr CW Defect 46862 - starts
//											if(strPartPolicy.equalsIgnoreCase(pgV3Constants.POLICY_SUPPLIEREQUIVALENT))
//										{
//												bHasTabAccess = getUserTabAccess(bIsEBPUser, bHasCMAccess, bHasSupplierAccess, strPartType, strEBPSubstancesAndMaterials_SEP_CM, strEBPSubstancesAndMaterials_SEP_Supplier, strSubstanceMaterial_SEP_NonEBP);
//												if (bHasTabAccess) {
//													bHasTabAccess = true;
//												} else {
//													bHasTabAccess = false;
//												}
//										}
//											//Modified for 2018x.6 CW Apr CW Defect 46862 - Ends
//											else
//										{
//											if(strPartPolicy.equalsIgnoreCase(pgV3Constants.POLICY_MANUFACTUREREQUIVALENT))
//											{//if tab access
//												
//												bHasTabAccess = getUserTabAccess(bIsEBPUser, bHasCMAccess, bHasSupplierAccess, strPartType, strEBPSubstancesAndMaterials_MEP_CM, strEBPSubstancesAndMaterials_MEP_Supplier, strSubstanceMaterial_MEP_NonEBP);
//												//Updated code as part of Defect 34909 Starts
//													if (bHasTabAccess) {
//														bHasTabAccess = true;
//													} else {
//														bHasTabAccess = false;
//													}
//												//Updated code as part of Defect 34909 Ends
//											}
//											else
//											{
//												//if tab access
//												bHasTabAccess = getUserTabAccess(bIsEBPUser, bHasCMAccess, bHasSupplierAccess, strPartType, strEBPSubstancesAndMaterials_CM, strEBPSubstancesAndMaterials_Supplier, strSubstanceMaterial_NonEBP);
//												//Updated code as part of Defect 34909 Starts
//													if (bHasTabAccess) {
//														bHasTabAccess = true;
//													} else {
//														bHasTabAccess = false;
//													}
//												//Updated code as part of Defect 34909 Ends
//											}
//										}
//										//Added the code for Defect ID : 33186 - Family Care - DSMReport not correct for CM and Supplier User : Ends
//										//Added code for Requirement Id:33635 -The report should only show tabs which user selected as the input--Ends
//										//Added code for Jan22_CW defect 44778 Starts
//										if(bHasTabAccess){
//											mlSubstanceAndMaterials = getSubstancesAndMaterials(context, strUserName, dobjPart, mlSubstanceAndMaterials, mpCommonColumnsDetail, bHasTabAccess);
//										}
//									}
									//Commented the code for the Defect 51675 - Ends
									//Modified for Requirement -- 34942--ends
									//Added the code for the Defect : ALM 30204 (Req 27949) -On Substance & Material tab, only release parts are shown, not non-release parts. Both Release and pre-Release parts must be displayed on the tab - Ends
									//code Added for Substances & Materials -- Ends
									
									//code Added for View Substitue -- Ends
									if(strSelectedtabs.contains(TAB_VIEWSUBSTITUTES)){
									//if tab access
									bHasTabAccess = getUserTabAccess(bIsEBPUser, bHasCMAccess, bHasSupplierAccess, strPartType, strEBPViewSubstitutes_CM, strEBPViewSubstitutes_Supplier, strViewSubstitutes_NonEBP);
									//Map mpObjectCommon= dobjPart.getInfo(context, SL_OBJECT_COMMON);
									mlViewSubstituteDetailsAll=getSubstituteDetails(context,strUserName,dobjPart,mpCommonColumnsDetail);
									iTempViewSubSize=mlViewSubstituteDetailsAll.size();										
									if(iTempViewSubSize>0){
										for(int iIndex=0;iIndex<iTempViewSubSize;iIndex++){
											mpViewSubDetails=(Map)mlViewSubstituteDetailsAll.get(iIndex);
											if(bHasTabAccess){
												mlViewSubstituteDetails.add(mpViewSubDetails);	
											}
										}
									}
									}
									//code Added for View Substitue -- Ends
									
									//Added for Requirement 30366: The report shall include Note tab only populate it when Note tab has data in UI--Starts
									if(strSelectedtabs.contains(TAB_NOTES)){
										//Added the code for Defect ID : 33186 - Family Care - DSMReport not correct for CM and Supplier User : Starts
										if(strPartPolicy.equalsIgnoreCase(pgV3Constants.POLICY_MANUFACTUREREQUIVALENT) || strPartPolicy.equalsIgnoreCase(pgV3Constants.POLICY_SUPPLIEREQUIVALENT)){
											bHasTabAccess=false;
										} else{
											//if tab access
											bHasTabAccess = getUserTabAccess(bIsEBPUser, bHasCMAccess, bHasSupplierAccess, strPartType, strEBPNotes_CM, strEBPNotes_Supplier, strNotes_NonEBP);
										}
										//Added the code for Defect ID : 33186 - Family Care - DSMReport not correct for CM and Supplier User : Ends
									mlNotesAll = getNotes(context,strUserName,dobjPart,mpCommonColumnsDetail);
									iTempNoteSize=mlNotesAll.size();
									if(iTempNoteSize>0){
										for(int iIndex=0;iIndex<iTempNoteSize;iIndex++){
											Map mpTemp=(Map)mlNotesAll.get(iIndex);
											if(bHasTabAccess){
												mlNotes.add(mpTemp);
											}
										}
									}
									// Added for Requirement 30366: The report shall include Note tab only populate it when Note tab has data in UI--Ends
									}
									//Added code for Requirement Id:29012-The report shall include new tab For FOP-Formula Ingredient-Starts
									if(strSelectedtabs.contains(TAB_FOPINGREDIENT)){
									//if tab access
									bHasTabAccess = getUserTabAccess(bIsEBPUser, bHasCMAccess, bHasSupplierAccess, strPartType, strEBPFormulaIngredient_CM, strEBPFormulaIngredient_Supplier, strFormulaIngredient_NonEBP);
									mlFormulaIngredientAll = getFormulaIngredientDetails(context,strUserName,dobjPart,mpCommonColumnsDetail);
									iTempFormulaIngredientSize = mlFormulaIngredientAll.size();
									if(iTempFormulaIngredientSize>0){
										for(int iIndex=0;iIndex<iTempFormulaIngredientSize;iIndex++){
											mpFormulaIngredientTemp=(Map)mlFormulaIngredientAll.get(iIndex);
											if(bHasTabAccess){
												mlFormulaIngredient.add(mpFormulaIngredientTemp);
											}
										}
									}
									}
									//Added code for Requirement Id:29012-The report shall include new tab For FOP-Formula Ingredient-Ends
										
									//Added code for Reqirement Id:31275-The report shall include new tab for SAP BOM As Fed-Starts	
									//Added code for Requirement Id:33635 -The report should only show tabs which user selected as the input--Starts
									if(strSelectedtabs.contains(TAB_SAPBOMASFED)){
									//Added code for Requirement Id:33635 -The report should only show tabs which user selected as the input--Ends
										//Added the code for Defect ID : 33186 - Family Care - DSMReport not correct for CM and Supplier User : Starts
										if(strPartPolicy.equalsIgnoreCase(pgV3Constants.POLICY_MANUFACTUREREQUIVALENT) || strPartPolicy.equalsIgnoreCase(pgV3Constants.POLICY_SUPPLIEREQUIVALENT)){
											bHasTabAccess = getUserTabAccess(bIsEBPUser, bHasCMAccess, bHasSupplierAccess, strPartType, strEBPSAPBOMAsFed_MEPSEP_CM, strEBPSAPBOMAsFed_Supplier, strSAPBOMAsFed_NonEBP);
										} else{
											//if tab access
											bHasTabAccess = getUserTabAccess(bIsEBPUser, bHasCMAccess, bHasSupplierAccess, strPartType, strEBPSAPBOMAsFed_CM, strEBPSAPBOMAsFed_Supplier, strSAPBOMAsFed_NonEBP);
										}
										//Added the code for Defect ID : 33186 - Family Care - DSMReport not correct for CM and Supplier User : Ends
									mlSAPBOMAll = getSAPBOMAsFed(context,strUserName,dobjPart,mpCommonColumnsDetail);
									iTempSAPBOMSize = mlSAPBOMAll.size();
									if(iTempSAPBOMSize>0){
										for(int iIndex=0;iIndex<iTempSAPBOMSize;iIndex++){
											mpSAPBOMTemp=(Map)mlSAPBOMAll.get(iIndex);
											if(bHasTabAccess){
												mlSAPBOM.add(mpSAPBOMTemp);
											}
										}
									}
									}
									//Added code for Reqirement Id:31275-The report shall include new tab for SAP BOM As Fed-Ends
									//Added code for Reqirement Id:31965- 2018x.3 -The report shall include new Tab for GPS Assessment-Starts
									if(strSelectedtabs.contains(TAB_GPSASSESMENTS)){
										bHasTabAccess = getUserTabAccess(bIsEBPUser, bHasCMAccess, bHasSupplierAccess, strPartType, strEBPGPSAssessment_CM, strEBPGPSAssessment_Supplier, strGPSAssessment_NonEBP);
										//Modified for requirement : 38092-starts
										mlGPSAssessmentsListAll = new MapList();
										mlGPSAssessmentsAll = getGPSAssessment(context,dobjPart,mpCommonColumnsDetail,strUserName,mlGPSAssessmentsListAll,DomainConstants.EMPTY_STRING);
										//Modified for requirement : 38092-ends
										iTempGPSAssessmentsize = mlGPSAssessmentsAll.size();
										if(iTempGPSAssessmentsize>0){
											for(int iIndex=0;iIndex<iTempGPSAssessmentsize;iIndex++){
												mpGPSAssessmentsTemp=(Map)mlGPSAssessmentsAll.get(iIndex);
												if(bHasTabAccess) {
													mlGPSAssessments.add(mpGPSAssessmentsTemp);
												}
											}
										}
									}
									//Added code for Reqirement Id:31965- 2018x.3 -The report shall include new Tab for GPS Assessment-Ends
									
									//Added code for Requirement Id:31971 -The report shall include new tab Country Clearance tab for FOP-Starts
									if(strSelectedtabs.contains(TAB_MARKETCLEARANCE)){
										bHasTabAccess = getUserTabAccess(bIsEBPUser, bHasCMAccess, bHasSupplierAccess, strPartType, strEBPCountryClearance_CM, strEBPCountryClearance_Supplier, strCountryClearance_NonEBP);
										//Modified the code for Defect 49698 - Spec Reader Access Issue - Starts
										mlCountryClearanceAll = getCountryClearance(context,dobjPart,mpCommonColumnsDetail, strUserName);
										//Modified the code for Defect 49698 - Spec Reader Access Issue - Ends
										iTempCountryClearanceSize = mlCountryClearanceAll.size();
										if(iTempCountryClearanceSize>0){
											for(int iIndex=0;iIndex<iTempCountryClearanceSize;iIndex++){
												mpCountryClearanceTemp=(Map)mlCountryClearanceAll.get(iIndex);
												if(bHasTabAccess) {
													mlCountryClearance.add(mpCountryClearanceTemp);
												}
											}
										}
									}
								 //Added code for Requirement Id:31971 -The report shall include new tab Country Clearance tab for FOP-Ends
									
								//Added code for Requirement Id:33646 -The report shall include new tab Market Of Sale tab-Starts
									
									if(strSelectedtabs.contains(TAB_MARKETOFSALE)){
										//Added the code for Defect ID : 33186 - Family Care - DSMReport not correct for CM and Supplier User : Starts
										if(strPartPolicy.equalsIgnoreCase(pgV3Constants.POLICY_MANUFACTUREREQUIVALENT) || strPartPolicy.equalsIgnoreCase(pgV3Constants.POLICY_SUPPLIEREQUIVALENT)){
											//If Access tab code 
											bHasTabAccess = getUserTabAccess(bIsEBPUser, bHasCMAccess, bHasSupplierAccess, strPartType, strEBPMarketOfSale_MEPSEP_CM, strEBPMarketOfSale_Supplier, strMarketOfSale_NonEBP);
										} else{
											//If Access tab code 
											bHasTabAccess = getUserTabAccess(bIsEBPUser, bHasCMAccess, bHasSupplierAccess, strPartType, strEBPMarketOfSale_CM, strEBPMarketOfSale_Supplier, strMarketOfSale_NonEBP);
										}
										//Added the code for Defect ID : 33186 - Family Care - DSMReport not correct for CM and Supplier User : Ends
										//Modified the code for Defect 49698 - Spec Reader Access Issue - Starts
										mlMarketOfSaleAll = getMarketOfSale(context,dobjPart,mpCommonColumnsDetail, strUserName);
										//Modified the code for Defect 49698 - Spec Reader Access Issue - Ends
										iTempMarketOfSaleSize = mlMarketOfSaleAll.size();
										if(iTempMarketOfSaleSize>0){
											for(int iIndex=0;iIndex<iTempMarketOfSaleSize;iIndex++){
												mpMarketOfSaleTemp=(Map)mlMarketOfSaleAll.get(iIndex);
												if(bHasTabAccess) {
													mlMarketOfSale.add(mpMarketOfSaleTemp);
												}
											}
										}
									}
									//Added code for Requirement Id:33646 -The report shall include new tab Market Of Sale tab-Ends
									//Added by DSM for 22x CW-05 for Requirement 49721  -changes for DSM Reports MOS Components - START
									if(strSelectedtabs.contains(TAB_MOSCOMDETAILS)){
										if(!(strPartPolicy.equalsIgnoreCase(pgV3Constants.POLICY_MANUFACTUREREQUIVALENT) || strPartPolicy.equalsIgnoreCase(pgV3Constants.POLICY_SUPPLIEREQUIVALENT))){
											//If Access tab code 
											bHasTabAccess = getUserTabAccess(bIsEBPUser, bHasCMAccess, bHasSupplierAccess, strPartType, strEBPMosCompDetails_CM, strEBPMosCompDetails_Supplier, strMosCompDetails_NonEBP);
										}
										if(bHasTabAccess) {
											mlMOSCompDetailsAll = pg.getMarketOfSaleDetail(context, dobjPart, mpCommonColumnsDetail, outLog);	
										}
										iTempMOSCompDetailsSize = mlMOSCompDetailsAll.size();
										if(iTempMOSCompDetailsSize>0){
											for(int iIndex=0;iIndex<iTempMOSCompDetailsSize;iIndex++){
												mpMOSCompDetailsTemp=(Map)mlMOSCompDetailsAll.get(iIndex);
												if(bHasTabAccess) {
													mlMOSCompDetails.add(mpMOSCompDetailsTemp);
												}
											}
										}
									}
									//Added by DSM for 22x CW-05 for Requirement 49721  -changes for DSM Reports MOS Components Details - END
									//Added code for Req Ids : 33656, 33871, 33872-New Tab : MEP-SEP Component Equivalents--Starts
									if(strSelectedtabs.contains(TAB_MEPSEPCOMEQUV)){
										if((strPartPolicy.equalsIgnoreCase(pgV3Constants.POLICY_MANUFACTUREREQUIVALENT) || strPartPolicy.equalsIgnoreCase(pgV3Constants.POLICY_SUPPLIEREQUIVALENT) || strPartName.startsWith("MEP-") || strPartName.startsWith("SEP-"))){
											Map<String,Object> mpCompEquivalentMEP = getComponentEquivalent(context,strUserName,dobjPart,mpCommonColumnsDetail);
											bHasTabAccess = getUserTabAccess(bIsEBPUser, bHasCMAccess, bHasSupplierAccess, strPartType, strCompEq_MEPSEP_CM, strCompEq_MEPSEP_Supplier, strCompEq_MEPSEP_NonEBP);								
											mlMEPSEPEquvAll = getCompEquiDetails(context,dobjPart,mpCommonColumnsDetail,strUserName,null);
											iTempMEPSEPEquvSize = mlMEPSEPEquvAll.size();
											if(iTempMEPSEPEquvSize>0){
												for(int iIndex=0;iIndex<iTempMEPSEPEquvSize;iIndex++){
													mpMEPSEPEquv = (Map)mlMEPSEPEquvAll.get(iIndex);
													if (bHasTabAccess) {
														mlCompEquiDetailsMEP.add(mpMEPSEPEquv);
													}
												}
											} 
										}
									}
									//Added code for Req Ids : 33656, 33871, 33872-New Tab : MEP-SEP Component Equivalents--Ends
									//Added code for Req Id : 33655 New Tab : MEP-SEP Certification--Starts
								//Modified for Defect 49452:22x01 CW  -- Starts
				
									if(strSelectedtabs.contains(TAB_MEPSEPCERTI) && (strPartPolicy.equalsIgnoreCase(pgV3Constants.POLICY_MANUFACTUREREQUIVALENT) || strPartPolicy.equalsIgnoreCase(pgV3Constants.POLICY_SUPPLIEREQUIVALENT))){
									//Modified for Defect 49452:22x01 CW  -- Ends
										bHasTabAccess = getUserTabAccess(bIsEBPUser, bHasCMAccess, bHasSupplierAccess, strPartType, strEBPMEPSEPCerti_CM, strEBPMEPSEPCerti_Supplier, strMEPRSEPCerti_NonEBP);
										//Added by DRA (Sogeti) for 22x.04 (December CW 2023) Defect 55205  - Starts
										mlMEPSEPCertiAll = getMEPSEPCertification(context,dobjPart,mpCommonColumnsDetail,strPartPolicy, strUserName);
										//Added by DRA (Sogeti) for 22x.04 (December CW 2023) Defect 55205  - Ends
										iTempMEPSEPCertiSize = mlMEPSEPCertiAll.size();
										if(iTempMEPSEPCertiSize>0){
											for(int iIndex=0;iIndex<iTempMEPSEPCertiSize;iIndex++){
												mpMEPSEPCerti=(Map)mlMEPSEPCertiAll.get(iIndex);
												if (bHasTabAccess) {
													mlMEPSEPCerti.add(mpMEPSEPCerti);
												}
											}
										} 
									}
									//Added code for Req Id : 33655 New Tab : MEP-SEP Certification--Ends
									//Added code for Req Id: 34226 New Tab : Part Certification--Starts
									if(strSelectedtabs.contains(TAB_PARTCERTI)){
										//Added the code for Defect ID : 33186 - Family Care - DSMReport not correct for CM and Supplier User : Starts
										//Added for Req 46645:18x6 Apr CW -- Starts
										
										bHasTabAccess = getUserTabAccess(bIsEBPUser, bHasCMAccess, bHasSupplierAccess, strPartType, strEBPPartCerti_CM, strEBPPartCerti_Supplier, strPartCerti_NonEBP);
										//Added for Req 46645:18x6 Apr CW -- Ends
										//Added the code for Defect ID : 33186 - Family Care - DSMReport not correct for CM and Supplier User : Ends
										if(strProductPart.contains("~"+strPartType+"~")){
											//Modified the code for Defect 49698 - Spec Reader Access Issue - Starts
											mlPartCertiAll = getPartCertificationFPP(context,dobjPart,strPartType,mpCommonColumnsDetail, strUserName);
											//Modified the code for Defect 49698 - Spec Reader Access Issue - Ends
										} else{
											//Modified the code for Defect 49698 - Spec Reader Access Issue - Starts
											mlPartCertiAll = getPartCertification(context,dobjPart,null,mpCommonColumnsDetail,strUserName);
											//Modified the code for Defect 49698 - Spec Reader Access Issue - Ends
										}
										iTempPartCertiSize = mlPartCertiAll.size();
										if(iTempPartCertiSize>0){
											for(int iIndex=0;iIndex<iTempPartCertiSize;iIndex++){
												mpPartCerti = (Map)mlPartCertiAll.get(iIndex);
												if(bHasTabAccess){
													mlPartCerti.add(mpPartCerti);
												}
											}
										}
									}
									//Added code for Req Id: 34226 New Tab : Part Certification--Ends
									//Added code for Req Ids : 34946, 34306, 34307, 34308, 34309, 34311, 34312, 34313, 34314 New Tab: Alternates--Starts
									if(strSelectedtabs.contains(TAB_ALTERNATE)){
										mlAlternateAll = getAlternate(context,strUserName,dobjPart,mpCommonColumnsDetail);
										iTempAlternateSize = mlAlternateAll.size();
										if(iTempAlternateSize>0){
											for(int iIndex=0;iIndex<iTempAlternateSize;iIndex++){
												mpAlternate=(Map)mlAlternateAll.get(iIndex);
												mlAlternate.add(mpAlternate);
											}
										} 
									}
									//Added code for Req Ids : 34946, 34306, 34307, 34308, 34309, 34311, 34312, 34313, 34314 New Tab: Alternates--Ends
									//New Materials & Composition tab for Req Id:34941--Starts
									//22x updgrade defect 50261 - Start
									if(strSelectedtabs.contains(TAB_MATCOM)){
										
									
											//Updated if condition (bIsEBPUser) Added for Apr CW 18x6 for defect id 46628 - starts
											//Modified for 2018x.6 CW Apr CW Defect 46862 - starts
										//Added the code for the Defect 51675 - Starts
											if(strPartPolicy.equalsIgnoreCase(pgV3Constants.POLICY_SUPPLIEREQUIVALENT) || strPartPolicy.equalsIgnoreCase(pgV3Constants.POLICY_MANUFACTUREREQUIVALENT) )
											{
												bHasTabAccess = getUserTabAccess(bIsEBPUser, bHasCMAccess, bHasSupplierAccess, strPartType, strEBPSubstancesAndMaterials_MEPSEP_CM, strEBPSubstancesAndMaterials_MEPSEP_Supplier, strSubstanceMaterial_MEPSEP_NonEBP);
												//Added the code for the Defect 51675 - Ends
												if (bHasTabAccess) {
													bHasTabAccess = true;
												} else {
													bHasTabAccess = false;
												}
											
												}
												else
												{
													//if tab access
													bHasTabAccess = getUserTabAccess(bIsEBPUser, bHasCMAccess, bHasSupplierAccess, strPartType, strEBPSubstancesAndMaterials_CM, strEBPSubstancesAndMaterials_Supplier, strSubstanceMaterial_NonEBP);
													//Updated code as part of Defect 34909 Starts
														if (bHasTabAccess) {
															bHasTabAccess = true;
															//Added the code for 2022x.02 May CW Defect 51675 - Starts 
															if(bIsEBPUser) {
																bHasTabAccess = pg.checkAccessforMATCOMEBPUser(context,dobjPart);
															}
															//Added the code for 2022x.02 May CW Defect 51675 - Ends
														} else {
															bHasTabAccess = false;
														}
													//Updated code as part of Defect 34909 Ends
												}
											
											//Added the code for Defect ID : 33186 - Family Care - DSMReport not correct for CM and Supplier User : Ends
											//Added code for Requirement Id:33635 -The report should only show tabs which user selected as the input--Ends
											if(bHasTabAccess){
												//Added the code for the Defect 51675 - Starts
												//Moving the code to resolve Sonar Qube Memory Issue - Starts
												//Added by DSM Reports (Sogeti) for 22x.04 (Dec CW 2023) Defect 56156 -- START
												mlMaterialsAndCompositionsAll = pg.getSubstancesAndMaterials(context, strUserName, dobjPart, mlSubstanceAndMaterials, mpCommonColumnsDetail, bHasTabAccess,strOriginatingSource, strPPartFamilyName);
												//Added by DSM Reports (Sogeti) for 22x.04 (Dec CW 2023) Defect 56156 -- END
												//Moving the code to resolve Sonar Qube Memory Issue - Ends
												if(BusinessUtil.isNotNullOrEmpty(mlMaterialsAndCompositionsAll)){
													iTempMaterialsAndCompositionSize = mlMaterialsAndCompositionsAll.size();
													if(iTempMaterialsAndCompositionSize>0){
														for(int iIndex=0;iIndex<iTempMaterialsAndCompositionSize;iIndex++){
															mpMaterialsAndCompositions=(Map)mlMaterialsAndCompositionsAll.get(iIndex);
															mpMaterialsAndCompositions.put(ATTR_PG_ASSEMBLY_TYPE, "packaging");
															mlMaterialsAndCompositions.add(mpMaterialsAndCompositions);
														}												
													}
													//Added the code for 2022x.02 May CW Defect 51675 - Starts 
													mlMaterialsAndCompositionsAll.clear();
													//Added the code for 2022x.02 May CW Defect 51675 - Ends
													
												}
												//Added the code for the Defect 51675 - Ends
											}						
									}
									//22x updgrade defect 50261 - End
									//New Materials & Composition tab for Req Id:34941--Ends
									//Added code for 2018x6.1 Oct CW requirement 39692 Add new tab Battery Rollup in Part and Spec report Starts
									if(strSelectedtabs.contains(TAB_BATTERYROLLUP)){
										bHasTabAccess = getUserTabAccess(bIsEBPUser, bHasCMAccess, bHasSupplierAccess, strPartType, EBPBATTERYROLLUP_CM, EBPBATTERYROLLUP_SUPPLIER, EBPBATTERYROLLUP_NONEBP);
										//Modified the code for Defect 49698 - Spec Reader Access Issue - Starts
										mlBatteryRollUpAll = getBatteryRollUp(context,mpCommonColumnsDetail, strUserName);
										//Modified the code for Defect 49698 - Spec Reader Access Issue - Ends
										iBatteryRollUpsize = mlBatteryRollUpAll.size();
										if(iBatteryRollUpsize>0){
											for(int iIndex=0;iIndex<iBatteryRollUpsize;iIndex++){
												mpBatteryRollUpTemp=(Map)mlBatteryRollUpAll.get(iIndex);
												if(bHasTabAccess) {
													mlBatteryRollUp.add(mpBatteryRollUpTemp);
												}
											}
										}
									}
									//Added code for 2018x6.1 Oct CW requirement 39692 Add new tab Battery Rollup in Part and Spec report Starts Ends
									//Added code for 2018x6.1 Oct CW requirement 40223 Add new Tab Characteristics - Apollo in Part and Spec Report Starts
									if(strSelectedtabs.contains(TAB_CHARACTERISTICSAPOLLO)){
										bHasTabAccess = getUserTabAccess(bIsEBPUser, bHasCMAccess, bHasSupplierAccess, strPartType, EBPCHARCTERISTICS_CM, EBPCHARCTERISTICS_SUPPLIER, CHARCTERISTICS_NONEBP);
										if(bHasTabAccess) {
											//Modified the code for Defect 49698 - Spec Reader Access Issue - Starts
											mlCharacteristicsAll = getAPPCharacteristic(context,mpCommonColumnsDetail, strUserName);
											//Modified the code for Defect 49698 - Spec Reader Access Issue - Ends
											iCharacteristicssize = mlCharacteristicsAll.size();
											if(iCharacteristicssize>0){
												for(int iIndex=0;iIndex<iCharacteristicssize;iIndex++){
													mpCharacteristicsTemp=(Map)mlCharacteristicsAll.get(iIndex);
													mlCharacteristics.add(mpCharacteristicsTemp);
												}
											}
										}
									}
									//Added code for 2018x6.1 Oct CW requirement 40223 Add new Tab Characteristics - Apollo in Part and Spec Report Ends
									//Added code for 2018x6.1 Oct CW requirement 40224 Add new tab Design Parameter in Part and Spec report Starts
									if(strSelectedtabs.contains(TAB_DESIGNPARAMETER)){
										bHasTabAccess = getUserTabAccess(bIsEBPUser, bHasCMAccess, bHasSupplierAccess, strPartType, EBPDESIGNPARAMETER_CM, EBPDESIGNPARAMETER_SUPPLIER, DESIGNPARAMETER_NONEBP);
										//Updated code for defect 45306 Starts
										if(bHasTabAccess) {
										//Updated code for defect 45306 Ends
											//Modified the code for Defect 49698 - Spec Reader Access Issue - Starts
											mlDesignParameterAll = getDesignParameter(context,mpCommonColumnsDetail,strUserName);
											//Modified the code for Defect 49698 - Spec Reader Access Issue - Ends
											iDesignParametersize = mlDesignParameterAll.size();
											if(iDesignParametersize>0){
												for(int iIndex=0;iIndex<iDesignParametersize;iIndex++){
													mpDesignParameterTemp=(Map)mlDesignParameterAll.get(iIndex);
													mlDesignParameter.add(mpDesignParameterTemp);
												}
											}
										}
									}
									//Added code for 2018x6.1 Oct CW requirement 40224 Add new tab Design Parameter in Part and Spec report Ends
									//Added code for 2018x6.1 Oct CW requirement 40942 Add new tab Chem/Phys Properties in Part and Spec report Starts
									if(strSelectedtabs.contains(TAB_CHEMPHYSICALPROPERTIES)){
										bHasTabAccess = getUserTabAccess(bIsEBPUser, bHasCMAccess, bHasSupplierAccess, strPartType, EBPCHEMPHYSICALPROP_CM, EBPCHEMPHYSICALPROP_SUPPLIER, CHEMPHYSICALPROP_NONEBP);
										if(bHasTabAccess) {
											//Modified the code for Defect 49698 - Spec Reader Access Issue - Starts
											mlChemPhysicalPropertiesAll = getChemPhysicalProperties(context,mpCommonColumnsDetail,strUserName);
											//Modified the code for Defect 49698 - Spec Reader Access Issue - Ends
											iChemPhysicalPropertiessize = mlChemPhysicalPropertiesAll.size();
											if(iChemPhysicalPropertiessize>0){
												for(int iIndex=0;iIndex<iChemPhysicalPropertiessize;iIndex++){
													mpChemPhysicalPropertiesTemp=(Map)mlChemPhysicalPropertiesAll.get(iIndex);
													mlChemPhysicalProperties.add(mpChemPhysicalPropertiesTemp);
													}
												}
										}
									}
									//Added code for 2018x6.1 Oct CW requirement 40942 Add new tab Chem/Phys Properties in Part and Spec report Ends
									//Added for Apr22 CW requirement 41600 Starts
									if(strSelectedtabs.contains(TAB_SUSTAINIBILITY)){
										if(strPartPolicy.equalsIgnoreCase(pgV3Constants.POLICY_MANUFACTUREREQUIVALENT) || strPartPolicy.equalsIgnoreCase(pgV3Constants.POLICY_SUPPLIEREQUIVALENT)){
											bHasTabAccess=false;
										} else{
											bHasTabAccess = getUserTabAccess(bIsEBPUser, bHasCMAccess, bHasSupplierAccess, strPartType, EBPSUSTAINABILITY_CM, EBPSUSTAINABILITY_SUPPLIER, SUSTAINABILITY_NONEBP);
										}
										
										if(bHasTabAccess) {
											//Modified the code for Defect 49698 - Spec Reader Access Issue - Starts
											mlSustainabilityAll = getSustainability(context,mpCommonColumnsDetail, strUserName);
											//Modified the code for Defect 49698 - Spec Reader Access Issue - Ends
											iSustainabilitysize = mlSustainabilityAll.size();
											if(iSustainabilitysize>0){
												for(int iIndex=0;iIndex<iSustainabilitysize;iIndex++){
													mpSustainabilityTemp=(Map)mlSustainabilityAll.get(iIndex);
													mlSustainability.add(mpSustainabilityTemp);
													}
												}
										}
									}
									//Added for Apr22 CW requirement 41600 Ends
									
									//Added the code for 2018x.6  MAY CW Requirement 41969 - starts
									if(strSelectedtabs.contains(TAB_DGCLASSIFICATION)){
										if(strPartPolicy.equalsIgnoreCase(pgV3Constants.POLICY_MANUFACTUREREQUIVALENT) || strPartPolicy.equalsIgnoreCase(pgV3Constants.POLICY_SUPPLIEREQUIVALENT)){
											bHasTabAccess=false;
										} else{
											bHasTabAccess = getUserTabAccess(bIsEBPUser, bHasCMAccess, bHasSupplierAccess, strPartType, strEBPDGClassification_CM, strEBPDGClassification_Supplier, strEBPDGClassification_NonEBP);
										}
										if(bHasTabAccess) {
											if(strProductPart.contains("~"+strPartType+"~")){
												mlDGClassificationAll = getDGClassificationDetailsFPP(context,dobjPart,mpCommonColumnsDetail,strUserName);
											}else {
												//Modified the code for Defect 49698 - Spec Reader Access Issue - Starts
												mlDGClassificationAll = getDGClassificationDetails(context,dobjPart,mpCommonColumnsDetail,strUserName);
												//Modified the code for Defect 49698 - Spec Reader Access Issue - Ends
											}
											
											iDGClassificationsize = mlDGClassificationAll.size();
											if(iDGClassificationsize>0){
												for(int iIndex=0;iIndex<iDGClassificationsize;iIndex++){
													mpDGClassificationTemp=(Map)mlDGClassificationAll.get(iIndex);
													mlDGClassification.add(mpDGClassificationTemp);
													}
											}
											
										}
										
									}
									//Added the code for 2018x.6  MAY CW Requirement 41969 - Ends
									//Added the code for 22x Feb CW Requirement 45443 - Starts

									if(strSelectedtabs.contains(TAB_SUBSTITUTEPARTSIN)){
										if(strPartPolicy.equalsIgnoreCase(pgV3Constants.POLICY_MANUFACTUREREQUIVALENT) || strPartPolicy.equalsIgnoreCase(pgV3Constants.POLICY_SUPPLIEREQUIVALENT)){
											bHasTabAccess=false;
										} else{
											bHasTabAccess = getUserTabAccess(bIsEBPUser, bHasCMAccess, bHasSupplierAccess, strPartType, EBPSUBTITUTEPARTSIN_CM, EBPSUBTITUTEPARTSIN_Supplier, EBPSUBTITUTEPARTSIN_NonEBP);
										}
										MapList	mlSubstitutePartsInAll = pg.getSubstitutePartsInDetails(context, dobjPart,mpCommonColumnsDetail,strUserName,outLog);
										int substitutePartsInsize = mlSubstitutePartsInAll.size();
											for(int iIndex=0;iIndex<substitutePartsInsize;iIndex++) {
												mpSubstitutePartsInTemp = (Map)mlSubstitutePartsInAll.get(iIndex);
												if(bHasTabAccess){
												mlSubstitutePartsIn.add(mpSubstitutePartsInTemp);
												}
											}
									}
									//Added the code for 22x Feb CW Requirement 45443 - Ends
							} 
						}
					}
				}
			}
			//Code for Part ---End
			//Added code for Requirement Id:33635 -The report should only show tabs which user selected as the input--Starts
			//added strSelectedTabs in args
			//Updated code for 2018x.6 Requirement id 36700 Ability to generate Part and Spec report with without hyperlink Starts
			//Added for 2018x.6 May22 CW requirement 41969-Starts
			createExcelWorkbook(context,mlParentChildWeight,mlPlantDetails,mlAttribute,mlPerformanceCharacteristicsAll,mlCompMaterials,mlPeerReviewTask,mlParentChildBOM,mlWeightsAndDim,mlIpClassAll,mlCompEquiDetails,mlSpecsDocsAll,mlSpecsRefDocsAll,mlMasterSpecAll,strUserName,mlApprove,mlProducingFormulaAll,strReportFileName,strReportObjectId,mlSubstanceAndMaterials,mlViewSubstituteDetails,mlNotes,mlFormulaIngredient,mlSAPBOM,mlParentChildEBOMWD,mlGPSAssessments,mlCountryClearance,mlMarketOfSale,mlMOSCompDetails,mlCompEquiDetailsMEP, mlMEPSEPCerti, mlPartCerti, mlAlternate, mlMaterialsAndCompositions, strSelectedtabs, mPassValue, mlBatteryRollUp, mlCharacteristics,mlDesignParameter,mlChemPhysicalProperties,mlSustainability,mlDGClassification,mlSubstitutePartsIn);						
			//Added for 2018x.6 May22 CW requirement 41969-Ends
			//Updated code for 2018x.6 Requirement id 36700 Ability to generate Part and Spec report with without hyperlink Ends
			//Added code for Requirement Id:33635 -The report should only show tabs which user selected as the input--Ends
		} 
	catch (Exception e) {
	 		e.printStackTrace();
 	}
}





//Updated for 42010



private MapList getWeightAndDimDetails(Context context, String strUserName,DomainObject dobjRelatedPart, Map mpCommonColumnsDetail) throws Exception {
	//Added the code for Defect 49698 - Spec Reader Access Issue - Starts
boolean hasAccess = false;
boolean isContextPushed = false;
//Added the code for Defect 49698 - Spec Reader Access Issue - Ends
String strPartType = (String)mpCommonColumnsDetail.get(DomainConstants.SELECT_TYPE);
String strPartId = (String)mpCommonColumnsDetail.get(DomainConstants.SELECT_ID);
String sWhereExp ="";
StringList objectSelects = new StringList(40);
objectSelects.add("name");
objectSelects.add("id");
objectSelects.add("attribute["+ATTR_PG_CSS_TYPE + "]");
objectSelects.add("attribute["+ATTRIBUTE_PGUNITOFMEASURESYSTEM + "]");
objectSelects.add("attribute["+ATTRIBUTE_PGGTIN + "]");
objectSelects.add("attribute["+ATTRIBUTE_PGDEPTH + "]");
objectSelects.add("attribute["+ATTRIBUTE_PGWIDTH + "]");
objectSelects.add("attribute["+ATTRIBUTE_PGHEIGHT + "]");
objectSelects.add("attribute["+ATTRIBUTE_PGDIMENSIONUNITOFMEASURE + "]");
objectSelects.add("attribute["+ATTRIBUTE_PGGROSSWEIGHT + "]");
//Added for Defect Id :32151- Starts
//objectSelects.add("attribute["+ATTRIBUTE_PGGROSSWEIGHTUNITOFMEASURE + "]");
//Added for Defect Id :32151- Ends
objectSelects.add("attribute["+ATTRIBUTE_PGCONSUMERUNITSPERPACKINGUNIT + "]");
objectSelects.add("attribute["+ATTRIBUTE_PGNETWEIGHTOFPRODUCTINCONSUMERUNIT + "]");
objectSelects.add("attribute["+ATTRIBUTE_PGNETWEIGHTUNITOFMEASURE + "]");
objectSelects.add("attribute["+ATTRIBUTE_PGCUBEEFFICIENCY + "]");
objectSelects.add("attribute["+ATTRIBUTE_PGPALLETTYPE + "]");
objectSelects.add("attribute["+SELECT_ATTRIBUTE_PGVOLUME + "]");
objectSelects.add("attribute["+ATTRIBUTE_PGVOLUMEUNITOFMEASURE + "]");
objectSelects.add("attribute["+SELECT_ATTRIBUTE_PGGROSSWEIGHTWITHPALLET + "]");
objectSelects.add("attribute["+SELECT_ATTRIBUTE_PGGROSSWEIGHTWITHOUTPALLET + "]");
objectSelects.add("attribute["+SELECT_ATTRIBUTE_PGCUSTOMERUNITPERLAYER + "]");
objectSelects.add("attribute["+SELECT_ATTRIBUTE_PGLAYERSPERTRANSPORTUNIT + "]");
objectSelects.add("attribute["+SELECT_ATTRIBUTE_PGCUSTUNITPERTRANSPORTUNIT + "]");
objectSelects.add("attribute["+SELECT_ATTRIBUTE_PGMAXPALLETSTACKHEIGHT + "]");
objectSelects.add("attribute["+SELECT_ATTRIBUTE_PGMAXCASESTACKHEIGHT + "]");
objectSelects.add("attribute["+SELECT_ATTRIBUTE_PGMAXTRUCKPALLETHEIGHT + "]");
objectSelects.add("from[Reference Document].to.name");
objectSelects.add("attribute["+ATTRIBUTE_PGALTERNATEUNITOFMEASURE + "]");
objectSelects.add("attribute["+ATTRIBUTE_PGGROSSWEIGHTREAL + "]");
objectSelects.add("attribute["+ATTRIBUTE_PGNETWEIGHTOFPRODUCTINCONSUMERUNITREAL + "]");
objectSelects.add("attribute["+ATTRIBUTE_PGNUMBEROFCONSUMERUNITSINCUSTOMERUNIT + "]");
objectSelects.add(pgV3Constants.SELECT_ATTRIBUTE_PGNETWEIGHTOFPRODUCTINCONSUMERUNITUOM);
objectSelects.add(pgV3Constants.SELECT_ATTRIBUTE_PGDIMENSIONUOM);
objectSelects.add("attribute["+ATTRIBUTE_PGVOLUMEREAL + "]");
objectSelects.add("attribute["+ATTRIBUTE_PGGROSSWEIGHTWITHPALLETREAL + "]");
objectSelects.add("attribute["+ATTRIBUTE_PGGROSSWEIGHTWITHOUTPALLETREAL + "]");
objectSelects.add(pgV3Constants.SELECT_ATTRIBUTE_PGCUSTOMERUNITSPERLAYERINTEGER);
objectSelects.add(pgV3Constants.SELECT_ATTRIBUTE_PGLAYERSPERTRANSPORTUNITINTEGER);
objectSelects.add("attribute["+ATTRIBUTE_PGWHSEPALLETSTACKMAXHEIGHT + "]");
objectSelects.add("attribute["+ATTRIBUTE_PGWHSECASEMAXHEIGHT + "]");
objectSelects.add("attribute["+ATTRIBUTE_PGOUTERDIMENSIONLENGTH + "]");
objectSelects.add(pgV3Constants.SELECT_ATTRIBUTE_PGTRUCKPALLETSTACKMAXHEIGHT);
objectSelects.add(pgV3Constants.SELECT_ATTRIBUTE_PGCUBEEFFECIENCY);
objectSelects.add(pgV3Constants.SELECT_ATTRIBUTE_PGOUTERDIMENSIONWIDTH);
objectSelects.add(pgV3Constants.SELECT_ATTRIBUTE_PGOUTERDIMENSIONHEIGHT);
objectSelects.add(pgV3Constants.SELECT_LEVEL);
objectSelects.add("from[Part Specification].to[pgStackingPattern].name");
objectSelects.add("to[Classified Item].frommid[Part Family Reference].torel.to.attribute[pgDimensionUoM].value");
objectSelects.add("to[Classified Item].frommid[Part Family Reference].torel.to.attribute[pgOuterDimensionLength].value");
objectSelects.add("to[Classified Item].frommid[Part Family Reference].torel.to.attribute[pgOuterDimensionWidth].value");
objectSelects.add("to[Classified Item].frommid[Part Family Reference].torel.to.attribute[pgOuterDimensionHeight].value");
objectSelects.add("attribute[Title]");
objectSelects.add("attribute[pgIsPrimary]");

//Added for requirement 39708
objectSelects.add("attribute["+ATTR_UNDERHANGACTUALLENGTH+"]");
objectSelects.add("attribute["+ATTR_UNDERHANGACTUALWIDTH+"]");
objectSelects.add("attribute["+ATTR_OVERHANGACTUALLENGTH+"]");
objectSelects.add("attribute["+ATTR_OVERHANGACTUALWIDTH+"]");
StringList  slRelSelects = new StringList();
StringBuffer sbRelPattern = new StringBuffer();
StringBuffer sbTypePattern = new StringBuffer();
slRelSelects.add(pgV3Constants.SELECT_ATTRIBUTE_QUANTITY);
slRelSelects.add(pgV3Constants.SELECT_ATTRIBUTE_PGGROSSWEIGHTWITHPALLETREAL);
slRelSelects.add(pgV3Constants.SELECT_ATTRIBUTE_PGGROSSWEIGHTWITHOUTPALLETREAL);
slRelSelects.add("attribute[pgIsPrimary]");
//Added for Defect Id :32151- Starts
slRelSelects.add("attribute["+ATTRIBUTE_PGGROSSWEIGHTUNITOFMEASURE+"]");
//Added for Defect Id :32151- Ends
//Added the code for Defect 49698 - Spec Reader Access Issue - Starts
try {
	
if(SPECREADER.equalsIgnoreCase(strOriginatingSource)) {
	hasAccess = accessCheck(context, strUserName, strPartId);
	if(hasAccess) {
		//Push Context User Agent
		ContextUtil.pushContext(context,PropertyUtil.getSchemaProperty(context,"User Agent"),DomainConstants.EMPTY_STRING,DomainConstants.EMPTY_STRING);
		isContextPushed = true;
		
	}
}
//Added the code for Defect 49698 - Spec Reader Access Issue - Ends
String strType = (String)mpCommonColumnsDetail.get(DomainConstants.SELECT_TYPE);
if("Finished Product Part".equalsIgnoreCase(strType)){		
	sbRelPattern.append(pgV3Constants.RELATIONSHIP_EBOM);
	sbRelPattern.append(",");
	sbRelPattern.append(pgV3Constants.RELATIONSHIP_PGTRANSPORTUNIT);
	sbRelPattern.append(",");
	sbRelPattern.append(pgV3Constants.RELATIONSHIP_CLASSIFIEDITEM);
	sbTypePattern.append(pgV3Constants.TYPE_PGCUSTOMERUNITPART);
	sbTypePattern.append(",");
	sbTypePattern.append(pgV3Constants.TYPE_PGCONSUMERUNITPART);
	sbTypePattern.append(",");
	sbTypePattern.append(pgV3Constants.TYPE_PGTRANSPORTUNITPART);
	sbTypePattern.append(",");
	sbTypePattern.append(pgV3Constants.TYPE_PGINNERPACKUNITPART);
	sbTypePattern.append(",");
	sbTypePattern.append(pgV3Constants.TYPE_PARTFAMILY);
	sbTypePattern.append(",");
	sbTypePattern.append(pgV3Constants.TYPE_PGAUTHORIZEDTEMPORARYSTANDARD);
} else {
	sbRelPattern.append(pgV3Constants.RELATIONSHIP_CHARACTERISTIC);
	sbRelPattern.append(",");
	sbRelPattern.append(pgV3Constants.RELATIONSHIP_CLASSIFIEDITEM);
	sbTypePattern.append(pgV3Constants.TYPE_PGPACKINGUNITCHARACTERISTIC);
	sbTypePattern.append(",");
	sbTypePattern.append(pgV3Constants.TYPE_PGTRANSPORTUNITCHARACTERISTIC);
	sbTypePattern.append(",");
	sbTypePattern.append(pgV3Constants.TYPE_PARTFAMILY);
	sbTypePattern.append(",");
	sbTypePattern.append(pgV3Constants.TYPE_PGAUTHORIZEDTEMPORARYSTANDARD);
	sWhereExp ="";
}
//Start Modified for 22x Upgrade to handle new API changes for multi value select
StringList slMultiSelect = new StringList(2);				
slMultiSelect.add("from["+pgV3Constants.RELATIONSHIP_PGDOCUMENTTOBUSINESSAREA+"].to.name");
slMultiSelect.add("from["+pgV3Constants.RELATIONSHIP_PGDOCUMENTTOPLATFORM+"].to.name");
Map mTSDetail= dobjRelatedPart.getInfo(context, SL_OBJECT_ATTRIBUTE_SELECT, slMultiSelect);
//End Modified for 22x Upgrade to handle new API changes for multi value select
//Added by DSM Reports (Sogeti) for 22x.04 (Dec CW 2023) Defect 56156 -- START
String strPartFamilyName = strPPartFamilyName;
//Added by DSM Reports (Sogeti) for 22x.04 (Dec CW 2023) Defect 56156 -- END


mTSDetail.put("PartFamilyName", strPartFamilyName);
mTSDetail.put("CommonColumns", mpCommonColumnsDetail);
//ALM #30149 - Enhancement to remove TS header row
//mlWeightAndDimList.add(mTSDetail);


	MapList mlWeightAndDim = (MapList) dobjRelatedPart.getRelatedObjects(context, sbRelPattern.toString(),sbTypePattern.toString(), objectSelects, slRelSelects, false,true, (short)0, sWhereExp, null, 0);
	String sTempVal = new String();
	boolean cupLevel1=false;
	boolean ipLevel2= false;
	Double dQuantity=0.0;
	String sQuantity="";
	String strQuan="";
	String iPrevious="";
	String strPackQuna ="";
	String strPackingTransObjId = DomainConstants.EMPTY_STRING;
	String strRelName = DomainConstants.EMPTY_STRING;
	//2018x0 APril Bug Fix
	String strTitle = DomainConstants.EMPTY_STRING;
	String strtype = DomainConstants.EMPTY_STRING;
	String strGWWithPallet = DomainConstants.EMPTY_STRING;
	String strGWWithOutPallet = DomainConstants.EMPTY_STRING;
	String strQuantity = DomainConstants.EMPTY_STRING;
	String strLevel = DomainConstants.EMPTY_STRING;
	String strQua = DomainConstants.EMPTY_STRING;
	String strPackType = DomainConstants.EMPTY_STRING;
	String CSSType = DomainConstants.EMPTY_STRING;
	String strCusUnitPerTU = DomainConstants.EMPTY_STRING;
	String strLayersPerTU = DomainConstants.EMPTY_STRING;
	String strIsPrimary = DomainConstants.EMPTY_STRING;
	//Added for Defect Id :43868-Start
	boolean bFirstCOPReached = false;
	//Added for Defect Id :43868-End
	//Added for Defect Id :32151- Starts
	String strGrossWeightUOM = DomainConstants.EMPTY_STRING;
	//Added for Defect Id :32151- Ends
	StringList slReturnVal = new StringList();
	boolean isInnerPack=false;
	//Added for defect 44562 W&D Number of Consumer Units per Unit not same between two side Starts
	boolean isMultipleCOP=false;
	//Added for defect 44562 W&D Number of Consumer Units per Unit not same between two side Ends
	for(int i=0;i<mlWeightAndDim.size();i++){
		Map mp = (Map)mlWeightAndDim.get(i);
		strPackingTransObjId = (String)mp.get("id");
		strRelName = (String)mp.get("relationship");
		strtype = (String)mp.get("type");
		strTitle = (String)mp.get("attribute[Title]");
		strGWWithPallet = (String)mp.get("attribute[pgGrossWeightWithPalletReal]");
		strGWWithOutPallet = (String)mp.get("attribute[pgGrossWeightWithoutPalletReal]");
		strIsPrimary = (String)mp.get("attribute[pgIsPrimary]");
		//Added for Defect Id :32151- Starts
		strGrossWeightUOM = (String)mp.get("attribute[pgGrossWeightUnitOfMeasure]");
		//Added for Defect Id :32151- Ends
		if(UIUtil.isNotNullAndNotEmpty(strIsPrimary)){
			if(strIsPrimary.equalsIgnoreCase("TRUE") || strIsPrimary.equalsIgnoreCase("YES") ){
				strIsPrimary = "Yes";
			} else if(strIsPrimary.equalsIgnoreCase("FALSE") || strIsPrimary.equalsIgnoreCase("NO")){
				strIsPrimary = "No";
			}
		}
		HashMap hmQuantity = new HashMap<>();
		strQuantity = (String)mp.get("attribute[Quantity]");
		strLevel = (String)mp.get("level");	
		if(strtype.equals("pgCustomerUnitPart") && "1".equals(strLevel)) {
			DomainObject dobjCustomerPart = DomainObject.newInstance(context, strPackingTransObjId) ;
			cupLevel1=true;
			StringBuffer sbTypePattern2 = new StringBuffer();
			sbTypePattern2.append(pgV3Constants.TYPE_PGCONSUMERUNITPART);
			sbTypePattern2.append(",");
			sbTypePattern2.append(pgV3Constants.TYPE_PGINNERPACKUNITPART);
			MapList mlConsumer = (MapList) dobjCustomerPart.getRelatedObjects(context, pgV3Constants.RELATIONSHIP_EBOM,sbTypePattern2.toString(), objectSelects, slRelSelects, false,true, (short)0, sWhereExp, null, 0);
			
			if(mlConsumer.size()>0){
				for(int j=0;j<mlConsumer.size();j++){
					Map mpQuantity = (Map)mlConsumer.get(j);
					strPackType = (String)mpQuantity.get("type");
					//Updated for defect 44562 W&D Number of Consumer Units per Unit not same between two side Starts
					if(!isMultipleCOP && strPackType.equals(pgV3Constants.TYPE_PGCONSUMERUNITPART)) {
						isMultipleCOP = true;
					//Updated for defect 44562 W&D Number of Consumer Units per Unit not same between two side Starts
						strQua = (String)mpQuantity.get("attribute[Quantity]");
						strQuan=strQua;
					}
				if(strPackType.equalsIgnoreCase(pgV3Constants.TYPE_PGINNERPACKUNITPART)){
					isInnerPack=true;
					Map mpPackQuantity = (Map)mlConsumer.get(j);
					strPackQuna = (String)mpPackQuantity.get("attribute[Quantity]");
				}
				if (UIUtil.isNotNullAndNotEmpty(strPackQuna) && UIUtil.isNotNullAndNotEmpty(strQuan)){
					dQuantity = Double.parseDouble(strPackQuna) * Double.parseDouble(strQuan);
					sQuantity= dQuantity.toString();
				}
			}
		}
	}
	DomainObject dobjPackTrans = DomainObject.newInstance(context, strPackingTransObjId);
	//Added for Defect Id :32151- Starts
	objectSelects.add("attribute["+ATTRIBUTE_PGGROSSWEIGHTUNITOFMEASURE+"]");
	//Added for Defect Id :32151- Ends
	Map mpPackTrans = dobjPackTrans.getInfo(context, objectSelects);
	HashMap hmWeightAndDim = new HashMap<>();
	if(pgV3Constants.TYPE_PGCUSTOMERUNITPART.equalsIgnoreCase(strtype)){
					
		CSSType = "Customer Unit  " + (mpPackTrans.get("name"));
		hmWeightAndDim.put("FPCSSType", CSSType);
		hmWeightAndDim.put("FPTitle", mpPackTrans.get("attribute[Title]"));
		hmWeightAndDim.put("AUOM", mpPackTrans.get("attribute[pgAlternateUnitOfMeasure]"));
		//Depth Begin			
		if(mpPackTrans.get("to[Classified Item].frommid[Part Family Reference].torel.to.attribute[pgOuterDimensionLength].value")==null || mpPackTrans.get("to[Classified Item].frommid[Part Family Reference].torel.to.attribute[pgOuterDimensionLength].value")==""){
			String dDepth ="0.0";
			hmWeightAndDim.put("FPDepth", dDepth);				
		} else {
			hmWeightAndDim.put("FPDepth", mpPackTrans.get("to[Classified Item].frommid[Part Family Reference].torel.to.attribute[pgOuterDimensionLength].value"));					
		}			
		//Depth End
				
		//Width Begin
		if(mpPackTrans.get("to[Classified Item].frommid[Part Family Reference].torel.to.attribute[pgOuterDimensionWidth].value")==null || mpPackTrans.get("to[Classified Item].frommid[Part Family Reference].torel.to.attribute[pgOuterDimensionWidth].value")==""){
			String dWidth ="0.0";
			hmWeightAndDim.put("FPWidth", dWidth);				
		} else {
			hmWeightAndDim.put("FPWidth", mpPackTrans.get("to[Classified Item].frommid[Part Family Reference].torel.to.attribute[pgOuterDimensionWidth].value"));					
		}
		//Width End
		
		//Height Begin			
		if( mpPackTrans.get("to[Classified Item].frommid[Part Family Reference].torel.to.attribute[pgOuterDimensionHeight].value")==null || mpPackTrans.get("to[Classified Item].frommid[Part Family Reference].torel.to.attribute[pgOuterDimensionHeight].value")==""){
			String dHeight ="0.0";
			hmWeightAndDim.put("FPHeight", dHeight);				
		} else {
			hmWeightAndDim.put("FPHeight", mpPackTrans.get("to[Classified Item].frommid[Part Family Reference].torel.to.attribute[pgOuterDimensionHeight].value"));					
		}
		//Height End			
		hmWeightAndDim.put("FPGTIN", mpPackTrans.get("attribute[pgGTIN]"));
		//Dimension UOM Begin
		if(mpPackTrans.get("to[Classified Item].frommid[Part Family Reference].torel.to.attribute[pgDimensionUoM].value")==null || ("to[Classified Item].frommid[Part Family Reference].torel.to.attribute[pgDimensionUoM].value")==""){
			String dDUOM ="";
			hmWeightAndDim.put("FPDUOM", dDUOM);				
		} else {
			hmWeightAndDim.put("FPDUOM", mpPackTrans.get("to[Classified Item].frommid[Part Family Reference].torel.to.attribute[pgDimensionUoM].value"));					
		}			
		//Dimension UOM End
		hmWeightAndDim.put("FPGWReal", mpPackTrans.get("attribute[pgGrossWeightReal]"));
		hmWeightAndDim.put("FPGWUOM", mpPackTrans.get("attribute[pgGrossWeightUnitOfMeasure]"));
		hmWeightAndDim.put("FPNWOfProduct", mpPackTrans.get("attribute[pgNetWeightOfProductInConsumerUnitReal]"));
		if(isInnerPack) {
			hmWeightAndDim.put("FPNoOfCU", sQuantity);
		} else {
			hmWeightAndDim.put("FPNoOfCU", strQuan);
		}
		hmWeightAndDim.put("FPNWProdUOM", mpPackTrans.get("attribute[pgNetWeightOfProductInConsumerUnitUoM]"));
		hmWeightAndDim.put("PartFamilyName", strPartFamilyName);
		hmWeightAndDim.put("CommonColumns", mpCommonColumnsDetail);
		mlWeightAndDimList.add(hmWeightAndDim);
	} else if(pgV3Constants.TYPE_PGINNERPACKUNITPART.equalsIgnoreCase(strtype)){					
		CSSType = "Inner Pack  " + (mpPackTrans.get("name"));
		hmWeightAndDim.put("FPCSSType", CSSType);
		hmWeightAndDim.put("FPTitle", mpPackTrans.get("attribute[Title]"));
		hmWeightAndDim.put("AUOM", mpPackTrans.get("attribute[pgAlternateUnitOfMeasure]"));
		//Depth Begin			
		if(mpPackTrans.get("to[Classified Item].frommid[Part Family Reference].torel.to.attribute[pgOuterDimensionLength].value")==null || mpPackTrans.get("to[Classified Item].frommid[Part Family Reference].torel.to.attribute[pgOuterDimensionLength].value")==""){
			String dDepth ="0.0";
			hmWeightAndDim.put("FPDepth", dDepth);				
		} else {
			hmWeightAndDim.put("FPDepth", mpPackTrans.get("to[Classified Item].frommid[Part Family Reference].torel.to.attribute[pgOuterDimensionLength].value"));					
		}			
		//Depth End
		//Width Begin
		if(mpPackTrans.get("to[Classified Item].frommid[Part Family Reference].torel.to.attribute[pgOuterDimensionWidth].value")==null || mpPackTrans.get("to[Classified Item].frommid[Part Family Reference].torel.to.attribute[pgOuterDimensionWidth].value")==""){
			String dWidth ="0.0";
			hmWeightAndDim.put("FPWidth", dWidth);				
		} else {
			hmWeightAndDim.put("FPWidth", mpPackTrans.get("to[Classified Item].frommid[Part Family Reference].torel.to.attribute[pgOuterDimensionWidth].value"));					
		}
		//Width End
		//Height Begin			
		if( mpPackTrans.get("to[Classified Item].frommid[Part Family Reference].torel.to.attribute[pgOuterDimensionHeight].value")==null || mpPackTrans.get("to[Classified Item].frommid[Part Family Reference].torel.to.attribute[pgOuterDimensionHeight].value")==""){
			String dHeight ="0.0";
			hmWeightAndDim.put("FPHeight", dHeight);				
		} else {
			hmWeightAndDim.put("FPHeight", mpPackTrans.get("to[Classified Item].frommid[Part Family Reference].torel.to.attribute[pgOuterDimensionHeight].value"));					
		}
		//Height End			
		hmWeightAndDim.put("FPGTIN", mpPackTrans.get("attribute[pgGTIN]"));
		//Dimension UOM Begin
		if( mpPackTrans.get("to[Classified Item].frommid[Part Family Reference].torel.to.attribute[pgDimensionUoM].value")==null || ("to[Classified Item].frommid[Part Family Reference].torel.to.attribute[pgDimensionUoM].value")==""){
			String dDUOM ="";
			hmWeightAndDim.put("FPDUOM", dDUOM);				
		} else {
			hmWeightAndDim.put("FPDUOM", mpPackTrans.get("to[Classified Item].frommid[Part Family Reference].torel.to.attribute[pgDimensionUoM].value"));					
		}			
		//Dimension UOM End
		hmWeightAndDim.put("FPGWReal", mpPackTrans.get("attribute[pgGrossWeightReal]")); 
		hmWeightAndDim.put("FPGWUOM", mpPackTrans.get("attribute[pgGrossWeightUnitOfMeasure]"));
		hmWeightAndDim.put("FPNWOfProduct", mpPackTrans.get("attribute[pgNetWeightOfProductInConsumerUnitReal]"));
		//Added the code for Defect ID : 28390	nubmer of consumer unit issue in DSM Parts and Specs report : Starts
		if(isInnerPack)
			hmWeightAndDim.put("FPNoOfCU", strQuan);
		else
			hmWeightAndDim.put("FPNoOfCU", sQuantity);
			
		//Added the code for Defect ID : 28390	nubmer of consumer unit issue in DSM Parts and Specs report : Ends
		hmWeightAndDim.put("FPNWProdUOM", mpPackTrans.get("attribute[pgNetWeightOfProductInConsumerUnitUoM]"));
		hmWeightAndDim.put("PartFamilyName", strPartFamilyName);
		hmWeightAndDim.put("CommonColumns", mpCommonColumnsDetail);
		mlWeightAndDimList.add(hmWeightAndDim);
		//Updated for Defect Id :43868- Start
	} else if(pgV3Constants.TYPE_PGCONSUMERUNITPART.equalsIgnoreCase(strtype) && !bFirstCOPReached) {
		bFirstCOPReached = true;
		//Updated for Defect Id :43868- End
		CSSType = "Consumer Unit  " + (mpPackTrans.get("name"));
		hmWeightAndDim.put("FPCSSType", CSSType);
		hmWeightAndDim.put("FPTitle", mpPackTrans.get("attribute[Title]"));
		hmWeightAndDim.put("AUOM", mpPackTrans.get("attribute[pgAlternateUnitOfMeasure]"));
		//Depth Begin			
		if(mpPackTrans.get("to[Classified Item].frommid[Part Family Reference].torel.to.attribute[pgOuterDimensionLength].value")==null || mpPackTrans.get("to[Classified Item].frommid[Part Family Reference].torel.to.attribute[pgOuterDimensionLength].value")==""){
			String dDepth ="0.0";
			hmWeightAndDim.put("FPDepth", dDepth);				
		} else {
			hmWeightAndDim.put("FPDepth", mpPackTrans.get("to[Classified Item].frommid[Part Family Reference].torel.to.attribute[pgOuterDimensionLength].value"));					
		}			
		//Depth End
		//Width Begin
		if(mpPackTrans.get("to[Classified Item].frommid[Part Family Reference].torel.to.attribute[pgOuterDimensionWidth].value")==null || mpPackTrans.get("to[Classified Item].frommid[Part Family Reference].torel.to.attribute[pgOuterDimensionWidth].value")==""){
			String dWidth ="0.0";
			hmWeightAndDim.put("FPWidth", dWidth);				
		} else {
			hmWeightAndDim.put("FPWidth", mpPackTrans.get("to[Classified Item].frommid[Part Family Reference].torel.to.attribute[pgOuterDimensionWidth].value"));					
		}
		//Width End
		//Height Begin			
		if( mpPackTrans.get("to[Classified Item].frommid[Part Family Reference].torel.to.attribute[pgOuterDimensionHeight].value")==null || mpPackTrans.get("to[Classified Item].frommid[Part Family Reference].torel.to.attribute[pgOuterDimensionHeight].value")==""){
			String dHeight ="0.0";
			hmWeightAndDim.put("FPHeight", dHeight);				
		} else {
						hmWeightAndDim.put("FPHeight", mpPackTrans.get("to[Classified Item].frommid[Part Family Reference].torel.to.attribute[pgOuterDimensionHeight].value"));					
					}
					//Height End		
					hmWeightAndDim.put("FPGTIN", mpPackTrans.get("attribute[pgGTIN]"));
					//Dimension UOM Begin
					if( mpPackTrans.get("to[Classified Item].frommid[Part Family Reference].torel.to.attribute[pgDimensionUoM].value")==null || ("to[Classified Item].frommid[Part Family Reference].torel.to.attribute[pgDimensionUoM].value")==""){
						String dDUOM ="";
						hmWeightAndDim.put("FPDUOM", dDUOM);				
					} else {
						hmWeightAndDim.put("FPDUOM", mpPackTrans.get("to[Classified Item].frommid[Part Family Reference].torel.to.attribute[pgDimensionUoM].value"));					
					}			
					//Dimension UOM End
					hmWeightAndDim.put("FPGWReal", mpPackTrans.get("attribute[pgGrossWeightReal]"));
					hmWeightAndDim.put("FPGWUOM", mpPackTrans.get("attribute[pgGrossWeightUnitOfMeasure]"));
					hmWeightAndDim.put("FPNWOfProduct", mpPackTrans.get("attribute[pgNetWeightOfProductInConsumerUnitReal]"));
					hmWeightAndDim.put("FPNWProdUOM", mpPackTrans.get("attribute[pgNetWeightOfProductInConsumerUnitUoM]"));
					hmWeightAndDim.put("PartFamilyName", strPartFamilyName);
					hmWeightAndDim.put("CommonColumns", mpCommonColumnsDetail);
					mlWeightAndDimList.add(hmWeightAndDim);
				}
				else if(pgV3Constants.TYPE_PGTRANSPORTUNITPART.equalsIgnoreCase(strtype)) {
					strCusUnitPerTU = (String) mpPackTrans.get("attribute[pgCustomerUnitsPerLayerInteger]");
					strLayersPerTU = (String) mpPackTrans.get("attribute[pgLayersPerTransportUnitInteger]");
					//Added for Jan22_CW defect 44583 Starts
					if(!"#DENIED!".equalsIgnoreCase(strLayersPerTU)) {
						long lCupPerTup = Long.parseLong(strCusUnitPerTU) * Long.parseLong(strLayersPerTU);
						sTempVal = String.valueOf(lCupPerTup);
					} else {
						sTempVal = strLayersPerTU;
						strGWWithPallet = pgV3Constants.DENIED;
						strGWWithOutPallet = pgV3Constants.DENIED;
						strGrossWeightUOM = pgV3Constants.DENIED;
						strIsPrimary = pgV3Constants.DENIED;
					}
					//Added for Jan22_CW defect 44583 Ends
					hmWeightAndDim.put("FPPalletType", mpPackTrans.get("attribute[pgPalletType]"));
					//2018x April Bug Fix
					hmWeightAndDim.put("FPTUName", mpPackTrans.get("name"));
					//Added code for Req Id : 33634 - Hyperlinks--Starts
					hmWeightAndDim.put("FPTUId", mpPackTrans.get("id"));
					//Added code for Req Id : 33634 - Hyperlinks--Ends
					hmWeightAndDim.put("FPTUTitle", mpPackTrans.get("attribute[Title]"));
					hmWeightAndDim.put("FPTUGTIN", mpPackTrans.get("attribute[pgGTIN]"));
					hmWeightAndDim.put("FPTUDepth", mpPackTrans.get("attribute[pgOuterDimensionLength]"));
					hmWeightAndDim.put("FPTUWidth", mpPackTrans.get("attribute[pgOuterDimensionWidth]"));
					hmWeightAndDim.put("FPTUHeight", mpPackTrans.get("attribute[pgOuterDimensionHeight]"));
					hmWeightAndDim.put("FPTUDUOM", mpPackTrans.get("attribute[pgDimensionUoM]"));
					hmWeightAndDim.put("FPTUVolume", mpPackTrans.get("attribute[pgVolumeReal]"));
					hmWeightAndDim.put("FPVUOM", mpPackTrans.get("attribute[pgVolumeUnitOfMeasure]"));
					hmWeightAndDim.put("FPGWWithPallet", strGWWithPallet);
					hmWeightAndDim.put("FPGWWithOutPallet", strGWWithOutPallet);
					//Added for Defect Id :32151- Starts
					hmWeightAndDim.put("FPTUGWUOM", strGrossWeightUOM);
					//Added for Defect Id :32151- Ends
					hmWeightAndDim.put("FPCUPerLayer", mpPackTrans.get("attribute[pgCustomerUnitsPerLayerInteger]"));
					hmWeightAndDim.put("FPLayersPerTU", mpPackTrans.get("attribute[pgLayersPerTransportUnitInteger]"));
					hmWeightAndDim.put("FPTUCusUnit", sTempVal);
					hmWeightAndDim.put("FPPalletStack", mpPackTrans.get("attribute[pgWhsePalletStackMaxHeight]"));
					hmWeightAndDim.put("FPPalletCase", mpPackTrans.get("attribute[pgWhseCaseMaxHeight]"));
					hmWeightAndDim.put("FPPalletTruck", mpPackTrans.get("attribute[pgTruckPalletStackMaxHeight]"));
					hmWeightAndDim.put("FPStackPattern", mpPackTrans.get("from[Part Specification].to[pgStackingPattern].name"));
					hmWeightAndDim.put("FPCubeEfficiency", mpPackTrans.get("attribute[pgCubeEffeciency]"));
					hmWeightAndDim.put("FPIncludeInSAPBOMFeed", strIsPrimary);
					hmWeightAndDim.put("PartFamilyName", strPartFamilyName);					
					hmWeightAndDim.put("CommonColumns", mpCommonColumnsDetail);
					//Added for requirement 39708
					hmWeightAndDim.put("UnderhangActualLength",mpPackTrans.get("attribute["+ATTR_UNDERHANGACTUALLENGTH+"]"));
					hmWeightAndDim.put("UnderhangActualWidth",mpPackTrans.get("attribute["+ATTR_UNDERHANGACTUALWIDTH+"]"));
					hmWeightAndDim.put("OverhangActualLength",mpPackTrans.get("attribute["+ATTR_OVERHANGACTUALLENGTH+"]"));
					hmWeightAndDim.put("OverhangActualWidth",mpPackTrans.get("attribute["+ATTR_OVERHANGACTUALWIDTH+"]"));
					mlWeightAndDimList.add(hmWeightAndDim);
				}
				if(strRelName.equalsIgnoreCase(pgV3Constants.RELATIONSHIP_CHARACTERISTIC))
				{
					Map mStackingPattern = null;
					MapList mlStackingPatterns = null;
					DomainObject doObj = null;
					String strStackingPatternName = "";
					String strObjId = (String)mp.get("id");
					doObj = DomainObject.newInstance(context, strObjId);
					mlStackingPatterns = doObj.getRelatedObjects(context,DomainConstants.RELATIONSHIP_REFERENCE_DOCUMENT, pgV3Constants.TYPE_PGSTACKINGPATTERN, objectSelects, null, true, true, (short)1, null, null);
					mStackingPattern = new HashMap();
					strStackingPatternName = (String) mStackingPattern.get(DomainConstants.SELECT_NAME);
					if(pgV3Constants.TYPE_PGPACKINGUNITCHARACTERISTIC.equalsIgnoreCase(strtype)){
						hmWeightAndDim.put("CSSType", mp.get("attribute[pgCSSType]"));
						hmWeightAndDim.put("UOMS", mp.get("attribute[pgUnitOfMeasureSystem]"));
						hmWeightAndDim.put("Title", mp.get("attribute[Title]"));
						hmWeightAndDim.put("GTIN", mp.get("attribute[pgGTIN]"));
						hmWeightAndDim.put("Depth", mp.get("attribute[pgDepth]"));
						hmWeightAndDim.put("Width", mp.get("attribute[pgWidth]"));
						hmWeightAndDim.put("Height", mp.get("attribute[pgHeight]"));
						hmWeightAndDim.put("DUOM", mp.get("attribute[pgDimensionUnitOfMeasure]"));
						hmWeightAndDim.put("GrossWeight", mp.get("attribute[pgGrossWeight]"));
						hmWeightAndDim.put("GWUOM", mp.get("attribute[pgGrossWeightUnitOfMeasure]"));
						hmWeightAndDim.put("CUPerPU", mp.get("attribute[pgConsumerUnitsPerPackingUnit]"));
						hmWeightAndDim.put("WeightOfProdCU", mp.get("attribute[pgNetWeightOfProductInConsumerUnit]"));
						hmWeightAndDim.put("NetWUOM", mp.get("attribute[pgNetWeightUnitOfMeasure]"));
						hmWeightAndDim.put("PartFamilyName", strPartFamilyName);
						hmWeightAndDim.put("CommonColumns", mpCommonColumnsDetail);
						mlWeightAndDimList.add(hmWeightAndDim);
					}
					else if (pgV3Constants.TYPE_PGTRANSPORTUNITCHARACTERISTIC.equalsIgnoreCase(strtype)){
						hmWeightAndDim.put("TUName", mp.get("name"));
						hmWeightAndDim.put("PalletType", mp.get("attribute[pgPalletType]"));
						hmWeightAndDim.put("TUTitle", mpPackTrans.get("attribute[Title]"));
						hmWeightAndDim.put("TUGTIN", mp.get("attribute[pgGTIN]"));
						hmWeightAndDim.put("TUDepth", mp.get("attribute[pgDepth]"));
						hmWeightAndDim.put("TUWidth", mp.get("attribute[pgWidth]"));
						hmWeightAndDim.put("TUHeight", mp.get("attribute[pgHeight]"));
						hmWeightAndDim.put("TUDUOM", mp.get("attribute[pgDimensionUnitOfMeasure]"));
						hmWeightAndDim.put("Volume", mp.get("attribute[pgVolume]"));
						hmWeightAndDim.put("VUOM", mp.get("attribute[pgVolumeUnitOfMeasure]"));
						hmWeightAndDim.put("WeigtWithPallet", mp.get("attribute[pgGrossWeightWithPallet]"));
						hmWeightAndDim.put("GrossWeightWithOutPallet", mp.get("attribute[pgGrossWeightWithoutPallet]"));
						hmWeightAndDim.put("TUGWUOM", mp.get("attribute[pgGrossWeightUnitOfMeasure]"));
						hmWeightAndDim.put("CusUnitPerLayer", mp.get("attribute[pgCustomerUnitsPerLayer]"));
						hmWeightAndDim.put("LayersPerTU", mp.get("attribute[pgLayersPerTransportUnit]"));
						hmWeightAndDim.put("CusUnitPerTU", mp.get("attribute[pgCustomerUnitsPerTransportUnit]"));
						hmWeightAndDim.put("TUCubeEfficiency", mp.get("attribute[pgCubeEfficiency]"));
						hmWeightAndDim.put("PalletStackHeight", mp.get("attribute[pgMaxPalletStackHeight]"));
						hmWeightAndDim.put("MaxCaseStackHeight", mp.get("attribute[pgMaxCaseStackHeight]"));
						hmWeightAndDim.put("TruckPalletHeight", mp.get("attribute[pgMaxTruckPalletStackHeight]"));
						hmWeightAndDim.put("StackPatternName", strStackingPatternName);
						hmWeightAndDim.put("PartFamilyName", strPartFamilyName);
						hmWeightAndDim.put("CommonColumns", mpCommonColumnsDetail);
						mlWeightAndDimList.add(hmWeightAndDim);
					}
				}
			}
		} catch (Exception e) {
			//Modified the code for Defect 49698 - Spec Reader Access Issue - Starts
			outLog.print("Exception while feching weights and dimensions "+e+"\n");
			outLog.flush();
			}finally {
				if(isContextPushed) {
					ContextUtil.popContext(context);
				}
			}
//Modified the code for Defect 49698 - Spec Reader Access Issue - Ends
		
		return mlWeightAndDimList;	
	}
	
private MapList addingParentChildWeights(Context context, MapList mlWeightChild, Map mpWeightCharacteristics, Map mpCommonColumnsDetail) {
		try {
			mlParentChildWeightEachPart.add(mpWeightCharacteristics);
			String strPartFamilyName = (String)mpWeightCharacteristics.get("PartFamilyName");
			for (int i=0;i<mlWeightChild.size();i++){
				Map mpWeightChild = (Map)mlWeightChild.get(i);
				String strChildTitle = (String)mpWeightChild.get(pgV3Constants.SELECT_ATTRIBUTE_TITLE);
				((Map)(mlWeightChild.get(i))).put("ParentName",mpCommonColumnsDetail.get(DomainConstants.SELECT_NAME));	
				((Map)(mlWeightChild.get(i))).put("PartFamilyName",strPartFamilyName);	
				((Map)(mlWeightChild.get(i))).put("ParentTitle",mpCommonColumnsDetail.get(pgV3Constants.SELECT_ATTRIBUTE_TITLE));
				((Map)(mlWeightChild.get(i))).put("ParentCurrent",mpCommonColumnsDetail.get(pgV3Constants.SELECT_CURRENT));
				//Code for requirement to addition of revision and state on all tabs except attribute -- Starts
				((Map)(mlWeightChild.get(i))).put("ParentRevision",mpCommonColumnsDetail.get(DomainConstants.SELECT_REVISION));
				//Code for requirement to addition of revision and state on all tabs except attribute -- Ends
				((Map)(mlWeightChild.get(i))).put("ChildTitle",strChildTitle);
				//Code Upgrade for 2018x Data Model - Starts
				if((mpCommonColumnsDetail.get("CAProposedName") != null && mpCommonColumnsDetail.containsKey("CAProposedName")) && (mpCommonColumnsDetail.get("CARealizedName") != null && mpCommonColumnsDetail.containsKey("CARealizedName"))) {
				
					((Map)(mlWeightChild.get(i))).put("ChangeAction",mpCommonColumnsDetail.get("CARealizedName"));
					//Added code for Req Id : 33634 - Hyperlinks--Starts
					((Map)(mlWeightChild.get(i))).put("sCAId",mpCommonColumnsDetail.get("sCAId"));
					//Added code for Req Id : 33634 - Hyperlinks--Ends
					
				} else if (mpCommonColumnsDetail.get("CARealizedName") != null && mpCommonColumnsDetail.containsKey("CARealizedName")){
					
					((Map)(mlWeightChild.get(i))).put("ChangeAction",mpCommonColumnsDetail.get("CARealizedName")); 
					//Added code for Req Id : 33634 - Hyperlinks--Starts
					((Map)(mlWeightChild.get(i))).put("sCAId",mpCommonColumnsDetail.get("sCAId"));
					//Added code for Req Id : 33634 - Hyperlinks--Ends
					
				} else if( mpCommonColumnsDetail.get("CAProposedName") != null && mpCommonColumnsDetail.containsKey("CAProposedName")) {
					
					((Map)(mlWeightChild.get(i))).put("ChangeAction",mpCommonColumnsDetail.get("CAProposedName"));
					//Added code for Req Id : 33634 - Hyperlinks--Starts
					((Map)(mlWeightChild.get(i))).put("sCAId",mpCommonColumnsDetail.get("sCAId"));
					//Added code for Req Id : 33634 - Hyperlinks--Ends
					
				} else {
					((Map)(mlWeightChild.get(i))).put("ChangeAction","");
					//Added code for Req Id : 33634 - Hyperlinks--Starts
					((Map)(mlWeightChild.get(i))).put("sCAId","");
					//Added code for Req Id : 33634 - Hyperlinks--Ends
				}
				if( mpCommonColumnsDetail.get("attribute[Reason for Change]") != null && mpCommonColumnsDetail.containsKey("attribute[Reason for Change]")) {
					((Map)(mlWeightChild.get(i))).put("CAReasonForChange",mpCommonColumnsDetail.get("attribute[Reason for Change]"));
				}
				else{
					((Map)(mlWeightChild.get(i))).put("CAReasonForChange", "");
				}
				if(mpCommonColumnsDetail.get("to[Derived].from.name") != null){
					((Map)(mlWeightChild.get(i))).put("DerivedFromName", mpCommonColumnsDetail.get("to[Derived].from.name"));
					}
					else{
						((Map)(mlWeightChild.get(i))).put("DerivedFromName", "");
					}
				//Added code for Req Id : 33634 - Hyperlinks--Starts
				if(mpCommonColumnsDetail.get("to[Derived].from.id") != null){
					((Map)(mlWeightChild.get(i))).put("DerivedFromId", mpCommonColumnsDetail.get("to[Derived].from.id"));
					}
					else{
						((Map)(mlWeightChild.get(i))).put("DerivedFromId", "");
					}	
				//Added code for Req Id : 33634 - Hyperlinks--Ends
				if(mpCommonColumnsDetail.get("to[Derived].from.attribute[Title]") != null){
					((Map)(mlWeightChild.get(i))).put("DerivedFromTitle", mpCommonColumnsDetail.get("to[Derived].from.attribute[Title]"));
					}
					else{
						((Map)(mlWeightChild.get(i))).put("DerivedFromTitle", "");
					}
				mlParentChildWeightEachPart.add(mlWeightChild.get(i));
					
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		return mlParentChildWeightEachPart;
	}
	
private MapList addingParentChildBOM(Context context, MapList mlBOMChild, Map mpBOMCharacteristics,Map mpCommonColumnsDetail,String strUserName) {
		try {			
			mlParentChildBOMEachPart.add(mpBOMCharacteristics);
			//Modified for Defect 50780:22x01 -- Starts
			DomainObject domChildPart = null;
			for (int i=0;i<mlBOMChild.size();i++){
				//Added by DSM Reports (Sogeti) for 22x.04 (Dec CW 2023) Defect 56156 -- START
				String strPartFamilyName =DomainConstants.EMPTY_STRING;
				Map mpBOMChild= (Map)mlBOMChild.get(i);
				String strChildPartID = (String)mpBOMChild.get(pgV3Constants.SELECT_ID);
				//Added by DSM Reports (Sogeti) for 22x.04 (Dec CW 2023) Defect 56156 -- END
				//Modified for Defect 50780:22x01 -- Ends
				((Map)(mlBOMChild.get(i))).put("ParentName",mpCommonColumnsDetail.get(DomainConstants.SELECT_NAME));
				((Map)(mlBOMChild.get(i))).put("ParentTitle",mpCommonColumnsDetail.get(pgV3Constants.SELECT_ATTRIBUTE_TITLE));
				((Map)(mlBOMChild.get(i))).put("ParentCurrentState",mpCommonColumnsDetail.get(pgV3Constants.SELECT_CURRENT));
				((Map)(mlBOMChild.get(i))).put("ParentRevision",mpCommonColumnsDetail.get(pgV3Constants.SELECT_REVISION));
				//Added for Defect 50780:22x 01 CW -- Starts

			    //Added for Defect 50780:22x 01 CW -- Ends
				if(mpCommonColumnsDetail.get("to[Derived].from.name") != null){
					((Map)(mlBOMChild.get(i))).put("DerivedFromName", mpCommonColumnsDetail.get("to[Derived].from.name"));
					//Added code for Req Id : 33634 - Hyperlinks--Starts
					((Map)(mlBOMChild.get(i))).put("DerivedFromId", mpCommonColumnsDetail.get("to[Derived].from.id"));
					//Added code for Req Id : 33634 - Hyperlinks--Ends
					}
					else{
						((Map)(mlBOMChild.get(i))).put("DerivedFromName", "");
						//Added code for Req Id : 33634 - Hyperlinks--Starts
						((Map)(mlBOMChild.get(i))).put("DerivedFromId", "");
						//Added code for Req Id : 33634 - Hyperlinks--Ends
					}
				
				//Code Upgrade for 2018x Data Model - Starts
				if((mpCommonColumnsDetail.get("CAProposedName") != null && mpCommonColumnsDetail.containsKey("CAProposedName")) && (mpCommonColumnsDetail.get("CARealizedName") != null && mpCommonColumnsDetail.containsKey("CARealizedName"))) {
					((Map)(mlBOMChild.get(i))).put("ChangeAction",mpCommonColumnsDetail.get("CARealizedName"));
					//Added code for Req Id : 33634 - Hyperlinks--Starts
					((Map)(mlBOMChild.get(i))).put("sCAId",mpCommonColumnsDetail.get("sCAId"));
					//Added code for Req Id : 33634 - Hyperlinks--Ends
				} else if (mpCommonColumnsDetail.get("CARealizedName") != null && mpCommonColumnsDetail.containsKey("CARealizedName")){
					((Map)(mlBOMChild.get(i))).put("ChangeAction",mpCommonColumnsDetail.get("CARealizedName")); 
					//Added code for Req Id : 33634 - Hyperlinks--Starts
					((Map)(mlBOMChild.get(i))).put("sCAId",mpCommonColumnsDetail.get("sCAId"));
					//Added code for Req Id : 33634 - Hyperlinks--Ends
				} else if( mpCommonColumnsDetail.get("CAProposedName") != null && mpCommonColumnsDetail.containsKey("CAProposedName")) {
					((Map)(mlBOMChild.get(i))).put("ChangeAction",mpCommonColumnsDetail.get("CAProposedName"));
					//Added code for Req Id : 33634 - Hyperlinks--Starts
					((Map)(mlBOMChild.get(i))).put("sCAId",mpCommonColumnsDetail.get("sCAId"));
					//Added code for Req Id : 33634 - Hyperlinks--Ends
				} else {
					((Map)(mlBOMChild.get(i))).put("ChangeAction","");
					//Added code for Req Id : 33634 - Hyperlinks--Starts
					((Map)(mlBOMChild.get(i))).put("sCAId","");
					//Added code for Req Id : 33634 - Hyperlinks--Ends
				}
				//Code Upgrade for 2018x Data Model - Ends
				
				if( mpCommonColumnsDetail.get("attribute[Reason for Change]") != null && mpCommonColumnsDetail.containsKey("attribute[Reason for Change]")) {
					((Map)(mlBOMChild.get(i))).put("CAReasonForChange",mpCommonColumnsDetail.get("attribute[Reason for Change]"));
				}
				else{
					((Map)(mlBOMChild.get(i))).put("CAReasonForChange", "");
				}
				//Modified For Alternate Name --Begin
				String strObjectId= (String)((Map)(mlBOMChild.get(i))).get("id");
				DomainObject dObjPart = DomainObject.newInstance(context, strObjectId);				
				String strValue = DomainConstants.EMPTY_STRING;
				strValue = setContextAndFetchValueForUser(context,dObjPart,strUserName);
				
				// Added by DSM Reports (Sogeti) for 22x.04 (Dec CW 2023) Defect 56156 -- START
				if(!"#DENIED!".equals(strValue) || SPECREADER.equalsIgnoreCase(strOriginatingSource)) {
					if(null != mpBOMChild.get(TO_CLASSIFIED_ITEM)) {
						if (mpBOMChild.get(TO_CLASSIFIED_ITEM) instanceof StringList){
							strPartFamilyName = mpBOMChild.get(TO_CLASSIFIED_ITEM).toString();
							strPartFamilyName = strPartFamilyName.replace("[", "").replace("]", "");
						} else {
							strPartFamilyName = (String) mpBOMChild.get(TO_CLASSIFIED_ITEM);
						}
					} 
				} else {
					strPartFamilyName = NO_ACCESS;
				}
				
				
				if(UIUtil.isNotNullAndNotEmpty(strPartFamilyName)){
					((Map)(mlBOMChild.get(i))).put("PartFamilyName",strPartFamilyName);	
				} else {
					((Map)(mlBOMChild.get(i))).put("PartFamilyName","");	
				}
				// Added by DSM Reports (Sogeti) for 22x.04 (Dec CW 2023) Defect 56156 -- END
				
				// Added by DSM Reports (Sogeti) for 22x.03 (May CW 2023) Defect 49457 - Start
				String strDerivedObjectId= (String)mpCommonColumnsDetail.get("to[Derived].from.id");
				String strFromDerivedValue = DomainConstants.EMPTY_STRING;
				if(UIUtil.isNotNullAndNotEmpty(strDerivedObjectId)) {
				DomainObject dDerivedObjPart = DomainObject.newInstance(context, strDerivedObjectId);				
				strFromDerivedValue = setContextAndFetchValueForUser(context,dDerivedObjPart,strUserName);
				}
				// Added by DSM Reports (Sogeti) for 22x.03 (May CW 2023) Defect 49457 - End
				// Modified by DSM Reports (Sogeti) for 22x.03 (May CW 2023) Defect 49457 - Start
				//Added the code for 2018x.6 Jun CW Defect 46893 - Starts
				if(mpCommonColumnsDetail.get("to[Derived].from.attribute[Title]") != null) {
					//Added the code for 2018x Spec REader Defect 49811,50040 - Starts
					if(!"#DENIED!".equals(strFromDerivedValue) || SPECREADER.equalsIgnoreCase(strOriginatingSource) && UIUtil.isNotNullAndNotEmpty(strFromDerivedValue)){
					//Added the code for 2018x Spec REader Defect 49811,50040 - Ends
						((Map)(mlBOMChild.get(i))).put("DerivedFromTitle", mpCommonColumnsDetail.get("to[Derived].from.attribute[Title]"));
						}else {
							((Map)(mlBOMChild.get(i))).put("DerivedFromTitle", "#DENIED!");
						}
						
				}else{
					((Map)(mlBOMChild.get(i))).put("DerivedFromTitle", "");
				}
				// Modified by DSM Reports (Sogeti) for 22x.03 (May CW 2023) Defect 49457 - End
				//Added the code for 2018x Spec REader Defect 49811,50040 - Starts
				if("#DENIED!".equals(strValue) || (SPECREADER.equalsIgnoreCase(strOriginatingSource) && UIUtil.isNullOrEmpty(strValue))) {
				//Added the code for 2018x Spec REader Defect 49811,50040 - Ends
					((Map)(mlBOMChild.get(i))).put("attribute[pgHasArt]", "#DENIED!");
					((Map)(mlBOMChild.get(i))).put("AlternateName", "");
					
					
				}
				//Added the code for 2018x.6 Jun CW Defect 46893 - Ends
				//Added the code for 2018x Spec REader Defect 49811,50040 - Starts
				if(!"#DENIED!".equals(strValue) || SPECREADER.equalsIgnoreCase(strOriginatingSource)&& UIUtil.isNotNullAndNotEmpty(strValue)){
				//Added the code for 2018x Spec REader Defect 49811,50040 - Ends
					StringList slAlternateNames = new StringList();
					slAlternateNames.addElement(DomainConstants.SELECT_NAME);
					// Added by DSM Reports (Sogeti) for 22x.04 (Dec CW 2023) Defect 56156 -- START
					StringList slAlternateNamesAll = new StringList();
					String strAlternateNamesAll= DomainConstants.EMPTY_STRING;
				
				if(null != mpBOMChild.get(FROM_ALTERNATE)) {
					if(mpBOMChild.get(FROM_ALTERNATE) instanceof StringList) {
						slAlternateNamesAll = (StringList) mpBOMChild.get(FROM_ALTERNATE);
						strAlternateNamesAll=  slAlternateNamesAll.toString();
						strAlternateNamesAll = strAlternateNamesAll.replace("[", "").replace("]", "");
					} else {
						strAlternateNamesAll = (String)mpBOMChild.get(FROM_ALTERNATE);
					}
				}
				// Added by DSM Reports (Sogeti) for 22x.04 (Dec CW 2023) Defect 56156 --  END
				((Map)(mlBOMChild.get(i))).put("AlternateName", strAlternateNamesAll);
				//Modified For Alternate Name --End	
				}
				mlParentChildBOMEachPart.add(mlBOMChild.get(i));			
			 }
		} catch (Exception e) {
			e.printStackTrace();
		}		
		return mlParentChildBOMEachPart;
	}

private MapList addingParentChildEBOMWD(Context context, MapList mlBOMChild, Map mpBOMCharacteristics,Map mpCommonColumnsDetail,String strUserName) {

		try {			
			mlParentChildEBOMWDEachPart.add(mpBOMCharacteristics);
			//Added for Defect 50780:22x01 -- Starts
			String strChildPartID = "";
			DomainObject domChildPart = null;
			for (int i=0;i<mlBOMChild.size();i++){
				Map mpBOMChild= (Map)mlBOMChild.get(i);
				((Map)(mlBOMChild.get(i))).put("ParentName",mpCommonColumnsDetail.get(DomainConstants.SELECT_NAME));
				((Map)(mlBOMChild.get(i))).put("ParentTitle",mpCommonColumnsDetail.get(pgV3Constants.SELECT_ATTRIBUTE_TITLE));
				((Map)(mlBOMChild.get(i))).put("ParentCurrentState",mpCommonColumnsDetail.get(pgV3Constants.SELECT_CURRENT));
				((Map)(mlBOMChild.get(i))).put("ParentRevision",mpCommonColumnsDetail.get(pgV3Constants.SELECT_REVISION));
				//Added for Defect 50780:22x01 -- Ends
				if(mpCommonColumnsDetail.get("to[Derived].from.name") != null){
					((Map)(mlBOMChild.get(i))).put("DerivedFromName", mpCommonColumnsDetail.get("to[Derived].from.name"));
					}
					else{
						((Map)(mlBOMChild.get(i))).put("DerivedFromName", "");
					}

				//Code Upgrade for 2018x Data Model - Starts
				if((mpCommonColumnsDetail.get("CAProposedName") != null && mpCommonColumnsDetail.containsKey("CAProposedName")) && (mpCommonColumnsDetail.get("CARealizedName") != null && mpCommonColumnsDetail.containsKey("CARealizedName"))) {
					((Map)(mlBOMChild.get(i))).put("ChangeAction",mpCommonColumnsDetail.get("CARealizedName"));
					//Added code for Req Id : 33634 - Hyperlinks--Starts
					((Map)(mlBOMChild.get(i))).put("sCAId",mpCommonColumnsDetail.get("sCAId"));
					//Added code for Req Id : 33634 - Hyperlinks--Ends
				} else if (mpCommonColumnsDetail.get("CARealizedName") != null && mpCommonColumnsDetail.containsKey("CARealizedName")){
					((Map)(mlBOMChild.get(i))).put("ChangeAction",mpCommonColumnsDetail.get("CARealizedName")); 
					//Added code for Req Id : 33634 - Hyperlinks--Starts
					((Map)(mlBOMChild.get(i))).put("sCAId",mpCommonColumnsDetail.get("sCAId"));
					//Added code for Req Id : 33634 - Hyperlinks--Ends
				} else if( mpCommonColumnsDetail.get("CAProposedName") != null && mpCommonColumnsDetail.containsKey("CAProposedName")) {
					((Map)(mlBOMChild.get(i))).put("ChangeAction",mpCommonColumnsDetail.get("CAProposedName"));
					//Added code for Req Id : 33634 - Hyperlinks--Starts
					((Map)(mlBOMChild.get(i))).put("sCAId",mpCommonColumnsDetail.get("sCAId"));
					//Added code for Req Id : 33634 - Hyperlinks--Ends
				} else {
					((Map)(mlBOMChild.get(i))).put("ChangeAction","");
					//Added code for Req Id : 33634 - Hyperlinks--Starts
					((Map)(mlBOMChild.get(i))).put("sCAId","");
					//Added code for Req Id : 33634 - Hyperlinks--Ends
				}
				//Code Upgrade for 2018x Data Model - Ends
				
				if( mpCommonColumnsDetail.get("attribute[Reason for Change]") != null && mpCommonColumnsDetail.containsKey("attribute[Reason for Change]")) {
					((Map)(mlBOMChild.get(i))).put("CAReasonForChange",mpCommonColumnsDetail.get("attribute[Reason for Change]"));
				}
				else{
					((Map)(mlBOMChild.get(i))).put("CAReasonForChange", "");
				}
				//Modified For Alternate Name --Begin
				String strObjectId= (String)((Map)(mlBOMChild.get(i))).get("id");
				DomainObject dObjPart = DomainObject.newInstance(context, strObjectId);				
				String strValue = DomainConstants.EMPTY_STRING;
				strValue = setContextAndFetchValueForUser(context,dObjPart,strUserName);
				
				//Added the code for 2018x.6 Jun CW Defect 46893 - Starts
				if(mpCommonColumnsDetail.get("to[Derived].from.attribute[Title]") != null) {
					if(!"#DENIED!".equals(strValue)){
						((Map)(mlBOMChild.get(i))).put("DerivedFromTitle", mpCommonColumnsDetail.get("to[Derived].from.attribute[Title]"));
						}else {
							((Map)(mlBOMChild.get(i))).put("DerivedFromTitle", "#DENIED!");
						}
						
				}else{
					((Map)(mlBOMChild.get(i))).put("DerivedFromTitle", "");
				}
				if("#DENIED!".equals(strValue)) {
					((Map)(mlBOMChild.get(i))).put("attribute[pgHasArt]", "#DENIED!");
				} 
				//Added the code for 2018x.6 Jun CW Defect 46893 - Ends
				mlParentChildEBOMWDEachPart.add(mlBOMChild.get(i));			
			 }
		} catch (Exception e) {
			e.printStackTrace();
		}		
		return mlParentChildEBOMWDEachPart;
	}
	//Changing the Access Level to be accessible to other methods

public Map getCommonColumnsDetail(Context context,String strUserName, DomainObject dobjRelatedPart) throws Exception {

	    // Modified by DSM Reports (Sogeti) for 22x.04 (Dec CW 2023) Defect 56156 - Start
		Map mTSDetail= null;
		boolean hasAccess = false;
		boolean isContextPushed = false;
		//Added by DSM Reports (Sogeti) for 2022x.6 CW Defect 57310 - Start
		boolean bIsEBPUser = isEBP(context, strUserName);
		//Added by DSM Reports (Sogeti) for 2022x.6 CW Defect 57310 - End
		
		//Added by DSM Reports (Sogeti) for 2022x.5 (APR CW 2024) Defect 55875 - Start
		StringBuilder sbCA = new StringBuilder();
		StringBuilder sbCAID = new StringBuilder();
		//Added by DSM Reports (Sogeti) for 2022x.5 (APR CW 2024) Defect 55875 - End
		try {	
			if(SPECREADER.equalsIgnoreCase(strOriginatingSource) && !pgV3Constants.PERSON_USER_AGENT.equals(context.getUser())) {
				hasAccess = accessCheck(context, strUserName, (String)dobjRelatedPart.getInfo(context, DomainConstants.SELECT_ID));
				if(hasAccess) {
					//Pushing User Agent Context to get the Data if the Spec Reader User have access
					ContextUtil.pushContext(context,PropertyUtil.getSchemaProperty(context,"User Agent"),DomainConstants.EMPTY_STRING,DomainConstants.EMPTY_STRING);
					isContextPushed = true;
					
				}
			}
			mTSDetail= dobjRelatedPart.getInfo(context, SL_OBJECT_COMMONINFO_SELECT);
			//Code Upgrade for 2018x Data Model - Starts
			String strPartId = (String) mTSDetail.get(DomainConstants.SELECT_ID);
			//Added code for Req Id : 33634 - Hyperlinks--Starts
			String sCAId = DomainConstants.EMPTY_STRING;
			//Added code for Req Id : 33634 - Hyperlinks--Ends
			//Added code for 2018x.6 Requirement 35515 Show reviewer in Approve tab Starts
			String strProposedCurrent = DomainConstants.EMPTY_STRING;
			String strRealizedCurrent = DomainConstants.EMPTY_STRING;
			//Added code for 2018x.6 Requirement 35515 Show reviewer in Approve tab Ends
			//Added code for defect id 34908 Starts
			String strOriginatingSourceOld = (String) mTSDetail.get(pgV3Constants.SELECT_ATTRIBUTE_PGORIGINATINGSOURCE);
			String sOriginatingSource = strOriginatingSourceOld.trim();
			String strPartType = (String)mTSDetail.get(DomainConstants.SELECT_TYPE);
			
			if(UIUtil.isNotNullAndNotEmpty(sOriginatingSource) && sOriginatingSource.contains("CSS")){
				if (UIUtil.isNotNullAndNotEmpty(strPartType) && PropertyUtil.getSchemaProperty(context,"type_pgRawMaterial").equals(strPartType)) {
					mTSDetail.put(pgV3Constants.SELECT_ATTRIBUTE_PGASSEMBLYTYPE, "Raw");
				} if (UIUtil.isNotNullAndNotEmpty(strPartType) && PropertyUtil.getSchemaProperty(context, "type_pgPackingMaterial").equals(strPartType)) {
					 mTSDetail.put(pgV3Constants.SELECT_ATTRIBUTE_PGASSEMBLYTYPE, "Packaging");
				  } 
			}
			//Added code for defect id 34908 Ends
			if (UIUtil.isNotNullAndNotEmpty(strPartId)) {
				String [] args = new String [3];
				args[0] = strPartId;
				MapList mlChanges = new MapList();
				//Modified by DSM Reports (Sogeti) for 2022x.4 (APR CW 2024) Defect 55875 - Start
				//Modified by DSM Reports (Sogeti) for 2022x.6 CW Defect 57310 - Start
				if (bIsEBPUser && SPECREADER.equalsIgnoreCase(strOriginatingSource)) {
					mlChanges =null;
				} else {
					mlChanges = getConnectedChanges(context,args,strUserName);
				}
				//Modified by DSM Reports (Sogeti) for 2022x.6 CW Defect 57310 - End
				
				//Modified by DSM Reports (Sogeti) for 2022x.4 (APR CW 2024) Defect 55875 - End
				if(mlChanges != null && !mlChanges.isEmpty() ){
					int caMapListSize = mlChanges.size();
					for(Object caObject:mlChanges){
						Map caMap = (Map)caObject;
						String sCAProposedName = (String) caMap.get(CAPROPOSEDNAME); 
						String sCARealizedName = (String) caMap.get(CAREALIZEDNAME);
						sCAId = (String) caMap.get(DomainConstants.SELECT_ID);
						//Added code for 2018x.6 Requirement 35515 Show reviewer in Approve tab Starts
						strProposedCurrent = (String) caMap.get("CAProposedCurrent");
						strRealizedCurrent = (String) caMap.get("CARealizedCurrent");
						//Added code for 2018x.6 Requirement 35515 Show reviewer in Approve tab Ends
						//Modified by DSM Reports (Sogeti) for 2022x.4 (APR CW 2024) Defect 55875 - Start
						if(caMapListSize>1) {
							if(UIUtil.isNotNullAndNotEmpty(sCAProposedName) && UIUtil.isNotNullAndNotEmpty(sCARealizedName)){
								sbCA.append(sCARealizedName + "\n");
								sbCAID.append(sCAId + HYPERLINK_PIPE);							
							}else if(UIUtil.isNotNullAndNotEmpty(sCAProposedName)){
								sbCA.append(sCAProposedName + "\n");
								sbCAID.append(sCAId+HYPERLINK_PIPE);
							}else {
								sbCA.append(DomainConstants.EMPTY_STRING);
								sbCAID.append(DomainConstants.EMPTY_STRING);
							}
						} else {
						//Modified by DSM Reports (Sogeti) for 2022x.4 (APR CW 2024) Defect 55875 - End
							if((UIUtil.isNotNullAndNotEmpty(sCAProposedName) && UIUtil.isNotNullAndNotEmpty(sCARealizedName))) {
								//Added code for Req Id : 33634 - Hyperlinks--Starts
								mTSDetail.put(SCAID, sCAId);
								mTSDetail.put(CAREALIZEDNAME,sCARealizedName);
								//Added code for Req Id : 33634 - Hyperlinks--Ends
								//Added code for 2018x.6 Requirement 35515 Show reviewer in Approve tab Starts
								mTSDetail.put("CARealizedCurrent", strRealizedCurrent);
								//Added code for 2018x.6 Requirement 35515 Show reviewer in Approve tab Ends
							} else if(UIUtil.isNotNullAndNotEmpty(sCAProposedName)) {
								mTSDetail.put(CAPROPOSEDNAME, sCAProposedName);
								//Added code for Req Id : 33634 - Hyperlinks--Starts
								mTSDetail.put(SCAID, sCAId);
								//Added code for Req Id : 33634 - Hyperlinks--Ends
								//Added code for 2018x.6 Requirement 35515 Show reviewer in Approve tab Starts
								mTSDetail.put("CAProposedCurrent", strProposedCurrent);
								//Added code for 2018x.6 Requirement 35515 Show reviewer in Approve tab Ends
							} else {
								mTSDetail.put(CAPROPOSEDNAME, DomainConstants.EMPTY_STRING);
								mTSDetail.put(CAREALIZEDNAME, DomainConstants.EMPTY_STRING);
								//Added code for Req Id : 33634 - Hyperlinks--Starts
								mTSDetail.put(SCAID, DomainConstants.EMPTY_STRING);
								//Added code for Req Id : 33634 - Hyperlinks--Ends
								//Added code for 2018x.6 Requirement 35515 Show reviewer in Approve tab Starts
								mTSDetail.put("CAProposedCurrent", DomainConstants.EMPTY_STRING);
								mTSDetail.put("CARealizedCurrent", DomainConstants.EMPTY_STRING);
								//Added code for 2018x.6 Requirement 35515 Show reviewer in Approve tab Ends
							}
						}
					}
					//Added by DSM Reports (Sogeti) for 2022x.4 (APR CW 2024) Defect 55875 - Start
					if(caMapListSize>1 && (sbCA.toString()).length()>1) {
						sbCA.deleteCharAt(sbCA.length() - 1);
						sbCAID.deleteCharAt(sbCAID.length() - 1);
						mTSDetail.put(CAPROPOSEDNAME, sbCA.toString());
						mTSDetail.put(SCAID, sbCAID.toString());
					}
					//Added by DSM Reports (Sogeti) for 2022x.4 (APR CW 2024) Defect 55875 - End
				}
			}
		}catch(Exception e) {
			outLog.print("Exception in the getCommonColumnsDetail Method "+e+"\n");
			outLog.flush();
		}finally {
			if(isContextPushed) {
				ContextUtil.popContext(context);
			}
		}
		//Code Upgrade for 2018x Data Model - Ends
		return mTSDetail;
		// Modified by DSM Reports (Sogeti) for 22x.04 (Dec CW 2023) Defect 56156 - End
	}

private Map getWeightCharacteristics(Context context, String strUserName,DomainObject dobjRelatedPart, Map mpCommonColumnsDetail) throws Exception {
		Map mTSDetail = new HashMap();
		String strType = (String)mpCommonColumnsDetail.get(DomainConstants.SELECT_TYPE);
		String strPartId = (String)mpCommonColumnsDetail.get(DomainConstants.SELECT_ID);
		mTSDetail= dobjRelatedPart.getInfo(context, SL_OBJECT_WEIGHT_PARENT_SELECT);
		//Modified by DSM Reports (Sogeti) for 2022x.6 CW Defect 57310 - Start
		boolean bIsEBPUser = isEBP(context, strUserName);
		//Modified by DSM Reports (Sogeti) for 2022x.6 CW Defect 57310 - End
		
		//Code Upgrade for 2018x Data Model - Starts
		if (UIUtil.isNotNullAndNotEmpty(strPartId)) {
			String [] args = new String [3];
			args[0] = strPartId;
			MapList mlChanges = new MapList();
			//Modified by DSM Reports (Sogeti) for 2022x.4 (APR CW 2024) Defect 55875 - Start
			if(bIsEBPUser && SPECREADER.equalsIgnoreCase(strOriginatingSource)) {
				mlChanges = null;
			}else {
				mlChanges = getConnectedChanges(context,args,strUserName);
			}	
			//Modified by DSM Reports (Sogeti) for 2022x.4 (APR CW 2024) Defect 55875 - Start
			if( mlChanges != null && !mlChanges.isEmpty() ){
				for(Object caObject:mlChanges){
					Map caMap = (Map)caObject;
					String sCAProposedName = (String) caMap.get("CAProposedName"); 
					String sCARealizedName = (String) caMap.get("CARealizedName");
					//Added code for Req Id : 33634 - Hyperlinks--Starts
					String sCAId = (String) caMap.get("id");
					//Added code for Req Id : 33634 - Hyperlinks--Ends
					//Added the code for the Defect ID : 25104 - CA Tab is Empty : Starts
					if(UIUtil.isNotNullAndNotEmpty(sCAProposedName) && UIUtil.isNotNullAndNotEmpty(sCARealizedName)) {
						mTSDetail.put("CARealizedName", sCARealizedName);
						//Added code for Req Id : 33634 - Hyperlinks--Starts
						mTSDetail.put("sCAId", sCAId);
						//Added code for Req Id : 33634 - Hyperlinks--Ends
					} else if(UIUtil.isNotNullAndNotEmpty(sCARealizedName)) {
						mTSDetail.put("CARealizedName", sCARealizedName);
						//Added code for Req Id : 33634 - Hyperlinks--Starts
						mTSDetail.put("sCAId", sCAId);
						//Added code for Req Id : 33634 - Hyperlinks--Ends
					} else if(UIUtil.isNotNullAndNotEmpty(sCAProposedName)) {
						mTSDetail.put("CAProposedName", sCAProposedName);
						//Added code for Req Id : 33634 - Hyperlinks--Starts
						mTSDetail.put("sCAId", sCAId);
						//Added code for Req Id : 33634 - Hyperlinks--Ends
					} else {
						mTSDetail.put("CAProposedName", "");
						mTSDetail.put("CARealizedName", "");
						//Added code for Req Id : 33634 - Hyperlinks--Starts
						mTSDetail.put("sCAId", "");
						//Added code for Req Id : 33634 - Hyperlinks--Ends
					}
				}
			}
		}
		//Code Upgrade for 2018x Data Model - Ends
		return mTSDetail;
	}

private Map getBOMCharacteristics(Context context, String strUserName,DomainObject dobjRelatedPart,Map mpCommonColumnsDetail) throws Exception {
	Map mTSDetail=new HashMap<>();
	try {
		mTSDetail= dobjRelatedPart.getInfo(context, SL_OBJECT_BOM_PARENT_SELECT);
		} catch (FrameworkException e) {
			e.printStackTrace();
		}
	return mTSDetail;
}

private Map<String,Object> getPlants(Context context,DomainObject dobjRelatedPart) throws Exception {

	//Start Modified for 22x Upgrade to handle new API changes for multi value select
	StringList slMultiSelect = new StringList(5);
	slMultiSelect.add(PLANTNAME);
	slMultiSelect.add(ISACTIVATED);
	slMultiSelect.add(ISAUTHORIZEDPRODUCE);
	slMultiSelect.add(ISAUTHORIZEDUSE);
	slMultiSelect.add(ISAUTHORIZEDVIEW);

	return dobjRelatedPart.getInfo(context, slObjectPlantSelect,slMultiSelect);
	//End Modified for 22x Upgrade to handle new API changes for multi value select

}

private Map getComponentEquivalent(Context context, String strUserName,DomainObject dobjRelatedPart,Map mpCommonColumnsDetail) throws Exception {
	String strType = (String)mpCommonColumnsDetail.get(DomainConstants.SELECT_TYPE);
	String strPartId = (String)mpCommonColumnsDetail.get(DomainConstants.SELECT_ID);
	Map mTSDetail = new HashMap();
	//Push context since EBP cannot expand all parts
	ContextUtil.pushContext(context,PropertyUtil.getSchemaProperty(context,"User Agent"),DomainConstants.EMPTY_STRING,DomainConstants.EMPTY_STRING);				 
	mTSDetail= dobjRelatedPart.getInfo(context, SL_OBJECT_COMPONENTEQUIVALENT_SELECT);
	ContextUtil.popContext(context);	
	return mTSDetail;
}
//Modified the code for Defect 49698 - Spec Reader Access Issue - Starts
// Modified by DSM Reports (Sogeti) for 22x.04 (Dec CW 2023) Defect 56156
private Map getAttribute(Context context, DomainObject dobjRelatedPart, String strUserName, Map mpCommonColumnsDetail) throws FrameworkException {	
	boolean hasAccess = false; 
	boolean isContextPushed = false;
	//Modified the code for Defect 49698 - Spec Reader Access Issue - Ends
	StringList slSelect = new StringList();
	slSelect.add(DomainConstants.SELECT_NAME);
	slSelect.add(DomainConstants.SELECT_ID);
	//Added for Defect Id : 32221 - Starts
	slSelect.add(DomainConstants.SELECT_CURRENT);
	//Start modified for 22x Changes for Material Library/Family Auto Name Change
	slSelect.add("attribute[Title]");
	//Start modified for 22x Changes for Material Library/Family Auto Name Change
	//Added for Defect Id : 32221 - Ends
	String strATSName =DomainConstants.EMPTY_STRING;
	String strRelName = DomainConstants.EMPTY_STRING;
	String strPartFamilyName = DomainConstants.EMPTY_STRING;
	String sWhereExp =DomainConstants.EMPTY_STRING;
	//Start Modified for 22x Upgrade to handle new API changes for multi value select
	StringList slMultiSelect = new StringList(2);
	slMultiSelect.add("from[pgDocumentToBusinessArea].to.name");
	slMultiSelect.add("from[pgDocumentToPlatform].to.name");
	// Added by DSM Reports (Sogeti) for 22x.04 (Dec CW 2023) Defect 56156 - Start
	Map mTSDetail = null; 
	// Added by DSM Reports (Sogeti) for 22x.04 (Dec CW 2023) Defect 56156 - End
	//End Modified for 22x Upgrade to handle new API changes for multi value select
	StringBuffer sbRelPattern = new StringBuffer();		    
	sbRelPattern.append(pgV3Constants.RELATIONSHIP_AUTHORIZEDTEMPORARYSPECIFICATION);
	StringBuffer sbTypePattern = new StringBuffer();		    
	sbTypePattern.append(pgV3Constants.TYPE_PGAUTHORIZEDTEMPORARYSTANDARD);
	sbTypePattern.append(",");
	sbTypePattern.append(pgV3Constants.TYPE_PARTFAMILY);
	//Added code for Reqirement Id: 34940 - 2018x.5 Part And Specification Report shall add  function, Business area and product category platform, Product Technology Platform,  Product Technology Chassis and Franchise  in attribute tab-Starts
	Pattern sRelPattern = new Pattern(pgV3Constants.RELATIONSHIP_PGDOCUMENTTOBUSINESSAREA);
	sRelPattern.addPattern(pgV3Constants.RELATIONSHIP_PGDOCUMENTTOPLATFORM);
	sRelPattern.addPattern(pgV3Constants.RELATIONSHIP_MATERIALFUNCTIONALITY);
	sRelPattern.addPattern(pgV3Constants.RELATIONSHIP_PGDOCUMENTTOCHASSIS);
	//Added for Defect 51678:22x 01 CW - Starts
	sRelPattern.addPattern(RELATIONSHIP_PG_WDVALIDATIONEXPSUPPORTDOC);
	//Added for Defect 51678:22x 01 CW - Ends
	Pattern strTypePattern = new Pattern(pgV3Constants.TYPE_PGPLIPLATFORM);
	strTypePattern.addPattern(pgV3Constants.TYPE_PGPLIMATERIALFUNCTIONGLOBAL);
	strTypePattern.addPattern(TYPE_MATERIAL_FUNCTIONALITY);
	strTypePattern.addPattern(TYPE_PGPLIBUSINESSAREA);
	
	strTypePattern.addPattern(pgV3Constants.TYPE_PGPLICHASSIS);
	//Added for Defect 51678:22x 01 CW - Starts
	strTypePattern.addPattern(pgV3Constants.TYPE_PG_IRM_DOCUMENT);
	//Added for Defect 51678:22x 01 CW - Ends
	StringList objectSelects=new StringList(3);
	objectSelects.add(DomainConstants.SELECT_NAME);
	objectSelects.add(DomainConstants.SELECT_ID);
	objectSelects.add(DomainConstants.SELECT_TYPE);
	objectSelects.add(pgV3Constants.SELECT_ATTRIBUTE_PGPLATFORMTYPE);

	String strBusinessArea =DomainConstants.EMPTY_STRING;
	String strProductCategoryPlatform =DomainConstants.EMPTY_STRING;
	String strProductTechnologyPlatform =DomainConstants.EMPTY_STRING;
	String strFranchisePlatform =DomainConstants.EMPTY_STRING;
	String strMaterialFunctions =DomainConstants.EMPTY_STRING;
	String strProductTechnologyChassis =DomainConstants.EMPTY_STRING;
	//Added for Defect 51678:22x 01 CW - Starts
	String strWDValidationExceptionSupportDoc = DomainConstants.EMPTY_STRING;
	//Added for Defect 51678:22x 01 CW - Ends
	String strPlatformAttribute=DomainConstants.EMPTY_STRING;
	//Added code for 2018x.6 MAY CW Requirement 43024 - Starts
	String strpgReasonForChangeManfStatus="";
	//Added code for 2018x.6 MAY CW Requirement 43024 - Ends
	StringList slBusinessArea=new StringList();
	StringList slProductCategoryPlatform=new StringList();
	StringList slProductTechnologyPlatform=new StringList();
	StringList slFranchisePlatform=new StringList();
	StringList slMaterialFunctions = new StringList();
	StringList slProductTechnologyChassis = new StringList();
	//Added for Defect 51678:22x 01 CW - Starts
	StringList slWDValidationExceptionSupportDoc = new StringList();
	//Added for Defect 51678:22x 01 CW - Ends
	//Added code for Reqirement Id: 34940 - 2018x.5 Part And Specification Report shall add  function, Business area and product category platform, Product Technology Platform,  Product Technology Chassis and Franchise  in attribute tab:Ends
	//Added for Defect Id : 32221 - Starts
	StringBuffer sbATSName = new StringBuffer();
	//Added for Defect Id : 32221 - Ends	
	//Defect 36905 Missing Packaging Component Type on PMP DSM Report starts
	String strPrimaryPackagingType=DomainConstants.EMPTY_STRING;
	String sRelpgPrimaryPackagingType = PropertyUtil.getSchemaProperty(context, "relationship_pgPrimaryPackagingType");
	// Added by DSM Reports (Sogeti) for 22x.04 (Dec CW 2023) Defect 56156 - Start
	String strCommonPolicy = (String) mpCommonColumnsDetail.get(DomainConstants.SELECT_POLICY);
	// Added by DSM Reports (Sogeti) for 22x.04 (Dec CW 2023) Defect 56156 - End
	//Defect 36905 Missing Packaging Component Type on PMP DSM Report Ends
	//Added the code for Defect 49698 - Spec Reader Access Issue - Starts
	try {
	if(SPECREADER.equalsIgnoreCase(strOriginatingSource)) {
		// Added by DSM Reports (Sogeti) for 22x.04 (Dec CW 2023) Defect 56156 - Start
		if(!pgV3Constants.POLICY_MANUFACTUREREQUIVALENT.equals(strCommonPolicy) && !pgV3Constants.POLICY_SUPPLIEREQUIVALENT.equals(strCommonPolicy)) {
			hasAccess = accessCheck(context, strUserName, (String)dobjRelatedPart.getInfo(context, DomainConstants.SELECT_ID));
		}else {
			hasAccess = true;
		}
		// Added by DSM Reports (Sogeti) for 22x.04 (Dec CW 2023) Defect 56156 - End	
		if(hasAccess) {
			//Pushing User Agent Context to get the Data if the Spec Reader User have access
			ContextUtil.pushContext(context,PropertyUtil.getSchemaProperty(context,"User Agent"),DomainConstants.EMPTY_STRING,DomainConstants.EMPTY_STRING);
			isContextPushed = true;
			
		}
	}
	//Added the code for Defect 49698 - Spec Reader Access Issue - Ends
	//Modified for Requirement 45505,45511,45517: 22x 01 CW -- Starts
	// Added by DSM Reports (Sogeti) for 22x.04 (Dec CW 2023) Defect 56156 - Start
	mTSDetail= dobjRelatedPart.getInfo(context, SL_OBJECT_ATTRIBUTE_SELECT, slMultiSelect);
	// Added by DSM Reports (Sogeti) for 22x.04 (Dec CW 2023) Defect 56156 - End
	//Modified for Requirement 45505,45511,45517: 22x 01 CW -- Ends
	MapList mlATSName = (MapList) dobjRelatedPart.getRelatedObjects(context, sbRelPattern.toString(),sbTypePattern.toString(), slSelect, null, true,true, (short)1, sWhereExp, null, 0);
	Map<String,Object> mp = new HashMap<>();
	for(int i=0;i<mlATSName.size();i++){
		mp = (Map)mlATSName.get(i);
		//Added for Defect Id : 32221 - Starts
		String strCurrent = (String)mp.get(DomainConstants.SELECT_CURRENT);
		//Added for Defect Id : 32221 - Ends
		strRelName = (String)mp.get("relationship");

					
		if (strRelName.equalsIgnoreCase(pgV3Constants.RELATIONSHIP_AUTHORIZEDTEMPORARYSPECIFICATION)){
		//Updated for Defect Id : 32221 - Starts				
			if (!STATE_OBSOLETE.equalsIgnoreCase(strCurrent)) {
				if (mp.get(DomainConstants.SELECT_NAME) instanceof StringList){
                    strATSName = mp.get(DomainConstants.SELECT_NAME).toString();
                    strATSName = strATSName.replace("[", "").replace("]", "");
                    //Added by (IRM-Sogeti) for 2022x.03 August 2023 CW Defect ID 53079 - Start
                    String strATSId = mp.get(DomainConstants.SELECT_ID).toString();
                    if(accessCheck(context, strUserName ,strATSId)
                            && strCurrent.equalsIgnoreCase(DomainConstants.STATE_PART_RELEASE)){
                        sbATSName.append(strATSName);
                        sbATSName.append(pgV3Constants.SYMBOL_COMMA);
                    }
                    //Added by (IRM-Sogeti) for 2022x.03 August 2023 CW Defect ID 53079 - End
                } else{
                    strATSName = mp.get(DomainConstants.SELECT_NAME).toString();
                    //Added by (IRM-Sogeti) for 2022x.03 August 2023 CW Defect ID 53079 - Start
                    String strATSId = mp.get(DomainConstants.SELECT_ID).toString();
                    if(accessCheck(context, strUserName ,strATSId)
                            && strCurrent.equalsIgnoreCase(DomainConstants.STATE_PART_RELEASE)) {
                        sbATSName.append(strATSName);
                        sbATSName.append(pgV3Constants.SYMBOL_COMMA);
                    }
                    //Added by (IRM-Sogeti) for 2022x.03 August 2023 CW Defect ID 53079 - End
                }
			}
		}
	}
	//Added code for Reqirement Id: 34940 - 2018x.5 Part And Specification Report shall add  function, Business area and product category platform, Product Technology Platform,  Product Technology Chassis and Franchise  in attribute tab-Starts
	MapList mapConnectedlist=dobjRelatedPart.getRelatedObjects(context, sRelPattern.getPattern(), strTypePattern.getPattern(), objectSelects, null, false, true, (short)1,DomainConstants.EMPTY_STRING,null,0);
	Map<String,Object> mpConnectedlist = new HashMap<>();
	if(!mapConnectedlist.isEmpty())
	{
		for(int j=0;j<mapConnectedlist.size();j++)
		{
			mpConnectedlist = (Map)mapConnectedlist.get(j);
			//Added for Defect Id : 32221 - Starts
			strRelName = (String)mpConnectedlist.get("relationship");
			
			if(strRelName.equalsIgnoreCase(pgV3Constants.RELATIONSHIP_PGDOCUMENTTOBUSINESSAREA))
			{
				strBusinessArea =  mpConnectedlist.get(DomainConstants.SELECT_NAME).toString();
				slBusinessArea.add(strBusinessArea);
		
			}
			else if(strRelName.equalsIgnoreCase(pgV3Constants.RELATIONSHIP_PGDOCUMENTTOPLATFORM))
			{
				
				strPlatformAttribute=mpConnectedlist.get(pgV3Constants.SELECT_ATTRIBUTE_PGPLATFORMTYPE).toString();
				
				if(strPlatformAttribute.equalsIgnoreCase(PRODUCTCATEGORYPLATFORM))
				{
					strProductCategoryPlatform = mpConnectedlist.get(DomainConstants.SELECT_NAME).toString();
					slProductCategoryPlatform.add(strProductCategoryPlatform);
				}
				else if(strPlatformAttribute.equalsIgnoreCase(PRODUCTECHNOLOGYPLATFORM))
				{
					strProductTechnologyPlatform= mpConnectedlist.get(DomainConstants.SELECT_NAME).toString();
					slProductTechnologyPlatform.add(strProductTechnologyPlatform);
				}
				else if(strPlatformAttribute.equalsIgnoreCase(FRANCHISEPLATFORM))
				{
					strFranchisePlatform=mpConnectedlist.get(DomainConstants.SELECT_NAME).toString();
					slFranchisePlatform.add(strFranchisePlatform);
				}
				
			}
			else if(strRelName.equalsIgnoreCase(pgV3Constants.RELATIONSHIP_MATERIALFUNCTIONALITY))
			{
				strMaterialFunctions=mpConnectedlist.get(DomainConstants.SELECT_NAME).toString();
				slMaterialFunctions.add(strMaterialFunctions);
			}
			else if(strRelName.equalsIgnoreCase(pgV3Constants.RELATIONSHIP_PGDOCUMENTTOCHASSIS))
			{
				strProductTechnologyChassis=mpConnectedlist.get(DomainConstants.SELECT_NAME).toString();
				slProductTechnologyChassis.add(strProductTechnologyChassis);
			}
			//Added for Defect 51678:22x 01 CW - Starts
			else if(strRelName.equalsIgnoreCase(RELATIONSHIP_PG_WDVALIDATIONEXPSUPPORTDOC))
			{
				strWDValidationExceptionSupportDoc=mpConnectedlist.get(DomainConstants.SELECT_NAME).toString();
				slWDValidationExceptionSupportDoc.add(strWDValidationExceptionSupportDoc);
			}
			//Added for Defect 51678:22x 01 CW - Ends
			
		}
	}
	
		strBusinessArea=getStringValue(slBusinessArea);
		strProductCategoryPlatform=getStringValue(slProductCategoryPlatform);
		strProductTechnologyPlatform=getStringValue(slProductTechnologyPlatform);
		strFranchisePlatform=getStringValue(slFranchisePlatform);
		strProductTechnologyChassis=getStringValue(slProductTechnologyChassis);
		//Added for Defect 51678:22x 01 CW - Starts
		strWDValidationExceptionSupportDoc=getStringValue(slWDValidationExceptionSupportDoc);
		////Added for Defect 51678:22x 01 CW - Ends
		strMaterialFunctions=slMaterialFunctions.toString();
		if(UIUtil.isNotNullAndNotEmpty(strMaterialFunctions)) 
		{		
			strMaterialFunctions=strMaterialFunctions.replace("[", "").replace("]", ""); 
		}
		
		//Defect 36905 Missing Packaging Component Type on PMP DSM Report starts
		StringList slPrimaryPackagingType=dobjRelatedPart.getInfoList(context,STRFROMSTART+sRelpgPrimaryPackagingType+STRTONAME);
		if(null !=slPrimaryPackagingType && !slPrimaryPackagingType.isEmpty())
		{
			strPrimaryPackagingType=slPrimaryPackagingType.toString().replace("[", "").replace("]", ""); 
		}
		//Defect 36905 Missing Packaging Component Type on PMP DSM Report Ends
		
	//Added code for Requirement 37821 Add vendor attributes in Attribute tab Starts
	Map<String,Object> mpVendorInfo = getVendorDetails(context,dobjRelatedPart);
	mTSDetail.put("VendorName",mpVendorInfo.get("VendorName"));
	mTSDetail.put("VendorID",mpVendorInfo.get("VendorID"));
	mTSDetail.put("VendorMarket",mpVendorInfo.get("VendorMarket"));
	mTSDetail.put("VendorCity",mpVendorInfo.get("VendorCity"));
	//Added code for Requirement 37821 Add vendor attributes in Attribute tab Ends
	mTSDetail.put(BUSINESSAREA, strBusinessArea);	
	mTSDetail.put(PRODUCTCATEGORYPLATFORM, strProductCategoryPlatform);	
	mTSDetail.put(PRODUCTECHNOLOGYPLATFORM, strProductTechnologyPlatform);	
	mTSDetail.put(FRANCHISEPLATFORM, strFranchisePlatform);	
	mTSDetail.put(PRODUCTECHNOLOGYCHASSIS, strProductTechnologyChassis);	
	mTSDetail.put(MATERIALFUNCTION, strMaterialFunctions);	
	//Added code for Reqirement Id: 34940 - 2018x.5 Part And Specification Report shall add  function, Business area and product category platform, Product Technology Platform,  Product Technology Chassis and Franchise  in attribute tab:Ends
	mTSDetail.put(ATSNAME, sbATSName.toString());
	//Updated for Defect Id : 32221 - Ends
	// Added by DSM Reports (Sogeti) for 22x.04 (Dec CW 2023) Defect 56156 -- START
	mTSDetail.put(PARTFAMILYNAME, strPPartFamilyName);
	// Added by DSM Reports (Sogeti) for 22x.04 (Dec CW 2023) Defect 56156 -- END
	//Defect 36905 Missing Packaging Component Type on PMP DSM Report starts
	mTSDetail.put(PRIMARYPACKAGINGTYPE, strPrimaryPackagingType);
	//Defect 36905 Missing Packaging Component Type on PMP DSM Report Ends
	//Added for defect id 45400 Starts
	String strWareHouseClassification = getWarehousingClassification(context,dobjRelatedPart);
	mTSDetail.put("WarehousingClassification", strWareHouseClassification);
	//Added for defect id 45400 Ends
	//REASONFORCHANGEMANFSTATUS
	//Added code for 2018x.6 MAY CW Requirement 43024 - Starts
	strpgReasonForChangeManfStatus = (String)mTSDetail.get(ATTRIBUTE+PG_ATTR_REASONFORCHANGEMANFSTATUS+CLOSINGBRACKET);
	mTSDetail.put(REASONFORCHANGEMANFSTATUS, strpgReasonForChangeManfStatus);
	//Added code for 2018x.6 MAY CW Requirement 43024 - Ends
	//Added for Defect 51678:22x 01 CW - Starts
	mTSDetail.put(STRWDVALIDATIONEXCEPTIONSUPPORTDOC, strWDValidationExceptionSupportDoc);
	//Added for Defect 51678:22x 01 CW - Ends
	//Added the code for Defect 49698 - Spec Reader Access Issue - Starts
	}catch(Exception e) {
		outLog.print("Exception in the getAttribute Method "+e+"\n");
		outLog.flush();
	}finally {
		if(isContextPushed) {
			ContextUtil.popContext(context);	
		}
	}
	//Added the code for Defect 49698 - Spec Reader Access Issue - Ends
	return mTSDetail;
}

//Added code for Reqirement Id: 34940 - 2018x.5 Part And Specification Report shall add  function, Business area and product category platform, Product Technology Platform,  Product Technology Chassis and Franchise  in attribute tab:Starts
//method to get the "|" separted string from stringlist
private String getStringValue(StringList strList)
{
	StringBuilder sValue = new StringBuilder();
	if(!strList.isEmpty()){
	for(int i=0;i<strList.size();i++){
		String strTemp = strList.get(i);
		if(sValue.length()>0){
			sValue.append(" | ");
			sValue.append(strTemp);
		}
		else {
			sValue.append(strTemp);
		}
	}
	}
	return sValue.toString();
	}
//Added code for Reqirement Id: 34940 - 2018x.5 Part And Specification Report shall add  function, Business area and product category platform, Product Technology Platform,  Product Technology Chassis and Franchise  in attribute tab:Ends	
private Map getApprove(Context context,DomainObject dobjRelatedPart) throws Exception {
	return dobjRelatedPart.getInfo(context, slObjectApproveSelect);	
}

public Map getSubsMaterials(Context context, String strUserName,DomainObject dobjRelatedPart,Map mpCommonColumnsDetail) throws Exception {
	Map mTSDetail = new HashMap();
	String strType = (String)mpCommonColumnsDetail.get(DomainConstants.SELECT_TYPE);
	String strPartId = (String)mpCommonColumnsDetail.get(DomainConstants.SELECT_ID);
	mTSDetail= dobjRelatedPart.getInfo(context, SL_OBJECT_SUBSMATERIALS_SELECT);	
	return mTSDetail;
}
	
/**
 * @param context
 * @param dobjPart
 * @param mpCommonColumnsDetail
 * @param strUserName
 * @param mlCertification
 * @return
 * @throws Exception
 */
private MapList getCompEquiDetails(Context context, DomainObject dobjPart,Map mpCommonColumnsDetail, String strUserName, MapList mlCertification) throws Exception {
	//Updated code for Requirement 38401 Modify code for Cognitive Complexity exception Starts
	boolean bAccess = false;	
	MapList mlCompEquivalent= new MapList();
	String strSupName= DomainConstants.EMPTY_STRING;											
	String strSupRev= DomainConstants.EMPTY_STRING;
	String strSupType= DomainConstants.EMPTY_STRING;
	String strSupplier= DomainConstants.EMPTY_STRING;
	String strSupsate= DomainConstants.EMPTY_STRING;
	String strSupTitle= DomainConstants.EMPTY_STRING;
	String strSupDescr= DomainConstants.EMPTY_STRING;
	String strPQRName= DomainConstants.EMPTY_STRING;
	String strPQRState= DomainConstants.EMPTY_STRING;
	String strSupId= DomainConstants.EMPTY_STRING;
	String strMRName= DomainConstants.EMPTY_STRING;											
	String strMRRev= DomainConstants.EMPTY_STRING;
	String strMRType= DomainConstants.EMPTY_STRING;
	String strManufacturer= DomainConstants.EMPTY_STRING;
	String strMRState= DomainConstants.EMPTY_STRING;
	String strMRTitle= DomainConstants.EMPTY_STRING;
	String strMRDescr= DomainConstants.EMPTY_STRING;
	String strRelName= DomainConstants.EMPTY_STRING;
	String sWhereExp =DomainConstants.EMPTY_STRING;
	String strPartFamilyName = DomainConstants.EMPTY_STRING;
	String strArtworkPrimary = DomainConstants.EMPTY_STRING;
	String strMRId= DomainConstants.EMPTY_STRING;
	//Added code for Requirement 33656, 33871, 33872 New Tab: MEP-SEP Component Equivalents--Starts
	String strPQRRev = DomainConstants.EMPTY_STRING;
	//Added code for Requirement 33656, 33871, 33872 New Tab: MEP-SEP Component Equivalents--Ends
	StringList slSelect = new StringList();
	slSelect.add(DomainConstants.SELECT_NAME);
	slSelect.add(DomainConstants.SELECT_REVISION);
	slSelect.add(DomainConstants.SELECT_TYPE);
	slSelect.add(DomainConstants.SELECT_CURRENT);
	slSelect.add(DomainConstants.SELECT_ID);
	//Start modified for 22x Changes for Material Library/Family Auto Name Change
	slSelect.add(DomainConstants.SELECT_ATTRIBUTE_TITLE);
	//End modified for 22x Changes for Material Library/Family Auto Name Change
	//2018x0 APril Bug fix
	slSelect.add(pgV3Constants.SELECT_ATTRIBUTE_TITLE);
	slSelect.add(DomainConstants.SELECT_DESCRIPTION);
	slSelect.add("to["+pgV3Constants.RELATIONSHIP_MANUFACTURINGRESPONSIBILITY+"].from.name");
	slSelect.add("to["+pgV3Constants.RELATIONSHIP_SUPPLYRESPONSIBILITY+"].from.name");

	StringBuffer sbRelPattern = new StringBuffer();		    
	sbRelPattern.append(pgV3Constants.RELATIONSHIP_SUPPLIEREQUIVALENT);
	sbRelPattern.append(pgV3Constants.SYMBOL_COMMA);
	sbRelPattern.append(pgV3Constants.RELATIONSHIP_MANUFACTUREREQUIVALENT);
	sbRelPattern.append(pgV3Constants.SYMBOL_COMMA);
	sbRelPattern.append(pgV3Constants.RELATIONSHIP_MANUFACTURINGRESPONSIBILITY);
	sbRelPattern.append(pgV3Constants.SYMBOL_COMMA);
	sbRelPattern.append(pgV3Constants.RELATIONSHIP_SUPPLYRESPONSIBILITY);
	StringBuffer sbTypePattern = new StringBuffer();		    
	sbTypePattern.append(pgV3Constants.TYPE_PART);
	sbTypePattern.append(pgV3Constants.SYMBOL_COMMA);
	sbTypePattern.append(pgV3Constants.TYPE_PARTFAMILY);
	strPartFamilyName = DomainConstants.EMPTY_STRING;
	//push context since EBP cannnot expand all parts
	//Added code for Requirement 37983,38062 Add certification section to the Part Component Equivalents tab Starts
	String strCertification = DomainConstants.EMPTY_STRING;
	String strCertificationStatus = DomainConstants.EMPTY_STRING;
	String strCertificationExpDate = DomainConstants.EMPTY_STRING;
	//Added for Apr22 CW requirement 42014 Starts
	String strCertificationSupportDoc = "";
	//Added for Apr22 CW requirement 42014 Ends
	//Added code for Requirement 37983,38062 Add certification section to the Part Component Equivalents tab Ends
	StringList slManufacturers = null;
	StringBuffer sbManufacturer = null;
	//Context has been pushed to User Agent to get all connected part
	//Added code for defect id 41304 Starts
	String strLanguage = context.getLocale().getLanguage();
	String strInputTranslatedTypeMEP = DomainConstants.EMPTY_STRING;
	String strInputTranslatedTypeSEP = DomainConstants.EMPTY_STRING;
	//Added code for defect id 41304 Ends
	ContextUtil.pushContext(context,PropertyUtil.getSchemaProperty(context,pgV3Constants.PERSON_USER_AGENT),DomainConstants.EMPTY_STRING,DomainConstants.EMPTY_STRING);
	MapList mlATSName = dobjPart.getRelatedObjects(context, //context
												   sbRelPattern.toString(),//relationship
												   sbTypePattern.toString(),//type
												   slSelect,//object select
												   null,//rel select
												   true,//get to
												   true,//get from
												   (short)1,//recurse level
												   sWhereExp,//obj where clause
												   null,//rel where clause
												   0);//limit
	HashMap hmCompEquiMR = null;
	HashMap hmCompEquiSup = null;
	//Added code for Requirement 37983,38062 Add  Certification Section to the Part Component Equivalents tab Starts
	Map<String,Object> mpCertification = new HashMap<>();
	String strMEPSEPName = DomainConstants.EMPTY_STRING;
	StringBuffer sbCertificationName = null;
	StringBuffer sbCertificationStatus = null;
	StringBuffer sbCertificationExpDate = null;
	//Added the code for 2018x.6 APR CW Defect 47053,47037,47013,47011 - starts
	StringBuffer sbSupportDocs = null;
	StringList slCertificationName = null; 
	StringList slCertificationStatus = null;
	StringList slCertificationExpDate = null;
	StringList slSupportDocs = null;
	StringList slSupCertificationName = null; 
	StringList slSupCertificationStatus = null;
	StringList slSupCertificationExpDate = null;
	StringList slSupSupportDocs = null;
	//Added the code for 2018x.6 APR CW Defect 47053,47037,47013,47011 - Ends
	//Added code for Requirement 37983,38062 Add  Certification Section to the Part Component Equivalents tab Starts
	Map<String,Object> mp = new HashMap<>();
	Map<String,Object> mpPQRInfo = new HashMap<>();
	for(int i=0;i<mlATSName.size();i++){
		mp = (Map)mlATSName.get(i);
		strRelName = (String)mp.get(pgV3Constants.RELATIONSHIP);

	} try {
		//Added code for defect id 38253 Add vendor details for MEP SEP Component Equivalents Starts
		Map<String,Object> mpVendorInfo = getVendorDetails(context, dobjPart);
		//Added code for defect id 38253 Add vendor details for MEP SEP Component Equivalents Starts
		//Code Fix for Obsolete MEPs, SEPs should not be displayed in Report on 28-Jan-19-Begin
		String sWhereExpSEPMEP= "current!="+pgV3Constants.STATE_OBSOLETE;
		//Code Fix for Obsolete MEPs, SEPs should not be displayed in Report on 28-Jan-19-End
		MapList mlManufacturerOrSupplierDetails = dobjPart.getRelatedObjects(context, //context
												sbRelPattern.toString(),//relationship
												sbTypePattern.toString(),//type
												slSelect,//Object Select
												SL_REL_COMPEQU_SELECT, //Relationship select
												true,//getTo
												true,//getFrom
												(short)1,//recurse level
												sWhereExpSEPMEP,//object where clause
												null,//relationship where clause
												0);//limit
		
		for(int i=0;i<mlManufacturerOrSupplierDetails.size();i++){
			mp = (Map)mlManufacturerOrSupplierDetails.get(i);
			strRelName = (String)mp.get(pgV3Constants.RELATIONSHIP);
			if(strRelName.equalsIgnoreCase(pgV3Constants.RELATIONSHIP_MANUFACTUREREQUIVALENT)){
				// Modified Code to handle multiple PQRs in Component Equivalent tab on 19-July-18 --Begin
				mpPQRInfo = getPQRDetails(mp);
				strPQRName = (String) mpPQRInfo.get("PQRName");
				strPQRState = (String) mpPQRInfo.get("PQRState");
				strPQRRev = (String) mpPQRInfo.get("PQRRev");
				//Added code for Requirement 33656, 33871, 33872 New Tab: MEP-SEP Component Equivalents--Ends
				strMRName = (String)mp.get(DomainConstants.SELECT_NAME);
				strMRRev = (String)mp.get(DomainConstants.SELECT_REVISION);
				strMRType = (String)mp.get(DomainConstants.SELECT_TYPE);
				//Added code for defect id 41304 Starts
				strInputTranslatedTypeMEP = i18nNow.getTypeI18NString(strMRType, strLanguage);
				//Added code for defect id 41304 Ends
				strMRState = (String)mp.get(DomainConstants.SELECT_CURRENT);
				strMRId = (String)mp.get(DomainConstants.SELECT_ID);
				//2018x0 Bug Fix
				strMRTitle = (String)mp.get(pgV3Constants.SELECT_ATTRIBUTE_TITLE);
				strMRDescr = (String)mp.get(DomainConstants.SELECT_DESCRIPTION);
				strArtworkPrimary = getArtWorkPrimary(mp);
				// Modified Code to handle multiple Manufacturers in Component Equivalent tab on 19-July-18 --Begin
				if (mp.get("to["+pgV3Constants.RELATIONSHIP_MANUFACTURINGRESPONSIBILITY+"].from.name") instanceof StringList) {
					slManufacturers = new StringList();
					sbManufacturer = new StringBuffer();												
					slManufacturers = (StringList) mp.get("to["+pgV3Constants.RELATIONSHIP_MANUFACTURINGRESPONSIBILITY+"].from.name");
					for (int j = 0; j < slManufacturers.size(); j++) {
						String	strManufIndividual = slManufacturers.get(j);	
						sbManufacturer.append(strManufIndividual);
						sbManufacturer.append(pgV3Constants.SYMBOL_PIPE);
					}
					strManufacturer= sbManufacturer.toString();		
		
				} else if(mp.containsKey("to["+pgV3Constants.RELATIONSHIP_SUPPLYRESPONSIBILITY+"].from.name")) { 
				// Added by DSM Reports (Sogeti) for 22x.03 (May CW 2023) Defect 49842 - Start
					strManufacturer = (String)mp.get("to["+pgV3Constants.RELATIONSHIP_SUPPLYRESPONSIBILITY+"].from.name");
				}// Added by DSM Reports (Sogeti) for 22x.03 (May CW 2023) Defect 49842 - End
				else {
					strManufacturer = (String) mp.get("to["+pgV3Constants.RELATIONSHIP_MANUFACTURINGRESPONSIBILITY+"].from.name");
				}					
				// Modified Code to handle multiple Manufacturers in Component Equivalent tab on 19-July-18 --End
				bAccess = accessCheck(context,strUserName,strMRId);
				hmCompEquiMR = new HashMap<>();
				//Added code for Requirement 37983,38062 Add  Certification Section to the Part Component Equivalents tab Starts
				sbCertificationName = new StringBuffer();
				sbCertificationStatus = new StringBuffer();
				sbCertificationExpDate = new StringBuffer();
				sbSupportDocs = new StringBuffer();
				slCertificationName = new  StringList();
				 slCertificationStatus = new  StringList();
				 slCertificationExpDate = new  StringList();
				slSupportDocs = new  StringList();
				String strEachElement="";
				
				if(null!=mlCertification && !mlCertification.isEmpty()) {
					for(int j=0;j<mlCertification.size();j++){
						mpCertification = (Map) mlCertification.get(j);
						strMEPSEPName = (String)mpCertification.get(DomainConstants.SELECT_NAME);
						String strMEPId = (String)mpCertification.get(DomainConstants.SELECT_ID);
						if(UIUtil.isNotNullAndNotEmpty(strMEPId) && UIUtil.isNotNullAndNotEmpty(strMRId) && strMEPId.equals(strMRId)) {
							
							
								if(UIUtil.isNotNullAndNotEmpty(strMEPSEPName) && strMEPSEPName.equalsIgnoreCase(strMRName)){
									strCertification = (String) mpCertification.get("CertificationName");
										slCertificationName = com.matrixone.apps.domain.util.StringUtil.split(strCertification, ",");
										
										strCertification = getFormattedValues(sbCertificationName, slCertificationName);
									strCertificationStatus = (String) mpCertification.get("CertificationStatus");
									slCertificationStatus = com.matrixone.apps.domain.util.StringUtil.split(strCertificationStatus, ",");
									strCertificationStatus = getFormattedValues(sbCertificationStatus, slCertificationStatus);
									strCertificationExpDate = (String) mpCertification.get("CertificationExpDate");
									strCertificationSupportDoc = (String) mpCertification.get("CertificationSupportDoc");
									slSupportDocs = com.matrixone.apps.domain.util.StringUtil.split(strCertificationSupportDoc, ",");
									strCertificationSupportDoc = getFormattedValues(sbSupportDocs, slSupportDocs);
								}
							
						}
					}
				}

				//Added code for Requirement 37983,38062 Add certification section to the Part Component Equivalents tab Ends
					hmCompEquiMR.put("MRName", strMRName);
					hmCompEquiMR.put("MRRev", strMRRev);
					//Updated code for defect id 41304 Starts
					if(UIUtil.isNotNullAndNotEmpty(strInputTranslatedTypeMEP))
						hmCompEquiMR.put("MRType", strInputTranslatedTypeMEP);
					else
						hmCompEquiMR.put("MRType", strMRType);
					//Updated code for defect id 41304 Ends
					
					//Added code for Req Id : 33634 - Hyperlinks--Starts
					hmCompEquiMR.put("MRId", strMRId);
					//Added code for Req Id : 33634 - Hyperlinks--Ends
					//Added the code for 2018x.6 June CW Defect 47018 - Starts
					//Added by DSM Reports (Sogeti) for 22x.04 (Dec CW 2023) Defect 56156 -- START
					hmCompEquiMR.put("PartFamilyName", strPPartFamilyName);
					//Added by DSM Reports (Sogeti) for 22x.04 (Dec CW 2023) Defect 56156 -- END
					//Added the code for 2018x.6 June CW Defect 47018 - Ends
					//2018x0 April Bug Fix
					if (bAccess) {		
						//Added for 2018x.6 MAY CW Defect 47017 - starts
						hmCompEquiMR.put("MRTitle", strMRTitle);
						//Added for 2018x.6 MAY CW Defect 47017 - Ends
						hmCompEquiMR.put("MRDesc", strMRDescr);
						hmCompEquiMR.put("MRState", strMRState);
						//Added for 2022x.4 DEC CW Defect 49395 - Starts
						if((UIUtil.isNotNullAndNotEmpty(strPQRState)) && !"Frozen".equalsIgnoreCase(strPQRState)) {
							hmCompEquiMR.put("MRPQRName", strPQRName);
							hmCompEquiMR.put("MRPQRState", strPQRState);
							//Added code for Requirement 33656, 33871, 33872 New Tab: MEP-SEP Component Equivalents--Starts
							hmCompEquiMR.put("MRPQRRev", strPQRRev);
							//Added code for Requirement 33656, 33871, 33872 New Tab: MEP-SEP Component Equivalents--Ends
						}
						//Added for 2022x.4 DEC CW Defect 49395 - Ends
						
						
						hmCompEquiMR.put("Manufacturer", strManufacturer);
						
						hmCompEquiMR.put("MRArtworkPrimary", strArtworkPrimary);
						//Added code for Requirement 37983,38062 Add certification section to the Part Component Equivalents tab Starts
						//Added for Apr22 CW requirement 42014 Starts
						hmCompEquiMR.put("CertificationName", strCertification);
						hmCompEquiMR.put("CertificationStatus", strCertificationStatus);
						hmCompEquiMR.put("CertificationExpDate", strCertificationExpDate);
						hmCompEquiMR.put("CertificationSupportDoc", strCertificationSupportDoc);
						//Added for Apr22 CW requirement 42014 Ends
						//Added code for Requirement 37983,38062 Add certification section to the Part Component Equivalents tab Ends
					} else {
						//Added for 2018x.6 MAY CW Defect 47017 - starts
						hmCompEquiMR.put("MRTitle", "No Access");
						//Added for 2018x.6 MAY CW Defect 47017 - Ends
						hmCompEquiMR.put("MRDesc", "No Access");
						hmCompEquiMR.put("MRState", "No Access");
						hmCompEquiMR.put("MRPQRName", "No Access");
						hmCompEquiMR.put("MRPQRState", "No Access");
						//Added code for Requirement 33656, 33871, 33872 New Tab: MEP-SEP Component Equivalents--Starts
						hmCompEquiMR.put("MRPQRRev", "No Access");
						//Added code for Requirement 33656, 33871, 33872 New Tab: MEP-SEP Component Equivalents--Ends
						hmCompEquiMR.put("Manufacturer", "No Access");
						
						//Modified the code for 2018x.6 APR CW Defect 47052 - starts
						//Added by DSM Reports (Sogeti) for 2022x.4 (DEC CW 2023) Defect 55205 - Start
						hmCompEquiMR.put("MRArtworkPrimary", strArtworkPrimary);
						//Added by DSM Reports (Sogeti) for 2022x.4 (DEC CW 2023) Defect 55205 - End
						//Modified the code for 2018x.6 APR CW Defect 47052 - Ends
						//Added code for Requirement 37983,38062 Add  Certification Section to the Part Component Equivalents tab Starts
						//Modified the code for 2018x.6 APR CW Defect 47053 - Starts
						hmCompEquiMR.put("CertificationName", strCertification);
						hmCompEquiMR.put("CertificationStatus", strCertificationStatus);
						hmCompEquiMR.put("CertificationExpDate", strCertificationExpDate);
						hmCompEquiMR.put("CertificationSupportDoc", strCertificationSupportDoc);
						//Modified the code for 2018x.6 APR CW Defect 47053 - Ends
					//Modified the code for the 2018x.6 APR CW - Ends
						//Added code for Requirement 37983,38062 Add  Certification Section to the Part Component Equivalents tab Ends
					}
					hmCompEquiMR.put(COMMONCOLUMNS, mpCommonColumnsDetail);
					//Added code for defect id 38253 Add vendor details for MEP SEP Component Equivalents Starts
					hmCompEquiMR.put("VendorDetails", mpVendorInfo);
					//Added code for defect id 38253 Add vendor details for MEP SEP Component Equivalents Ends
					mlCompEquivalent.add(hmCompEquiMR);
			} else if(strRelName.equalsIgnoreCase(pgV3Constants.RELATIONSHIP_SUPPLIEREQUIVALENT)){			
					
				// Modified Code to handle multiple PQRs in Component Equivalent tab on 19-July-18 --Begin
				strArtworkPrimary = getArtWorkPrimary(mp);
				mpPQRInfo = getPQRDetails(mp);
				strPQRName = (String) mpPQRInfo.get("PQRName");
				strPQRState = (String) mpPQRInfo.get("PQRState");
				strPQRRev = (String) mpPQRInfo.get("PQRRev");
				//Added code for Requirement 33656, 33871, 33872 New Tab: MEP-SEP Component Equivalents--Ends				
				strSupName = (String)mp.get(DomainConstants.SELECT_NAME);
				strSupRev = (String)mp.get(DomainConstants.SELECT_REVISION);
				strSupType = (String)mp.get(DomainConstants.SELECT_TYPE);
				//Added code for defect id 41304 Starts
				strInputTranslatedTypeSEP = i18nNow.getTypeI18NString(strSupType, strLanguage);
				//Added code for defect id 41304 Ends
				strSupsate = (String)mp.get(DomainConstants.SELECT_CURRENT);
				strSupId = (String)mp.get(DomainConstants.SELECT_ID);
				//2018x0 Bug Fix
				strSupTitle = (String)mp.get(pgV3Constants.SELECT_ATTRIBUTE_TITLE);
				strSupDescr = (String)mp.get(DomainConstants.SELECT_DESCRIPTION);
				// Added by DSM Reports (Sogeti) for 22x.03 (May CW 2023) Defect 49842 - Start
				Object supplierValue=null;
				if(mp.containsKey("to["+pgV3Constants.RELATIONSHIP_SUPPLYRESPONSIBILITY+"].from.name")) {
					supplierValue = mp.get("to["+pgV3Constants.RELATIONSHIP_SUPPLYRESPONSIBILITY+"].from.name");
				} else if(mp.containsKey("to["+pgV3Constants.RELATIONSHIP_MANUFACTURINGRESPONSIBILITY+"].from.name")) {
					supplierValue = mp.get("to["+pgV3Constants.RELATIONSHIP_MANUFACTURINGRESPONSIBILITY+"].from.name");
				}
				if(null != supplierValue) {
					if(supplierValue instanceof StringList) {
						strSupplier=String.join(",", (StringList)supplierValue);
					} else {
						strSupplier=(String) supplierValue;
					}
				}
				// Added by DSM Reports (Sogeti) for 22x.03 (May CW 2023) Defect 49842 - End
				bAccess = accessCheck(context,strUserName,strSupId);
				//Added code for Requirement 37983,38062 Add certification section to the Part Component Equivalents tab Starts
				sbCertificationName = new StringBuffer();
				sbCertificationStatus = new StringBuffer();
				sbCertificationExpDate = new StringBuffer();
				sbSupportDocs = new StringBuffer(); 
				slSupCertificationName = new  StringList();
				 slSupCertificationStatus = new  StringList();
				 slSupCertificationExpDate = new  StringList();
				slSupSupportDocs = new  StringList();
				String strEachElement="";
				if(null!=mlCertification && !mlCertification.isEmpty()) {
					for(int j=0;j<mlCertification.size();j++){
						mpCertification = (Map) mlCertification.get(j);
						strMEPSEPName = (String)mpCertification.get(DomainConstants.SELECT_NAME);
						String strSEPId = (String)mpCertification.get(DomainConstants.SELECT_ID);
						if(UIUtil.isNotNullAndNotEmpty(strSEPId) && UIUtil.isNotNullAndNotEmpty(strSupId) && strSEPId.equals(strSupId)){
							
									strCertification = (String) mpCertification.get("CertificationName");
									
									slSupCertificationName = com.matrixone.apps.domain.util.StringUtil.split(strCertification, ",");
									strCertification = getFormattedValues(sbCertificationName, slSupCertificationName);
									
									strCertificationStatus = (String) mpCertification.get("CertificationStatus");
									slSupCertificationStatus = com.matrixone.apps.domain.util.StringUtil.split(strCertificationStatus, ",");
									strCertificationStatus = getFormattedValues(sbCertificationStatus, slSupCertificationStatus);
									
									strCertificationExpDate = (String) mpCertification.get("CertificationExpDate");
									
									strCertificationSupportDoc = (String) mpCertification.get("CertificationSupportDoc");
									slSupSupportDocs = com.matrixone.apps.domain.util.StringUtil.split(strCertificationSupportDoc, ",");
									strCertificationSupportDoc = getFormattedValues(sbSupportDocs, slSupSupportDocs);
								
								}
					}
				}
				//Added code for Requirement 37983,38062 Add certification section to the Part Component Equivalents tab Ends
					hmCompEquiSup = new HashMap<>();
					hmCompEquiSup.put("SupName", strSupName);
					hmCompEquiSup.put("SupRev", strSupRev);
					//Updated code for defect id 41304 Starts
					if(UIUtil.isNotNullAndNotEmpty(strInputTranslatedTypeSEP))
						hmCompEquiSup.put("SupType", strInputTranslatedTypeSEP);
					else
						hmCompEquiSup.put("SupType", strSupType);
					//Updated code for defect id 41304 Ends
					
					//Added code for Req Id : 33634 - Hyperlinks--Starts
					hmCompEquiSup.put("SupId", strSupId);
					//Added code for Req Id : 33634 - Hyperlinks--Ends
					//Added the code for 2018x.6 June CW Defect 47018 - Starts
					//Added by DSM Reports (Sogeti) for 22x.04 (Dec CW 2023) Defect 56156 -- START
					hmCompEquiSup.put("PartFamilyName", strPPartFamilyName);
					//Added by DSM Reports (Sogeti) for 22x.04 (Dec CW 2023) Defect 56156 -- END
					//Added the code for 2018x.6 June CW Defect 47018 - Ends
					//2018x0 April Bug Fix
					if (bAccess) {	
						//Added for 2018x.6 MAY CW Defect 47017 - starts
					hmCompEquiSup.put("SupTitle", strSupTitle);	
					//Added for 2018x.6 MAY CW Defect 47017 - Ends
					hmCompEquiSup.put("SupDesc", strSupDescr);
					hmCompEquiSup.put("SupState", strSupsate);
					
					//Added for 2022x.4 DEC CW Defect 49395 - Starts
					if((UIUtil.isNotNullAndNotEmpty(strPQRState)) && !"Frozen".equalsIgnoreCase(strPQRState)) {
						hmCompEquiSup.put("SUPPQRName", strPQRName);
						hmCompEquiSup.put("SUPPQRState", strPQRState);
						//Added code for Requirement 33656, 33871, 33872 New Tab: MEP-SEP Component Equivalents--Ends
						hmCompEquiSup.put("SUPPQRRev", strPQRRev);
						//Added code for Requirement 33656, 33871, 33872 New Tab: MEP-SEP Component Equivalents--Ends
						
					}
					//Added for 2022x.4 DEC CW Defect 49395 - Ends
					
					hmCompEquiSup.put("Supplier", strSupplier);
					
					hmCompEquiSup.put("SUPArtworkPrimary", strArtworkPrimary);
					//Added code for Requirement 37983,38062 Add certification section to the Part Component Equivalents tab Starts
					//Added for Apr22 CW requirement 42014 Starts
					
					//Modified the code for 2018x.6 APR CW Defect 47053 - Starts
					hmCompEquiSup.put("CertificationName", strCertification);
					hmCompEquiSup.put("CertificationStatus", strCertificationStatus);
					hmCompEquiSup.put("CertificationExpDate", strCertificationExpDate);
					hmCompEquiSup.put("CertificationSupportDoc", strCertificationSupportDoc);
					//Modified the code for 2018x.6 APR CW Defect 47053 - Ends
					
					//Added for Apr22 CW requirement 42014 Ends
					//Added code for Requirement 37983,38062 Add certification section to the Part Component Equivalents tab Ends
					} else {	
						//Added for 2018x.6 MAY CW Defect 47017 - starts
						hmCompEquiSup.put("SupTitle", "No Access");	
						//Added for 2018x.6 MAY CW Defect 47017 - Ends
					hmCompEquiSup.put("SupDesc", "No Access");
					hmCompEquiSup.put("SupState", "No Access");
					hmCompEquiSup.put("SUPPQRName", "No Access");
					hmCompEquiSup.put("SUPPQRState", "No Access");
					//Added code for Requirement 33656, 33871, 33872 New Tab: MEP-SEP Component Equivalents--Ends
					hmCompEquiSup.put("SUPPQRRev", "No Access");
					//Added code for Requirement 33656, 33871, 33872 New Tab: MEP-SEP Component Equivalents--Ends
					hmCompEquiSup.put("Supplier", "No Access");
					
					//Modified the code for 2018x.6 APR CW Defect 47052 - starts
					hmCompEquiSup.put("SUPArtworkPrimary", strArtworkPrimary);
					//Modified the code for 2018x.6 APR CW Defect 47052 - Ends
					//Added code for Requirement 37983,38062 Add certification section to the Part Component Equivalents tab Starts
					//Added for Apr22 CW requirement 42014 Starts
					
					
					hmCompEquiSup.put("CertificationName", strCertification);
					hmCompEquiSup.put("CertificationStatus", strCertificationStatus);
					hmCompEquiSup.put("CertificationExpDate", strCertificationExpDate);
					hmCompEquiSup.put("CertificationSupportDoc", strCertificationSupportDoc);
					
					//Added for Apr22 CW requirement 42014 Ends
					//Added code for Requirement 37983,38062 Add certification section to the Part Component Equivalents tab Ends
				}
				hmCompEquiSup.put(COMMONCOLUMNS, mpCommonColumnsDetail);
				//Added code for defect id 38253 Add vendor details for MEP SEP Component Equivalents Starts
				hmCompEquiSup.put("VendorDetails", mpVendorInfo);
				//Added code for defect id 38253 Add vendor details for MEP SEP Component Equivalents Ends
				mlCompEquivalent.add(hmCompEquiSup);
				}
			}
		//Updated code for Requirement 38401 Modify code for Cognitive Complexity exception Ends
		
	} catch (Exception e) {
		outLog.print("\t****\n\tOK :: Exception in method getCompEquiDetails {} " + e.getMessage() + "\n\t****");
		outLog.flush();
	}
	ContextUtil.popContext(context);
	return mlCompEquivalent;
}





/**
 * @param sbCertificationName
 * @param slCertificationName
 * @return 
 */
private String getFormattedValues(StringBuffer sbCertificationName, StringList slCertificationName) {
	String strEachElement;
	for(int k=0;k<slCertificationName.size();k++) {
		strEachElement = slCertificationName.get(k).trim();
		sbCertificationName.append(strEachElement);
		if(k!=slCertificationName.size()-1){
			sbCertificationName.append("|");
		}
	}
	return sbCertificationName.toString();
}

private Map getPeerReview(Context context, String strUserName,DomainObject dobjRelatedPart,Map mpCommonColumnsDetail) throws Exception {
	Map mTSDetail = new HashMap();
	String strType = (String)mpCommonColumnsDetail.get(DomainConstants.SELECT_TYPE);
	mTSDetail= dobjRelatedPart.getInfo(context, SL_OBJECT_PEERREVIEW_SELECT);	
	return mTSDetail;
}
//Modified the code for Defect 49698 - Spec Reader Access Issue - Starts
private MapList getPlantsDetails(Context context,DomainObject dobjPart, Map<Object,Object> mpPlants,Map<String,Object> mpCommonColumnsDetail, String strUserName)throws Exception {
	
	boolean hasAccess = false;
	boolean isContextPushed = false;
	//Modified the code for Defect 49698 - Spec Reader Access Issue - Ends
	StringList slPlantsConnected =new StringList();
	StringList slIsActivated =new StringList();
	StringList slIsAuthorizedtoProduce =new StringList();
	StringList slIsAuthorizedtoUse=new StringList();
	StringList slIsAuthorizedtoView=new StringList();
	String strPlantName= null;											
	String strIsActivated= null;
	String strIsAuthorizedtoProduce= null;
	String strIsAuthorizedtoUse= null;
	String strIsAuthorizedtoView= null;	
	String strRelName = null;
	HashMap hmPlant = null;
	StringList slSelect=new StringList();
	slSelect.addElement(DomainConstants.SELECT_ID);
	slSelect.addElement(DomainConstants.SELECT_TYPE);
	slSelect.addElement(DomainConstants.SELECT_NAME);
	//Start modified for 22x Changes for Material Library/Family Auto Name Change
	slSelect.add(DomainConstants.SELECT_ATTRIBUTE_TITLE);
	//End modified for 22x Changes for Material Library/Family Auto Name Change
	try {	
		//Code-Fix for Defect 24202 (Plants Tab should be empty for MEP and SEP Objects) --Start
		String strPartPolicy= dobjPart.getInfo(context, DomainConstants.SELECT_POLICY);
		if(!strPartPolicy.equalsIgnoreCase(pgV3Constants.POLICY_SUPPLIEREQUIVALENT) && (!strPartPolicy.equalsIgnoreCase(pgV3Constants.POLICY_MANUFACTURER_EQUIVALENT))){
		//Code-Fix for Defect 24202 (Plants Tab should be empty for MEP and SEP Objects) --End
		if(mpPlants.get(PLANTNAME) instanceof StringList){				
			slPlantsConnected = (StringList)mpPlants.get(PLANTNAME);
			slIsActivated = (StringList)mpPlants.get(ISACTIVATED);
			slIsAuthorizedtoProduce = (StringList)mpPlants.get(ISAUTHORIZEDPRODUCE);
			slIsAuthorizedtoUse = (StringList)mpPlants.get(ISAUTHORIZEDUSE);
			slIsAuthorizedtoView = (StringList)mpPlants.get(ISAUTHORIZEDVIEW);

					
			for(int i=0;i<slPlantsConnected.size();i++){
				strPlantName= slPlantsConnected.get(i);											
				strIsActivated= slIsActivated.get(i);
				strIsAuthorizedtoProduce= slIsAuthorizedtoProduce.get(i);
				strIsAuthorizedtoUse= slIsAuthorizedtoUse.get(i);
				strIsAuthorizedtoView= slIsAuthorizedtoView.get(i);
				hmPlant = new HashMap<>();
				hmPlant.put(PLANTNAME, strPlantName);
				hmPlant.put(ISACTIVATED, strIsActivated);
				hmPlant.put(ISAUTHORIZEDPRODUCE, strIsAuthorizedtoProduce);
				hmPlant.put(ISAUTHORIZEDUSE, strIsAuthorizedtoUse);
				hmPlant.put(ISAUTHORIZEDVIEW, strIsAuthorizedtoView);
				hmPlant.put(COMMONCOLUMNS, mpCommonColumnsDetail);
				//Added by DSM Reports (Sogeti) for 22x.04 (Dec CW 2023) Defect 56156 -- START
				hmPlant.put(PARTFAMILYNAME, strPPartFamilyName);
				//Added by DSM Reports (Sogeti) for 22x.04 (Dec CW 2023) Defect 56156 -- END
				mlPlantList.add(hmPlant);
			}
		} else if (mpPlants.get(PLANTNAME) instanceof String){
			strPlantName = (String)mpPlants.get(PLANTNAME);
			strIsActivated = (String)mpPlants.get(ISACTIVATED);
			strIsAuthorizedtoProduce = (String)mpPlants.get(ISAUTHORIZEDPRODUCE);
			//Code Upgrade for 2018x Data Model - Starts
			slIsAuthorizedtoUse = (StringList)mpPlants.get(ISAUTHORIZEDUSE);
			if (!slIsAuthorizedtoUse.isEmpty()) {
				strIsAuthorizedtoUse = slIsAuthorizedtoUse.get(0);
			} else {
				strIsAuthorizedtoUse = DomainConstants.EMPTY_STRING;
			}
			//Code Upgrade for 2018x Data Model - Ends
			strIsAuthorizedtoView = (String)mpPlants.get(ISAUTHORIZEDVIEW);
			hmPlant = new HashMap<>();

			hmPlant.put(PLANTNAME, strPlantName);
			hmPlant.put(ISACTIVATED, strIsActivated);
			hmPlant.put(ISAUTHORIZEDPRODUCE, strIsAuthorizedtoProduce);
			hmPlant.put(ISAUTHORIZEDUSE, strIsAuthorizedtoUse);
			hmPlant.put(ISAUTHORIZEDVIEW, strIsAuthorizedtoView);
			hmPlant.put(COMMONCOLUMNS, mpCommonColumnsDetail);
			//Added by DSM Reports (Sogeti) for 22x.04 (Dec CW 2023) Defect 56156 -- START
			hmPlant.put(PARTFAMILYNAME, strPPartFamilyName);
			//Added by DSM Reports (Sogeti) for 22x.04 (Dec CW 2023) Defect 56156 -- END
			mlPlantList.add(hmPlant);
		}
	}
	}
	catch (Exception e) {
	e.printStackTrace();
	}	
		return mlPlantList;		
	}
	
	// Method Added for Performance Characteristics
public MapList getPerformanceCharacteristics(Context context, String strUserName,DomainObject doObj,Map mpObjectCommon) throws Exception {		
	//Modified the code for May CW 2022x.02 Defect 52204 - Starts 
	boolean isContextPushed = false;
	try {
		//Modified the code for May CW 2022x.02 Defect 52204 - Ends
	MapList mlRelToRelAllMasterCharacteristics=new MapList();
	String strCharInheritanceType = "";
	String strPartFamilyName = strPPartFamilyName; // Added by DSM Reports (Sogeti) for 22x.04 (Dec CW 2023) Defect 56156 - START/END
	String strRelName = DomainConstants.EMPTY_STRING;
	String partType=null;
	//Modifing the code for 2022x.02 May CW Defect 52204 - Starts
	StringBuffer sbPartFamilyTitle = new StringBuffer();
	//Modifing the code for 2022x.02 May CW Defect 52204 - Ends
	
	int iTMSize=0;
	int iSize=0;
	MapList newMapList = new MapList();
	String strType = (String)mpObjectCommon.get(DomainConstants.SELECT_TYPE);
	String strPartId = (String)mpObjectCommon.get(DomainConstants.SELECT_ID);
	boolean bHasCMAccess = hasCMAccess(context, strUserName,strPartId);
	boolean bHasSupplierAccess = hasSupplierAccess(context, strUserName,strPartId);
	boolean bIsEBPUser = isEBP(context, strUserName);
	boolean bHasTabAccess = false;
	String relExtendedData = PropertyUtil.getSchemaProperty(context, "relationship_ExtendedData");
	StringList objectSelects = new StringList();
	objectSelects.add(DomainConstants.SELECT_ID);
	objectSelects.add(DomainConstants.SELECT_CURRENT);
	objectSelects.add(DomainObject.SELECT_NAME);
	objectSelects.add(DomainObject.SELECT_TYPE);
	objectSelects.add(DomainObject.SELECT_POLICY);
	objectSelects.add(CPNCommonConstants.SELECT_ATTRIBUTE_SHAREDTTABLECHARACTERISTICTYPE);
	objectSelects.add("attribute["+ATTR_PG_CHANGE + "]");
	objectSelects.add("attribute["+ATTR_PG_CHARACTERISTIC + "]");
	objectSelects.add("attribute["+ATTR_PG_CHARACTERISTIC_SPECIFIC + "]");
	objectSelects.add("attribute["+ATTR_PG_CHARACTERISTIC_SPECIFIC + "]");
	objectSelects.add("attribute["+ATTR_PG_TM_LOGIC + "]");
	objectSelects.add("attribute["+ATTR_PG_METHOD_ORIGIN + "]");
	objectSelects.add("attribute["+ATTR_PG_METHOD_NUMBER + "]");
	objectSelects.add("attribute["+ATTR_PG_METHOD_SPECIFICS + "]");
	objectSelects.add("attribute["+ATTR_PG_SAMPLING + "]");
	objectSelects.add("attribute["+ATTR_PG_SUB_GROUP + "]");
	objectSelects.add("attribute["+ATTR_PG_PLANT_RETESTING + "]");
	objectSelects.add("attribute["+ATTR_PG_PLANT_TESTING + "]");
	objectSelects.add("attribute["+ATTR_PG_RETESTING_UOM + "]");
	objectSelects.add("attribute["+ATTR_PG_LOWER_SPECIFICATION_LIMIT + "]");
	objectSelects.add("attribute["+ATTR_PG_LOWER_TARGET + "]");
	objectSelects.add("attribute["+ATTR_PG_TARGET + "]");
	objectSelects.add("attribute["+ATTR_PG_UPPER_TARGET + "]");
	objectSelects.add("attribute["+ATTR_PG_UPPER_SPECIFICATION_LIMIT + "]");
	objectSelects.add("attribute["+ATTR_PG_UOM + "]");
	objectSelects.add("attribute["+ATTR_PG_REPORT_NEAREST + "]");
	objectSelects.add("attribute["+ATTR_PG_REPORT_TYPE + "]");
	objectSelects.add("attribute["+ATTR_PG_RELEASE_CRITERIA + "]");
	objectSelects.add("attribute["+ATTR_PG_ACTION_REQUIRED + "]");
	objectSelects.add("attribute["+ATTR_PG_CRITICALITY_FACTOR + "]");
	objectSelects.add("attribute["+ATTR_PG_BASIS + "]");
	objectSelects.add("attribute["+ATTR_PG_TEST_GROUP + "]");
	objectSelects.add("attribute["+ATTR_PG_APPLICATION + "]");
	objectSelects.add("to[Derived].from.name");
	objectSelects.add("to[Derived].from.id");
	objectSelects.add("to[Derived].from.attribute[Title]");
	//Added For DSM Report 2018x1.1 Scope : 8 Report shall include Upper and Lower Routine Release Limits in the Performance Characteristic worksheet. (Requirement# 28350) :Starts
	objectSelects.add(pgV3Constants.SELECT_ATTRIBUTE_PGUPPERROUTINERELEASELIMIT);
	objectSelects.add(pgV3Constants.SELECT_ATTRIBUTE_PGLOWERROUTINRRELEASELIMIT);
	//Added For DSM Report 2018x1.1 Scope : 8 Report shall include Upper and Lower Routine Release Limits in the Performance Characteristic worksheet. (Requirement# 28350) :Ends
	String strPerformanceType = PropertyUtil.getSchemaProperty(context, "type_pgPerformanceCharacteristic");
    String relPattern = relExtendedData+pgV3Constants.SYMBOL_COMMA+RELATIONSHIP_CHARACTERISTIC+","+RELATIONSHIP_SHARED_TABLE+","+RELATIONSHIP_SHARED_CHARACTERISTIC;
    String typePattern = strPerformanceType+","+TYPE_SHARED_TABLE;
	StringList slChracteristics=new StringList(1); 
	StringList slTMObjectsSelect=new StringList(2);
	StringList slTMNames=new StringList(1);
	StringList slTMRDNames=new StringList(1);
	StringList relSelects = new StringList();
	MapList mlRelToRelMasterCharacteristics=new MapList();
	relSelects.add(DomainObject.SELECT_RELATIONSHIP_ID);
	relSelects.add(SELECT_ATTRIBUTE_SHAREDTABLECHARACTERISTICSEQUENCE);
	StringList slSelect=new StringList();
	slSelect.addElement(DomainConstants.SELECT_ID);
	slSelect.addElement(DomainConstants.SELECT_TYPE);
	slSelect.addElement(DomainConstants.SELECT_NAME);
	//Start modified for 22x Changes for Material Library/Family Auto Name Change
	slSelect.add(DomainConstants.SELECT_ATTRIBUTE_TITLE);
	//End modified for 22x Changes for Material Library/Family Auto Name Change
	String strTypeCheck=null;
	//Modified the code for May CW 2022x.02 Defect 52204 - Starts 
	//pushing the context to fetch the details irrespective of Logged in User Access to match UI Logic.
	if(!isContextPushed) {
		ContextUtil.pushContext(context,PropertyUtil.getSchemaProperty(context,"User Agent"),DomainConstants.EMPTY_STRING,DomainConstants.EMPTY_STRING);
		isContextPushed = true;	
	}
	//Modified the code for May CW 2022x.02 Defect 52204 - Ends
	
	

	//Modifing the code for 2022x.02 May CW Defect 52204 - Ends
    // Code Added for Displaying Referenced Performance Characteristics
	StringList selStmt = new StringList();
	//Modified the code for May CW 2022x.02 Defect 52204 - Starts 
	selStmt.add("to["+pgV3Constants.RELATIONSHIP_CLASSIFIEDITEM+"].frommid["+REL_PARTFAMILYREFERENCE+"].torel.to.id");
	selStmt.add("to["+pgV3Constants.RELATIONSHIP_CLASSIFIEDITEM+"].frommid["+REL_PARTFAMILYREFERENCE+"].torel.to.current");
	//Modified the code for May CW 2022x.02 Defect 52204 - Ends
	Map partInfoMap = doObj.getInfo(context,selStmt);
	MapList mlReltoRelObjectList = new MapList();
	String strConnectedRefId = DomainConstants.EMPTY_STRING;
	//Modified the code for May CW 2022x.02 Defect 52204 - Starts 
	String strConectedRefCurrState = DomainConstants.EMPTY_STRING;
	if(partInfoMap.containsKey("to["+pgV3Constants.RELATIONSHIP_CLASSIFIEDITEM+"].frommid[" + REL_PARTFAMILYREFERENCE + "].torel.to.id")){
		strConnectedRefId =(String)partInfoMap.get("to["+pgV3Constants.RELATIONSHIP_CLASSIFIEDITEM+"].frommid[" + REL_PARTFAMILYREFERENCE + "].torel.to.id");
		strConectedRefCurrState=(String)partInfoMap.get("to["+pgV3Constants.RELATIONSHIP_CLASSIFIEDITEM+"].frommid[" + REL_PARTFAMILYREFERENCE + "].torel.to.current");
	}
			  
	if(UIUtil.isNotNullAndNotEmpty(strConnectedRefId) && UIUtil.isNotNullAndNotEmpty(strConectedRefCurrState) && pgV3Constants.STATE_RELEASE.equalsIgnoreCase(strConectedRefCurrState))
	{
		//Modified the code for May CW 2022x.02 Defect 52204 - Ends
		DomainObject doObjReltoRelMaster=DomainObject.newInstance(context,strConnectedRefId);
		//Modified for Defect 49998:22x01 CW -- Starts
		mlRelToRelMasterCharacteristics = doObjReltoRelMaster.getRelatedObjects(context, 
				                          relPattern, // Rel pattern
				                          typePattern, // Type pattern
				                          objectSelects, //Object selectables
				                          relSelects, //Rel selectables
				                          false, //expand to side
				                          true, //expand from side
				                          (short) 1, //recurse level
				                          null, //object were clause
				                          null , //rel were clause
				                          0);	//limit
		//Modified for Defect 49998:22x01 CW -- Ends

		iSize=mlRelToRelMasterCharacteristics.size();
		if(iSize>0)
		{
			for(int iIndex=0;iIndex<iSize;iIndex++)
			{
				Map mpSharedChar=(Map)mlRelToRelMasterCharacteristics.get(iIndex);
				strTypeCheck=(String)mpSharedChar.get("type");
				if(UIUtil.isNotNullAndNotEmpty(strTypeCheck) && strTypeCheck.equals(strPerformanceType))
				{
					mlRelToRelAllMasterCharacteristics.add(mpSharedChar);
				}
			}
		}
		mlRelToRelMasterCharacteristics.clear();
	}
	relPattern = relExtendedData+pgV3Constants.SYMBOL_COMMA+RELATIONSHIP_CHARACTERISTIC+","+RELATIONSHIP_PG_MASTER+","+RELATIONSHIP_SHARED_TABLE+","+RELATIONSHIP_SHARED_CHARACTERISTIC;
	typePattern = strPerformanceType+","+TYPE_PART+","+TYPE_SHARED_TABLE;
				
	//  Code  Added for Displaying the Referenced Performance Characteristics	
	String relWhere = null;	
	MapList objList = new MapList();
	//Modified for Defect 49998:22x01 CW -- Starts
	objList=doObj.getRelatedObjects(context, //context
					relPattern, //relationship pattern
					typePattern,//type pattern
					objectSelects,//Object selectables 
					relSelects, //Rel selectables
					false, // expand to side
					true, // expand from side
					(short) 1, // recurse level
					null, // obj where clause
					relWhere , // rel where clause
					0);	//limit
	//Modified for Defect 49998:22x01 CW -- Ends
	mlRelToRelAllMasterCharacteristics.addAll(objList);
	String objTMRDTypes =TYPE_PG_TMRD_TYPES;
	//MapList charObjList = new MapList();
	MapList mlTestMethodList = new MapList();
	MapList mlTMRD=new MapList();
	Iterator objListItr = mlRelToRelAllMasterCharacteristics.iterator(); 
	String strCharType=null;
	String strCharId=null;
	while (objListItr.hasNext()) {
		Map mpObjects = (Map) objListItr.next();

		mpObjects.put("PartFamilyName", strPartFamilyName);
		strCharType=(String)mpObjects.get("type");
		if(strCharType.equals(strPerformanceType))
		{
			mpObjects.put("CommonColumns", mpObjectCommon);			
			//	charObjList.add(mpObjects);	
			strCharId=(String)mpObjects.get("id");
			DomainObject doObjChar = DomainObject.newInstance(context, strCharId);
			String sRelRefDoc = DomainConstants.RELATIONSHIP_REFERENCE_DOCUMENT;
			String sPropertiesRel = "Properties Testing Requirements";
			String strTestMethodTypes=TYPE_PG_TEST_METHOD + "," +TYPE_TEST_METHOD;
			slTMObjectsSelect.add(DomainConstants.SELECT_ID);
			slTMObjectsSelect.add(DomainConstants.SELECT_NAME);
			slTMObjectsSelect.add(DomainConstants.SELECT_CURRENT);
			slTMObjectsSelect.add(DomainConstants.SELECT_DESCRIPTION);
			slTMObjectsSelect.add(DomainConstants.SELECT_REVISION);
			slTMObjectsSelect.add(DomainConstants.SELECT_TYPE);
			slTMObjectsSelect.add(pgV3Constants.SELECT_ATTRIBUTE_TITLE);
			mlTestMethodList = doObjChar.getRelatedObjects(context,sRelRefDoc,strTestMethodTypes,slTMObjectsSelect,DomainConstants.EMPTY_STRINGLIST, true, true, (short) 1, null, null,0);
			iTMSize=mlTestMethodList.size();
			String strTMNames=null;
			String strTMRDNames=null;
			String strCompleteTMNames=DomainConstants.EMPTY_STRING;
			String strCompleteTMRDNames=DomainConstants.EMPTY_STRING;
			String strCompleteTMNamesId=DomainConstants.EMPTY_STRING;
			
			 for(int iIndex=0;iIndex<iTMSize;iIndex++)
			{
				Map mpTMNames=(Map)mlTestMethodList.get(iIndex);
				strTMNames=(String)mpTMNames.get("name");
				String strTMId = (String)mpTMNames.get("id");
				slTMNames.addElement(strTMNames);				
				strCompleteTMNamesId=strCompleteTMNamesId+","+strTMId;
			}
			slTMNames.sort();
			for(int iIndex1=0;iIndex1<slTMNames.size();iIndex1++)
			{				
				strCompleteTMNames=strCompleteTMNames+"@#@"+slTMNames.get(iIndex1);
			} 
			mpObjects.put("TestMethod",strCompleteTMNames);
			mpObjects.put("TestMethodIds",strCompleteTMNamesId);
			// TMRD LOGIC
			mlTMRD = doObjChar.getRelatedObjects(context, sRelRefDoc, objTMRDTypes, slTMObjectsSelect, null, true, true, (short) 1, null, null,0);
			iTMSize=mlTMRD.size();
			
			 for(int iIndex=0;iIndex<iTMSize;iIndex++)
			{
				Map mpTMRDNames=(Map)mlTMRD.get(iIndex);
				strTMRDNames=(String)mpTMRDNames.get("name");
				slTMRDNames.addElement(strTMRDNames);
			}
			slTMRDNames.sort();

			for(int iIndex1=0;iIndex1<slTMRDNames.size();iIndex1++)
			{
				
				strCompleteTMRDNames=strCompleteTMRDNames+"@#@"+slTMRDNames.get(iIndex1);
			} 
			
			mpObjects.put("TMRD",strCompleteTMRDNames);
			bHasTabAccess = getUserTabAccess(bIsEBPUser, bHasCMAccess, bHasSupplierAccess, strType, strEBPSpecsDocsCharRef_CM, strEBPSpecsDocsCharRef_Supplier, strSpecsDocsCharDocs_NonEBP);
			if(bHasTabAccess){
				mpObjects.put("TMRDAccess","TRUE");
			}

			//TMRD LOGIC
			charObjList.add(mpObjects);
			slTMNames.clear();
			slTMRDNames.clear();

		}
	}
	//Added code for Defect ID : 27579 - Family Care - Performance Characteristics of FPP in not included in report : Starts
	partType = doObj.getInfo(context, DomainConstants.SELECT_TYPE);
	if(TYPE_FINISHED_PRODUCT_PART.equalsIgnoreCase(partType)){
		//Modifing the code for 2022x.02 May CW Defect 52204 - Starts
		objList=getEbomPartsCharacterstics(context,doObj,objList,mpObjectCommon,bIsEBPUser, bHasCMAccess, bHasSupplierAccess);
		//Modifing the code for 2022x.02 May CW Defect 52204 - Ends
		charObjList.addAll(objList);
	}
	//Added code for Defect ID : 27579 - Family Care - Performance Characteristics of FPP in not included in report : Ends
	charObjList.sort(SELECT_ATTRIBUTE_SHAREDTABLECHARACTERISTICSEQUENCE,"ascending", "integer");
	MapList mlTempList = new MapList();
	for (int iSeq = 0; iSeq < charObjList.size(); iSeq++) {
		Map mpTempList = (Map) charObjList.get(iSeq);
		mpTempList.put("Sequence", Integer.toString(iSeq + 1));
		//Modifing the code for 2022x.02 May CW Defect 52204 - Starts
		if(TYPE_FINISHED_PRODUCT_PART.equalsIgnoreCase(partType)) {
			mpTempList.put("PartFamilyName",strPartFamilyName );
		}
		//Modifing the code for 2022x.02 May CW Defect 52204 - Ends
		mlTempList.add(mpTempList);
	}
	mlRelToRelAllMasterCharacteristics.clear();
	charObjList.clear();
	charObjList.addAll(mlTempList);
	//Modified the code for May CW 2022x.02 Defect 52204 - Starts 
}catch(Exception ex) {
	outLog.print("Exception in getPerformanceCharacteristics Method"+ex+"\n");
	outLog.flush();
}
	finally {
	if(isContextPushed) {
		ContextUtil.popContext(context);
	}
}
	//Modified the code for May CW 2022x.02 Defect 52204 - Ends
	return charObjList;
}
	// Code for Specs Docs

private MapList getRelatedSpecsDocs(Context context, DomainObject doObj,Map mpObjectCommon,String strUserName) throws Exception {
	//Added the code for Defect 49698 - Spec Reader Access Issue - Starts
	boolean hasAccess = false;
	boolean isContextPushed = false;
	//Added the code for Defect 49698 - Spec Reader Access Issue - Ends
	MapList objList = new MapList();
	MapList mlFilteredList=new MapList();
	MapList mlFilteredListAll=new MapList();
	String strCharInheritanceType = "";
	String strRelName ="";
	String strPartFamilyName = DomainConstants.EMPTY_STRING;
	String partType=null;
	int iTMSize=0;
	MapList newMapList = new MapList();
	Map charMap=null;
	MapList charList=new MapList();
	String strPartType=(String) mpObjectCommon.get(DomainConstants.SELECT_TYPE);
	String strPartId = (String) mpObjectCommon.get(DomainConstants.SELECT_ID);
	boolean bIsEBPUser = isEBP(context, strUserName);
	StringList slSelect=new StringList();
	slSelect.addElement(DomainConstants.SELECT_ID);
	slSelect.addElement(DomainConstants.SELECT_TYPE);
	slSelect.addElement(DomainConstants.SELECT_NAME);
	//Start modified for 22x Changes for Material Library/Family Auto Name Change
	slSelect.add(DomainConstants.SELECT_ATTRIBUTE_TITLE);
	//End modified for 22x Changes for Material Library/Family Auto Name Change
	StringList objectSelects = new StringList();
	objectSelects.add(DomainConstants.SELECT_ID);
	objectSelects.add(DomainConstants.SELECT_CURRENT);
	objectSelects.add(DomainConstants.SELECT_NAME);
	objectSelects.add(DomainConstants.SELECT_REVISION);
	objectSelects.add(DomainConstants.SELECT_TYPE);
	objectSelects.add(DomainConstants.SELECT_ORIGINATOR);
	objectSelects.add(pgV3Constants.SELECT_ATTRIBUTE_TITLE);
	//Added code for 2018x.6 Requirement 36694 Add attribute Release Date in Part and Spec Reports Starts
	objectSelects.add(pgV3Constants.SELECT_ATTRIBUTE_RELEASE_DATE);
	//Added code for 2018x.6 Requirement 36694 Add attribute Release Date in Part and Spec Reports Ends
	StringList relSelects = new StringList(1);
	relSelects.add(CommonDocument.SELECT_RELATIONSHIP_ID);
	relSelects.add("attribute[pgArtworkPrimary]");
	String relPattern = DomainConstants.EMPTY_STRING;
	//Commented for defect Id : 31528 - Starts
	//Added by DSM Reports (Sogeti) for 2022x.4 (DEC CW 2023) Defect 49288 - Start
	 if ("pgAuthorizedTemporarySpecification".equalsIgnoreCase(strPartType)) {
		relPattern = RELATIONSHIP_PART_SPECIFICATION+","+RELATIONSHIP_PG_APPROVED_SUPPLIER_LIST+","+RELATIONSHIP_PG_CAD_SPECIFICATION+","+RELATIONSHIP_AUTHORIZEDTEMPORARYSPECIFICATION;
		//Added by DSM Reports (Sogeti) for 2022x.4 (DEC CW 2023) Defect 49288 - End
	 } else { 
		relPattern = RELATIONSHIP_PART_SPECIFICATION+","+RELATIONSHIP_PG_APPROVED_SUPPLIER_LIST+","+RELATIONSHIP_PG_CAD_SPECIFICATION;
	 }
	 
	//Commented for defect Id : 31528 - Ends
	String masterCurState = doObj.getInfo(context,"current");
	String relWhere = null;	
	//Code-Fix for Defect 24443 (DSM Report bug pgIPMDocument objects  showing with Revision = Rendition) --Start
	//Code-Fix for Defect 28681- ILST issue for CM and Supplier View --Starts
	String sBusWhereExpression = "(revision != Rendition) && (type != pgPerformanceCharacteristic)";
	//Code-Fix for Defect 28681- ILST issue for CM and Supplier View --Ends
	//ALM 30015 Push Context to get all connected parts since some data is not returned when user is EBP
	//Added the code for Defect 49698 - Spec Reader Access Issue - Starts
	if(SPECREADER.equalsIgnoreCase(strOriginatingSource)) {
			hasAccess = accessCheck(context, strUserName, (String)doObj.getInfo(context, DomainConstants.SELECT_ID));
			if(hasAccess) {
				//Pushing User Agent Context to get the Data if the Spec Reader User have access
				ContextUtil.pushContext(context,PropertyUtil.getSchemaProperty(context,"User Agent"),DomainConstants.EMPTY_STRING,DomainConstants.EMPTY_STRING);
				isContextPushed = true;
				
			}
		}
	//Added the code for Defect 49698 - Spec Reader Access Issue - Ends
	if (bIsEBPUser && !SPECREADER.equalsIgnoreCase(strOriginatingSource)) {
		ContextUtil.pushContext(context,PropertyUtil.getSchemaProperty(context,"User Agent"),DomainConstants.EMPTY_STRING,DomainConstants.EMPTY_STRING);
	}
	objList = doObj.getRelatedObjects(context, relPattern, "*",	objectSelects, relSelects, false, true, (short) 1, sBusWhereExpression,	null , 0);
	//Code-Fix for Defect 24443 (DSM Report bug pgIPMDocument objects  showing with Revision = Rendition) --End
	String strSource=DomainConstants.EMPTY_STRING;
	String strArtworkPrimary=DomainConstants.EMPTY_STRING;
	StringList strCharList = new StringList();
	StringList strFinalList = new StringList();
	String strDisplaySource="";
	Iterator objListItr = objList.iterator(); 
	String strCharType=null;
	String strCharId=null;
	while (objListItr.hasNext()) {
		Map mpObjects = (Map) objListItr.next();
		String strObjId=(String)mpObjects.get(DomainConstants.SELECT_ID);
		
		DomainObject doObjSpec=null;
		try {
			if(SPECREADER.equalsIgnoreCase(strOriginatingSource) && !context.getUser().equals("User Agent")) {
				ContextUtil.pushContext(context,PropertyUtil.getSchemaProperty(context,"User Agent"),DomainConstants.EMPTY_STRING,DomainConstants.EMPTY_STRING);
			}
			 doObjSpec= DomainObject.newInstance(context, strObjId);
			//Modified the code for May CW 2022x.02 Defect 52204 - Starts 
			 boolean bAccess = false;
			bAccess = accessCheck(context,strUserName,strObjId);
			 if(!bAccess && pgV3Constants.TYPE_POA.equalsIgnoreCase(doObjSpec.getTypeName(context))) {
				 continue;
			 }
			mpObjects.put("CommonColumns", mpObjectCommon);
			//Modified the code for May CW 2022x.02 Defect 52204 - Ends
			if (bAccess || bIsEBPUser){
				//Added by DSM Report (Sogeti) for 22x.04 (December CW 2023) Defect 49288 - Starts
				mpObjects.put("access", bAccess);
				//Added by DSM Report (Sogeti) for 22x.04 (December CW 2023) Defect 49288 - Ends

				mpObjects.put("PartFamilyName", strPPartFamilyName); // Added by DSM Reports (Sogeti) for 22x.04 (Dec CW 2023) Defect 56156 - START/END
				String strTypeCharacteristics = PropertyUtil.getSchemaProperty(context, "type_Characteristic");
				strSource = "Direct";
				StringList slSelects=new StringList();
				slSelects.addElement(DomainConstants.SELECT_ID);
				slSelects.addElement(DomainConstants.SELECT_TYPE);
				String strType = "";
				String strFinalType = "";
				charList = doObjSpec.getRelatedObjects(context, DomainConstants.RELATIONSHIP_REFERENCE_DOCUMENT, strTypeCharacteristics, slSelects, null, false, true, (short)1, null, null, 0);
				if(charList!=null && !charList.isEmpty()){
					Iterator charListIterator = charList.iterator();
					while(charListIterator.hasNext()){
						charMap = (Map)charListIterator.next();
						strType = (String)charMap.get(DomainConstants.SELECT_TYPE);
						int n = strType.lastIndexOf(" ");
						if(n>=0)
						{
							strType = strType.substring(0, n);
						}
						if(!strCharList.contains(strType)){
							strCharList.addElement(strType);
						}
					}
					if(strCharList.size()>1){
						for(int i=0;i<strCharList.size();i++){
							strFinalType = strFinalType+","+strCharList.get(i);
						}
						strFinalType = strFinalType.substring(1,strFinalType.length());
					} else {
						strFinalType = (String)strCharList.get(0);
					}
					strDisplaySource=strFinalType;
					strCharList.clear();
					strFinalType = "";
				} else {
					strDisplaySource=strSource;
				}
			  } else {
				 //Added the code for defect Id :30015 - data displayed in family care report Specs and Docs sheet doesn't match the value in UI - Ends
				  //Clear type and title for parts which user does not have access to
				//Added by DSM Report (Sogeti) for 22x.04 (December CW 2023) Defect 49288 - Starts
				  mpObjects.put("access", false);	
				//Added by DSM Report (Sogeti) for 22x.04 (December CW 2023) Defect 49288 - Ends
			}
		}	catch (Exception e) {
				e.printStackTrace();
			
		}
		mpObjects.put("Source", strDisplaySource);
		String strSubType=(String)getSpecificationSubtype(context,doObjSpec);
		mpObjects.put("SubType", strSubType);
		mlFilteredList.add(mpObjects);	
		}
		//Added the code for Defect 49698 - Spec Reader Access Issue - Starts
		if (bIsEBPUser || SPECREADER.equalsIgnoreCase(strOriginatingSource)) {
			ContextUtil.popContext(context);
		}
		////Added the code for Defect 49698 - Spec Reader Access Issue - Ends
		// Logic  for adding the Reference Document
		//}
		return mlFilteredList;
	}
	// Code for Specs Docs

	// Code for Specs Docs Ref Docs
private MapList getRelatedSpecsDocsRefDoc(Context context, String strUserName,DomainObject doObj,Map mpObjectCommon) throws Exception {
	
	final String ACTIVE_FILES = "from[Active Version].to.attribute[Title]"; //Added the code for 22x.06 Defect 57766 - Starts/Ends
	//Added the code for Defect 49698 - Spec Reader Access Issue - Starts
	boolean hasAccess = false;
	boolean isContextPushed = false;
	//Added the code for Defect 49698 - Spec Reader Access Issue - Ends
	MapList objList = new MapList();
	MapList mlFilteredList=new MapList();
	String strCharInheritanceType = "";
	String strRelName ="";
	String strPartFamilyName = DomainConstants.EMPTY_STRING;
	String partType=null;
	int iTMSize=0;
	MapList newMapList = new MapList();
	StringList objectSelects = new StringList();
	String strSource="";
	MapList charList=new MapList();
	Map charMap=null;
	String strPartType = (String)mpObjectCommon.get(DomainConstants.SELECT_TYPE);
	String strPartId = (String)mpObjectCommon.get(DomainConstants.SELECT_ID);
	
	StringList strCharList = new StringList();
	StringList slSelect=new StringList();
	slSelect.addElement(DomainConstants.SELECT_ID);
	slSelect.addElement(DomainConstants.SELECT_TYPE);
	slSelect.addElement(DomainConstants.SELECT_NAME);
	//Start modified for 22x Changes for Material Library/Family Auto Name Change
	slSelect.add(DomainConstants.SELECT_ATTRIBUTE_TITLE);
	//End modified for 22x Changes for Material Library/Family Auto Name Change
	StringList strFinalList = new StringList();
	objectSelects.add(DomainConstants.SELECT_ID);
	objectSelects.add(DomainConstants.SELECT_CURRENT);
	objectSelects.add(DomainConstants.SELECT_NAME);
	objectSelects.add(DomainConstants.SELECT_TYPE);
	objectSelects.add(DomainConstants.SELECT_DESCRIPTION);
	objectSelects.add(DomainConstants.SELECT_REVISION);
	objectSelects.add(pgV3Constants.SELECT_ATTRIBUTE_TITLE);
	//Defect #30522
	objectSelects.add("type.kindof["+CommonDocument.TYPE_DOCUMENTS+"]");
	//Added the code for defect Id :30015 - data displayed in family care report Specs and Docs sheet doesn't match the value in UI - Starts
	objectSelects.add("format.file.name");
	objectSelects.add(ACTIVE_FILES); //Added the code for 22x.06 Defect 57766 - Starts/Ends
	objectSelects.addElement("attribute["+ATTR_PG_CSS_TYPE+"]");
	//Added the code for defect Id :30015 - data displayed in family care report Specs and Docs sheet doesn't match the value in UI - Ends
	String strDisplaySource=DomainConstants.EMPTY_STRING;
	StringList relSelects = new StringList(1);
	relSelects.add(CommonDocument.SELECT_RELATIONSHIP_ID);
	String relPattern =DomainConstants.RELATIONSHIP_REFERENCE_DOCUMENT;
	//Added the code for Defect 49698 - Spec Reader Access Issue - Starts
	try {
	if(SPECREADER.equalsIgnoreCase(strOriginatingSource)) {
			hasAccess = accessCheck(context, strUserName, (String)doObj.getInfo(context, DomainConstants.SELECT_ID));
		if(hasAccess) {
				//Pushing User Agent Context to get the Data if the Spec Reader User have access
				ContextUtil.pushContext(context,PropertyUtil.getSchemaProperty(context,"User Agent"),DomainConstants.EMPTY_STRING,DomainConstants.EMPTY_STRING);
				isContextPushed = true;
				
			}
		}
	//Added the code for Defect 49698 - Spec Reader Access Issue - Ends
	String masterCurState = doObj.getInfo(context,"current");
	String relWhere = null;	
	//Code-Fix for Defect 24443 (DSM Report bug pgIPMDocument objects  showing with Revision = Rendition) --Start
	//Code-Fix for Defect 28681- ILST issue for CM and Supplier View --Starts
	//String sBusWhereExpression = "(revision != Rendition) && (type != pgPerformanceCharacteristic)";
	String sBusWhereExpression = DomainConstants.EMPTY_STRING;
	//Updated code for defect id: 32743 (removed type pgArtWork)--Starts
	if (strPartType.equalsIgnoreCase("POA"))
	{
	//Updated code for defect id: 32743 (removed type pgArtWork)--Ends
		sBusWhereExpression = "";
	} else {
		sBusWhereExpression = "(revision != Rendition)";
	}
	//Code-Fix for Defect 28681- ILST issue for CM and Supplier View --Ends
	objList = doObj.getRelatedObjects(context, relPattern, "*",	objectSelects, relSelects, false, true, (short) 1, sBusWhereExpression,	null , 0);	
		
	//Code-Fix for Defect 24443 (DSM Report bug pgIPMDocument objects  showing with Revision = Rendition) --End
	Iterator objListItr = objList.iterator(); 
	//Added for defect 44566 Jan22_CW Starts
	String strLanguage = "";
	String strCSSOrDSO = "";
	String strAttrpgCSSType = "";
	String strRev = "";
	//Added for defect 44566 Jan22_CW Ends
	while (objListItr.hasNext()) {
		Map mpObjects = (Map) objListItr.next();
		String strObjId=(String)mpObjects.get(DomainConstants.SELECT_ID);
		String strObjName=(String)mpObjects.get(DomainConstants.SELECT_NAME);
		String strIsDocumentType=(String)mpObjects.get("type.kindof["+CommonDocument.TYPE_DOCUMENTS+"]");
		String strFileName = "";
		String strActiveFileName = ""; //Added the code for 22x.06 Defect 57766 - Starts/Ends
		if (strIsDocumentType.equalsIgnoreCase("true")) {				
			/** if (mpObjects.get("format.file.name") != null) {							
				if (mpObjects.get("format.file.name") instanceof StringList){
					strFileName = mpObjects.get("format.file.name").toString();
					strFileName = strFileName.replace("[", " ").replace("]", " ");
				} else	{
					strFileName = (String) mpObjects.get("format.file.name").toString();
				}
			} **/
			//Added the code for 22x.06 Defect 57766 - Starts
			if (mpObjects.get(ACTIVE_FILES) != null) {							
				if (mpObjects.get(ACTIVE_FILES) instanceof StringList){
					strActiveFileName = mpObjects.get(ACTIVE_FILES).toString();
					strActiveFileName = strActiveFileName.replace("[", " ").replace("]", " ");
				} else	{
					strActiveFileName =  mpObjects.get(ACTIVE_FILES).toString();
				}
			}
			mpObjects.put("FileName",strActiveFileName);	
			//Added the code for 22x.06 Defect 57766 - Ends
			DomainObject doObjSpec=DomainObject.newInstance(context,strObjId);
			mpObjects.put("CommonColumns", mpObjectCommon);
			try {
				// Get the Relationship name using Schema Property				

				mpObjects.put("PartFamilyName", strPPartFamilyName); // Added by DSM Reports (Sogeti) for 22x.04 (Dec CW 2023) Defect 56156 - START/END
				String strTypeCharacteristics = PropertyUtil.getSchemaProperty(context, "type_Characteristic");
				strSource = "Direct";
				StringList slSelects=new StringList();
				slSelects.addElement(DomainConstants.SELECT_ID);
				slSelects.addElement(DomainConstants.SELECT_TYPE);
				String strType = "";
				String strFinalType = "";
				charList = doObjSpec.getRelatedObjects(context, DomainConstants.RELATIONSHIP_REFERENCE_DOCUMENT, strTypeCharacteristics, slSelects, null, false, true, (short)1, null, null, 0);
				if(charList!=null && !charList.isEmpty()){
					Iterator charListIterator = charList.iterator();
					while(charListIterator.hasNext()){
						charMap = (Map)charListIterator.next();
						strType = (String)charMap.get(DomainConstants.SELECT_TYPE);
						int n = strType.lastIndexOf(" ");
						if(n>=0)
						{
						strType = strType.substring(0, n);
						}
						if(!strCharList.contains(strType)){
							strCharList.addElement(strType);
						}
					}
					if(strCharList.size()>1){
						for(int i=0;i<strCharList.size();i++){
							strFinalType = strFinalType+","+strCharList.get(i);
						}
						strFinalType = strFinalType.substring(1,strFinalType.length());
					} else {
						strFinalType = (String)strCharList.get(0);
					}
					strDisplaySource=strFinalType;
					strCharList.clear();
					strFinalType = "";
				} else {
					strDisplaySource=strSource;
				}
			} catch (Exception e) {
				e.printStackTrace();
				
			}
			mpObjects.put("Source", strDisplaySource);
			//Updated for defect 44566 Jan22_CW Starts
			strCSSOrDSO = (String) mpObjectCommon.get(pgV3Constants.SELECT_ATTRIBUTE_PGORIGINATINGSOURCE);
			strAttrpgCSSType = (String) mpObjects.get(pgV3Constants.SELECT_ATTRIBUTE_PGCSSTYPE);
			strLanguage="";
			if(strCSSOrDSO.contains("CSS")) {
				strRev = (String) mpObjects.get(DomainConstants.SELECT_REVISION);
				strLanguage = getLanguage(context,strRev);
				
			}else if(!strCSSOrDSO.contains("CSS")) {
				strLanguage=  getDocumentLanguage(context,doObjSpec);
			}
			//Updated for defect 44566 Jan22_CW Ends
			mpObjects.put("Language", strLanguage);
			mlFilteredList.add(mpObjects);	
			}
		}
		mlFilteredList.sort();
		//Added the code for Defect 49698 - Spec Reader Access Issue - Starts
	}catch(Exception e) {
		outLog.print("Exception in the getRelatedSpecsDocsRefDoc Method "+e+"\n");
		outLog.flush();
	}finally {
		if(isContextPushed) {
			ContextUtil.popContext(context);	
		}
		//Added the code for Defect 49698 - Spec Reader Access Issue - Ends
	}
		
		////Added the code for Defect 49698 - Spec Reader Access Issue - Ends
		return mlFilteredList;
	}
	// Code for Specs Docs

private String getDocumentLanguage(Context context, DomainObject domainObject) throws Exception{	
	String strDocId=null;
	String strLanguage=DomainConstants.EMPTY_STRING; 
	try{
		String TYPE_TRANSLATION_FILE = PropertyUtil.getSchemaProperty(context,"type_pgPKGTranslationFile");
		String ATTRIBUTE_pgLanguage = PropertyUtil.getSchemaProperty("attribute_pgLanguage");
		String ATTRIBUTE_Language = PropertyUtil.getSchemaProperty("attribute_Language");
		int objectListSize = 0 ;
		if((domainObject.isKindOf(context,TYPE_TRANSLATION_FILE))){
			strLanguage = domainObject.getAttributeValue(context,ATTRIBUTE_pgLanguage);
		} else {
			strLanguage = domainObject.getAttributeValue(context,ATTRIBUTE_Language);
		}
	}
	catch (Exception ex){
		throw ex;
	} finally{ 
		return  strLanguage;
	}
}
	// Code for Specs Docs

	// Code for Specs Docs
private String getSpecificationSubtype(Context context, DomainObject productObject) throws Exception {
	String  strSubType = "";
	String sRelpgPDTemplatestopgPLIAssemblyType = PropertyUtil.getSchemaProperty(context, "relationship_pgPDTemplatestopgPLIAssemblyType");
	String sAttbPgOriginatingSource = PropertyUtil.getSchemaProperty(context, "attribute_pgOriginatingSource");
	String sAttbPgCSSType = PropertyUtil.getSchemaProperty(context, "attribute_pgCSSType");
	try{
		StringList slSelectable = new StringList();
		slSelectable.addElement("attribute["+sAttbPgOriginatingSource+"]");
		slSelectable.addElement("attribute["+sAttbPgCSSType+"]");
		slSelectable.addElement("attribute["+ATTR_PG_ASSEMBLY_TYPE+"]");
		slSelectable.addElement(DomainConstants.SELECT_ID);
		Map<String, String> mpSelectableMap = productObject.getInfo(context, slSelectable);
		if(mpSelectableMap != null && !mpSelectableMap.isEmpty()){
			String strOriginatingSource = mpSelectableMap.get("attribute["+sAttbPgOriginatingSource+"]");
			String strSpecObjectId = mpSelectableMap.get(DomainConstants.SELECT_ID);
			if(UIUtil.isNotNullAndNotEmpty(strOriginatingSource) && "DSO".equalsIgnoreCase(strOriginatingSource)){
				String sSpecSubType = mpSelectableMap.get("attribute["+ATTR_PG_ASSEMBLY_TYPE+"]");
				if (UIUtil.isNotNullAndNotEmpty(sSpecSubType)){
					strSubType=sSpecSubType;
				}
			} else {
				String strCSSType = getQualitySpecificationSubType(context,productObject);
				if(strCSSType != null){
					strSubType=strCSSType;
				}
			}
		}
	} catch(Exception e){
		e.printStackTrace();
	}
	return strSubType;
}
	
	
private String getQualitySpecificationSubType(Context context, DomainObject dObjQS) throws Exception {
	String strAttributeValue = "";
	try {
		String strSubtypeAttributeValue = (String)dObjQS.getAttributeValue(context,ATTR_PG_CSS_TYPE);
		if(strSubtypeAttributeValue.equalsIgnoreCase("AMAT"))
		{
			strAttributeValue = "Approval Matrix";
		} else if (strSubtypeAttributeValue.equalsIgnoreCase("QAC")) {
			strAttributeValue = "Quality Acceptance Criteria";
		} else if(strSubtypeAttributeValue.equalsIgnoreCase("RMPI")){
			strAttributeValue = "Raw Material Plant Instruction";
		} else if(strSubtypeAttributeValue.equalsIgnoreCase("CBA")){
			strAttributeValue = "Current Best Approach";
		} else if(strSubtypeAttributeValue.equalsIgnoreCase("GPMS")) {
			strAttributeValue = "General Packaging Material Specification";
		} else if(strSubtypeAttributeValue.equalsIgnoreCase("GPS")){
			strAttributeValue = "General Packing Standard";
		} else if(strSubtypeAttributeValue.equalsIgnoreCase("IAS")) {
			strAttributeValue = "Incoming Acceptance Specification";
		} else if(strSubtypeAttributeValue.equalsIgnoreCase("MOC")) {
				strAttributeValue = "Material of Construction";
		} else if("TAMU".equalsIgnoreCase(strSubtypeAttributeValue)) {
            //Updated code for defect id 34908 Starts
			strAttributeValue = "TAMU";
			//Updated code for defect id 34908 Ends
	}
		
	} catch(Exception e){
		e.printStackTrace();
	}
	return strAttributeValue;
}
	// Code for Specs Docs

//Added strSelectedTabs in args for Requirement Id:33635
//Added mlBatteryRollUp in args for 2018x6.1 Oct CW req 39692
//Need exception for Parameters - It is old code
private void createExcelWorkbook(Context context, MapList  mlWeightCharacteristics,MapList mlPlants,MapList mlAttribute, MapList mlPerformanceCharacteristicsAll,MapList mlCompMaterials,MapList mlPeerReviewTask,MapList mlParentChildBOM,MapList mlWeightsAndDim,MapList mlIpClassAll,MapList mlCompEquiDetails,MapList mlSpecsDocsAll,MapList mlSpecsRefDocsAll,MapList mlMasterSpecAll,String strUserName, MapList mlApprove, MapList mlProducingFormulaAll,String strReportFileName,String strReportObjectId,MapList mlSubstanceAndMaterials,MapList mlViewSubstituteDetails,MapList mlNotes,MapList mlFormulaIngredient,MapList mlSAPBOM, MapList mlParentChildEBOMWD,MapList mlGPSAssessments,MapList mlCountryClearance, MapList mlMarketOfSale, MapList mlMOSCompDetails, MapList mlCompEquiDetailsMEP, MapList mlMEPSEPCertification, MapList mlPartCerti, MapList mlAlternate, MapList mlMaterialsAndCompositions, String strSelectedTabs, Map<String,String> mPassValue, MapList mlBatteryRollUp, MapList mlCharacteristics,MapList mlDesignParameter,MapList mlChemPhysicalProperties,MapList mlSustainability,MapList mlDGClassification,MapList mlSubstitutePartsIn) {
						
	try {
	String sStringResourceFile="emxCPNStringResource"; 
	String sResourceFile = EMXCPN;
	String sLanguage = context.getSession().getLanguage();
	//Added code for 2018x.6 Requirement id 36701 Generate Part and Specs report directly Starts
	String strReportPath= DomainConstants.EMPTY_STRING;
	String strRealTimeProcess = mPassValue.get(REALTIMEPROCESS);
	String strHyperlink = mPassValue.get(HYPERLINKASINPUT);
	if(UIUtil.isNotNullAndNotEmpty(strRealTimeProcess) && pgV3Constants.TRUE.equalsIgnoreCase(strRealTimeProcess))
		strReportPath = EnoviaResourceBundle.getProperty(context, EMXCPN, context.getLocale(),"emxCPN.PartAndSpecificationReport.Worksheet.FilePath");
	else
		strReportPath = EnoviaResourceBundle.getProperty(context, EMXCPN, context.getLocale(),"emxCPN.PartAndSpecCTRLMJob.Worksheet.FilePath");
	
	//Added code for 2018x.6 Requirement id 36701 Generate Part and Specs report directly Ends
	String strReportName=i18nNow.getI18nString("emxCPN.FamilyCareReport.ReportName",sStringResourceFile, sLanguage);
	String strReportExtension =i18nNow.getI18nString("emxCPN.FamilyCareReport.ReportExtension",sStringResourceFile, sLanguage);
	String strSheetTableWeight= i18nNow.getI18nString("emxCPN.FamilyCareReport.Worksheet.Name.TablesWeight",sStringResourceFile, sLanguage);	
	String strSheetPlants= i18nNow.getI18nString("emxCPN.FamilyCareReport.Worksheet.Name.Plants",sStringResourceFile, sLanguage);
	String strSheetAttribute= i18nNow.getI18nString("emxCPN.FamilyCareReport.Worksheet.Name.Attribute",sStringResourceFile, sLanguage);
	String strSheetTablePerformance= i18nNow.getI18nString("emxCPN.FamilyCareReport.Worksheet.Name.PerformanceCharacteristics",sStringResourceFile, sLanguage);
	String strComponentMaterials= i18nNow.getI18nString("emxCPN.FamilyCareReport.Worksheet.Name.ComponentMaterials",sStringResourceFile, sLanguage);
	String strPeerReview= i18nNow.getI18nString("emxCPN.FamilyCareReport.Worksheet.Name.PeerReview",sStringResourceFile, sLanguage);
	String strApprove= i18nNow.getI18nString("emxCPN.FamilyCareReport.Worksheet.Name.Approve",sStringResourceFile, sLanguage);
	String strSheetBOM= i18nNow.getI18nString("emxCPN.FamilyCareReport.Worksheet.Name.BOM",sStringResourceFile, sLanguage);
	String strSheetWeightAndDim= i18nNow.getI18nString("emxCPN.FamilyCareReport.Worksheet.Name.WeightsAndDimensions",sStringResourceFile, sLanguage);
	//Added code for Requirement id 46223 - IP & Export Control Tab in Part & Spec Reports - Starts
	String strSheetIPAndExportControl=i18nNow.getI18nString("emxCPN.FamilyCareReport.Worksheet.Name.IPAndExportControl",sStringResourceFile, sLanguage);
	//Added code for Requirement id 46223 - IP & Export Control Tab in Part & Spec Reports - Ends
	String strCompEquivalent=i18nNow.getI18nString("emxCPN.FamilyCareReport.Worksheet.Name.ComponentEquivalents",sStringResourceFile, sLanguage);
	String strSheetSpecsDocs= i18nNow.getI18nString("emxCPN.FamilyCareReport.Worksheet.Name.SpecsDocs",sStringResourceFile, sLanguage);
	String strSheetProducingFormula= i18nNow.getI18nString("emxCPN.FamilyCareReport.Worksheet.ProducingFormula.Name",sStringResourceFile, sLanguage);
		
	//Added For DSM Report 2018x1.1 Scope : 3 - Report shall include full set of dimensions of master part in Weights And Dimensions Tab : Starts
	String strSheetEBOMWeightAndDimentions = i18nNow.getI18nString("emxCPN.FamilyCareReport.Worksheet.Name.EBOMWeightAndDimentions",sStringResourceFile, sLanguage);  
	//Added For DSM Report 2018x1.1 Scope : 3 - Report shall include full set of dimensions of master part in Weights And Dimensions Tab : Ends
	
	//Added For DSM Report 2018x1.1 Scope : 1 - Report shall include Substances & Martials Tab for the parts/specs with Material Composition MCP : Starts
	String strSheetSubstancesAndMaterials = i18nNow.getI18nString("emxCPN.FamilyCareReport.Worksheet.Name.SubstancesAndMaterials",sStringResourceFile, sLanguage);
	//Added For DSM Report 2018x1.1 Scope : 1 - Report shall include Substances & Martials Tab for the parts/specs with Material Composition MCP : Ends
	
	//Added For DSM Report 2018x1.1 Scope : 1 - Report shall include Substances & Martials Tab for the parts/specs with Material Composition MCP : Starts
	//String strNotes = i18nNow.getI18nString("emxCPN.FamilyCareReport.Worksheet.Name.Notes",sStringResourceFile, sLanguage);
	String strNotes = "Notes";
	//Added For DSM Report 2018x1.1 Scope : 1 - Report shall include Substances & Martials Tab for the parts/specs with Material Composition MCP : Ends
	
	//Added For DSM Report 2018x1.1 Scope :10 - Create new tab for FOP BOM Substitute : Starts
	String strSheetViewSubstitues = i18nNow.getI18nString("emxCPN.FamilyCareReport.Worksheet.Name.ViewSubstitutes",sStringResourceFile, sLanguage);
	//Added For DSM Report 2018x1.1 Scope :10 - Create new tab for FOP BOM Substitute : Ends
	
	//Added code for Requirement Id:29012-The report shall include new tab For FOP-Formula Ingredient-Starts
	String strSheetFormulaIngredient = i18nNow.getI18nString("emxCPN.FamilyCareReport.Worksheet.Name.FormulaIngredient",sStringResourceFile, sLanguage);
	//Added code for Requirement Id:29012-The report shall include new tab For FOP-Formula Ingredient-Ends
	
	//Added code for Reqirement Id:31275-The report shall include new tab for SAP BOM As Fed-Starts
	String strSAPBOM = i18nNow.getI18nString("emxCPN.FamilyCareReport.Worksheet.Name.SAPBOMASFed",sStringResourceFile, sLanguage);
	//Added code for Reqirement Id:31275-The report shall include new tab for SAP BOM As Fed-Ends
	
	//Added code for Reqirement Id:31965- 2018x.3 -The report shall include new Tab for GPS Assessment-Starts
	String strGPSAssessments = i18nNow.getI18nString("emxCPN.FamilyCareReport.Worksheet.Name.GPSAssesments",sStringResourceFile, sLanguage);
	//Added code for Reqirement Id:31965- 2018x.3 -The report shall include new Tab for GPS Assessment-Starts
	
	//Added code for Reqirement Id:31275-The report shall include new tab for SAP BOM As Fed-Starts
	String strCountryClerance = i18nNow.getI18nString("emxCPN.FamilyCareReport.Worksheet.Name.CountryClerance",sStringResourceFile, sLanguage);
	//Added code for Reqirement Id:31275-The report shall include new tab for SAP BOM As Fed-Ends
	
	//Added code for Reqirement Id:31275-The report shall include new tab for SAP BOM As Fed-Starts
	String strMarketOfSale = i18nNow.getI18nString("emxCPN.FamilyCareReport.Worksheet.Name.MarketOfSale",sStringResourceFile, sLanguage);
	
	String strMOSCompDetails = i18nNow.getI18nString("emxCPN.FamilyCareReport.Worksheet.Name.MOSCompDetails",sStringResourceFile, sLanguage); //Added by DSM for 22x CW-05 for Requirement 49721  -changes for DSM Reports MOS Components - START/END
	
	//Added code for Reqirement Id:31275-The report shall include new tab for SAP BOM As Fed-Ends

	//Added code for Reqirement Id:31275-The report shall include new tab for SAP BOM As Fed-Starts
	String strMEPSEP = i18nNow.getI18nString("emxCPN.FamilyCareReport.Worksheet.Name.MEPSEP",sStringResourceFile, sLanguage);
	//Added code for Reqirement Id:31275-The report shall include new tab for SAP BOM As Fed-Ends
	
	//Added code for Req Id : 33655 New Tab : MEP-SEP Certification--Starts
	String strMEPSEPCertification = i18nNow.getI18nString("emxCPN.FamilyCareReport.Worksheet.Name.MEPSEPCertification",sStringResourceFile, sLanguage);
	//Added code for Req Id : 33655 New Tab : MEP-SEP Certification--Ends
	
	//Added code for Req Id : 34226 New Tab : Part Certification--Starts
	String strPartCertification = i18nNow.getI18nString("emxCPN.FamilyCareReport.Worksheet.Name.PartCertification",sStringResourceFile, sLanguage);
	//Added code for Req Id : 34226 New Tab : Part Certification--Ends
	
	//Added code for Req Ids: 34946, 34306, 34307, 34308, 34309, 34311, 34312, 34313, 34314 New Tab: Alternates--Starts
	String strAlternate = i18nNow.getI18nString("emxCPN.FamilyCareReport.Worksheet.Name.Alternate",sStringResourceFile, sLanguage);
	//Added code for Req Ids: 34946, 34306, 34307, 34308, 34309, 34311, 34312, 34313, 34314 New Tab: Alternates--Ends
	
		//Added code for Reqirement Id: 34941 New Tab: Materials & Composition--Starts
		String strMaterialsAndComposition = i18nNow.getI18nString("emxCPN.FamilyCareReport.Worksheet.Name.MaterialsAndComposition",sStringResourceFile, sLanguage);
		//Added code for Reqirement Id: 34941 New Tab: Materials & Composition--Ends
	//Added code for 2018x6.1 Oct CW requirement 39692 Add new tab Battery Rollup in Part and Spec report Starts
	String strSheetBatteryRollup = EnoviaResourceBundle.getProperty(context, EMXCPN, context.getLocale(),"emxCPN.FamilyCareReport.Worksheet.Name.BatteryRollup");
	//Added code for 2018x6.1 Oct CW requirement 39692 Add new tab Battery Rollup in Part and Spec report Ends
	//Added code for 2018x6.1 Oct CW requirement 40223 Starts
	String strSheetCharacteristics = EnoviaResourceBundle.getProperty(context, EMXCPN, context.getLocale(),"emxCPN.FamilyCareReport.Worksheet.Name.Characteristics");
	//Added code for 2018x6.1 Oct CW requirement 40223 Ends
	//Added code for 2018x6.1 Oct CW requirement 40224 Starts
	String strSheetDesignParameter = EnoviaResourceBundle.getProperty(context, EMXCPN, context.getLocale(),"emxCPN.FamilyCareReport.Worksheet.Name.DesignParameter");
	//Added code for 2018x6.1 Oct CW requirement 40224 Ends
	//Added code for 2018x6.1 Oct CW requirement 40942 Starts
	String strSheetChemPhysicalProp = EnoviaResourceBundle.getProperty(context, EMXCPN, context.getLocale(),"emxCPN.FamilyCareReport.Worksheet.Name.ChemPhysicalProperties");
	//Added code for 2018x6.1 Oct CW requirement 40942 Ends
	//Added code for Apr22 CW requirement 41600 Starts
	String strSheetSustainibility = EnoviaResourceBundle.getProperty(context, EMXCPN, context.getLocale(),"emxCPN.FamilyCareReport.Worksheet.Name.Sustainibility");
	//Added code for Apr22 CW requirement 41600 Ends
	//Added for 2018x.6 May22 CW requirement 41969-Starts 
	String strSheetDGClassification = EnoviaResourceBundle.getProperty(context, EMXCPN, context.getLocale(),"emxCPN.FamilyCareReport.Worksheet.Name.DGClassification");
	//Added for 2018x.6 May22 CW requirement 41969-Ends
	//Added the code for 22x FebCW Requirement 45443 - Starts
	String strSheetSubstitutePartsIn = EnoviaResourceBundle.getProperty(context, EMXCPN, context.getLocale(),"emxCPN.FamilyCareReport.Worksheet.Name.SubstitutePartsIn");
	//Added the code for 22x FebCW Requirement 45443 - Ends
	
	XSSFWorkbook workbook = new XSSFWorkbook();	
	
	// Added by DSM Reports (Sogeti) for 22x.03 (August CW 2023) Defect 54091 - Start
    XSSFCellStyle styleGlobal = workbook.createCellStyle(); 
    // Added by DSM Reports (Sogeti) for 22x.03 (August CW 2023) Defect 54091 - End
    
	boolean bHasSupplierAccess = isSupplierEBP(context, strUserName);
	//Updated code for Requirement Id:33635 -The report should only show tabs which user selected as the input--Starts
		if(strSelectedTabs.contains(TAB_ATTRIBUTES)){
			outLog.print("updating Worksheet TAB_ATTRIBUTES Tab\n");
			outLog.flush();
			// 1 Sheet Creation for Attribute
			XSSFSheet sheetAttribute = workbook.createSheet(strSheetAttribute);
			XSSFRow rowHeaderAttribute = sheetAttribute.createRow(0);
			//Cell Style for Performance Characteristic --Begin
			XSSFCellStyle cellStyleAttribute = sheetAttribute.getWorkbook().createCellStyle();
			XSSFFont xsfontAttr = sheetAttribute.getWorkbook().createFont();
			xsfontAttr.setBold(true);
			xsfontAttr.setFontHeightInPoints((short) 12);
			cellStyleAttribute.setFont(xsfontAttr);
			cellStyleAttribute.setFillForegroundColor(IndexedColors.PALE_BLUE.getIndex());			
			cellStyleAttribute.setFillPattern(FillPatternType.SOLID_FOREGROUND);
			//Cell Style for Performance Characteristic --End
			//Updated code for 2018x.6 Requirement id 36700 Ability to generate Part and Spec report with without hyperlink Starts
            // Modified by DSM Reports (Sogeti) for 22x.03 (August CW 2023) Defect 54091 - Start
			//Need an Exception as it is an existing method 
            updateWorksheetAttribute(context, workbook, rowHeaderAttribute, cellStyleAttribute, mlAttribute, sheetAttribute, strHyperlink, styleGlobal);
            // Modified by DSM Reports (Sogeti) for 22x.03 (August CW 2023) Defect 54091 - End
			//Updated code for 2018x.6 Requirement id 36700 Ability to generate Part and Spec report with without hyperlink Ends
			outLog.print("updateWorksheet TAB_ATTRIBUTES \n");
			outLog.flush();
		} 
	//Added code for Requirement #34946, 34306, 34307, 34308, 34309, 34311, 34312, 34313, 34314 New Tab: Alternates--Starts
	 if(strSelectedTabs.contains(TAB_ALTERNATE)){
	 	outLog.print("updating Worksheet TAB_ALTERNATE \n");
		outLog.flush();
		//24 Sheet Creation for Market of Sale
		XSSFSheet sheetAlternate = workbook.createSheet(strAlternate);			
		XSSFRow rowHeaderAlternate = sheetAlternate.createRow(0);
		XSSFCellStyle cellStyleAlternate = sheetAlternate.getWorkbook().createCellStyle();
		XSSFFont fontAlternate = sheetAlternate.getWorkbook().createFont();
		fontAlternate.setBold(true);
		fontAlternate.setFontHeightInPoints((short) 12);
		cellStyleAlternate.setFont(fontAlternate);	
		cellStyleAlternate.setFillForegroundColor(IndexedColors.PALE_BLUE.getIndex());			
		cellStyleAlternate.setFillPattern(FillPatternType.SOLID_FOREGROUND);			
		//Updated code for 2018x.6 Requirement id 36700 Ability to generate Part and Spec report with without hyperlink Starts
		// Modified by DSM Reports (Sogeti) for 22x.03 (August CW 2023) Defect 54091 - Start
		//Need an Exception as it is an existing method 
        updateWorksheetAlternate(context, workbook, rowHeaderAlternate, cellStyleAlternate, mlAlternate, sheetAlternate, strHyperlink, styleGlobal);
        // Modified by DSM Reports (Sogeti) for 22x.03 (August CW 2023) Defect 54091 - End
		//Updated code for 2018x.6 Requirement id 36700 Ability to generate Part and Spec report with without hyperlink Ends
		//Added code for Requirement #34946, 34306, 34307, 34308, 34309, 34311, 34312, 34313, 34314 New Tab: Alternates--Ends
	}
	 if(strSelectedTabs.contains(TAB_APPROVE)){
			outLog.print("updating Worksheet TAB_APPROVE \n");
			outLog.flush();
			// 10 Sheet Creation for Approve
			XSSFSheet sheetApprove = workbook.createSheet(strApprove);			
			XSSFRow rowHeaderApprove = sheetApprove.createRow(0);
			//Cell Style for Approve --Begin	
			XSSFCellStyle cellStyleApprove = sheetApprove.getWorkbook().createCellStyle();
			XSSFFont fontApprove = sheetApprove.getWorkbook().createFont();
			fontApprove.setBold(true);
			fontApprove.setFontHeightInPoints((short) 12);
			cellStyleApprove.setFont(fontApprove);	
			cellStyleApprove.setFillForegroundColor(IndexedColors.PALE_BLUE.getIndex());			
			cellStyleApprove.setFillPattern(FillPatternType.SOLID_FOREGROUND);
			//Cell Style for Approve --End	
			//Updated code for 2018x.6 Requirement id 36700 Ability to generate Part and Spec report with without hyperlink Starts
			// Modified by DSM Reports (Sogeti) for 22x.03 (August CW 2023) Defect 54091 - Start
			//Need an Exception as it is an existing method 
            updateWorksheetPeerApprove(context, workbook, rowHeaderApprove, cellStyleApprove, mlApprove, sheetApprove, strHyperlink, styleGlobal);
            // Modified by DSM Reports (Sogeti) for 22x.03 (August CW 2023) Defect 54091 - End
			//Updated code for 2018x.6 Requirement id 36700 Ability to generate Part and Spec report with without hyperlink Ends
		}
	//Added code for 2018x6.1 Oct CW requirement 39692 Add new tab Battery Rollup in Part and Spec report Starts
	 if(strSelectedTabs.contains(TAB_BATTERYROLLUP)){
			outLog.print("updating Worksheet TAB_BATTERYROLLUP \n");
			outLog.flush();
			//6 Sheet Creation for Battery Roll Up
			XSSFSheet sheetBatteryRollup = workbook.createSheet(strSheetBatteryRollup);			
			XSSFRow rowHeaderBatteryRollup = sheetBatteryRollup.createRow(0);
			//Cell Style for Bill of Materials --Begin
			XSSFCellStyle cellStyleBatteryRollup = sheetBatteryRollup.getWorkbook().createCellStyle();		
			XSSFFont fontBatteryRollup = sheetBatteryRollup.getWorkbook().createFont();
			fontBatteryRollup.setBold(true);
			fontBatteryRollup.setFontHeightInPoints((short) 12);
			cellStyleBatteryRollup.setFont(fontBatteryRollup);			
			cellStyleBatteryRollup.setFillForegroundColor(IndexedColors.PALE_BLUE.getIndex());
			cellStyleBatteryRollup.setFillPattern(FillPatternType.SOLID_FOREGROUND);
			//Cell Style for Bill of Materials --End
			//Updated code for 2018x.6 Requirement id 36700 Ability to generate Part and Spec report with without hyperlink Starts
			// Modified by DSM Reports (Sogeti) for 22x.03 (August CW 2023) Defect 54091 - Start
			//Need an Exception as it is an existing method 
            updateWorksheetBatteryRollup(context, workbook, rowHeaderBatteryRollup, cellStyleBatteryRollup, mlBatteryRollUp, sheetBatteryRollup, strHyperlink, styleGlobal);
            // Modified by DSM Reports (Sogeti) for 22x.03 (August CW 2023) Defect 54091 - End
			//Updated code for 2018x.6 Requirement id 36700 Ability to generate Part and Spec report with without hyperlink Ends
		}
	 //Added code for 2018x6.1 Oct CW requirement 39692 Add new tab Battery Rollup in Part and Spec report Ends
	if(strSelectedTabs.contains(TAB_BOM)){
		outLog.print("updating Worksheet TAB_BOM \n");
		outLog.flush();
		//6 Sheet Creation for Bill Of Materials
		XSSFSheet sheetBOM = workbook.createSheet(strSheetBOM);			
		XSSFRow rowHeaderBOM = sheetBOM.createRow(0);
		//Cell Style for Bill of Materials --Begin
		XSSFCellStyle cellStyleBOM = sheetBOM.getWorkbook().createCellStyle();		
		XSSFFont fontBOM = sheetBOM.getWorkbook().createFont();
		fontBOM.setBold(true);
		fontBOM.setFontHeightInPoints((short) 12);
		cellStyleBOM.setFont(fontBOM);			
		cellStyleBOM.setFillForegroundColor(IndexedColors.PALE_BLUE.getIndex());
		cellStyleBOM.setFillPattern(FillPatternType.SOLID_FOREGROUND);
		//Cell Style for Bill of Materials --End
		//Updated code for 2018x.6 Requirement id 36700 Ability to generate Part and Spec report with without hyperlink Starts
		// Modified by DSM Reports (Sogeti) for 22x.03 (August CW 2023) Defect 54091 - Start
		//Need an Exception as it is an existing method 
        updateWorksheetBOM(context, workbook, rowHeaderBOM, cellStyleBOM, mlParentChildBOM, sheetBOM, strHyperlink, styleGlobal);
        // Modified by DSM Reports (Sogeti) for 22x.03 (August CW 2023) Defect 54091 - End
		//Updated code for 2018x.6 Requirement id 36700 Ability to generate Part and Spec report with without hyperlink Ends
	}
	if(strSelectedTabs.contains(TAB_CHARACTERISTICSAPOLLO)){
		outLog.print("updating Worksheet TAB_CHARACTERISTICSAPOLLO Tab\n");
		outLog.flush();
		XSSFSheet sheetCharacteristics = workbook.createSheet(strSheetCharacteristics);
		XSSFRow rowHeaderCharacteristics = sheetCharacteristics.createRow(0);
		XSSFCellStyle cellStyleChar = sheetCharacteristics.getWorkbook().createCellStyle();
		XSSFFont xsfontChar = sheetCharacteristics.getWorkbook().createFont();
		xsfontChar.setBold(true);
		xsfontChar.setFontHeightInPoints((short) 12);
		cellStyleChar.setFont(xsfontChar);
		cellStyleChar.setFillForegroundColor(IndexedColors.PALE_BLUE.getIndex());			
		cellStyleChar.setFillPattern(FillPatternType.SOLID_FOREGROUND);
		// Modified by DSM Reports (Sogeti) for 22x.03 (August CW 2023) Defect 54091 - Start
		//Need an Exception as it is an existing method 
        updateWorksheetCharacteristics(context, workbook, rowHeaderCharacteristics, cellStyleChar, mlCharacteristics, sheetCharacteristics, strHyperlink, styleGlobal);
        // Modified by DSM Reports (Sogeti) for 22x.03 (August CW 2023) Defect 54091 - End
		outLog.print("updateWorksheet TAB_CHARACTERISTICSAPOLLO \n");
		outLog.flush();
	}
	if(strSelectedTabs.contains(TAB_CHEMPHYSICALPROPERTIES)){
		outLog.print("updating Worksheet TAB_CHEMPHYSICALPROPERTIES Tab\n");
		outLog.flush();
		XSSFSheet sheetChemPhysicalProp = workbook.createSheet(strSheetChemPhysicalProp);
		XSSFRow rowHeaderChemPhysicalProp = sheetChemPhysicalProp.createRow(0);
		XSSFCellStyle cellStyleChemPhysicalProp = sheetChemPhysicalProp.getWorkbook().createCellStyle();
		XSSFFont xsfontChemPhysicalProp = sheetChemPhysicalProp.getWorkbook().createFont();
		xsfontChemPhysicalProp.setBold(true);
		xsfontChemPhysicalProp.setFontHeightInPoints((short) 12);
		cellStyleChemPhysicalProp.setFont(xsfontChemPhysicalProp);
		cellStyleChemPhysicalProp.setFillForegroundColor(IndexedColors.PALE_BLUE.getIndex());			
		cellStyleChemPhysicalProp.setFillPattern(FillPatternType.SOLID_FOREGROUND);
		// Modified by DSM Reports (Sogeti) for 22x.03 (August CW 2023) Defect 54091 - Start
		//Need an Exception as it is an existing method 
        updateWorksheetChemPhysicalProperties(context, workbook, rowHeaderChemPhysicalProp, cellStyleChemPhysicalProp, mlChemPhysicalProperties, sheetChemPhysicalProp, strHyperlink, styleGlobal);
        // Modified by DSM Reports (Sogeti) for 22x.03 (August CW 2023) Defect 54091 - End
		outLog.print("updateWorksheet TAB_CHEMPHYSICALPROPERTIES \n");
		outLog.flush();
	}
	if(strSelectedTabs.contains(TAB_DESIGNPARAMETER)){
		outLog.print("updating Worksheet TAB_DESIGNPARAMETER Tab\n");
		outLog.flush();
		XSSFSheet sheetDesignParameter = workbook.createSheet(strSheetDesignParameter);
		XSSFRow rowHeaderDesignParameter = sheetDesignParameter.createRow(0);
		XSSFCellStyle cellStyleDesignParameter = sheetDesignParameter.getWorkbook().createCellStyle();
		XSSFFont xsfontDesignParameter = sheetDesignParameter.getWorkbook().createFont();
		xsfontDesignParameter.setBold(true);
		xsfontDesignParameter.setFontHeightInPoints((short) 12);
		cellStyleDesignParameter.setFont(xsfontDesignParameter);
		cellStyleDesignParameter.setFillForegroundColor(IndexedColors.PALE_BLUE.getIndex());			
		cellStyleDesignParameter.setFillPattern(FillPatternType.SOLID_FOREGROUND);
		// Modified by DSM Reports (Sogeti) for 22x.03 (August CW 2023) Defect 54091 - Start
		//Need an Exception as it is an existing method 
        updateWorksheetDesignParameter(context, workbook, rowHeaderDesignParameter, cellStyleDesignParameter, mlDesignParameter, sheetDesignParameter, strHyperlink, styleGlobal);
        // Modified by DSM Reports (Sogeti) for 22x.03 (August CW 2023) Defect 54091 - End
		outLog.print("updateWorksheet TAB_DESIGNPARAMETER \n");
		outLog.flush();
	}
	//Added for 2018x.6 May22 CW requirement 41969-Starts
	if(strSelectedTabs.contains(TAB_DGCLASSIFICATION)){
		XSSFSheet sheetDGClassification = workbook.createSheet(strSheetDGClassification);
		XSSFRow rowHeaderDGClassification = sheetDGClassification.createRow(0);
		XSSFCellStyle cellStyleDGClassification = sheetDGClassification.getWorkbook().createCellStyle();
		XSSFFont xsfontDesignParameter = sheetDGClassification.getWorkbook().createFont();
		xsfontDesignParameter.setBold(true);
		xsfontDesignParameter.setFontHeightInPoints((short) 12);
		cellStyleDGClassification.setFont(xsfontDesignParameter);
		cellStyleDGClassification.setFillForegroundColor(IndexedColors.PALE_BLUE.getIndex());			
		cellStyleDGClassification.setFillPattern(FillPatternType.SOLID_FOREGROUND);
		// Modified by DSM Reports (Sogeti) for 22x.03 (August CW 2023) Defect 54091 - Start
		//Need an Exception as it is an existing method 
        updateWorksheetDGClassification(context, workbook, rowHeaderDGClassification, cellStyleDGClassification, mlDGClassification, sheetDGClassification, strHyperlink, styleGlobal);
        // Modified by DSM Reports (Sogeti) for 22x.03 (August CW 2023) Defect 54091 - End
	}
	//Added for 2018x.6 May22 CW requirement 41969-Ends
	
	if(strSelectedTabs.contains(TAB_EBOMWD)){
		outLog.print("updating Worksheet TAB_EBOMWD \n");
		outLog.flush();
		//Added For DSM Report 2018x1.1 Scope : 3 - Report shall include full set of dimensions of master part in Weights And Dimensions Tab : Starts
		// 12 Sheet Creation for EBOM Weight And Dimentions
		XSSFSheet sheetEBOMWeightAndDimentions = workbook.createSheet(strSheetEBOMWeightAndDimentions);			
		XSSFRow rowHeaderEBOMWeightAndDimensions = sheetEBOMWeightAndDimentions.createRow(0);
		//Cell Style for EBOM Weight And Dimentions --Begin
		XSSFCellStyle cellStyleEBOMWeightAndDimentions = sheetEBOMWeightAndDimentions.getWorkbook().createCellStyle();		
		XSSFFont fontEBOMWeightAndDimentions = sheetEBOMWeightAndDimentions.getWorkbook().createFont();
		fontEBOMWeightAndDimentions.setBold(true);
		fontEBOMWeightAndDimentions.setFontHeightInPoints((short) 12);
		cellStyleEBOMWeightAndDimentions.setFont(fontEBOMWeightAndDimentions);			
		cellStyleEBOMWeightAndDimentions.setFillForegroundColor(IndexedColors.PALE_BLUE.getIndex());
		cellStyleEBOMWeightAndDimentions.setFillPattern(FillPatternType.SOLID_FOREGROUND);
		//Cell Style for EBOM Weight And Dimentions  --End
		//Updated code for 2018x.6 Requirement id 36700 Ability to generate Part and Spec report with without hyperlink Starts
		// Modified by DSM Reports (Sogeti) for 22x.03 (May CW 2023) Defect 49457 - Start
		// Modified by DSM Reports (Sogeti) for 22x.03 (August CW 2023) Defect 54091 - Start
		//Need an Exception as it is an existing method 
        updateWorksheetEBOMWeightAndDimensions(context, workbook, rowHeaderEBOMWeightAndDimensions, cellStyleEBOMWeightAndDimentions, mlParentChildEBOMWD, sheetEBOMWeightAndDimentions, strHyperlink, strUserName, styleGlobal);
        // Modified by DSM Reports (Sogeti) for 22x.03 (August CW 2023) Defect 54091 - End
		// Modified by DSM Reports (Sogeti) for 22x.03 (May CW 2023) Defect 49457 - End
		//Updated code for 2018x.6 Requirement id 36700 Ability to generate Part and Spec report with without hyperlink Ends
		//Added For DSM Report 2018x1.1 Scope : 3 - Report shall include full set of dimensions of master part in Weights And Dimensions Tab : Ends	
	}
	if(strSelectedTabs.contains(TAB_FOPINGREDIENT)){
		outLog.print("updating Worksheet TAB_FOPINGREDIENT \n");
		outLog.flush();
		//Added code for Requirement Id:29012-The report shall include new tab For FOP-Formula Ingredient-Starts
		//15 Sheet Creation for Formula Ingredient
		XSSFSheet sheetFormulaIngredient = workbook.createSheet(strSheetFormulaIngredient);			
		XSSFRow rowHeaderFormulaIngredient = sheetFormulaIngredient.createRow(0);
		//Cell Style for Formula Ingredient --Begin
		XSSFCellStyle cellStyleFormulaIngredient = sheetFormulaIngredient.getWorkbook().createCellStyle();
		XSSFFont fontFormulaIngredient = sheetFormulaIngredient.getWorkbook().createFont();
		fontFormulaIngredient.setBold(true);
		fontFormulaIngredient.setFontHeightInPoints((short) 12);
		cellStyleFormulaIngredient.setFont(fontFormulaIngredient);	
		cellStyleFormulaIngredient.setFillForegroundColor(IndexedColors.PALE_BLUE.getIndex());			
		cellStyleFormulaIngredient.setFillPattern(FillPatternType.SOLID_FOREGROUND);			
		//Cell Style for Formula Ingredient --End	
		//Updated code for 2018x.6 Requirement id 36700 Ability to generate Part and Spec report with without hyperlink Starts
		// Modified by DSM Reports (Sogeti) for 22x.03 (August CW 2023) Defect 54091 - Start 
		//Need an Exception as it is an existing method 
        updateWorksheetFormulaIngredient(context, workbook, rowHeaderFormulaIngredient, cellStyleFormulaIngredient, mlFormulaIngredient, sheetFormulaIngredient, strHyperlink, styleGlobal);
        // Modified by DSM Reports (Sogeti) for 22x.03 (August CW 2023) Defect 54091 - End
		//Updated code for 2018x.6 Requirement id 36700 Ability to generate Part and Spec report with without hyperlink Ends
		//Added code for Requirement Id:29012-The report shall include new tab For FOP-Formula Ingredient-Ends
	}
	if(strSelectedTabs.contains(TAB_VIEWSUBSTITUTES)){
		outLog.print("updating Worksheet TAB_VIEWSUBSTITUTES \n");
		outLog.flush();
		//Added For DSM Report 2018x1.1 Scope :10 - Create new tab for FOP BOM Substitute : Starts
		//17 Sheet Creation for View Substitues
		XSSFSheet sheetViewSubstitues = workbook.createSheet(strSheetViewSubstitues);			
		XSSFRow rowHeaderViewSubstitues= sheetViewSubstitues.createRow(0);
		//Cell Style for View Substitues --Begin
		XSSFCellStyle cellStyleViewSubstitues = sheetViewSubstitues.getWorkbook().createCellStyle();		
		XSSFFont fontViewSubstitues = sheetViewSubstitues.getWorkbook().createFont();
		fontViewSubstitues.setBold(true);
		fontViewSubstitues.setFontHeightInPoints((short) 12);
		cellStyleViewSubstitues.setFont(fontViewSubstitues);			
		cellStyleViewSubstitues.setFillForegroundColor(IndexedColors.PALE_BLUE.getIndex());
		cellStyleViewSubstitues.setFillPattern(FillPatternType.SOLID_FOREGROUND);
		//Cell Style for View Substitues --End
		//Updated code for 2018x.6 Requirement id 36700 Ability to generate Part and Spec report with without hyperlink Starts
		//Added the code for 2018x Spec REader Defect 47026,47112 - Starts
		// Modified by DSM Reports (Sogeti) for 22x.03 (August CW 2023) Defect 54091 - Start
		//Need an Exception as it is an existing method 
        updateWorksheetViewSubstitutes(context, workbook, rowHeaderViewSubstitues, cellStyleViewSubstitues, mlViewSubstituteDetails, sheetViewSubstitues, strHyperlink, strUserName, styleGlobal);
        // Modified by DSM Reports (Sogeti) for 22x.03 (August CW 2023) Defect 54091 - End
		//Added the code for 2018x Spec REader Defect 47026,47112 - Ends
		//Updated code for 2018x.6 Requirement id 36700 Ability to generate Part and Spec report with without hyperlink Ends
		//Added For DSM Report 2018x1.1 Scope :10 - Create new tab for FOP BOM Substitute : Ends
	}
	if(strSelectedTabs.contains(TAB_GPSASSESMENTS)){
		outLog.print("updating Worksheet TAB_GPSASSESMENTS \n");
		outLog.flush();
		//Added code for Reqirement Id:31965- 2018x.3 -The report shall include new Tab for GPS Assessment-Starts
		//18 Sheet Creation for GPS Assessment
		XSSFSheet sheetGPSAssessments = workbook.createSheet(strGPSAssessments);			
		XSSFRow rowHeaderGPSAssessments= sheetGPSAssessments.createRow(0);
		//Cell Style for SAP BOM As Fed --Begin
		XSSFCellStyle cellStyleGPSAssessments = sheetGPSAssessments.getWorkbook().createCellStyle();
		XSSFFont fontGPSAssessments = sheetGPSAssessments.getWorkbook().createFont();
		fontGPSAssessments.setBold(true);
		fontGPSAssessments.setFontHeightInPoints((short) 12);
		cellStyleGPSAssessments.setFont(fontGPSAssessments);	
		cellStyleGPSAssessments.setFillForegroundColor(IndexedColors.PALE_BLUE.getIndex());			
		cellStyleGPSAssessments.setFillPattern(FillPatternType.SOLID_FOREGROUND);			
		//Cell Style for SAP BOM As Fed --End
		//Updated code for 2018x.6 Requirement id 36700 Ability to generate Part and Spec report with without hyperlink Starts
		// Modified by DSM Reports (Sogeti) for 22x.03 (August CW 2023) Defect 54091 - Start
		//Need an Exception as it is an existing method 
        updateWorksheetGPSAssessment(context, workbook, rowHeaderGPSAssessments, cellStyleGPSAssessments, mlGPSAssessments, sheetGPSAssessments, strHyperlink, styleGlobal);
        // Modified by DSM Reports (Sogeti) for 22x.03 (August CW 2023) Defect 54091 - End
		//Updated code for 2018x.6 Requirement id 36700 Ability to generate Part and Spec report with without hyperlink Ends
		//Added code for Reqirement Id:31965- 2018x.3 -The report shall include new Tab for GPS Assessment-Starts
	}
	if(strSelectedTabs.contains(TAB_MARKETCLEARANCE)){
 		outLog.print("updating Worksheet TAB_MARKETCLEARANCE \n");
		outLog.flush();
 		//Added code for Reqirement Id:31275-The report shall include new tab for SAP BOM As Fed-Starts
 		//19 Sheet Creation for Market Clearance
 		XSSFSheet sheetCountryClerance = workbook.createSheet(strCountryClerance);			
 		XSSFRow rowHeaderCountryClerance = sheetCountryClerance.createRow(0);
 		//Cell Style for Country Clearance --Begin
 		XSSFCellStyle cellStyleCountryClearance = sheetCountryClerance.getWorkbook().createCellStyle();
 		XSSFFont fontCountryClearance = sheetCountryClerance.getWorkbook().createFont();
 		fontCountryClearance.setBold(true);
 		fontCountryClearance.setFontHeightInPoints((short) 12);
 		cellStyleCountryClearance.setFont(fontCountryClearance);	
 		cellStyleCountryClearance.setFillForegroundColor(IndexedColors.PALE_BLUE.getIndex());			
 		cellStyleCountryClearance.setFillPattern(FillPatternType.SOLID_FOREGROUND);			
 		//Cell Style for Country Clearance --End
 		//Updated code for 2018x.6 Requirement id 36700 Ability to generate Part and Spec report with without hyperlink Starts
 	// Modified by DSM Reports (Sogeti) for 22x.03 (August CW 2023) Defect 54091 - Start
 		//Need an Exception as it is an existing method 
        updateWorksheetCountryClerance(context, workbook, rowHeaderCountryClerance, cellStyleCountryClearance, mlCountryClearance, sheetCountryClerance, strHyperlink, styleGlobal);
        // Modified by DSM Reports (Sogeti) for 22x.03 (August CW 2023) Defect 54091 - End
 		//Updated code for 2018x.6 Requirement id 36700 Ability to generate Part and Spec report with without hyperlink Ends
 		//Added code for Requirement Id:31971 - The report shall include new tab Country Clearance for FOP-Ends
 	}
 	if(strSelectedTabs.contains(TAB_MARKETOFSALE)){
 		outLog.print("updating Worksheet TAB_MARKETOFSALE \n");
		outLog.flush();
		//Added code for Reqirement Id: 33646 - 2018x.5 Part And Specification Report - Market Of Sale -Starts
		//20 Sheet Creation for Market of Sale
		XSSFSheet sheetMarketOfSale = workbook.createSheet(strMarketOfSale);			
		XSSFRow rowHeaderMarketOfSale = sheetMarketOfSale.createRow(0);
		
		XSSFCellStyle cellStyleMarketOfSale = sheetMarketOfSale.getWorkbook().createCellStyle();
		XSSFFont fontGPSAssessments = sheetMarketOfSale.getWorkbook().createFont();
		fontGPSAssessments.setBold(true);
		fontGPSAssessments.setFontHeightInPoints((short) 12);
		cellStyleMarketOfSale.setFont(fontGPSAssessments);	
		cellStyleMarketOfSale.setFillForegroundColor(IndexedColors.PALE_BLUE.getIndex());			
		cellStyleMarketOfSale.setFillPattern(FillPatternType.SOLID_FOREGROUND);			
		// Modified by DSM Reports (Sogeti) for 22x.03 (August CW 2023) Defect 54091 - Start  
		//Need an Exception as it is an existing method 
        updateWorksheetMarketOfSale(context, workbook, rowHeaderMarketOfSale, cellStyleMarketOfSale, mlMarketOfSale, sheetMarketOfSale, strHyperlink, styleGlobal);
	// Modified by DSM Reports (Sogeti) for 22x.03 (August CW 2023) Defect 54091 - End
		//Added code for Reqirement Id:33646- 2018x.5 Part And Specification Report - Market Of Sale - Ends
	}
    // Added by DSM for 22x CW-05 for Requirement 49721  -changes for DSM Reports MOS Components - START
 	if(strSelectedTabs.contains(TAB_MOSCOMDETAILS)){
 		outLog.print("updating Worksheet TAB_MOSCOMDETAILS \n");
		outLog.flush();
        
        XSSFSheet sheetMOSCompDetails = workbook.createSheet(strMOSCompDetails);	
        
		XSSFCellStyle cellStyleMarketOfSale = sheetMOSCompDetails.getWorkbook().createCellStyle();
		XSSFFont fontGPSAssessments = sheetMOSCompDetails.getWorkbook().createFont();
		fontGPSAssessments.setBold(true);
		fontGPSAssessments.setFontHeightInPoints((short) 12);
		cellStyleMarketOfSale.setFont(fontGPSAssessments);	
		cellStyleMarketOfSale.setFillForegroundColor(IndexedColors.PALE_BLUE.getIndex());			
		cellStyleMarketOfSale.setFillPattern(FillPatternType.SOLID_FOREGROUND);	
        
        XSSFRow rowHeaderMOSCompDetails = sheetMOSCompDetails.createRow(0);
        pg.updateWorksheetMOSCompDetails(context, workbook, rowHeaderMOSCompDetails, cellStyleMarketOfSale, mlMOSCompDetails, sheetMOSCompDetails, strHyperlink, outLog, styleGlobal);

	}
    // Added by DSM for 22x CW-05 for Requirement 49721  -changes for DSM Reports MOS Components - END
 	
 	//Added code for Reqirement Id: 34941 New Tab: Materials & Composition--Starts
 	 if(strSelectedTabs.contains(TAB_MATCOM)){
 	 	outLog.print("updating Worksheet TAB_MATCOM \n");
 		outLog.flush();
 		XSSFSheet sheetMaterialsAndComposition = workbook.createSheet(strMaterialsAndComposition);			
 		XSSFRow rowHeaderMaterialsAndComposition = sheetMaterialsAndComposition.createRow(0);
 		XSSFCellStyle cellStyleMaterialsAndComposition = sheetMaterialsAndComposition.getWorkbook().createCellStyle();
 		XSSFFont fontMaterialsAndComposition = sheetMaterialsAndComposition.getWorkbook().createFont();
 		fontMaterialsAndComposition.setBold(true);
 		fontMaterialsAndComposition.setFontHeightInPoints((short) 12);
 		cellStyleMaterialsAndComposition.setFont(fontMaterialsAndComposition);	
 		cellStyleMaterialsAndComposition.setFillForegroundColor(IndexedColors.PALE_BLUE.getIndex());			
 		cellStyleMaterialsAndComposition.setFillPattern(FillPatternType.SOLID_FOREGROUND);			
 		//Updated code for 2018x.6 Requirement id 36700 Ability to generate Part and Spec report with without hyperlink Starts
 		//22x updgrade defect 50261 - Start
 		// Modified by DSM Reports (Sogeti) for 22x.03 (August CW 2023) Defect 54091 - Start
 		//Need an Exception as it is an existing method 
        updateWorksheetMaterialsAndComposition(context, workbook, rowHeaderMaterialsAndComposition, cellStyleMaterialsAndComposition, mlMaterialsAndCompositions, sheetMaterialsAndComposition, strHyperlink, strUserName, styleGlobal);
        // Modified by DSM Reports (Sogeti) for 22x.03 (August CW 2023) Defect 54091 - End
 		//22x updgrade defect 50261 - End
 		//Updated code for 2018x.6 Requirement id 36700 Ability to generate Part and Spec report with without hyperlink Ends	
 	}
 	//Added code for Reqirement Id: 34941 New Tab: Materials & Composition--Ends
 	//Added code for Req Id : 33655 New Tab : MEP-SEP Certification--Starts
  	if(strSelectedTabs.contains(TAB_MEPSEPCERTI)){
  		outLog.print("updating Worksheet TAB_MEPSEPCERTI \n");
 		outLog.flush();
 		//22 Sheet Creation for Market of Sale
 		XSSFSheet sheetMEPSEPCertification = workbook.createSheet(strMEPSEPCertification);			
 		XSSFRow rowHeaderMEPSEPCertification = sheetMEPSEPCertification.createRow(0);
 		XSSFCellStyle cellStyleMEPSEPCertification = sheetMEPSEPCertification.getWorkbook().createCellStyle();
 		XSSFFont fontMEPSEPCertification = sheetMEPSEPCertification.getWorkbook().createFont();
 		fontMEPSEPCertification.setBold(true);
 		fontMEPSEPCertification.setFontHeightInPoints((short) 12);
 		cellStyleMEPSEPCertification.setFont(fontMEPSEPCertification);	
 		cellStyleMEPSEPCertification.setFillForegroundColor(IndexedColors.PALE_BLUE.getIndex());			
 		cellStyleMEPSEPCertification.setFillPattern(FillPatternType.SOLID_FOREGROUND);			
 		//Updated code for 2018x.6 Requirement id 36700 Ability to generate Part and Spec report with without hyperlink Starts
 		// Modified by DSM Reports (Sogeti) for 22x.03 (May CW 2023) Defect 49842 - Start
 		// Modified by DSM Reports (Sogeti) for 22x.03 (August CW 2023) Defect 54091 - Start
 		//Need an Exception as it is an existing method 
        updateWorksheetMEPSEPCertification(context, workbook, rowHeaderMEPSEPCertification, cellStyleMEPSEPCertification, mlMEPSEPCertification, sheetMEPSEPCertification, strHyperlink, strUserName, styleGlobal);
        // Modified by DSM Reports (Sogeti) for 22x.03 (August CW 2023) Defect 54091 - End
 		// Modified by DSM Reports (Sogeti) for 22x.03 (May CW 2023) Defect 49842 - End
 		//Updated code for 2018x.6 Requirement id 36700 Ability to generate Part and Spec report with without hyperlink Ends
 	}
  	//Added code for Req Id : 33655 New Tab : MEP-SEP Certification--Ends
  //Added code for Req Ids : 33656, 33871, 33872-New Tab : MEP-SEP Component Equivalents--Starts
   	if(strSelectedTabs.contains(TAB_MEPSEPCOMEQUV)){
   		outLog.print("updating Worksheet TAB_MEPSEPCOMEQUV \n");
  		outLog.flush();
  		//21 Sheet Creation for Component Equivalent
  		XSSFSheet SheetCompEquivalentMEPSEP = workbook.createSheet(strMEPSEP);
  		XSSFRow rowHeaderCompEquivalentMEPSEP = SheetCompEquivalentMEPSEP.createRow(0);
  		//Cell Style for Component Equivalents --Begin
  		XSSFCellStyle cellStyleCompEquivalentMEPSEP = SheetCompEquivalentMEPSEP.getWorkbook().createCellStyle();
  		XSSFFont xsfontCompEquivalentMEPSEP = SheetCompEquivalentMEPSEP.getWorkbook().createFont();
  		xsfontCompEquivalentMEPSEP.setBold(true);
  		xsfontCompEquivalentMEPSEP.setFontHeightInPoints((short) 12);
  		cellStyleCompEquivalentMEPSEP.setFont(xsfontCompEquivalentMEPSEP);
  		cellStyleCompEquivalentMEPSEP.setFillForegroundColor(IndexedColors.PALE_BLUE.getIndex());			
  		cellStyleCompEquivalentMEPSEP.setFillPattern(FillPatternType.SOLID_FOREGROUND);
  		
  		XSSFCellStyle cellStyleCompEquiPart = SheetCompEquivalentMEPSEP.getWorkbook().createCellStyle();
  		XSSFFont xsfontCompEquiMEP = SheetCompEquivalentMEPSEP.getWorkbook().createFont();
  		xsfontCompEquiMEP.setBold(true);
  		xsfontCompEquiMEP.setFontHeightInPoints((short) 12);
  		cellStyleCompEquiPart.setFont(xsfontCompEquivalentMEPSEP);
  		cellStyleCompEquiPart.setFillForegroundColor(IndexedColors.GREY_25_PERCENT.getIndex());			
  		cellStyleCompEquiPart.setFillPattern(FillPatternType.SOLID_FOREGROUND);
  		
  		XSSFCellStyle cellStyleCompEquiSEP = SheetCompEquivalentMEPSEP.getWorkbook().createCellStyle();
  		XSSFFont xsfontCompEquiSEP = SheetCompEquivalentMEPSEP.getWorkbook().createFont();
  		xsfontCompEquiSEP.setBold(true);
  		xsfontCompEquiSEP.setFontHeightInPoints((short) 12);
  		cellStyleCompEquiSEP.setFont(xsfontCompEquivalentMEPSEP);
  		cellStyleCompEquiSEP.setFillForegroundColor(IndexedColors.LIGHT_YELLOW.getIndex());			
  		cellStyleCompEquiSEP.setFillPattern(FillPatternType.SOLID_FOREGROUND);
  		//Cell Style for Component Equivalents --End
  		//Updated code for 2018x.6 Requirement id 36700 Ability to generate Part and Spec report with without hyperlink Starts
  	// Modified by DSM Reports (Sogeti) for 22x.03 (August CW 2023) Defect 54091 - Start
  	//Need an Exception as it is an existing method 
        updateWorksheetCompEquivalentMEPSEP(context, workbook, rowHeaderCompEquivalentMEPSEP, cellStyleCompEquivalentMEPSEP, mlCompEquiDetailsMEP, SheetCompEquivalentMEPSEP, strHyperlink, styleGlobal);
        // Modified by DSM Reports (Sogeti) for 22x.03 (August CW 2023) Defect 54091 - End
  		//Updated code for 2018x.6 Requirement id 36700 Ability to generate Part and Spec report with without hyperlink Ends
  	}
   	//Added code for Req Ids : 33656, 33871, 33872-New Tab : MEP-SEP Component Equivalents--Ends
   	if(strSelectedTabs.contains(TAB_NOTES)){
		outLog.print("updating Worksheet TAB_NOTES \n");
		outLog.flush();
		//14 Sheet Creation for Notes
		XSSFSheet sheetNotes = workbook.createSheet(strNotes);			
		XSSFRow rowHeaderNotes = sheetNotes.createRow(0);
		//Cell Style for Notes --Begin
		XSSFCellStyle cellStyleNotes = sheetNotes.getWorkbook().createCellStyle();
		XSSFFont fontNotes = sheetNotes.getWorkbook().createFont();
		fontNotes.setBold(true);
		fontNotes.setFontHeightInPoints((short) 12);
		cellStyleNotes.setFont(fontNotes);	
		cellStyleNotes.setFillForegroundColor(IndexedColors.PALE_BLUE.getIndex());			
		cellStyleNotes.setFillPattern(FillPatternType.SOLID_FOREGROUND);			
		//Cell Style for Notes --End
		//Updated code for 2018x.6 Requirement id 36700 Ability to generate Part and Spec report with without hyperlink Starts
		// Modified by DSM Reports (Sogeti) for 22x.03 (August CW 2023) Defect 54091 - Start
		//Need an Exception as it is an existing method 
        updateWorksheetNotes(context, workbook, rowHeaderNotes, cellStyleNotes, mlNotes, sheetNotes, strHyperlink, styleGlobal);
        // Modified by DSM Reports (Sogeti) for 22x.03 (August CW 2023) Defect 54091 - End
		//Updated code for 2018x.6 Requirement id 36700 Ability to generate Part and Spec report with without hyperlink Ends
	}
   	//Added code for Req Id : 34226 New Tab: Part Certification--Starts
   	if(strSelectedTabs.contains(TAB_PARTCERTI)){
   		outLog.print("updating Worksheet TAB_PARTCERTI \n");
  		outLog.flush();
  		//23 Sheet Creation for Market of Sale
  		XSSFSheet sheetPartCertification = workbook.createSheet(strPartCertification);			
  		XSSFRow rowHeaderMEPSEPCertification = sheetPartCertification.createRow(0);
  		
  		XSSFCellStyle cellStylePartCertification = sheetPartCertification.getWorkbook().createCellStyle();
  		XSSFFont fontPartCertification = sheetPartCertification.getWorkbook().createFont();
  		fontPartCertification.setBold(true);
  		fontPartCertification.setFontHeightInPoints((short) 12);
  		cellStylePartCertification.setFont(fontPartCertification);	
  		cellStylePartCertification.setFillForegroundColor(IndexedColors.PALE_BLUE.getIndex());			
  		cellStylePartCertification.setFillPattern(FillPatternType.SOLID_FOREGROUND);			
  		//Updated code for 2018x.6 Requirement id 36700 Ability to generate Part and Spec report with without hyperlink Starts
  		// Modified by DSM Reports (Sogeti) for 22x.03 (August CW 2023) Defect 54091 - Start
  		//Need an Exception as it is an existing method 
        updateWorksheetPartCertification(context, workbook, rowHeaderMEPSEPCertification, cellStylePartCertification, mlPartCerti, sheetPartCertification, strHyperlink, styleGlobal);
        // Modified by DSM Reports (Sogeti) for 22x.03 (August CW 2023) Defect 54091 - End
  		//Updated code for 2018x.6 Requirement id 36700 Ability to generate Part and Spec report with without hyperlink Ends
  	}
   	//Added code for Req Id : 34226 New Tab: Part Certification--Ends
   	if(strSelectedTabs.contains(TAB_COMPEQUV)){
		outLog.print("updating Worksheet TAB_COMPEQUV \n");
		outLog.flush();
		// 9 Sheet Creation for Component Equivalent
		XSSFSheet SheetCompEquivalent = workbook.createSheet(strCompEquivalent);
		XSSFRow rowHeaderCompEquivalent = SheetCompEquivalent.createRow(0);
		//Cell Style for Component Equivalents --Begin
		XSSFCellStyle cellStyleCompEquivalent = SheetCompEquivalent.getWorkbook().createCellStyle();
		XSSFFont xsfontCompEquivalent = SheetCompEquivalent.getWorkbook().createFont();
		xsfontCompEquivalent.setBold(true);
		xsfontCompEquivalent.setFontHeightInPoints((short) 12);
		cellStyleCompEquivalent.setFont(xsfontCompEquivalent);
		cellStyleCompEquivalent.setFillForegroundColor(IndexedColors.PALE_BLUE.getIndex());			
		cellStyleCompEquivalent.setFillPattern(FillPatternType.SOLID_FOREGROUND);
		
		XSSFCellStyle cellStyleCompEquiMEP = SheetCompEquivalent.getWorkbook().createCellStyle();
		XSSFFont xsfontCompEquiMEP = SheetCompEquivalent.getWorkbook().createFont();
		xsfontCompEquiMEP.setBold(true);
		xsfontCompEquiMEP.setFontHeightInPoints((short) 12);
		cellStyleCompEquiMEP.setFont(xsfontCompEquivalent);
		cellStyleCompEquiMEP.setFillForegroundColor(IndexedColors.GREY_25_PERCENT.getIndex());			
		cellStyleCompEquiMEP.setFillPattern(FillPatternType.SOLID_FOREGROUND);
		
		XSSFCellStyle cellStyleCompEquiSEP = SheetCompEquivalent.getWorkbook().createCellStyle();
		XSSFFont xsfontCompEquiSEP = SheetCompEquivalent.getWorkbook().createFont();
		xsfontCompEquiSEP.setBold(true);
		xsfontCompEquiSEP.setFontHeightInPoints((short) 12);
		cellStyleCompEquiSEP.setFont(xsfontCompEquivalent);
		cellStyleCompEquiSEP.setFillForegroundColor(IndexedColors.LIGHT_YELLOW.getIndex());			
		cellStyleCompEquiSEP.setFillPattern(FillPatternType.SOLID_FOREGROUND);
		//Cell Style for Component Equivalents --End
		//Updated code for 2018x.6 Requirement id 36700 Ability to generate Part and Spec report with without hyperlink Starts
		// Modified by DSM Reports (Sogeti) for 22x.03 (August CW 2023) Defect 54091 - Start
		//Need an Exception as it is an existing method 
        updateWorksheetCompEquivalent(context, workbook, rowHeaderCompEquivalent, cellStyleCompEquivalent, cellStyleCompEquiMEP, cellStyleCompEquiSEP, mlCompEquiDetails, SheetCompEquivalent, strHyperlink, styleGlobal);
        // Modified by DSM Reports (Sogeti) for 22x.03 (August CW 2023) Defect 54091 - End
		//Updated code for 2018x.6 Requirement id 36700 Ability to generate Part and Spec report with without hyperlink Ends
	}
   	if(strSelectedTabs.contains(TAB_PERFORMANCECHAR)){
		outLog.print("updating Worksheet TAB_PERFORMANCECHAR \n");
		outLog.flush();
		// 2 Sheet Creation for Performance Characteristic
		XSSFSheet sheetTablesPerformance = workbook.createSheet(strSheetTablePerformance);			
		XSSFRow rowHeaderTablesPerformance = sheetTablesPerformance.createRow(0);
		//Cell Style for Performance Characteristic --Begin	
		XSSFCellStyle cellStyleTablesPerformance = sheetTablesPerformance.getWorkbook().createCellStyle();
		XSSFFont fontPerformance = sheetTablesPerformance.getWorkbook().createFont();
		fontPerformance.setBold(true);
		fontPerformance.setFontHeightInPoints((short) 12);
		cellStyleTablesPerformance.setFont(fontPerformance);
		cellStyleTablesPerformance.setFillForegroundColor(IndexedColors.PALE_BLUE.getIndex());			
		cellStyleTablesPerformance.setFillPattern(FillPatternType.SOLID_FOREGROUND);
		//Cell Style for Performance Characteristic --End
		//Added code for 2018x.6 Requirement id 36700 Ability to generate Part and Spec report with without hyperlink Starts
		//Added the code for Defect 49698 - Spec Reader Access Issue - Starts
		// Modified by DSM Reports (Sogeti) for 22x.03 (August CW 2023) Defect 54091 - Start
		//Need an Exception as it is an existing method 
        updateWorksheetPerformanceCharacteristics(context, workbook, rowHeaderTablesPerformance, cellStyleTablesPerformance, mlPerformanceCharacteristicsAll, sheetTablesPerformance, bHasSupplierAccess, strHyperlink, strUserName, styleGlobal);
        // Modified by DSM Reports (Sogeti) for 22x.03 (August CW 2023) Defect 54091 - End
		//Added the code for Defect 49698 - Spec Reader Access Issue - Ends
		//Added code for 2018x.6 Requirement id 36700 Ability to generate Part and Spec report with without hyperlink Starts
	}
   	if(strSelectedTabs.contains(TAB_PLANTS)){
		outLog.print("updating Worksheet TAB_PLANTS \n");
		outLog.flush();
		// 4 Sheet Creation for Plants
		XSSFSheet sheetPlants = workbook.createSheet(strSheetPlants);			
		XSSFRow rowHeaderPlants = sheetPlants.createRow(0);
		//Cell Style for Plants --Begin
		XSSFCellStyle cellStylePlants = sheetPlants.getWorkbook().createCellStyle();
		XSSFFont fontPlants = sheetPlants.getWorkbook().createFont();
		fontPlants.setBold(true);
		fontPlants.setFontHeightInPoints((short) 12);
		cellStylePlants.setFont(fontPlants);	
		cellStylePlants.setFillForegroundColor(IndexedColors.PALE_BLUE.getIndex());			
		cellStylePlants.setFillPattern(FillPatternType.SOLID_FOREGROUND);			
		//Cell Style for Plants --End
		//Added code for 2018x.6 Requirement id 36700 Ability to generate Part and Spec report with without hyperlink Starts
		// Modified by DSM Reports (Sogeti) for 22x.03 (August CW 2023) Defect 54091 - Start
		//Need an Exception as it is an existing method 
        updateWorksheetPlants(context, workbook, rowHeaderPlants, cellStylePlants, mlPlants, sheetPlants, strHyperlink, styleGlobal);
        // Modified by DSM Reports (Sogeti) for 22x.03 (August CW 2023) Defect 54091 - End
		//Added code for 2018x.6 Requirement id 36700 Ability to generate Part and Spec report with without hyperlink Ends
	}
   	if(strSelectedTabs.contains(TAB_PRODFORMULA)){
		outLog.print("updating Worksheet TAB_PRODFORMULA \n");
		outLog.flush();
		// 11 Sheet Creation for ProducingFormula
		XSSFSheet sheetProducingFormula= workbook.createSheet(strSheetProducingFormula);	
		XSSFRow rowHeaderProducingFormula = sheetProducingFormula.createRow(0);	
		//cell style for Producing Formula --Begin
		XSSFCellStyle cellStyleProducingFormula = sheetProducingFormula.getWorkbook().createCellStyle();
		XSSFFont fontProducingFormula = sheetProducingFormula.getWorkbook().createFont();
		fontProducingFormula.setBold(true);
		fontProducingFormula.setFontHeightInPoints((short) 12);
		cellStyleProducingFormula.setFont(fontProducingFormula);
		cellStyleProducingFormula.setFillForegroundColor(IndexedColors.PALE_BLUE.getIndex());			
		cellStyleProducingFormula.setFillPattern(FillPatternType.SOLID_FOREGROUND);
		//cell style for Producing Formula --End
		//Updated code for 2018x.6 Requirement id 36700 Ability to generate Part and Spec report with without hyperlink Starts
		// Modified by DSM Reports (Sogeti) for 22x.03 (August CW 2023) Defect 54091 - Start
		//Need an Exception as it is an existing method 
        updateWorksheetProducingFormula(context, workbook, rowHeaderProducingFormula, cellStyleProducingFormula, mlProducingFormulaAll, sheetProducingFormula, strHyperlink, styleGlobal);
        // Modified by DSM Reports (Sogeti) for 22x.03 (August CW 2023) Defect 54091 - End
		//Updated code for 2018x.6 Requirement id 36700 Ability to generate Part and Spec report with without hyperlink Ends
	}
   	if(strSelectedTabs.contains(TAB_SAPBOMASFED)){
		outLog.print("updating Worksheet TAB_SAPBOMASFED \n");
		outLog.flush();
		//Added code for Reqirement Id:31275-The report shall include new tab for SAP BOM As Fed-Starts
		//16 Sheet Creation for SAP BOM As Fed
		XSSFSheet sheetSAPBOM = workbook.createSheet(strSAPBOM);			
		XSSFRow rowHeaderSAPBOM = sheetSAPBOM.createRow(0);
		//Cell Style for SAP BOM As Fed --Begin
		XSSFCellStyle cellStyleSAPBOM = sheetSAPBOM.getWorkbook().createCellStyle();
		XSSFFont fontSAPBOM = sheetSAPBOM.getWorkbook().createFont();
		fontSAPBOM.setBold(true);
		fontSAPBOM.setFontHeightInPoints((short) 12);
		cellStyleSAPBOM.setFont(fontSAPBOM);	
		cellStyleSAPBOM.setFillForegroundColor(IndexedColors.PALE_BLUE.getIndex());			
		cellStyleSAPBOM.setFillPattern(FillPatternType.SOLID_FOREGROUND);			
		//Cell Style for SAP BOM As Fed --End
		//Updated code for 2018x.6 Requirement id 36700 Ability to generate Part and Spec report with without hyperlink Starts
		// Modified by DSM Reports (Sogeti) for 22x.03 (August CW 2023) Defect 54091 - Start
		//Need an Exception as it is an existing method 
        updateWorksheetSAPBOMAsFed(context, workbook, rowHeaderSAPBOM, cellStyleSAPBOM, mlSAPBOM, sheetSAPBOM, strHyperlink, styleGlobal);
        // Modified by DSM Reports (Sogeti) for 22x.03 (August CW 2023) Defect 54091 - End
		//Updated code for 2018x.6 Requirement id 36700 Ability to generate Part and Spec report with without hyperlink Ends
		//Added code for Reqirement Id:31275-The report shall include new tab for SAP BOM As Fed-Ends
	}
   	if(strSelectedTabs.contains(TAB_SPECSDOCS)){
		outLog.print("updating Worksheet TAB_SPECSDOCS \n");
		outLog.flush();
		// 5  Sheet Creation for Specs Docs
		XSSFSheet sheetSpecsDocs = workbook.createSheet(strSheetSpecsDocs);
		XSSFRow rowHeaderSpecsDocs = sheetSpecsDocs.createRow(0);
		// Code for Specs Docs
		//Cell Style for Specs Docs --Begin	
		XSSFCellStyle cellStyleSpecsDocs = sheetSpecsDocs.getWorkbook().createCellStyle();
		XSSFFont fontSpecsDocs = sheetSpecsDocs.getWorkbook().createFont();
		fontSpecsDocs.setBold(true);
		fontSpecsDocs.setFontHeightInPoints((short) 12);
		cellStyleSpecsDocs.setFont(fontSpecsDocs);
		cellStyleSpecsDocs.setFillForegroundColor(IndexedColors.PALE_BLUE.getIndex());	
		cellStyleSpecsDocs.setFillPattern(FillPatternType.SOLID_FOREGROUND);
		
		XSSFCellStyle cellStyleRelatedSpecification = sheetSpecsDocs.getWorkbook().createCellStyle();
		XSSFFont fontRelatedSpecification = sheetSpecsDocs.getWorkbook().createFont();
		fontRelatedSpecification.setBold(true);
		fontRelatedSpecification.setFontHeightInPoints((short) 12);
		cellStyleRelatedSpecification.setFont(fontRelatedSpecification);
		cellStyleRelatedSpecification.setFillForegroundColor(IndexedColors.GREY_25_PERCENT.getIndex());			
		cellStyleRelatedSpecification.setFillPattern(FillPatternType.SOLID_FOREGROUND);
		
		XSSFCellStyle cellStyleReferenceDocument = sheetSpecsDocs.getWorkbook().createCellStyle();
		XSSFFont fontReferenceDocument = sheetSpecsDocs.getWorkbook().createFont();
		fontReferenceDocument.setBold(true);
		fontReferenceDocument.setFontHeightInPoints((short) 12);
		cellStyleReferenceDocument.setFont(fontRelatedSpecification);
		cellStyleReferenceDocument.setFillForegroundColor(IndexedColors.LIGHT_YELLOW.getIndex());			
		cellStyleReferenceDocument.setFillPattern(FillPatternType.SOLID_FOREGROUND);
		
		XSSFCellStyle cellStyleCharReferenceDocument = sheetSpecsDocs.getWorkbook().createCellStyle();
		XSSFFont fontCharReferenceDocument = sheetSpecsDocs.getWorkbook().createFont();
		fontCharReferenceDocument.setBold(true);
		fontCharReferenceDocument.setFontHeightInPoints((short) 12);
		cellStyleCharReferenceDocument.setFont(fontRelatedSpecification);
		cellStyleCharReferenceDocument.setFillForegroundColor(IndexedColors.GOLD.getIndex());			
		cellStyleCharReferenceDocument.setFillPattern(FillPatternType.SOLID_FOREGROUND);
		//Added code for Requirement Id:46224 - Master Specification info addition to Part & Spec report - Starts 
		XSSFCellStyle cellStyleMasterSpecification = sheetSpecsDocs.getWorkbook().createCellStyle();
		XSSFFont fontCharMasterSpecification = sheetSpecsDocs.getWorkbook().createFont();
		fontCharMasterSpecification.setBold(true);
		fontCharMasterSpecification.setFontHeightInPoints((short) 12);
		cellStyleMasterSpecification.setFont(fontCharMasterSpecification);
		cellStyleMasterSpecification.setFillForegroundColor(IndexedColors.GREEN.getIndex());			
		cellStyleMasterSpecification.setFillPattern(FillPatternType.SOLID_FOREGROUND);
		//Added code for Requirement Id:46224 - Master Specification info addition to Part & Spec report - Ends 
		// Code Added/Modified by Madhav for Specs Docs
		//Cell Style for Specs Docs --End
		//Updated code for 2018x.6 Requirement id 36700 Ability to generate Part and Spec report with without hyperlink Starts
		//Moved the code to resolve Sonar Quality Issue - Starts
		// Modified by DSM Reports (Sogeti) for 22x.03 (August CW 2023) Defect 54091 - Start
		//Need an Exception as it is an existing method 
		//Modified by DSM Reports (Sogeti) for 22x.04 (Dec CW 2023) Defect 54222 - Starts
        pg.updateWorksheetSpecsDocs(context, workbook, rowHeaderSpecsDocs, cellStyleSpecsDocs, mlSpecsDocsAll, sheetSpecsDocs, mlSpecsRefDocsAll, mlPerformanceCharacteristicsAll, mlMasterSpecAll, cellStyleRelatedSpecification, cellStyleReferenceDocument, cellStyleCharReferenceDocument, cellStyleMasterSpecification, strHyperlink, styleGlobal, strOriginatingSource);
        //Modified by DSM Reports (Sogeti) for 22x.04 (Dec CW 2023) Defect 54222 - Ends
        // Modified by DSM Reports (Sogeti) for 22x.03 (August CW 2023) Defect 54091 - End
		//Moved the code to resolve Sonar Quality Issue - Starts
		//Updated code for 2018x.6 Requirement id 36700 Ability to generate Part and Spec report with without hyperlink Ends   	
   	}
   	if(strSelectedTabs.contains(TAB_SUBSMATERIAL)){
		outLog.print("updating Worksheet TAB_SUBSMATERIAL \n");
		outLog.flush();
		//Added For DSM Report 2018x1.1 Scope : 1 - Report shall include Substances & Martials Tab for the parts/specs with Material Composition MCP : Starts
		//13 Sheet Creation for Substances And Materials
		XSSFSheet sheetSubstancesAndMaterials = workbook.createSheet(strSheetSubstancesAndMaterials);			
		XSSFRow rowHeaderSubstancesAndMaterials = sheetSubstancesAndMaterials.createRow(0);
		//Cell Style for Substances And Materials --Begin
		XSSFCellStyle cellStyleSubstancesAndMaterials = sheetSubstancesAndMaterials.getWorkbook().createCellStyle();		
		XSSFFont fontSubstancesAndMaterials = sheetSubstancesAndMaterials.getWorkbook().createFont();
		fontSubstancesAndMaterials.setBold(true);
		fontSubstancesAndMaterials.setFontHeightInPoints((short) 12);
		cellStyleSubstancesAndMaterials.setFont(fontSubstancesAndMaterials);			
		cellStyleSubstancesAndMaterials.setFillForegroundColor(IndexedColors.PALE_BLUE.getIndex());
		cellStyleSubstancesAndMaterials.setFillPattern(FillPatternType.SOLID_FOREGROUND);
		//Cell Style for Substances And Materials --End
		//Updated code for 2018x.6 Requirement id 36700 Ability to generate Part and Spec report with without hyperlink Starts
		// Modified by DSM Reports (Sogeti) for 22x.03 (August CW 2023) Defect 54091 - Start
		//Need an Exception as it is an existing method 
        updateWorksheetSubstancesAndMaterials(context, workbook, rowHeaderSubstancesAndMaterials, cellStyleSubstancesAndMaterials, mlSubstanceAndMaterials, sheetSubstancesAndMaterials, strUserName, strHyperlink, styleGlobal);
        // Modified by DSM Reports (Sogeti) for 22x.03 (August CW 2023) Defect 54091 - End 
		//Updated code for 2018x.6 Requirement id 36700 Ability to generate Part and Spec report with without hyperlink Ends
		//Added For DSM Report 2018x1.1 Scope : 1 - Report shall include Substances & Martials Tab for the parts/specs with Material Composition MCP : Ends
	}
   //Added code for Apr22 CW requirement 41600 Starts
   	if(strSelectedTabs.contains(TAB_SUSTAINIBILITY)){
		outLog.print("updating Worksheet TAB_SUSTAINIBILITY Tab\n");
		outLog.flush();
		XSSFSheet sheetSustainibility = workbook.createSheet(strSheetSustainibility);
		XSSFRow rowHeaderSustainibility = sheetSustainibility.createRow(0);
		XSSFCellStyle cellStyleSustainibility = sheetSustainibility.getWorkbook().createCellStyle();
		XSSFFont xsfontDesignParameter = sheetSustainibility.getWorkbook().createFont();
		xsfontDesignParameter.setBold(true);
		xsfontDesignParameter.setFontHeightInPoints((short) 12);
		cellStyleSustainibility.setFont(xsfontDesignParameter);
		cellStyleSustainibility.setFillForegroundColor(IndexedColors.PALE_BLUE.getIndex());			
		cellStyleSustainibility.setFillPattern(FillPatternType.SOLID_FOREGROUND);
		// Modified by DSM Reports (Sogeti) for 22x.03 (August CW 2023) Defect 54091 - Start
		//Need an Exception as it is an existing method 
        updateWorksheetSustainibility(context, workbook, rowHeaderSustainibility, cellStyleSustainibility, mlSustainability, sheetSustainibility, strHyperlink, styleGlobal);
        // Modified by DSM Reports (Sogeti) for 22x.03 (August CW 2023) Defect 54091 - End
		outLog.print("updateWorksheet TAB_SUSTAINIBILITY \n");
		outLog.flush();
	}
  //Added code for Apr22 CW requirement 41600 Ends
   	if(strSelectedTabs.contains(TAB_WEIGHTCHAR)){
		outLog.print("updating Worksheet TAB_WEIGHTCHAR \n");
		outLog.flush();
		// 3 Sheet Creation for Tables-Weight
		XSSFSheet sheetTablesWeight = workbook.createSheet(strSheetTableWeight);			
		XSSFRow rowHeaderTablesWeight = sheetTablesWeight.createRow(0);
		//Cell Style for Tables-Weight --Begin
		XSSFCellStyle cellStyleTablesWeight = sheetTablesWeight.getWorkbook().createCellStyle();		
		XSSFFont font = sheetTablesWeight.getWorkbook().createFont();
		font.setBold(true);
		font.setFontHeightInPoints((short) 12);
		cellStyleTablesWeight.setFont(font);			
		cellStyleTablesWeight.setFillForegroundColor(IndexedColors.PALE_BLUE.getIndex());
		cellStyleTablesWeight.setFillPattern(FillPatternType.SOLID_FOREGROUND);
		//Cell Style for Tables-Weight --End
		//Added code for 2018x.6 Requirement id 36700 Ability to generate Part and Spec report with without hyperlink Starts
		// Modified by DSM Reports (Sogeti) for 22x.03 (August CW 2023) Defect 54091 - Start
		//Need an Exception as it is an existing method 
        updateWorksheetTableWeight(context, workbook, rowHeaderTablesWeight, cellStyleTablesWeight, mlWeightCharacteristics, sheetTablesWeight, strHyperlink, styleGlobal);
        // Modified by DSM Reports (Sogeti) for 22x.03 (August CW 2023) Defect 54091 - End 
		//Added code for 2018x.6 Requirement id 36700 Ability to generate Part and Spec report with without hyperlink Ends
	}
   	if(strSelectedTabs.contains(TAB_WEIGHTDIM)){
		outLog.print("updating Worksheet TAB_WEIGHTDIM \n");
		outLog.flush();
		// 7 Sheet Creation for Weights and Dimensions
		XSSFSheet SheetWeightAndDim = workbook.createSheet(strSheetWeightAndDim);
		XSSFRow rowHeaderWeightAndDim = SheetWeightAndDim.createRow(0);
		//Cell Style for Weights and Dimensions --Begin
		XSSFCellStyle cellStyleWeightsAndDim = SheetWeightAndDim.getWorkbook().createCellStyle();
		XSSFFont xsfontWeightsAndDim = SheetWeightAndDim.getWorkbook().createFont();
		xsfontWeightsAndDim.setBold(true);
		xsfontWeightsAndDim.setFontHeightInPoints((short) 12);
		cellStyleWeightsAndDim.setFont(xsfontWeightsAndDim);
		cellStyleWeightsAndDim.setFillForegroundColor(IndexedColors.PALE_BLUE.getIndex());			
		cellStyleWeightsAndDim.setFillPattern(FillPatternType.SOLID_FOREGROUND);
		
		XSSFCellStyle cellStyleWDPackingUnit = SheetWeightAndDim.getWorkbook().createCellStyle();
		XSSFFont xsfontWDPackingUnit = SheetWeightAndDim.getWorkbook().createFont();
		xsfontWDPackingUnit.setBold(true);
		xsfontWDPackingUnit.setFontHeightInPoints((short) 12);
		cellStyleWDPackingUnit.setFont(xsfontWeightsAndDim);
		cellStyleWDPackingUnit.setFillForegroundColor(IndexedColors.GREY_25_PERCENT.getIndex());			
		cellStyleWDPackingUnit.setFillPattern(FillPatternType.SOLID_FOREGROUND);
		
		XSSFCellStyle cellStyleWDTransportUnit = SheetWeightAndDim.getWorkbook().createCellStyle();
		XSSFFont xsfontWDTransportUnit = SheetWeightAndDim.getWorkbook().createFont();
		xsfontWDTransportUnit.setBold(true);
		xsfontWDTransportUnit.setFontHeightInPoints((short) 12);
		cellStyleWDTransportUnit.setFont(xsfontWeightsAndDim);
		cellStyleWDTransportUnit.setFillForegroundColor(IndexedColors.LIGHT_YELLOW.getIndex());			
		cellStyleWDTransportUnit.setFillPattern(FillPatternType.SOLID_FOREGROUND);
		//Cell Style for Weights and Dimensions --End
		//Updated code for 2018x.6 Requirement id 36700 Ability to generate Part and Spec report with without hyperlink Starts
		// Modified by DSM Reports (Sogeti) for 22x.03 (August CW 2023) Defect 54091 - Start
		//Need an Exception as it is an existing method 
        updateWorksheetWeightsAndDimensions(context, workbook, rowHeaderWeightAndDim, cellStyleWeightsAndDim, cellStyleWDPackingUnit, cellStyleWDTransportUnit, mlWeightsAndDim, SheetWeightAndDim, strHyperlink, styleGlobal);
        // Modified by DSM Reports (Sogeti) for 22x.03 (August CW 2023) Defect 54091 - End
		//Updated code for 2018x.6 Requirement id 36700 Ability to generate Part and Spec report with without hyperlink Ends
	}
   	//Added the code for 22x Requirement 45443 - Starts
   	//Added code for Requirement id 46223 - IP & Export Control Tab in Part & Spec Reports - Starts	
   	if(strSelectedTabs.contains(TAB_IPEXPORTCONTROL)){
		outLog.print("updating Worksheet TAB_IPEXPORTCONTROL \n");
		outLog.flush();
		
		XSSFSheet sheetTablesIPAndExport = workbook.createSheet(strSheetIPAndExportControl);			
		XSSFRow rowHeaderTablesIPAndExport = sheetTablesIPAndExport.createRow(0);

		XSSFCellStyle cellStyleCommonTablesIPAndExport = sheetTablesIPAndExport.getWorkbook().createCellStyle();		
		XSSFFont font = sheetTablesIPAndExport.getWorkbook().createFont();
		font.setBold(true);
		font.setFontHeightInPoints((short) 12);
		cellStyleCommonTablesIPAndExport.setFont(font);			
		cellStyleCommonTablesIPAndExport.setFillForegroundColor(IndexedColors.PALE_BLUE.getIndex());
		cellStyleCommonTablesIPAndExport.setFillPattern(FillPatternType.SOLID_FOREGROUND);

		XSSFCellStyle cellStyleTablesIPAndExport = sheetTablesIPAndExport.getWorkbook().createCellStyle();
		XSSFFont fontIPAndExport = sheetTablesIPAndExport.getWorkbook().createFont();
		fontIPAndExport.setBold(true);
		fontIPAndExport.setFontHeightInPoints((short) 12);
		cellStyleTablesIPAndExport.setFont(fontIPAndExport);
		cellStyleTablesIPAndExport.setFillForegroundColor(IndexedColors.YELLOW.getIndex());			
		cellStyleTablesIPAndExport.setFillPattern(FillPatternType.SOLID_FOREGROUND);
		List lParamlist = new ArrayList();
		lParamlist.add(context);
		lParamlist.add(workbook);
		lParamlist.add(rowHeaderTablesIPAndExport);
		lParamlist.add(cellStyleCommonTablesIPAndExport);
		lParamlist.add(cellStyleTablesIPAndExport);
		lParamlist.add(mlIpClassAll);
		lParamlist.add(sheetTablesIPAndExport);
		lParamlist.add(strHyperlink);
		// Modified by DSM Reports (Sogeti) for 22x.03 (August CW 2023) Defect 54091 - Start
        lParamlist.add(styleGlobal);
        // Modified by DSM Reports (Sogeti) for 22x.03 (August CW 2023) Defect 54091 - End
		pg.updateWorksheetTableIPAndExport(lParamlist);
	}
   	//Added code for Requirement id 46223 - IP & Export Control Tab in Part & Spec Reports - Ends
   	if(strSelectedTabs.contains(TAB_SUBSTITUTEPARTSIN)){
		outLog.print("updating Worksheet TAB_SUBSTITUTEPARTSIN \n");
		outLog.flush();
		XSSFSheet sheetSubstitutePartsIn = workbook.createSheet(strSheetSubstitutePartsIn);
		XSSFRow rowHeaderSubstitutePartsIn = sheetSubstitutePartsIn.createRow(0);
		XSSFCellStyle cellStyleSubstitutePartsIn = sheetSubstitutePartsIn.getWorkbook().createCellStyle();
		XSSFFont xsfontDesignParameter = sheetSubstitutePartsIn.getWorkbook().createFont();
		xsfontDesignParameter.setBold(true);
		xsfontDesignParameter.setFontHeightInPoints((short) 12);
		cellStyleSubstitutePartsIn.setFont(xsfontDesignParameter);
		cellStyleSubstitutePartsIn.setFillForegroundColor(IndexedColors.PALE_BLUE.getIndex());			
		cellStyleSubstitutePartsIn.setFillPattern(FillPatternType.SOLID_FOREGROUND);
		// Modified by DSM Reports (Sogeti) for 22x.03 (August CW 2023) Defect 54091 - Start
		//Need an Exception as it is an existing method 
        pg.updateWorksheetSubstitutePartsIn(context, workbook, rowHeaderSubstitutePartsIn, cellStyleSubstitutePartsIn, mlSubstitutePartsIn, sheetSubstitutePartsIn, strHyperlink, outLog, styleGlobal);
        // Modified by DSM Reports (Sogeti) for 22x.03 (August CW 2023) Defect 54091 - End
		}
   	//Added the code for 22x Requirement 45443 - Ends
	
	//Commented for requirement-- 34943--starts
/* 	if(strSelectedTabs.contains("Component Materials")){
		// 8 Sheet Creation for Component Materials
		XSSFSheet sheetCompMaterials = workbook.createSheet(strComponentMaterials);			
		XSSFRow rowHeaderCompMaterials = sheetCompMaterials.createRow(0);
		//Cell Style for Component Materials --Begin	
		XSSFCellStyle cellStyleCompMaterials = sheetCompMaterials.getWorkbook().createCellStyle();
		XSSFFont fontCompMaterials = sheetCompMaterials.getWorkbook().createFont();
		fontCompMaterials.setBold(true);
		fontCompMaterials.setFontHeightInPoints((short) 12);
		cellStyleCompMaterials.setFont(fontCompMaterials);	
		cellStyleCompMaterials.setFillForegroundColor(IndexedColors.PALE_BLUE.getIndex());			
		cellStyleCompMaterials.setFillPattern(FillPatternType.SOLID_FOREGROUND);
		//Cell Style for Component Materials --End	
		updateWorksheetComponentMaterials(context,workbook,rowHeaderCompMaterials,cellStyleCompMaterials,mlCompMaterials,sheetCompMaterials);
	} */
	//Commented for requirement-- 34943--ends
	
	
	//Commented code for defect id: 32246--Starts
	// 10 Sheet Creation for Peer Review
	/* XSSFSheet sheetPeerReview = workbook.createSheet(strPeerReview);			
	XSSFRow rowHeaderPeerReview = sheetPeerReview.createRow(0);	 */
	//Commented code for defect id: 32246--Ends
 
	//Commented for Defect Id : 32246-- Starts
	//Cell Style for Peer Review --Begin	
	/* XSSFCellStyle cellStylePeerReview = sheetPeerReview.getWorkbook().createCellStyle();
	XSSFFont fontPeerReview = sheetPeerReview.getWorkbook().createFont();
	fontPeerReview.setBold(true);
	fontPeerReview.setFontHeightInPoints((short) 12);
	cellStylePeerReview.setFont(fontPeerReview);	
	cellStylePeerReview.setFillForegroundColor(IndexedColors.PALE_BLUE.getIndex());			
	cellStylePeerReview.setFillPattern(FillPatternType.SOLID_FOREGROUND); */
	//Cell Style for Peer Review --End	
	//Commented for Defect Id : 32246-- Ends

	
	//Commented code for defect id: 32246--Starts
	//updateWorksheetPeerReview(context,workbook,rowHeaderPeerReview,cellStylePeerReview,mlPeerReviewTask,sheetPeerReview);
	//Commented code for defect id: 32246--Ends
	Date now = new Date();
    SimpleDateFormat smpdf = new SimpleDateFormat("MM-dd-yyyy");
    String strReportExtractedDate = smpdf.format(now);	
    String strUserName_temp = strUserName.replace(".","-");
    // To replace the first word of the existing file name format by use entered Input File Name.if this field is empty follow the default format :Start
    if(UIUtil.isNotNullAndNotEmpty(strReportFileName)) {
    	strReportName = strReportFileName+"_"+strReportExtractedDate+"_"+strUserName_temp+"_"+String.valueOf(System.currentTimeMillis())+"." + strReportExtension;
    } else {
    	strReportName = strReportName+"_"+strReportExtractedDate+"_"+strUserName_temp+"_"+String.valueOf(System.currentTimeMillis())+"." + strReportExtension;
    }
    //// To replace the first word of the existing file name format by use entered Input File Name.if this field is empty follow the default format : End
    File sbATSFolder = new File(strReportPath);
	if (!sbATSFolder.exists())  {
		sbATSFolder.mkdirs();
	}
    FileOutputStream outputStream = new FileOutputStream(sbATSFolder.toString()+ File.separator + strReportName);
	workbook.write(outputStream);
	// code to create the object and checking the .excel file in that object
	outLog.print("Report Name: "+ strReportName+ "\n");
	outLog.flush();
	//Added by DSM Reports (Sogeti) for 22x.03 (August CW 2023) Requirement 47102 - Starts
	createDSMReportObject(context,sbATSFolder.toString(),strReportName,strReportObjectId, strUserName);
	//Added by DSM Reports (Sogeti) for 22x.03 (August CW 2023) Requirement 47102 - Ends
	if (outputStream != null)
	{				
		outputStream.flush();
		outputStream.close();		
	}
	
	//to delete the .xls file once its checked in to the newly created object
	//Removed deleteFiles method for defect id 34027 
	mlWeightCharacteristics.clear();
	mlPlants.clear();
	mlAttribute.clear();
	mlPerformanceCharacteristicsAll.clear();
	mlCompMaterials.clear();
	mlPeerReviewTask.clear();
	mlParentChildBOM.clear();
	mlParentChildEBOMWD.clear();
	mlWeightsAndDim.clear();
	//Added code for Requirement id 46223 - IP & Export Control Tab in Part & Spec Reports - Starts
	mlIpClassAll.clear();
	//Added code for Requirement id 46223 - IP & Export Control Tab in Part & Spec Reports - Ends
	mlCompEquiDetails.clear();
	mlSpecsDocsAll.clear();
	mlSpecsRefDocsAll.clear();
	//Added code for Requirement Id:46224 - Master Specification info addition to Part & Spec report - Starts 
	mlMasterSpecAll.clear();
	//Added code for Requirement Id:46224 - Master Specification info addition to Part & Spec report - Ends 
	mlApprove.clear();
	mlProducingFormulaAll.clear();
	mlNotes.clear();
	mlFormulaIngredient.clear();
	mlSAPBOM.clear();
	mlViewSubstituteDetails.clear();
	mlSubstanceAndMaterials.clear();
	mlGPSAssessments.clear();
	mlCountryClearance.clear();
	mlMarketOfSale.clear();
	mlMOSCompDetails.clear(); //Added by DSM for 22x CW-05 for Requirement 49721  -changes for DSM Reports MOS Components - START/END
	mlCompEquiDetailsMEP.clear();
	mlMEPSEPCertification.clear();
	mlPartCerti.clear();
	mlAlternate.clear();
	mlMaterialsAndCompositions.clear();
	
	String strEndTime = null; 
	strEndTime = new SimpleDateFormat(DATE_YMDHS).format(new Date());		
	outLog.print("Report completed for: "+strUserName+": " +strReportFileName+ "-------\n");
	outLog.print("-------Time completed: "+strEndTime+"-------\n");	
	outLog.print("-------\n");
	outLog.flush();
	} catch (Exception e) {
		e.printStackTrace();
	} 
}
	
/**This method is used to update the worksheet for MEP-SEP Component Equivalents.
 * @param context
 * @param workbook
 * @param rowHeaderCompEquivalent
 * @param cellStyleCompEquivalent
 * @param cellStyleCompEquiMEP
 * @param cellStyleCompEquiSEP
 * @param mlCompEquiDetailsMEP
 * @param sheetMEPSEP
 * @return void
 */
private void updateWorksheetCompEquivalentMEPSEP(Context context, XSSFWorkbook workbook, XSSFRow rowHeaderCompEquivalent, XSSFCellStyle cellStyleCompEquivalent, MapList mlCompEquiDetailsMEP, XSSFSheet sheetMEPSEP,String strHyperlink, XSSFCellStyle styleGlobal) {
	
	try {
		//Added code for 2018x.6 Requirement id 36700 Ability to generate Part and Spec report with without hyperlink Starts
		String strHyperlinkLimit = EnoviaResourceBundle.getProperty(context, EMXCPNSTRINGRESOURCE, context.getLocale(),"emxCPN.PartAndSpecReport.HyperlinkLimit");
		int iHyperLinkLimit = Integer.parseInt(strHyperlinkLimit);
		int iRowCountAll=0;
		//Added code for 2018x.6 Requirement id 36700 Ability to generate Part and Spec report with without hyperlink Ends
		String sLanguage = context.getSession().getLanguage();
		String strColumnNames = i18nNow.getI18nString("emxCPN.FamilyCareReport.Worksheet.MEPSEPComponentEquivalents.ColumnTypes",EMXCPNSTRINGRESOURCE, sLanguage);
		String strColumnName = DomainConstants.EMPTY_STRING;
		String strColumnValue = DomainConstants.EMPTY_STRING;
		String columnName = DomainConstants.EMPTY_STRING;
		StringList slIndividualColumnNames = FrameworkUtil.split(strColumnNames, COMMA);
		for (int i = 0;i<slIndividualColumnNames.size();i++) {
			columnName = slIndividualColumnNames.get(i);
			strColumnName = String.valueOf(columnName).trim();
			strColumnValue = EnoviaResourceBundle.getProperty(context, EMXCPNSTRINGRESOURCE, context.getLocale(),"emxCPN.FamilyCareReport.Worksheet.Column."+strColumnName);
			Cell cell = rowHeaderCompEquivalent.createCell(i);
			cell.setCellStyle(cellStyleCompEquivalent);
			//Added For Defect:44470 - Removing Trailing Spaces - Starts
			cell.setCellValue(strColumnValue.trim());	
			//Added For Defect:44470 - Removing Trailing Spaces - Ends
		}
	
		int rowCount1 = 0;
		String strTypeName = DomainConstants.EMPTY_STRING;
		int iListSize=mlCompEquiDetailsMEP.size();
		//Added code for Req Id : 33634 - Hyperlinks--Starts
		String strValue = DomainConstants.EMPTY_STRING;
		String strParentId = DomainConstants.EMPTY_STRING;
		String strChildId = DomainConstants.EMPTY_STRING;
		String strHyperlinkId = DomainConstants.EMPTY_STRING;
		String strCellValue = DomainConstants.EMPTY_STRING;
		String strDerivedId = DomainConstants.EMPTY_STRING;
		String strCAId = DomainConstants.EMPTY_STRING;
		//Added code for Req Id : 33634 - Hyperlinks--Ends
		//Added code for Req Ids : 33656, 33871, 33872-New Tab : MEP-SEP Component Equivalents--Starts
		String strMEPSEP = DomainConstants.EMPTY_STRING;
		String strSUPName = DomainConstants.EMPTY_STRING;
		String strPartPolicy = DomainConstants.EMPTY_STRING;
		//Added code for Req Ids : 33656, 33871, 33872-New Tab : MEP-SEP Component Equivalents--Ends
		HashMap hm= new HashMap<>();
		Map hmCommonCol = new HashMap<>();
		Map<String,Object> mpCompEquivalent = new HashMap<>();
		int columnCount1 = 0;
		String[] strSplittedValue;
		String strTypeDisplayName=DomainConstants.EMPTY_STRING;
		String strCurrent = DomainConstants.EMPTY_STRING;
		String strPartName = DomainConstants.EMPTY_STRING;
		Map<String,Object> mpVendorInfo = new HashMap<>();
		for (int i=0;i<iListSize;i++){
			//Added code for 2018x.6 Requirement id 36700 Ability to generate Part and Spec report with without hyperlink Starts
			iRowCountAll = iRowCountAll + 1;
			//Added code for 2018x.6 Requirement id 36700 Ability to generate Part and Spec report with without hyperlink Ends
			XSSFRow row = sheetMEPSEP.createRow(++rowCount1);
			columnCount1 = 0;
			mpCompEquivalent = (Map)mlCompEquiDetailsMEP.get(i);
			hmCommonCol= (Map)mpCompEquivalent.get(COMMONCOLUMNS);
			strMEPSEP = (String)hmCommonCol.get(DomainConstants.SELECT_NAME);
			strPartPolicy = (String)hmCommonCol.get(DomainConstants.SELECT_POLICY);
			mpVendorInfo = (Map<String, Object>) mpCompEquivalent.get("VendorDetails");
			if(strPartPolicy.equalsIgnoreCase(pgV3Constants.POLICY_MANUFACTUREREQUIVALENT) || strMEPSEP.startsWith("MEP-")){
				strCurrent = (String)hmCommonCol.get(DomainConstants.SELECT_CURRENT);
				//Fetching the Types Display name --Begin
				
				strTypeName = (String)hmCommonCol.get(DomainConstants.SELECT_TYPE);
				strTypeDisplayName= getTypeDisplayName(context,strTypeName);
				//Added code for Req Id : 33634 - Hyperlinks--Starts
				strChildId = (String)mpCompEquivalent.get(MRID);
				strParentId = (String)hmCommonCol.get(DomainConstants.SELECT_ID);
				strDerivedId = (String)hmCommonCol.get("to["+pgV3Constants.RELATIONSHIP_DERIVED+"].from.id");
				strCAId = (String)hmCommonCol.get(SCAID);
				//Added code for Req Id : 33634 - Hyperlinks--Ends
				//Added the code for the Defect ID : 25104 - CA Tab is Empty : Starts
				//Code Upgrade for 2018x Data Model - Starts
				strPartName = (String) mpCompEquivalent.get(MRNAME);
				//Added by DSM Reports (Sogeti) for 2022x.4 (APR CW 2024) Defect 55875 - Start
				if( UIUtil.isNotNullAndNotEmpty(strCAId) && !strCAId.contains(HYPERLINK_PIPE)) {
					if(hmCommonCol.get(CAREALIZEDNAME) != null && hmCommonCol.get(CAPROPOSEDNAME) != null) {
						//Added code for Req Id : 33634 - Hyperlinks--Starts
						hm.put(0, HYPERLINK+hmCommonCol.get(CAREALIZEDNAME)+HYPERLINK_PIPE+strCAId);
						//Added code for Req Id : 33634 - Hyperlinks--Ends
					} else if(hmCommonCol.get(CAREALIZEDNAME) != null){
						//Added code for Req Id : 33634 - Hyperlinks--Starts
						hm.put(0, HYPERLINK+hmCommonCol.get(CAREALIZEDNAME)+HYPERLINK_PIPE+strCAId);
						//Added code for Req Id : 33634 - Hyperlinks--Ends
					} else if(hmCommonCol.get(CAPROPOSEDNAME) != null){
						//Added code for Req Id : 33634 - Hyperlinks--Starts
						hm.put(0, HYPERLINK+hmCommonCol.get(CAPROPOSEDNAME)+HYPERLINK_PIPE+strCAId);
						//Added code for Req Id : 33634 - Hyperlinks--Ends
					} else {
						hm.put(0, DomainConstants.EMPTY_STRING);
					}
				}else{
					hm.put(0, hmCommonCol.get(CAPROPOSEDNAME));
				}
				//Added by DSM Reports (Sogeti) for 2022x.4 (APR CW 2024) Defect 55875 - End
				//Code Upgrade for 2018x Data Model - Ends	
				//Added the code for the Defect ID : 25104 - CA Tab is Empty : Ends	
				hm.put(1, hmCommonCol.get(pgV3Constants.SELECT_ATTRIBUTE_REASONFORCHANGE));
				//Added code for Req Id : 33634 - Hyperlinks--Starts
				hm.put(2, HYPERLINK+hmCommonCol.get(DomainConstants.SELECT_NAME)+HYPERLINK_PIPE+strParentId);
				//Added code for Req Id : 33634 - Hyperlinks--Ends
				hm.put(3, hmCommonCol.get(pgV3Constants.SELECT_ATTRIBUTE_TITLE));
				hm.put(4, strTypeDisplayName);
				//Code for requirement to addition of revision and state on all tabs except attribute -- Starts
				hm.put(5, hmCommonCol.get(DomainConstants.SELECT_REVISION));
				hm.put(6, hmCommonCol.get(DomainConstants.SELECT_CURRENT));
				//Code for requirement to addition of revision and state on all tabs except attribute -- Ends
				//Added code for defect id 38253 Add vendor details for MEP SEP Component Equivalents Starts
				hm.put(7,  mpVendorInfo.get("VendorName"));
				hm.put(8, mpVendorInfo.get("VendorMarket"));
				hm.put(9, mpVendorInfo.get("VendorCity"));
				//Added code for defect id 38253 Add vendor details for MEP SEP Component Equivalents Ends
				if(mpCompEquivalent.containsKey(MANUFACTURER)){
					strPartName = (String)mpCompEquivalent.get(MRNAME);
					if(UIUtil.isNotNullAndNotEmpty(strPartName) && !strPartName.startsWith("SEP-")){
						//Added code for Req Id : 33634 - Hyperlinks--Starts
						hm.put(10,  HYPERLINK+mpCompEquivalent.get(MRNAME)+HYPERLINK_PIPE+strChildId);
						//Added code for Req Id : 33634 - Hyperlinks--Ends
						hm.put(11,  mpCompEquivalent.get(MRREV));
						hm.put(12,  mpCompEquivalent.get(MRTYPE));
						hm.put(13, mpCompEquivalent.get(MRDESC));
						hm.put(14, mpCompEquivalent.get(MRSTATE));
						hm.put(15, mpCompEquivalent.get(MRPQRNAME));
						hm.put(16, mpCompEquivalent.get(MRPQRSTATE));
						hm.put(17, mpCompEquivalent.get(MRPQRREV));					
						hm.put(18, DomainConstants.EMPTY_STRING);
						hm.put(19, DomainConstants.EMPTY_STRING);
						hm.put(20, DomainConstants.EMPTY_STRING);
						hm.put(21, DomainConstants.EMPTY_STRING);
						hm.put(22, DomainConstants.EMPTY_STRING);
						hm.put(23, DomainConstants.EMPTY_STRING);
						hm.put(24, DomainConstants.EMPTY_STRING);
						XSSFCellStyle style = workbook.createCellStyle();
						style = setForeGroundColor(strCurrent, style);
						//Added by DSM Reports (Sogeti) for 2022x.4 (APR CW 2024) Defect 55875 - Start
						XSSFCellStyle style1 = workbook.createCellStyle();
						//Added by DSM Reports (Sogeti) for 2022x.4 (APR CW 2024) Defect 55875 - End
						for(int j=0;j<hm.size();j++){
							//Modified the code for _2022x_Aug CW Req-47097 - Start
							// Modified by DSM Reports (Sogeti) for 22x.03 (August CW 2023) Defect 54091 - Start
							Cell cell = row.createCell(columnCount1++);
							if (j == 2) {
								style = makeColumnNumeric(workbook, style);
							}
							cell.setCellStyle(style);
							
							// Modified by DSM Reports (Sogeti) for 22x.03 (August CW 2023) Defect 54091 - End
							//Modified the code for _2022x_Aug CW Req-47097 - End
							//cell.setCellValue((String)hm.get(j));
							//Added code for Req Id : 33634 - Hyperlinks--Starts
							strCellValue = (String)hm.get(j);
							if(UIUtil.isNotNullAndNotEmpty(strCellValue) && strCellValue.startsWith(HYPERLINK_COMPARE)){
								strSplittedValue = strCellValue.split("\\|",-1); 
								strHyperlinkId = strSplittedValue[(strSplittedValue.length)-1];
								strValue = strSplittedValue[(strSplittedValue.length)-2];
								//Added code for 2018x.6 Requirement id 36700 Ability to generate Part and Spec report with without hyperlink Starts
								if(pgV3Constants.TRUE.equalsIgnoreCase(strHyperlink) && iRowCountAll < iHyperLinkLimit){
									getHyperlink(context,cell,workbook,strValue,strHyperlinkId,strCurrent);
								
								} else if(UIUtil.isNotNullAndNotEmpty(strValue)) {					
									cell.setCellValue(strValue);
								}
								//Added code for 2018x.6 Requirement id 36700 Ability to generate Part and Spec report with without hyperlink Ends
							}else {
								if(UIUtil.isNotNullAndNotEmpty(strCellValue)){
									cell.setCellValue(strCellValue);
									//Added by DSM Reports (Sogeti) for 2022x.4 (APR CW 2024) Defect 55875 - Start
									if(j == 0) {
										style1.cloneStyleFrom(style);
										style1.setWrapText(true);
										cell.setCellStyle(style1);	
									}
									//Added by DSM Reports (Sogeti) for 2022x.4 (APR CW 2024) Defect 55875 - End
								}
							}
							//Added code for Req Id : 33634 - Hyperlinks--Ends
						}
					}
					if(UIUtil.isNotNullAndNotEmpty(strPartName) && strPartName.startsWith("SEP-")){
						hm.put(10,  DomainConstants.EMPTY_STRING);
						hm.put(11,  DomainConstants.EMPTY_STRING);
						hm.put(12,  DomainConstants.EMPTY_STRING);
						hm.put(13, DomainConstants.EMPTY_STRING);
						hm.put(14, DomainConstants.EMPTY_STRING);
						hm.put(15, DomainConstants.EMPTY_STRING);
						hm.put(16, DomainConstants.EMPTY_STRING);
						hm.put(17, DomainConstants.EMPTY_STRING);					
						//Added code for Req Id 33634 Hyperlinks Starts
						hm.put(18, HYPERLINK+mpCompEquivalent.get(MRNAME)+HYPERLINK_PIPE+strChildId);
						//Added code for Req Id 33634 Hyperlinks Ends
						hm.put(19, mpCompEquivalent.get(MRREV));
						hm.put(20, mpCompEquivalent.get(MRTYPE));
						hm.put(21, mpCompEquivalent.get(MRTITLE));
						hm.put(22, mpCompEquivalent.get(MRDESC));
						hm.put(23, mpCompEquivalent.get(MANUFACTURER));
						hm.put(24, mpCompEquivalent.get(MRSTATE));
						XSSFCellStyle style = workbook.createCellStyle();
						style = setForeGroundColor(strCurrent, style);
						//Added by DSM Reports (Sogeti) for 2022x.4 (APR CW 2024) Defect 55875 - Start
						XSSFCellStyle style1 = workbook.createCellStyle();
						//Added by DSM Reports (Sogeti) for 2022x.4 (APR CW 2024) Defect 55875 - End
						
						for(int j=0;j<hm.size();j++){
							//Modified the code for _2022x_Aug CW Req-47097 - Start
							// Modified by DSM Reports (Sogeti) for 22x.03 (August CW 2023) Defect 54091 - Start
							Cell cell = row.createCell(columnCount1++);
							if (j == 2) {
								style = makeColumnNumeric(workbook, style);
							}
							cell.setCellStyle(style);
							// Modified by DSM Reports (Sogeti) for 22x.03 (August CW 2023) Defect 54091 - End
							//Modified the code for _2022x_Aug CW Req-47097 - End
							//cell.setCellValue((String)hm.get(j));
							//Added code for Req Id : 33634 - Hyperlinks--Starts
							strCellValue = (String)hm.get(j);
							if(UIUtil.isNotNullAndNotEmpty(strCellValue) && strCellValue.startsWith(HYPERLINK_COMPARE)){
								strSplittedValue = strCellValue.split("\\|",-1); 
								strHyperlinkId = strSplittedValue[(strSplittedValue.length)-1];
								strValue = strSplittedValue[(strSplittedValue.length)-2];
								if(pgV3Constants.TRUE.equalsIgnoreCase(strHyperlink) && iRowCountAll < iHyperLinkLimit){
									getHyperlink(context,cell,workbook,strValue,strHyperlinkId,strCurrent);
								
								} else if(UIUtil.isNotNullAndNotEmpty(strValue)){
									cell.setCellValue(strValue);
								}
							
							}else {
								cell.setCellValue((String)hm.get(j));
								//Added by DSM Reports (Sogeti) for 2022x.5 (APR CW 2024) Defect 55875 - Start
								if(j == 0) {
									style1.cloneStyleFrom(style);
									style1.setWrapText(true);
									cell.setCellStyle(style1);
								}
								//Added by DSM Reports (Sogeti) for 2022x.5 (APR CW 2024) Defect 55875 - End
							}
							//Added code for Req Id : 33634 - Hyperlinks--Ends
						}
					}
				}
			}
			else if(strPartPolicy.equalsIgnoreCase(pgV3Constants.POLICY_SUPPLIEREQUIVALENT) || strMEPSEP.startsWith("SEP-")){	
			hmCommonCol= (Map)mpCompEquivalent.get(COMMONCOLUMNS);
				strCurrent = (String)hmCommonCol.get(DomainConstants.SELECT_CURRENT);
				//Fetching the Types Display name --Begin
				strTypeName = (String)hmCommonCol.get(DomainConstants.SELECT_TYPE);
				strTypeDisplayName = getTypeDisplayName(context,strTypeName);
				//Added code for Req Id : 33634 - Hyperlinks--Starts
				strChildId = (String)mpCompEquivalent.get(SUPID);
				strParentId = (String)hmCommonCol.get(DomainConstants.SELECT_ID);
				strDerivedId = (String)hmCommonCol.get("to["+pgV3Constants.RELATIONSHIP_DERIVED+"].from.name");
				strCAId = (String)hmCommonCol.get(SCAID);
				//Added code for Req Id : 33634 - Hyperlinks--Ends
				//Added code for defect id 38253 Add vendor details for MEP SEP Component Equivalents Starts
				mpVendorInfo = (Map<String, Object>) mpCompEquivalent.get("VendorDetails");
				//Added code for defect id 38253 Add vendor details for MEP SEP Component Equivalents Ends
				//if(!strCurrent.equalsIgnoreCase("Release") || strCurrent.equalsIgnoreCase("Released")){
				//Added the code for the Defect ID : 25104 - CA Tab is Empty : Starts
				//Code Upgrade for 2018x Data Model - Starts
				
				//Added by DSM Reports (Sogeti) for 2022x.5 (APR CW 2024) Defect 55875 - Start
				if(UIUtil.isNotNullAndNotEmpty(strCAId) && !strCAId.contains(HYPERLINK_PIPE)) {
					if(hmCommonCol.get(CAREALIZEDNAME) != null && hmCommonCol.get(CAPROPOSEDNAME) != null) {
						//Added code for Req Id : 33634 - Hyperlinks--Starts
						hm.put(0, HYPERLINK+hmCommonCol.get(CAREALIZEDNAME)+HYPERLINK_PIPE+strCAId);
						//Added code for Req Id : 33634 - Hyperlinks--Ends
					} else if(hmCommonCol.get(CAREALIZEDNAME) != null){
						//Added code for Req Id : 33634 - Hyperlinks--Starts
						hm.put(0, HYPERLINK+hmCommonCol.get(CAREALIZEDNAME)+HYPERLINK_PIPE+strCAId);
						//Added code for Req Id : 33634 - Hyperlinks--Ends
					} else if(hmCommonCol.get(CAPROPOSEDNAME) != null){
						//Added code for Req Id : 33634 - Hyperlinks--Starts
						hm.put(0, HYPERLINK+hmCommonCol.get(CAPROPOSEDNAME)+HYPERLINK_PIPE+strCAId);
						//Added code for Req Id : 33634 - Hyperlinks--Ends
					} else {
						hm.put(0, DomainConstants.EMPTY_STRING);
					}
				} else {
					hm.put(0,hmCommonCol.get(CAPROPOSEDNAME));
				}
				//Added by DSM Reports (Sogeti) for 2022x.5 (APR CW 2024) Defect 55875 - End
				//Code Upgrade for 2018x Data Model - Ends
				//Added the code for the Defect ID : 25104 - CA Tab is Empty : Ends
				hm.put(1, hmCommonCol.get(pgV3Constants.SELECT_ATTRIBUTE_REASONFORCHANGE));
				//Added code for Req Id : 33634 - Hyperlinks--Starts
				hm.put(2, HYPERLINK+hmCommonCol.get(DomainConstants.SELECT_NAME)+HYPERLINK_PIPE+strParentId);
				//Added code for Req Id : 33634 - Hyperlinks--Ends
				hm.put(3, hmCommonCol.get(pgV3Constants.SELECT_ATTRIBUTE_TITLE));
				hm.put(4, strTypeDisplayName);
				//Code for requirement to addition of revision and state on all tabs except attribute -- Starts
				hm.put(5, hmCommonCol.get(pgV3Constants.SELECT_REVISION));
				hm.put(6, hmCommonCol.get(pgV3Constants.SELECT_CURRENT));
				//Code for requirement to addition of revision and state on all tabs except attribute -- Ends
				//Added code for defect id 38253 Add vendor details for MEP SEP Component Equivalents Starts
				hm.put(7,  mpVendorInfo.get("VendorName"));
				hm.put(8, mpVendorInfo.get("VendorMarket"));
				hm.put(9, mpVendorInfo.get("VendorCity"));
				//Added code for defect id 38253 Add vendor details for MEP SEP Component Equivalents Ends
				if(mpCompEquivalent.containsKey(SUPPLIER)){
						//Updated code for Req Id : 33634 - Hyperlinks--Starts
						hm.put(10,  HYPERLINK+mpCompEquivalent.get(SUPNAME)+HYPERLINK_PIPE+strChildId);
						//Updated code for Req Id : 33634 - Hyperlinks--Ends
						hm.put(11,  mpCompEquivalent.get(SUPREV));
						hm.put(12,  mpCompEquivalent.get(SUPTYPE));
						hm.put(13, mpCompEquivalent.get(SUPDESC));
						hm.put(14, mpCompEquivalent.get(SUPSTATE));
						hm.put(15, mpCompEquivalent.get(SUPPQRNAME));
						hm.put(16, mpCompEquivalent.get(SUPPQRSTATE));
						hm.put(17, mpCompEquivalent.get(SUPPQRREV));
						hm.put(18, DomainConstants.EMPTY_STRING);
						hm.put(19, DomainConstants.EMPTY_STRING);
						hm.put(20, DomainConstants.EMPTY_STRING);
						hm.put(21, DomainConstants.EMPTY_STRING);
						hm.put(22, DomainConstants.EMPTY_STRING);
						hm.put(23, DomainConstants.EMPTY_STRING);
						hm.put(24, DomainConstants.EMPTY_STRING);
						XSSFCellStyle style = workbook.createCellStyle();
						style = setForeGroundColor(strCurrent, style);
						//Added by DSM Reports (Sogeti) for 2022x.5 (APR CW 2024) Defect 55875 - Start
						XSSFCellStyle style1 = workbook.createCellStyle();
						//Added by DSM Reports (Sogeti) for 2022x.5 (APR CW 2024) Defect 55875 - End
						
						for(int j=0;j<hm.size();j++){
							//Modified the code for _2022x_Aug CW Req-47097 - Start
							// Modified by DSM Reports (Sogeti) for 22x.03 (August CW 2023) Defect 54091 - Start
							Cell cell = row.createCell(columnCount1++);
							if (j == 2) {
								style = makeColumnNumeric(workbook, style);
							}
							cell.setCellStyle(style);
							// Modified by DSM Reports (Sogeti) for 22x.03 (August CW 2023) Defect 54091 - End
							//Modified the code for _2022x_Aug CW Req-47097 - End
							//Added code for Req Id : 33634 - Hyperlinks--Starts
							strCellValue = (String)hm.get(j);
							if(UIUtil.isNotNullAndNotEmpty(strCellValue) && strCellValue.startsWith(HYPERLINK_COMPARE)){
								strSplittedValue = strCellValue.split("\\|",-1); 
								strHyperlinkId = strSplittedValue[(strSplittedValue.length)-1];
								strValue = strSplittedValue[(strSplittedValue.length)-2];
								if(pgV3Constants.TRUE.equalsIgnoreCase(strHyperlink) && iRowCountAll < iHyperLinkLimit){
									getHyperlink(context,cell,workbook,strValue,strHyperlinkId,strCurrent);
								
								} else if(UIUtil.isNotNullAndNotEmpty(strValue)){
									cell.setCellValue(strValue);
								}
							}else {
								cell.setCellValue((String)hm.get(j));
								//Added by DSM Reports (Sogeti) for 2022x.5 (APR CW 2024) Defect 55875 - Start
								if(j == 0) {
									style1.cloneStyleFrom(style);
									style1.setWrapText(true);
									cell.setCellStyle(style1);
								}
								//Added by DSM Reports (Sogeti) for 2022x.5 (APR CW 2024) Defect 55875 - End
							}
							//Added code for Req Id : 33634 - Hyperlinks--Ends
						}
				}
				if(mpCompEquivalent.containsKey(MANUFACTURER)){
					strSUPName = (String) mpCompEquivalent.get(MRNAME);
						strChildId = (String)mpCompEquivalent.get(MRID);
						hm.put(10,  DomainConstants.EMPTY_STRING);
						hm.put(11,  DomainConstants.EMPTY_STRING);
						hm.put(12,  DomainConstants.EMPTY_STRING);
						hm.put(13, DomainConstants.EMPTY_STRING);
						hm.put(14, DomainConstants.EMPTY_STRING);
						hm.put(15, DomainConstants.EMPTY_STRING);
						hm.put(16, DomainConstants.EMPTY_STRING);
						hm.put(17, DomainConstants.EMPTY_STRING);				
						hm.put(18, HYPERLINK+mpCompEquivalent.get(MRNAME)+HYPERLINK_PIPE+strChildId);
						hm.put(19, mpCompEquivalent.get(MRREV));
						hm.put(20, mpCompEquivalent.get(MRTYPE));
						hm.put(21, mpCompEquivalent.get(MRTITLE));
						hm.put(22, mpCompEquivalent.get(MRDESC));
						hm.put(23, mpCompEquivalent.get(MANUFACTURER));
						hm.put(24, mpCompEquivalent.get(MRSTATE));	
						XSSFCellStyle style = workbook.createCellStyle();
						style = setForeGroundColor(strCurrent, style);
						//Added by DSM Reports (Sogeti) for 2022x.5 (APR CW 2024) Defect 55875 - Start
						XSSFCellStyle style1 = workbook.createCellStyle();
						//Added by DSM Reports (Sogeti) for 2022x.5 (APR CW 2024) Defect 55875 - End
						
						for(int j=0;j<hm.size();j++){
							//Modified the code for _2022x_Aug CW Req-47097 - Start
							// Modified by DSM Reports (Sogeti) for 22x.03 (August CW 2023) Defect 54091 - Start
							Cell cell = row.createCell(columnCount1++);
							if (j == 2) {
								style = makeColumnNumeric(workbook, style);
							}

							cell.setCellStyle(style);
							
							// Modified by DSM Reports (Sogeti) for 22x.03 (August CW 2023) Defect 54091 - End
							//Modified the code for _2022x_Aug CW Req-47097 - End
							//cell.setCellValue((String)hm.get(j));
							//Added code for Req Id : 33634 - Hyperlinks--Starts
							strCellValue = (String)hm.get(j);
							if(UIUtil.isNotNullAndNotEmpty(strCellValue) && strCellValue.startsWith(HYPERLINK_COMPARE)){
								strSplittedValue = strCellValue.split("\\|",-1); 
								strHyperlinkId = strSplittedValue[(strSplittedValue.length)-1];
								strValue = strSplittedValue[(strSplittedValue.length)-2];
								if(pgV3Constants.TRUE.equalsIgnoreCase(strHyperlink) && iRowCountAll < iHyperLinkLimit){
									getHyperlink(context,cell,workbook,strValue,strHyperlinkId,strCurrent);
								
								} else if(UIUtil.isNotNullAndNotEmpty(strValue)){
									cell.setCellValue(strValue);
								}
							}else {
								cell.setCellValue((String)hm.get(j));
								//Added by DSM Reports (Sogeti) for 2022x.5 (APR CW 2024) Defect 55875 - Start
								if(j == 0) {
									style1.cloneStyleFrom(style);
									style1.setWrapText(true);
									cell.setCellStyle(style1);
								}
								//Added by DSM Reports (Sogeti) for 2022x.5 (APR CW 2024) Defect 55875 - End
							}
							//Added code for Req Id : 33634 - Hyperlinks--Ends
						}
				}
			}
		}
		sheetFormatter(sheetMEPSEP); // Added by DSM Reports (Sogeti) for 22x.04 (Dec CW 2023) Defect 56156 - START/END
	}catch (Exception e) {
		 outLog.print("Exception in  updateWorksheetCompEquivalentMEPSEP: "+e+"\n");
		 outLog.flush();
	} 
}

private void updateWorksheetCompEquivalent(Context context, XSSFWorkbook workbook, XSSFRow rowHeaderCompEquivalent, XSSFCellStyle cellStyleCompEquivalent, XSSFCellStyle cellStyleCompEquiMEP, XSSFCellStyle cellStyleCompEquiSEP, MapList mlCompEquiDetails, XSSFSheet sheetCompEquivalent, String strHyperlink, XSSFCellStyle styleGlobal) {
try {
	//Added code for 2018x.6 Requirement id 36700 Ability to generate Part and Spec report with without hyperlink Starts
	String strHyperlinkLimit = EnoviaResourceBundle.getProperty(context, EMXCPNSTRINGRESOURCE, context.getLocale(),"emxCPN.PartAndSpecReport.HyperlinkLimit");
	int iHyperLinkLimit = Integer.parseInt(strHyperlinkLimit);
	int iRowCountAll=0;
	//Added code for 2018x.6 Requirement id 36700 Ability to generate Part and Spec report with without hyperlink Ends
	String sStringResourceFile="emxCPNStringResource"; 
	String sLanguage = context.getSession().getLanguage();
	String strAttrChangeAction= i18nNow.getI18nString("emxCPN.FamilyCareReport.Worksheet.Column.ChangeAction",sStringResourceFile, sLanguage);
	String strAttrChangeActionReasonForChange= i18nNow.getI18nString("emxCPN.FamilyCareReport.Worksheet.Column.ChangeActionReasonForChange",sStringResourceFile, sLanguage);
	String strAttrNameOrNumber= i18nNow.getI18nString("emxCPN.FamilyCareReport.Worksheet.Column.NameOrNumber",sStringResourceFile, sLanguage);
	String strAttrTitle= i18nNow.getI18nString("emxCPN.FamilyCareReport.Worksheet.Column.Title",sStringResourceFile, sLanguage);
	String strAttrType= i18nNow.getI18nString("emxCPN.FamilyCareReport.Worksheet.Column.Type",sStringResourceFile, sLanguage);
	String strCompEquName= i18nNow.getI18nString("emxCPN.FamilyCareReport.Worksheet.ComponentEquivalents.Column.Name",sStringResourceFile, sLanguage);
	String strCompEquRevision= i18nNow.getI18nString("emxCPN.FamilyCareReport.Worksheet.ComponentEquivalents.Column.Revision",sStringResourceFile, sLanguage);
	String strCompEquType= i18nNow.getI18nString("emxCPN.FamilyCareReport.Worksheet.ComponentEquivalents.Column.Type",sStringResourceFile, sLanguage);
	
	//2018x0 April Bug fix :Starts
	String strCompEquTitle= i18nNow.getI18nString("emxCPN.FamilyCareReport.Worksheet.ComponentEquivalents.Column.ComponentEquivalentsTitle",sStringResourceFile, sLanguage);
	//2018x0 April Bug fix :Ends
	//Code for requirement to addition of revision and state on all tabs except attribute - Starts
	
	String strCompEquCellRevision	= i18nNow.getI18nString("emxCPN.FamilyCareReport.Worksheet.Column.Revision",sStringResourceFile, sLanguage);
	String strCompEquCellState		= i18nNow.getI18nString("emxCPN.FamilyCareReport.Worksheet.Column.State",sStringResourceFile, sLanguage);
	//Code for requirement to addition of revision and state on all tabs except attribute - Ends
	String strCompEquDescription= i18nNow.getI18nString("emxCPN.FamilyCareReport.Worksheet.ComponentEquivalents.Column.Description",sStringResourceFile, sLanguage);
	String strCompEquManufacturer= i18nNow.getI18nString("emxCPN.FamilyCareReport.Worksheet.ComponentEquivalents.Column.Manufacturer",sStringResourceFile, sLanguage);
	String strCompEquState= i18nNow.getI18nString("emxCPN.FamilyCareReport.Worksheet.ComponentEquivalents.Column.State",sStringResourceFile, sLanguage);
	String strCompEquPQRName=i18nNow.getI18nString("emxCPN.FamilyCareReport.Worksheet.ComponentEquivalents.Column.PQRName",sStringResourceFile, sLanguage);
	String strCompEquPQRState=i18nNow.getI18nString("emxCPN.FamilyCareReport.Worksheet.ComponentEquivalents.Column.PQRState",sStringResourceFile, sLanguage);
	String strCompEquSEPName=i18nNow.getI18nString("emxCPN.FamilyCareReport.Worksheet.ComponentEquivalents.Column.SEPName",sStringResourceFile, sLanguage);
	String strCompEquSEPRevision=i18nNow.getI18nString("emxCPN.FamilyCareReport.Worksheet.ComponentEquivalents.Column.SEPRevision",sStringResourceFile, sLanguage);
	String strCompEquSEPType=i18nNow.getI18nString("emxCPN.FamilyCareReport.Worksheet.ComponentEquivalents.Column.SEPType",sStringResourceFile, sLanguage);
	
	//2018x0 April Bug fix : Starts
	String strCompEquSEPTitle=i18nNow.getI18nString("emxCPN.FamilyCareReport.Worksheet.ComponentEquivalents.Column.ComponentEquivalentsSEPTitle",sStringResourceFile, sLanguage);
	//2018x0 April Bug fix : Ends
	//String strCompEquSEPArtworkPrimary=i18nNow.getI18nString("emxCPN.FamilyCareReport.Worksheet.ComponentEquivalents.Column.ArtworkPrimary",sStringResourceFile, sLanguage);
	String strCompEquSEPArtworkPrimary="SEP Artwork Primary";
	String strCompEquMEPArtworkPrimary="MEP Artwork Primary";			
	
	String strCompEquSEPDescr=i18nNow.getI18nString("emxCPN.FamilyCareReport.Worksheet.ComponentEquivalents.Column.SEPDescription",sStringResourceFile, sLanguage);
	String strCompEquSEPSupplier=i18nNow.getI18nString("emxCPN.FamilyCareReport.Worksheet.ComponentEquivalents.Column.SEPSupplier",sStringResourceFile, sLanguage);
	String strCompEquSEPState=i18nNow.getI18nString("emxCPN.FamilyCareReport.Worksheet.ComponentEquivalents.Column.SEPState",sStringResourceFile, sLanguage);
	String strCompEquSEPPQRName=i18nNow.getI18nString("emxCPN.FamilyCareReport.Worksheet.ComponentEquivalents.Column.SEPPQRName",sStringResourceFile, sLanguage);
	String strCompEquSEPPQRState=i18nNow.getI18nString("emxCPN.FamilyCareReport.Worksheet.ComponentEquivalents.Column.SEPPQRState",sStringResourceFile, sLanguage);
	String strDerivedFromName=i18nNow.getI18nString("emxCPN.FamilyCareReport.Worksheet.ComponentEquivalents.Column.DerivedFromName",sStringResourceFile, sLanguage);
	String strDerivedFromTitle=i18nNow.getI18nString("emxCPN.FamilyCareReport.Worksheet.ComponentEquivalents.Column.DerivedFromTitle",sStringResourceFile, sLanguage);
	String strPartFamilyName=i18nNow.getI18nString("emxCPN.FamilyCareReport.Worksheet.ComponentEquivalents.Column.PartFamilyName",sStringResourceFile, sLanguage);
	//Start Modified for 22x Changes for auto name of Part Library & Faimly
	String strPartFamilyTitle=i18nNow.getI18nString("emxCPN.FamilyCareReport.Worksheet.ComponentEquivalents.Column.PartFamilyTitle",sStringResourceFile, sLanguage);
	//End Modified for 22x Changes for auto name of Part Library & Faimly
	String strCertificationName=EnoviaResourceBundle.getProperty(context, EMXCPNSTRINGRESOURCE, context.getLocale(),"emxCPN.FamilyCareReport.Worksheet.ComponentEquivalents.Column.CompEquiCertification");
	String strCertificationStatus=EnoviaResourceBundle.getProperty(context, EMXCPNSTRINGRESOURCE, context.getLocale(),"emxCPN.FamilyCareReport.Worksheet.ComponentEquivalents.Column.CompEquiCertificationStatus");
	String strCertificationExpDate=EnoviaResourceBundle.getProperty(context, EMXCPNSTRINGRESOURCE, context.getLocale(),"emxCPN.FamilyCareReport.Worksheet.ComponentEquivalents.Column.CompEquiCertificationExpDate");
	//Added for Apr22 CW requirement 42014 Starts
	String strCertificationSupportDoc=EnoviaResourceBundle.getProperty(context, EMXCPNSTRINGRESOURCE, context.getLocale(),"emxCPN.FamilyCareReport.Worksheet.ComponentEquivalents.Column.CompEquiCertificationSupportDoc");
	//Added for Apr22 CW requirement 42014 Ends
	
	//Header Logic Begin----------------------------------------
	//1 Change Action
	Cell cellChangeAction = rowHeaderCompEquivalent.createCell(0);
	cellChangeAction.setCellStyle(cellStyleCompEquivalent);
	cellChangeAction.setCellValue(strAttrChangeAction);
	
	//2 Change Action 'Reason for Change'
	Cell cellChangeActionReasonForChange = rowHeaderCompEquivalent.createCell(1);
	cellChangeActionReasonForChange.setCellStyle(cellStyleCompEquivalent);
	cellChangeActionReasonForChange.setCellValue(strAttrChangeActionReasonForChange);
	
	//3 Name/Number
	Cell cellNameOrNumber = rowHeaderCompEquivalent.createCell(2);
	cellNameOrNumber.setCellStyle(cellStyleCompEquivalent);
	cellNameOrNumber.setCellValue(strAttrNameOrNumber);
	
	//4 Title
	Cell cellTitle = rowHeaderCompEquivalent.createCell(3);
	cellTitle.setCellStyle(cellStyleCompEquivalent);
	cellTitle.setCellValue(strAttrTitle);
	
	//5 Type
	Cell cellType = rowHeaderCompEquivalent.createCell(4);
	cellType.setCellStyle(cellStyleCompEquivalent);
	cellType.setCellValue(strAttrType);
	
	//6 Revision
	//Code for requirement to addition of revision and state on all tabs except attribute -- Starts
	Cell cellRevision = rowHeaderCompEquivalent.createCell(5);
	cellRevision.setCellStyle(cellStyleCompEquivalent);
	cellRevision.setCellValue(strCompEquCellRevision);
	
	//7 State
	Cell cellState = rowHeaderCompEquivalent.createCell(6);
	cellState.setCellStyle(cellStyleCompEquivalent);
	cellState.setCellValue(strCompEquCellState);
	//Code for requirement to addition of revision and state on all tabs except attribute -- Ends
	
	//8 Name
	Cell cellCompEquiName = rowHeaderCompEquivalent.createCell(7);
	cellCompEquiName.setCellStyle(cellStyleCompEquiMEP);
	cellCompEquiName.setCellValue(strCompEquName);
	
	//9 Revision
	Cell cellCompEquiRevision = rowHeaderCompEquivalent.createCell(8);
	cellCompEquiRevision.setCellStyle(cellStyleCompEquiMEP);
	cellCompEquiRevision.setCellValue(strCompEquRevision);
	
	//10 Type
	Cell cellCompEquiType = rowHeaderCompEquivalent.createCell(9);
	cellCompEquiType.setCellStyle(cellStyleCompEquiMEP);
	cellCompEquiType.setCellValue(strCompEquType);
	
	//2018x0 April Bug Fix
	//11 Title	
	Cell cellCompEquiTitle = rowHeaderCompEquivalent.createCell(10);
	cellCompEquiTitle.setCellStyle(cellStyleCompEquiMEP);
	cellCompEquiTitle.setCellValue(strCompEquTitle);
	
	//11 Description			
	Cell cellCompEquiDescr = rowHeaderCompEquivalent.createCell(11);
	cellCompEquiDescr.setCellStyle(cellStyleCompEquiMEP);
	cellCompEquiDescr.setCellValue(strCompEquDescription);
	
	//12 Manufacturer
	Cell cellCompEquiManufacturer = rowHeaderCompEquivalent.createCell(12);
	cellCompEquiManufacturer.setCellStyle(cellStyleCompEquiMEP);
	cellCompEquiManufacturer.setCellValue(strCompEquManufacturer);
	
	//13 State
	Cell cellCompEquiState = rowHeaderCompEquivalent.createCell(13);
	cellCompEquiState.setCellStyle(cellStyleCompEquiMEP);
	cellCompEquiState.setCellValue(strCompEquState);
	
	//14 PQR Name
	Cell cellCompEquiPQRName= rowHeaderCompEquivalent.createCell(14);
	cellCompEquiPQRName.setCellStyle(cellStyleCompEquiMEP);
	cellCompEquiPQRName.setCellValue(strCompEquPQRName);
	
	//15 PQR State
	Cell cellCompEquiPQRState = rowHeaderCompEquivalent.createCell(15);
	cellCompEquiPQRState.setCellStyle(cellStyleCompEquiMEP);
	cellCompEquiPQRState.setCellValue(strCompEquPQRState);	
	
	//16 MEP Artowrk Primary 
	Cell cellCompEquiArtworkPrimary = rowHeaderCompEquivalent.createCell(16);
	cellCompEquiArtworkPrimary.setCellStyle(cellStyleCompEquiMEP);
	cellCompEquiArtworkPrimary.setCellValue(strCompEquMEPArtworkPrimary);	
	
	//17 SEP Name
	Cell cellCompEquiSEPName = rowHeaderCompEquivalent.createCell(17);
	cellCompEquiSEPName.setCellStyle(cellStyleCompEquiSEP);
	cellCompEquiSEPName.setCellValue(strCompEquSEPName);	
	
	//18 SEP Revision
	Cell cellCompEquiSEPRevision = rowHeaderCompEquivalent.createCell(18);
	cellCompEquiSEPRevision.setCellStyle(cellStyleCompEquiSEP);
	cellCompEquiSEPRevision.setCellValue(strCompEquSEPRevision);	
	
	//19 SEP Type
	Cell cellCompEquiSEPType = rowHeaderCompEquivalent.createCell(19);
	cellCompEquiSEPType.setCellStyle(cellStyleCompEquiSEP);
	cellCompEquiSEPType.setCellValue(strCompEquSEPType);	
	
	//20 SEP Title
	Cell cellCompEquiSEPTitle = rowHeaderCompEquivalent.createCell(20);
	cellCompEquiSEPTitle.setCellStyle(cellStyleCompEquiSEP);
	cellCompEquiSEPTitle.setCellValue(strCompEquSEPTitle);	
	
	//21 SEP Description
	Cell cellCompEquiSEPDescr = rowHeaderCompEquivalent.createCell(21);
	cellCompEquiSEPDescr.setCellStyle(cellStyleCompEquiSEP);
	cellCompEquiSEPDescr.setCellValue(strCompEquSEPDescr);	
	
	//22 SEP Supplier
	Cell cellCompEquiSEPSupplier = rowHeaderCompEquivalent.createCell(22);
	cellCompEquiSEPSupplier.setCellStyle(cellStyleCompEquiSEP);
	cellCompEquiSEPSupplier.setCellValue(strCompEquSEPSupplier);	
	
	//23 SEP State
	Cell cellCompEquiSEPState = rowHeaderCompEquivalent.createCell(23);
	cellCompEquiSEPState.setCellStyle(cellStyleCompEquiSEP);
	cellCompEquiSEPState.setCellValue(strCompEquSEPState);	
	
	//24 SEP PQR Name
	Cell cellCompEquiSEPPQRName = rowHeaderCompEquivalent.createCell(24);
	cellCompEquiSEPPQRName.setCellStyle(cellStyleCompEquiSEP);
	cellCompEquiSEPPQRName.setCellValue(strCompEquSEPPQRName);	
	
	//25 SEP PQR State
	Cell cellCompEquiSEPPQRState = rowHeaderCompEquivalent.createCell(25);
	cellCompEquiSEPPQRState.setCellStyle(cellStyleCompEquiSEP);
	cellCompEquiSEPPQRState.setCellValue(strCompEquSEPPQRState);
	
	//26 SEP Artwork Primary 
	Cell cellCompEquiSEPArtworkPrimary = rowHeaderCompEquivalent.createCell(26);
	cellCompEquiSEPArtworkPrimary.setCellStyle(cellStyleCompEquiSEP);
	cellCompEquiSEPArtworkPrimary.setCellValue(strCompEquSEPArtworkPrimary);	
	
	//Certification Name
	Cell cellCertificationName = rowHeaderCompEquivalent.createCell(27);
	cellCertificationName.setCellStyle(cellStyleCompEquivalent);
	cellCertificationName.setCellValue(strCertificationName);
	
	//Certification Status
	Cell cellCertificationStatus = rowHeaderCompEquivalent.createCell(28);
	cellCertificationStatus.setCellStyle(cellStyleCompEquivalent);
	cellCertificationStatus.setCellValue(strCertificationStatus);
	
	//Certification Status
	Cell cellCertificationExpDate = rowHeaderCompEquivalent.createCell(29);
	cellCertificationExpDate.setCellStyle(cellStyleCompEquivalent);
	cellCertificationExpDate.setCellValue(strCertificationExpDate);
	
	//Added for Apr22 CW requirement 42014 Starts
	//Certification Support Doc
	Cell cellCertificationSupportDoc = rowHeaderCompEquivalent.createCell(30);
	cellCertificationSupportDoc.setCellStyle(cellStyleCompEquivalent);
	cellCertificationSupportDoc.setCellValue(strCertificationSupportDoc);
		
	//27 Derived From Name
	Cell cellDerivedFromName = rowHeaderCompEquivalent.createCell(31);
	cellDerivedFromName.setCellStyle(cellStyleCompEquivalent);
	cellDerivedFromName.setCellValue(strDerivedFromName);
	
	//28 Derived From Title
	Cell cellDerivedFromTitle = rowHeaderCompEquivalent.createCell(32);
	cellDerivedFromTitle.setCellStyle(cellStyleCompEquivalent);
	cellDerivedFromTitle.setCellValue(strDerivedFromTitle);
	
	//29 Part Family Name
	Cell cellPartFamilyName = rowHeaderCompEquivalent.createCell(33);
	cellPartFamilyName.setCellStyle(cellStyleCompEquivalent);
	//Start Modified for 22x Changes for auto name of Part Library & Faimly
	cellPartFamilyName.setCellValue(strPartFamilyTitle);
	//End Modified for 22x Changes for auto name of Part Library & Faimly
	//Added for Apr22 CW requirement 42014 Ends
	String strTypeName = DomainConstants.EMPTY_STRING;
	int iListSize=mlCompEquiDetails.size();
	//Added code for Req Id : 33634 - Hyperlinks--Starts
	String strValue = DomainConstants.EMPTY_STRING;
	String strParentId = DomainConstants.EMPTY_STRING;
	String strChildId = DomainConstants.EMPTY_STRING;
	String strHyperlinkId = DomainConstants.EMPTY_STRING;
	String strCellValue = DomainConstants.EMPTY_STRING;
	String strDerivedId = DomainConstants.EMPTY_STRING;
	String strCAId = DomainConstants.EMPTY_STRING;
	//Added code for Req Id : 33634 - Hyperlinks--Ends
	String strMEPSEP = DomainConstants.EMPTY_STRING;
	HashMap hm= new HashMap<>();
	Map hmCommonCol = new HashMap<>();
	int rowCount = 0;
	for (int i=0;i<iListSize;i++){
		++rowCount;
		//Added code for 2018x.6 Requirement id 36700 Ability to generate Part and Spec report with without hyperlink Starts
		iRowCountAll = iRowCountAll + 1;
		//Added code for 2018x.6 Requirement id 36700 Ability to generate Part and Spec report with without hyperlink Ends
		XSSFRow row = sheetCompEquivalent.createRow(rowCount);
		int columnCount1 = 0;
		Map mpCompEquivalent = (Map)mlCompEquiDetails.get(i);
		hmCommonCol= (Map)mpCompEquivalent.get("CommonColumns");
		//Updated code for Req Ids : 33656, 33871, 33872-New Tab : MEP-SEP Component Equivalents--Starts
		strMEPSEP = (String)hmCommonCol.get("name");
		//if(!(strMEPSEP.startsWith("MEP") || strMEPSEP.startsWith("SEP"))){
		//Updated code for Req Ids : 33656, 33871, 33872-New Tab : MEP-SEP Component Equivalents--Ends
			if(mpCompEquivalent.containsKey("Manufacturer")){
				String strCurrent = (String)hmCommonCol.get("current");
				//Fetching the Types Display name --Begin
				String strTypeDisplayName=null;
				strTypeName = (String)hmCommonCol.get("type");
				strTypeDisplayName= getTypeDisplayName(context,strTypeName);
				//Added code for Req Id : 33634 - Hyperlinks--Starts
				strChildId = (String)mpCompEquivalent.get("MRId");
				strParentId = (String)hmCommonCol.get("id");
				strDerivedId = (String)hmCommonCol.get("to[Derived].from.id");
				strCAId = (String)hmCommonCol.get("sCAId");
				//Added code for Req Id : 33634 - Hyperlinks--Ends
				
				//if(strCurrent.equalsIgnoreCase("Release") || strCurrent.equalsIgnoreCase("Released")){
				//Added the code for the Defect ID : 25104 - CA Tab is Empty : Starts
				//Code Upgrade for 2018x Data Model - Starts
				//Added by DSM Reports (Sogeti) for 2022x.5 (APR CW 2024) Defect 55875 - Start
				if(UIUtil.isNotNullAndNotEmpty(strCAId) && !strCAId.contains(HYPERLINK_PIPE)) {
					if(hmCommonCol.get("CARealizedName") != null && hmCommonCol.get("CAProposedName") != null) {
						//Updated code for Req Id : 33634 - Hyperlinks--Starts
						hm.put(0, HYPERLINK+hmCommonCol.get("CARealizedName")+HYPERLINK_PIPE+strCAId);
						//Updated code for Req Id : 33634 - Hyperlinks--Ends
					} else if(hmCommonCol.get("CARealizedName") != null){
						//Updated code for Req Id : 33634 - Hyperlinks--Starts
						hm.put(0, HYPERLINK+hmCommonCol.get("CARealizedName")+HYPERLINK_PIPE+strCAId);
						//Updated code for Req Id : 33634 - Hyperlinks--Ends
					} else if(hmCommonCol.get("CAProposedName") != null){
						//Updated code for Req Id : 33634 - Hyperlinks--Starts
						hm.put(0, HYPERLINK+hmCommonCol.get("CAProposedName")+HYPERLINK_PIPE+strCAId);
						//Updated code for Req Id : 33634 - Hyperlinks--Ends
					} else {
						hm.put(0, DomainConstants.EMPTY_STRING);
					}
				} else {
					hm.put(0,hmCommonCol.get(CAPROPOSEDNAME));
				}
				//Added by DSM Reports (Sogeti) for 2022x.5 (APR CW 2024) Defect 55875 - End
				//Code Upgrade for 2018x Data Model - Ends	
				//Added the code for the Defect ID : 25104 - CA Tab is Empty : Ends
				
				hm.put(1, hmCommonCol.get("attribute[Reason for Change]"));
				//Updated code for Req Id : 33634 - Hyperlinks--Starts
				hm.put(2, HYPERLINK+hmCommonCol.get("name")+HYPERLINK_PIPE+strParentId);
				//Updated code for Req Id : 33634 - Hyperlinks--Ends
				hm.put(3, hmCommonCol.get("attribute[Title]"));
				hm.put(4, strTypeDisplayName);
				//Code for requirement to addition of revision and state on all tabs except attribute -- Starts
				hm.put(5, hmCommonCol.get("revision"));
				hm.put(6, hmCommonCol.get("current"));
				//Code for requirement to addition of revision and state on all tabs except attribute -- Ends
				//Updated code for Req Id : 33634 - Hyperlinks--Starts
				hm.put(7,  HYPERLINK+mpCompEquivalent.get("MRName")+HYPERLINK_PIPE+strChildId);
				//Updated code for Req Id : 33634 - Hyperlinks--Ends
				hm.put(8,  mpCompEquivalent.get("MRRev"));
				hm.put(9,  mpCompEquivalent.get("MRType"));
				hm.put(10, mpCompEquivalent.get("MRTitle"));
				hm.put(11, mpCompEquivalent.get("MRDesc"));
				hm.put(12, mpCompEquivalent.get("Manufacturer"));
				hm.put(13, mpCompEquivalent.get("MRState"));
				hm.put(14, mpCompEquivalent.get("MRPQRName"));
				hm.put(15, mpCompEquivalent.get("MRPQRState"));
				hm.put(16, mpCompEquivalent.get("MRArtworkPrimary"));					
				hm.put(17, DomainConstants.EMPTY_STRING);
				hm.put(18, DomainConstants.EMPTY_STRING);
				hm.put(19, DomainConstants.EMPTY_STRING);
				hm.put(20, DomainConstants.EMPTY_STRING);
				hm.put(21, DomainConstants.EMPTY_STRING);
				hm.put(22, DomainConstants.EMPTY_STRING);
				hm.put(23, DomainConstants.EMPTY_STRING);
				hm.put(24, DomainConstants.EMPTY_STRING);
				hm.put(25, DomainConstants.EMPTY_STRING);
				hm.put(26, DomainConstants.EMPTY_STRING);
				//Added code for 2018x.6 Requirement 37983, 38062 Add  Certification Section to the Part Component Equivalents tab Starts
				hm.put(27, mpCompEquivalent.get("CertificationName"));
				hm.put(28, mpCompEquivalent.get("CertificationStatus"));
				hm.put(29, mpCompEquivalent.get("CertificationExpDate"));
				//Added for Apr22 CW requirement 42014 Starts
				hm.put(30, mpCompEquivalent.get("CertificationSupportDoc"));
				//Added for Apr22 CW requirement 42014 Ends
				//Added code for 2018x.6 Requirement 37983, 38062 Add certification section to the Part Component Equivalents tab Ends
				//Updated code for Req Id : 33634 - Hyperlinks--Starts
				hm.put(31, HYPERLINK+hmCommonCol.get("to[Derived].from.name")+HYPERLINK_PIPE+strDerivedId);
				//Updated code for Req Id : 33634 - Hyperlinks--Ends
				hm.put(32, hmCommonCol.get("to[Derived].from.attribute[Title]"));
				hm.put(33, mpCompEquivalent.get("PartFamilyName"));
				XSSFCellStyle style = workbook.createCellStyle();
				style = setForeGroundColor(strCurrent, style);
				//Added by DSM Reports (Sogeti) for 2022x.5 (APR CW 2024) Defect 55875 - Start
				XSSFCellStyle style1 = workbook.createCellStyle();
				//Added by DSM Reports (Sogeti) for 2022x.5 (APR CW 2024) Defect 55875 - End
				
				for(int j=0;j<hm.size();j++){
					//Modified the code for _2022x_Aug CW Req-47097 - Start
					// Modified by DSM Reports (Sogeti) for 22x.03 (August CW 2023) Defect 54091 - Start
					Cell cell = row.createCell(columnCount1++);
					if (j == 2) {
						style = makeColumnNumeric(workbook, style);
					}

					cell.setCellStyle(style);
					
					// Modified by DSM Reports (Sogeti) for 22x.03 (August CW 2023) Defect 54091 - End
					//Modified the code for _2022x_Aug CW Req-47097 - End
					//cell.setCellValue((String)hm.get(j));
					//Added code for Req Id : 33634 - Hyperlinks--Starts
					strCellValue = (String)hm.get(j);
					if(UIUtil.isNotNullAndNotEmpty(strCellValue) && strCellValue.startsWith(HYPERLINK_COMPARE)){
						String[] strSplittedValue = strCellValue.split("\\|",-1); 
						strHyperlinkId = strSplittedValue[(strSplittedValue.length)-1];
						strValue = strSplittedValue[(strSplittedValue.length)-2];
						if(pgV3Constants.TRUE.equalsIgnoreCase(strHyperlink) && iRowCountAll < iHyperLinkLimit){
							getHyperlink(context,cell,workbook,strValue,strHyperlinkId,strCurrent);
						} else if(UIUtil.isNotNullAndNotEmpty(strValue)) {
								cell.setCellValue(strValue);
						}
					}else {
						if(UIUtil.isNotNullAndNotEmpty(strCellValue))
							cell.setCellValue(strCellValue);
						//Added by DSM Reports (Sogeti) for 2022x.5 (APR CW 2024) Defect 55875 - Start
						if(j == 0) {
							style1.cloneStyleFrom(style);
							style1.setWrapText(true);
							cell.setCellStyle(style1);
						}
						//Added by DSM Reports (Sogeti) for 2022x.5 (APR CW 2024) Defect 55875 - End
					}
					//Added code for Req Id : 33634 - Hyperlinks--Ends
				}
			}
			if(mpCompEquivalent.containsKey("Supplier")){
				hmCommonCol= (Map)mpCompEquivalent.get("CommonColumns");
				String strCurrent = (String)hmCommonCol.get("current");
				//Fetching the Types Display name --Begin
				String strTypeDisplayName=null;
				strTypeName = (String)hmCommonCol.get("type");
				strTypeDisplayName= getTypeDisplayName(context,strTypeName);
				//Added code for Req Id : 33634 - Hyperlinks--Starts
				strChildId = (String)mpCompEquivalent.get("SupId");
				strParentId = (String)hmCommonCol.get("id");
				strDerivedId = (String)hmCommonCol.get("to[Derived].from.name");
				strCAId = (String)hmCommonCol.get("sCAId");
				//Added code for Req Id : 33634 - Hyperlinks--Ends
				//if(!strCurrent.equalsIgnoreCase("Release") || strCurrent.equalsIgnoreCase("Released")){
				//Added the code for the Defect ID : 25104 - CA Tab is Empty : Starts
				//Code Upgrade for 2018x Data Model - Starts
				//Added by DSM Reports (Sogeti) for 2022x.5 (APR CW 2024) Defect 55875 - Start
				if(UIUtil.isNotNullAndNotEmpty(strCAId) && !strCAId.contains(HYPERLINK_PIPE)) {
					if(hmCommonCol.get("CARealizedName") != null && hmCommonCol.get("CAProposedName") != null) {
						//Updated code for Req Id : 33634 - Hyperlinks--Starts
						hm.put(0, HYPERLINK+hmCommonCol.get("CARealizedName")+HYPERLINK_PIPE+strCAId);
						//Updated code for Req Id : 33634 - Hyperlinks--Ends
					} else if(hmCommonCol.get("CARealizedName") != null){
						//Updated code for Req Id : 33634 - Hyperlinks--Starts
						hm.put(0, HYPERLINK+hmCommonCol.get("CARealizedName")+HYPERLINK_PIPE+strCAId);
						//Updated code for Req Id : 33634 - Hyperlinks--Ends
					} else if(hmCommonCol.get("CAProposedName") != null){
						//Updated code for Req Id : 33634 - Hyperlinks--Starts
						hm.put(0, HYPERLINK+hmCommonCol.get("CAProposedName")+HYPERLINK_PIPE+strCAId);
						//Updated code for Req Id : 33634 - Hyperlinks--Ends
					} else {
						hm.put(0, DomainConstants.EMPTY_STRING);
					}
				}else {
					hm.put(0,hmCommonCol.get(CAPROPOSEDNAME));
				}
				//Added by DSM Reports (Sogeti) for 2022x.5 (APR CW 2024) Defect 55875 - End
				
				//Code Upgrade for 2018x Data Model - Ends
				//Added the code for the Defect ID : 25104 - CA Tab is Empty : Ends
				hm.put(1, hmCommonCol.get("attribute[Reason for Change]"));
				//Updated code for Req Id : 33634 - Hyperlinks--Starts
				hm.put(2, HYPERLINK+hmCommonCol.get("name")+HYPERLINK_PIPE+strParentId);
				//Updated code for Req Id : 33634 - Hyperlinks--Ends
				hm.put(3, hmCommonCol.get("attribute[Title]"));
				hm.put(4, strTypeDisplayName);
				//Code for requirement to addition of revision and state on all tabs except attribute -- Starts
				hm.put(5, hmCommonCol.get("revision"));
				hm.put(6, hmCommonCol.get("current"));
				//Code for requirement to addition of revision and state on all tabs except attribute -- Ends
			
				hm.put(7,  DomainConstants.EMPTY_STRING);
				hm.put(8,  DomainConstants.EMPTY_STRING);
				hm.put(9,  DomainConstants.EMPTY_STRING);
				hm.put(10, DomainConstants.EMPTY_STRING);
				hm.put(11, DomainConstants.EMPTY_STRING);
				hm.put(12, DomainConstants.EMPTY_STRING);
				hm.put(13, DomainConstants.EMPTY_STRING);
				hm.put(14, DomainConstants.EMPTY_STRING);
				hm.put(15, DomainConstants.EMPTY_STRING);
				hm.put(16, DomainConstants.EMPTY_STRING);
				//Updated code for Req Id : 33634 - Hyperlinks--Starts
				hm.put(17, HYPERLINK+mpCompEquivalent.get("SupName")+HYPERLINK_PIPE+strChildId);
				//Updated code for Req Id : 33634 - Hyperlinks--Ends
				hm.put(18, mpCompEquivalent.get("SupRev"));
				hm.put(19, mpCompEquivalent.get("SupType"));
				hm.put(20, mpCompEquivalent.get("SupTitle"));
				hm.put(21, mpCompEquivalent.get("SupDesc"));
				hm.put(22, mpCompEquivalent.get("Supplier"));
				hm.put(23, mpCompEquivalent.get("SupState"));
				hm.put(24, mpCompEquivalent.get("SUPPQRName"));
				hm.put(25, mpCompEquivalent.get("SUPPQRState"));
				hm.put(26, mpCompEquivalent.get("SUPArtworkPrimary"));
				//Added code for 2018x.6 Requirement 37983, 38062 Add  Certification Section to the Part Component Equivalents tab Starts
				hm.put(27, mpCompEquivalent.get("CertificationName"));
				hm.put(28, mpCompEquivalent.get("CertificationStatus"));
				hm.put(29, mpCompEquivalent.get("CertificationExpDate"));
				//Added for Apr22 CW requirement 42014 Starts
				hm.put(30, mpCompEquivalent.get("CertificationSupportDoc"));
				//Added for Apr22 CW requirement 42014 Ends
				//Added code for 2018x.6 Requirement 37983, 38062 Add  Certification Section to the Part Component Equivalents tab Starts
				//Updated code for Req Id : 33634 - Hyperlinks--Starts
				hm.put(31, HYPERLINK+hmCommonCol.get("to[Derived].from.name")+HYPERLINK_PIPE+strDerivedId);
				//Updated code for Req Id : 33634 - Hyperlinks--Ends
				hm.put(32, hmCommonCol.get("to[Derived].from.attribute[Title]"));
				hm.put(33, mpCompEquivalent.get("PartFamilyName"));
				XSSFCellStyle style = workbook.createCellStyle();
				style = setForeGroundColor(strCurrent, style);
				//Added by DSM Reports (Sogeti) for 2022x.5 (APR CW 2024) Defect 55875 - Start
				XSSFCellStyle style1 = workbook.createCellStyle();
				//Added by DSM Reports (Sogeti) for 2022x.5 (APR CW 2024) Defect 55875 - End
				
				for(int j=0;j<hm.size();j++){
					//Modified the code for _2022x_Aug CW Req-47097 - Start
					// Modified by DSM Reports (Sogeti) for 22x.03 (August CW 2023) Defect 54091 - Start
					Cell cell = row.createCell(columnCount1++);
					if (j == 2) {
						style = makeColumnNumeric(workbook, style);
					}
					cell.setCellStyle(style);
					
					// Modified by DSM Reports (Sogeti) for 22x.03 (August CW 2023) Defect 54091 - End
					//Modified the code for _2022x_Aug CW Req-47097 - End
					//Added code for Req Id : 33634 - Hyperlinks--Starts
					strCellValue = (String)hm.get(j);
					if(UIUtil.isNotNullAndNotEmpty(strCellValue) && strCellValue.startsWith(HYPERLINK_COMPARE)){
						String[] strSplittedValue = strCellValue.split("\\|",-1); 
						strHyperlinkId = strSplittedValue[(strSplittedValue.length)-1];
						strValue = strSplittedValue[(strSplittedValue.length)-2];
						//Added code for 2018x.6 Requirement id 36700 Ability to generate Part and Spec report with without hyperlink Starts
						if(pgV3Constants.TRUE.equalsIgnoreCase(strHyperlink) && iRowCountAll < iHyperLinkLimit){
							getHyperlink(context,cell,workbook,strValue,strHyperlinkId,strCurrent);
						
						}else if(UIUtil.isNotNullAndNotEmpty(strValue)) {					
							cell.setCellValue(strValue);
						}
						//Added code for 2018x.6 Requirement id 36700 Ability to generate Part and Spec report with without hyperlink Ends
					}else {
						if(UIUtil.isNotNullAndNotEmpty(strCellValue)){
							cell.setCellValue(strCellValue);
							//Added by DSM Reports (Sogeti) for 2022x.5 (APR CW 2024) Defect 55875 - Start
							if(j == 0) {
								style1.cloneStyleFrom(style);
								style1.setWrapText(true);
								cell.setCellStyle(style1);
							}
							//Added by DSM Reports (Sogeti) for 2022x.5 (APR CW 2024) Defect 55875 - End
						}
					}
					//Added code for Req Id : 33634 - Hyperlinks--Ends
				}
			}		
		
		}
	sheetFormatter(sheetCompEquivalent); // Added by DSM Reports (Sogeti) for 22x.04 (Dec CW 2023) Defect 56156 - START/END
	} catch (Exception e) {	
		outLog.print("Exception in  updateWorksheetCompEquivalent: "+e+"\n");
		 outLog.flush();
	} 
}

private void updateWorksheetWeightsAndDimensions(Context context, XSSFWorkbook workbook, XSSFRow rowHeaderWeightAndDim, XSSFCellStyle cellStyleWeightsAndDim, XSSFCellStyle cellStyleWDPackingUnit, XSSFCellStyle cellStyleWDTransportUnit, MapList mlWeightsAndDim, XSSFSheet sheetWeightAndDim, String strHyperlink, XSSFCellStyle styleGlobal) {
try {
	//Added code for 2018x.6 Requirement id 36700 Ability to generate Part and Spec report with without hyperlink Starts
	String strHyperlinkLimit = EnoviaResourceBundle.getProperty(context, EMXCPNSTRINGRESOURCE, context.getLocale(),"emxCPN.PartAndSpecReport.HyperlinkLimit");
	int iHyperLinkLimit = Integer.parseInt(strHyperlinkLimit);
	int iRowCountAll=0;
	//Added code for 2018x.6 Requirement id 36700 Ability to generate Part and Spec report with without hyperlink Ends
	String sStringResourceFile="emxCPNStringResource"; 
	String sLanguage = context.getSession().getLanguage();
	String strAttrChangeAction= i18nNow.getI18nString("emxCPN.FamilyCareReport.Worksheet.Column.ChangeAction",sStringResourceFile, sLanguage);
	String strAttrChangeActionReasonForChange=i18nNow.getI18nString("emxCPN.FamilyCareReport.Worksheet.Column.ChangeActionReasonForChange",sStringResourceFile, sLanguage);
	String strAttrNameOrNumber=i18nNow.getI18nString("emxCPN.FamilyCareReport.Worksheet.Column.NameOrNumber",sStringResourceFile, sLanguage);
	String strAttrTitle=i18nNow.getI18nString("emxCPN.FamilyCareReport.Worksheet.Column.Title",sStringResourceFile, sLanguage);
	String strAttrType=i18nNow.getI18nString("emxCPN.FamilyCareReport.Worksheet.Column.Type",sStringResourceFile, sLanguage);
	String strWDRevision = i18nNow.getI18nString("emxCPN.FamilyCareReport.Worksheet.Column.Revision",sStringResourceFile, sLanguage);
	String strWDState = i18nNow.getI18nString("emxCPN.FamilyCareReport.Worksheet.Column.State",sStringResourceFile, sLanguage);
	String strWDPackingUnitType = i18nNow.getI18nString("emxCPN.FamilyCareReport.Worksheet.Weights.Dimensions.Column.PackingUnitType",sStringResourceFile, sLanguage);
	String strWDPackingUnitTitle=i18nNow.getI18nString("emxCPN.FamilyCareReport.Worksheet.Weights.Dimensions.Column.PackingUnitTitle",sStringResourceFile, sLanguage);
	String strWDAUOM=i18nNow.getI18nString("emxCPN.FamilyCareReport.Worksheet.Weights.Dimensions.Column.AUOM",sStringResourceFile, sLanguage);
	String strWDGTIN=i18nNow.getI18nString("emxCPN.FamilyCareReport.Worksheet.Weights.Dimensions.Column.GTIN",sStringResourceFile, sLanguage);
	String strWDDepth=i18nNow.getI18nString("emxCPN.FamilyCareReport.Worksheet.Weights.Dimensions.Column.Depth",sStringResourceFile, sLanguage);
	String strWDWidth=i18nNow.getI18nString("emxCPN.FamilyCareReport.Worksheet.Weights.Dimensions.Column.Width",sStringResourceFile, sLanguage);
	String strWDHeight=i18nNow.getI18nString("emxCPN.FamilyCareReport.emxCPN.FamilyCareReport.Worksheet.Weights.Dimensions.Column.Height",sStringResourceFile, sLanguage);
	String strWDDimensionUOM=i18nNow.getI18nString("emxCPN.FamilyCareReport.Worksheet.Weights.Dimensions.Column.DimensionUnitOfMeasure",sStringResourceFile, sLanguage);
	String strWDGrossWeight=i18nNow.getI18nString("emxCPN.FamilyCareReport.Worksheet.Weights.Dimensions.Column.GrossWeight",sStringResourceFile, sLanguage);
	String strWDUOM=i18nNow.getI18nString("emxCPN.FamilyCareReport.Worksheet.Weights.Dimensions.Column.UnitOfMeasure",sStringResourceFile, sLanguage);
	String strWDConsumerUnitPerUnit=i18nNow.getI18nString("emxCPN.FamilyCareReport.Worksheet.Weights.Dimensions.Column.NumberOfConsumerUnitsPerUnit",sStringResourceFile, sLanguage);
	String strWDProductInConsumerUnit=i18nNow.getI18nString("emxCPN.FamilyCareReport.Worksheet.Weights.Dimensions.Column.NetWeightOfProductInConsumerUnit",sStringResourceFile, sLanguage);
	String strWDNetUOM=i18nNow.getI18nString("emxCPN.FamilyCareReport.Worksheet.Weights.Dimensions.Column.NetUnitOfMeasure",sStringResourceFile, sLanguage);
	//2018x0 April Bug Fix : Starts
	String strTUName=i18nNow.getI18nString("emxCPN.FamilyCareReport.Worksheet.Weights.Dimensions.Column.TransportUnitName",sStringResourceFile, sLanguage);
	String strTUTitle=i18nNow.getI18nString("emxCPN.FamilyCareReport.Worksheet.Weights.Dimensions.Column.TransportUnitTitle",sStringResourceFile, sLanguage);
	//2018x0 April Bug Fix : Ends
	String strPalletType=i18nNow.getI18nString("emxCPN.FamilyCareReport.Worksheet.Weights.Dimensions.Column.TransportUnitPalletType",sStringResourceFile, sLanguage);
	//Code-Fix for Defect 24751 (DSM Report -Weights & Dimensions worksheet, there are 3 separate columns all labeled "Transport Unit - Pallet Type") --Start
	String strTUGTIN=i18nNow.getI18nString("emxCPN.FamilyCareReport.Worksheet.Weights.Dimensions.Column.TransportUnitGTIN",sStringResourceFile, sLanguage);
	//Code-Fix for Defect 24751 (DSM Report -Weights & Dimensions worksheet, there are 3 separate columns all labeled "Transport Unit - Pallet Type") --End
	String strWDTUDepth=i18nNow.getI18nString("emxCPN.FamilyCareReport.Worksheet.Weights.Dimensions.Column.TransportUnitDepth",sStringResourceFile, sLanguage);
	String strWDTUWidth=i18nNow.getI18nString("emxCPN.FamilyCareReport.Worksheet.Weights.Dimensions.Column.TransportUnitWidth",sStringResourceFile, sLanguage);
	String strWDTUHeight=i18nNow.getI18nString("emxCPN.FamilyCareReport.Worksheet.Weights.Dimensions.Column.TransportUnitHeight",sStringResourceFile, sLanguage);
	String strWDTUDimUOM=i18nNow.getI18nString("emxCPN.FamilyCareReport.Worksheet.Weights.Dimensions.Column.TransportUnitDimensionUOM",sStringResourceFile, sLanguage);
	String strWDTUVolumn=i18nNow.getI18nString("emxCPN.FamilyCareReport.Worksheet.Weights.Dimensions.Column.TransportUnitVolume",sStringResourceFile, sLanguage);
	String strWDTUOM=i18nNow.getI18nString("emxCPN.FamilyCareReport.Worksheet.Weights.Dimensions.Column.TransportVolumeUnitOfMeasure",sStringResourceFile, sLanguage);
	String strWDTUWeightWithPallet=i18nNow.getI18nString("emxCPN.FamilyCareReport.Worksheet.Weights.Dimensions.Column.TransportUnitGrossWeightWithPallet",sStringResourceFile, sLanguage);
	String strWDTUWeightWithOutPallet=i18nNow.getI18nString("emxCPN.FamilyCareReport.Worksheet.Weights.Dimensions.Column.TransportUnitGrossWeightWithoutPallet",sStringResourceFile, sLanguage);
	String strWDTUGrossWeightUOM=i18nNow.getI18nString("emxCPN.FamilyCareReport.Worksheet.Weights.Dimensions.Column.TransportUnitGrossWeightUOM",sStringResourceFile, sLanguage);
	String strTUSubPalletType=i18nNow.getI18nString("emxCPN.FamilyCareReport.Worksheet.Weights.Dimensions.Column.TransportUnitSubPalletType",sStringResourceFile, sLanguage);
	String strTUNumCustUnitsPerLayer=i18nNow.getI18nString("emxCPN.FamilyCareReport.Worksheet.Weights.Dimensions.Column.TransportUnitNumOfCustUnitsPerLayer",sStringResourceFile, sLanguage);
	String strWDTUNumOfLayers=i18nNow.getI18nString("emxCPN.FamilyCareReport.Worksheet.Weights.Dimensions.Column.TransportUnitNumOfLayersPerTransportUnit",sStringResourceFile, sLanguage);
	String strWDTUNumOfCustUnitsPerTU=i18nNow.getI18nString("emxCPN.FamilyCareReport.Worksheet.Weights.Dimensions.Column.TransportUnitNumOfCustUnitsPerTransportUnit",sStringResourceFile, sLanguage);
	String strWDTUPalletStactHeightMax=i18nNow.getI18nString("emxCPN.FamilyCareReport.Worksheet.Weights.Dimensions.Column.TransportUnitPalletStackHeightMax",sStringResourceFile, sLanguage);
	String strWDTUCaseStackHeightMax=i18nNow.getI18nString("emxCPN.FamilyCareReport.Worksheet.Weights.Dimensions.Column.TransportUnitCaseStackHeightMaximum",sStringResourceFile, sLanguage);
	String strWDTUTruckStackHeightMaximum=i18nNow.getI18nString("emxCPN.FamilyCareReport.Worksheet.Weights.Dimensions.Column.TransportUnitTruckStackHeightMaximum",sStringResourceFile, sLanguage);
	String strWDTPatternGCASCode=i18nNow.getI18nString("emxCPN.FamilyCareReport.Worksheet.Weights.Dimensions.Column.TransportUnitStackingPatternGCASCode",sStringResourceFile, sLanguage);
	String strWDTUCubeEfficiency=i18nNow.getI18nString("emxCPN.FamilyCareReport.Worksheet.Weights.Dimensions.Column.TransportUnitCubeEfficiency",sStringResourceFile, sLanguage);
	String strDerivedFromName=i18nNow.getI18nString("emxCPN.FamilyCareReport.Worksheet.Weights.Dimensions.Column.DerivedFromName",sStringResourceFile, sLanguage);
	String strDerivedFromTitle=i18nNow.getI18nString("emxCPN.FamilyCareReport.Worksheet.Weights.Dimensions.Column.DerivedFromTitle",sStringResourceFile, sLanguage);
	String strPartFamilyName=i18nNow.getI18nString("emxCPN.FamilyCareReport.Worksheet.Weights.Dimensions.Column.PartFamilyName",sStringResourceFile, sLanguage);
	//Start Modified for 22x Changes for auto name of Part Library & Faimly
	String strPartFamilyTitle=i18nNow.getI18nString("emxCPN.FamilyCareReport.Worksheet.Weights.Dimensions.Column.PartFamilyTitle",sStringResourceFile, sLanguage);
	//End Modified for 22x Changes for auto name of Part Library & Faimly
	//String strIncludeInSAPBOMFeed=i18nNow.getI18nString("emxCPN.FamilyCareReport.Worksheet.Weights.Dimensions.Column.IncludeInSAPBOMFeed",sStringResourceFile, sLanguage);
	String strIncludeInSAPBOMFeed="TransportUnit - Include In SAP BOM Feed";
	
	//Added for requirement 39708
	String strUnderhangActualLength = EnoviaResourceBundle.getProperty(context, EMXCPN, context.getLocale(),"emxCPN.FamilyCareReport.Worksheet.WeightDimension.UnderhangActualLength");
	String strUnderhangActualWidth = EnoviaResourceBundle.getProperty(context, EMXCPN, context.getLocale(),"emxCPN.FamilyCareReport.Worksheet.WeightDimension.UnderhangActualWidth");
	String strOverhangActualLength = EnoviaResourceBundle.getProperty(context, EMXCPN, context.getLocale(),"emxCPN.FamilyCareReport.Worksheet.WeightDimension.OverhangActualLength");
	String strOverhangActualWidth = EnoviaResourceBundle.getProperty(context, EMXCPN, context.getLocale(),"emxCPN.FamilyCareReport.Worksheet.WeightDimension.OverhangActualWidth");
	
	
	//1 Change Action
	Cell cellChangeAction = rowHeaderWeightAndDim.createCell(0);
	cellChangeAction.setCellStyle(cellStyleWeightsAndDim);
	cellChangeAction.setCellValue(strAttrChangeAction);
	
	//2 Change Action 'Reason for Change'
	Cell cellChangeActionReasonForChange = rowHeaderWeightAndDim.createCell(1);
	cellChangeActionReasonForChange.setCellStyle(cellStyleWeightsAndDim);
	cellChangeActionReasonForChange.setCellValue(strAttrChangeActionReasonForChange);
	
	//3 Name/Number
	Cell cellNameOrNumber = rowHeaderWeightAndDim.createCell(2);
	cellNameOrNumber.setCellStyle(cellStyleWeightsAndDim);
	cellNameOrNumber.setCellValue(strAttrNameOrNumber);
	
	//4 Title
	Cell cellTitle = rowHeaderWeightAndDim.createCell(3);
	cellTitle.setCellStyle(cellStyleWeightsAndDim);
	cellTitle.setCellValue(strAttrTitle);
	
	//5 Type
	Cell cellType = rowHeaderWeightAndDim.createCell(4);
	cellType.setCellStyle(cellStyleWeightsAndDim);
	cellType.setCellValue(strAttrType);
	
	//6 Revision
	Cell cellRevision = rowHeaderWeightAndDim.createCell(5);
	cellRevision.setCellStyle(cellStyleWeightsAndDim);
	cellRevision.setCellValue(strWDRevision);
			
	//7 State
	Cell cellState = rowHeaderWeightAndDim.createCell(6);
	cellState.setCellStyle(cellStyleWeightsAndDim);
	cellState.setCellValue(strWDState);
	
	//8 Packing Unit Type
	Cell cellPackingUnitType = rowHeaderWeightAndDim.createCell(7);
	cellPackingUnitType.setCellStyle(cellStyleWDPackingUnit);
	cellPackingUnitType.setCellValue(strWDPackingUnitType);
	
	//9 Title
	Cell cellPackingUnitTitle = rowHeaderWeightAndDim.createCell(8);
	cellPackingUnitTitle.setCellStyle(cellStyleWDPackingUnit);
	cellPackingUnitTitle.setCellValue(strWDPackingUnitTitle);
	
	//9 AUOM
	Cell cellAUOM = rowHeaderWeightAndDim.createCell(9);
	cellAUOM.setCellStyle(cellStyleWDPackingUnit);
	cellAUOM.setCellValue(strWDAUOM);
	
	//Added code to fix Defect ID : 29204	DSM report --remove GTIN - 2018x.1.1 DSM Reports Oct -Starts
	//10 GTIN			
	//Cell cellGTIN = rowHeaderWeightAndDim.createCell(10);
	//cellGTIN.setCellStyle(cellStyleWDPackingUnit);
	//cellGTIN.setCellValue(strWDGTIN);
	
	//11 Depth
	Cell cellPUDepth = rowHeaderWeightAndDim.createCell(10);
	cellPUDepth.setCellStyle(cellStyleWDPackingUnit);
	cellPUDepth.setCellValue(strWDDepth);
	
	//12 Width
	Cell cellPUWidth = rowHeaderWeightAndDim.createCell(11);
	cellPUWidth.setCellStyle(cellStyleWDPackingUnit);
	cellPUWidth.setCellValue(strWDWidth);
	
	//13 Height
	Cell cellPUHeight= rowHeaderWeightAndDim.createCell(12);
	cellPUHeight.setCellStyle(cellStyleWDPackingUnit);
	cellPUHeight.setCellValue(strWDHeight);
	
	//14 Dimension Unit of Measure
	Cell cellDimUOM = rowHeaderWeightAndDim.createCell(13);
	cellDimUOM.setCellStyle(cellStyleWDPackingUnit);
	cellDimUOM.setCellValue(strWDDimensionUOM);	
	
	//15 Gross Weight
	Cell cellGrossWeight = rowHeaderWeightAndDim.createCell(14);
	cellGrossWeight.setCellStyle(cellStyleWDPackingUnit);
	cellGrossWeight.setCellValue(strWDGrossWeight);	
	
	//16 Gross Weight Unit of Measure
	Cell cellGrossWeightUOM = rowHeaderWeightAndDim.createCell(15);
	cellGrossWeightUOM.setCellStyle(cellStyleWDPackingUnit);
	cellGrossWeightUOM.setCellValue(strWDUOM);	
	
	//17 Number of Consumer Units per Unit
	Cell cellNoOfConsumerUnit = rowHeaderWeightAndDim.createCell(16);
	cellNoOfConsumerUnit.setCellStyle(cellStyleWDPackingUnit);
	cellNoOfConsumerUnit.setCellValue(strWDConsumerUnitPerUnit);	
	
	//18 Net Weight of Product in Consumer Unit
	Cell cellNetWeightProductInCU = rowHeaderWeightAndDim.createCell(17);
	cellNetWeightProductInCU.setCellStyle(cellStyleWDPackingUnit);
	cellNetWeightProductInCU.setCellValue(strWDProductInConsumerUnit);	
	
	//19 Net Weight Unit of Measure
	Cell cellNetWeightUOM = rowHeaderWeightAndDim.createCell(18);
	cellNetWeightUOM.setCellStyle(cellStyleWDPackingUnit);
	cellNetWeightUOM.setCellValue(strWDNetUOM);	
	
	//20 TU Name
	Cell cellTUName = rowHeaderWeightAndDim.createCell(19);
	cellTUName.setCellStyle(cellStyleWDTransportUnit);
	cellTUName.setCellValue(strTUName);				
	
	//20 TU Pallet Type
	Cell cellTUPalletType = rowHeaderWeightAndDim.createCell(20);
	cellTUPalletType.setCellStyle(cellStyleWDTransportUnit);
	cellTUPalletType.setCellValue(strPalletType);
	
	//20 TU Ttle
	Cell cellTUTitle = rowHeaderWeightAndDim.createCell(21);
	cellTUTitle.setCellStyle(cellStyleWDTransportUnit);
	cellTUTitle.setCellValue(strTUTitle);					
	
	//21 TU GTIN
	/*Cell cellTUGTIN = rowHeaderWeightAndDim.createCell(22);
	cellTUGTIN.setCellStyle(cellStyleWDTransportUnit);
	cellTUGTIN.setCellValue(strTUGTIN);*/	

	//22 TU Depth
	Cell cellTUDepth = rowHeaderWeightAndDim.createCell(22);
	cellTUDepth.setCellStyle(cellStyleWDTransportUnit);
	cellTUDepth.setCellValue(strWDTUDepth);	
	
	//23 TU Width
	Cell cellTUWidth = rowHeaderWeightAndDim.createCell(23);
	cellTUWidth.setCellStyle(cellStyleWDTransportUnit);
	cellTUWidth.setCellValue(strWDTUWidth);	
	
	//24 TU Height
	Cell cellTUHeight = rowHeaderWeightAndDim.createCell(24);
	cellTUHeight.setCellStyle(cellStyleWDTransportUnit);
	cellTUHeight.setCellValue(strWDTUHeight);	
	
	//25 TU Dimension Unit of Measure
	Cell cellTUDimUOM = rowHeaderWeightAndDim.createCell(25);
	cellTUDimUOM.setCellStyle(cellStyleWDTransportUnit);
	cellTUDimUOM.setCellValue(strWDTUDimUOM);	
	
	//26 Transport Unit Volume
	Cell cellTransportUnitVolume = rowHeaderWeightAndDim.createCell(26);
	cellTransportUnitVolume.setCellStyle(cellStyleWDTransportUnit);
	cellTransportUnitVolume.setCellValue(strWDTUVolumn);	
	
	//27 Volume Unit of Measure
	Cell cellVolumeUOM = rowHeaderWeightAndDim.createCell(27);
	cellVolumeUOM.setCellStyle(cellStyleWDTransportUnit);
	cellVolumeUOM.setCellValue(strWDTUOM);	
	
	//28 Gross Weight with Pallet
	Cell cellGrossWeightWithPallet = rowHeaderWeightAndDim.createCell(28);
	cellGrossWeightWithPallet.setCellStyle(cellStyleWDTransportUnit);
	cellGrossWeightWithPallet.setCellValue(strWDTUWeightWithPallet);	
	
	//29 Gross Weight without Pallet
	Cell cellGWWithOutPallet = rowHeaderWeightAndDim.createCell(29);
	cellGWWithOutPallet.setCellStyle(cellStyleWDTransportUnit);
	cellGWWithOutPallet.setCellValue(strWDTUWeightWithOutPallet);	
	
	//30 Gross Weight Unit of Measure
	Cell cellGWUOM = rowHeaderWeightAndDim.createCell(30);
	cellGWUOM.setCellStyle(cellStyleWDTransportUnit);
	cellGWUOM.setCellValue(strWDTUGrossWeightUOM);	
	
	//31 Pallet Type
	//Cell cellPalletType = rowHeaderWeightAndDim.createCell(30);
	//cellPalletType.setCellStyle(cellStyleWDTransportUnit);
	//cellPalletType.setCellValue(strTUSubPalletType);	
	
	//32 Number of Customer Units per Layer
	Cell cellNoOfCustUnitPerLayer = rowHeaderWeightAndDim.createCell(31);
	cellNoOfCustUnitPerLayer.setCellStyle(cellStyleWDTransportUnit);
	cellNoOfCustUnitPerLayer.setCellValue(strTUNumCustUnitsPerLayer);	
	
	//33 Number of Layers per Transport Unit
	Cell cellNoOfLayersPerTu = rowHeaderWeightAndDim.createCell(32);
	cellNoOfLayersPerTu.setCellStyle(cellStyleWDTransportUnit);
	cellNoOfLayersPerTu.setCellValue(strWDTUNumOfLayers);	
	
	//34 Number of Customer Units per Transport Unit
	Cell cellNoOfCustUnitPerTU = rowHeaderWeightAndDim.createCell(33);
	cellNoOfCustUnitPerTU.setCellStyle(cellStyleWDTransportUnit);
	cellNoOfCustUnitPerTU.setCellValue(strWDTUNumOfCustUnitsPerTU);	
	
	//35 Warehouse: Pallet Stack Height Maximum
	Cell cellPalletStackHeightMax = rowHeaderWeightAndDim.createCell(34);
	cellPalletStackHeightMax.setCellStyle(cellStyleWDTransportUnit);
	cellPalletStackHeightMax.setCellValue(strWDTUPalletStactHeightMax);	
	
	//36 Warehouse: Case Stack Height Maximum
	Cell cellCaseStackHeightMax = rowHeaderWeightAndDim.createCell(35);
	cellCaseStackHeightMax.setCellStyle(cellStyleWDTransportUnit);
	cellCaseStackHeightMax.setCellValue(strWDTUCaseStackHeightMax);	
	
	//37 Truck: Pallet Stack Height Maximum
	Cell cellTruckStackHeightMax = rowHeaderWeightAndDim.createCell(36);
	cellTruckStackHeightMax.setCellStyle(cellStyleWDTransportUnit);
	cellTruckStackHeightMax.setCellValue(strWDTUTruckStackHeightMaximum);	
	
	//38 Stacking Pattern GCAS Code
	Cell cellStackingPatternGCAS = rowHeaderWeightAndDim.createCell(37);
	cellStackingPatternGCAS.setCellStyle(cellStyleWDTransportUnit);
	cellStackingPatternGCAS.setCellValue(strWDTPatternGCASCode);	
	
	//39 Cube Efficiency
	Cell cellCubeEfficiency = rowHeaderWeightAndDim.createCell(38);
	cellCubeEfficiency.setCellStyle(cellStyleWDTransportUnit);
	cellCubeEfficiency.setCellValue(strWDTUCubeEfficiency);	
	
	//40 Include In SAP BOM Feed
	Cell cellIncludeInSAPBOMFeed = rowHeaderWeightAndDim.createCell(39);
	cellIncludeInSAPBOMFeed.setCellStyle(cellStyleWDTransportUnit);
	cellIncludeInSAPBOMFeed.setCellValue(strIncludeInSAPBOMFeed);	
	
	//Added for requirement 39708
	
	//41 UnderhangActualLength
	Cell cellUnderhangActualLength = rowHeaderWeightAndDim.createCell(40);
	cellUnderhangActualLength.setCellStyle(cellStyleWDTransportUnit);
	cellUnderhangActualLength.setCellValue(strUnderhangActualLength);
	
	//42 UnderhangActualWidth
	Cell cellUnderhangActualWidth = rowHeaderWeightAndDim.createCell(41);
	cellUnderhangActualWidth.setCellStyle(cellStyleWDTransportUnit);
	cellUnderhangActualWidth.setCellValue(strUnderhangActualWidth);
	
	//43 OverhangActualLength
	Cell cellOverhangActualLength = rowHeaderWeightAndDim.createCell(42);
	cellOverhangActualLength.setCellStyle(cellStyleWDTransportUnit);
	cellOverhangActualLength.setCellValue(strOverhangActualLength);
	
	//44 OverhangActualWidth
	Cell cellOverhangActualWidth = rowHeaderWeightAndDim.createCell(43);
	cellOverhangActualWidth.setCellStyle(cellStyleWDTransportUnit);
	cellOverhangActualWidth.setCellValue(strOverhangActualWidth);
	
	//45 Derived From Name
	Cell cellDerivedFromName = rowHeaderWeightAndDim.createCell(44);
	cellDerivedFromName.setCellStyle(cellStyleWeightsAndDim);
	cellDerivedFromName.setCellValue(strDerivedFromName);	
	
	//46 Derived From Title
	Cell cellDerivedFromTitle = rowHeaderWeightAndDim.createCell(45);
	cellDerivedFromTitle.setCellStyle(cellStyleWeightsAndDim);
	cellDerivedFromTitle.setCellValue(strDerivedFromTitle);	
	
	//47 Part Family Name
	Cell cellPartFamilyName = rowHeaderWeightAndDim.createCell(46);
	cellPartFamilyName.setCellStyle(cellStyleWeightsAndDim);
	//Start Modified for 22x Changes for auto name of Part Library & Faimly	
	cellPartFamilyName.setCellValue(strPartFamilyTitle);	
	//End Modified for 22x Changes for auto name of Part Library & Faimly
	//Added code to fix Defect ID : 29204	DSM report --remove GTIN - 2018x.1.1 DSM Reports Oct -Ends
	int rowCount1 = 0;
	String strTypeName = DomainConstants.EMPTY_STRING;
	//Added code for Req Id : 33634 - Hyperlinks--Starts
	String strParentId = DomainConstants.EMPTY_STRING;
	String strTUPId = DomainConstants.EMPTY_STRING;
	String strDerivedId = DomainConstants.EMPTY_STRING;
	String strValue = DomainConstants.EMPTY_STRING;
	String strCAId = DomainConstants.EMPTY_STRING;
	String strHyperlinkId = DomainConstants.EMPTY_STRING;
	String strCellValue = DomainConstants.EMPTY_STRING;
	int rowCount = 0;
	//Added code for Req Id : 33634 - Hyperlinks--Ends
	for (int i=0;i<mlWeightsAndDim.size();i++){
		//Added code for 2018x.6 Requirement id 36700 Ability to generate Part and Spec report with without hyperlink Starts
		iRowCountAll = iRowCountAll + 1;
		//Added code for 2018x.6 Requirement id 36700 Ability to generate Part and Spec report with without hyperlink Ends
		rowCount = rowCount+1;
		XSSFRow row = sheetWeightAndDim.createRow(rowCount);
		HashMap hm= new HashMap<>();
		int columnCount1 = 0;
		Map mpWeightsAndDim = (Map)mlWeightsAndDim.get(i);
		Map mpCommon= (Map)mpWeightsAndDim.get("CommonColumns");
		String strType = (String)mpCommon.get("type");
		if(strType.equalsIgnoreCase("Finished Product Part")) {
			Hashtable htCommonCol = new Hashtable<>();
			htCommonCol= (Hashtable)mpWeightsAndDim.get("CommonColumns");			
			String strTypeDisplayName=null;
			strTypeName = (String)htCommonCol.get("type");
			String strCurrent = (String)htCommonCol.get("current");
			strTypeDisplayName= getTypeDisplayName(context,strTypeName);
			//Added code for Req Id : 33634 - Hyperlinks--Starts
			strParentId = (String)htCommonCol.get("id");
			strTUPId = (String)mpWeightsAndDim.get("FPTUId");
			strDerivedId = (String)htCommonCol.get("to[Derived].from.id");
			strCAId = (String)htCommonCol.get("sCAId");
			//Added code for Req Id : 33634 - Hyperlinks--Ends
			//if(strCurrent.equalsIgnoreCase("Release") || strCurrent.equalsIgnoreCase("Released")){
			
			//Added the code for the Defect ID : 25104 - CA Tab is Empty : Starts
			//Added by DSM Reports (Sogeti) for 2022x.5 (APR CW 2024) Defect 55875 - Start
			String sCAID = (String) htCommonCol.get(SCAID);
			if(UIUtil.isNotNullAndNotEmpty(sCAID) && !sCAID.contains(HYPERLINK_PIPE)) {
				if(htCommonCol.get(CAREALIZEDNAME) != null && htCommonCol.get(CAPROPOSEDNAME) != null) {
					//Updated code for Req Id : 33634 - Hyperlinks--Starts
					hm.put(0, HYPERLINK+htCommonCol.get(CAREALIZEDNAME)+HYPERLINK_PIPE+strCAId);
					//Updated code for Req Id : 33634 - Hyperlinks--Ends
				} else if(htCommonCol.get(CAREALIZEDNAME) != null){
					//Updated code for Req Id : 33634 - Hyperlinks--Starts
					hm.put(0, HYPERLINK+htCommonCol.get(CAREALIZEDNAME)+HYPERLINK_PIPE+strCAId);
					//Updated code for Req Id : 33634 - Hyperlinks--Ends
				} else if(htCommonCol.get(CAPROPOSEDNAME) != null){
					//Updated code for Req Id : 33634 - Hyperlinks--Starts
					hm.put(0, HYPERLINK+htCommonCol.get(CAPROPOSEDNAME)+HYPERLINK_PIPE+strCAId);
					//Updated code for Req Id : 33634 - Hyperlinks--Ends
				} else {
					//Updated code for Req Id : 33634 - Hyperlinks--Starts
					hm.put(0, DomainConstants.EMPTY_STRING);
					//Updated code for Req Id : 33634 - Hyperlinks--Ends
				}	
			}else{
				hm.put(0,htCommonCol.get(CAPROPOSEDNAME));
			}
			//Added by DSM Reports (Sogeti) for 2022x.5 (APR CW 2024) Defect 55875 - End
						
			
			
			//Code Upgrade for 2018x Data Model - Ends	
			//Added the code for the Defect ID : 25104 - CA Tab is Empty : Ends
			hm.put(1, htCommonCol.get("attribute[Reason for Change]"));
			//Updated code for Req Id : 33634 - Hyperlinks--Starts
			hm.put(2, HYPERLINK+htCommonCol.get("name")+HYPERLINK_PIPE+strParentId);
			//Updated code for Req Id : 33634 - Hyperlinks--Ends
			hm.put(3, htCommonCol.get("attribute[Title]"));
			hm.put(4, strTypeDisplayName);
			//Code for requirement to addition of revision and state on all tabs except attribute -- Starts
			hm.put(5,  htCommonCol.get("revision"));
			hm.put(6,  htCommonCol.get("current"));
			//Code for requirement to addition of revision and state on all tabs except attribute -- Ends
			hm.put(7, mpWeightsAndDim.get("FPCSSType"));
			hm.put(8,  mpWeightsAndDim.get("FPTitle"));
			hm.put(9,  mpWeightsAndDim.get("AUOM"));
			//Added code to fix Defect ID : 29204	DSM report --remove GTIN - 2018x.1.1 DSM Reports Oct -Starts
			//hm.put(10, mpWeightsAndDim.get("FPGTIN"));
			hm.put(10, mpWeightsAndDim.get("FPDepth"));
			hm.put(11, mpWeightsAndDim.get("FPWidth"));
			hm.put(12, mpWeightsAndDim.get("FPHeight"));
			hm.put(13, mpWeightsAndDim.get("FPDUOM"));
			hm.put(14, mpWeightsAndDim.get("FPGWReal"));
			hm.put(15, mpWeightsAndDim.get("FPGWUOM"));
			hm.put(16, mpWeightsAndDim.get("FPNoOfCU"));
			hm.put(17, mpWeightsAndDim.get("FPNWOfProduct"));
			hm.put(18, mpWeightsAndDim.get("FPNWProdUOM"));
			//Updated code for Req Id : 33634 - Hyperlinks--Starts
			hm.put(19, HYPERLINK+mpWeightsAndDim.get("FPTUName")+HYPERLINK_PIPE+strTUPId);
			//Updated code for Req Id : 33634 - Hyperlinks--Ends
			hm.put(20, mpWeightsAndDim.get("FPPalletType"));
			hm.put(21, mpWeightsAndDim.get("FPTUTitle"));
			//hm.put(22, mpWeightsAndDim.get("FPTUGTIN"));
			hm.put(22, mpWeightsAndDim.get("FPTUDepth"));
			hm.put(23, mpWeightsAndDim.get("FPTUWidth"));
			hm.put(24, mpWeightsAndDim.get("FPTUHeight"));
			hm.put(25, mpWeightsAndDim.get("FPTUDUOM"));
			hm.put(26, mpWeightsAndDim.get("FPTUVolume"));
			hm.put(27, mpWeightsAndDim.get("FPVUOM"));
			hm.put(28, mpWeightsAndDim.get("FPGWWithPallet"));
			hm.put(29, mpWeightsAndDim.get("FPGWWithOutPallet"));
			hm.put(30, mpWeightsAndDim.get("FPTUGWUOM"));
			//hm.put(30, mpWeightsAndDim.get("FPPalletType"));
			hm.put(31, mpWeightsAndDim.get("FPCUPerLayer"));
			hm.put(32, mpWeightsAndDim.get("FPLayersPerTU"));
			hm.put(33, mpWeightsAndDim.get("FPTUCusUnit"));
			hm.put(34, mpWeightsAndDim.get("FPPalletStack"));
			hm.put(35, mpWeightsAndDim.get("FPPalletCase"));
			hm.put(36, mpWeightsAndDim.get("FPPalletTruck"));
			hm.put(37, mpWeightsAndDim.get("FPStackPattern"));
			hm.put(38, mpWeightsAndDim.get("FPCubeEfficiency"));
			hm.put(39, mpWeightsAndDim.get("FPIncludeInSAPBOMFeed"));
			//Added for requirement 39708
			if(UIUtil.isNotNullAndNotEmpty(strTUPId)) {
				hm.put(40, mpWeightsAndDim.get("UnderhangActualLength"));
				hm.put(41, mpWeightsAndDim.get("UnderhangActualWidth"));
				hm.put(42, mpWeightsAndDim.get("OverhangActualLength"));
				hm.put(43, mpWeightsAndDim.get("OverhangActualWidth"));
			}else {
				hm.put(40, DomainConstants.EMPTY_STRING);
				hm.put(41, DomainConstants.EMPTY_STRING);
				hm.put(42, DomainConstants.EMPTY_STRING);
				hm.put(43, DomainConstants.EMPTY_STRING);
			}
			//Updated code for Req Id : 33634 - Hyperlinks--Starts
			if(pgV3Constants.DENIED.equalsIgnoreCase((String) mpWeightsAndDim.get("FPPalletType")))
				hm.put(44, pgV3Constants.DENIED);
			else
				hm.put(44, HYPERLINK+htCommonCol.get("to[Derived].from.name")+HYPERLINK_PIPE+strDerivedId);
			//Updated code for Req Id : 33634 - Hyperlinks--Ends
			
			hm.put(45, htCommonCol.get("to[Derived].from.attribute[Title]"));
			hm.put(46, mpWeightsAndDim.get("PartFamilyName"));
			XSSFCellStyle style = workbook.createCellStyle();
			style = setForeGroundColor(strCurrent, style);
			//Added by DSM Reports (Sogeti) for 2022x.5 (APR CW 2024) Defect 55875 - Start
			XSSFCellStyle style1 = workbook.createCellStyle();
			//Added by DSM Reports (Sogeti) for 2022x.5 (APR CW 2024) Defect 55875 - End
			//Added code to fix Defect ID : 29204	DSM report --remove GTIN - 2018x.1.1 DSM Reports Oct -Ends
			
			for(int j=0;j<hm.size();j++){
				//Modified the code for _2022x_Aug CW Req-47097 - Start
				// Modified by DSM Reports (Sogeti) for 22x.03 (August CW 2023) Defect 54091 - Start
				Cell cell = row.createCell(columnCount1++);
				if (j == 2) {
					style = makeColumnNumeric(workbook, style);
				}

				cell.setCellStyle(style);
				
				// Modified by DSM Reports (Sogeti) for 22x.03 (August CW 2023) Defect 54091 - End
				//Modified the code for _2022x_Aug CW Req-47097 - End
				//cell.setCellValue((String)hm.get(j));
				//Added code for Req Id : 33634 - Hyperlinks--Starts
				strValue = (String)hm.get(j); 
				if(UIUtil.isNotNullAndNotEmpty(strValue) && strValue.startsWith(HYPERLINK_COMPARE)){
					String strSplittedValue[] = strValue.split("\\|",-1);
					strHyperlinkId = strSplittedValue[(strSplittedValue.length)-1];
					strValue = strSplittedValue[(strSplittedValue.length)-2];
					//Added code for 2018x.6 Requirement id 36700 Ability to generate Part and Spec report with without hyperlink Starts
					if(pgV3Constants.TRUE.equalsIgnoreCase(strHyperlink) && iRowCountAll < iHyperLinkLimit){
						getHyperlink(context,cell,workbook,strValue,strHyperlinkId,strCurrent);
					
					} else if(UIUtil.isNotNullAndNotEmpty(strValue)){
						cell.setCellValue(strValue);
					}
					//Added code for 2018x.6 Requirement id 36700 Ability to generate Part and Spec report with without hyperlink Ends
				}
				else{
					cell.setCellValue((String)hm.get(j));
					//Added by DSM Reports (Sogeti) for 2022x.5 (APR CW 2024) Defect 55875 - Start
					if(j == 0) {
						style1.cloneStyleFrom(style);
						style1.setWrapText(true);
						cell.setCellStyle(style1);
					}
					//Added by DSM Reports (Sogeti) for 2022x.5 (APR CW 2024) Defect 55875 - End
				}
				//Added code for Req Id : 33634 - Hyperlinks--Ends
			}
		} else {
			//Fetching CommonColumns --Begin		
			Hashtable htCommonCol = new Hashtable<>();
			htCommonCol= (Hashtable)mpWeightsAndDim.get("CommonColumns");			
			//Fetching CommonColumns --End
			//Fetching the Types Display name --Begin
			String strTypeDisplayName=null;
			strTypeName = (String)htCommonCol.get("type");
			strTypeDisplayName= getTypeDisplayName(context,strTypeName);
			String strCurrent = (String)htCommonCol.get("current");
			//Added code for Req Id : 33634 - Hyperlinks--Starts
			strParentId = (String)htCommonCol.get("id");
			strTUPId = (String)mpWeightsAndDim.get("FPTUId");
			strDerivedId = (String)htCommonCol.get("to[Derived].from.id");
			//Added code for Req Id : 33634 - Hyperlinks--Ends
			//if(!strCurrent.equalsIgnoreCase("Release") || strCurrent.equalsIgnoreCase("Released")){
			//Added the code for the Defect ID : 25104 - CA Tab is Empty : Starts
			//Code Upgrade for 2018x Data Model - Starts
			//Added by DSM Reports (Sogeti) for 2022x.5 (APR CW 2024) Defect 55875 - Start
			if(UIUtil.isNotNullAndNotEmpty(strCAId) && !strCAId.contains(HYPERLINK_PIPE)) {
				if(htCommonCol.get(CAREALIZEDNAME) != null && htCommonCol.get(CAPROPOSEDNAME) != null) {
					//Updated code for Req Id : 33634 - Hyperlinks--Starts
					hm.put(0, HYPERLINK+htCommonCol.get(CAREALIZEDNAME)+HYPERLINK_PIPE+strCAId);
					//Updated code for Req Id : 33634 - Hyperlinks--Ends
				} else if(htCommonCol.get(CAREALIZEDNAME) != null){
					//Updated code for Req Id : 33634 - Hyperlinks--Starts
					hm.put(0, HYPERLINK+htCommonCol.get(CAREALIZEDNAME)+HYPERLINK_PIPE+strCAId);
					//Updated code for Req Id : 33634 - Hyperlinks--Ends
				} else if(htCommonCol.get(CAPROPOSEDNAME) != null){
					//Updated code for Req Id : 33634 - Hyperlinks--Starts
					hm.put(0, HYPERLINK+htCommonCol.get(CAPROPOSEDNAME)+HYPERLINK_PIPE+strCAId);
					//Updated code for Req Id : 33634 - Hyperlinks--Ends
				} else {
					hm.put(0, DomainConstants.EMPTY_STRING);
				}	
			}else{
				hm.put(0,htCommonCol.get(CAPROPOSEDNAME));
			}
			//Added by DSM Reports (Sogeti) for 2022x.5 (APR CW 2024) Defect 55875 - End
			//Code Upgrade for 2018x Data Model - Ends			
			//Added the code for the Defect ID : 25104 - CA Tab is Empty : Ends
			hm.put(1, htCommonCol.get("attribute[Reason for Change]"));
			//Updated code for Req Id : 33634 - Hyperlinks--Starts
			hm.put(2, HYPERLINK+htCommonCol.get("name")+HYPERLINK_PIPE+strParentId);
			//Updated code for Req Id : 33634 - Hyperlinks--Ends
			hm.put(3, htCommonCol.get("attribute[Title]"));
			hm.put(4, strTypeDisplayName);
			//Code for requirement to addition of revision and state on all tabs except attribute -- Starts
			hm.put(5,  htCommonCol.get("revision"));
			hm.put(6,  htCommonCol.get("current"));
			//Code for requirement to addition of revision and state on all tabs except attribute -- Ends
			hm.put(7, mpWeightsAndDim.get("FPCSSType"));
			hm.put(8, mpWeightsAndDim.get("Title"));
			hm.put(9,  mpWeightsAndDim.get("UOMS"));
			//Added code to fix Defect ID : 29204	DSM report --remove GTIN - 2018x.1.1 DSM Reports Oct -Starts
			//hm.put(10, mpWeightsAndDim.get("FPGTIN"));
			hm.put(10, mpWeightsAndDim.get("FPDepth"));
			hm.put(11, mpWeightsAndDim.get("FPWidth"));
			hm.put(12, mpWeightsAndDim.get("FPHeight"));
			hm.put(13, mpWeightsAndDim.get("FPDUOM"));
			hm.put(14, mpWeightsAndDim.get("FPGWReal"));
			hm.put(15, mpWeightsAndDim.get("FPGWUOM"));
			hm.put(16, mpWeightsAndDim.get("FPNoOfCU"));
			hm.put(17, mpWeightsAndDim.get("FPNWOfProduct"));
			hm.put(18, mpWeightsAndDim.get("FPNWProdUOM"));
			//Updated code for Req Id : 33634 - Hyperlinks--Starts
			hm.put(19, HYPERLINK+mpWeightsAndDim.get("FPTUName")+HYPERLINK_PIPE+strTUPId);
			//Updated code for Req Id : 33634 - Hyperlinks--Ends
			hm.put(20, mpWeightsAndDim.get("FPPalletType"));
			hm.put(21, mpWeightsAndDim.get("FPTUTitle"));
			//hm.put(22, mpWeightsAndDim.get("FPTUGTIN"));
			hm.put(22, mpWeightsAndDim.get("FPTUDepth"));
			hm.put(23, mpWeightsAndDim.get("FPTUWidth"));
			hm.put(24, mpWeightsAndDim.get("FPTUHeight"));
			hm.put(25, mpWeightsAndDim.get("FPTUDUOM"));
			hm.put(26, mpWeightsAndDim.get("FPTUVolume"));
			hm.put(27, mpWeightsAndDim.get("FPVUOM"));
			hm.put(28, mpWeightsAndDim.get("FPGWWithPallet"));
			hm.put(29, mpWeightsAndDim.get("FPGWWithOutPallet"));
			hm.put(30, mpWeightsAndDim.get("FPTUGWUOM"));
			//hm.put(30, mpWeightsAndDim.get("FPPalletType"));
			hm.put(31, mpWeightsAndDim.get("FPCUPerLayer"));
			hm.put(32, mpWeightsAndDim.get("FPLayersPerTU"));
			hm.put(33, mpWeightsAndDim.get("FPTUCusUnit"));
			hm.put(34, mpWeightsAndDim.get("FPPalletStack"));
			hm.put(35, mpWeightsAndDim.get("FPPalletCase"));
			hm.put(36, mpWeightsAndDim.get("FPPalletTruck"));
			hm.put(37, mpWeightsAndDim.get("FPStackPattern"));
			hm.put(38, mpWeightsAndDim.get("FPCubeEfficiency"));
			hm.put(39, mpWeightsAndDim.get("FPIncludeInSAPBOMFeed"));
			//Added for requirement 39708
			if(pgV3Constants.TYPE_PGTRANSPORTUNITPART.equalsIgnoreCase(strType)) {
				hm.put(40, mpWeightsAndDim.get("UnderhangActualLength"));
				hm.put(41, mpWeightsAndDim.get("UnderhangActualWidth"));
				hm.put(42, mpWeightsAndDim.get("OverhangActualLength"));
				hm.put(43, mpWeightsAndDim.get("OverhangActualWidth"));
			}else {
				hm.put(40, DomainConstants.EMPTY_STRING);
				hm.put(41, DomainConstants.EMPTY_STRING);
				hm.put(42, DomainConstants.EMPTY_STRING);
				hm.put(43, DomainConstants.EMPTY_STRING);
			}
			//Updated code for Req Id : 33634 - Hyperlinks--Starts
			if(pgV3Constants.DENIED.equalsIgnoreCase((String) mpWeightsAndDim.get("FPPalletType")))
				hm.put(44, pgV3Constants.DENIED);
			else
				hm.put(44, HYPERLINK+htCommonCol.get("to[Derived].from.name")+HYPERLINK_PIPE+strDerivedId);
			//Updated code for Req Id : 33634 - Hyperlinks--Ends
			hm.put(45, htCommonCol.get("to[Derived].from.attribute[Title]"));
			hm.put(46, mpWeightsAndDim.get("PartFamilyName"));
			//Added code to fix Defect ID : 29204	DSM report --remove GTIN - 2018x.1.1 DSM Reports Oct -Ends
			
			//For Cells creation in a Row
			XSSFCellStyle style = workbook.createCellStyle();
			style = setForeGroundColor(strCurrent, style);
			//Added by DSM Reports (Sogeti) for 2022x.5 (APR CW 2024) Defect 55875 - Start
			XSSFCellStyle style1 = workbook.createCellStyle();
			//Added by DSM Reports (Sogeti) for 2022x.5 (APR CW 2024) Defect 55875 - End
			
			for(int j=0;j<hm.size();j++){
				//Modified the code for _2022x_Aug CW Req-47097 - Start
				// Modified by DSM Reports (Sogeti) for 22x.03 (August CW 2023) Defect 54091 - Start
				Cell cell = row.createCell(columnCount1++);
				if (j == 2) {
					style = makeColumnNumeric(workbook, style);
				}
				cell.setCellStyle(style);
				// Modified by DSM Reports (Sogeti) for 22x.03 (August CW 2023) Defect 54091 - End
				//Modified the code for _2022x_Aug CW Req-47097 - End
				//Added code for Req Id : 33634 - Hyperlinks--Starts
				strValue = (String)hm.get(j); 
				if(UIUtil.isNotNullAndNotEmpty(strValue) && strValue.startsWith(HYPERLINK_COMPARE)){
					String strSplittedValue[] = strValue.split("\\|",-1);
					strHyperlinkId = strSplittedValue[(strSplittedValue.length)-1];
					strValue = strSplittedValue[(strSplittedValue.length)-2];
					if(pgV3Constants.TRUE.equalsIgnoreCase(strHyperlink) && iRowCountAll < iHyperLinkLimit){
						getHyperlink(context,cell,workbook,strValue,strHyperlinkId,strCurrent);
					
					} else if(UIUtil.isNotNullAndNotEmpty(strValue)){
						cell.setCellValue(strValue);
					}
				} else {
					cell.setCellValue((String)hm.get(j));
					//Added by DSM Reports (Sogeti) for 2022x.5 (APR CW 2024) Defect 55875 - Start
					if(j == 0) {
						style1.cloneStyleFrom(style);
						style1.setWrapText(true);
						cell.setCellStyle(style1);
					}
					//Added by DSM Reports (Sogeti) for 2022x.5 (APR CW 2024) Defect 55875 - End
				}
				//Added code for Req Id : 33634 - Hyperlinks--Ends
			}
		}
		}
	sheetFormatter(sheetWeightAndDim); // Added by DSM Reports (Sogeti) for 22x.04 (Dec CW 2023) Defect 56156 - START/END
	} catch (Exception e) {		
		 outLog.print("Exception in  updateWorksheetWeightsAndDimensions: "+e+"\n");
		 outLog.flush();
	}
}

private void updateWorksheetAttribute(Context context, XSSFWorkbook workbook, XSSFRow rowHeaderAttribute, XSSFCellStyle cellStyleAttribute, MapList mlAttribute, XSSFSheet sheetAttribute, String strHyperlink, XSSFCellStyle styleGlobal) {
	//Added the code for 2022x.02 May CW Defect 52646 - Starts
	boolean isSupplierUser = false;
	boolean isCMUser = false;
	// Added by DSM Reports (Sogeti) for 22x.04 (Dec CW 2023) Defect 56156 - Start
	boolean isContextPushed = false;
	// Added by DSM Reports (Sogeti) for 22x.04 (Dec CW 2023) Defect 56156 - End
	//Added the code for 2022x.02 May CW Defect 52646 - Ends
	try {
		//Updated code for 2018x.6 Requirement 38092 Refactor Part And Spec Report Start
		//Added code for 2018x.6 Requirement id 36700 Ability to generate Part and Spec report with without hyperlink Starts
		//Added the code for 2022x.02 May CW Defect 52646 - Starts
		// Added by DSM Reports (Sogeti) for 22x.04 (Dec CW 2023) Defect 56156 - Start
		if(SPECREADER.equalsIgnoreCase(strOriginatingSource) && !pgV3Constants.PERSON_USER_AGENT.equals(context.getUser())) {
			//Pushing User Agent Context to get the Data if the Spec Reader User have access
			ContextUtil.pushContext(context,PropertyUtil.getSchemaProperty(context,"User Agent"),DomainConstants.EMPTY_STRING,DomainConstants.EMPTY_STRING);
			isContextPushed = true;
		}
		// Added by DSM Reports (Sogeti) for 22x.04 (Dec CW 2023) Defect 56156 - End
		Person person = new Person(context.getUser());
		if(person.isAssigned(context,pgV3Constants.ROLE_PGCONTRACTSUPPLIER) || person.isAssigned(context,pgV3Constants.ROLE_SPECREADERSUPPLIER) || isSupplierEBP(context, context.getUser())) {
			isSupplierUser = true;
		}
		if(person.isAssigned(context,pgV3Constants.ROLE_PGCONTRACTMANUFACTURER) || person.isAssigned(context, pgV3Constants.ROLE_SPECREADERCONTRACTMANUFACTURER) || isCMEBP(context, context.getUser()) ) {
			isCMUser = true;
		}
		//Added the code for 2022x.02 May CW Defect 52646 - Ends
		String strHyperlinkLimit = EnoviaResourceBundle.getProperty(context, EMXCPNSTRINGRESOURCE, context.getLocale(),"emxCPN.PartAndSpecReport.HyperlinkLimit");
		int iHyperLinkLimit = Integer.parseInt(strHyperlinkLimit);
		int iRowCountAll=0;
		//Added code for 2018x.6 Requirement id 36700 Ability to generate Part and Spec report with without hyperlink Ends
		String strColumnNames = EnoviaResourceBundle.getProperty(context, EMXCPN, context.getLocale(),"emxCPN.FamilyCareReport.Worksheet.Attribute.ColumnTypes");
		String strAttrColumn = "emxCPN.FamilyCareReport.Worksheet.Attribute.Column";
		createCellForWorksheet(context,strColumnNames,rowHeaderAttribute,cellStyleAttribute,strAttrColumn);
		int rowCount = 0;
		String strHasArt = DomainConstants.EMPTY_STRING;
		String strHasMultipleGTINS = DomainConstants.EMPTY_STRING;
		String strIsThisABattery = DomainConstants.EMPTY_STRING;
		
		String strATSName = DomainConstants.EMPTY_STRING;
		String lastUpdatedUser = DomainConstants.EMPTY_STRING;
		String strBrand = DomainConstants.EMPTY_STRING;
				   
		String ctxObjectId = DomainConstants.EMPTY_STRING;
		String strTypeName = DomainConstants.EMPTY_STRING;
		String strStructuredReleaseCriteriaRequired = DomainConstants.EMPTY_STRING;
		
		String strCellValue = DomainConstants.EMPTY_STRING;
		//Added code for defect id 37558 Product Form is not displayed in the Report Starts
		String strMarketingName = DomainConstants.EMPTY_STRING;
		//Updated for 2018x6.1 Oct CW requirement 39403 Starts
		String strIncludeTypes = EnoviaResourceBundle.getProperty(context, EMXCPN, context.getLocale(),"emxCPN.DSMReport.Access.ProductForm");
		//Updated for 2018x6.1 Oct CW requirement 39403 Ends
		StringList slAccessTypes = StringUtil.split(strIncludeTypes, pgV3Constants.SYMBOL_COMMA);
		//Added code for defect id 37558 Product Form is not displayed in the Report Ends
		//Re-Add column Does this Contain a Battery as a part of 2018x.5 December Release Starts
		String strContainsBattery = "";
		//Re-Add column Does this Contain a Battery as a part of 2018x.5 December Release Ends
		Hashtable<String,Object> htCommonCol = new Hashtable<>();
		Map<String,Object> mp=new HashMap<>();
		HashMap<Integer,Object> hm= new HashMap<>();
		String strCurrent = DomainConstants.EMPTY_STRING;
		String strId = DomainConstants.EMPTY_STRING;
		//Added code for 2018x.6 requirement 36696 Add Battery Attribute Starts
		String strPgBatteryType = DomainConstants.EMPTY_STRING;
		Map<String,Object> mpBatteryComponent = new HashMap<>();
		//Added code for 2018x.6 requirement 36696 Add Battery Attribute Ends
		//Added for 2018x6.1 Sept defect 43865 Starts
		String strIsThisABatteryCSS = DomainConstants.EMPTY_STRING;
		//Added for 2018x6.1 Sept defect 43865 Ends
		//Added code for 2018x.6 Requirement 37821, 36695 Add attributes in Attribute tab of Part and Spec Reports Starts
		String strRollUpNetWeightToCOP = DomainConstants.EMPTY_STRING; 
		//Added for defect 45074 Jan22_CW Starts
		String strPrintingProcess = "";  
		//Added for defect 45074 Jan22_CW Ends
		for (int i=0;i<mlAttribute.size();i++){
			++rowCount;
			//Added code for 2018x.6 Requirement id 36700 Ability to generate Part and Spec report with without hyperlink Starts
			iRowCountAll = iRowCountAll + 1;
			//Added code for 2018x.6 Requirement id 36700 Ability to generate Part and Spec report with without hyperlink Ends
			XSSFRow row = sheetAttribute.createRow(rowCount);
			int columnCount1 = 0;
			mp = (Map)mlAttribute.get(i);
			//Fetching CommonColumns --Begin		
			htCommonCol= (Hashtable)mp.get(COMMONCOLUMNS);
			//Fetching CommonColumns --End
			strCurrent = (String)htCommonCol.get(DomainConstants.SELECT_CURRENT);
			strId = (String)htCommonCol.get(DomainConstants.SELECT_ID);
			//Added by DSM Reports (Sogeti) for 2022x.5 (APR CW 2024) Defect 55875 - Start
			String sCAID = (String) htCommonCol.get(SCAID);
			//Added by DSM Reports (Sogeti) for 2022x.5 (APR CW 2024) Defect 55875 - End
			//Updated for 2018x6.1 Sept defect 43865 Starts
			strHasArt = (String)mp.get(ATTRIBUTE+SELECT_ATTRIBUTE_PGHASART+CLOSINGBRACKET);
			strHasMultipleGTINS = (String)mp.get(ATTRIBUTE+SELECT_ATTRIBUTE_PGHASMULTIPLEGTINS+CLOSINGBRACKET);
			strIsThisABattery = (String)mp.get(pgV3Constants.SELECT_ATTRIBUTE_PGISTHEPRODUCTABATTERY);
			strIsThisABatteryCSS = (String)mp.get(pgV3Constants.SELECT_ATTRIBUTE_PGISBATTERY);
			//Updated for 2018x6.1 Sept defect 43865 Ends
			strATSName = (String)mp.get(ATSNAME);
			//Added for Defect Id : 32221 - Starts
			if(strATSName.endsWith(pgV3Constants.SYMBOL_COMMA))
			{
				strATSName = strATSName.substring(0,strATSName.length()-1);
			}	
			//Added for Defect Id : 32221 - Ends
			//2018x1.1 Spet Req.
			//Modified for Defect - 38476 - starts
			strStructuredReleaseCriteriaRequired = (String)mp.get(ATTRIBUTE+SELECT_ATTR_STRUCTUREDRELEASECRITERIAREQ+CLOSINGBRACKET);
			//Modified for Defect - 38476 - ends
			ctxObjectId = (String)mp.get(DomainConstants.SELECT_ID);
			strTypeName = (String)htCommonCol.get(DomainConstants.SELECT_TYPE);
			//ALM Defect 31068 - Last Update User should be sourced from attribute pgLastUpdatedUser if it is populated(Uncommented code on 17-08-2020)
			//Updated code for defect id 34665 Starts
			lastUpdatedUser = getLastUpdatedUser(context,strTypeName,mp,ctxObjectId);
			//Updated code for defect id 34665 Ends
			//END ALM Defect 31068 - Last Update User should be sourced from attribute pgLastUpdatedUser
			strHasArt = getHasArt(strHasArt);
			strHasMultipleGTINS = getHasMultipleGTINS(strHasMultipleGTINS);
			strIsThisABattery = getIsThisABattery(strIsThisABattery);
			strIsThisABatteryCSS = getIsThisABattery(strIsThisABatteryCSS);
			strBrand = getBrand(context,strId);
			//Added code for 2018x.6 requirement 36696 Add Battery Attribute Starts
			strPgBatteryType = (String) mp.get(pgV3Constants.SELECT_ATTRIBUTE_PGBATTERYTYPE);
			mpBatteryComponent = getBatteryComponent(context,strPgBatteryType);
			////Added code for 2018x.6 requirement 36696 Add Battery Attribute Ends
			//Fetching the Types Display name --Begin
			String strTypeDisplayName=null;
			
			strTypeDisplayName= getTypeDisplayName(context,strTypeName);
			//Added for defect 45074 Jan22_CW Starts
			strPrintingProcess = getPrintinProcess(context,strId);
			//Added for defect 45074 Jan22_CW Ends
			//Added the code for the Defect ID : 25104 - CA Tab is Empty : Starts
			//Code Upgrade for 2018x Data Model - Starts
			
			//Added by DSM Reports (Sogeti) for 2022x.5 (APR CW 2024) Defect 55875 - Start
			if(UIUtil.isNotNullAndNotEmpty(sCAID) && !sCAID.contains(HYPERLINK_PIPE)) {
				if(htCommonCol.get(CAREALIZEDNAME) != null && htCommonCol.get(CAPROPOSEDNAME) != null) {
					//Updated code for Req Id : 33634 - Hyperlinks--Starts
					hm.put(0, HYPERLINK+htCommonCol.get(CAREALIZEDNAME)+HYPERLINK_PIPE+sCAID);
					//Updated code for Req Id : 33634 - Hyperlinks--Ends
				} else if(htCommonCol.get(CAREALIZEDNAME) != null){
					//Updated code for Req Id : 33634 - Hyperlinks--Starts
					hm.put(0, HYPERLINK+htCommonCol.get(CAREALIZEDNAME)+HYPERLINK_PIPE+sCAID);
					//Updated code for Req Id : 33634 - Hyperlinks--Ends
				} else if(htCommonCol.get(CAPROPOSEDNAME) != null ){
					//Updated code for Req Id : 33634 - Hyperlinks--Starts
					hm.put(0, HYPERLINK+htCommonCol.get(CAPROPOSEDNAME)+HYPERLINK_PIPE+sCAID);
					//Updated code for Req Id : 33634 - Hyperlinks--Ends
				} else {
					hm.put(0, DomainConstants.EMPTY_STRING);
				}	
			} else {
				hm.put(0, htCommonCol.get(CAPROPOSEDNAME));
			}		
			//Added by DSM Reports (Sogeti) for 2022x.5 (APR CW 2024) Defect 55875 - End				
			String strOriginatingSourceOld = (String) htCommonCol.get(pgV3Constants.SELECT_ATTRIBUTE_PGORIGINATINGSOURCE);
			String strOriginatingSource = strOriginatingSourceOld.trim();
			//Code Upgrade for 2018x Data Model - Ends
			//Added the code for the Defect ID : 25104 - CA Tab is Empty : Ends
			hm.put(1, htCommonCol.get(pgV3Constants.SELECT_ATTRIBUTE_REASON_FOR_CHANGE));
			//Updated code for Req Id : 33634 - Hyperlinks--Starts
			hm.put(2, HYPERLINK+htCommonCol.get(DomainConstants.SELECT_NAME)+HYPERLINK_PIPE+strId);
			//Updated code for Req Id : 33634 - Hyperlinks--Ends
			hm.put(3, htCommonCol.get(pgV3Constants.SELECT_ATTRIBUTE_TITLE));
			hm.put(4, strTypeDisplayName);
			hm.put(5, mp.get(DomainConstants.SELECT_REVISION));
			hm.put(6, strCurrent);
			hm.put(7, mp.get(DomainConstants.SELECT_DESCRIPTION));
			//Modified the code for _2022x_Aug CW Defect#53205 - START
			hm.put(8, pg.getUserName(context, strOriginatingSource, (String)mp.get(pgV3Constants.SELECT_ATTRIBUTE_ORIGINATOR)));
			//Modified the code for _2022x_Aug CW Defect#53205 - END
			hm.put(9, lastUpdatedUser);
			//Updated code for defect id 34908 Starts
			hm.put(10, htCommonCol.get(pgV3Constants.SELECT_ATTRIBUTE_PGASSEMBLYTYPE));
			//Updated code for defect id 34908 Ends
			hm.put(11, mp.get("from["+pgV3Constants.RELATIONSHIP_PGPDTEMPLATESTOPGPLISEGMENT+"].to.name"));
			hm.put(12, mp.get(ATTRIBUTE+pgV3Constants.STR_RELEASE_PHASE+CLOSINGBRACKET));
			hm.put(13, mp.get(DomainConstants.SELECT_OWNER));
			hm.put(14, mp.get(pgV3Constants.SELECT_ATTRIBUTE_PGLIFECYCLESTATUS));
			hm.put(15, strBrand);
			//Added code for defect id 37558 Product Form is not displayed in the Report Starts
			strMarketingName = getMarketingName(strTypeName,slAccessTypes,strMarketingName,mp);
			hm.put(16, strMarketingName);
			//Added code for defect id 37558 Product Form is not displayed in the Report Ends
			hm.put(18, mp.get(pgV3Constants.SELECT_ATTRIBUTE_PGBATTERYTYPE));
			hm.put(19, mp.get(pgV3Constants.SELECT_ATTRIBUTE_PGWDSTATIUS));
			hm.put(20, mp.get(pgV3Constants.SELECT_ATTRIBUTE_PGBASEUNITOFMEASURE));
			//Added code for 2022x-05 Requirement id 48327 ---- START
			hm.put(21, mp.get(pgV3Constants.SELECT_ATTRIBUTE_PGPACKAGINGMATERIALTYPE));
			//Added code for 2022x-05 Requirement id 48327 ---- START
			hm.put(22, mp.get(pgV3Constants.SELECT_ATTRIBUTE_PGBOMBASEQUANTITY));
			hm.put(23, mp.get(pgV3Constants.SELECT_ATTRIBUTE_PGLOCALDESCRIPTION));
			hm.put(24, mp.get(pgV3Constants.SELECT_ATTRIBUTE_PGOTHERNAMES));
			hm.put(25, mp.get(ATTRIBUTE+pgV3Constants.ATTRIBUTE_PGMARKETINGSIZE+CLOSINGBRACKET));
			hm.put(26, mp.get(ATTRIBUTE+pgV3Constants.ATTRIBUTE_PGCSU+CLOSINGBRACKET));
			hm.put(27, mp.get(ATTRIBUTE+pgV3Constants.ATTRIBUTE_PGCUSTOMIZATIONTYPE+CLOSINGBRACKET));
			hm.put(28, mp.get(pgV3Constants.SELECT_ATTRIBUTE_PGPREFERREDMATERIAL));
			hm.put(29, strHasArt);
			hm.put(30, strHasMultipleGTINS);
			hm.put(31, mp.get(pgV3Constants.SELECT_ATTRIBUTE_PGCLASS));
			hm.put(32, mp.get(pgV3Constants.SELECT_ATTRIBUTE_PGSUBCLASS));
			hm.put(33, mp.get("from["+pgV3Constants.RELATIONSHIP_PGPDTEMPLATESTOPGPLIREPORTEDFUNCTION+"].to.name"));
			//Modified for Defect Id : 33575 - Starts
			//Added for Defect 36905 - Missing Packaging Component Type on PMP DSM Report-Starts
			hm.put(34,mp.get(PRIMARYPACKAGINGTYPE));
			//Added for Defect 36905 - Missing Packaging Component Type on PMP DSM Report-ends
			hm.put(35, mp.get(pgV3Constants.SELECT_ATTRIBUTE_PGSECONDARYPACKAGINGTYPE));
			//Modified for Defect Id : 33575 - Ends
			hm.put(36, mp.get(pgV3Constants.SELECT_ATTRIBUTE_PGPACKAGINGSIZEUOM));
			hm.put(37, mp.get(pgV3Constants.SELECT_ATTRIBUTE_PGPACKAGINGSIZE));
			hm.put(38, mp.get(pgV3Constants.SELECT_ATTRIBUTE_PGPACKAGINGTECHNOLOGY));
			hm.put(39, mp.get(pgV3Constants.SELECT_ATTRIBUTE_PGPARTCOLOR));
			//Added for defect 45074 Jan22_CW Starts
			hm.put(40, strPrintingProcess);
			//Added for defect 45074 Jan22_CW Ends
			hm.put(41, mp.get(pgV3Constants.SELECT_ATTRIBUTE_PGDECORATIONDETAILS));
			hm.put(42, mp.get(pgV3Constants.SELECT_ATTRIBUTE_PGSHIPPINGINSTRUCTIONS));
			hm.put(43, mp.get(pgV3Constants.SELECT_ATTRIBUTE_PGLABELINGINFORMATION));
			//Updated code for Defect : 33575 - attribute "Storage Conditions" instead of pgStorageInformation--Starts
			hm.put(44, mp.get(pgV3Constants.SELECT_ATTRIBUTE_STORAGECONDITIONS));
			//Updated code for Defect : 33575 - attribute "Storage Conditions" instead of pgStorageInformation--Ends
			hm.put(45, mp.get(pgV3Constants.SELECT_ATTRIBUTE_PGSTORAGETEMPERATURELIMITS));
			hm.put(46, mp.get(pgV3Constants.SELECT_ATTRIBUTE_PGSTORAGEHUMIDITYLIMITS));
			//Updated 2018x6.1 Dec_CW defect 44869 Starts
			hm.put(47, mp.get("WarehousingClassification"));
			//Updated 2018x6.1 Dec_CW defect 44869 Ends
			hm.put(48, mp.get(pgV3Constants.SELECT_ATTRIBUTE_COMMENT));
			//Updated code for Req Id : 33634 - Hyperlinks--Starts
			hm.put(49, HYPERLINK+mp.get("to["+pgV3Constants.RELATIONSHIP_DERIVED+"].from.name")+HYPERLINK_PIPE+mp.get("to["+pgV3Constants.RELATIONSHIP_DERIVED+"].from.id"));
			//Updated code for Req Id : 33634 - Hyperlinks--Ends
			//Code for displaying Mater Column Value according to the Originating Source DSO/CSS: Starts
			//Updated code for defect id 36943--Starts
			//Updated code for defect 42526
			//Updated code for defect 43865 Starts
			if((UIUtil.isNotNullAndNotEmpty(strOriginatingSource) && strOriginatingSource.contains("CSS"))){
				//Updated code for defect id 36943--Ends
				//Added For DSM Report 2018x1.1 Scope : 2.Report shall include Master Name in attributes tab :Starts
				//Updated code for Req Id : 33634 - Hyperlinks--Starts
				hm.put(58, HYPERLINK+mp.get("from["+pgV3Constants.RELATIONSHIP_PGMASTER+"].to.name")+HYPERLINK_PIPE+mp.get("from["+pgV3Constants.RELATIONSHIP_PGMASTER+"].to.id"));
				//Updated code for Req Id : 33634 - Hyperlinks--Ends
				hm.put(59, mp.get("from["+pgV3Constants.RELATIONSHIP_PGMASTER+"].to."+pgV3Constants.SELECT_ATTRIBUTE_TITLE));
				//Added For DSM Report 2018x1.1 Scope : 2.Report shall include Master Name in attributes tab :Ends
				//Added for 2018x6.1 Sept defect 43865 Starts
				hm.put(17, strIsThisABatteryCSS);
				//Added for 2018x6.1 Sept defect 43865 Ends
		}
			else if(UIUtil.isNotNullAndNotEmpty(strOriginatingSource) && pgV3Constants.DSM_ORIGIN.equalsIgnoreCase(strOriginatingSource)){
				//Added For DSM Report 2018x1.1 Scope : 2.Report shall include Master Name in attributes tab :Starts
				hm.put(58, HYPERLINK+mp.get("to["+pgV3Constants.RELATIONSHIP_CLASSIFIEDITEM+"].frommid["+pgV3Constants.RELATIONSHIP_PARTFAMILYREFERENCE+"].torel.to.name")+HYPERLINK_PIPE+mp.get("to["+pgV3Constants.RELATIONSHIP_CLASSIFIEDITEM+"].frommid["+pgV3Constants.RELATIONSHIP_PARTFAMILYREFERENCE+"].torel.to.id"));
				hm.put(59, mp.get("to["+pgV3Constants.RELATIONSHIP_CLASSIFIEDITEM+"].frommid["+pgV3Constants.RELATIONSHIP_PARTFAMILYREFERENCE+"].torel.to."+pgV3Constants.SELECT_ATTRIBUTE_TITLE));
				//Added For DSM Report 2018x1.1 Scope : 2.Report shall include Master Name in attributes tab :Ends
				//Added for 2018x6.1 Sept defect 43865 Starts
				hm.put(17, strIsThisABattery);
				//Added for 2018x6.1 Sept defect 43865 Ends
			}
			hm.put(53, mp.get(pgV3Constants.SELECT_ATTRIBUTE_PGSHELFLIFE));
			//Updated code for defect 43855 Ends
			//Code for displaying Mater Column Value according to the Originating Source DSO/CSS: Ends
			hm.put(50, mp.get(PARTFAMILYNAME));
			hm.put(51, strATSName);
			hm.put(52, htCommonCol.get("to["+pgV3Constants.RELATIONSHIP_DERIVED+"].from."+pgV3Constants.SELECT_ATTRIBUTE_TITLE));
			//2018x0 April Bug Fix
			hm.put(54, mp.get(pgV3Constants.SELECT_ATTRIBUTE_RELEASE_DATE));
			hm.put(55, mp.get(pgV3Constants.SELECT_ATTRIBUTE_EFFECTIVITYDATE));
			hm.put(56, mp.get(pgV3Constants.SELECT_ATTRIBUTE_EXPIRATION_DATE));
			hm.put(57, mp.get(ORGANIZATION));
			//2018x0 April Bug Fix - End
			
			//Added For DSM Report 2018x1.1 Scope : 6.2.Report shall include Weight Characteristics in attributes tab :Starts
			hm.put(60, mp.get(pgV3Constants.SELECT_ATTRIBUTE_PGGROSSWEIGHTREAL));
			hm.put(61, mp.get(pgV3Constants.SELECT_ATTRIBUTE_PGGROSSWEIGHTUNITOFMEASURE));
			hm.put(62, mp.get(ATTRIBUTE+SELECT_ATTR_PGLEGACYPRODUCTWEIGHT+CLOSINGBRACKET));
			hm.put(63, mp.get(ATTRIBUTE+SELECT_ATTR_PGLEGACYWEIGHTFACTOR+CLOSINGBRACKET));
			hm.put(64, mp.get(ATTRIBUTE+SELECT_ATTR_PGLEGACYWEIGHTFACTORUOM+CLOSINGBRACKET));
			//Added For DSM Report 2018x1.1 Scope : 6.2.Report shall include Weight Characteristics in attributes tab :Ends
			hm.put(65, strStructuredReleaseCriteriaRequired);
			//Added code for Reqirement Id: 34930 - 2018x.5 Part And Specification Report shall add  function, Business area and product category platform, Product Technology Platform,  Product Technology Chassis and Franchise  in attribute tab-Starts
			hm.put(66, mp.get(BUSINESSAREA));
			hm.put(67, mp.get(PRODUCTCATEGORYPLATFORM));
			hm.put(68, mp.get(PRODUCTECHNOLOGYPLATFORM));
			hm.put(69, mp.get(PRODUCTECHNOLOGYCHASSIS));
			hm.put(70, mp.get(FRANCHISEPLATFORM));
			hm.put(71,mp.get(MATERIALFUNCTION));
			//Added code for Reqirement Id: 34930 - 2018x.5 Part And Specification Report shall add  function, Business area and product category platform, Product Technology Platform,  Product Technology Chassis and Franchise  in attribute tab:Ends
			//Added for Defect 36894 - Missing Packaging Component Type on PMP DSM Report-Starts
			hm.put(72,mp.get(pgV3Constants.SELECT_ATTRIBUTE_PGPACKAGINGCOMPONENTTYPE));
			//Added for Defect 36894 - Missing Packaging Component Type on PMP DSM Report-Ends
			//Added the code for 2022x.02 May CW Requirement 46148 - Starts
			hm.put(73,mp.get(ATTRIBUTE+ATTRIBUTE_COMPONENT_PACK_FAMILY_LEVEL_1+CLOSINGBRACKET));
			hm.put(74,mp.get(ATTRIBUTE+ATTRIBUTE_COMPONENT_PACK_FAMILY_LEVEL_2+CLOSINGBRACKET));
			hm.put(75,mp.get(ATTRIBUTE+ATTRIBUTE_COMPONENT_PACK_FAMILY_LEVEL_3+CLOSINGBRACKET));
			//Added the code for 2022x.02 May CW Requirement 46148 - Ends
			//Modified the code for 2022x.02 May CW Requirement 46148 - Starts
			//Re-Add column Does this Contain a Battery as a part of 2018x.5 December Release Starts
            //Modified the code for 22x.03 August CW Requirement 47085 - Starts
			strContainsBattery =(String) mp.get(pgV3Constants.SELECT_ATTRIBUTE_PGCONTAINSBATTERY); 
			strContainsBattery = getContainsBattery(strContainsBattery);
			hm.put(79,strContainsBattery);
			//Re-Add column Does this Contain a Battery as a part of 2018x.5 December Release Ends
			//Added code for 2018x.6 Requirement 37811, 36694 Add attributes in Attribute tab of Part and Spec Reports Starts
			hm.put(80,mp.get(pgV3Constants.SELECT_ATTRIBUTE_PGNETWEIGHT+".inputvalue"));
			hm.put(81,mp.get(pgV3Constants.SELECT_ATTRIBUTE_PGNETWEIGHTOFPRODUCTINCONSUMERUNITREAL+".inputvalue"));
			strRollUpNetWeightToCOP = getRollUpNetWeightToCOP((String)mp.get(ATTRIBUTE+ATTR_PGROLLUPNETWEIGHT+CLOSINGBRACKET));
			hm.put(82,strRollUpNetWeightToCOP);
			//Added code for defect id 38153 Add vendor details for Attribute tab Starts
			hm.put(83,mp.get("VendorName"));
			hm.put(84,mp.get("VendorID"));
			hm.put(85,mp.get("VendorMarket"));
			hm.put(86,mp.get("VendorCity"));
			//Added code for defect id 38153 Add vendor details for Attribute tab Ends
			//Battery Starts
			hm.put(87,mpBatteryComponent.get("BatteryChemistry"));
			hm.put(88,mpBatteryComponent.get("BatteryWeight"));
			hm.put(89,mpBatteryComponent.get("BatterySize"));
			//Battery Ends
			//Added code for 2018x.6 Requirement 37821, 36695 Add attributes in Attribute tab of Part and Spec Reports Ends
			//Added for 2018x6.1 Oct CW Req 40750 Starts
			hm.put(90,mp.get(AWLUtil.strcat("attribute[",ATTR_PGTRANSPORTTEMPCONTROL, "]")));
			//Added for 2018x6.1 Oct CW Req 40750 Ends
			//Added code for 2018x.6 MAY CW Requirement 43024 - Starts
			hm.put(91,mp.get(REASONFORCHANGEMANFSTATUS));
			//Added code for 2018x.6 MAY CW Requirement 43024 - Ends
			//Added for Requirement 45505,45511,45517: 22x 01 CW -- Starts
			//Remove the code for 22xFeb CW for Defect 51678 - Starts
			//if(strTypeName.equalsIgnoreCase(TYPE_FINISHED_PRODUCT_PART)){
			////Remove the code for 22xFeb CW for Defect 51678 - Ends
				hm.put(92,mp.get(ATTRIBUTE+ATTRIBUTE_PG_WDVALIDATIONEXCEPTION+CLOSINGBRACKET));
				hm.put(93,mp.get(ATTRIBUTE+ATTRIBUTE_PG_WDEXCEPTIONCOMMENT+CLOSINGBRACKET));
				//Added for Defect 51678:22x 01 CW - Starts
				hm.put(94,mp.get(STRWDVALIDATIONEXCEPTIONSUPPORTDOC));
				//Added for Defect 51678:22x 01 CW - Ends
				//Remove the code for 22xFeb CW for Defect 51678 - Starts
			//}
				//Remove the code for 22xFeb CW for Defect 51678 - Starts
			//Added for Requirement 45505,45511,45517: 22x 01 CW -- Ends
				//Added code for defect: 46222--Starts
				hm.put(95, mp.get(SELECT_ATTRIBUTE_PGPREVIOUSREVISIONOBSOLETEDATE));
				//Added code for defect: 46222--Ends
				//Added the code for 22x.02 May CW Requirment 46195 - Starts
				//Added the code for 2022x.02 May CW Defect 52646 - Starts
				if(isSupplierUser && !isCMUser) {
					hm.put(96, DomainConstants.EMPTY_STRING);
					hm.put(97, DomainConstants.EMPTY_STRING);
				} else {
					hm.put(96, mp.get(ATTRIBUTE+ATTRIBUTE_RELATIONSHIP_RESTRICTION+CLOSINGBRACKET));
					hm.put(97, mp.get(ATTRIBUTE+ATTRIBUTE_RELATIONSHIP_RESTRICTION_COMMENT+CLOSINGBRACKET));
				}
				
				//Added the code for 2022x.02 May CW Defect 52646 - Ends
				//Added the code for 22x.02 May CW Requirment 46195 - Ends
				// Modified the code for 2022x.02 May CW Requirement 46148 - starts
				// Modified the code for 2022x.02 May CW Requirement 46148 - Ends
                //Added the code for 22x.02 May CW Requirement 46148 - Starts
                hm.put(76,mp.get(ATTRIBUTE+ATTRIBUTE_CONSUMER_PACK_FAMILY+CLOSINGBRACKET));
                hm.put(77,mp.get(ATTRIBUTE+ATTRIBUTE_CONSUMER_PRIMARY_PACKAGING_TYPE+CLOSINGBRACKET));
                hm.put(78,mp.get(ATTRIBUTE+ATTRIBUTE_CONSUMER_SECONDARY_PACKAGING_TYPE+CLOSINGBRACKET));
                //Modified the code for 22x.03 August CW Requirement 47084 - Ends
                //Added the code for 22x.02 May CW Requirement 46148 - Ends
            XSSFCellStyle style = workbook.createCellStyle();
		    style = setForeGroundColor(strCurrent, style);
			//Added by DSM Reports (Sogeti) for 2022x.5 (APR CW 2024) Defect 55875 - Start
		    XSSFCellStyle style1 = workbook.createCellStyle();
			//Added by DSM Reports (Sogeti) for 2022x.5 (APR CW 2024) Defect 55875 - End
		    
			//For Cells creation in a Row	
			for(int j=0;j<hm.size();j++){
				//Modified the code for _2022x_Aug CW Req-47097
				// Modified by DSM Reports (Sogeti) for 22x.03 (August CW 2023) Defect 54091 - Start
				Cell cell = row.createCell(columnCount1++);
				if (j == 2) {
					style = makeColumnNumeric(workbook, style);
				}
				cell.setCellStyle(style);
				
				// Modified by DSM Reports (Sogeti) for 22x.03 (August CW 2023) Defect 54091 - End
				//Modified the code for _2022x_Aug CW Req-47097;
				if(hm.get(j)==null){
					cell.setCellValue("");
				}
				else{
					//Added code for Req Id : 33634 - Hyperlinks--Starts
					if(hm.get(j) instanceof StringList){
						strCellValue = (hm.get(j).toString().replace("[", "").replace("]", ""));
						
					} else{
						strCellValue = (String)hm.get(j);
					}
					if(UIUtil.isNotNullAndNotEmpty(strCellValue) && strCellValue.startsWith(HYPERLINK_COMPARE)){
						String[] strSplittedValue = strCellValue.split("\\|", -1);
						String strHyperlinkId = strSplittedValue[(strSplittedValue.length)-1];
						String strValue = strSplittedValue[(strSplittedValue.length)-2];
						//Added code for 2018x.6 Requirement id 36700 Ability to generate Part and Spec report with without hyperlink Starts
						if(pgV3Constants.TRUE.equalsIgnoreCase(strHyperlink) && iRowCountAll < iHyperLinkLimit){
							getHyperlink(context,cell,workbook,strValue,strHyperlinkId,strCurrent);
						
						} else if(UIUtil.isNotNullAndNotEmpty(strValue)) {
								cell.setCellValue(strValue);
						}
						//Added code for 2018x.6 Requirement id 36700 Ability to generate Part and Spec report with without hyperlink Ends
					} else {
						cell.setCellValue(strCellValue);
						//Added by DSM Reports (Sogeti) for 2022x.5 (APR CW 2024) Defect 55875 - Start
						if(j == 0) {
							style1.cloneStyleFrom(style);
							style1.setWrapText(true);
							cell.setCellStyle(style1);
						}
						//Added by DSM Reports (Sogeti) for 2022x.5 (APR CW 2024) Defect 55875 - End
					}
				}
				//Added code for Req Id : 33634 - Hyperlinks--Ends
			}
		}
		//Updated code for 2018x.6 Requirement 38092 Refactor Part And Spec Report End
		sheetFormatter(sheetAttribute); // Added by DSM Reports (Sogeti) for 22x.04 (Dec CW 2023) Defect 56156 - START/END
		// Added by DSM Reports (Sogeti) for 22x.04 (Dec CW 2023) Defect 56156 - Start
		} catch (Exception e) {
			 outLog.print("Exception in  updateWorksheetAttribute: "+e+"\n");
			 outLog.flush();
		}finally {
			if(isContextPushed) {
				try {
					ContextUtil.popContext(context);
				} catch (FrameworkException e) {
					outLog.print("Exception in  updateWorksheetAttribute: "+e+"\n");
					outLog.flush();
				}
			}
			// Added by DSM Reports (Sogeti) for 22x.04 (Dec CW 2023) Defect 56156 - End
		}
	}

private void updateWorksheetPeerReview(Context context, XSSFWorkbook workbook,XSSFRow rowHeaderPeerReview,XSSFCellStyle cellStylePeerReview,MapList mlPeerReviewTask,XSSFSheet sheetPeerReview){
try {
	String sStringResourceFile="emxCPNStringResource"; 
	String sLanguage = context.getSession().getLanguage();
	String strPeerReviewChangeAction= i18nNow.getI18nString("emxCPN.FamilyCareReport.Worksheet.Column.ChangeAction",sStringResourceFile, sLanguage);
	String strPeerReviewChangeActionReasonForChange=i18nNow.getI18nString("emxCPN.FamilyCareReport.Worksheet.Column.ChangeActionReasonForChange",sStringResourceFile, sLanguage);
	String strPeerReviewNameOrNumber=i18nNow.getI18nString("emxCPN.FamilyCareReport.Worksheet.Column.NameOrNumber",sStringResourceFile, sLanguage);
	String stPeerReviewTitle=i18nNow.getI18nString("emxCPN.FamilyCareReport.Worksheet.Column.Title",sStringResourceFile, sLanguage);
	String strPeerReviewType=i18nNow.getI18nString("emxCPN.FamilyCareReport.Worksheet.Column.Type",sStringResourceFile, sLanguage);
	//Code for requirement to addition of revision and state on all tabs except attribute - Starts
	String strPeerReviewRevision = i18nNow.getI18nString("emxCPN.FamilyCareReport.Worksheet.Column.Revision",sStringResourceFile, sLanguage);
	String strPeerReviewState = i18nNow.getI18nString("emxCPN.FamilyCareReport.Worksheet.Column.State",sStringResourceFile, sLanguage);
	//Code for requirement to addition of revision and state on all tabs except attribute - Ends
	String strPeerReviewer=i18nNow.getI18nString("emxCPN.FamilyCareReport.Worksheet.PeerReview.column.PeerReviewer",sStringResourceFile, sLanguage);
	String strPeerReviewDateOfCompletion=i18nNow.getI18nString("emxCPN.FamilyCareReport.Worksheet.PeerReview.column.DateOfCompletion",sStringResourceFile, sLanguage);
	String strPeerReviewComments=i18nNow.getI18nString("emxCPN.FamilyCareReport.Worksheet.PeerReview.column.Comments",sStringResourceFile, sLanguage);
	String strPeerReviewDerivedFromName=i18nNow.getI18nString("emxCPN.FamilyCareReport.Worksheet.PeerReview.Column.DerivedFromName",sStringResourceFile, sLanguage);
	String strPeerReviewDerivedFromTitle=i18nNow.getI18nString("emxCPN.FamilyCareReport.Worksheet.PeerReview.Column.DerivedFromTitle",sStringResourceFile, sLanguage);
	String strPeerReviewPartFamilyName=i18nNow.getI18nString("emxCPN.FamilyCareReport.Worksheet.PeerReview.Column.PartFamilyName",sStringResourceFile, sLanguage);
	//Start Modified for 22x Changes for auto name of Part Library & Faimly
	String strPeerReviewPartFamilyTitle=i18nNow.getI18nString("emxCPN.FamilyCareReport.Worksheet.PeerReview.Column.PartFamilyTitle",sStringResourceFile, sLanguage);
	//End Modified for 22x Changes for auto name of Part Library & Faimly
	//Creating Header ---Begin
	//1 Change Action
	Cell cellChangeAction = rowHeaderPeerReview.createCell(0);
	cellChangeAction.setCellStyle(cellStylePeerReview);
	cellChangeAction.setCellValue(strPeerReviewChangeAction);
	
	//2 Change Action 'Reason for Change'
	Cell cellChangeActionReasonForChange = rowHeaderPeerReview.createCell(1);
	cellChangeActionReasonForChange.setCellStyle(cellStylePeerReview);
	cellChangeActionReasonForChange.setCellValue(strPeerReviewChangeActionReasonForChange);
	
	//3 Name/Number
	Cell cellNameOrNumber = rowHeaderPeerReview.createCell(2);
	cellNameOrNumber.setCellStyle(cellStylePeerReview);
	cellNameOrNumber.setCellValue(strPeerReviewNameOrNumber);
	
	//4 Title
	Cell cellTitle = rowHeaderPeerReview.createCell(3);
	cellTitle.setCellStyle(cellStylePeerReview);
	cellTitle.setCellValue(stPeerReviewTitle);
	
	//5 Type
	Cell cellType = rowHeaderPeerReview.createCell(4);
	cellType.setCellStyle(cellStylePeerReview);
	cellType.setCellValue(strPeerReviewType);			
	
	//6 Revision
	//Code for requirement to addition of revision and state on all tabs except attribute -- Starts
	Cell cellRevision = rowHeaderPeerReview.createCell(5);
	cellRevision.setCellStyle(cellStylePeerReview);
	cellRevision.setCellValue(strPeerReviewRevision);
	
	//7 State
	Cell cellState = rowHeaderPeerReview.createCell(6);
	cellState.setCellStyle(cellStylePeerReview);
	cellState.setCellValue(strPeerReviewState);
	//Code for requirement to addition of revision and state on all tabs except attribute -- Ends
	
	//8 Peer Reviewer
	Cell cellQuantity = rowHeaderPeerReview.createCell(7);
	cellQuantity.setCellStyle(cellStylePeerReview);
	cellQuantity.setCellValue(strPeerReviewer);
	
	//9 Date Of Completion
	Cell cellGrossWeight = rowHeaderPeerReview.createCell(8);
	cellGrossWeight.setCellStyle(cellStylePeerReview);
	cellGrossWeight.setCellValue(strPeerReviewDateOfCompletion);
	
	//10 Comments			
	Cell cellPeerReviewComments = rowHeaderPeerReview.createCell(9);
	cellPeerReviewComments.setCellStyle(cellStylePeerReview);
	cellPeerReviewComments.setCellValue(strPeerReviewComments);
	
	//11 DerivedFromName
	Cell DerivedFromName = rowHeaderPeerReview.createCell(10);
	DerivedFromName.setCellStyle(cellStylePeerReview);
	DerivedFromName.setCellValue(strPeerReviewDerivedFromName);
	
	//12 DerivedFromName
	Cell DerivedFromTitle = rowHeaderPeerReview.createCell(11);
	DerivedFromTitle.setCellStyle(cellStylePeerReview);
	DerivedFromTitle.setCellValue(strPeerReviewDerivedFromTitle);
	
	//13 PartFamilyName
	
	Cell PartFamilyName = rowHeaderPeerReview.createCell(12);
	PartFamilyName.setCellStyle(cellStylePeerReview);
	//Start Modified for 22x Changes for auto name of Part Library & Faimly
	PartFamilyName.setCellValue(strPeerReviewPartFamilyTitle);
	//End Modified for 22x Changes for auto name of Part Library & Faimly
	
	int rowCount1 = 0;
	String strTypeName = DomainConstants.EMPTY_STRING;
	XSSFCellStyle style = workbook.createCellStyle();
	//Added by DSM Reports (Sogeti) for 2022x.5 (APR CW 2024) Defect 55875 - Start
	XSSFCellStyle style1 = workbook.createCellStyle();
	//Added by DSM Reports (Sogeti) for 2022x.5 (APR CW 2024) Defect 55875 - End
	style.setFillForegroundColor(IndexedColors.GREY_25_PERCENT.getIndex());	
	style.setFillPattern(FillPatternType.SOLID_FOREGROUND);
	for (int i=0;i<mlPeerReviewTask.size();i++){
		XSSFRow row = sheetPeerReview.createRow(++rowCount1);
		int columnCount1 = 0;
		Map mp = (Map)mlPeerReviewTask.get(i);
		String StrState = (String)mp.get("CurrentState");
		HashMap hm= new HashMap<>();
		String strTypeDisplayName=null;
		strTypeName =(String)mp.get("type");
		strTypeDisplayName= getTypeDisplayName(context,strTypeName);
		//if(StrState.equalsIgnoreCase("Release") || StrState.equalsIgnoreCase("Released")){
		
		hm.put(0, mp.get("Change Action"));
		hm.put(1, mp.get("Reason for Change"));
		hm.put(2, mp.get("name"));
		hm.put(3, mp.get("Title"));
		hm.put(4, strTypeDisplayName);
		//Code for requirement to addition of revision and state on all tabs except attribute -- Starts
		hm.put(5, mp.get("revision"));
		hm.put(6, StrState);
		//Code for requirement to addition of revision and state on all tabs except attribute -- Ends
		hm.put(7, mp.get("Person Name"));
		hm.put(8, mp.get("attribute[Actual Completion Date]"));
		hm.put(9, mp.get("attribute[Comments]"));
		hm.put(10,mp.get("DerivedFromName"));
		hm.put(11,mp.get("DerivedFromTitle"));
		hm.put(12,mp.get("PartFamilyName"));
		//For Cells Creation in each Row		
		for(int j=0;j<hm.size();j++){								
			Cell cell = row.createCell(columnCount1++);
			cell.setCellValue((String)hm.get(j));
			if(StrState.equalsIgnoreCase("Release") || StrState.equalsIgnoreCase("Released")){
				cell.setCellStyle(style);
			}
		}
	}
	} catch (Exception e) {
		 outLog.print("Exception in  updateWorksheetPeerReview: "+e+"\n");
		 outLog.flush();
	}
}

	
private void updateWorksheetPeerApprove(Context context, XSSFWorkbook workbook,XSSFRow rowHeaderApprove,XSSFCellStyle cellStyleApprove,MapList mlApprove,XSSFSheet sheetApprove, String strHyperlink, XSSFCellStyle styleGlobal){
try {
	//Added code for 2018x.6 Requirement id 36700 Ability to generate Part and Spec report with without hyperlink Starts
	String strHyperlinkLimit = EnoviaResourceBundle.getProperty(context, EMXCPNSTRINGRESOURCE, context.getLocale(),"emxCPN.PartAndSpecReport.HyperlinkLimit");
	int iHyperLinkLimit = Integer.parseInt(strHyperlinkLimit);
	int iRowCountAll=0;
	//Added code for 2018x.6 Requirement id 36700 Ability to generate Part and Spec report with without hyperlink Ends
	String strApproveChangeAction= EnoviaResourceBundle.getProperty(context, EMXCPNSTRINGRESOURCE, context.getLocale(),"emxCPN.FamilyCareReport.Worksheet.Column.ChangeAction");
	String strApproveChangeActionReasonForChange=EnoviaResourceBundle.getProperty(context, EMXCPNSTRINGRESOURCE, context.getLocale(),"emxCPN.FamilyCareReport.Worksheet.Column.ChangeActionReasonForChange");
	String strApproveNameOrNumber=EnoviaResourceBundle.getProperty(context, EMXCPNSTRINGRESOURCE, context.getLocale(),"emxCPN.FamilyCareReport.Worksheet.Column.NameOrNumber");
	String strApproveTitle=EnoviaResourceBundle.getProperty(context, EMXCPNSTRINGRESOURCE, context.getLocale(),"emxCPN.FamilyCareReport.Worksheet.Column.Title");
	String strApproveType=EnoviaResourceBundle.getProperty(context, EMXCPNSTRINGRESOURCE, context.getLocale(),"emxCPN.FamilyCareReport.Worksheet.Column.Type");
	//Code for requirement to addition of revision and state on all tabs except attribute - Starts
	String strApproveRevision = EnoviaResourceBundle.getProperty(context, EMXCPNSTRINGRESOURCE, context.getLocale(),"emxCPN.FamilyCareReport.Worksheet.Column.Revision");
	String strApproveState = EnoviaResourceBundle.getProperty(context, EMXCPNSTRINGRESOURCE, context.getLocale(),"emxCPN.FamilyCareReport.Worksheet.Column.State");
	//Code for requirement to addition of revision and state on all tabs except attribute - Ends
	String strApprover=EnoviaResourceBundle.getProperty(context, EMXCPNSTRINGRESOURCE, context.getLocale(),"emxCPN.FamilyCareReport.Worksheet.PeerReview.column.Approver");
	String strApproveDateOfApprove=EnoviaResourceBundle.getProperty(context, EMXCPNSTRINGRESOURCE, context.getLocale(),"emxCPN.FamilyCareReport.Worksheet.PeerReview.column.DateOfApproval");
	String strApproveComments=EnoviaResourceBundle.getProperty(context, EMXCPNSTRINGRESOURCE, context.getLocale(),"emxCPN.FamilyCareReport.Worksheet.PeerReview.column.Comments");
	String strApproveDerivedFromName=EnoviaResourceBundle.getProperty(context, EMXCPNSTRINGRESOURCE, context.getLocale(),"emxCPN.FamilyCareReport.Worksheet.Approve.Column.DerivedFromName");
	String strApproveDerivedFromTitle=EnoviaResourceBundle.getProperty(context, EMXCPNSTRINGRESOURCE, context.getLocale(),"emxCPN.FamilyCareReport.Worksheet.Approve.Column.DerivedFromTitle");
	String strApprovePartFamilyName=EnoviaResourceBundle.getProperty(context, EMXCPNSTRINGRESOURCE, context.getLocale(),"emxCPN.FamilyCareReport.Worksheet.Approve.Column.PartFamilyName");
	//Start Modified for 22x Changes for auto name of Part Library & Faimly
	String strApprovePartFamilyTitle=EnoviaResourceBundle.getProperty(context, EMXCPNSTRINGRESOURCE, context.getLocale(),"emxCPN.FamilyCareReport.Worksheet.Approve.Column.PartFamilyTitle");
	//Start Modified for 22x Changes for auto name of Part Library & Faimly
	//Added code for defect: 33591--Starts
	String strTaskName = EnoviaResourceBundle.getProperty(context, EMXCPNSTRINGRESOURCE, context.getLocale(),"emxCPN.FamilyCareReport.Worksheet.Approve.Column.TaskName");
	String strTaskTitle = EnoviaResourceBundle.getProperty(context, EMXCPNSTRINGRESOURCE, context.getLocale(),"emxCPN.FamilyCareReport.Worksheet.Approve.Column.TaskTitle");
	String strTaskInstructions = EnoviaResourceBundle.getProperty(context, EMXCPNSTRINGRESOURCE, context.getLocale(),"emxCPN.FamilyCareReport.Worksheet.Approve.Column.Instructions");
	//Added code for defect: 33591--Ends
	//Added code for 2018x.6 Requirement 35515 show reviewer in Approve tab Starts
	String strApprovalState = EnoviaResourceBundle.getProperty(context, EMXCPNSTRINGRESOURCE, context.getLocale(),"emxCPN.FamilyCareReport.Worksheet.Approve.Column.ApprovalState");
	String strApprovalStatus = EnoviaResourceBundle.getProperty(context, EMXCPNSTRINGRESOURCE, context.getLocale(),"emxCPN.FamilyCareReport.Worksheet.Approve.Column.ApprovalStatus");
	String strApprovalDueDate = EnoviaResourceBundle.getProperty(context, EMXCPNSTRINGRESOURCE, context.getLocale(),"emxCPN.FamilyCareReport.Worksheet.Approve.Column.ApprovalDueDate");
	//Added code for 2018x.6 Requirement 35515 show reviewer in Approve tab Ends
	//Creating Header ---Begin
	//1 Change Action
	Cell cellChangeAction = rowHeaderApprove.createCell(0);
	cellChangeAction.setCellStyle(cellStyleApprove);
	cellChangeAction.setCellValue(strApproveChangeAction);
	
	//2 Change Action 'Reason for Change'
	Cell cellChangeActionReasonForChange = rowHeaderApprove.createCell(1);
	cellChangeActionReasonForChange.setCellStyle(cellStyleApprove);
	cellChangeActionReasonForChange.setCellValue(strApproveChangeActionReasonForChange);
	
	//3 Name/Number
	Cell cellNameOrNumber = rowHeaderApprove.createCell(2);
	cellNameOrNumber.setCellStyle(cellStyleApprove);
	cellNameOrNumber.setCellValue(strApproveNameOrNumber);
	
	//4 Title
	Cell cellTitle = rowHeaderApprove.createCell(3);
	cellTitle.setCellStyle(cellStyleApprove);
	cellTitle.setCellValue(strApproveTitle);

	//5 Type
	Cell cellType = rowHeaderApprove.createCell(4);
	cellType.setCellStyle(cellStyleApprove);
	cellType.setCellValue(strApproveType);			
		
	//6 Revision
	//Code for requirement to addition of revision and state on all tabs except attribute -- Starts
	Cell cellRevision = rowHeaderApprove.createCell(5);
	cellRevision.setCellStyle(cellStyleApprove);
	cellRevision.setCellValue(strApproveRevision);
	
	//7 State
	Cell cellState = rowHeaderApprove.createCell(6);
	cellState.setCellStyle(cellStyleApprove);
	cellState.setCellValue(strApproveState);
	//Code for requirement to addition of revision and state on all tabs except attribute -- Ends
	
	//8 Approve
	Cell cellApprove = rowHeaderApprove.createCell(7);
	cellApprove.setCellStyle(cellStyleApprove);
	cellApprove.setCellValue(strApprover);
	
	//CA State
	Cell cellApproveState = rowHeaderApprove.createCell(8);
	cellApproveState.setCellStyle(cellStyleApprove);
	cellApproveState.setCellValue(strApprovalState);
	
	//9 Task/Signature
	Cell cellTaskName = rowHeaderApprove.createCell(9);
	cellTaskName.setCellStyle(cellStyleApprove);
	cellTaskName.setCellValue(strTaskName);
	
	//10 Task Title
	Cell cellTaskTitle = rowHeaderApprove.createCell(10);
	cellTaskTitle.setCellStyle(cellStyleApprove);
	cellTaskTitle.setCellValue(strTaskTitle);
	
	//11 Task Instructions
	Cell cellTaskInstructions = rowHeaderApprove.createCell(11);
	cellTaskInstructions.setCellStyle(cellStyleApprove);
	cellTaskInstructions.setCellValue(strTaskInstructions);
	
	//12 Comments			
	Cell cellComment = rowHeaderApprove.createCell(12);
	cellComment.setCellStyle(cellStyleApprove);
	cellComment.setCellValue(strApproveComments);
	
	//Added code for 2018x.6 Requirement 35515 show reviewer in Approve tab Starts
	//Approval Status
	Cell cellApprovalStatus = rowHeaderApprove.createCell(13);
	cellApprovalStatus.setCellStyle(cellStyleApprove);
	cellApprovalStatus.setCellValue(strApprovalStatus);
	
	//Due Date
	Cell cellApprovalDueDate = rowHeaderApprove.createCell(14);
	cellApprovalDueDate.setCellStyle(cellStyleApprove);
	cellApprovalDueDate.setCellValue(strApprovalDueDate);
	//Added code for 2018x.6 Requirement 35515 show reviewer in Approve tab Ends
	
	//13 Date Of Approve
	Cell cellDateOfApprove = rowHeaderApprove.createCell(15);
	cellDateOfApprove.setCellStyle(cellStyleApprove);
	cellDateOfApprove.setCellValue(strApproveDateOfApprove);
	
	//14 Derived From Name			
	Cell cellDerivedFromName = rowHeaderApprove.createCell(16);
	cellDerivedFromName.setCellStyle(cellStyleApprove);
	cellDerivedFromName.setCellValue(strApproveDerivedFromName);
	
	//15 Derived From Title 			
	Cell cellDerivedFromTitle = rowHeaderApprove.createCell(17);
	cellDerivedFromTitle.setCellStyle(cellStyleApprove);
	cellDerivedFromTitle.setCellValue(strApproveDerivedFromTitle);
	
	//16 Part Family Name			
	Cell cellPartFamilyName = rowHeaderApprove.createCell(18);
	cellPartFamilyName.setCellStyle(cellStyleApprove);
	//Start Modified for 22x Changes for auto name of Part Library & Faimly
	cellPartFamilyName.setCellValue(strApprovePartFamilyTitle);
	//End Modified for 22x Changes for auto name of Part Library & Faimly
	int rowCount = 0;
	String strTypeName = DomainConstants.EMPTY_STRING;
	String strCurrentState = DomainConstants.EMPTY_STRING;
	//Added code for Req Id : 33634 - Hyperlinks--Starts
	String strValue = DomainConstants.EMPTY_STRING;
	String strParentId = DomainConstants.EMPTY_STRING;
	String strCellValue = DomainConstants.EMPTY_STRING;
	String strHyperlinkId = DomainConstants.EMPTY_STRING;
	String strDerivedId = DomainConstants.EMPTY_STRING;
	String strCAId = DomainConstants.EMPTY_STRING;
	String strInboxId = DomainConstants.EMPTY_STRING;
	//Added code for Req Id : 33634 - Hyperlinks--Ends
	//Added code for 2018x.6 Requirement 35515 show reviewer in Approve tab Starts
	String strTranslatedApprovalStatus = DomainConstants.EMPTY_STRING;
	String strApprovalStatusValue = DomainConstants.EMPTY_STRING;
	String strInboxTaskState = DomainConstants.EMPTY_STRING;
	String strRouteAction = DomainConstants.EMPTY_STRING;
	String strDueDate = DomainConstants.EMPTY_STRING;
	//Added for ALM-49592
	String strRouteStatus = DomainConstants.EMPTY_STRING;
	
	//Added code for 2018x.6 Requirement 35515 show reviewer in Approve tab Ends
	for (int i=0;i<mlApprove.size();i++){
		//Added code for 2018x.6 Requirement id 36700 Ability to generate Part and Spec report with without hyperlink Starts
		iRowCountAll = iRowCountAll + 1;
		//Added code for 2018x.6 Requirement id 36700 Ability to generate Part and Spec report with without hyperlink Ends
		++rowCount;
		XSSFRow row = sheetApprove.createRow(rowCount);
		int columnCount1 = 0;
		Map mp = (Map)mlApprove.get(i);
		HashMap hm= new HashMap<>();
		String strTypeDisplayName=null;
		//Added code for 2018x.6 Requirement 35515 show reviewer in Approve tab Starts
		strApprovalStatusValue = (String) mp.get(pgV3Constants.SELECT_ATTRIBUTE_APPROVALSTATUS);
		strInboxTaskState = (String) mp.get(DomainConstants.SELECT_CURRENT);
		strRouteAction = (String) mp.get(ATTRIBUTE+DomainConstants.ATTRIBUTE_ROUTE_ACTION+CLOSINGBRACKET);
		//Added for ALM-49592
		strRouteStatus = (String) mp.get("from["+DomainObject.RELATIONSHIP_ROUTE_TASK+"].to.attribute[" + DomainObject.ATTRIBUTE_ROUTE_STATUS + "]");
		strTranslatedApprovalStatus = getApprovalStatus(context,strApprovalStatusValue,strInboxTaskState,strRouteAction,strRouteStatus);
		strDueDate = getDueDate(context, (String)mp.get(ATTRIBUTE+DomainConstants.ATTRIBUTE_SCHEDULED_COMPLETION_DATE+CLOSINGBRACKET), strInboxTaskState);
		//Added code for 2018x.6 Requirement 35515 show reviewer in Approve tab Ends
		strTypeName =(String)mp.get(DomainConstants.SELECT_TYPE);
			strCurrentState =(String)mp.get("CurrentState");
			strTypeDisplayName= getTypeDisplayName(context,strTypeName);
			//Added code for Req Id : 33634 - Hyperlinks--Starts
			strParentId = (String)mp.get("parentId");
			strDerivedId = (String)mp.get("DerivedFromId");
			strCAId = (String)mp.get("sCAId");
			strInboxId = (String)mp.get("TaskId");
			//Added code for Req Id : 33634 - Hyperlinks--Ends
			//if(strCurrentState.equalsIgnoreCase("Release") || strCurrentState.equalsIgnoreCase("Released")){
			//Updated code for Req Id : 33634 - Hyperlinks--StartS
			//Added by DSM Reports (Sogeti) for 2022x.5 (APR CW 2024) Defect 55875 - Start
			if(UIUtil.isNotNullAndNotEmpty(strCAId) && !strCAId.contains(HYPERLINK_PIPE)) {
				hm.put(0, HYPERLINK+mp.get("Change Action")+HYPERLINK_PIPE+strCAId);
			}else {
				hm.put(0, mp.get("Change Action"));
			}
			//Added by DSM Reports (Sogeti) for 2022x.5 (APR CW 2024) Defect 55875 - End
			//Updated code for Req Id : 33634 - Hyperlinks--Ends
			hm.put(1, mp.get("Reason for Change"));
			//Updated code for Req Id : 33634 - Hyperlinks--Starts
			hm.put(2, HYPERLINK+mp.get(DomainConstants.SELECT_NAME)+HYPERLINK_PIPE+strParentId);
			//Updated code for Req Id : 33634 - Hyperlinks--Ends
			hm.put(3, mp.get("PartTitle"));
			hm.put(4, strTypeDisplayName);
			//Code for requirement to addition of revision and state on all tabs except attribute -- Starts
			hm.put(5, mp.get("revision"));
			hm.put(6, strCurrentState);
			//Code for requirement to addition of revision and state on all tabs except attribute -- Ends
			hm.put(7, mp.get("Person Name"));
			//Added code for defect:33591--Starts
			//Added code for 2018x.6 Requirement 35515 show reviewer in Approve tab Starts
			hm.put(8, mp.get("CACurrent"));
			//Added code for 2018x.6 Requirement 35515 show reviewer in Approve tab Ends
			hm.put(9, HYPERLINK+mp.get("TaskName")+HYPERLINK_PIPE+strInboxId);
			hm.put(10, mp.get(pgV3Constants.SELECT_ATTRIBUTE_TITLE));
			hm.put(11, mp.get(ATTR_ROUTE_INSTRUCTIONS));
			//Added code for defect:33591--Ends
			hm.put(12, mp.get(pgV3Constants.SELECT_ATTRIBUTE_COMMENTS));
			//Added code for 2018x.6 Requirement 35515 show reviewer in Approve tab Starts
			hm.put(13, strTranslatedApprovalStatus);
			hm.put(14, strDueDate);
			//Added code for 2018x.6 Requirement 35515 show reviewer in Approve tab Ends
			hm.put(15, mp.get(ATTRIBUTE+DomainConstants.ATTRIBUTE_ACTUAL_COMPLETION_DATE+CLOSINGBRACKET));
			//Updated code for Req Id : 33634 - Hyperlinks--Starts
			hm.put(16, HYPERLINK+mp.get("DerivedFromName")+HYPERLINK_PIPE+strDerivedId);
			//Updated code for Req Id : 33634 - Hyperlinks--Ends
			hm.put(17, mp.get("DerivedFromTitle"));
			hm.put(18, mp.get("PartFamilyName"));
				//For Cells Creation in each Row
			XSSFCellStyle style = workbook.createCellStyle();
			style = setForeGroundColor(strCurrentState, style); 
			//Added by DSM Reports (Sogeti) for 2022x.5 (APR CW 2024) Defect 55875 - Start
			XSSFCellStyle style1 = workbook.createCellStyle();
			//Added by DSM Reports (Sogeti) for 2022x.5 (APR CW 2024) Defect 55875 - End
			
				for(int j=0;j<hm.size();j++){								
					//Modified the code for _2022x_Aug CW Req-47097 :: Start
					// Modified by DSM Reports (Sogeti) for 22x.03 (August CW 2023) Defect 54091 - Start
					Cell cell = row.createCell(columnCount1++);
					if (j == 2) {
						style = makeColumnNumeric(workbook, style);
					}
					cell.setCellStyle(style);
					
					// Modified by DSM Reports (Sogeti) for 22x.03 (August CW 2023) Defect 54091 - End
					//Modified the code for _2022x_Aug CW Req-47097 :: End
					//cell.setCellValue((String)hm.get(j));
					//Added code for Req Id : 33634 - Hyperlinks--Starts
					strCellValue = (String)hm.get(j);
					if(UIUtil.isNotNullAndNotEmpty(strCellValue) && strCellValue.startsWith(HYPERLINK_COMPARE)){
						String[] strSplittedValue = strCellValue.split("\\|",-1); 
						strHyperlinkId = strSplittedValue[(strSplittedValue.length)-1];
						strValue = strSplittedValue[(strSplittedValue.length)-2];
						//Added code for 2018x.6 Requirement id 36700 Ability to generate Part and Spec report with without hyperlink Starts
						if(pgV3Constants.TRUE.equalsIgnoreCase(strHyperlink) && iRowCountAll < iHyperLinkLimit){
							getHyperlink(context,cell,workbook,strValue,strHyperlinkId,strCurrentState);
						
						} else if(UIUtil.isNotNullAndNotEmpty(strValue)) {					
							cell.setCellValue(strValue);
						}
						//Added code for 2018x.6 Requirement id 36700 Ability to generate Part and Spec report with without hyperlink Ends
					} else {
						cell.setCellValue((String)hm.get(j));
						//Added by DSM Reports (Sogeti) for 2022x.5 (APR CW 2024) Defect 55875 - Start
						if(j == 0) {
							style1.cloneStyleFrom(style);
							style1.setWrapText(true);
							cell.setCellStyle(style1);
						}
						//Added by DSM Reports (Sogeti) for 2022x.5 (APR CW 2024) Defect 55875 - End
					}
					//Added code for Req Id : 33634 - Hyperlinks--Ends
				}
			}
			sheetFormatter(sheetApprove); // Added by DSM Reports (Sogeti) for 22x.04 (Dec CW 2023) Defect 56156 - START/END
		} catch (Exception e) {			
			 outLog.print("Exception in  updateWorksheetPeerApprove: "+e+"\n");
			 outLog.flush();
		}
	}

private void updateWorksheetTableWeight(Context context, XSSFWorkbook workbook,XSSFRow rowHeader,XSSFCellStyle cellStyle, MapList mlWeightCharacteristics,XSSFSheet sheetTablesWeight, String strHyperlink, XSSFCellStyle styleGlobal) {
		
		try {
			//Added code for 2018x.6 Requirement id 36700 Ability to generate Part and Spec report with without hyperlink Starts
			String strHyperlinkLimit = EnoviaResourceBundle.getProperty(context, EMXCPNSTRINGRESOURCE, context.getLocale(),"emxCPN.PartAndSpecReport.HyperlinkLimit");
			int iHyperLinkLimit = Integer.parseInt(strHyperlinkLimit);
			int iRowCountAll=0;
			//Added code for 2018x.6 Requirement id 36700 Ability to generate Part and Spec report with without hyperlink Ends
			String sStringResourceFile="emxCPNStringResource"; 
			String sLanguage = context.getSession().getLanguage();
			String strTablesWeightChangeAction= i18nNow.getI18nString("emxCPN.FamilyCareReport.Worksheet.Column.ChangeAction",sStringResourceFile, sLanguage);
			String strTablesWeightChangeActionReasonForChange=i18nNow.getI18nString("emxCPN.FamilyCareReport.Worksheet.Column.ChangeActionReasonForChange",sStringResourceFile, sLanguage);
			String strTablesWeightTitle=i18nNow.getI18nString("emxCPN.FamilyCareReport.Worksheet.Column.Title",sStringResourceFile, sLanguage);
			//Added to add Child Name and Level --Begin
			String strTablesWeightChildName=i18nNow.getI18nString("emxCPN.FamilyCareReport.Worksheet.TablesWeightColumn.ChildName",sStringResourceFile, sLanguage);
			String strTablesWeightChildTitle=i18nNow.getI18nString("emxCPN.FamilyCareReport.Worksheet.TablesWeightColumn.ChildTitle",sStringResourceFile, sLanguage);
			String strTablesWeightNameOrNumber=i18nNow.getI18nString("emxCPN.FamilyCareReport.Worksheet.Column.NameOrNumber",sStringResourceFile, sLanguage);
			String strTablesWeightLevel=i18nNow.getI18nString("emxCPN.FamilyCareReport.Worksheet.TablesWeightColumn.Level",sStringResourceFile, sLanguage);
			//Added to add Child Name and Level --End
			String strTablesWeightType=i18nNow.getI18nString("emxCPN.FamilyCareReport.Worksheet.Column.Type",sStringResourceFile, sLanguage);
			 //Code for requirement to addition of revision and state on all tabs except attribute - Starts
	        String strTablesWeightRevision	= i18nNow.getI18nString("emxCPN.FamilyCareReport.Worksheet.Column.Revision",sStringResourceFile, sLanguage);
	        String strTablesWeightState		= i18nNow.getI18nString("emxCPN.FamilyCareReport.Worksheet.Column.State",sStringResourceFile, sLanguage);
	        //Code for requirement to addition of revision and state on all tabs except attribute - Ends
			String strTablesWeightQuantity=i18nNow.getI18nString("emxCPN.FamilyCareReport.Worksheet.TablesWeightColumn.Quantity",sStringResourceFile, sLanguage);
			String strTablesWeightGrossWeight=i18nNow.getI18nString("emxCPN.FamilyCareReport.Worksheet.TablesWeightColumn.GrossWeight",sStringResourceFile, sLanguage);
			String strTablesWeightLegacyWeightFactor=i18nNow.getI18nString("emxCPN.FamilyCareReport.Worksheet.TablesWeightColumn.LegacyWeightFactor",sStringResourceFile, sLanguage);
			String strTablesWeightWeightUoM=i18nNow.getI18nString("emxCPN.FamilyCareReport.Worksheet.TablesWeightColumn.WeightUoM",sStringResourceFile, sLanguage);
			String strTablesWeightNetWeightofProductConsumerUnit=i18nNow.getI18nString("emxCPN.FamilyCareReport.Worksheet.TablesWeightColumn.NetWeightofProductConsumerUnit",sStringResourceFile, sLanguage);
			String strTablesWeightNetWeightUoM=i18nNow.getI18nString("emxCPN.FamilyCareReport.Worksheet.TablesWeightColumn.NetWeightUoM",sStringResourceFile, sLanguage);
			String strTablesWeightComment=	i18nNow.getI18nString("emxCPN.FamilyCareReport.Worksheet.TablesWeightColumn.Comment",sStringResourceFile, sLanguage);
		    String strTablesDerivedFromName=i18nNow.getI18nString("emxCPN.FamilyCareReport.Worksheet.TablesWeightColumn.DerivedFromName",sStringResourceFile, sLanguage);
			String strTablesDerivedFromTitle=i18nNow.getI18nString("emxCPN.FamilyCareReport.Worksheet.TablesWeightColumn.DerivedFromTitle",sStringResourceFile, sLanguage);
			String strTablesPartFamilyName=i18nNow.getI18nString("emxCPN.FamilyCareReport.Worksheet.TablesWeightColumn.PartFamilyName",sStringResourceFile, sLanguage);
			//Start Modified for 22x Changes for auto name of Part Library & Faimly
			String strTablesPartFamilyTitle=i18nNow.getI18nString("emxCPN.FamilyCareReport.Worksheet.TablesWeightColumn.PartFamilyTitle",sStringResourceFile, sLanguage);
			//End Modified for 22x Changes for auto name of Part Library & Faimly
			String strTablesWeightLegacyProductWeight="Legacy Product Weight";
			
	
			//Creating Header ---Begin
			//1 Change Action
			Cell cellChangeAction = rowHeader.createCell(0);
			cellChangeAction.setCellStyle(cellStyle);
			cellChangeAction.setCellValue(strTablesWeightChangeAction);

			//2 Change Action 'Reason for Change'
			Cell cellChangeActionReasonForChange = rowHeader.createCell(1);
			cellChangeActionReasonForChange.setCellStyle(cellStyle);
			cellChangeActionReasonForChange.setCellValue(strTablesWeightChangeActionReasonForChange);

			//3 Name/Number
			Cell cellNameOrNumber = rowHeader.createCell(2);
			cellNameOrNumber.setCellStyle(cellStyle);
			cellNameOrNumber.setCellValue(strTablesWeightNameOrNumber);

			//4 Title
			Cell cellTitle = rowHeader.createCell(3);
			cellTitle.setCellStyle(cellStyle);
			cellTitle.setCellValue(strTablesWeightTitle);			

			//5 Type
			Cell cellType = rowHeader.createCell(4);
			cellType.setCellStyle(cellStyle);
			cellType.setCellValue(strTablesWeightType);	

			//6 Revision
			//Code for requirement to addition of revision and state on all tabs except attribute -- Starts
			Cell cellRevision = rowHeader.createCell(5);
			cellRevision.setCellStyle(cellStyle);
			cellRevision.setCellValue(strTablesWeightRevision);
			
			//7 State
			Cell cellState = rowHeader.createCell(6);
			cellState.setCellStyle(cellStyle);
			cellState.setCellValue(strTablesWeightState);
			//Code for requirement to addition of revision and state on all tabs except attribute -- Ends
			
			//8 Child Name
			Cell cellChildName = rowHeader.createCell(7);
			cellChildName.setCellStyle(cellStyle);
			cellChildName.setCellValue(strTablesWeightChildName);
			
			//9 Child Title
			Cell cellChildTitle = rowHeader.createCell(8);
			cellChildTitle.setCellStyle(cellStyle);
			cellChildTitle.setCellValue(strTablesWeightChildTitle);

			//10 Level
			Cell cellLevel = rowHeader.createCell(9);
			cellLevel.setCellStyle(cellStyle);
			cellLevel.setCellValue(strTablesWeightLevel);			

			//11 Quantity
			Cell cellQuantity = rowHeader.createCell(10);
			cellQuantity.setCellStyle(cellStyle);
			cellQuantity.setCellValue(strTablesWeightQuantity);

			//12 GrossWeight
			Cell cellGrossWeight = rowHeader.createCell(11);
			cellGrossWeight.setCellStyle(cellStyle);
			cellGrossWeight.setCellValue(strTablesWeightGrossWeight);

			//13 Legacy Weight Factor			
			Cell cellLegacyProductWeight = rowHeader.createCell(12);
			cellLegacyProductWeight.setCellStyle(cellStyle);
			cellLegacyProductWeight.setCellValue(strTablesWeightLegacyProductWeight);
			
			//14 Legacy Weight Factor			
			Cell cellLegacyWeightFactor = rowHeader.createCell(13);
			cellLegacyWeightFactor.setCellStyle(cellStyle);
			cellLegacyWeightFactor.setCellValue(strTablesWeightLegacyWeightFactor);

			//15 Weight UoM
			Cell cellWeightUoM = rowHeader.createCell(14);
			cellWeightUoM.setCellStyle(cellStyle);
			cellWeightUoM.setCellValue(strTablesWeightWeightUoM);

			//16 Net Weight of Product in ConsumerUnit
			Cell cellWeightofProductInConsumerUnit = rowHeader.createCell(15);
			cellWeightofProductInConsumerUnit.setCellStyle(cellStyle);
			cellWeightofProductInConsumerUnit.setCellValue(strTablesWeightNetWeightofProductConsumerUnit);

			//17 Net Weight UoM
			Cell cellNetWeightUoM= rowHeader.createCell(16);
			cellNetWeightUoM.setCellStyle(cellStyle);
			cellNetWeightUoM.setCellValue(strTablesWeightNetWeightUoM);

			//18 Comments
			Cell cellComments = rowHeader.createCell(17);
			cellComments.setCellStyle(cellStyle);
			cellComments.setCellValue(strTablesWeightComment);
			
			//19 Derived From Name
			Cell cellDerivedFromName = rowHeader.createCell(18);
			cellDerivedFromName.setCellStyle(cellStyle);
			cellDerivedFromName.setCellValue(strTablesDerivedFromName);

			//20 Derived From Title
			Cell cellDerivedFromTitle = rowHeader.createCell(19);
			cellDerivedFromTitle.setCellStyle(cellStyle);
			cellDerivedFromTitle.setCellValue(strTablesDerivedFromTitle);

			//22 Part Family
			Cell cellPartFamily = rowHeader.createCell(20);
			cellPartFamily.setCellStyle(cellStyle);
			//Start Modified for 22x Changes for auto name of Part Library & Faimly
			cellPartFamily.setCellValue(strTablesPartFamilyTitle);
			//End Modified for 22x Changes for auto name of Part Library & Faimly
			//Creating Header ---End			

			int rowCount1 = 0;
			String strTypeName = DomainConstants.EMPTY_STRING;
			String strParentId = DomainConstants.EMPTY_STRING;
			String strChildId = DomainConstants.EMPTY_STRING;
			XSSFCellStyle style = workbook.createCellStyle();
			//Added by DSM Reports (Sogeti) for 2022x.5 (APR CW 2024) Defect 55875 - Start
			XSSFCellStyle style1 = workbook.createCellStyle();
			//Added by DSM Reports (Sogeti) for 2022x.5 (APR CW 2024) Defect 55875 - End
			style.setFillForegroundColor(IndexedColors.GREY_25_PERCENT.getIndex());	
			style.setFillPattern(FillPatternType.SOLID_FOREGROUND);
			for (int i=0;i<mlWeightCharacteristics.size();i++){
				//Added code for 2018x.6 Requirement id 36700 Ability to generate Part and Spec report with without hyperlink Starts
				iRowCountAll = iRowCountAll + 1;
				//Added code for 2018x.6 Requirement id 36700 Ability to generate Part and Spec report with without hyperlink Ends
				XSSFRow row = sheetTablesWeight.createRow(++rowCount1);
				int columnCount1 = 0;
				Map mp = (Map)mlWeightCharacteristics.get(i);
				
				// CommonColumns Code for requirement to addition of revision and state on all tabs except attribute -- Starts		
				Map hmCommonCol = new HashMap<>();
				hmCommonCol= (Map)mp.get("CommonColumns");
				// CommonColumns Code for requirement to addition of revision and state on all tabs except attribute -- Ends
				if(hmCommonCol != null){
					 strParentId = (String) hmCommonCol.get(DomainConstants.SELECT_ID);
				} else {
					 strChildId = (String) mp.get(DomainConstants.SELECT_ID);
				}
				
				HashMap hm= new HashMap<>();
				String strTypeDisplayName=null;
				strTypeName =(String)mp.get("type");
				String strCurrentState =(String)mp.get("ParentCurrent");
				strTypeDisplayName= getTypeDisplayName(context,strTypeName);
				//if(strCurrentState.equalsIgnoreCase("Release") || strCurrentState.equalsIgnoreCase("Released")){
					//Updated code for Req Id : 33634 - Hyperlinks--Starts
					hm.put(0, HYPERLINK+mp.get("ChangeAction")+HYPERLINK_PIPE+mp.get("sCAId"));
					//Updated code for Req Id : 33634 - Hyperlinks--Ends
					hm.put(1, mp.get("CAReasonForChange"));
					//Updated code for Req Id : 33634 - Hyperlinks--Starts
					hm.put(2, HYPERLINK+mp.get("ParentName")+HYPERLINK_PIPE+strParentId);
					//Updated code for Req Id : 33634 - Hyperlinks--Ends
					hm.put(3, mp.get("ParentTitle"));
					hm.put(4, strTypeDisplayName);
					//Code for requirement to addition of revision and state on all tabs except attribute -- Starts
					hm.put(5, mp.get("ParentRevision"));
					hm.put(6, mp.get("ParentCurrent"));
					//Code for requirement to addition of revision and state on all tabs except attribute -- Ends
					//Updated code for Req Id : 33634 - Hyperlinks--Starts
					hm.put(7,  HYPERLINK+mp.get("name")+HYPERLINK_PIPE+strChildId);
					//Updated code for Req Id : 33634 - Hyperlinks--Ends
					hm.put(8,  mp.get("ChildTitle"));
					hm.put(9,  mp.get("level"));		
					hm.put(10, mp.get("attribute[Quantity]"));
					hm.put(11, mp.get("attribute[pgGrossWeightReal]"));
					hm.put(12, mp.get("attribute[pgLegacyProductWeight]"));
					hm.put(13, mp.get("attribute[pgLegacyWeightFactor]"));
					hm.put(14, mp.get("attribute[pgGrossWeightUnitOfMeasure]"));
					hm.put(15, mp.get("attribute[pgNetWeightOfProductInConsumerUnitReal]"));
					hm.put(16, mp.get("attribute[pgNetWeightOfProductInConsumerUnitUoM]"));
					hm.put(17, mp.get("attribute[Comment]"));
					//Updated code for Req Id : 33634 - Hyperlinks--Starts
					hm.put(18, HYPERLINK+mp.get("DerivedFromName")+HYPERLINK_PIPE+mp.get("DerivedFromId"));	
					//Updated code for Req Id : 33634 - Hyperlinks--Ends
					hm.put(19, mp.get("DerivedFromTitle"));
					hm.put(20, mp.get("PartFamilyName"));
					for(int j=0;j<hm.size();j++){								
						Cell cell = row.createCell(columnCount1++);
						//Added code for Req Id : 33634 - Hyperlinks--Starts
						String strCellValue = (String)hm.get(j);
						if(!strCurrentState.equalsIgnoreCase(pgV3Constants.STATE_RELEASE) && !strCurrentState.equalsIgnoreCase(pgV3Constants.STATE_RELEASED)){
							cell.setCellStyle(style);
						}
						if(UIUtil.isNotNullAndNotEmpty(strCellValue) && strCellValue.startsWith(HYPERLINK_COMPARE)){
							String[] strSplittedValue = strCellValue.split("\\|", -1); 
							String strHyperlinkId = strSplittedValue[(strSplittedValue.length)-1];
							String strValue = strSplittedValue[(strSplittedValue.length)-2];
							//Added code for 2018x.6 Requirement id 36700 Ability to generate Part and Spec report with without hyperlink Starts
							if(pgV3Constants.TRUE.equalsIgnoreCase(strHyperlink) && iRowCountAll < iHyperLinkLimit){
								getHyperlink(context,cell,workbook,strValue,strHyperlinkId,strCurrentState);
							
							} else if(UIUtil.isNotNullAndNotEmpty(strValue)){
								cell.setCellValue(strValue);
							}
							//Added code for 2018x.6 Requirement id 36700 Ability to generate Part and Spec report with without hyperlink Ends
						}else {
							cell.setCellValue((String)hm.get(j));
						}
						//Added code for Req Id : 33634 - Hyperlinks--Ends
					}
			}
			sheetFormatter(sheetTablesWeight); // Added by DSM Reports (Sogeti) for 22x.04 (Dec CW 2023) Defect 56156 - START/END
		} catch (Exception e) {			
			 outLog.print("Exception in  updateWorksheetTableWeight: "+e+"\n");
			 outLog.flush();
		}
	}

private void updateWorksheetBOM(Context context, XSSFWorkbook workbook,XSSFRow rowHeaderBOM,XSSFCellStyle cellStyleBOM, MapList mlParentChildBOM,XSSFSheet sheetBOM, String strHyperlink, XSSFCellStyle styleGlobal) {
		
		try {
			//Added code for 2018x.6 Requirement id 36700 Ability to generate Part and Spec report with without hyperlink Starts
			String strHyperlinkLimit = EnoviaResourceBundle.getProperty(context, EMXCPNSTRINGRESOURCE, context.getLocale(),"emxCPN.PartAndSpecReport.HyperlinkLimit");
			int iHyperLinkLimit = Integer.parseInt(strHyperlinkLimit);
			int iRowCountAll=0;
			//Added code for 2018x.6 Requirement id 36700 Ability to generate Part and Spec report with without hyperlink Ends
			String sStringResourceFile="emxCPNStringResource"; 
			String sLanguage = context.getSession().getLanguage();
			String strBOMChangeAction= i18nNow.getI18nString("emxCPN.FamilyCareReport.Worksheet.Column.ChangeAction",sStringResourceFile, sLanguage);
			String strBOMChangeActionReasonForChange=i18nNow.getI18nString("emxCPN.FamilyCareReport.Worksheet.Column.ChangeActionReasonForChange",sStringResourceFile, sLanguage);
			String strBOMTitle=i18nNow.getI18nString("emxCPN.FamilyCareReport.Worksheet.Column.Title",sStringResourceFile, sLanguage);
			String strBOMNameOrNumber=i18nNow.getI18nString("emxCPN.FamilyCareReport.Worksheet.Column.NameOrNumber",sStringResourceFile, sLanguage);
			String strBOMType=i18nNow.getI18nString("emxCPN.FamilyCareReport.Worksheet.Column.Type",sStringResourceFile, sLanguage);
			//Code for requirement to addition of revision and state on all tabs except attribute - Starts
	        String strBOMRevision	= i18nNow.getI18nString("emxCPN.FamilyCareReport.Worksheet.Column.Revision",sStringResourceFile, sLanguage);
	        //Code for requirement to addition of revision and state on all tabs except attribute - Ends
			String strBOMMaterialNumber=i18nNow.getI18nString("emxCPN.FamilyCareReport.Worksheet.BOM.Column.MaterialNumber",sStringResourceFile, sLanguage);
			String strBOMMaterialTitle=i18nNow.getI18nString("emxCPN.FamilyCareReport.Worksheet.BOM.Column.MaterialTitle",sStringResourceFile, sLanguage);
			String strBOMState=i18nNow.getI18nString("emxCPN.FamilyCareReport.Worksheet.BOM.Column.State",sStringResourceFile, sLanguage);
			//Added for 2018x.6 June CW Defect 46893 - Starts
			String strBOMPhase=EnoviaResourceBundle.getProperty(context, sStringResourceFile, context.getLocale(),"emxCPN.FamilyCareReport.Worksheet.BOM.Column.Phase");
			//Added for 2018x.6 June CW Defect 46893 - Ends
			String strBOMQty=i18nNow.getI18nString("emxCPN.FamilyCareReport.Worksheet.BOM.Column.Qty",sStringResourceFile, sLanguage);
			String strBOMSequenceNumber=i18nNow.getI18nString("emxCPN.FamilyCareReport.Worksheet.BOM.Column.SequenceNumber",sStringResourceFile, sLanguage);
			String strBOMChg=i18nNow.getI18nString("emxCPN.FamilyCareReport.Worksheet.BOM.Column.Chg",sStringResourceFile, sLanguage);
		    String strBOMSubstitution=i18nNow.getI18nString("emxCPN.FamilyCareReport.Worksheet.BOM.Column.Substitution",sStringResourceFile, sLanguage);
			//2018x0 April Bug Fix : Starts
		    String strBOMSubstitutionNameOrNumber=i18nNow.getI18nString("emxCPN.FamilyCareReport.Worksheet.BOM.Column.SubstitutionNameOrNumber",sStringResourceFile, sLanguage);
		    String strBOMAlternateNameOrNumber=i18nNow.getI18nString("emxCPN.FamilyCareReport.Worksheet.BOM.Column.BOMAlternateNameOrNumber",sStringResourceFile, sLanguage);			
		    //2018x0 April Bug Fix : Ends
		    String strBOMLevel=i18nNow.getI18nString("emxCPN.FamilyCareReport.Worksheet.BOM.Column.Level",sStringResourceFile, sLanguage);
			String strBOMDerivedFromName=i18nNow.getI18nString("emxCPN.FamilyCareReport.Worksheet.BOM.Column.DerivedFromName",sStringResourceFile, sLanguage);
			String strBOMDerivedFromTitle=i18nNow.getI18nString("emxCPN.FamilyCareReport.Worksheet.BOM.Column.DerivedFromTitle",sStringResourceFile, sLanguage);
			String strBOMPartFamilyName=i18nNow.getI18nString("emxCPN.FamilyCareReport.Worksheet.BOM.Column.PartFamilyName",sStringResourceFile, sLanguage);
			//Start Modified for 22x Changes for auto name of Part Library & Faimly
			String strBOMPartFamilyTitle=i18nNow.getI18nString("emxCPN.FamilyCareReport.Worksheet.BOM.Column.PartFamilyTitle",sStringResourceFile, sLanguage);
			//End Modified for 22x Changes for auto name of Part Library & Faimly
			String strBOMOptionalComponent="Optional Component";
			
		    //Added For DSM Report 2018x1.1 Scope : 7 Report shall include BOM comments in the BOM tab :Starts
			String strBOMComments=i18nNow.getI18nString("emxCPN.FamilyCareReport.Worksheet.BOM.Column.Comment",sStringResourceFile, sLanguage);
			//Added For DSM Report 2018x1.1 Scope : 7 Report shall include BOM comments in the BOM tab :Ends

			// Added for requirement Id :35336--starts
			String strHasArt=EnoviaResourceBundle.getProperty(context, sStringResourceFile, context.getLocale(),"emxCPN.FamilyCareReport.Worksheet.BOM.Column.HasArt");
			String attrPgHasArt = PropertyUtil.getSchemaProperty(context,PGHASARTATTRIBUTESELECT);
			// Added for requirement Id :35336--ends
			
			//Added for Defect 45953 - Starts
			String strBOMMaterialType=EnoviaResourceBundle.getProperty(context, sStringResourceFile, context.getLocale(),"emxCPN.FamilyCareReport.Worksheet.BOM.Column.MaterialType");
			String strBOMMaterialRevision=EnoviaResourceBundle.getProperty(context, sStringResourceFile, context.getLocale(),"emxCPN.FamilyCareReport.Worksheet.BOM.Column.MaterialRevision");
			//Added for Defect 45953 - Ends
			//Added for Apr22 CW requirement 41656 Starts
			String strBOMNSPCG=EnoviaResourceBundle.getProperty(context, sStringResourceFile, context.getLocale(),"emxCPN.FamilyCareReport.Worksheet.BOM.Column.NSPCG");
			//Added for Apr22 CW requirement 41656 Ends
			
			//Creating Header ---Begin
			//1 Change Action
			Cell cellChangeAction = rowHeaderBOM.createCell(0);
			cellChangeAction.setCellStyle(cellStyleBOM);
			cellChangeAction.setCellValue(strBOMChangeAction);

			//2 Change Action 'Reason for Change'
			Cell cellChangeActionReasonForChange = rowHeaderBOM.createCell(1);
			cellChangeActionReasonForChange.setCellStyle(cellStyleBOM);
			cellChangeActionReasonForChange.setCellValue(strBOMChangeActionReasonForChange);

			//3 Name/Number
			Cell cellNameOrNumber = rowHeaderBOM.createCell(2);
			cellNameOrNumber.setCellStyle(cellStyleBOM);
			cellNameOrNumber.setCellValue(strBOMNameOrNumber);	

			//4 Title
			Cell cellTitle = rowHeaderBOM.createCell(3);
			cellTitle.setCellStyle(cellStyleBOM);
			cellTitle.setCellValue(strBOMTitle);			

			//5 Type
			Cell cellType = rowHeaderBOM.createCell(4);
			cellType.setCellStyle(cellStyleBOM);
			cellType.setCellValue(strBOMType);	

			//6 Revision
			//Code for requirement to addition of revision and state on all tabs except attribute -- Starts
			Cell cellRevision = rowHeaderBOM.createCell(5);
			cellRevision.setCellStyle(cellStyleBOM);
			cellRevision.setCellValue(strBOMRevision);
			//Code for requirement to addition of revision and state on all tabs except attribute -- Ends
			
			//7 Material Type
			//Code for Defect 45953 -- Starts
			Cell cellMaterialType = rowHeaderBOM.createCell(6);
			cellMaterialType.setCellStyle(cellStyleBOM);
			cellMaterialType.setCellValue(strBOMMaterialType);
			//Code for Defect 45953 -- Ends
			
			//8 Material Number
			Cell cellMaterialNumber = rowHeaderBOM.createCell(7);
			cellMaterialNumber.setCellStyle(cellStyleBOM);
			cellMaterialNumber.setCellValue(strBOMMaterialNumber);	
			
			//9 Material Revision
			//Code for Defect 45953 -- Starts
			Cell cellMaterialRevision = rowHeaderBOM.createCell(8);
			cellMaterialRevision.setCellStyle(cellStyleBOM);
			cellMaterialRevision.setCellValue(strBOMMaterialRevision);
			//Code for Defect 45953 -- Ends
			
			//10 Material Title
			Cell cellMaterialTitle = rowHeaderBOM.createCell(9);
			cellMaterialTitle.setCellStyle(cellStyleBOM);
			cellMaterialTitle.setCellValue(strBOMMaterialTitle);		

			//11 Level
			Cell cellLevel = rowHeaderBOM.createCell(10);
			cellLevel.setCellStyle(cellStyleBOM);
			cellLevel.setCellValue(strBOMLevel);		

			//12 State
			Cell cellState = rowHeaderBOM.createCell(11);
			cellState.setCellStyle(cellStyleBOM);
			cellState.setCellValue(strBOMState);

			//13 Stage
			Cell cellStage = rowHeaderBOM.createCell(12);
			cellStage.setCellStyle(cellStyleBOM);
			//Modified for 2018x.6 Jun CW Defect 46893 - Starts
			cellStage.setCellValue(strBOMPhase);
			//Modified for 2018x.6 Jun CW Defect 46893 - Ends

			//14 Qty
			Cell cellQty = rowHeaderBOM.createCell(13);
			cellQty.setCellStyle(cellStyleBOM);
			cellQty.setCellValue(strBOMQty);

			//15 Sequence Number
			Cell cellSequenceNumber = rowHeaderBOM.createCell(14);
			cellSequenceNumber.setCellStyle(cellStyleBOM);
			cellSequenceNumber.setCellValue(strBOMSequenceNumber);

			//16 Chg
			Cell cellChg = rowHeaderBOM.createCell(15);
			cellChg.setCellStyle(cellStyleBOM);
			cellChg.setCellValue(strBOMChg);

			//17 Substitution
			Cell cellSubstitution = rowHeaderBOM.createCell(16);
			cellSubstitution.setCellStyle(cellStyleBOM);
			cellSubstitution.setCellValue(strBOMSubstitution);
			
			//18 Substitution (Substitute Name)
			Cell cellSubstitutionNameOrNum = rowHeaderBOM.createCell(17);
			cellSubstitutionNameOrNum.setCellStyle(cellStyleBOM);
			cellSubstitutionNameOrNum.setCellValue(strBOMSubstitutionNameOrNumber);

			//19 Substitution (Name/Number)
			Cell cellAlternateNameOrNum = rowHeaderBOM.createCell(18);
			cellAlternateNameOrNum.setCellStyle(cellStyleBOM);
			cellAlternateNameOrNum.setCellValue(strBOMAlternateNameOrNumber);

			//Added for Apr22 CW requirement 41656 Starts
			// 20 NSPCG
			Cell cellNSPCG = rowHeaderBOM.createCell(19);
			cellNSPCG.setCellStyle(cellStyleBOM);
			cellNSPCG.setCellValue(strBOMNSPCG);
			//Added for Apr22 CW requirement 41656 Ends
			
			// 21 OptionalComponent
			Cell cellOptionalComponent = rowHeaderBOM.createCell(20);
			cellOptionalComponent.setCellStyle(cellStyleBOM);
			cellOptionalComponent.setCellValue(strBOMOptionalComponent);
			//Added For DSM Report 2018x1.1 Scope : 7 Report shall include BOM comments in the BOM tab :Ends
						
			//22 DerivedFromName
			Cell DerivedFromName = rowHeaderBOM.createCell(21);
			DerivedFromName.setCellStyle(cellStyleBOM);
			DerivedFromName.setCellValue(strBOMDerivedFromName);
			
			//23 DerivedFromTitle
			Cell DerivedFromTitle = rowHeaderBOM.createCell(22);
			DerivedFromTitle.setCellStyle(cellStyleBOM);
			DerivedFromTitle.setCellValue(strBOMDerivedFromTitle);
			
			//24 PartFamilyName
			Cell PartFamilyName = rowHeaderBOM.createCell(23);
			PartFamilyName.setCellStyle(cellStyleBOM);
			//Start Modified for 22x Changes for auto name of Part Library & Faimly
			PartFamilyName.setCellValue(strBOMPartFamilyTitle);
			//End Modified for 22x Changes for auto name of Part Library & Faimly
			//Creating Header ---End			
			
			//Added For DSM Report 2018x1.1 Scope : 7 Report shall include BOM comments in the BOM tab :Starts
			// 25 EBOM Comments
			Cell EBOMComments = rowHeaderBOM.createCell(24);
			EBOMComments.setCellStyle(cellStyleBOM);
			EBOMComments.setCellValue(strBOMComments);
			//Added For DSM Report 2018x1.1 Scope : 7 Report shall include BOM comments in the BOM tab :Ends
			
			// Added for requirement Id :35336--starts
			// 26 Has Art
			Cell cHasArt = rowHeaderBOM.createCell(25);
			cHasArt.setCellStyle(cellStyleBOM);
			cHasArt.setCellValue(strHasArt);
			// Added for requirement Id :35336--ends
						
			int rowCount1 = 0;	
			//Added For Defect:45953--starts
			String strParentTypeName ="";
			String strParentTypeDisplayName="";
			//Added For Defect:45953--Ends
			String strTypeName = DomainConstants.EMPTY_STRING;
			String strParentId = DomainConstants.EMPTY_STRING;
			for (int i=0;i<mlParentChildBOM.size();i++){
				//Added code for 2018x.6 Requirement id 36700 Ability to generate Part and Spec report with without hyperlink Starts
				iRowCountAll = iRowCountAll + 1;
				//Added code for 2018x.6 Requirement id 36700 Ability to generate Part and Spec report with without hyperlink Ends
				XSSFRow row = sheetBOM.createRow(++rowCount1);
				int columnCount1 = 0;
				Map mp = (Map)mlParentChildBOM.get(i);	
				Map hmCommonCol = new HashMap<>();
				hmCommonCol= (Map)mp.get("CommonColumns");
				if(hmCommonCol != null){
					strParentId = (String) hmCommonCol.get(DomainConstants.SELECT_ID);
					//Added For Defect:45953--starts
					strParentTypeName = (String) hmCommonCol.get(DomainConstants.SELECT_TYPE);
					strParentTypeDisplayName = i18nNow.getTypeI18NString(strParentTypeName, sLanguage);
					//Added For Defect:45953--Ends
				} 
				String strId=(String)mp.get("id");
				String strCurrentState = (String)mp.get("ParentCurrentState");
				//Added by DSM Reports (Sogeti) for 22x.04 (Dec CW 2023) Defect 56156 -- START
				String strChildTitle="";
				String strChildState="";

				strChildTitle = (String)mp.get(DomainConstants.SELECT_ATTRIBUTE_TITLE);
				strChildState = (String)mp.get(DomainConstants.SELECT_CURRENT);
				// Added by DSM Reports (Sogeti) for 22x.04 (Dec CW 2023) Defect 56156 -- END

				HashMap hm= new HashMap<>();
				String strTypeDisplayName=null;
				strTypeName = (String)mp.get("type");
				strTypeDisplayName= getTypeDisplayName(context,strTypeName);
				String strEBOMSubstitute=null;				
				String strEBOMSubstituteDisplayName=null;
				String strTitle="";
				strEBOMSubstitute =  (String)mp.get("frommid[EBOM Substitute]");
				if(UIUtil.isNotNullAndNotEmpty(strEBOMSubstitute)){
					if(strEBOMSubstitute.equalsIgnoreCase("TRUE")){
						strEBOMSubstituteDisplayName = "Yes";
					}
					else if(strEBOMSubstitute.equalsIgnoreCase("FALSE")){
						strEBOMSubstituteDisplayName = "No";
					}
				}
				
				String strEBOMSubstituteName= DomainConstants.EMPTY_STRING;
				if (mp.get("frommid[EBOM Substitute].to.name") instanceof StringList){					
					StringList slEBOMSubstituteName = (StringList)mp.get("frommid[EBOM Substitute].to.name");
					strEBOMSubstituteName= slEBOMSubstituteName.toString();
					strEBOMSubstituteName = strEBOMSubstituteName.replace("[", "").replace("]", "");
				} else {
					strEBOMSubstituteName = (String)mp.get("frommid[EBOM Substitute].to.name");
				}
				
				//Modified For Alternate Name --Begin
				String strAlternateName = DomainConstants.EMPTY_STRING;
				String strOptionalComponent = DomainConstants.EMPTY_STRING;
				StringList slSubstituteAndAlternateName = new StringList();
				if(mp.get("AlternateName")!=null && mp.containsKey("AlternateName")){
				strAlternateName =  (String)mp.get("AlternateName");				
				}
				if(UIUtil.isNotNullAndNotEmpty(strEBOMSubstituteName)){
				slSubstituteAndAlternateName.add(strEBOMSubstituteName);
				}
				if(UIUtil.isNotNullAndNotEmpty(strAlternateName)){
				slSubstituteAndAlternateName.add(strAlternateName);
				}
				String strSubstituteAndAlternateName= slSubstituteAndAlternateName.toString();
				strSubstituteAndAlternateName = strSubstituteAndAlternateName.replace("[", "").replace("]", "");

				//Added for Requirement 30371: The report shall include Optional Component (YES/NO) in BOM tab--Starts
				strOptionalComponent = (String)mp.get("attribute[pgOptionalComponent]");
				//Added for Requirement 30371: The report shall include Optional Component (YES/NO) in BOM tab--Ends

				/*if(UIUtil.isNotNullAndNotEmpty(strOptionalComponent)){
					if(strOptionalComponent.equalsIgnoreCase("TRUE") || strOptionalComponent.equalsIgnoreCase("YES")){
						strOptionalComponent = "Yes";
					}
					else if(strOptionalComponent.equalsIgnoreCase("FALSE") || strOptionalComponent.equalsIgnoreCase("NO")){
						strOptionalComponent = "No";
					}
				}*/
				
				//Modified For Alternate Name --End
				//Updated code for Req Id : 33634 - Hyperlinks--Starts
				//Added by DSM Reports (Sogeti) for 2022x.5 (APR CW 2024) Defect 55875 - Start
				String sCAID = (String) mp.get(SCAID);
				if(UIUtil.isNotNullAndNotEmpty(sCAID) && !sCAID.contains(HYPERLINK_PIPE)) {
					hm.put(0, HYPERLINK+mp.get("ChangeAction")+HYPERLINK_PIPE+mp.get(SCAID));
				}else {
					hm.put(0, mp.get("ChangeAction"));
				}
				//Added by DSM Reports (Sogeti) for 2022x.5 (APR CW 2024) Defect 55875 - End
				//Updated code for Req Id : 33634 - Hyperlinks--Ends
				hm.put(1, mp.get("CAReasonForChange"));	
				//Updated code for Req Id : 33634 - Hyperlinks--Starts
				hm.put(2, HYPERLINK+mp.get("ParentName")+HYPERLINK_PIPE+strParentId);
				//Updated code for Req Id : 33634 - Hyperlinks--Ends
				hm.put(3, mp.get("ParentTitle"));
				//Added For Defect:45953--starts
				hm.put(4, strParentTypeDisplayName);
				//Added For Defect:45953--Ends
				//Code for requirement to addition of revision and state on all tabs except attribute -- Starts
				hm.put(5, mp.get("ParentRevision"));
				//Code for requirement to addition of revision and state on all tabs except attribute -- Ends
				//Updated code for Req Id : 33634 - Hyperlinks--Starts
				//Added for Defect: 45953 --- Starts
				hm.put(6, strTypeDisplayName);
				//Added for Defect: 45953 --- Ends
				hm.put(7, HYPERLINK+mp.get("name")+HYPERLINK_PIPE+strId);
				//Updated code for Req Id : 33634 - Hyperlinks--Ends
				//Added for Defect: 45953 --- Starts
				hm.put(8, mp.get(DomainConstants.SELECT_REVISION));
				//Added for Defect: 45953 --- Ends
				if(!mp.containsKey("level")){
						hm.put(9, strTitle);
				} else {
					//Display Title for all Child objects
					hm.put(9, strChildTitle);
				}
				hm.put(10,  mp.get("level"));
				//Display State for all Child objects
				if (UIUtil.isNotNullAndNotEmpty(strChildState)) {
					hm.put(11, strChildState);
				} else {
					hm.put(11,  mp.get("current"));
				}
				hm.put(12, mp.get("attribute[Release Phase]"));
				hm.put(13, mp.get("attribute[Quantity]"));
				hm.put(14, mp.get("attribute[Find Number]"));
				hm.put(15, mp.get("attribute[pgChange]"));
				hm.put(16, strEBOMSubstituteDisplayName);				
				//hm.put(15, strSubstituteAndAlternateName);
				//2018x0 April Bug FIx
				hm.put(17, strEBOMSubstituteName);
				hm.put(18, strAlternateName);
				//Added for Apr22 CW requirement 41656 Strats
				hm.put(19, mp.get(ATTR_PGNSPCG));
				//Added for Apr22 CW requirement 41656 Ends
				//Added for Requirement 30371: The report shall include Optional Component (YES/NO) in BOM tab--Starts
				hm.put(20, strOptionalComponent);
				//Added for Requirement 30371: The report shall include Optional Component (YES/NO) in BOM tab--Ends
				//Updated code for Req Id : 33634 - Hyperlinks--Starts
				hm.put(21, HYPERLINK+mp.get("DerivedFromName")+HYPERLINK_PIPE+mp.get("DerivedFromId"));
				//Updated code for Req Id : 33634 - Hyperlinks--Ends
				hm.put(22, mp.get("DerivedFromTitle"));
				hm.put(23, mp.get("PartFamilyName"));
				//Added For DSM Report 2018x1.1 Scope : 7 Report shall include BOM comments in the BOM tab :Starts
				hm.put(24, mp.get("attribute[Comment]"));
				//Added For DSM Report 2018x1.1 Scope : 7 Report shall include BOM comments in the BOM tab :Ends
				// Added for requirement Id :35336--starts
				hm.put(25, mp.get("attribute[" + attrPgHasArt + "]"));
				
				// Added for requirement Id :35336--ends
				//For Cells Creation in each Row	
				XSSFCellStyle style = workbook.createCellStyle();
				style = setForeGroundColor(strCurrentState, style);
				//Added by DSM Reports (Sogeti) for 2022x.5 (APR CW 2024) Defect 55875 - Start
				XSSFCellStyle style1 = workbook.createCellStyle();
				//Added by DSM Reports (Sogeti) for 2022x.5 (APR CW 2024) Defect 55875 - End
				for(int j=0;j<hm.size();j++){								
				//Modified the code for _2022x_Aug CW Req-47097 :: Start
				// Modified by DSM Reports (Sogeti) for 22x.03 (August CW 2023) Defect 54091 - Start
				Cell cell = row.createCell(columnCount1++);
				if (j == 2) {
					style = makeColumnNumeric(workbook, style);
				}

				cell.setCellStyle(style);	
				
				// Modified by DSM Reports (Sogeti) for 22x.03 (August CW 2023) Defect 54091 - End
				//Modified the code for _2022x_Aug CW Req-47097 :: End
				//Added code for Req Id : 33634 - Hyperlinks--Starts
				String strCellValue = (String)hm.get(j);
				if(UIUtil.isNotNullAndNotEmpty(strCellValue) && strCellValue.startsWith(HYPERLINK_COMPARE)){
					String[] strSplittedValue = strCellValue.split("\\|", -1); 
					String strHyperlinkId = strSplittedValue[(strSplittedValue.length)-1];
					String strValue = strSplittedValue[(strSplittedValue.length)-2];
					//Added code for 2018x.6 Requirement id 36700 Ability to generate Part and Spec report with without hyperlink Starts
					if(pgV3Constants.TRUE.equalsIgnoreCase(strHyperlink) && iRowCountAll < iHyperLinkLimit){
						getHyperlink(context,cell,workbook,strValue,strHyperlinkId,strCurrentState);
					
					} else if(UIUtil.isNotNullAndNotEmpty(strValue)) {					
						cell.setCellValue(strValue);
					}
					//Added code for 2018x.6 Requirement id 36700 Ability to generate Part and Spec report with without hyperlink Ends
				}else{
					cell.setCellValue((String)hm.get(j));
					//Added by DSM Reports (Sogeti) for 2022x.5 (APR CW 2024) Defect 55875 - Start
					if(j == 0) {
						style1.cloneStyleFrom(style);
						style1.setWrapText(true);
						cell.setCellStyle(style1);
					}
					//Added by DSM Reports (Sogeti) for 2022x.5 (APR CW 2024) Defect 55875 - End
				}	
				//Added code for Req Id : 33634 - Hyperlinks--Ends		
				}
			}
			sheetFormatter(sheetBOM); // Added by DSM Reports (Sogeti) for 22x.04 (Dec CW 2023) Defect 56156 - START/END
		} catch (Exception e) {
			 outLog.print("Exception in  updateWorksheetBOM: "+e+"\n");
			 outLog.flush();
		}
	}

private void updateWorksheetPlants(Context context, XSSFWorkbook workbook, XSSFRow rowHeaderPlants, XSSFCellStyle cellStylePlants, MapList mlPlants, XSSFSheet sheetPlants, String strHyperlink, XSSFCellStyle styleGlobal) {
	try {
		//Updated code for 2018x.6 Requirement 38092 Refactor Part And Spec Report Start
		//Added code for 2018x.6 Requirement id 36700 Ability to generate Part and Spec report with without hyperlink Starts
		String strHyperlinkLimit = EnoviaResourceBundle.getProperty(context, EMXCPNSTRINGRESOURCE, context.getLocale(),"emxCPN.PartAndSpecReport.HyperlinkLimit");
		int iHyperLinkLimit = Integer.parseInt(strHyperlinkLimit);
		int iRowCountAll=0;
		//Added code for 2018x.6 Requirement id 36700 Ability to generate Part and Spec report with without hyperlink Ends
		String strColumnNames = EnoviaResourceBundle.getProperty(context, EMXCPN, context.getLocale(),"emxCPN.FamilyCareReport.Worksheet.Plants.ColumnTypes");
		String strPlantColumn = "emxCPN.FamilyCareReport.Worksheet.Plants.Column";
		createCellForWorksheet(context,strColumnNames,rowHeaderPlants,cellStylePlants,strPlantColumn);
			
		String strTypeName = DomainConstants.EMPTY_STRING;
		Map<String, Object> mpPlants = new HashMap<>();
		Hashtable htCommonCol = null;
		String strCurrent = DomainConstants.EMPTY_STRING;
		String strPgIsAuthorizedtoUse = DomainConstants.EMPTY_STRING;
		String strPgIsAuthorizedtoProduce = DomainConstants.EMPTY_STRING;
		String strPgIsActivated = DomainConstants.EMPTY_STRING;
		String strPgIsAuthorizedtoView = DomainConstants.EMPTY_STRING;
		int columnCount1 = 0;
		int mlPlantsSize = mlPlants.size();
		String strTypeDisplayName=null;
		String strId = DomainConstants.EMPTY_STRING;
		int rowCount=0;
		for (int i=0;i<mlPlantsSize;i++){
			++rowCount;
			columnCount1 = 0;
			//Added code for 2018x.6 Requirement id 36700 Ability to generate Part and Spec report with without hyperlink Starts
			iRowCountAll = iRowCountAll + 1;
			//Added code for 2018x.6 Requirement id 36700 Ability to generate Part and Spec report with without hyperlink Ends
			XSSFRow row = sheetPlants.createRow(rowCount);
			mpPlants = (Map)mlPlants.get(i);
			//Fetching CommonColumns --Begin		
			htCommonCol= (Hashtable)mpPlants.get(COMMONCOLUMNS);
			//Fetching CommonColumns --End
			strCurrent = (String)htCommonCol.get(DomainConstants.SELECT_CURRENT);
			strPgIsAuthorizedtoUse = (String)mpPlants.get(ISAUTHORIZEDUSE);
			strPgIsAuthorizedtoProduce = (String)mpPlants.get(ISAUTHORIZEDPRODUCE);			
			strPgIsActivated = (String)mpPlants.get(ISACTIVATED);
			strPgIsAuthorizedtoView = (String)mpPlants.get(ISAUTHORIZEDVIEW);
			if(UIUtil.isNotNullAndNotEmpty(strPgIsActivated)){
				if(pgV3Constants.TRUE.equalsIgnoreCase(strPgIsActivated)){
					strPgIsActivated = pgV3Constants.KEY_YES_VALUE;
				}
				else if(pgV3Constants.FALSE.equalsIgnoreCase(strPgIsActivated)){
					strPgIsActivated = pgV3Constants.KEY_NO_VALUE;
				}
			}
			if(UIUtil.isNotNullAndNotEmpty(strPgIsAuthorizedtoUse)){
				if(pgV3Constants.TRUE.equalsIgnoreCase(strPgIsAuthorizedtoUse)){
					strPgIsAuthorizedtoUse = pgV3Constants.KEY_YES_VALUE;
				}
				else if(pgV3Constants.FALSE.equalsIgnoreCase(strPgIsAuthorizedtoUse)){
					strPgIsAuthorizedtoUse = pgV3Constants.KEY_NO_VALUE;
				}
			}
			if(UIUtil.isNotNullAndNotEmpty(strPgIsAuthorizedtoProduce)){
				if(pgV3Constants.TRUE.equalsIgnoreCase(strPgIsAuthorizedtoProduce)){
					strPgIsAuthorizedtoProduce = pgV3Constants.KEY_YES_VALUE;	
				}
				else if(pgV3Constants.FALSE.equalsIgnoreCase(strPgIsAuthorizedtoProduce)){
					strPgIsAuthorizedtoProduce = pgV3Constants.KEY_NO_VALUE;
				}
			}
			if(UIUtil.isNotNullAndNotEmpty(strPgIsAuthorizedtoView)){
				if(pgV3Constants.TRUE.equalsIgnoreCase(strPgIsAuthorizedtoView)){
					strPgIsAuthorizedtoView = pgV3Constants.KEY_YES_VALUE;	
				}
				else if(pgV3Constants.FALSE.equalsIgnoreCase(strPgIsAuthorizedtoView)){
					strPgIsAuthorizedtoView = pgV3Constants.KEY_NO_VALUE;
				}
			}
			//Fetching the Types Display name --Begin
			
			strTypeName = (String)htCommonCol.get(DomainConstants.SELECT_TYPE);
			strTypeDisplayName= getTypeDisplayName(context,strTypeName);
			strId = (String)htCommonCol.get(DomainConstants.SELECT_ID);
			HashMap hm= new HashMap<>();		
			//Added the code for the Defect ID : 25104 - CA Tab is Empty : Starts
			//Code Upgrade for 2018x Data Model - Starts
			//Added by DSM Reports (Sogeti) for 2022x.5 (APR CW 2024) Defect 55875 - Start
			String sCAID = (String)htCommonCol.get(SCAID);
			if(UIUtil.isNotNullAndNotEmpty(sCAID) && !sCAID.contains(HYPERLINK_PIPE)) {
				if(htCommonCol.get(CAREALIZEDNAME) != null && htCommonCol.get(CAPROPOSEDNAME) != null) {
					//Updated code for Req Id : 33634 - Hyperlinks--Starts
					hm.put(0, HYPERLINK+htCommonCol.get(CAREALIZEDNAME)+HYPERLINK_PIPE+sCAID);
					//Updated code for Req Id : 33634 - Hyperlinks--Ends
				} else if(htCommonCol.get(CAREALIZEDNAME) != null){
					//Updated code for Req Id : 33634 - Hyperlinks--Starts
					hm.put(0, HYPERLINK+htCommonCol.get(CAREALIZEDNAME)+HYPERLINK_PIPE+sCAID);
					//Updated code for Req Id : 33634 - Hyperlinks--Ends
				} else if(htCommonCol.get(CAPROPOSEDNAME) != null){
					//Updated code for Req Id : 33634 - Hyperlinks--Starts
					hm.put(0, HYPERLINK+htCommonCol.get(CAPROPOSEDNAME)+HYPERLINK_PIPE+sCAID);
					//Updated code for Req Id : 33634 - Hyperlinks--Ends
				} else {
					hm.put(0, DomainConstants.EMPTY_STRING);
				}
			}else {
				hm.put(0,htCommonCol.get(CAPROPOSEDNAME));
			}
			//Added by DSM Reports (Sogeti) for 2022x.5 (APR CW 2024) Defect 55875 - End
			//Code Upgrade for 2018x Data Model - Ends
			//Added the code for the Defect ID : 25104 - CA Tab is Empty : Ends
			hm.put(1, htCommonCol.get(pgV3Constants.SELECT_ATTRIBUTE_REASON_FOR_CHANGE));
			//Updated code for Req Id : 33634 - Hyperlinks--Starts
			hm.put(2, HYPERLINK+htCommonCol.get(DomainConstants.SELECT_NAME)+HYPERLINK_PIPE+strId);
			//Updated code for Req Id : 33634 - Hyperlinks--Ends
			hm.put(3, htCommonCol.get(pgV3Constants.SELECT_ATTRIBUTE_TITLE));
			hm.put(4, strTypeDisplayName);
			//Code for requirement to addition of revision and state on all tabs except attribute -- Starts
			hm.put(5, htCommonCol.get(DomainConstants.SELECT_REVISION));
			hm.put(6, htCommonCol.get(DomainConstants.SELECT_CURRENT));
			//Code for requirement to addition of revision and state on all tabs except attribute -- Ends
			hm.put(7,  mpPlants.get(PLANTNAME));
			hm.put(8,  strPgIsAuthorizedtoView);				
			hm.put(9,  strPgIsActivated);
			hm.put(10, strPgIsAuthorizedtoUse);
			hm.put(11, strPgIsAuthorizedtoProduce);
			//Updated code for Req Id : 33634 - Hyperlinks--Starts
			hm.put(12, HYPERLINK+htCommonCol.get("to["+pgV3Constants.RELATIONSHIP_DERIVED+"].from.name")+HYPERLINK_PIPE+htCommonCol.get("to["+pgV3Constants.RELATIONSHIP_DERIVED+"].from.id"));
			//Updated code for Req Id : 33634 - Hyperlinks--Ends
			hm.put(13, htCommonCol.get("to["+pgV3Constants.RELATIONSHIP_DERIVED+"].from."+pgV3Constants.SELECT_ATTRIBUTE_TITLE));
			hm.put(14, mpPlants.get("PartFamilyName"));
			//For Cells creation in a Row	
			XSSFCellStyle style = workbook.createCellStyle();
			style = setForeGroundColor(strCurrent, style);
			//Added by DSM Reports (Sogeti) for 2022x.5 (APR CW 2024) Defect 55875 - Start
			XSSFCellStyle style1 = workbook.createCellStyle();
			//Added by DSM Reports (Sogeti) for 2022x.5 (APR CW 2024) Defect 55875 - End
			for(int j=0;j<hm.size();j++){						
				//Modified the code for _2022x_Aug CW Req-47097 - Start
				// Modified by DSM Reports (Sogeti) for 22x.03 (August CW 2023) Defect 54091 - Start
				Cell cell = row.createCell(columnCount1++);
				if (j == 2) {
					style = makeColumnNumeric(workbook, style);
				}
				cell.setCellStyle(style);
				
				// Modified by DSM Reports (Sogeti) for 22x.03 (August CW 2023) Defect 54091 - Start
				//Modified the code for _2022x_Aug CW Req-47097 - End
				//Added code for Req Id : 33634 - Hyperlinks--Starts
				String strCellValue = (String)hm.get(j);
				if(UIUtil.isNotNullAndNotEmpty(strCellValue) && strCellValue.startsWith(HYPERLINK_COMPARE)){
					String[] strSplittedValue = strCellValue.split("\\|", -1); 
					String strHyperlinkId = strSplittedValue[(strSplittedValue.length)-1];
					String strValue = strSplittedValue[(strSplittedValue.length)-2];
					//Added code for 2018x.6 Requirement id 36700 Ability to generate Part and Spec report with without hyperlink Starts
					if(pgV3Constants.TRUE.equalsIgnoreCase(strHyperlink) && iRowCountAll < iHyperLinkLimit){
						getHyperlink(context,cell,workbook,strValue,strHyperlinkId,strCurrent);
					
					} else if(UIUtil.isNotNullAndNotEmpty(strValue)){
						cell.setCellValue(strValue);
					}
					//Added code for 2018x.6 Requirement id 36700 Ability to generate Part and Spec report with without hyperlink Starts
				}else {
					cell.setCellValue((String)hm.get(j));
					//Added by DSM Reports (Sogeti) for 2022x.5 (APR CW 2024) Defect 55875 - Start
					if(j == 0) {
						style1.cloneStyleFrom(style);
						style1.setWrapText(true);
						cell.setCellStyle(style1);
					}
					//Added by DSM Reports (Sogeti) for 2022x.5 (APR CW 2024) Defect 55875 - End
				}
				//Added code for Req Id : 33634 - Hyperlinks--Ends
			}
		}
		sheetFormatter(sheetPlants); // Added by DSM Reports (Sogeti) for 22x.04 (Dec CW 2023) Defect 56156 - START/END
		//Updated code for 2018x.6 Requirement 38092 Refactor Part And Spec Report End
	} catch (Exception e) {	
		 outLog.print("Exception in  updateWorksheetPlants: "+e+"\n");
		 outLog.flush();
	}
	}
	
private void updateWorksheetComponentMaterials(Context context, XSSFWorkbook workbook,XSSFRow rowHeader,XSSFCellStyle cellStyle, MapList mlCompMaterials ,XSSFSheet sheetCompMaterials  ) {
try {
	String sStringResourceFile="emxCPNStringResource"; 
	String sLanguage = context.getSession().getLanguage();
	String strTablesCompMaterialsChangeAction= i18nNow.getI18nString("emxCPN.FamilyCareReport.Worksheet.Column.ChangeAction",sStringResourceFile, sLanguage);
	String strTablesCompMaterialsChangeActionReasonForChange=i18nNow.getI18nString("emxCPN.FamilyCareReport.Worksheet.Column.ChangeActionReasonForChange",sStringResourceFile, sLanguage);
	String strTablesCompMaterialsNameOrNumber=i18nNow.getI18nString("emxCPN.FamilyCareReport.Worksheet.Column.NameOrNumber",sStringResourceFile, sLanguage);
	String strTablesCompMaterialsChildTitle=i18nNow.getI18nString("emxCPN.FamilyCareReport.Worksheet.ComponentMaterial.Column.ChildTitle",sStringResourceFile, sLanguage);
	String strTablesCompMaterialsChildName=i18nNow.getI18nString("emxCPN.FamilyCareReport.Worksheet.ComponentMaterial.Column.ChildName",sStringResourceFile, sLanguage);
	String strTablesCompMaterialsLevel = i18nNow.getI18nString("emxCPN.FamilyCareReport.Worksheet.ComponentMaterial.Column.Level",sStringResourceFile, sLanguage);
	String strTablesCompMaterialsTitle=i18nNow.getI18nString("emxCPN.FamilyCareReport.Worksheet.ComponentMaterial.Column.ComponentTitle",sStringResourceFile, sLanguage);
	String strTablesCompMtrlType=i18nNow.getI18nString("emxCPN.FamilyCareReport.Worksheet.Column.Type",sStringResourceFile, sLanguage);
	//Code for requirement to addition of revision and state on all tabs except attribute - Starts
	String strTablesCompMtrlRevision	= i18nNow.getI18nString("emxCPN.FamilyCareReport.Worksheet.Column.Revision",sStringResourceFile, sLanguage);
	//Code for requirement to addition of revision and state on all tabs except attribute - Ends
	String strTablesCompMtrlTargetWeight=i18nNow.getI18nString("emxCPN.FamilyCareReport.Worksheet.ComponentMaterial.Column.TargetPercentageWeightbyWeight",sStringResourceFile, sLanguage);
	String strTablesCompMtrlWeightUoM=i18nNow.getI18nString("emxCPN.FamilyCareReport.Worksheet.ComponentMaterial.Column.WeightUoM",sStringResourceFile, sLanguage);
	String strTablesCompMtrlSeqNum=i18nNow.getI18nString("emxCPN.FamilyCareReport.Worksheet.ComponentMaterial.Column.SequenceNumber",sStringResourceFile, sLanguage);
	String strTablesCompMtrlTradeName=i18nNow.getI18nString("emxCPN.FamilyCareReport.Worksheet.ComponentMaterial.Column.TradeName",sStringResourceFile, sLanguage);
	String strTablesCompMtrlDescription=i18nNow.getI18nString("emxCPN.FamilyCareReport.Worksheet.ComponentMaterial.Column.Description",sStringResourceFile, sLanguage);
	String strTablesCompMtrlCompany=i18nNow.getI18nString("emxCPN.FamilyCareReport.Worksheet.ComponentMaterial.Column.Company",sStringResourceFile, sLanguage);
	String strTablesCompMtrlCompanyId=i18nNow.getI18nString("emxCPN.FamilyCareReport.Worksheet.ComponentMaterial.Column.CompanyID",sStringResourceFile, sLanguage);
	String strTablesCompMtrlLegacyEnvClass=i18nNow.getI18nString("emxCPN.FamilyCareReport.Worksheet.ComponentMaterial.Column.LegacyEnvironmentalClass",sStringResourceFile, sLanguage);
	String strTablesCompMtrlLayerOrComponentDescription=i18nNow.getI18nString("emxCPN.FamilyCareReport.Worksheet.ComponentMaterial.Column.LayerOrComponentDescription",sStringResourceFile, sLanguage);
	String strTablesCompMtrlMinWeightbyWeight=i18nNow.getI18nString("emxCPN.FamilyCareReport.Worksheet.ComponentMaterial.Column.MinimumPercentageWeightbyWeight",sStringResourceFile, sLanguage);
	String strTablesCompMtrlMaxPercentageWeightbyWeight=i18nNow.getI18nString("emxCPN.FamilyCareReport.Worksheet.ComponentMaterial.Column.MaximumPercentageWeightbyWeight",sStringResourceFile, sLanguage);
	String strTablesCompMtrlPostConsumerRecycledContent=i18nNow.getI18nString("emxCPN.FamilyCareReport.Worksheet.ComponentMaterial.Column.Post-ConsumerRecycledContent",sStringResourceFile, sLanguage);
	String strTablesCompMtrlComments=i18nNow.getI18nString("emxCPN.FamilyCareReport.Worksheet.ComponentMaterial.Column.Comments",sStringResourceFile, sLanguage);
	String strTablesCompMtrlState=i18nNow.getI18nString("emxCPN.FamilyCareReport.Worksheet.ComponentMaterial.Column.State",sStringResourceFile, sLanguage);
	String strTablesCompMtrlDerivedFromName=i18nNow.getI18nString("emxCPN.FamilyCareReport.Worksheet.ComponentMaterial.Column.DerivedFromName",sStringResourceFile, sLanguage);
	String strTablesCompMtrlDerivedFromTitle=i18nNow.getI18nString("emxCPN.FamilyCareReport.Worksheet.ComponentMaterial.Column.DerivedFromTitle",sStringResourceFile, sLanguage);
	String strTablesCompMtrlPartFamilyName=i18nNow.getI18nString("emxCPN.FamilyCareReport.Worksheet.ComponentMaterial.Column.PartFamilyName",sStringResourceFile, sLanguage);
	//Start Modified for 22x Changes for auto name of Part Library & Faimly
	String strTablesCompMtrlPartFamilyTitle=i18nNow.getI18nString("emxCPN.FamilyCareReport.Worksheet.ComponentMaterial.Column.PartFamilyTitle",sStringResourceFile, sLanguage);
	//End Modified for 22x Changes for auto name of Part Library & Faimly
	
	//Creating Header ---Begin
	//1 Change Action
	Cell cellChangeAction = rowHeader.createCell(0);
	cellChangeAction.setCellStyle(cellStyle);
	cellChangeAction.setCellValue(strTablesCompMaterialsChangeAction);
	
	//2 Change Action 'Reason for Change'
	Cell cellChangeActionReasonForChange = rowHeader.createCell(1);
	cellChangeActionReasonForChange.setCellStyle(cellStyle);
	cellChangeActionReasonForChange.setCellValue(strTablesCompMaterialsChangeActionReasonForChange);
	
	//3 Name/Number
	Cell cellNameOrNumber = rowHeader.createCell(2);
	cellNameOrNumber.setCellStyle(cellStyle);
	cellNameOrNumber.setCellValue(strTablesCompMaterialsNameOrNumber);
	
	//4 Title
	Cell cellTitle = rowHeader.createCell(3);
	cellTitle.setCellStyle(cellStyle);
	cellTitle.setCellValue(strTablesCompMaterialsTitle);
	
	//5 ChildName
	Cell cellChildName = rowHeader.createCell(4);
	cellChildName.setCellStyle(cellStyle);
	cellChildName.setCellValue(strTablesCompMaterialsChildName);
	
	//6 Child Title
	Cell cellComponentTitle = rowHeader.createCell(5);
	cellComponentTitle.setCellStyle(cellStyle);
	cellComponentTitle.setCellValue(strTablesCompMaterialsChildTitle);
	
	//7 Level
	Cell cellLevel = rowHeader.createCell(6);
	cellLevel.setCellStyle(cellStyle);
	cellLevel.setCellValue(strTablesCompMaterialsLevel);
	
	//8 Type
	Cell cellType = rowHeader.createCell(7);
	cellType.setCellStyle(cellStyle);
	cellType.setCellValue(strTablesCompMtrlType);
	
	//9 Revision
	//Code for requirement to addition of revision and state on all tabs except attribute -- Starts
	Cell cellRevision = rowHeader.createCell(8);
	cellRevision.setCellStyle(cellStyle);
	cellRevision.setCellValue(strTablesCompMtrlRevision);
	//Code for requirement to addition of revision and state on all tabs except attribute -- Ends
	
	//10 TargetWeight
	Cell cellGrossWeight = rowHeader.createCell(9);
	cellGrossWeight.setCellStyle(cellStyle);
	cellGrossWeight.setCellValue(strTablesCompMtrlTargetWeight);
	
	//11 Weight UoM			
	Cell cellLegacyWeightFactor = rowHeader.createCell(10);
	cellLegacyWeightFactor.setCellStyle(cellStyle);
	cellLegacyWeightFactor.setCellValue(strTablesCompMtrlWeightUoM);
	
	//12 Seq Num
	Cell cellWeightUoM = rowHeader.createCell(11);
	cellWeightUoM.setCellStyle(cellStyle);
	cellWeightUoM.setCellValue(strTablesCompMtrlSeqNum);
	
	//13 TradeName
	Cell cellWeightofProductInConsumerUnit = rowHeader.createCell(12);
	cellWeightofProductInConsumerUnit.setCellStyle(cellStyle);
	cellWeightofProductInConsumerUnit.setCellValue(strTablesCompMtrlTradeName);
	
	//14 Description
	Cell cellNetWeightUoM= rowHeader.createCell(13);
	cellNetWeightUoM.setCellStyle(cellStyle);
	cellNetWeightUoM.setCellValue(strTablesCompMtrlDescription);
	
	//15 Company
	Cell cellCompany = rowHeader.createCell(14);
	cellCompany.setCellStyle(cellStyle);
	cellCompany.setCellValue(strTablesCompMtrlCompany);	
	
	//16 CompanyId
	Cell cellCompanyId = rowHeader.createCell(15);
	cellCompanyId.setCellStyle(cellStyle);
	cellCompanyId.setCellValue(strTablesCompMtrlCompanyId);	
	
	//17 LegacyEnvClass
	Cell cellLegacyEnvClass = rowHeader.createCell(16);
	cellLegacyEnvClass.setCellStyle(cellStyle);
	cellLegacyEnvClass.setCellValue(strTablesCompMtrlLegacyEnvClass);	
	
	//18 LayerOrComponentDescription
	Cell cellLayerOrComponentDescription = rowHeader.createCell(17);
	cellLayerOrComponentDescription.setCellStyle(cellStyle);
	cellLayerOrComponentDescription.setCellValue(strTablesCompMtrlLayerOrComponentDescription);	
		
	//19 MinWeightbyWeight
	Cell cellMinWeightbyWeight = rowHeader.createCell(18);
	cellMinWeightbyWeight.setCellStyle(cellStyle);
	cellMinWeightbyWeight.setCellValue(strTablesCompMtrlMinWeightbyWeight);	

	//20 MaxPercentageWeightbyWeight
	Cell cellMaxPercentageWeightbyWeight = rowHeader.createCell(19);
	cellMaxPercentageWeightbyWeight.setCellStyle(cellStyle);
	cellMaxPercentageWeightbyWeight.setCellValue(strTablesCompMtrlMaxPercentageWeightbyWeight);	
	
	//21 PostConsumerRecycledContent
	Cell cellPostConsumerRecycledContent = rowHeader.createCell(20);
	cellPostConsumerRecycledContent.setCellStyle(cellStyle);
	cellPostConsumerRecycledContent.setCellValue(strTablesCompMtrlPostConsumerRecycledContent);	
	
	//22 Comments
	Cell cellComments = rowHeader.createCell(21);
	cellComments.setCellStyle(cellStyle);
	cellComments.setCellValue(strTablesCompMtrlComments);	
	
	//23 State
	Cell cellState = rowHeader.createCell(22);
	cellState.setCellStyle(cellStyle);
	cellState.setCellValue(strTablesCompMtrlState);		
	
	//24 DerivedFromName
	Cell DerivedFromName = rowHeader.createCell(23);
	DerivedFromName.setCellStyle(cellStyle);
	DerivedFromName.setCellValue(strTablesCompMtrlDerivedFromName);
	
	//25 DerivedFromName
	Cell DerivedFromTitle = rowHeader.createCell(24);
	DerivedFromTitle.setCellStyle(cellStyle);
	DerivedFromTitle.setCellValue(strTablesCompMtrlDerivedFromTitle);
	
	//26 PartFamilyName
	Cell PartFamilyName = rowHeader.createCell(25);
	PartFamilyName.setCellStyle(cellStyle);
	//Start Modified for 22x Changes for auto name of Part Library & Faimly
	PartFamilyName.setCellValue(strTablesCompMtrlPartFamilyTitle);
	//End Modified for 22x Changes for auto name of Part Library & Faimly
	
	//Creating Header ---End
	
	int rowCount1 = 0;
	String strTypeName = DomainConstants.EMPTY_STRING;
	XSSFCellStyle style = workbook.createCellStyle();
	style.setFillForegroundColor(IndexedColors.GREY_25_PERCENT.getIndex());	
	style.setFillPattern(FillPatternType.SOLID_FOREGROUND);
	String current = DomainConstants.EMPTY_STRING;
	//Added code for Req Id : 33634 - Hyperlinks--Starts
	String strParentId = DomainConstants.EMPTY_STRING;
	String strChildId = DomainConstants.EMPTY_STRING;
	String strDerivedId = DomainConstants.EMPTY_STRING;
	String strCellValue = DomainConstants.EMPTY_STRING;
	String strHyperlinkId = DomainConstants.EMPTY_STRING;
	String strValue = DomainConstants.EMPTY_STRING;
	String strCAId = DomainConstants.EMPTY_STRING;
	//Added code for Req Id : 33634 - Hyperlinks--Ends
	for (int i=0;i<mlCompMaterials.size();i++){
		XSSFRow row = sheetCompMaterials.createRow(++rowCount1);
		int columnCount1 = 0;
		Map mp = (Map)mlCompMaterials.get(i);
		HashMap hm= new HashMap<>();
		//Fetching CommonColumns --Begin		
		Hashtable htCommonCol = new Hashtable<>();
		htCommonCol= (Hashtable)mp.get("CommonColumns");			
		//Fetching CommonColumns --End
		String strCurrent = (String)htCommonCol.get("current");
		//Added code for Req Id : 33634 - Hyperlinks--Starts
		strChildId = (String)mp.get("id");
		strDerivedId = (String)htCommonCol.get("to[Derived].from.id");
		strParentId = (String)htCommonCol.get("id");
		strCAId = (String)htCommonCol.get("sCAId");
		//Added code for Req Id : 33634 - Hyperlinks--Ends
		//Fetching the Types Display name --Begin
		String strTypeDisplayName=null;
		strTypeName = (String)htCommonCol.get("type");
		strTypeDisplayName= getTypeDisplayName(context,strTypeName);
		//if(strCurrent.equalsIgnoreCase("Release") || strCurrent.equalsIgnoreCase("Released")){
		///Added the code for the Defect ID : 25104 - CA Tab is Empty : Starts
		//Code Upgrade for 2018x Data Model - Starts	
		if(htCommonCol.get("CARealizedName") != null && htCommonCol.get("CAProposedName") != null) {
			//Updated code for Req Id : 33634 - Hyperlinks--Starts
			hm.put(0, HYPERLINK+htCommonCol.get("CARealizedName")+HYPERLINK_PIPE+strCAId);
			//Updated code for Req Id : 33634 - Hyperlinks--Ends
		} else if(htCommonCol.get("CARealizedName") != null){
			//Updated code for Req Id : 33634 - Hyperlinks--Starts
			hm.put(0, HYPERLINK+htCommonCol.get("CARealizedName")+HYPERLINK_PIPE+strCAId);
			//Updated code for Req Id : 33634 - Hyperlinks--Ends
		} else if(htCommonCol.get("CAProposedName") != null){
			//Updated code for Req Id : 33634 - Hyperlinks--Starts
			hm.put(0, HYPERLINK+htCommonCol.get("CAProposedName")+HYPERLINK_PIPE+strCAId);
			//Updated code for Req Id : 33634 - Hyperlinks--Ends
		} else {
			hm.put(0, DomainConstants.EMPTY_STRING);
		}
		//Code Upgrade for 2018x Data Model - Ends
		//Added the code for the Defect ID : 25104 - CA Tab is Empty : Ends
		hm.put(1, htCommonCol.get("attribute[Reason for Change]"));
		//Updated code for Req Id : 33634 - Hyperlinks--Starts
		hm.put(2, HYPERLINK+mp.get("ParentName")+HYPERLINK_PIPE+strParentId);
		//Updated code for Req Id : 33634 - Hyperlinks--Ends
		hm.put(3, mp.get("ComponentTitle"));
		//Updated code for Req Id : 33634 - Hyperlinks--Starts
		hm.put(4, HYPERLINK+mp.get("ChildName")+HYPERLINK_PIPE+strChildId);
		//Updated code for Req Id : 33634 - Hyperlinks--Ends
		hm.put(5, mp.get("ChildTitle"));
		hm.put(6, mp.get("level"));
		hm.put(7,strTypeDisplayName);
		//Code for requirement to addition of revision and state on all tabs except attribute -- Starts
		hm.put(8, htCommonCol.get("revision"));
		//Code for requirement to addition of revision and state on all tabs except attribute -- Ends
		hm.put(9,  mp.get("Quantity"));
		hm.put(10, mp.get("QuantityUnitOfMeasure"));
		hm.put(11, mp.get("Sequence value"));
		hm.put(12, mp.get("attribute[Marketing Name]"));
		hm.put(13, mp.get("description"));
		hm.put(14, mp.get("from[pgMaterialToCompany].to.name"));
		hm.put(15, mp.get("from[pgMaterialToCompany].to.attribute[pgShortCode]"));
		hm.put(16, mp.get("from[pgMaterialtopgPLIEnvironmentalClass].to.name"));
		hm.put(17, mp.get("MaterialLayer"));
		//Updated for Defect : 31814 Starts
		hm.put(18, mp.get("Minimum Weight"));
		hm.put(19, mp.get("Maximum Weight"));
		hm.put(20, mp.get("attribute[pgPostConsumerRecycledContent].inputvalue"));
		//Updated for Defect : 31814 Ends
		hm.put(21, mp.get("Comment"));	
		//Added code for Defect Id : 29818 - The value of State Revision in Substances & Materials sheet doesn't match the value in UI: Starts
		if(mp.get("current")!=null){
			current = getMappedState((String)mp.get("current"));
			if(UIUtil.isNotNullAndNotEmpty(current)){
				hm.put(22, current);
			} else {
				hm.put(22, mp.get("current"));
			}
		} else {
			hm.put(22,"");
		}
		//Added code for Defect Id : 29818 - The value of State Revision in Substances & Materials sheet doesn't match the value in UI: Ends
		//Updated code for Req Id : 33634 - Hyperlinks--Starts
		hm.put(23, HYPERLINK+htCommonCol.get("to[Derived].from.name")+HYPERLINK_PIPE+strDerivedId);
		//Updated code for Req Id : 33634 - Hyperlinks--Ends
		hm.put(24, htCommonCol.get("to[Derived].from.attribute[title]"));
		hm.put(25, mp.get("PartFamilyName"));
		//For Cells Creation in each Row		
		for(int j=0;j<hm.size();j++){
			Cell cell = row.createCell(columnCount1++);
			//cell.setCellValue((String)hm.get(j));
			//Added code for Req Id : 33634 - Hyperlinks--Starts
			strCellValue = (String)hm.get(j);
			if(UIUtil.isNotNullAndNotEmpty(strCellValue) && strCellValue.startsWith(HYPERLINK_COMPARE)){
				String[] strSplittedValue = strCellValue.split("\\|",-1); 
				strHyperlinkId = strSplittedValue[(strSplittedValue.length)-1];
				strValue = strSplittedValue[(strSplittedValue.length)-2];
				getHyperlink(context,cell,workbook,strValue,strHyperlinkId,strCurrent);
			}
			else{
				if(!strCurrent.equalsIgnoreCase("Release") && !strCurrent.equalsIgnoreCase("Released")){
					cell.setCellStyle(style);
				}
				cell.setCellValue((String)hm.get(j));
			}
			//Updated code for Req Id : 33634 - Hyperlinks--Ends
		}
	}
} catch (Exception e) {	
	 outLog.print("Exception in  updateWorksheetComponentMaterials: "+e+"\n");
	 outLog.flush();
}
}
	
public String getTypeDisplayName(Context context, String strTypeName) {
String strTypeDisplayName=null;
try {
	String sStringResourceFile="emxCPNStringResource"; 
	String sLanguage = context.getSession().getLanguage();
	String strTablesCompMaterialsChangeAction= i18nNow.getI18nString("emxCPN.FamilyCareReport.Worksheet.Column.ChangeAction",sStringResourceFile, sLanguage);
	String strConsumerUnitPartDisplayName = i18nNow.getI18nString("emxFramework.Type.pgConsumerUnitPart", "emxFrameworkStringResource", context.getSession().getLanguage());
	String strCustomerUnitPartDisplayName = i18nNow.getI18nString("emxFramework.Type.pgCustomerUnitPart", "emxFrameworkStringResource", context.getSession().getLanguage());
	String strInnerPackUnitPartDisplayName = i18nNow.getI18nString("emxFramework.Type.pgInnerPackUnitPart", "emxFrameworkStringResource", context.getSession().getLanguage());
	String strMasterPackagingMaterialPartDisplayName = i18nNow.getI18nString("emxFramework.Type.type_pgMasterPackagingMaterialPart", "emxFrameworkStringResource", context.getSession().getLanguage());
	String strMasterPackagingAssemblyPartDisplayName = i18nNow.getI18nString("emxFramework.Type.type_pgMasterPackagingAssemblyPart", "emxFrameworkStringResource", context.getSession().getLanguage());
	String strTransportUnitPartDisplayName = i18nNow.getI18nString("emxFramework.Type.pgTransportUnitPart", "emxFrameworkStringResource", context.getSession().getLanguage());
	String strQualitySpecificationDisplayName = i18nNow.getI18nString("emxFramework.Type.pgQualitySpecification", "emxFrameworkStringResource", context.getSession().getLanguage());
	String strStackingPatternDisplayName = i18nNow.getI18nString("emxFramework.Type.pgStackingPattern", "emxFrameworkStringResource", context.getSession().getLanguage());
	String strStandardOperatingProcedureDisplayName = i18nNow.getI18nString("emxFramework.Type.pgStandardOperatingProcedure", "emxFrameworkStringResource", context.getSession().getLanguage());
	String strIllustrationDisplayName = i18nNow.getI18nString("emxFramework.Type.pgIllustration", "emxFrameworkStringResource", context.getSession().getLanguage());
	String strPackingInstructionsDisplayName = i18nNow.getI18nString("emxFramework.Type.pgPackingInstructions", "emxFrameworkStringResource", context.getSession().getLanguage());
	String strAncillaryPackagingMaterialPartDisplayName = i18nNow.getI18nString("emxFramework.Type.pgAncillaryPackagingMaterialPart", "emxFrameworkStringResource", context.getSession().getLanguage());
	String strPromotionalItemPartDisplayName = i18nNow.getI18nString("emxFramework.Type.pgPromotionalItemPart", "emxFrameworkStringResource", context.getSession().getLanguage());
	String strMasterConsumerUnitPartDisplayName = i18nNow.getI18nString("emxFramework.Type.pgMasterConsumerUnitPart", "emxFrameworkStringResource", context.getSession().getLanguage());
	String strMasterCustomerUnitPartDisplayName = i18nNow.getI18nString("emxFramework.Type.pgMasterCustomerUnitPart", "emxFrameworkStringResource", context.getSession().getLanguage());
	String strMasterInnerPackUnitPartDisplayName = i18nNow.getI18nString("emxFramework.Type.pgMasterInnerPackUnitPart", "emxFrameworkStringResource", context.getSession().getLanguage());
	String strAuthorizedTemporarySpecificationDisplayName = i18nNow.getI18nString("emxFramework.Type.pgAuthorizedTemporarySpecification", "emxFrameworkStringResource", context.getSession().getLanguage());
	String strOnlinePrintingPartDisplayName = i18nNow.getI18nString("emxFramework.Type.pgOnlinePrintingPart", "emxFrameworkStringResource", context.getSession().getLanguage());
	String strArtworkDisplayName = i18nNow.getI18nString("emxFramework.Type.pgArtwork", "emxFrameworkStringResource", context.getSession().getLanguage());
	String strFabricatedPartDisplayName = i18nNow.getI18nString("emxFramework.Type.pgFabricatedPart", "emxFrameworkStringResource", context.getSession().getLanguage());
	//Updated code for defect id 34908 displayed type as Test Method Specification Starts
	String strTestMethodDisplayName = EnoviaResourceBundle.getProperty(context, "emxFrameworkStringResource", context.getLocale(),"emxFramework.Type.Test_Method_Specification");
	String strTestMethodSpecificationDisplayName = EnoviaResourceBundle.getProperty(context, "emxFrameworkStringResource", context.getLocale(),"emxFramework.Type.Test_Method_Specification");
	//Updated code for defect id 34908 displayed type as Test Method Specification Ends
	String strFinishedProductPartDisplayName = i18nNow.getI18nString("emxFramework.Type.Finished_Product_Part", "emxFrameworkStringResource", context.getSession().getLanguage());
	String strPackagingAssemblyPartDisplayName = i18nNow.getI18nString("emxFramework.Type.type_PackagingAssemblyPart", "emxFrameworkStringResource", context.getSession().getLanguage());
	String strPackagingMaterialPartDisplayName = i18nNow.getI18nString("emxFramework.Type.Packaging_Material_Part", "emxFrameworkStringResource", context.getSession().getLanguage());
	String strSupplierInformationSheetDisplayName = i18nNow.getI18nString("emxFramework.Type.pgSupplierInformationSheet", "emxFrameworkStringResource", context.getSession().getLanguage());
	String strRawMaterialDisplayName = i18nNow.getI18nString("emxFramework.Type.pgRawMaterial", "emxFrameworkStringResource", context.getSession().getLanguage());
	String strMasterRawMaterialDisplayName = i18nNow.getI18nString("emxFramework.Type.pgMasterRawMaterial", "emxFrameworkStringResource", context.getSession().getLanguage());
	String strMasterPackingMaterialDisplayName = i18nNow.getI18nString("emxFramework.Type.pgMasterPackingMaterial", "emxFrameworkStringResource", context.getSession().getLanguage());
	String strFinishedProductDisplayName = i18nNow.getI18nString("emxFramework.Type.pgFinishedProduct", "emxFrameworkStringResource", context.getSession().getLanguage());
	String strMasterFinishedProductDisplayName = i18nNow.getI18nString("emxFramework.Type.pgMasterFinishedProduct", "emxFrameworkStringResource", context.getSession().getLanguage());
	String strPackingSubAssemblyDisplayName = i18nNow.getI18nString("emxFramework.Type.pgPackingSubassembly", "emxFrameworkStringResource", context.getSession().getLanguage());
	String strBaseFormulaDisplayName = i18nNow.getI18nString("emxFramework.Type.pgBaseFormula", "emxFrameworkStringResource", context.getSession().getLanguage());
	String strConsumerDesignBasisDisplayName = i18nNow.getI18nString("emxFramework.Type.pgConsumerDesignBasis", "emxFrameworkStringResource", context.getSession().getLanguage());
	String strApprovedSupplierListDisplayName = i18nNow.getI18nString("emxFramework.Type.pgApprovedSupplierList", "emxFrameworkStringResource", context.getSession().getLanguage());
	String strFormulatedProductDisplayName = i18nNow.getI18nString("emxFramework.Type.pgFormulatedProduct", "emxFrameworkStringResource", context.getSession().getLanguage());
	String strProcessStandardDisplayName = i18nNow.getI18nString("emxFramework.Type.pgProcessStandard", "emxFrameworkStringResource", context.getSession().getLanguage());
	String strProductPartDisplayName = i18nNow.getI18nString("emxFramework.Type.type_ProductPart", "emxFrameworkStringResource", context.getSession().getLanguage());
	String strRawMaterialPartDisplayName = i18nNow.getI18nString("emxFramework.Type.type_RawMaterialPart", "emxFrameworkStringResource", context.getSession().getLanguage());
	String strFormulationPartDisplayName = i18nNow.getI18nString("emxFramework.Type.type_FormulationPart ", "emxFrameworkStringResource", context.getSession().getLanguage());
	String strProcessTechnicalSpecificationDisplayName = i18nNow.getI18nString("emxFramework.Type.type_ProcessTechnicalSpecification", "emxFrameworkStringResource", context.getSession().getLanguage());
	String strCopyGraphicsSpecificationDisplayName = i18nNow.getI18nString("emxFramework.Type.type_CopyandGraphicsSpecification", "emxFrameworkStringResource", context.getSession().getLanguage());
	String strPackingProcessSpecificationDisplayName = i18nNow.getI18nString("emxFramework.Type.type_PackingProcessSpecification", "emxFrameworkStringResource", context.getSession().getLanguage());
	String strPalletInformationSpecificationDisplayName = i18nNow.getI18nString("emxFramework.Type.type_PalletInformationSpecification", "emxFrameworkStringResource", context.getSession().getLanguage());
	String strTestMethodsDisplayName = i18nNow.getI18nString("emxFramework.Type.type_TestMethod", "emxFrameworkStringResource", context.getSession().getLanguage());
	String strMasterProductPartDisplayName = i18nNow.getI18nString("emxFramework.Type.pgMasterProductPart", "emxFrameworkStringResource", context.getSession().getLanguage());
	String strDeviceProductPartDisplayName = i18nNow.getI18nString("emxFramework.Type.pgDeviceProductPart", "emxFrameworkStringResource", context.getSession().getLanguage());
	String strAssembledProductPartDisplayName = i18nNow.getI18nString("emxFramework.Type.pgAssembledProductPart", "emxFrameworkStringResource", context.getSession().getLanguage());
	String strMasterRawMaterialPartDisplayName = i18nNow.getI18nString("emxFramework.Type.pgMasterRawMaterialPart", "emxFrameworkStringResource", context.getSession().getLanguage());
	String strAuthConfigurationStandardDisplayName = i18nNow.getI18nString("emxFramework.Type.pgAuthorizedConfigurationStandard", "emxFrameworkStringResource", context.getSession().getLanguage());
	String strpgAncillaryRawMaterialPartDisplayName = i18nNow.getI18nString("emxFramework.Type.pgAncillaryRawMaterialPart", "emxFrameworkStringResource", context.getSession().getLanguage());
	String strMakingInstructionsDisplayName = i18nNow.getI18nString("emxFramework.Type.pgMakingInstructions", "emxFrameworkStringResource", context.getSession().getLanguage());
	//Added code for Defect Id - 29904 : Value in IAPS family care report Attribute sheet doesn't match the value in UI-Starts
	String strFormulaTechnicalSpecificationDisplayName = i18nNow.getI18nString("emxFramework.Type.FormulaTechnicalSpecification", "emxFrameworkStringResource", context.getSession().getLanguage());
	//Added code for Defect Id - 29904 : Value in IAPS family care report Attribute sheet doesn't match the value in UI-Ends
	String strDSOAffectedFPPListdisplayName = i18nNow.getI18nString("emxFramework.Type.DSOAffectedFPPList", "emxFrameworkStringResource", context.getSession().getLanguage());
	//Added code for defect id 39197 IPP is showing as  backend type in type column Starts
	String strIntermediateProductDisplayName = EnoviaResourceBundle.getProperty(context, "emxFrameworkStringResource", context.getLocale(),"emxFramework.Type.pgIntermediateProductPart");
	String strpgIntermediateProductPart = PropertyUtil.getSchemaProperty(context,"type_pgIntermediateProductPart"); 
	//Added code for defect id 39197 IPP is showing as  backend type in type column Ends
	//Added the code for 2018x.6 Defect 46604 - starts
	String strpgPackagingMaterial = EnoviaResourceBundle.getProperty(context, "emxFrameworkStringResource", context.getLocale(),"emxFramework.Type.pgPackingMaterial");
	//Added the code for 2018x.6 Defect 46604 - Ends
	
	// Added by DSM Reports (Sogeti) for 22x.03 (May CW 2023) Defect 53204 - Start
	String strCompetitiveProductPartDisplayName = EnoviaResourceBundle.getProperty(context, "emxFrameworkStringResource", context.getLocale(),"emxFramework.Type.pgCompetitiveProductPart");
	String strpgCompetitiveProductPart = PropertyUtil.getSchemaProperty(context,"type_pgCompetitiveProductPart");
	// Added by DSM Reports (Sogeti) for 22x.03 (May CW 2023) Defect 53204 - End
	
	if(strTypeName.equalsIgnoreCase("pgConsumerUnitPart")){
		strTypeDisplayName=strConsumerUnitPartDisplayName;
	}
	else if(strTypeName.equalsIgnoreCase("pgCustomerUnitPart")){
		strTypeDisplayName=strCustomerUnitPartDisplayName;
	}
	else if(strTypeName.equalsIgnoreCase("pgInnerPackUnitPart")){
		strTypeDisplayName=strInnerPackUnitPartDisplayName;
	}
	else if(strTypeName.equalsIgnoreCase("pgMasterPackagingMaterialPart")){
		strTypeDisplayName=strMasterPackagingMaterialPartDisplayName;
	}
	else if(strTypeName.equalsIgnoreCase("pgMasterPackagingAssemblyPart")){
		strTypeDisplayName=strMasterPackagingAssemblyPartDisplayName;
	}
	else if(strTypeName.equalsIgnoreCase("pgTransportUnitPart")){
		strTypeDisplayName=strTransportUnitPartDisplayName;
	}
	else if(strTypeName.equalsIgnoreCase("pgQualitySpecification")){
		strTypeDisplayName=strQualitySpecificationDisplayName;
	}
	else if(strTypeName.equalsIgnoreCase("pgStackingPattern")){
		strTypeDisplayName=strStackingPatternDisplayName;
	}
	else if(strTypeName.equalsIgnoreCase("pgStandardOperatingProcedure")){
		strTypeDisplayName=strStandardOperatingProcedureDisplayName;
	}
	else if(strTypeName.equalsIgnoreCase("pgIllustration")){
		strTypeDisplayName=strIllustrationDisplayName;
	}
	else if(strTypeName.equalsIgnoreCase("pgPackingInstructions")){
		strTypeDisplayName=strPackingInstructionsDisplayName;
	}
	else if(strTypeName.equalsIgnoreCase("pgAncillaryPackagingMaterialPart")){
		strTypeDisplayName=strAncillaryPackagingMaterialPartDisplayName;
	}
	else if(strTypeName.equalsIgnoreCase("pgPromotionalItemPart")){
		strTypeDisplayName=strPromotionalItemPartDisplayName;
	}
	else if(strTypeName.equalsIgnoreCase("pgMasterConsumerUnitPart")){
		strTypeDisplayName=strMasterConsumerUnitPartDisplayName;
	}
	else if(strTypeName.equalsIgnoreCase("pgMasterCustomerUnitPart")){
		strTypeDisplayName=strMasterCustomerUnitPartDisplayName;
	}
	else if(strTypeName.equalsIgnoreCase("pgMasterInnerPackUnitPart")){
		strTypeDisplayName=strMasterInnerPackUnitPartDisplayName;
	}
	else if(strTypeName.equalsIgnoreCase("pgAuthorizedTemporarySpecification")){
		strTypeDisplayName=strAuthorizedTemporarySpecificationDisplayName;
	}
	else if(strTypeName.equalsIgnoreCase("pgOnlinePrintingPart")){
		strTypeDisplayName=strOnlinePrintingPartDisplayName;
	}
	else if(strTypeName.equalsIgnoreCase("pgArtwork")){
		strTypeDisplayName=strArtworkDisplayName;
	}
	else if(strTypeName.equalsIgnoreCase("pgFabricatedPart")){
		strTypeDisplayName=strFabricatedPartDisplayName;
	}
	else if(strTypeName.equalsIgnoreCase("pgTestMethod")){
		strTypeDisplayName=strTestMethodDisplayName;
	}
	else if(strTypeName.equalsIgnoreCase("Finished Product Part")){
		strTypeDisplayName=strFinishedProductPartDisplayName;
	}
	else if(strTypeName.equalsIgnoreCase("Packaging Assembly Part")){
		strTypeDisplayName=strPackagingAssemblyPartDisplayName;
	}
	else if(strTypeName.equalsIgnoreCase("Packaging Material Part")){
		strTypeDisplayName=strPackagingMaterialPartDisplayName;
	}
	else if(strTypeName.equalsIgnoreCase("pgSupplierInformationSheet")){
		strTypeDisplayName=strSupplierInformationSheetDisplayName;
	}
	else if(strTypeName.equalsIgnoreCase("pgRawMaterial")){
		strTypeDisplayName=strRawMaterialDisplayName;
	}
	else if(strTypeName.equalsIgnoreCase("pgMasterRawMaterial")){
		strTypeDisplayName=strMasterRawMaterialDisplayName;
	}	
	else if(strTypeName.equalsIgnoreCase("pgPackingMaterial")){
		//Modified for 2018x.6 MAYCW Defect 46604 - Starts
		strTypeDisplayName=strpgPackagingMaterial;
		//Modified for 2018x.6 MAYCW Defect 46604 - Ends
	}	
	else if(strTypeName.equalsIgnoreCase("pgMasterPackingMaterial")){
		strTypeDisplayName="Master Packing Material";	
	}
	else if(strTypeName.equalsIgnoreCase("pgFinishedProduct")){
		strTypeDisplayName=strFinishedProductDisplayName;
	}
	else if(strTypeName.equalsIgnoreCase("pgMasterFinishedProduct")){
		strTypeDisplayName=strMasterFinishedProductDisplayName;
	}
	else if(strTypeName.equalsIgnoreCase("pgPackingSubassembly")){
		strTypeDisplayName=strPackingSubAssemblyDisplayName;
	}
	else if(strTypeName.equalsIgnoreCase("pgBaseFormula")){
		strTypeDisplayName=strBaseFormulaDisplayName;
	}
	else if(strTypeName.equalsIgnoreCase("pgConsumerDesignBasis")){
		strTypeDisplayName=strConsumerDesignBasisDisplayName;
	}	
	else if(strTypeName.equalsIgnoreCase("pgApprovedSupplierList")){
		strTypeDisplayName=strApprovedSupplierListDisplayName;
	}	
	else if(strTypeName.equalsIgnoreCase("pgFormulatedProduct")){
		strTypeDisplayName=strFormulatedProductDisplayName;
	}	
	else if(strTypeName.equalsIgnoreCase("pgProcessStandard")){
		strTypeDisplayName=strProcessStandardDisplayName;
	}	
	else if(strTypeName.equalsIgnoreCase("Product Part")){
		strTypeDisplayName=strProductPartDisplayName;
	}			
	else if(strTypeName.equalsIgnoreCase("Raw Material Part")){
		strTypeDisplayName=strRawMaterialPartDisplayName;
	}	
	else if(strTypeName.equalsIgnoreCase("Formulation Part")){
		strTypeDisplayName=strFormulationPartDisplayName;
	}	
	else if(strTypeName.equalsIgnoreCase("Process Technical Specification")){
		strTypeDisplayName=strProcessTechnicalSpecificationDisplayName;
	}	
	else if(strTypeName.equalsIgnoreCase("Copy and Graphics Specification")){
		strTypeDisplayName=strCopyGraphicsSpecificationDisplayName;
	}			
	else if(strTypeName.equalsIgnoreCase("Packing Process Specification")){
		strTypeDisplayName=strPackingProcessSpecificationDisplayName;
	}	
	else if(strTypeName.equalsIgnoreCase("Pallet Information Specification")){
		strTypeDisplayName=strPalletInformationSpecificationDisplayName;
	}
	//Added code for defect id 34908 Starts
	else if(pgV3Constants.TEST_METHOD_SPECIFICATION.equalsIgnoreCase(strTypeName)){
		strTypeDisplayName=strTestMethodDisplayName;
	}
	//Added code for defect id 34908 Ends
	else if(strTypeName.equalsIgnoreCase("pgMasterProductPart")){
		strTypeDisplayName=strMasterProductPartDisplayName;
	}		
	else if(strTypeName.equalsIgnoreCase("pgDeviceProductPart")){
		strTypeDisplayName=strDeviceProductPartDisplayName;
	}			
	else if(strTypeName.equalsIgnoreCase("pgAssembledProductPart")){
		strTypeDisplayName= "Assembled Product Part";
	}			
	else if(strTypeName.equalsIgnoreCase("pgMasterRawMaterialPart")){
		strTypeDisplayName=strMasterRawMaterialPartDisplayName;
	}		
	else if(strTypeName.equalsIgnoreCase("pgAuthorizedConfigurationStandard")){
		strTypeDisplayName=strAuthConfigurationStandardDisplayName;
	}
	else if(strTypeName.equalsIgnoreCase("Formula Technical Specification")){
		strTypeDisplayName=strFormulaTechnicalSpecificationDisplayName;
	}
	else if(strTypeName.equalsIgnoreCase("pgAncillaryRawMaterialPart")){
		strTypeDisplayName=strpgAncillaryRawMaterialPartDisplayName;
	}	
	else if(strTypeName.equalsIgnoreCase("pgMakingInstructions")){
		strTypeDisplayName=strMakingInstructionsDisplayName;
	}
	else if(strTypeName.equalsIgnoreCase("pgPhase")){
		strTypeDisplayName="Phase";
	}
	else if(strTypeName.equalsIgnoreCase("pgDSOAffectedFPPList")){
		strTypeDisplayName=strDSOAffectedFPPListdisplayName;
	}
	//Added code for defect id 39197 IPP is showing as  backend type in type column Starts
	else if(strpgIntermediateProductPart.equalsIgnoreCase(strTypeName)) {
		strTypeDisplayName=strIntermediateProductDisplayName;
	}
	//Added code for defect id 39197 IPP is showing as  backend type in type column Ends
	// Added by DSM Reports (Sogeti) for 22x.03 (May CW 2023) Defect 53204 - Start
	else if(strpgCompetitiveProductPart.equalsIgnoreCase(strTypeName)) {
		strTypeDisplayName=strCompetitiveProductPartDisplayName;
	}
	// Added by DSM Reports (Sogeti) for 22x.03 (May CW 2023) Defect 53204 - End
	else
	{
		strTypeDisplayName=strTypeName;
	}
} catch (Exception e) {
	
	 outLog.print("Exception in  getTypeDisplayName: "+e+"\n");
	 outLog.flush();
}
	return strTypeDisplayName;
}

	// Method for PC
private void updateWorksheetPerformanceCharacteristics(Context context, XSSFWorkbook workbook,XSSFRow rowHeader,XSSFCellStyle cellStyle, MapList mlPerformanceCharacteristicsAll,XSSFSheet sheetTablesPerformance,boolean bHasSupplierAccess, String strHyperlink, String strUserName, XSSFCellStyle styleGlobal) {
	//Added the code for Defect 49698 - Spec Reader Access Issue - Starts
	boolean hasAccess = false;
	boolean isContextPushed = false;
	//Added the code for Defect 49698 - Spec Reader Access Issue - Ends
	try {
	
	//Added code for 2018x.6 Requirement id 36700 Ability to generate Part and Spec report with without hyperlink Starts
	String strHyperlinkLimit = EnoviaResourceBundle.getProperty(context, EMXCPNSTRINGRESOURCE, context.getLocale(),"emxCPN.PartAndSpecReport.HyperlinkLimit");
	int iHyperLinkLimit = Integer.parseInt(strHyperlinkLimit);
	int iRowCountAll=0;
	//Added code for 2018x.6 Requirement id 36700 Ability to generate Part and Spec report with without hyperlink Ends

	String sStringResourceFile="emxCPNStringResource"; 
	String sLanguage = context.getSession().getLanguage();
	String strPerformanceCharacteristicChangeAction=   i18nNow.getI18nString("emxCPN.FamilyCareReport.Worksheet.Column.ChangeAction",sStringResourceFile, sLanguage);
	String strPerformanceCharacteristicReasonForChange=i18nNow.getI18nString("emxCPN.FamilyCareReport.Worksheet.Column.ChangeActionReasonForChange",sStringResourceFile, sLanguage);
	String strPerformanceCharacteristicNameOrNumber=i18nNow.getI18nString("emxCPN.FamilyCareReport.Worksheet.Column.NameOrNumber",sStringResourceFile, sLanguage);
	String strPerformanceCharacteristicTitle=	i18nNow.getI18nString("emxCPN.FamilyCareReport.Worksheet.Column.Title",sStringResourceFile, sLanguage);
	String strPerformanceCharacteristicType=i18nNow.getI18nString("emxCPN.FamilyCareReport.Worksheet.Column.Type",sStringResourceFile, sLanguage);
	//Code for requirement to addition of revision and state on all tabs except attribute - Starts
	String strPerformanceCharacteristicRevision	= i18nNow.getI18nString("emxCPN.FamilyCareReport.Worksheet.Column.Revision",sStringResourceFile, sLanguage);
	String strPerformanceCharacteristicState	= i18nNow.getI18nString("emxCPN.FamilyCareReport.Worksheet.Column.State",sStringResourceFile, sLanguage);
	//Code for requirement to addition of revision and state on all tabs except attribute - Ends
	String strPerformanceCharacteristicNo=i18nNow.getI18nString("emxCPN.FamilyCareReport.Worksheet.PerformanceCharacteristicsColumn.No",sStringResourceFile, sLanguage);
	String strPerformanceCharacteristicPath=i18nNow.getI18nString("emxCPN.FamilyCareReport.Worksheet.PerformanceCharacteristicsColumn.Path",sStringResourceFile, sLanguage);
	String strPerformanceCharacteristicChg= i18nNow.getI18nString("emxCPN.FamilyCareReport.Worksheet.PerformanceCharacteristicsColumn.Chg",sStringResourceFile, sLanguage);
	String strPerformanceCharacteristicCharacteristics=i18nNow.getI18nString("emxCPN.FamilyCareReport.Worksheet.PerformanceCharacteristicsColumn.Characteristic",sStringResourceFile, sLanguage);
	String strPerformanceCharacteristicCharSpecifics=i18nNow.getI18nString("emxCPN.FamilyCareReport.Worksheet.PerformanceCharacteristicsColumn.CharacteristicSpecifics",sStringResourceFile, sLanguage);
	String strPerformanceCharacteristicTestMethodName=i18nNow.getI18nString("emxCPN.FamilyCareReport.Worksheet.PerformanceCharacteristicsColumn.TestMethodName",sStringResourceFile, sLanguage);
	String strPerformanceCharacteristicTestMethodLogic=i18nNow.getI18nString("emxCPN.FamilyCareReport.Worksheet.PerformanceCharacteristicsColumn.TestMethodLogic",sStringResourceFile, sLanguage);
	String strPerformanceCharacteristicTestMethodOrigin=i18nNow.getI18nString("emxCPN.FamilyCareReport.Worksheet.PerformanceCharacteristicsColumn.TestMethodOrigin",sStringResourceFile, sLanguage);
	String strPerformanceCharacteristicOtherTestMethodNumber=i18nNow.getI18nString("emxCPN.FamilyCareReport.Worksheet.PerformanceCharacteristicsColumn.OtherTestMethodNumber",sStringResourceFile, sLanguage);
	String strPerformanceCharacteristicTestMethodSpecifics=i18nNow.getI18nString("emxCPN.FamilyCareReport.Worksheet.PerformanceCharacteristicsColumn.TestMethodSpecifics",sStringResourceFile, sLanguage);
	String strPerformanceCharacteristicTMRDName=i18nNow.getI18nString("emxCPN.FamilyCareReport.Worksheet.PerformanceCharacteristicsColumn.TestMethodReferenceDocumentName",sStringResourceFile, sLanguage);
	String strPerformanceCharacteristicSampling=i18nNow.getI18nString("emxCPN.FamilyCareReport.Worksheet.PerformanceCharacteristicsColumn.Sampling",sStringResourceFile, sLanguage);
	String strPerformanceCharacteristicSubgroup=i18nNow.getI18nString("emxCPN.FamilyCareReport.Worksheet.PerformanceCharacteristicsColumn.Subgroup",sStringResourceFile, sLanguage);
	String strPerformanceCharacteristicPlantTestingLevel=i18nNow.getI18nString("emxCPN.FamilyCareReport.emxCPN.FamilyCareReport.Worksheet.PerformanceCharacteristicsColumn.PlantTestingLevel",sStringResourceFile, sLanguage);
	String strPerformanceCharacteristicPlantTestingRetesting=i18nNow.getI18nString("emxCPN.FamilyCareReport.Worksheet.PerformanceCharacteristicsColumn.PlantTestingRetesting",sStringResourceFile, sLanguage);
	String strPerformanceCharacteristicRetestingUOM=i18nNow.getI18nString("emxCPN.FamilyCareReport.Worksheet.PerformanceCharacteristicsColumn.RetestingUnitofMeasure",sStringResourceFile, sLanguage);
	String strPerformanceCharacteristicLowerSpecificationLimit=i18nNow.getI18nString("emxCPN.FamilyCareReport.Worksheet.PerformanceCharacteristicsColumn.LowerSpecificationLimit",sStringResourceFile, sLanguage);
	String strPerformanceCharacteristicLowerTarget=i18nNow.getI18nString("emxCPN.FamilyCareReport.Worksheet.PerformanceCharacteristicsColumn.LowerTarget",sStringResourceFile, sLanguage);
	String strPerformanceCharacteristicTarget=i18nNow.getI18nString("emxCPN.FamilyCareReport.Worksheet.PerformanceCharacteristicsColumn.Target",sStringResourceFile, sLanguage);
	String strPerformanceCharacteristicUpperTarget=i18nNow.getI18nString("emxCPN.FamilyCareReport.Worksheet.PerformanceCharacteristicsColumn.UpperTarget",sStringResourceFile, sLanguage);
	String strPerformanceCharacteristicUpperSpecLimit=i18nNow.getI18nString("emxCPN.FamilyCareReport.Worksheet.PerformanceCharacteristicsColumn.UpperSpecificationLimit",sStringResourceFile, sLanguage);
	String strPerformanceCharacteristicUnitofMeasure=i18nNow.getI18nString("emxCPN.FamilyCareReport.Worksheet.PerformanceCharacteristicsColumn.UnitofMeasure",sStringResourceFile, sLanguage);
	String strPerformanceCharacteristicReportToNearest=i18nNow.getI18nString("emxCPN.FamilyCareReport.Worksheet.PerformanceCharacteristicsColumn.ReportToNearest",sStringResourceFile, sLanguage);
	String strPerformanceCharacteristicReleaseCriteria=i18nNow.getI18nString("emxCPN.FamilyCareReport.Worksheet.PerformanceCharacteristicsColumn.ReleaseCriteria",sStringResourceFile, sLanguage);
	String strPerformanceCharacteristicActionRequired=i18nNow.getI18nString("emxCPN.FamilyCareReport.Worksheet.PerformanceCharacteristicsColumn.ActionRequired",sStringResourceFile, sLanguage);
	String strPerformanceCharacteristicCriticalityFactor=i18nNow.getI18nString("emxCPN.FamilyCareReport.Worksheet.PerformanceCharacteristicsColumn.CriticalityFactor",sStringResourceFile, sLanguage);
	String strPerformanceCharacteristicBasis=i18nNow.getI18nString("emxCPN.FamilyCareReport.Worksheet.PerformanceCharacteristicsColumn.Basis",sStringResourceFile, sLanguage);
	String strPerformanceCharacteristicTestGroup=i18nNow.getI18nString("emxCPN.FamilyCareReport.Worksheet.PerformanceCharacteristicsColumn.TestGroup",sStringResourceFile, sLanguage);
	String strPerformanceCharacteristicApplication=i18nNow.getI18nString("emxCPN.FamilyCareReport.Worksheet.PerformanceCharacteristicsColumn.Application",sStringResourceFile, sLanguage);
	String strPerformanceCharacteristicReportType=i18nNow.getI18nString("emxCPN.FamilyCareReport.Worksheet.PerformanceCharacteristicsColumn.ReportType",sStringResourceFile, sLanguage);
	String strPerformanceCharacteristicDerivedFromName=i18nNow.getI18nString("emxCPN.FamilyCareReport.Worksheet.PerformanceCharacteristicsColumn.DerivedFromName",sStringResourceFile, sLanguage);
	String strPerformanceCharacteristicDerivedFromTitle=i18nNow.getI18nString("emxCPN.FamilyCareReport.Worksheet.PerformanceCharacteristicsColumn.DerivedFromTitle",sStringResourceFile, sLanguage);
	//used correct mapping for Part Family Name from property entry: Starts
	String strPerformanceCharacteristicPartFamilyName=i18nNow.getI18nString("emxCPN.FamilyCareReport.Worksheet.PerformanceCharacteristicsColumn.PartFamilyName",sStringResourceFile, sLanguage);
	//Start Modified for 22x Changes for auto name of Part Library & Faimly
	String strPerformanceCharacteristicPartFamilyTitle=i18nNow.getI18nString("emxCPN.FamilyCareReport.Worksheet.PerformanceCharacteristicsColumn.PartFamilyTitle",sStringResourceFile, sLanguage);
	//Start Modified for 22x Changes for auto name of Part Library & Faimly
	//used correct mapping for Part Family Name from property entry: Ends
	
	//Added For DSM Report 2018x1.1 Scope : 8 Report shall include Upper and Lower Routine Release Limits in the Performance Characteristic worksheet. (Requirement# 28350) :Starts
	String strPerformanceCharacteristicUpperRoutineReleaseLimit=i18nNow.getI18nString("emxCPN.FamilyCareReport.Worksheet.PerformanceCharacteristicsColumn.UpperRoutineReleaseLimit",sStringResourceFile, sLanguage);
	String strPerformanceCharacteristicLowerRoutineReleaseLimit=i18nNow.getI18nString("emxCPN.FamilyCareReport.Worksheet.PerformanceCharacteristicsColumn.LowerRoutineReleaseLimit",sStringResourceFile, sLanguage);
	//Added For DSM Report 2018x1.1 Scope : 8 Report shall include Upper and Lower Routine Release Limits in the Performance Characteristic worksheet. (Requirement# 28350) :Ends
	
	String strIndividualTMName=null;
	//CreationHelper createHelper = workbook.getCreationHelper();
	//Header Logic Begin----------------------------------------
	//1 Change Action
	Cell cellChangeAction = rowHeader.createCell(0);
	cellChangeAction.setCellStyle(cellStyle);
	cellChangeAction.setCellValue(strPerformanceCharacteristicChangeAction);
		
	//2 Change Action 'Reason for Change'
	Cell cellChangeActionReasonForChange = rowHeader.createCell(1);
	cellChangeActionReasonForChange.setCellStyle(cellStyle);
	cellChangeActionReasonForChange.setCellValue(strPerformanceCharacteristicReasonForChange);
		
	//3 Name/Number
	Cell cellNameOrNumber = rowHeader.createCell(2);
	cellNameOrNumber.setCellStyle(cellStyle);
	cellNameOrNumber.setCellValue(strPerformanceCharacteristicNameOrNumber);
		
	//4 Title
	Cell cellTitle = rowHeader.createCell(3);
	cellTitle.setCellStyle(cellStyle);
	cellTitle.setCellValue(strPerformanceCharacteristicTitle);
		
	//5 Type
	Cell cellType = rowHeader.createCell(4);
	cellType.setCellStyle(cellStyle);
	cellType.setCellValue(strPerformanceCharacteristicType);
		
	//6 Revision
	//Code for requirement to addition of revision and state on all tabs except attribute -- Starts
	Cell cellRevision = rowHeader.createCell(5);
	cellRevision.setCellStyle(cellStyle);
	cellRevision.setCellValue(strPerformanceCharacteristicRevision);
	
	//7 State
	Cell cellState = rowHeader.createCell(6);
	cellState.setCellStyle(cellStyle);
	cellState.setCellValue(strPerformanceCharacteristicState);
	//Code for requirement to addition of revision and state on all tabs except attribute -- Ends
	
	//8 Characteristic No
	Cell cellCharacteristicNo = rowHeader.createCell(7);
	cellCharacteristicNo.setCellStyle(cellStyle);
	cellCharacteristicNo.setCellValue(strPerformanceCharacteristicNo);
		
	//9 Path
	Cell cellCharacteristicPath = rowHeader.createCell(8);
	cellCharacteristicPath.setCellStyle(cellStyle);
	cellCharacteristicPath.setCellValue(strPerformanceCharacteristicPath);
		
	//10 Change			
	Cell cellCharacteristicChg = rowHeader.createCell(9);
	cellCharacteristicChg.setCellStyle(cellStyle);
	cellCharacteristicChg.setCellValue(strPerformanceCharacteristicChg);
		
	//11 Characteristic Char
	Cell cellCharacteristicChar = rowHeader.createCell(10);
	cellCharacteristicChar.setCellStyle(cellStyle);
	cellCharacteristicChar.setCellValue(strPerformanceCharacteristicCharacteristics);
		
	//12 Characteristic Char Specifics
	Cell cellCharacteristicCharSpecifics = rowHeader.createCell(11);
	cellCharacteristicCharSpecifics.setCellStyle(cellStyle);
	cellCharacteristicCharSpecifics.setCellValue(strPerformanceCharacteristicCharSpecifics);
		
	//13 Characteristic TM Name
	Cell cellCharacteristicTMName= rowHeader.createCell(12);
	cellCharacteristicTMName.setCellStyle(cellStyle);
	cellCharacteristicTMName.setCellValue(strPerformanceCharacteristicTestMethodName);
		
	//14 TM Logic
	Cell cellCharacteristicTMLogic = rowHeader.createCell(13);
	cellCharacteristicTMLogic.setCellStyle(cellStyle);
	cellCharacteristicTMLogic.setCellValue(strPerformanceCharacteristicTestMethodLogic);	
		
	//15 TM Origin
	Cell cellCharacteristicTMOrigin = rowHeader.createCell(14);
	cellCharacteristicTMOrigin.setCellStyle(cellStyle);
	cellCharacteristicTMOrigin.setCellValue(strPerformanceCharacteristicTestMethodOrigin);	
		
	//16 TM Other Test Method Specification Number
	Cell cellCharacteristicTMNumber = rowHeader.createCell(15);
	cellCharacteristicTMNumber.setCellStyle(cellStyle);
	cellCharacteristicTMNumber.setCellValue(strPerformanceCharacteristicOtherTestMethodNumber);	
		
	//17  Test Method Specification Specifics
	Cell cellCharacteristicTMSpecifics = rowHeader.createCell(16);
	cellCharacteristicTMSpecifics.setCellStyle(cellStyle);
	cellCharacteristicTMSpecifics.setCellValue(strPerformanceCharacteristicTestMethodSpecifics);	
		
	//18 TMRD Name
	Cell cellCharacteristicTMRDName = rowHeader.createCell(17);
	cellCharacteristicTMRDName.setCellStyle(cellStyle);
	cellCharacteristicTMRDName.setCellValue(strPerformanceCharacteristicTMRDName);	
		
	//19 Sampling
	Cell cellCharacteristicSampling = rowHeader.createCell(18);
	cellCharacteristicSampling.setCellStyle(cellStyle);
	cellCharacteristicSampling.setCellValue(strPerformanceCharacteristicSampling);	
		
	//20 Subgroup
	Cell cellCharacteristicSubgroup = rowHeader.createCell(19);
	cellCharacteristicSubgroup.setCellStyle(cellStyle);
	cellCharacteristicSubgroup.setCellValue(strPerformanceCharacteristicSubgroup);	
		
	//21 Plant Testing Level
	Cell cellCharacteristicPlantTestingLevel = rowHeader.createCell(20);
	cellCharacteristicPlantTestingLevel.setCellStyle(cellStyle);
	cellCharacteristicPlantTestingLevel.setCellValue(strPerformanceCharacteristicPlantTestingLevel);	
		
	//22 Plant Testing Retesting
	Cell cellCharacteristicPlantTestingRetest = rowHeader.createCell(21);
	cellCharacteristicPlantTestingRetest.setCellStyle(cellStyle);			
	cellCharacteristicPlantTestingRetest.setCellValue(strPerformanceCharacteristicPlantTestingRetesting);
	
	//23 Retesting UOM
	Cell cellCharacteristicRetestingUOM = rowHeader.createCell(22);
	cellCharacteristicRetestingUOM.setCellStyle(cellStyle);
	cellCharacteristicRetestingUOM.setCellValue(strPerformanceCharacteristicRetestingUOM);
	
	// 24 Lower Specification Limit	
	Cell cellCharacteristicLSL = rowHeader.createCell(23);
	cellCharacteristicLSL.setCellStyle(cellStyle);
	cellCharacteristicLSL.setCellValue(strPerformanceCharacteristicLowerSpecificationLimit);
	
	// 25 Lower outineReleaseLimit
	Cell cellCharacteristicLowerRoutineReleaseLimit = rowHeader.createCell(24);
	cellCharacteristicLowerRoutineReleaseLimit.setCellStyle(cellStyle);
	cellCharacteristicLowerRoutineReleaseLimit.setCellValue(strPerformanceCharacteristicLowerRoutineReleaseLimit);
	// 25 Lower Target
	Cell cellCharacteristicLowerTarget = rowHeader.createCell(25);
	cellCharacteristicLowerTarget.setCellStyle(cellStyle);
	cellCharacteristicLowerTarget.setCellValue(strPerformanceCharacteristicLowerTarget);
		
	// 26  Target
	Cell cellCharacteristicTarget = rowHeader.createCell(26);
	cellCharacteristicTarget.setCellStyle(cellStyle);
	cellCharacteristicTarget.setCellValue(strPerformanceCharacteristicTarget);
		
	// 27 Charcteristic Upper Target
	Cell cellCharacteristicLowerUpperTarget = rowHeader.createCell(27);
	cellCharacteristicLowerUpperTarget.setCellStyle(cellStyle);
	cellCharacteristicLowerUpperTarget.setCellValue(strPerformanceCharacteristicUpperTarget);
	
	Cell cellCharacteristicUpperRoutineReleaseLimit = rowHeader.createCell(28);
	cellCharacteristicUpperRoutineReleaseLimit.setCellStyle(cellStyle);
	cellCharacteristicUpperRoutineReleaseLimit.setCellValue(strPerformanceCharacteristicUpperRoutineReleaseLimit);
	// 28  Upper Spec Limit
	Cell cellCharacteristicUSL = rowHeader.createCell(29);
	cellCharacteristicUSL.setCellStyle(cellStyle);
	cellCharacteristicUSL.setCellValue(strPerformanceCharacteristicUpperSpecLimit);
		
	// 28  Upper Spec Limit
	// 29  UOM
	Cell cellCharacteristicUnitOfMeasure = rowHeader.createCell(30);
	cellCharacteristicUnitOfMeasure.setCellStyle(cellStyle);
	cellCharacteristicUnitOfMeasure.setCellValue(strPerformanceCharacteristicUnitofMeasure);
		
	// 30 Report To Nearest
	Cell cellCharacteristicReportNearest = rowHeader.createCell(31);
	cellCharacteristicReportNearest.setCellStyle(cellStyle);
	cellCharacteristicReportNearest.setCellValue(strPerformanceCharacteristicReportToNearest);
		
	// 31 Report Type
	Cell cellCharacteristicReportType = rowHeader.createCell(32);
	cellCharacteristicReportType.setCellStyle(cellStyle);
	cellCharacteristicReportType.setCellValue(strPerformanceCharacteristicReportType);  
		
	// 32 Release Criteria
	Cell cellCharacteristicReleaseCriteria = rowHeader.createCell(33);
	cellCharacteristicReleaseCriteria.setCellStyle(cellStyle);
	cellCharacteristicReleaseCriteria.setCellValue(strPerformanceCharacteristicReleaseCriteria);
		
	// 33 Action Required
	Cell cellCharacteristicActionRequired = rowHeader.createCell(34);
	cellCharacteristicActionRequired.setCellStyle(cellStyle);
	cellCharacteristicActionRequired.setCellValue(strPerformanceCharacteristicActionRequired);
		
	// 34 Criticality Factor
	Cell cellCharacteristicReleaseCriticalityFactor = rowHeader.createCell(35);
	cellCharacteristicReleaseCriticalityFactor.setCellStyle(cellStyle);
	cellCharacteristicReleaseCriticalityFactor.setCellValue(strPerformanceCharacteristicCriticalityFactor);
		
	// 35 Basis
	Cell cellCharacteristicBasis = rowHeader.createCell(36);
	cellCharacteristicBasis.setCellStyle(cellStyle);
	cellCharacteristicBasis.setCellValue(strPerformanceCharacteristicBasis);
		
	// 36 Test Group
	Cell cellCharacteristicTestGroup = rowHeader.createCell(37);
	cellCharacteristicTestGroup.setCellStyle(cellStyle);
	cellCharacteristicTestGroup.setCellValue(strPerformanceCharacteristicTestGroup);
		
	// 37 Application
	Cell cellCharacteristicApplication = rowHeader.createCell(38);
	cellCharacteristicApplication.setCellStyle(cellStyle);
	cellCharacteristicApplication.setCellValue(strPerformanceCharacteristicApplication);
	
	// 38 Derived From Name
	Cell cellCharacteristicDerivedfromName = rowHeader.createCell(39);
	cellCharacteristicDerivedfromName.setCellStyle(cellStyle);
	cellCharacteristicDerivedfromName.setCellValue(strPerformanceCharacteristicDerivedFromName);
	
	// 39 Derived From Title
	Cell cellCharacteristicDerivedFromTitle = rowHeader.createCell(40);
	cellCharacteristicDerivedFromTitle.setCellStyle(cellStyle);
	cellCharacteristicDerivedFromTitle.setCellValue(strPerformanceCharacteristicDerivedFromTitle);
	
	// 40 Part Family
	Cell cellCharacteristicPartFamilyName = rowHeader.createCell(41);
	cellCharacteristicPartFamilyName.setCellStyle(cellStyle);
	//Start Modified for 22x Changes for auto name of Part Library & Faimly
	cellCharacteristicPartFamilyName.setCellValue(strPerformanceCharacteristicPartFamilyTitle);
	//End Modified for 22x Changes for auto name of Part Library & Faimly
	
	//Added For DSM Report 2018x1.1 Scope : 8 Report shall include Upper and Lower Routine Release Limits in the Performance Characteristic worksheet. (Requirement# 28350) :Starts
	// 41 Upper Routine Release Limit
	//Cell cellCharacteristicUpperRoutineReleaseLimit = rowHeader.createCell(40);
	//cellCharacteristicUpperRoutineReleaseLimit.setCellStyle(cellStyle);
	//cellCharacteristicUpperRoutineReleaseLimit.setCellValue(strPerformanceCharacteristicUpperRoutineReleaseLimit);
	//42 Lower Routine Release Limit
	//Cell cellCharacteristicLowerRoutineReleaseLimit = rowHeader.createCell(41);
	//cellCharacteristicLowerRoutineReleaseLimit.setCellStyle(cellStyle);
	//cellCharacteristicLowerRoutineReleaseLimit.setCellValue(strPerformanceCharacteristicLowerRoutineReleaseLimit);
	//Added For DSM Report 2018x1.1 Scope : 8 Report shall include Upper and Lower Routine Release Limits in the Performance Characteristic worksheet. (Requirement# 28350) :Ends
	//Added For DSM Report 2018x1.1 Scope : 5 Report shall sort by sequence number in Performance Characteristics tab:Starts
	//Commented code for defect 42382 starts
	//mlPerformanceCharacteristicsAll.sort("attribute["+ATTRIBUTE_SHAREDTABLECHARACTERISTICSEQUENCE+"]", "ascending","integer");
	//Commented code for defect 42382 ends
	//Added For DSM Report 2018x1.1 Scope : 5 Report shall sort by sequence number in Performance Characteristics tab:Ends
	int rowCount1 = 0;
	int iListSize=mlPerformanceCharacteristicsAll.size();
	String strChangeAction=null;
	String strRelationship=null;
	String strTypeName = null;
	String strCharId = DomainConstants.EMPTY_STRING;
	String strPath = DomainConstants.EMPTY_STRING;
	DomainObject doObj = null;
	for (int i=0;i<iListSize;i++){
		//Added code for 2018x.6 Requirement id 36700 Ability to generate Part and Spec report with without hyperlink Starts
		iRowCountAll = iRowCountAll + 1;
		//Added code for 2018x.6 Requirement id 36700 Ability to generate Part and Spec report with without hyperlink Ends
		XSSFRow row = sheetTablesPerformance.createRow(++rowCount1);
		int columnCount1 = 0;
		Map mpInnerData = (Map)mlPerformanceCharacteristicsAll.get(i);
		HashMap hm= new HashMap<>();
		// CommonColumns Begin		
		Map hmCommonCol = new HashMap<>();
		hmCommonCol= (Map)mpInnerData.get("CommonColumns");
		// CommonColumns End
		String strCurrent = (String)hmCommonCol.get("current");
		String strTypeDisplayName=null;
		strTypeName = (String)hmCommonCol.get("type");
		strTypeDisplayName= getTypeDisplayName(context,strTypeName);
		String strId = (String)hmCommonCol.get("id");
		String strDerivedId = (String)hmCommonCol.get("to[Derived].from.id");
		//Added the code for Defect 49698 - Spec Reader Access Issue - Starts
		if(SPECREADER.equalsIgnoreCase(strOriginatingSource)) {
			hasAccess = accessCheck(context, strUserName, strId);
			if(hasAccess) {
				//Pushing User Agent Context to get the Data if the Spec Reader User have access
				ContextUtil.pushContext(context,PropertyUtil.getSchemaProperty(context,"User Agent"),DomainConstants.EMPTY_STRING,DomainConstants.EMPTY_STRING);
				isContextPushed = true;
				
			}
		}
		
		//Added by DSM Reports (Sogeti) for 2022x.5 (APR CW 2024) Defect 55875 - Start
		String sCAID = (String) hmCommonCol.get(SCAID);
		if( UIUtil.isNotNullAndNotEmpty(sCAID) && !sCAID.contains(HYPERLINK_PIPE)) {
			if(hmCommonCol.get(CAREALIZEDNAME) != null && hmCommonCol.get(CAPROPOSEDNAME) != null) {
				//Added code for Req Id : 33634 - Hyperlinks--Starts
				hm.put(0, HYPERLINK+hmCommonCol.get(CAREALIZEDNAME)+HYPERLINK_PIPE+sCAID);
				//Added code for Req Id : 33634 - Hyperlinks--Ends
			} else if(hmCommonCol.get(CAREALIZEDNAME) != null){
				//Added code for Req Id : 33634 - Hyperlinks--Starts
				hm.put(0, HYPERLINK+hmCommonCol.get(CAREALIZEDNAME)+HYPERLINK_PIPE+sCAID);
				//Added code for Req Id : 33634 - Hyperlinks--Ends
			} else if(hmCommonCol.get(CAPROPOSEDNAME) != null){
				//Added code for Req Id : 33634 - Hyperlinks--Starts
				hm.put(0, HYPERLINK+hmCommonCol.get(CAPROPOSEDNAME)+HYPERLINK_PIPE+sCAID);
				//Updated code for Req Id : 33634 - Hyperlinks--Ends
			} else {
				hm.put(0, DomainConstants.EMPTY_STRING);
			}
		}else {
			hm.put(0,hmCommonCol.get(CAPROPOSEDNAME));
		}
		//Added by DSM Reports (Sogeti) for 2022x.5 (APR CW 2024) Defect 55875 - End
		//Code Upgrade for 2018x Data Model - Ends
		//Added the code for the Defect ID : 25104 - CA Tab is Empty : Ends
		hm.put(1, hmCommonCol.get("attribute[Reason for Change]"));
		//Updated code for Req Id : 33634 - Hyperlinks--Starts
		hm.put(2, HYPERLINK+hmCommonCol.get("name")+HYPERLINK_PIPE+strId);
		//Updated code for Req Id : 33634 - Hyperlinks--Ends
		hm.put(3, hmCommonCol.get("attribute[Title]"));
		hm.put(4, strTypeDisplayName);
		//Code for requirement to addition of revision and state on all tabs except attribute -- Starts
		hm.put(5, hmCommonCol.get("revision"));
		hm.put(6, hmCommonCol.get("current"));
		//Code for requirement to addition of revision and state on all tabs except attribute -- Ends
		//Added For DSM Report 2018x1.1 Scope : 5 Report shall sort by sequence number in Performance Characteristics tab:Starts
		//hm.put(7, mpInnerData.get("Sequence"));
		hm.put(7, mpInnerData.get("attribute[SharedTableCharacteristicSequence]"));
		//Added For DSM Report 2018x1.1 Scope : 5 Report shall sort by sequence number in Performance Characteristics tab:Ends
		strRelationship=(String)mpInnerData.get("relationship");
		strCharId=(String)mpInnerData.get(DomainConstants.SELECT_ID);
		doObj=DomainObject.newInstance(context,strCharId);
		if(strRelationship.equals("Extended Data"))
		{
			strPath=(String)doObj.getInfo(context, "to[Extended Data].from.name");
			// Added by DSM Reports (Sogeti) for 22x.03 (August CW 2023) Defect 53088 - Start
			if(pgV3Constants.TYPE_FORMULATIONPART.equalsIgnoreCase(strTypeName) && strPath.equalsIgnoreCase((String)hmCommonCol.get("name"))) {
                        strPath = pg.getPathName(context, strPath, strId, strCharId, strRelationship);
            }
			// Added by DSM Reports (Sogeti) for 22x.03 (August CW 2023) Defect 53088 - Ends
			hm.put(8,strPath);
		}					
		else if(strRelationship.equals("Shared Characteristic"))
		{
			strPath=(String)doObj.getInfo(context, "to[Shared Characteristic].from.name");
			hm.put(8,strPath);
		}
		
		hm.put(9, mpInnerData.get("attribute[pgChange]"));
		hm.put(10, mpInnerData.get("attribute[pgCharacteristic]"));
		hm.put(11, mpInnerData.get("attribute[pgCharacteristicSpecifics]"));
		hm.put(12, mpInnerData.get("TestMethod"));
		hm.put(13, mpInnerData.get("attribute[pgTMLogic]"));
		hm.put(14, mpInnerData.get("attribute[pgMethodOrigin]"));
		hm.put(15, mpInnerData.get("attribute[pgMethodNumber]"));
		hm.put(16, mpInnerData.get("attribute[pgMethodSpecifics]"));
		hm.put(17, mpInnerData.get("TMRD"));
		hm.put(18, mpInnerData.get("attribute[pgSampling]"));
		hm.put(19, mpInnerData.get("attribute[pgSubGroup]"));	
		hm.put(20, mpInnerData.get("attribute[pgPlantTesting]"));
		hm.put(21, mpInnerData.get("attribute[pgPlantTestingRetesting]"));	
		//Removed the code for Defect 49452 - Parts and Specification Report - Start
		hm.put(22, mpInnerData.get("attribute[pgRetestingUOM]"));
		hm.put(23, mpInnerData.get("attribute[pgLowerSpecificationLimit]"));
		hm.put(24, mpInnerData.get("attribute[pgLowerRoutineReleaseLimit]"));
		//Removed the code for Defect 49452 - Parts and Specification Report - End
		hm.put(25, mpInnerData.get("attribute[pgLowerTarget]"));
		hm.put(26, mpInnerData.get("attribute[pgTarget]"));
		hm.put(27, mpInnerData.get("attribute[pgUpperTarget]"));
		hm.put(28, mpInnerData.get("attribute[pgUpperRoutineReleaseLimit]"));
		hm.put(29, mpInnerData.get("attribute[pgUpperSpecificationLimit]"));					
		hm.put(30, mpInnerData.get("attribute[pgUnitOfMeasure]"));
		hm.put(31, mpInnerData.get("attribute[pgReportToNearest]"));
		hm.put(32, mpInnerData.get("attribute[pgReportType]"));
		hm.put(33, mpInnerData.get("attribute[pgReleaseCriteria]"));
		hm.put(34, mpInnerData.get("attribute[pgActionRequired]"));
		hm.put(35, mpInnerData.get("attribute[pgCriticalityFactor]"));
		hm.put(36, mpInnerData.get("attribute[pgBasis]"));
		hm.put(37, mpInnerData.get("attribute[pgTestGroup]"));
		hm.put(38, mpInnerData.get("attribute[pgApplication]"));
		//if(UIUtil.isNotNullAndNotEmpty(strDerivedId)){
		//Updated code for Req Id : 33634 - Hyperlinks--Starts
		hm.put(39, HYPERLINK+hmCommonCol.get("to[Derived].from.name")+HYPERLINK_PIPE+strDerivedId);
		//Updated code for Req Id : 33634 - Hyperlinks--Ends
		//}else{
			//hm.put(39, hmCommonCol.get("to[Derived].from.name"));
		//}	
		hm.put(40, hmCommonCol.get("to[Derived].from.attribute[Title]"));
		hm.put(41, mpInnerData.get("PartFamilyName"));
		//Added For DSM Report 2018x1.1 Scope : 8 Report shall include Upper and Lower Routine Release Limits in the Performance Characteristic worksheet. (Requirement# 28350) :Starts
		//hm.put(40, mpInnerData.get("attribute[pgUpperRoutineReleaseLimit]"));
		//hm.put(41, mpInnerData.get("attribute[pgLowerRoutineReleaseLimit]"));
		//Added For DSM Report 2018x1.1 Scope : 8 Report shall include Upper and Lower Routine Release Limits in the Performance Characteristic worksheet. (Requirement# 28350) :Ends
		
		//For Cells creation in a Row	
		XSSFCellStyle style = workbook.createCellStyle();
		style = setForeGroundColor(strCurrent, style);
		//Added by DSM Reports (Sogeti) for 2022x.5 (APR CW 2024) Defect 55875 - Start
		XSSFCellStyle style1 = workbook.createCellStyle();
		//Added by DSM Reports (Sogeti) for 2022x.5 (APR CW 2024) Defect 55875 - End
		for(int j=0;j<hm.size();j++){
			String strTempIndividual=DomainConstants.EMPTY_STRING;
			String strTMName=(String)hm.get(j);
			if(UIUtil.isNotNullAndNotEmpty(strTMName) && strTMName.contains("@#@"))
			{
				StringTokenizer st = new StringTokenizer(strTMName,"@#@"); 
				//Modified the code for _2022x_Aug CW Req-47097 - Start
				// Modified by DSM Reports (Sogeti) for 22x.03 (August CW 2023) Defect 54091 - Start
				Cell cell = row.createCell(columnCount1++);
				if (j == 2) {
					style = makeColumnNumeric(workbook, style);
				}
				cell.setCellStyle(style);
				
				// Modified by DSM Reports (Sogeti) for 22x.03 (August CW 2023) Defect 54091 - End
				//Modified the code for _2022x_Aug CW Req-47097 - End
				while (st.hasMoreTokens()) {
					strIndividualTMName=st.nextToken();
					if(strTempIndividual.equals(DomainConstants.EMPTY_STRING))
					{
						strTempIndividual=strIndividualTMName;
					}
					else
					{
						strTempIndividual=strTempIndividual+"\n "+strIndividualTMName;
					}
				}
				cell.setCellValue(strTempIndividual);
			}else{
				//Modified the code for _2022x_Aug CW Req-47097 - Start
				// Modified by DSM Reports (Sogeti) for 22x.03 (August CW 2023) Defect 54091 - Start
				Cell cell = row.createCell(columnCount1++);
				if (j == 2) {
					style = makeColumnNumeric(workbook, style);
				}
				cell.setCellStyle(style);
				
				// Modified by DSM Reports (Sogeti) for 22x.03 (August CW 2023) Defect 54091 - Start
				//Modified the code for _2022x_Aug CW Req-47097 - End
				//Added code for Req Id : 33634 - Hyperlinks--Starts
				 String strCellValue = (String)hm.get(j);
				if(UIUtil.isNotNullAndNotEmpty(strCellValue) && strCellValue.startsWith(HYPERLINK_COMPARE)){
					String[] strSplittedValue = strCellValue.split("\\|", -1);
					String strHyperlinkId = strSplittedValue[(strSplittedValue.length)-1];
					String strValue = strSplittedValue[(strSplittedValue.length)-2];
					//Added code for 2018x.6 Requirement id 36700 Ability to generate Part and Spec report with without hyperlink Starts
					if(pgV3Constants.TRUE.equalsIgnoreCase(strHyperlink) && iRowCountAll < iHyperLinkLimit){
						getHyperlink(context,cell,workbook,strValue,strHyperlinkId,strCurrent);
					
					} else if(UIUtil.isNotNullAndNotEmpty(strValue)){
						cell.setCellValue(strValue);
					}
					//Added code for 2018x.6 Requirement id 36700 Ability to generate Part and Spec report with without hyperlink Ends
				} else {
					cell.setCellValue((String)hm.get(j));
					//Added by DSM Reports (Sogeti) for 2022x.5 (APR CW 2024) Defect 55875 - Start
					if(j == 0) {
						style1.cloneStyleFrom(style);
						style1.setWrapText(true);
						cell.setCellStyle(style1);
					}
					//Added by DSM Reports (Sogeti) for 2022x.5 (APR CW 2024) Defect 55875 - End
				}
				//Added code for Req Id : 33634 - Hyperlinks--Ends
			}
		}
		//Added the code for Defect 49698 - Spec Reader Access Issue - Starts
		if(isContextPushed) {
			ContextUtil.popContext(context);	
		}
		//Added the code for Defect 49698 - Spec Reader Access Issue - Ends
	}
	sheetFormatter(sheetTablesPerformance); // Added by DSM Reports (Sogeti) for 22x.04 (Dec CW 2023) Defect 56156 - START/END
} catch(Exception e){

	 outLog.print("Exception in  updateWorksheetPerformanceCharacteristics: "+e+"\n");
	 outLog.flush();
}
}
// Method for PC
	
// Method for Related Specs Docs --Begin

//we have requirement to handle cognitive complexity 38401
//Need exception for Parameters - It is old code

/**2018x6.1 Sept Defect 42777
 * @param mpInnerData
 * @return
 */
//Modified the access level to be accessible to other methods in differnt class - Starts
public String getRefDocTypeForCSS(Map mpInnerData) {
	//Modified the access level to be accessible to other methods in differnt class - Ends
	String strCSSType = (String) mpInnerData.get(pgV3Constants.SELECT_ATTRIBUTE_PGCSSTYPE);
	if("Reference_File".equalsIgnoreCase(strCSSType))
		return "Reference File";
	else if("QEC_File".equalsIgnoreCase(strCSSType))
		return "Quality Evolution Chart File";
	else if("Design_File".equalsIgnoreCase(strCSSType))
		return "Design File";
	else if("Language_Rendition".equalsIgnoreCase(strCSSType))
		return "Language Rendition";
	else
		return strCSSType;
}

/**
	 * getObjectSelectsTablesWeight- common stringlist for all object selects 
	 * @return
	 */
private StringList getObjectSelectsTablesWeight(){
StringList slObjInfoSelect = new StringList(20);
try{	
	slObjInfoSelect.add("attribute[Reason for Change]");	
	slObjInfoSelect.add(DomainConstants.SELECT_NAME);
	slObjInfoSelect.add(pgV3Constants.SELECT_ATTRIBUTE_TITLE);			
	slObjInfoSelect.add(DomainConstants.SELECT_TYPE);
	slObjInfoSelect.add(pgV3Constants.SELECT_ATTRIBUTE_PGGROSSWEIGHTREAL);
	slObjInfoSelect.add("attribute[pgLegacyWeightFactor]");			
	slObjInfoSelect.add(pgV3Constants.SELECT_ATTRIBUTE_PGGROSSWEIGHTUNITOFMEASURE);
	slObjInfoSelect.add(pgV3Constants.SELECT_ATTRIBUTE_PGNETWEIGHTOFPRODUCTINCONSUMERUNITREAL);
	slObjInfoSelect.add(pgV3Constants.SELECT_ATTRIBUTE_PGNETWEIGHTOFPRODUCTINCONSUMERUNITUOM);
	slObjInfoSelect.add(pgV3Constants.SELECT_ATTRIBUTE_COMMENT);
	slObjInfoSelect.add(pgV3Constants.SELECT_ID);
	slObjInfoSelect.add(pgV3Constants.SELECT_LEVEL);
	slObjInfoSelect.add(pgV3Constants.SELECT_NAME);
	slObjInfoSelect.add("attribute[pgLegacyProductWeight]");
}catch(Exception e){
	e.printStackTrace();
}
return slObjInfoSelect;
}
	
	/**
	 * getRelSelectsTablesWeight- common stringlist for all object selects 
	 * @return
	 */
private StringList getRelSelectsTablesWeight(){
StringList slObjInfoSelect = new StringList(2);
try{		
	slObjInfoSelect.add(pgV3Constants.SELECT_ATTRIBUTE_QUANTITY);
}catch(Exception e){
	e.printStackTrace();
}
return slObjInfoSelect;
}
	
	/**
	 * getObjectSelectsTablesWeightParent- common stringlist for all object selects 
	 * @return
	 */
private StringList getObjectSelectsTablesWeightParent(){
StringList slObjInfoSelect = new StringList(20);
try{
	//Code Upgrade for 2018x Data Model  -- Starts
	slObjInfoSelect.add(DomainConstants.SELECT_ID);
	//Code Upgrade for 2018x Data Model  -- Starts
	slObjInfoSelect.add("attribute[Reason for Change]");	
	slObjInfoSelect.add(pgV3Constants.SELECT_ATTRIBUTE_TITLE);			
	slObjInfoSelect.add(DomainConstants.SELECT_TYPE);
	//Code for requirement to addition of revision and state on all tabs except attribute -- Starts
	slObjInfoSelect.add(DomainConstants.SELECT_REVISION);
	slObjInfoSelect.add(DomainConstants.SELECT_CURRENT);
	//Code for requirement to addition of revision and state on all tabs except attribute -- Ends
	slObjInfoSelect.add(pgV3Constants.SELECT_ATTRIBUTE_QUANTITY);
	slObjInfoSelect.add(pgV3Constants.SELECT_ATTRIBUTE_PGGROSSWEIGHTREAL);
	slObjInfoSelect.add("attribute[pgLegacyWeightFactor]");			
	slObjInfoSelect.add(pgV3Constants.SELECT_ATTRIBUTE_PGGROSSWEIGHTUNITOFMEASURE);
	slObjInfoSelect.add(pgV3Constants.SELECT_ATTRIBUTE_PGNETWEIGHTOFPRODUCTINCONSUMERUNITREAL);
	slObjInfoSelect.add(pgV3Constants.SELECT_ATTRIBUTE_PGNETWEIGHTOFPRODUCTINCONSUMERUNITUOM);
	slObjInfoSelect.add(pgV3Constants.SELECT_ATTRIBUTE_COMMENT);
	slObjInfoSelect.add(pgV3Constants.SELECT_ID);
	slObjInfoSelect.add(pgV3Constants.SELECT_LEVEL);
	slObjInfoSelect.add("attribute[pgLegacyProductWeight]");
}catch(Exception e){
	e.printStackTrace();
}
return slObjInfoSelect;
}

	/**
	 * getObjectSelectsBOM- common stringlist for all object selects 
	 * @return
	 */	
private StringList getObjectSelectsBOM(){
//Modified for code review comment.
StringList slObjInfoSelect = new StringList();
try{
	slObjInfoSelect.add("attribute[Reason for Change]");	
	slObjInfoSelect.add(DomainConstants.SELECT_NAME);
	slObjInfoSelect.add(pgV3Constants.SELECT_ATTRIBUTE_TITLE);			
	slObjInfoSelect.add(DomainConstants.SELECT_TYPE);
	slObjInfoSelect.add(pgV3Constants.SELECT_NAME);			
	slObjInfoSelect.add(pgV3Constants.SELECT_CURRENT);		
	slObjInfoSelect.add("attribute[Release Phase]");
	slObjInfoSelect.add(pgV3Constants.SELECT_ID);			
	slObjInfoSelect.add("from[EBOM]");			
	//Code-Fix for Defect 25495 (Unable to get Gross Weight values in "Weights Characteristic" from DSM Report) --Start
			slObjInfoSelect.add(pgV3Constants.SELECT_ATTRIBUTE_PGGROSSWEIGHTREAL);
			slObjInfoSelect.add("attribute[pgLegacyWeightFactor]");			
			slObjInfoSelect.add(pgV3Constants.SELECT_ATTRIBUTE_PGGROSSWEIGHTUNITOFMEASURE);
			slObjInfoSelect.add(pgV3Constants.SELECT_ATTRIBUTE_PGNETWEIGHTOFPRODUCTINCONSUMERUNITREAL);
			slObjInfoSelect.add(pgV3Constants.SELECT_ATTRIBUTE_PGNETWEIGHTOFPRODUCTINCONSUMERUNITUOM);
			slObjInfoSelect.add(pgV3Constants.SELECT_ATTRIBUTE_COMMENT);
			slObjInfoSelect.add("attribute[pgLegacyProductWeight]");
			//Code-Fix for Defect 25495 (Unable to get Gross Weight values in "Weights Characteristic" from DSM Report) --End
			//Added For DSM Report 2018x1.1 Scope : 3 - Report shall include full set of dimensions of master part in Weights And Dimensions Tab : Starts
			slObjInfoSelect.add("attribute[pgLegacyWeightFactorUoM]");
			slObjInfoSelect.add("attribute["+ATTRIBUTE_PGNETWEIGHTOFPRODUCTINCONSUMERUNITREAL + "]");
			slObjInfoSelect.add("attribute["+ATTRIBUTE_PGNETWEIGHTUNITOFMEASURE + "]");
			slObjInfoSelect.add("to[Classified Item].frommid[Part Family Reference].torel.to.Name");
			slObjInfoSelect.add("to[Classified Item].frommid[Part Family Reference].torel.to.attribute[Title]");
			slObjInfoSelect.add("to[Classified Item].frommid[Part Family Reference].torel.to.revision");
			slObjInfoSelect.add("to[Classified Item].frommid[Part Family Reference].torel.to.attribute[pgOuterDimensionLength]");
			slObjInfoSelect.add("to[Classified Item].frommid[Part Family Reference].torel.to.attribute[pgOuterDimensionWidth]");
			slObjInfoSelect.add("to[Classified Item].frommid[Part Family Reference].torel.to.attribute[pgOuterDimensionHeight]");
			slObjInfoSelect.add("to[Classified Item].frommid[Part Family Reference].torel.to.attribute[pgDimensionUoM]");
			slObjInfoSelect.add("to[Classified Item].frommid[Part Family Reference].torel.to.id");
			//Added For DSM Report 2018x1.1 Scope : 3 - Report shall include full set of dimensions of master part in Weights And Dimensions Tab : Ends
			// Added for requirement Id :35336--starts
			String attrPgHasArt = PropertyUtil.getSchemaProperty(PGHASARTATTRIBUTESELECT);
			slObjInfoSelect.add("attribute[" + attrPgHasArt + "]");
			// Added for requirement Id :35336--ends
			//Added for requirement 37822 - starts
			slObjInfoSelect.add(pgV3Constants.SELECT_ATTRIBUTE_PGNETWEIGHT);
			//Added for requirement 37822 - ends
			//Added for Defect 45953 - Starts
			slObjInfoSelect.add(DomainConstants.SELECT_REVISION);
			//Added for Defect 45953 - Ends
			// Added by DSM Reports (Sogeti) for 22x.04 (Dec CW 2023) Defect 56156 -- START 
			slObjInfoSelect.add(FROM_ALTERNATE);
			slObjInfoSelect.add(TO_CLASSIFIED_ITEM);
			// Added by DSM Reports (Sogeti) for 22x.04 (Dec CW 2023) Defect 56156 --  END
			
			
		}catch(Exception e){
			e.printStackTrace();
		}
		return slObjInfoSelect;
	}
	
	/**
	 * getObjectSelectsBOMParent- common stringlist for all object selects 
	 * @return
	 */	
private StringList getObjectSelectsBOMParent(){
		
		StringList slObjInfoSelect = new StringList(10);
		try{
			slObjInfoSelect.add("attribute[Reason for Change]");		
			slObjInfoSelect.add(pgV3Constants.SELECT_ATTRIBUTE_TITLE);			
			slObjInfoSelect.add(DomainConstants.SELECT_TYPE);
			//Code for requirement to addition of revision and state on all tabs except attribute -- Starts
			slObjInfoSelect.add(DomainConstants.SELECT_REVISION);
			//Code for requirement to addition of revision and state on all tabs except attribute -- Ends
			slObjInfoSelect.add(pgV3Constants.SELECT_CURRENT);	
			slObjInfoSelect.add("attribute[Release Phase]");
			slObjInfoSelect.add("from[EBOM]");	
			//----
				
			slObjInfoSelect.add(DomainConstants.SELECT_NAME);
			slObjInfoSelect.add(pgV3Constants.SELECT_ATTRIBUTE_PGGROSSWEIGHTREAL);
			slObjInfoSelect.add("attribute[pgLegacyWeightFactor]");			
			slObjInfoSelect.add(pgV3Constants.SELECT_ATTRIBUTE_PGGROSSWEIGHTUNITOFMEASURE);
			slObjInfoSelect.add(pgV3Constants.SELECT_ATTRIBUTE_PGNETWEIGHTOFPRODUCTINCONSUMERUNITREAL);
			slObjInfoSelect.add(pgV3Constants.SELECT_ATTRIBUTE_PGNETWEIGHTOFPRODUCTINCONSUMERUNITUOM);
			slObjInfoSelect.add("attribute[pgNetWeightUnitOfMeasure]");
			slObjInfoSelect.add(pgV3Constants.SELECT_ID);
			slObjInfoSelect.add(pgV3Constants.SELECT_LEVEL);
			slObjInfoSelect.add(pgV3Constants.SELECT_NAME);
			slObjInfoSelect.add("attribute[pgLegacyProductWeight]");
			// Added for requirement Id :35336--starts
			String attrPgHasArt = PropertyUtil.getSchemaProperty(PGHASARTATTRIBUTESELECT);
			slObjInfoSelect.add("attribute[" + attrPgHasArt + "]");
			// Added for requirement Id :35336--ends
			//Added for requirement 37822 - starts
			slObjInfoSelect.add(pgV3Constants.SELECT_ATTRIBUTE_PGNETWEIGHT);
			//Added for requirement 37822 - ends
			//Added for Defect 42778 2018x6
			//code review changes
			slObjInfoSelect.add("to["+pgV3Constants.RELATIONSHIP_CLASSIFIEDITEM+"].frommid["+REL_PARTFAMILYREFERENCE+"].torel.to.Name");
			slObjInfoSelect.add("to["+pgV3Constants.RELATIONSHIP_CLASSIFIEDITEM+"].frommid["+REL_PARTFAMILYREFERENCE+"].torel.to."+pgV3Constants.SELECT_ATTRIBUTE_TITLE);
			slObjInfoSelect.add("to["+pgV3Constants.RELATIONSHIP_CLASSIFIEDITEM+"].frommid["+REL_PARTFAMILYREFERENCE+"].torel.to.revision");
			slObjInfoSelect.add("to["+pgV3Constants.RELATIONSHIP_CLASSIFIEDITEM+"].frommid["+REL_PARTFAMILYREFERENCE+"].torel.to."+pgV3Constants.SELECT_ATTRIBUTE_PGOUTERDIMENSIONLENGTH);
			slObjInfoSelect.add("to["+pgV3Constants.RELATIONSHIP_CLASSIFIEDITEM+"].frommid["+REL_PARTFAMILYREFERENCE+"].torel.to."+pgV3Constants.SELECT_ATTRIBUTE_PGOUTERDIMENSIONWIDTH);
			slObjInfoSelect.add("to["+pgV3Constants.RELATIONSHIP_CLASSIFIEDITEM+"].frommid["+REL_PARTFAMILYREFERENCE+"].torel.to."+pgV3Constants.SELECT_ATTRIBUTE_PGOUTERDIMENSIONHEIGHT);
			slObjInfoSelect.add("to["+pgV3Constants.RELATIONSHIP_CLASSIFIEDITEM+"].frommid["+REL_PARTFAMILYREFERENCE+"].torel.to."+pgV3Constants.SELECT_ATTRIBUTE_PGDIMENSIONUOM);
			slObjInfoSelect.add("to["+pgV3Constants.RELATIONSHIP_CLASSIFIEDITEM+"].frommid["+REL_PARTFAMILYREFERENCE+"].torel.to.id");
			slObjInfoSelect.add("attribute["+SELECT_ATTR_PGLEGACYWEIGHTFACTORUOM+"]");
		}catch(Exception e){
			e.printStackTrace();
		}
		return slObjInfoSelect;
	}

	/**
	 * getRelSelectsBOM- common stringlist for all object selects 
	 * @return
	 */	
private StringList getRelSelectsBOM(){
		
		StringList slObjInfoSelect = new StringList();
		try{
			slObjInfoSelect.add(pgV3Constants.SELECT_ATTRIBUTE_QUANTITY);
			slObjInfoSelect.add(pgV3Constants.SELECT_ATTRIBUTE_FINDNUMBER);
			slObjInfoSelect.add(pgV3Constants.SELECT_ATTRIBUTE_PGCHANGE);
			slObjInfoSelect.add("frommid[EBOM Substitute]");			
			slObjInfoSelect.add("frommid[EBOM Substitute].to.name");
			//Added For DSM Report 2018x1.1 Scope : 7 Report shall include BOM comments in the BOM tab :Starts
			slObjInfoSelect.add(pgV3Constants.SELECT_ATTRIBUTE_COMMENT);
			//Added For DSM Report 2018x1.1 Scope : 7 Report shall include BOM comments in the BOM tab :Ends
			slObjInfoSelect.add("attribute[pgOptionalComponent]");
			//Added for Apr22 CW requirement 41656 Starts
			slObjInfoSelect.add(ATTR_PGNSPCG);
			//Added for Apr22 CW requirement 41656 Ends

		}catch(Exception e){
			e.printStackTrace();
		}
		return slObjInfoSelect;
	}
	
	/**
	 * getObjectSelectsPlants - common stringlist for all object selects 
	 * @return
	 */
private StringList getObjectSelectsPlants(){
	//Updated code for 2018x.6 Requirement 38092 Refactor Part And Spec Report Start
		StringList slObjInfoSelect = new StringList();
		try{
			//Start Modified for 22x Upgrade to handle new API changes for multi value select
			slObjInfoSelect.add(PLANTNAME);
			slObjInfoSelect.add(ISACTIVATED);			
	    	slObjInfoSelect.add(ISAUTHORIZEDPRODUCE);
			slObjInfoSelect.add(ISAUTHORIZEDUSE);
			slObjInfoSelect.add(ISAUTHORIZEDVIEW);
			//End Modified for 22x Upgrade to handle new API changes for multi value select
			//Updated code for 2018x.6 Requirement 38092 Refactor Part And Spec Report End
		}catch(Exception e){
			e.printStackTrace();
		} 
		return slObjInfoSelect;
	}

	/**
	 * getObjectSelectsAttribute- common stringlist for Attribute Column selects 
	 * @return
	 */
private StringList getObjectSelectsAttribute(){
	//Updated code for 2018x.6 Requirement 38092 Refactor Part And Spec Report Start
			StringList slObjInfoSelect = new StringList();
			try{
				slObjInfoSelect.add(DomainConstants.SELECT_DESCRIPTION);
				slObjInfoSelect.add(DomainConstants.SELECT_ORIGINATOR);
				slObjInfoSelect.add(ATTRIBUTE+pgV3Constants.ATTRIBUTE_PGLASTUPDATEUSER+CLOSINGBRACKET);
				slObjInfoSelect.add(pgV3Constants.SELECT_ATTRIBUTE_PGASSEMBLYTYPE);
				slObjInfoSelect.add(DomainConstants.SELECT_REVISION);
				slObjInfoSelect.add("from["+pgV3Constants.RELATIONSHIP_PGPDTEMPLATESTOPGPLISEGMENT+"].to.name");
				slObjInfoSelect.add(ATTRIBUTE+pgV3Constants.STR_RELEASE_PHASE+CLOSINGBRACKET);
				slObjInfoSelect.add(DomainConstants.SELECT_OWNER);
				slObjInfoSelect.add(pgV3Constants.SELECT_ATTRIBUTE_PGLIFECYCLESTATUS);
				slObjInfoSelect.add(pgV3Constants.SELECT_ATTRIBUTE_REASONFORCHANGE);
				//Added code for defect id 37558 Product Form is not displayed in the Report Starts
				slObjInfoSelect.add("to["+pgV3Constants.RELATIONSHIP_OWNINGPRODUCTLINE+"].from["+TYPE_PG_PLIPRODUCTFORM+"].name");
				slObjInfoSelect.add("to["+pgV3Constants.RELATIONSHIP_OWNINGPRODUCTLINE+"].from["+pgV3Constants.TYPE_PG_GLOBALFORM+"].attribute["+pgV3Constants.ATTRIBUTE_MARKETINGNAME+"]");
				//Added code for defect id 37558 Product Form is not displayed in the Report Ends
				//Updated for defect 43865 Starts
				slObjInfoSelect.add(pgV3Constants.SELECT_ATTRIBUTE_PGISTHEPRODUCTABATTERY);
				slObjInfoSelect.add(pgV3Constants.SELECT_ATTRIBUTE_PGISBATTERY);
				//Updated for defect 43865 Ends
				slObjInfoSelect.add(pgV3Constants.SELECT_ATTRIBUTE_PGBATTERYTYPE);
				slObjInfoSelect.add(pgV3Constants.SELECT_ATTRIBUTE_PGWDSTATIUS);
				slObjInfoSelect.add(pgV3Constants.SELECT_ATTRIBUTE_PGBASEUNITOFMEASURE);
				slObjInfoSelect.add(pgV3Constants.SELECT_ATTRIBUTE_PGBOMBASEQUANTITY);
				slObjInfoSelect.add(pgV3Constants.SELECT_ATTRIBUTE_PGLOCALDESCRIPTION);
				slObjInfoSelect.add(pgV3Constants.SELECT_ATTRIBUTE_PGOTHERNAMES);
				slObjInfoSelect.add(ATTRIBUTE+pgV3Constants.ATTRIBUTE_PGMARKETINGSIZE+CLOSINGBRACKET);
				slObjInfoSelect.add(pgV3Constants.SELECT_ATTRIBUTE_PGCSU);
				slObjInfoSelect.add(ATTRIBUTE+pgV3Constants.ATTRIBUTE_PGCUSTOMIZATIONTYPE+CLOSINGBRACKET);
				slObjInfoSelect.add(pgV3Constants.SELECT_ATTRIBUTE_PGPREFERREDMATERIAL);
				slObjInfoSelect.add(ATTRIBUTE+SELECT_ATTRIBUTE_PGHASART+CLOSINGBRACKET);
				slObjInfoSelect.add(ATTRIBUTE+SELECT_ATTRIBUTE_PGHASMULTIPLEGTINS+CLOSINGBRACKET);
				slObjInfoSelect.add(pgV3Constants.SELECT_ATTRIBUTE_PGCLASS);
				slObjInfoSelect.add(pgV3Constants.SELECT_ATTRIBUTE_PGSUBCLASS);
				slObjInfoSelect.add("from["+pgV3Constants.RELATIONSHIP_PGPDTEMPLATESTOPGPLIREPORTEDFUNCTION+"].to.name");
				//Added for Defect Id : 33575 - Starts
				slObjInfoSelect.add(pgV3Constants.SELECT_ATTRIBUTE_PGPRIMARYPACKAGINGTYPE);
				slObjInfoSelect.add(pgV3Constants.SELECT_ATTRIBUTE_PGSECONDARYPACKAGINGTYPE);
				//Added for Defect Id : 33575 - Ends
				slObjInfoSelect.add(pgV3Constants.SELECT_ATTRIBUTE_PGPACKAGINGSIZEUOM);
				//Updated code for defect 43865 Starts
				slObjInfoSelect.add(pgV3Constants.SELECT_ATTRIBUTE_PGPACKAGINGSIZE);
				//Updated code for defect 43865 Ends
				slObjInfoSelect.add(pgV3Constants.SELECT_ATTRIBUTE_PGPACKAGINGTECHNOLOGY);
				slObjInfoSelect.add(pgV3Constants.SELECT_ATTRIBUTE_PGPARTCOLOR);
				slObjInfoSelect.add(pgV3Constants.SELECT_ATTRIBUTE_PGDECORATIONDETAILS);
				slObjInfoSelect.add(pgV3Constants.SELECT_ATTRIBUTE_PGSHIPPINGINSTRUCTIONS);
				slObjInfoSelect.add(pgV3Constants.SELECT_ATTRIBUTE_PGLABELINGINFORMATION);
				//Updated code for Defect : 33575 - attribute "Storage Conditions" instead of pgStorageInformation--Starts
				slObjInfoSelect.add(pgV3Constants.SELECT_ATTRIBUTE_STORAGECONDITIONS);
				//Updated code for Defect : 33575 - attribute "Storage Conditions" instead of pgStorageInformation--Ends
				slObjInfoSelect.add(pgV3Constants.SELECT_ATTRIBUTE_PGSTORAGETEMPERATURELIMITS);	
				slObjInfoSelect.add(pgV3Constants.SELECT_ATTRIBUTE_PGSTORAGEHUMIDITYLIMITS);
				//Updated 2018x6.1 Dec_CW defect 44880 Starts
				slObjInfoSelect.add("from["+pgV3Constants.RELATIONSHIP_PGTOWAREHOUSECLASSIFICATION+"].to.name");
				//Updated 2018x6.1 Dec_CW defect 44880 Ends
				slObjInfoSelect.add(pgV3Constants.SELECT_ATTRIBUTE_COMMENT);
				slObjInfoSelect.add("to["+pgV3Constants.RELATIONSHIP_DERIVED+"].from.name");
				slObjInfoSelect.add("from["+pgV3Constants.RELATIONSHIP_PGMASTER+"].to.name");
				//Updated code for Req Id : 33634 - Hyperlinks--Starts
				slObjInfoSelect.add("to["+pgV3Constants.RELATIONSHIP_DERIVED+"].from.id");
				slObjInfoSelect.add("from["+pgV3Constants.RELATIONSHIP_PGMASTER+"].to.id");
				slObjInfoSelect.add("to["+pgV3Constants.RELATIONSHIP_CLASSIFIEDITEM+"].frommid["+pgV3Constants.RELATIONSHIP_PARTFAMILYREFERENCE+"].torel.to.id");
				//Updated code for Req Id : 33634 - Hyperlinks--Ends
				slObjInfoSelect.add("to["+pgV3Constants.RELATIONSHIP_CLASSIFIEDITEM+"].frommid["+pgV3Constants.RELATIONSHIP_PARTFAMILYREFERENCE+"].torel.to.name");
				//Updated code for defect 43865 Starts
				slObjInfoSelect.add(pgV3Constants.SELECT_ATTRIBUTE_PGSHELFLIFE);
				//Updated code for defect 43865 Ends
				//2018x0 APril Bug Fix			
				slObjInfoSelect.add(pgV3Constants.SELECT_ATTRIBUTE_RELEASE_DATE);
				slObjInfoSelect.add(pgV3Constants.SELECT_ATTRIBUTE_EFFECTIVITYDATE);
				slObjInfoSelect.add(pgV3Constants.SELECT_ATTRIBUTE_EXPIRATION_DATE);
				slObjInfoSelect.add("from["+pgV3Constants.RELATIONSHIP_PGPRIMARYORGANIZATION+"].to.name");	
				
				//Added For DSM Report 2018x1.1 Scope : 2.Report shall include Master Name in attributes tab :Starts
				slObjInfoSelect.add("from["+pgV3Constants.RELATIONSHIP_PGMASTER+"].to."+pgV3Constants.SELECT_ATTRIBUTE_TITLE);
				slObjInfoSelect.add("to["+pgV3Constants.RELATIONSHIP_CLASSIFIEDITEM+"].frommid["+pgV3Constants.RELATIONSHIP_PARTFAMILYREFERENCE+"].torel.to."+pgV3Constants.SELECT_ATTRIBUTE_TITLE);
				//Added For DSM Report 2018x1.1 Scope : 2.Report shall include Master Name in attributes tab :Ends
				
				//Added For DSM Report 2018x1.1 Scope : 6.2.Report shall include Weight Characteristics in attributes tab :Starts
				slObjInfoSelect.add(pgV3Constants.SELECT_ATTRIBUTE_PGGROSSWEIGHTREAL);		
				slObjInfoSelect.add(pgV3Constants.SELECT_ATTRIBUTE_PGGROSSWEIGHTUNITOFMEASURE);		
				slObjInfoSelect.add(ATTRIBUTE+SELECT_ATTR_PGLEGACYWEIGHTFACTOR+CLOSINGBRACKET);	
				slObjInfoSelect.add(ATTRIBUTE+SELECT_ATTR_PGLEGACYWEIGHTFACTORUOM+CLOSINGBRACKET);
				//Added For DSM Report 2018x1.1 Scope : 6.2.Report shall include Weight Characteristics in attributes tab :Ends
				slObjInfoSelect.add(ATTRIBUTE+SELECT_ATTR_STRUCTUREDRELEASECRITERIAREQ+CLOSINGBRACKET);
				slObjInfoSelect.add(ATTRIBUTE+SELECT_ATTR_PGLEGACYPRODUCTWEIGHT+CLOSINGBRACKET);
				
				//Start Modified for 22x Upgrade to handle new API changes for multi value select
				//Added code for Reqirement Id: 34940 - 2018x.5 Part And Specification Report shall include Business Area and Product Category Platform in attributes tab :Starts
				slObjInfoSelect.add("from["+pgV3Constants.RELATIONSHIP_PGDOCUMENTTOBUSINESSAREA+"].to.name");
				slObjInfoSelect.add("from["+pgV3Constants.RELATIONSHIP_PGDOCUMENTTOPLATFORM+"].to.name");
				//End Modified for 22x Upgrade to handle new API changes for multi value select
				//Added code for Reqirement Id: 34940 - 2018x.5 Part And Specification Report shall include Business Area and Product Category Platform in attributes tab :Ends				
				//Defect 36905 Missing Packaging Component Type on PMP DSM Report Starts
				//Added code for 2022x-05 Requirement id 48327 ---- START
				slObjInfoSelect.add(pgV3Constants.SELECT_ATTRIBUTE_PGPACKAGINGMATERIALTYPE);
				//Added code for 2022x-05 Requirement id 48327 ---- END
				slObjInfoSelect.add(pgV3Constants.SELECT_ATTRIBUTE_PGPACKAGINGCOMPONENTTYPE);
				//Defect 36905 Missing Packaging Component Type on PMP DSM Report Ends
				//Re-Add column Does this Contain a Battery as a part of 2018x.5 December Release Starts
				slObjInfoSelect.add(pgV3Constants.SELECT_ATTRIBUTE_PGCONTAINSBATTERY);
				//Added by DSM Reports (Sogeti) for 2022x.5 (APR CW 2024) Defect 57336 - Start
				slObjInfoSelect.add("from["+pgV3Constants.RELATIONSHIP_PGMATERIALTOPGPLIENVIRONMENTALCLASS+"].to.name");
				//Added by DSM Reports (Sogeti) for 2022x.5 (APR CW 2024) Defect 57336 - Start
				//Re-Add column Does this Contain a Battery as a part of 2018x.5 December Release Ends
				//Added code for 2018x.6 Requirement 37821 Add attributes to Attribute tab of Part and Spec report Starts
				slObjInfoSelect.add(pgV3Constants.SELECT_ATTRIBUTE_PGNETWEIGHT+".inputvalue");
				slObjInfoSelect.add(pgV3Constants.SELECT_ATTRIBUTE_PGNETWEIGHTOFPRODUCTINCONSUMERUNITREAL+".inputvalue");
				slObjInfoSelect.add(ATTRIBUTE+ATTR_PGROLLUPNETWEIGHT+CLOSINGBRACKET);
				slObjInfoSelect.add("to["+pgV3Constants.RELATIONSHIP_MANUFACTURINGRESPONSIBILITY+"].from.name");
				slObjInfoSelect.add("to["+pgV3Constants.RELATIONSHIP_MANUFACTURINGRESPONSIBILITY+"].from."+pgV3Constants.SELECT_ATTRIBUTE_ORGANIZATIONID);
				//Added code for 2018x.6 Requirement 37821 Add attributes to Attribute tab of Part and Spec report Ends
				//Updated code for 2018x.6 Requirement 38092 Refactor Part And Spec Report End
				//Added code for 2018x6.1 Oct CW requirement 39403 Starts
				slObjInfoSelect.add(AWLUtil.strcat("attribute[",pgV3Constants.ATTRIBUTE_PGPRODUCTFORM, "]"));
				//Added code for 2018x6.1 Oct CW requirement 39403 Ends
				//Added code for 2018x6.1 Oct CW requirement 40750 Starts
				slObjInfoSelect.add(AWLUtil.strcat("attribute[",ATTR_PGTRANSPORTTEMPCONTROL, "]"));
				//Added code for 2018x6.1 Oct CW requirement 40750 Ends
				//Added code for 2018x.6 MAY CW Requirement 43024 - starts
				slObjInfoSelect.add(ATTRIBUTE+PG_ATTR_REASONFORCHANGEMANFSTATUS+CLOSINGBRACKET);	
				//Added code for 2018x.6 MAY CW Requirement 43024 - Ends
				//Modified for Requirement 45505,45511,45517: 22x 01 CW -- Starts
				slObjInfoSelect.add(ATTRIBUTE+ATTRIBUTE_PG_WDEXCEPTIONCOMMENT+CLOSINGBRACKET);
				//slObjInfoSelect.add(ATTRIBUTE+ATTRIBUTE_PG_WDEXCEPTIONSUPPORTDOC+CLOSINGBRACKET);
				slObjInfoSelect.add(ATTRIBUTE+ATTRIBUTE_PG_WDVALIDATIONEXCEPTION+CLOSINGBRACKET);
				slObjInfoSelect.add(ATTRIBUTE+ATTRIBUTE_PG_WDEXCEPTIONSUPPORTDOC+CLOSINGBRACKET);
				slObjInfoSelect.add("from["+RELATIONSHIP_PG_WDVALIDATIONEXPSUPPORTDOC+"].to.name");
				//Added code for defect: 46222--Starts
				slObjInfoSelect.add(SELECT_ATTRIBUTE_PGPREVIOUSREVISIONOBSOLETEDATE);
				//Added code for defect: 46222--Ends
				//Modified for Requirement 45505,45511,45517: 22x 01 CW -- Ends
				
				//Added Code for 22x.02 May CW Requirement 46196 - Starts
				slObjInfoSelect.add(ATTRIBUTE+ATTRIBUTE_RELATIONSHIP_RESTRICTION+CLOSINGBRACKET);
				slObjInfoSelect.add(ATTRIBUTE+ATTRIBUTE_RELATIONSHIP_RESTRICTION_COMMENT+CLOSINGBRACKET);
				//Added Code for 22x.02 May CW Requirement 46196 - Starts
				
				//Added the code for 22x.02 May CW Requirement 46148 - Starts
				slObjInfoSelect.add(ATTRIBUTE+ATTRIBUTE_COMPONENT_PACK_FAMILY_LEVEL_1+CLOSINGBRACKET);
				slObjInfoSelect.add(ATTRIBUTE+ATTRIBUTE_COMPONENT_PACK_FAMILY_LEVEL_2+CLOSINGBRACKET);
				slObjInfoSelect.add(ATTRIBUTE+ATTRIBUTE_COMPONENT_PACK_FAMILY_LEVEL_3+CLOSINGBRACKET);
				slObjInfoSelect.add(ATTRIBUTE+ATTRIBUTE_CONSUMER_PACK_FAMILY+CLOSINGBRACKET);
				slObjInfoSelect.add(ATTRIBUTE+ATTRIBUTE_CONSUMER_PRIMARY_PACKAGING_TYPE+CLOSINGBRACKET);
				slObjInfoSelect.add(ATTRIBUTE+ATTRIBUTE_CONSUMER_SECONDARY_PACKAGING_TYPE+CLOSINGBRACKET);
				//Added the code for 22x.02 May CW Requirement 46148 - Ends
				
			} catch(Exception e){
				e.printStackTrace();
			}
			return slObjInfoSelect;
		}

	/**
	 * getObjectCompMaterials - common stringlist for all object selects 
	 * @return
	 */
private StringList getObjectSelectsSubMaterials(){
StringList slObjInfoSelect = new StringList();
try{			
	slObjInfoSelect.add(pgV3Constants.SELECT_ATTRIBUTE_MARKETINGNAME);
	slObjInfoSelect.add(DomainConstants.SELECT_DESCRIPTION);
	//Updated for Defect : 31814 Starts
	slObjInfoSelect.add(pgV3Constants.SELECT_ATTRIBUTE_PGPOSTCONSUMERRECYCLEDCONTENT+".inputvalue");
	//Updated for Defect : 31814 Ends
	slObjInfoSelect.add(DomainConstants.SELECT_CURRENT);
	slObjInfoSelect.add("from["+pgV3Constants.RELATIONSHIP_PGMATERIALTOCOMPANY+"].to.name");
	slObjInfoSelect.add("from["+pgV3Constants.RELATIONSHIP_PGMATERIALTOCOMPANY+"].to."+pgV3Constants.SELECT_ATTRIBUTE_PGSHORTCODE);
	slObjInfoSelect.add(DomainConstants.SELECT_NAME);
	slObjInfoSelect.add(DomainConstants.SELECT_REVISION); //Added by DSM Reports (Sogeti) for 2022x.6 --- Defect#57760
	//Added for Requirement -- 34942
	String strPercentPostIndustrialRecyclate = PropertyUtil.getSchemaProperty(INDUSTRIALCYCLATEATTRIBUTESELECT);
	String strExternalRevisionLevel = PropertyUtil.getSchemaProperty("attribute_ExternalRevisionLevel");
	String strMaterialNumber = PropertyUtil.getSchemaProperty("attribute_MaterialNumber");
	slObjInfoSelect.add("attribute[" + strExternalRevisionLevel + "]");
	slObjInfoSelect.add("attribute[" + strMaterialNumber + "]");
	slObjInfoSelect.add("attribute[" + strPercentPostIndustrialRecyclate + "].inputvalue");
	slObjInfoSelect.add(pgV3Constants.SELECT_ATTRIBUTE_MANUFACTURER);
	slObjInfoSelect.add(DomainConstants.SELECT_TYPE);
	slObjInfoSelect.add(DomainConstants.SELECT_POLICY);
	//Added by DSM Reports (Sogeti) for 2022x.5 (APR CW 2024) Defect 57336 - Start
	slObjInfoSelect.add(STRFROMSTART+pgV3Constants.RELATIONSHIP_PGMATERIALTOPGPLIENVIRONMENTALCLASS+STRTONAME);
	//Added by DSM Reports (Sogeti) for 2022x.5 (APR CW 2024) Defect 57336 - End
	//Added for Requirement -- 34942--ends
}catch(Exception e){
	e.printStackTrace();
}
	return slObjInfoSelect;
}

private StringList getObjectSelectsPeerReview(){
		
		StringList slObjInfoSelect = new StringList(2);
		try{			
			slObjInfoSelect.add("attribute[Actual Completion Date]");
			slObjInfoSelect.add(pgV3Constants.SELECT_ATTRIBUTE_COMMENTS);
		}catch(Exception e){
			e.printStackTrace();
		}
		return slObjInfoSelect;
	}
	
private StringList getObjectSelectsForApprove(){
		StringList slObjInfoSelect = new StringList();
		try{			
			slObjInfoSelect.add(ATTRIBUTE+DomainConstants.ATTRIBUTE_ACTUAL_COMPLETION_DATE+CLOSINGBRACKET);
			slObjInfoSelect.add(pgV3Constants.SELECT_ATTRIBUTE_COMMENTS);
			//Added code for defect: 33591--Starts
			slObjInfoSelect.add(pgV3Constants.SELECT_ATTRIBUTE_TITLE);
			slObjInfoSelect.add(ATTR_ROUTE_INSTRUCTIONS);
			//Added code for defect: 33591--Ends
			//Added code for 2018x.6 Requirement 35515 show reviewer in Approve tab Starts
			slObjInfoSelect.add(pgV3Constants.SELECT_ATTRIBUTE_APPROVALSTATUS);
			slObjInfoSelect.add(DomainConstants.SELECT_CURRENT);
			slObjInfoSelect.add(pgV3Constants.SELECT_ATTRIBUTE_ROUTEACTION);
			slObjInfoSelect.add(ATTRIBUTE+DomainConstants.ATTRIBUTE_SCHEDULED_COMPLETION_DATE+CLOSINGBRACKET);
			//Added code for 2018x.6 Requirement 35515 show reviewer in Approve tab Starts
			//Added for ALM-49592
			slObjInfoSelect.add("from["+DomainObject.RELATIONSHIP_ROUTE_TASK+"].to.attribute[" + DomainObject.ATTRIBUTE_ROUTE_STATUS + "]");
		}catch(Exception e){
			e.printStackTrace();
		}
		return slObjInfoSelect;
	}
	
	/**
	 * getObjectCommonSelects- Stringlist for Common Five Columns 
	 * @return
	 */
private StringList getObjectCommonSelects(){
		
		StringList slObjInfoSelect = new StringList();
		try{                 

			//Code Upgrade for 2018x Data Model -- Starts
			slObjInfoSelect.add(DomainConstants.SELECT_ID);
			//Code Upgrade for 2018x Data Model -- Ends
			slObjInfoSelect.add("attribute[Reason for Change]");		

			slObjInfoSelect.add(DomainConstants.SELECT_NAME);
			slObjInfoSelect.add(pgV3Constants.SELECT_ATTRIBUTE_TITLE);                 
			slObjInfoSelect.add(DomainConstants.SELECT_TYPE);
			slObjInfoSelect.add(DomainConstants.SELECT_REVISION);
			slObjInfoSelect.add(DomainConstants.SELECT_DESCRIPTION);
			slObjInfoSelect.add(DomainConstants.SELECT_CURRENT);
			//Added for Requirement : 34942 - Starts
			slObjInfoSelect.add(DomainConstants.SELECT_POLICY);
			//Added for Requirement : 34942 -Ends
			slObjInfoSelect.add("to[Derived].from.name");
			slObjInfoSelect.add("to[Derived].from.attribute[Title]");
			slObjInfoSelect.add("to[Classified Item].frommid[Part Family Reference].torel.to.name");
			slObjInfoSelect.add("attribute[pgOriginatingSource]");
			//Added code for Requirement Id:33646 -The report shall include new tab Market Of Sale tab-Starts
			slObjInfoSelect.add("attribute["+pgV3Constants.ATTRIBUTE_PGCOSRUNDATE+"]");
			//Added code for Requirement Id:33646 -The report shall include new tab Market Of Sale tab-Ends
			//Updated code for Req Id : 33634 - Hyperlinks--Starts
			slObjInfoSelect.add("to[Derived].from.id");
			//Updated code for Req Id : 33634 - Hyperlinks--Ends
			//Added code for Req Ids : 34946, 34306, 34307, 34308, 34309, 34311, 34312, 34313, 34314 New Tab Alternates--Starts
			slObjInfoSelect.add(pgV3Constants.SELECT_ATTRIBUTE_PGASSEMBLYTYPE);
			slObjInfoSelect.add(pgV3Constants.SELECT_ATTRIBUTE_RELEASE_DATE);
			slObjInfoSelect.add(pgV3Constants.SELECT_ATTRIBUTE_EXPIRATION_DATE);
			slObjInfoSelect.add("from["+pgV3Constants.RELATIONSHIP_PGPRIMARYORGANIZATION+"].to.name");
			//Added code for Req Ids : 34946, 34306, 34307, 34308, 34309, 34311, 34312, 34313, 34314 New Tab Alternates--Ends
			//Compositionand material-start
			//Compositionand material--End
		}catch(Exception e){
			e.printStackTrace();
		}
		return slObjInfoSelect;
	}

	/**
	 * getComponentEquivalentSelects- Stringlist for Common Five Columns 
	 * @return
	 */
private StringList getComponentEquivalentSelects(){
	StringList slObjInfoSelect = new StringList(10);
	try{                 
		slObjInfoSelect.add(DomainConstants.SELECT_NAME);
		slObjInfoSelect.add(DomainConstants.SELECT_REVISION);			
		slObjInfoSelect.add(DomainConstants.SELECT_TYPE);
		slObjInfoSelect.add(DomainConstants.SELECT_DESCRIPTION);                 
	    slObjInfoSelect.add(DomainConstants.SELECT_CURRENT);
		}catch(Exception e){
		e.printStackTrace();
		}
		return slObjInfoSelect;
}
	
private StringList getRelSelectsCompEqu(){
	StringList slObjInfoSelect = new StringList(5);
	try{			
		slObjInfoSelect.add("tomid[Qualification].from.name");			
		slObjInfoSelect.add("tomid[Qualification].from.current");
		slObjInfoSelect.add("attribute[pgArtworkPrimary]");
		//Added code for Requirement 33656, 33871, 33872 New Tab: MEP-SEP Component Equivalents--Srarts
		slObjInfoSelect.add("tomid[Qualification].from.revision");
		//Added code for Requirement 33656, 33871, 33872 New Tab: MEP-SEP Component Equivalents--Srarts
	}catch(Exception e){
		e.printStackTrace();
	}
	return slObjInfoSelect;
} 
//Modified the access level to be accessible to other methods in differnt class - Starts
public StringList getObjectSelectsTM(){
	//Modified the access level to be accessible to other methods in differnt class - Ends
	StringList slTMObjectsSelect = new StringList();
	try{           
		slTMObjectsSelect.add(DomainConstants.SELECT_ID);
		slTMObjectsSelect.add(DomainConstants.SELECT_NAME);
		slTMObjectsSelect.add(DomainConstants.SELECT_CURRENT);
		slTMObjectsSelect.add(DomainConstants.SELECT_DESCRIPTION);
		slTMObjectsSelect.add(DomainConstants.SELECT_REVISION);
		slTMObjectsSelect.add(DomainConstants.SELECT_TYPE);
		slTMObjectsSelect.add(pgV3Constants.SELECT_ATTRIBUTE_TITLE);
	}catch(Exception e){
		e.printStackTrace();
	}
	return slTMObjectsSelect;
}
	
	//Added for Hiding Restricted Data for BOM ,Tables-Weight tab
private MapList getBOMDataWithRestrictedDataCheck(Context context, DomainObject dObjPart, String strUserName,String strexpandProductBOM) throws Exception{
	//Checking access for Parent First --Begin
	String strValue = "";
	MapList retList = new MapList();
	boolean isContextPushed = false;
	
	try {
	isContextPushed = true;
	strValue = setContextAndFetchValueForUser(context,dObjPart,strUserName);
	//Checking access for Parent First --End
	
	//Code-Fix for Defect 28659- Incorrect BOM Data for CM and Supplier view --Starts
	if(!"#DENIED!".equals(strValue)){
		//Pushing the User Agent context to get all the information while expanding BOM.
		//Added for 2018x.6 June CW Defect 46893 - Starts
		ContextUtil.pushContext(context,PropertyUtil.getSchemaProperty(context,"person_UserAgent"),DomainConstants.EMPTY_STRING,DomainConstants.EMPTY_STRING);
	//Added for 2018x.6 June CW Defect 46893 - Ends
		if (!(dObjPart.isKindOf(context,"pgFormulatedProduct") || dObjPart.isKindOf(context,"Formulation Part") || dObjPart.isKindOf(context,"pgAssembledProductPart") || dObjPart.isKindOf(context,"pgDeviceProductPart") || dObjPart.isKindOf(context,"pgIntermediateProductPart"))) {
			retList = expandEBOM(context, dObjPart, strUserName);
		} else {
			if ((dObjPart.isKindOf(context,"pgFormulatedProduct") || dObjPart.isKindOf(context,"Formulation Part") || dObjPart.isKindOf(context,"pgAssembledProductPart") || dObjPart.isKindOf(context,"pgDeviceProductPart") || dObjPart.isKindOf(context,"pgIntermediateProductPart")) && (UIUtil .isNotNullAndNotEmpty(strexpandProductBOM) && strexpandProductBOM.equals("true"))) { 
				retList = expandEBOM(context, dObjPart, strUserName);
			}
			if ((dObjPart.isKindOf(context,"pgFormulatedProduct") || dObjPart.isKindOf(context,"Formulation Part") || dObjPart.isKindOf(context,"pgAssembledProductPart") || dObjPart.isKindOf(context,"pgDeviceProductPart") || dObjPart.isKindOf(context,"pgIntermediateProductPart")) && (UIUtil .isNotNullAndNotEmpty(strexpandProductBOM) && strexpandProductBOM.equals("false"))) { 
				retList = expandEBOM(context, dObjPart, strUserName);
			}
		}
	}
	}catch(Exception e) {
	outLog.write("Exception in getBOMDataWithRestrictedDataCheck "+e+"\n");
	outLog.flush();
	}finally {
	//Added for 2018x.6 June CW Defect 46893 - Starts
	
		if(isContextPushed) {
			ContextUtil.popContext(context);
		}
	
	//Added for 2018x.6 June CW Defect 46893 - Ends
	}
	if (dObjPart.isKindOf(context,"Formulation Part")) {
		//remove all FOP EBOM data
		retList = new MapList();
	} else {
		retList = filterBOMForHirData(context,retList,strUserName,strexpandProductBOM);		
	}
	
	return retList;
}
	
//Modified the code for 2018x Spec REader Defect 49811,50040 - Starts	
private String setContextAndFetchValueForUser(Context context, DomainObject dObjPart,String strUserName) {
	String strValue = "";
	boolean iscontextpopped = true;
	try {
	ContextUtil.pushContext(context, strUserName, null,context.getVault().getName());
	//String strValue = (String)dObjPart.getInfo(context, "from[EBOM]");
	 strValue = (String)dObjPart.getInfo(context, "current");
	ContextUtil.popContext(context);
	iscontextpopped=false;
	

}catch(Exception e) {
	outLog.print("Exception in setContextAndFetchValueForUser Method"+e+"\n");
	outLog.flush();
}finally {
	if(iscontextpopped) {
		try {
			ContextUtil.popContext(context);
		}catch(Exception ex) {
			outLog.print("popping the context "+ex+"\n");
			outLog.flush();
		}
		
	}
}
return strValue;
	}
	//Modified the code for 2018x Spec REader Defect 49811,50040 - Ends
private MapList expandEBOM(Context context, DomainObject dObjPart, String strUserName) throws Exception { 
	String strType = dObjPart.getInfo(context, DomainConstants.SELECT_TYPE);
	String strPartId = dObjPart.getInfo(context, DomainConstants.SELECT_ID);
	MapList mlBOMChild = new MapList();
	mlBOMChild= (MapList)dObjPart.getRelatedObjects(context, pgV3Constants.RELATIONSHIP_EBOM, pgV3Constants.TYPE_PART, SL_OBJECT_BOM_SELECT, SL_REL_BOM_SELECT, false,true, (short)0, null, null, 0);
	return mlBOMChild;
}
 
private void updateWorksheetProducingFormula(Context context, XSSFWorkbook workbook,XSSFRow rowHeaderProducingFormula,XSSFCellStyle cellStyleProducingFormula, MapList mlProducingFormulaAll,XSSFSheet sheetProducingFormula,String strHyperlink, XSSFCellStyle styleGlobal) {
try {
	//Added code for 2018x.6 Requirement id 36700 Ability to generate Part and Spec report with without hyperlink Starts
	String strHyperlinkLimit = EnoviaResourceBundle.getProperty(context, EMXCPNSTRINGRESOURCE, context.getLocale(),"emxCPN.PartAndSpecReport.HyperlinkLimit");
	int iHyperLinkLimit = Integer.parseInt(strHyperlinkLimit);
	int iRowCountAll=0;
	//Added code for 2018x.6 Requirement id 36700 Ability to generate Part and Spec report with without hyperlink Ends
	String sStringResourceFile="emxCPNStringResource"; 
	String sLanguage = context.getSession().getLanguage();
	String strPartPFChangeAction = i18nNow.getI18nString("emxCPN.FamilyCareReport.Worksheet.Column.ChangeAction",sStringResourceFile, sLanguage);
	String strPartPFReasonForChange	= i18nNow.getI18nString("emxCPN.FamilyCareReport.Worksheet.Column.ChangeActionReasonForChange",sStringResourceFile, sLanguage);
	String strPartPFNameOrNumber = i18nNow.getI18nString("emxCPN.FamilyCareReport.Worksheet.Column.NameOrNumber",sStringResourceFile, sLanguage);
	String strPartPFTitle = i18nNow.getI18nString("emxCPN.FamilyCareReport.Worksheet.Column.Title",sStringResourceFile, sLanguage);
	String strPartPFType = i18nNow.getI18nString("emxCPN.FamilyCareReport.Worksheet.Column.Type",sStringResourceFile, sLanguage);
	String strPartPFName = i18nNow.getI18nString("emxCPN.FamilyCareReport.Worksheet.ProducingFormula.Column.Name",sStringResourceFile, sLanguage);
	String strPartPFRevision = i18nNow.getI18nString("emxCPN.FamilyCareReport.Worksheet.Column.Revision",sStringResourceFile, sLanguage);
	String strPartPFState = i18nNow.getI18nString("emxCPN.FamilyCareReport.Worksheet.Column.State",sStringResourceFile, sLanguage);
	String strPartPFDescription	= i18nNow.getI18nString("emxCPN.FamilyCareReport.Worksheet.ProducingFormula.Column.Description",sStringResourceFile, sLanguage);
	String strProducingFormulaName = i18nNow.getI18nString("emxCPN.FamilyCareReport.Worksheet.ProducingFormula.Column.FormulaName",sStringResourceFile, sLanguage);
	String strProducingFormulaType = i18nNow.getI18nString("emxCPN.FamilyCareReport.Worksheet.ProducingFormula.Column.FormulaType",sStringResourceFile, sLanguage);
	String strProducingFormulaRevision = i18nNow.getI18nString("emxCPN.FamilyCareReport.Worksheet.ProducingFormula.Column.FormulaRevision",sStringResourceFile, sLanguage);
	String strProducingFormulaDescription = i18nNow.getI18nString("emxCPN.FamilyCareReport.Worksheet.ProducingFormula.Column.FormulaDescription",sStringResourceFile, sLanguage);
	String strProducingFormulaTitle	= i18nNow.getI18nString("emxCPN.FamilyCareReport.Worksheet.ProducingFormula.Column.FormulaTitle",sStringResourceFile, sLanguage);
	String strProducingFormulaState	= i18nNow.getI18nString("emxCPN.FamilyCareReport.Worksheet.ProducingFormula.Column.FormulaState",sStringResourceFile, sLanguage);
	
	//Creating Header ---Begin
	//1 Change Action
	Cell cellChangeAction = rowHeaderProducingFormula.createCell(0);
	cellChangeAction.setCellStyle(cellStyleProducingFormula);
	cellChangeAction.setCellValue(strPartPFChangeAction);

	//2 Change Action 'Reason for Change'
	Cell cellChangeActionReasonForChange = rowHeaderProducingFormula.createCell(1);
	cellChangeActionReasonForChange.setCellStyle(cellStyleProducingFormula);
	cellChangeActionReasonForChange.setCellValue(strPartPFReasonForChange);

	//3 Name/Number
	Cell cellNameOrNumber = rowHeaderProducingFormula.createCell(2);
	cellNameOrNumber.setCellStyle(cellStyleProducingFormula);
	cellNameOrNumber.setCellValue(strPartPFNameOrNumber);
	
	//4 Title
	Cell cellTitle = rowHeaderProducingFormula.createCell(3);
	cellTitle.setCellStyle(cellStyleProducingFormula);
	cellTitle.setCellValue(strPartPFTitle);
	
	//5 Type
	Cell cellType = rowHeaderProducingFormula.createCell(4);
	cellType.setCellStyle(cellStyleProducingFormula);
	cellType.setCellValue(strPartPFType);
	
	//6 Revision
	Cell cellRevision = rowHeaderProducingFormula.createCell(5);
	cellRevision.setCellStyle(cellStyleProducingFormula);
	cellRevision.setCellValue(strPartPFRevision);
	
	//7 State
	Cell cellState = rowHeaderProducingFormula.createCell(6);
	cellState.setCellStyle(cellStyleProducingFormula);
	cellState.setCellValue(strPartPFState);
	
	//8 Formula Type
	Cell cellFormulaType = rowHeaderProducingFormula.createCell(7);
	cellFormulaType.setCellStyle(cellStyleProducingFormula);
	cellFormulaType.setCellValue(strProducingFormulaType);
	
	//9 Formula Name
	Cell cellFormulaName = rowHeaderProducingFormula.createCell(8);
	cellFormulaName.setCellStyle(cellStyleProducingFormula);
	cellFormulaName.setCellValue(strProducingFormulaName);
	
	//10 Formula Revision
	Cell cellFormulaRevision = rowHeaderProducingFormula.createCell(9);
	cellFormulaRevision.setCellStyle(cellStyleProducingFormula);
	cellFormulaRevision.setCellValue(strProducingFormulaRevision);
	
	//11 Formula State
	Cell cellFormulaState = rowHeaderProducingFormula.createCell(10);
	cellFormulaState.setCellStyle(cellStyleProducingFormula);
	cellFormulaState.setCellValue(strProducingFormulaState);		
	
	//12 Formula Description
	Cell cellFormulaDescription = rowHeaderProducingFormula.createCell(11);
	cellFormulaDescription.setCellStyle(cellStyleProducingFormula);
	cellFormulaDescription.setCellValue(strProducingFormulaDescription);
	
	//13 Formula Title
	Cell cellFormulaTitle = rowHeaderProducingFormula.createCell(12);
	cellFormulaTitle.setCellStyle(cellStyleProducingFormula);
	cellFormulaTitle.setCellValue(strProducingFormulaTitle);				
	//Creating Header ---End			
	
	int rowCount1 = 0;	
	String strState = DomainConstants.EMPTY_STRING;
	//Added code for Req Id : 33634 - Hyperlinks--Starts
	String strValue = DomainConstants.EMPTY_STRING;
	String strParentId = DomainConstants.EMPTY_STRING;
	String strChildId = DomainConstants.EMPTY_STRING;
	String strHyperlinkId = DomainConstants.EMPTY_STRING;
	String strCellValue = DomainConstants.EMPTY_STRING;
	String strCAId = DomainConstants.EMPTY_STRING;
	String strChildState = DomainConstants.EMPTY_STRING;
	String strChildPolicy = DomainConstants.EMPTY_STRING;
	String strMappedState = DomainConstants.EMPTY_STRING;
	//Added code for Req Id : 33634 - Hyperlinks--Ends
	for (int i=0;i<mlProducingFormulaAll.size();i++){
		//Added code for 2018x.6 Requirement id 36700 Ability to generate Part and Spec report with without hyperlink Starts
		iRowCountAll = iRowCountAll + 1;
		//Added code for 2018x.6 Requirement id 36700 Ability to generate Part and Spec report with without hyperlink Ends
		XSSFRow row = sheetProducingFormula.createRow(++rowCount1);
		int columnCount1 = 0;
		Map mp = (Map)mlProducingFormulaAll.get(i);				
		String strId=(String)mp.get("id");
		HashMap hm= new HashMap<>();
		String strTypeDisplayName=null;
		strState = (String)mp.get("ParentCurrent");
		//Added code for Req Id : 33634 - Hyperlinks--Starts
		strParentId = (String)mp.get("ParentId");
		strChildId = (String)mp.get("id");
		strCAId = (String)mp.get("sCAId");
		//Added code for Req Id : 33634 - Hyperlinks--Ends
		strChildState = (String)mp.get("current");
		//Added for Defect : 34908 - Starts
		strChildPolicy = (String)mp.get(DomainConstants.SELECT_POLICY);
		strMappedState = i18nNow.getStateI18NString(strChildPolicy, strChildState, context.getLocale().getLanguage());
		//Added for Defect : 34908 - Ends
		//if(strState.equalsIgnoreCase("Release") || strState.equalsIgnoreCase("Released")) {
		//Updated code for Req Id : 33634 - Hyperlinks--Starts
		//Added by DSM Reports (Sogeti) for 2022x.5 (APR CW 2024) Defect 55875 - Start
		if(UIUtil.isNotNullAndNotEmpty(strCAId) &&  !strCAId.contains(HYPERLINK_PIPE)) {
			hm.put(0, HYPERLINK+mp.get("Change Action")+HYPERLINK_PIPE+strCAId);
		}else {
			hm.put(0, mp.get("Change Action"));
		}
		//Added by DSM Reports (Sogeti) for 2022x.5 (APR CW 2024) Defect 55875 - End
		//Updated code for Req Id : 33634 - Hyperlinks--Ends
		hm.put(1, mp.get("attribute[Reason for Change]"));
		//Updated code for Req Id : 33634 - Hyperlinks--Starts
		hm.put(2, HYPERLINK+mp.get("ParentName")+HYPERLINK_PIPE+strParentId);
		//Updated code for Req Id : 33634 - Hyperlinks--Ends
		hm.put(3, mp.get("ParentTitle"));
		hm.put(4, mp.get("ParentType"));
		hm.put(5, mp.get("ParentRevision"));
		hm.put(6, mp.get("ParentCurrent"));
		hm.put(7, mp.get("type"));
		//Updated code for Req Id : 33634 - Hyperlinks--Starts
		hm.put(8, HYPERLINK+mp.get("name")+HYPERLINK_PIPE+strChildId);
		//Updated code for Req Id : 33634 - Hyperlinks--Ends
		hm.put(9, mp.get("revision"));
		//Modified for Defect : 34908 - Starts
		hm.put(10, strMappedState);	
		//Modified for Defect : 34908 - Ends	
		hm.put(11,mp.get("description"));
		hm.put(12,mp.get("attribute[Title]"));
		//For Cells Creation in each Row
		XSSFCellStyle style = workbook.createCellStyle();
		style = setForeGroundColor(strState, style);
		//Added by DSM Reports (Sogeti) for 2022x.5 (APR CW 2024) Defect 55875 - Start
		XSSFCellStyle style1 = workbook.createCellStyle();
		//Added by DSM Reports (Sogeti) for 2022x.5 (APR CW 2024) Defect 55875 - End
		for(int j=0;j<hm.size();j++){	
			//Modified the code for _2022x_Aug CW Req-47097 - Start
			// Modified by DSM Reports (Sogeti) for 22x.03 (August CW 2023) Defect 54091 - Start
			Cell cell = row.createCell(columnCount1++);
			if (j == 2) {
				style = makeColumnNumeric(workbook, style);
			}
			cell.setCellStyle(style);

			// Modified by DSM Reports (Sogeti) for 22x.03 (August CW 2023) Defect 54091 - End
			//Modified the code for _2022x_Aug CW Req-47097 - End
			//Added code for Req Id : 33634 - Hyperlinks--Starts
			strCellValue = (String)hm.get(j);
			if(UIUtil.isNotNullAndNotEmpty(strCellValue) && strCellValue.startsWith(HYPERLINK_COMPARE)){
				String[] strSplittedValue = strCellValue.split("\\|",-1); 
				strHyperlinkId = strSplittedValue[(strSplittedValue.length)-1];
				strValue = strSplittedValue[(strSplittedValue.length)-2];
				//Added code for 2018x.6 Requirement id 36700 Ability to generate Part and Spec report with without hyperlink Starts
				if(pgV3Constants.TRUE.equalsIgnoreCase(strHyperlink) && iRowCountAll < iHyperLinkLimit){
					getHyperlink(context,cell,workbook,strValue,strHyperlinkId,strState);
				
				} else if(UIUtil.isNotNullAndNotEmpty(strValue)){
					cell.setCellValue(strValue);
				}
				//Added code for 2018x.6 Requirement id 36700 Ability to generate Part and Spec report with without hyperlink Ends
			}else {
				cell.setCellValue((String)hm.get(j));
				//Added by DSM Reports (Sogeti) for 2022x.5 (APR CW 2024) Defect 55875 - Start
				if(j == 0) {
					style1.cloneStyleFrom(style);
					style1.setWrapText(true);
					cell.setCellStyle(style1);
				}
				//Added by DSM Reports (Sogeti) for 2022x.5 (APR CW 2024) Defect 55875 - End
			}
			//Added code for Req Id : 33634 - Hyperlinks--Starts
		}
	}
	sheetFormatter(sheetProducingFormula); // Added by DSM Reports (Sogeti) for 22x.04 (Dec CW 2023) Defect 56156 - START/END
	} catch (Exception e) {
		 outLog.print("Exception in  updateWorksheetProducingFormula: "+e+"\n");
		 outLog.flush();
	}
}
	
//Added by DSM Reports (Sogeti) for 22x.03 (August CW 2023) Requirement 47102 - Starts
private void createDSMReportObject(Context context,String strReportPath,String strReportName,String strReportObjectId,String strUserName) throws MatrixException {
	//Added by DSM Reports (Sogeti) for 22x.03 (August CW 2023) Requirement 47102 - Ends
	try {
	String strContextUserName = context.getUser();
	String strNewObjectName = "DSMReportRequest"+"_"+strContextUserName+"_"+String.valueOf(System.currentTimeMillis());
	String strObjectId = strReportObjectId;
	if(strObjectId.equals(""))
	{
		//push context
		ContextUtil.pushContext(context,PropertyUtil.getSchemaProperty(context,"User Agent"),DomainConstants.EMPTY_STRING,DomainConstants.EMPTY_STRING);				 
		String appName  = FrameworkUtil.getTypeApplicationName(context, TYPE_PGDSMREPORT);
		DomainObject createBO = DomainObject.newInstance(context, TYPE_PGDSMREPORT, appName);
		BusinessObject bo = new BusinessObject("type_pgDSMReport", strNewObjectName, "", "eService Production");
		if(!bo.exists(context))
		{
			createBO.createObject(context, "type_pgDSMReport", strNewObjectName,"", "pgDSMReport", "eService Production");
			strObjectId = createBO.getObjectId(context);
		}
		ContextUtil.popContext(context);
	}
	
	if(UIUtil.isNotNullAndNotEmpty(strObjectId)){
		ContextUtil.pushContext(context,PropertyUtil.getSchemaProperty(context,"User Agent"),DomainConstants.EMPTY_STRING,DomainConstants.EMPTY_STRING);				 
		DomainObject doObj = DomainObject.newInstance(context, strObjectId);
		//ContextUtil.pushContext(context);
		//Updated code for defect id 34027 Starts
		String sFullPath = strReportPath.concat("/").concat(strReportName);
		//Updated code for defect id 34027 Ends		
		//Checked in using MQL - to test functionality on local env.
		//String sMQLCmd = "checkin bus "+strObjectId+" '"+sFullPath+"'";
		//MqlUtil.mqlCommand(context,sMQLCmd);	
		outLog.print("Before File checkin: "+ strReportName+ "\n");
		outLog.flush();
		doObj.checkinFile(context, true, true, "", "generic", strReportName, strReportPath);
		outLog.print("After File checkin: "+ strReportName+ "\n");
		outLog.flush();
		File file = new File(sFullPath);	
		file.delete();
		doObj.promote(context);
		//Added by DSM Reports (Sogeti) for 22x.03 (August CW 2023) Requirement 47102 - Starts
		pg.sendEmail(context, strReportName, strUserName,strOriginatingSource);
		//Added by DSM Reports (Sogeti) for 22x.03 (August CW 2023) Requirement 47102 - Ends
		ContextUtil.popContext(context);					 
		//calling  method is used to provide the Security to the Context User :: Starts
		//provideSecurityToContextUser(context,strContextUserName,strObjectId);
		//calling  method is provide the Security to the Context User :: Ends
	} else {
		throw new MatrixException("Creation of Object Failed");
	}
	} catch (Exception e) {		
		 outLog.print("Exception in  createDSMReportObject: "+e+"\n");
		 outLog.flush();
	}
}
	/**Method is used to provide the Security to the Context User

	 * @param context

	 * @param args

	 */
private void provideSecurityToContextUser(Context context,String strContextUserName,String strObjectId) throws Exception {
	StringList slSelect = new StringList(10);			
	slSelect.add(DomainConstants.SELECT_ID);
	slSelect.add(DomainConstants.SELECT_NAME);
	String strPersonObjId = PersonUtil.getPersonObjectID(context, strContextUserName);
	DomainObject personDoObj 	= DomainObject.newInstance(context, strPersonObjId);
	ContextUtil.pushContext(context,PropertyUtil.getSchemaProperty(context,"User Agent"),DomainConstants.EMPTY_STRING,DomainConstants.EMPTY_STRING);
	// Platform Security 2022x Upgrade : Start : Change type from "Non Disclosure Agreement" to "IP Exception"
	MapList mlNonDisclosureAgreementList	= personDoObj.getRelatedObjects(context,
			RELATIONSHIP_EXCLICENSEDPEOPLE, 
			ExportControlConstants.TYPE_IP_EXCEPTION,              
			slSelect,    
			EMPTY_STRINGLIST,
			true,                       
			true,                      
			(short) 1,                
			EMPTY_STRING,
			EMPTY_STRING,
			(int) 0);
			//Platform Security 2022x Upgrade : End
	Map mpNonDisclosureAgreement =null;
	int iListSize=mlNonDisclosureAgreementList.size();
	String strNonDisclosureAgreement [] = new String[iListSize]; 
	for (int iIndex1=0;iIndex1<iListSize;iIndex1++){			
		mpNonDisclosureAgreement=(Map)mlNonDisclosureAgreementList.get(iIndex1);
		strNonDisclosureAgreement[iIndex1] = getIPControlClassObjectId(context,(String)mpNonDisclosureAgreement.get(DomainConstants.SELECT_NAME),slSelect);
	}
	// The Trigger off has been done to avoid the exception of Invalid Password :: start
	MqlUtil.mqlCommand(context, "trigger off"); 
	DomainRelationship.connect(context, DomainObject.newInstance(context, strObjectId), DomainConstants.RELATIONSHIP_PROTECTED_ITEM, false, strNonDisclosureAgreement);
	MqlUtil.mqlCommand(context, "trigger on");  
	// The Trigger off has been done to avoid the exception of Invalid Password :: ends
	ContextUtil.popContext(context);
}	
	/**Method is used get the IP Control Class Object Id

	 * @param context

	 * @param args

	 */
private String getIPControlClassObjectId(Context context,String strIpControlClassName,StringList slSelect) throws Exception {
	String strIPControlClassObjectId =null;
	Map mpIPControlClassObject =null;
	MapList mlIPControlClassObject = DomainObject.findObjects(context, TYPE_IPCONTROLCLASS, strIpControlClassName, "-", "*", "*", "",false,slSelect);
	if(mlIPControlClassObject.size() == 1){
		mpIPControlClassObject = (Map)mlIPControlClassObject.get(0);
		strIPControlClassObjectId = (String)mpIPControlClassObject.get(DomainConstants.SELECT_ID);
	}
	return strIPControlClassObjectId;
}
	/**Method used to display all the object which contains the .xls file

	 * @param context

	 * @param args

	 */
//TODO Talk to Deepak regarding this method
private  MapList displayFCRReportData(Context context,String args[]) throws Exception {
	MapList mlCheckinObjectFileList=null;
	try {
		StringList slTMObjectsSelect = new StringList();           
		slTMObjectsSelect.add(DomainConstants.SELECT_TYPE);
		slTMObjectsSelect.add(DomainConstants.SELECT_NAME);
		slTMObjectsSelect.add(DomainConstants.SELECT_REVISION);
		slTMObjectsSelect.add(DomainConstants.SELECT_ID);
		slTMObjectsSelect.add(DomainConstants.SELECT_MODIFIED);
		slTMObjectsSelect.add("format.file.name");
		String strUserName =context.getUser();
		//if(DomainConstants.MULTI_VALUE_LIST.contains("format.file.modified"))
		//	DomainConstants.MULTI_VALUE_LIST.remove("format.file.modified");
		slTMObjectsSelect.add("format.file.modified");
		//DSM Report Request For PDF Download modified -- Starts
		String strObjectWhere = "(owner=='"+strUserName+"')";
		//DSM Report Request For PDF Download modified -- Ends
		mlCheckinObjectFileList = DomainObject.findObjects(context, TYPE_PGDSMREPORT, "*", strObjectWhere, slTMObjectsSelect);
		//mlCheckinObjectFileList.addSortKey("format.file.modified", "descending", "date");
		mlCheckinObjectFileList.sort(DomainConstants.SELECT_MODIFIED, "descending", "date");
		//mlCheckinObjectFileList.sort();
	} catch (Exception e) {
		// TODO Auto-generated catch block
		 outLog.print("Exception in  displayFCRReportData: "+e+"\n");
		 outLog.flush();
	}
	return mlCheckinObjectFileList;
}
	
	/**

    *

    *

    * @param used for downloading the .xls file from the table

    * @param args holds input arguments

    * @returns Vector

    * @throws Exception If the operation fails.


    */

private Vector getFileActions(Context context, String[] args)
throws Exception
{
	Vector vActions = new Vector();
	try
	{
		HashMap programMap = (HashMap) JPO.unpackArgs(args);
		MapList objectList = (MapList)programMap.get("objectList");
		if(objectList.size() <= 0){
			return vActions;
		}
		Map paramList = (Map)programMap.get("paramList");
		String uiType = (String)paramList.get("uiType");
		String parentOID = (String)paramList.get("parentOID");
		String customSortColumns = (String)paramList.get("customSortColumns");
		String customSortDirections = (String)paramList.get("customSortDirections");
		String table = (String)paramList.get("table");
		if(objectList == null || objectList.size() <= 0)
		{
			return vActions;
		}		
		boolean isprinterFriendly = false;
		if(paramList.get("reportFormat") != null)
		{
			isprinterFriendly = true;
		}
		
		String languageStr = (String)context.getSession().getLanguage();
		Locale strLocale = context.getLocale();
		String sTipDownload = EnoviaResourceBundle.getProperty(context, "emxComponentsStringResource", strLocale,"emxComponents.DocumentSummary.ToolTipDownload");
		String sTipCheckout = EnoviaResourceBundle.getProperty(context, "emxComponentsStringResource", strLocale,"emxComponents.DocumentSummary.ToolTipCheckout");
		String sTipCheckin  = EnoviaResourceBundle.getProperty(context,  "emxComponentsStringResource", strLocale,"emxComponents.DocumentSummary.ToolTipCheckin");
		String sTipUpdate   = EnoviaResourceBundle.getProperty(context,   "emxComponentsStringResource", strLocale,"emxComponents.DocumentSummary.ToolTipAddFiles");
		String sTipSubscriptions   = EnoviaResourceBundle.getProperty(context,   "emxComponentsStringResource", strLocale,"emxComponents.Command.Subscriptions");
		
		Map objectMap = null;
		if(objectList != null && objectList.size() > 0)
		{
			objectMap = (Map)objectList.get(0);
		}
		
		Iterator objectListItr = null;
		if ( objectMap != null
				&& objectMap.containsKey(CommonDocument.SELECT_TYPE)
				&& objectMap.containsKey(CommonDocument.SELECT_SUSPEND_VERSIONING)
				&& objectMap.containsKey(CommonDocument.SELECT_HAS_CHECKOUT_ACCESS)
				&& objectMap.containsKey(CommonDocument.SELECT_HAS_CHECKIN_ACCESS)
				&& objectMap.containsKey(CommonDocument.SELECT_FILE_NAMES_OF_ACTIVE_VERSION)
				&& objectMap.containsKey(CommonDocument.SELECT_FILE_NAME)
				&& objectMap.containsKey(CommonDocument.SELECT_MOVE_FILES_TO_VERSION)
				&& objectMap.containsKey(CommonDocument.SELECT_IS_KIND_OF_VC_DOCUMENT)
				&& objectMap.containsKey("vcfile")
				&& objectMap.containsKey("vcmodule")
				&& objectMap.containsKey(CommonDocument.SELECT_ACTIVE_FILE_LOCKED)
				&& objectMap.containsKey(CommonDocument.SELECT_ACTIVE_FILE_LOCKER)
				&& objectMap.containsKey(CommonDocument.SELECT_HAS_TOCONNECT_ACCESS)
				&& objectMap.containsKey(CommonDocument.SELECT_ACTIVE_FILE_VERSION_ID)
				&& objectMap.containsKey(CommonDocument.SELECT_OWNER)
				&& objectMap.containsKey(CommonDocument.SELECT_LOCKED)
				&& objectMap.containsKey(CommonDocument.SELECT_LOCKER)) {
			
			objectListItr = objectList.iterator();
		} else {
			StringList selectTypeStmts = new StringList(1);
			selectTypeStmts.add(DomainConstants.SELECT_ID);
			selectTypeStmts.add(DomainConstants.SELECT_TYPE);
			selectTypeStmts.add(CommonDocument.SELECT_SUSPEND_VERSIONING);
			selectTypeStmts.add(CommonDocument.SELECT_HAS_CHECKOUT_ACCESS);
			selectTypeStmts.add(CommonDocument.SELECT_HAS_CHECKIN_ACCESS);
			selectTypeStmts.add(CommonDocument.SELECT_FILE_NAMES_OF_ACTIVE_VERSION);
			selectTypeStmts.add(CommonDocument.SELECT_FILE_NAME);
			selectTypeStmts.add(CommonDocument.SELECT_MOVE_FILES_TO_VERSION);
			selectTypeStmts.add(CommonDocument.SELECT_IS_KIND_OF_VC_DOCUMENT);
			selectTypeStmts.add("vcfile");
			selectTypeStmts.add("vcmodule");
			selectTypeStmts.add(CommonDocument.SELECT_ACTIVE_FILE_LOCKED);
			selectTypeStmts.add(CommonDocument.SELECT_ACTIVE_FILE_LOCKER);
			selectTypeStmts.add(CommonDocument.SELECT_HAS_TOCONNECT_ACCESS);
			selectTypeStmts.add(CommonDocument.SELECT_ACTIVE_FILE_VERSION_ID);
			selectTypeStmts.add(CommonDocument.SELECT_OWNER);
			selectTypeStmts.add(CommonDocument.SELECT_LOCKED);
			selectTypeStmts.add(CommonDocument.SELECT_LOCKER);
			selectTypeStmts.add(CommonDocument.SELECT_CURRENT);
			
			//Getting all the content ids
			String oidsArray[] = new String[objectList.size()];
			for (int i = 0; i < objectList.size(); i++)
			{
				try
				{
					oidsArray[i] = (String)((HashMap)objectList.get(i)).get("id");
				} catch (Exception ex)
				{
					oidsArray[i] = (String)((Hashtable)objectList.get(i)).get("id");
				}
			}			
			MapList objList = DomainObject.getInfo(context, oidsArray, selectTypeStmts);			
			objectListItr = objList.iterator();
		}				    
		HashMap versionMap = new HashMap();
		String linkAttrName = PropertyUtil.getSchemaProperty(context,"attribute_MxCCIsObjectLinked");
		while(objectListItr.hasNext())
		{
			Map contentObjectMap = (Map)objectListItr.next();
			int fileCount = 0;
			String vcInterface = "";
			boolean vcDocument = false;
			boolean vcFile = false;
			String docType = "";
			StringBuffer strBuf = new StringBuffer(1256);
			boolean moveFilesToVersion = (Boolean.valueOf((String) contentObjectMap.get(CommonDocument.SELECT_MOVE_FILES_TO_VERSION))).booleanValue();
			String documentId = (String)contentObjectMap.get(DomainConstants.SELECT_ID);
		
			Map lockCheckinStatusMap = CommonDocument.getLockAndCheckinIconStatus(context, contentObjectMap);
			boolean isAnyFileLockedByContext = (boolean)lockCheckinStatusMap.get("isAnyFileLockedByContext");
			
			
			//For getting the count of files
			HashMap filemap = new HashMap();
			filemap.put(CommonDocument.SELECT_MOVE_FILES_TO_VERSION, contentObjectMap.get(CommonDocument.SELECT_MOVE_FILES_TO_VERSION));
			filemap.put(CommonDocument.SELECT_FILE_NAMES_OF_ACTIVE_VERSION, contentObjectMap.get(CommonDocument.SELECT_FILE_NAMES_OF_ACTIVE_VERSION));
			filemap.put(CommonDocument.SELECT_FILE_NAME, contentObjectMap.get(CommonDocument.SELECT_FILE_NAME));
			fileCount = CommonDocument.getFileCount(context,filemap);
			
			vcInterface = (String)contentObjectMap.get(CommonDocument.SELECT_IS_KIND_OF_VC_DOCUMENT);
			vcDocument = "TRUE".equalsIgnoreCase(vcInterface)?true:false;
			
			docType    = (String)contentObjectMap.get(DomainConstants.SELECT_TYPE);
			
			if(!versionMap.containsKey(docType)){
				versionMap.put(docType, CommonDocument.checkVersionableType(context, docType));
			}	
			
			String parentType = CommonDocument.getParentType(context, docType);
			if (CommonDocument.TYPE_DOCUMENTS.equals(parentType))
			{
				
				//Can Download
				if(CommonDocument.canDownload(context, contentObjectMap))
				{
					if (!isprinterFriendly)
					{
						strBuf.append("<a href='javascript:callCheckout(\"");
						strBuf.append(XSSUtil.encodeForJavaScript(context, documentId));
						strBuf.append("\",\"download\", \"\", \"\",\"");
						strBuf.append(XSSUtil.encodeForJavaScript(context, customSortColumns));
						strBuf.append("\", \"");
						strBuf.append(XSSUtil.encodeForJavaScript(context, customSortDirections));
						strBuf.append("\", \"");
						strBuf.append(XSSUtil.encodeForJavaScript(context, uiType));
						strBuf.append("\", \"");
						strBuf.append(XSSUtil.encodeForJavaScript(context, table));
						strBuf.append("\", \"");
						strBuf.append(XSSUtil.encodeForJavaScript(context, parentOID));
						strBuf.append("\"");
						strBuf.append(")'>");
						strBuf.append("<img border='0' src='../common/images/iconActionDownload.gif' alt=\"");
						strBuf.append(sTipDownload);
						strBuf.append("\" title=\"");
						strBuf.append(sTipDownload);
						strBuf.append("\"></img></a>&#160;");
					} else {
						strBuf.append("<img border='0' src='../common/images/iconActionDownload.gif' alt=\"");
						strBuf.append(sTipDownload);
						strBuf.append("\"></img>&#160;");
					}
					// Changes for CLC start here..
					//Show Download Icon for ClearCase Linked Objects
					//DomainObject ccLinkedObject  = DomainObject.newInstance(context, documentId);
					
					String isObjLinked = null;
					if(linkAttrName!=null && !linkAttrName.equals(""))
					{
						DomainObject docObject = DomainObject.newInstance(context,documentId);
						isObjLinked = docObject.getAttributeValue(context,linkAttrName);
					}
					
					if(isObjLinked!=null && !isObjLinked.equals(""))
					{
						if(isObjLinked.equalsIgnoreCase("True"))
						{
							//show download icon for Linked Objects
							strBuf.append("<a href='../servlet/MxCCCS/MxCCCommandsServlet.java?commandName=downloadallfiles&amp;objectId=");
							strBuf.append(XSSUtil.encodeForURL(context, documentId));
							strBuf.append("'>");
							strBuf.append("<img border='0' src='../common/images/iconActionDownload.gif' alt=\"");
							strBuf.append(sTipDownload);
							strBuf.append("\" title=\"");
							strBuf.append(sTipDownload);
							strBuf.append("\"></img></a>&#160;");
						}
					}
				}
				
				if (strBuf.length() == 0)
					strBuf.append("&#160;");
			} else {
				strBuf.append("&#160;");
			}
			vActions.add(strBuf.toString());
		}
	} catch(Exception ex){
		outLog.print("Exception in getFileActions: "+ex+"\n");
		outLog.flush();
		throw ex;
	}
	finally
	{
		return vActions;
	}
}

		    
		    
		    
	 /**
	     * this method is to generate the Excel Sheet for the manual entry from the user side
	     * Called from JSP Form
	     * @param args
	     * @return void
	     * @throws Exception
	     */
public void generateFCRForManualEntry(Context context, String args[]) throws Exception {
	
	HashMap hmArgs = (HashMap) JPO.unpackArgs(args);

	String strUserName = (String) hmArgs.get("UserName");
	String strPartNames = (String) hmArgs.get("GCAS");
	String strChangeActions= (String) hmArgs.get("ChangeAction");
	String strReportFileName = (String) hmArgs.get("ReportFileName");
	String strReportObjectId = (String) hmArgs.get("ReportObjectId");
	//Added For DSM Report 2018x1.1 Scope : 6,12,ALM Defect #25104 : Starts
	String strexpandProductBOM = (String) hmArgs.get("ExpandProductBOM");
	String strLatestReleasePartOnly = (String) hmArgs.get("LatestReleasePartOnly");
	//Added For DSM Report 2018x1.1 Scope : 6,12,ALM Defect #25104 : Ends
	//Added code for Requirement 33635 Limit Tabs in Report--Starts
	String strSelectedTabs = (String) hmArgs.get("SelectedTabs");
	//Added code for Requirement 33635 Limit Tabs in Report--Ends
	//Added code for 2018x.6 Requirement 36698, 37286, 37290, 37294, 37295 Report of BOM children parts  Starts
	String strExpandProductChildBOM = (String) hmArgs.get("ExpandProductChildBOM");
	//Added code for 2018x.6 Requirement 36698, 37286, 37290, 37294, 37295 Report of BOM children parts  Ends
	//Added code for 2018x.6 Requirement id 36700 Ability to generate Part and Spec report with without hyperlink Starts
	String strHyperlink = (String) hmArgs.get(HYPERLINKASINPUT);
	//Added code for 2018x.6 Requirement id 36700 Ability to generate Part and Spec report with without hyperlink Ends
	//Added code for 2018x.6 Requirement id 36701 Generate Part and Specs report directly Starts
	String strRealTimeProcess = (String) hmArgs.get(REALTIMEPROCESS);
	//Added code for 2018x.6 Requirement id 36701 Generate Part and Specs report directly Starts
	//Added code for 2018x6.1 Oct CW requirement 39407 Starts
	String strIncludeFOPChildToBOM = (String) hmArgs.get(INCLUDEFOPCHILDTOBOM);
	//Added code for 2018x6.1 Oct CW requirement 39407 Ends
	//Added for Apr22 CW requirement 42019 Starts
	String strIncludeComEquv = (String) hmArgs.get("IncludeMatCompFromCompEquv");
	//Added for Apr22 CW requirement 42019 Ends
	//Added for Apr22 CW requirement 41502 Starts
	
	strOriginatingSource = (String) hmArgs.get("OriginatingSource");
	
	
	if(UIUtil.isNullOrEmpty(strOriginatingSource)) {
		strHyperlink = "false";
		}
	//Added for Apr22 CW requirement 41502 Ends
	//Added code to reduce Parameter Starts
	 Map<String,String> mPassValue = new HashMap<>();
	 mPassValue.put("ExpandProductBOM",strexpandProductBOM);
	 mPassValue.put("LatestReleasePartOnly",strLatestReleasePartOnly);
	 mPassValue.put("SelectedTabs",strSelectedTabs);
	 mPassValue.put("ExpandProductChildBOM",strExpandProductChildBOM);
	 mPassValue.put(HYPERLINKASINPUT,strHyperlink);
	 mPassValue.put(REALTIMEPROCESS,strRealTimeProcess);
	//Added code for 2018x6.1 Oct CW requirement 39407 Starts
	 mPassValue.put(INCLUDEFOPCHILDTOBOM,strIncludeFOPChildToBOM);
	//Added code for 2018x6.1 Oct CW requirement 39407 Ends
	//Added for Apr22 CW requirement 42019 Starts
	 mPassValue.put("IncludeMatCompFromCompEquv",strIncludeComEquv);
	//Added for Apr22 CW requirement 42019 Ends
	
	//Added code to reduce Parameter Ends
	if(UIUtil.isNotNullAndNotEmpty(strUserName) && (UIUtil.isNotNullAndNotEmpty(strPartNames) || UIUtil.isNotNullAndNotEmpty(strChangeActions))){
		DomainObject doObj = DomainObject.newInstance(context, strReportObjectId);
		doObj.promote(context);
		//code to write the input entered by the user in the text file or by manual entry into the input file : Starts
		//logUserInputData(context,strUserName,strPartNames,strChangeActions);
		//code to write the input entered by the user in the text file or by manual entry into the input file : Ends
		//Updated code for 2018x.6 Requirement id 36700 Ability to generate Part and Spec report with without hyperlink Starts
		generateFamilyCareReport(context,strUserName,strPartNames,strChangeActions,strReportFileName,strReportObjectId,mPassValue);
		//Updated code for 2018x.6 Requirement id 36700 Ability to generate Part and Spec report with without hyperlink Ends
	}
}
/**
 * this method is to generate the Exel Sheet for the input .txt file which will be browsed by the user
 * 
 * @param args
 * @return void
 * @throws Exception
 */
public void generateFCRForInputFile(Context context, String args[]) throws Exception {
	FileReader fileReaderMQLGeneratedInputFile = null;
	BufferedReader buffReaderForMQLGeneratedInputFile = null;
	StringList slCompleteRow = new StringList();
	String strPartOrCALabelFromInputFile= DomainConstants.EMPTY_STRING;
	String strChangeActions = DomainConstants.EMPTY_STRING;
	String strCAName = DomainConstants.EMPTY_STRING;
	String strPartNames = DomainConstants.EMPTY_STRING;
	String line = "";
	HashMap hmArgs = (HashMap) JPO.unpackArgs(args);
	//Code-Fix for Defect 24821(DSM Report- Input file exceed the limt error) --Start 
	File file  = (File) hmArgs.get("DSMReportFile");
	String strReportFileName = (String) hmArgs.get("ReportFileName");
	//Added For DSM Report 2018x1.1 Scope : 6,12,ALM Defect #25104 : Starts
	String strexpandProductBOM = (String) hmArgs.get("ExpandProductBOM");
	String strLatestReleasePartOnly = (String) hmArgs.get("LatestReleasePartOnly");
	//Added For DSM Report 2018x1.1 Scope : 6,12,ALM Defect #25104 : Ends
	String strReportObjectId = (String) hmArgs.get("ReportObjectId");
	//Added code for Requirement 33635 Limit Tabs in Report--Starts
	String strSelectedTabs = (String) hmArgs.get("SelectedTabs");
	//Added code for Requirement 33635 Limit Tabs in Report--Ends
	fileReaderMQLGeneratedInputFile = new FileReader(file);
	buffReaderForMQLGeneratedInputFile = new BufferedReader(fileReaderMQLGeneratedInputFile);
	//Code for UserName --Begin
	String strUserName = (String) hmArgs.get("UserName");
	//Code for UserName --End
	String finalVal = DomainConstants.EMPTY_STRING;
	while ((line = buffReaderForMQLGeneratedInputFile.readLine()) != null) {
		if(line != null && line.length()>0){
			/*slCompleteRow = FrameworkUtil.split(line, "=");	
			strPartOrCALabelFromInputFile= (String)slCompleteRow.get(0);
			//Code for Change Action ---Begin					
			if(strPartOrCALabelFromInputFile.equalsIgnoreCase("ChangeActionName")){
						strChangeActions= (String)slCompleteRow.get(1);					
						
					}
					//Code for Change Action ---End
				
					//Code for Part ---Begin				
					else if(strPartOrCALabelFromInputFile.equalsIgnoreCase("PartName")){
						   strPartNames= (String)slCompleteRow.get(1);					
						
					}*/
					//Code for Part ---End
			if(!line.contains(","))
				finalVal += line + ",";
			else 
				finalVal += line;
		}
	}	
	StringList strFinalList = FrameworkUtil.split(finalVal,",");
	finalVal = strFinalList.toString();
	finalVal = finalVal.replace("[", "").replace("]", ""); 
	strPartNames=finalVal;
	strChangeActions=finalVal;
	//Code-Fix for Defect 24821(DSM Report- Input file exceed the limt error) --End 			 
	if(UIUtil.isNotNullAndNotEmpty(strUserName) && (UIUtil.isNotNullAndNotEmpty(strPartNames) || UIUtil.isNotNullAndNotEmpty(strChangeActions))){
		StringList slGCAS = FrameworkUtil.split(strPartNames, ",");
		StringList slChangeAction = FrameworkUtil.split(strChangeActions, ",");
		//if((slGCAS.size()+slChangeAction.size())<=100)
		//{
		//generateFamilyCareReport(context,strUserName,strPartNames,strChangeActions,strReportFileName,strReportObjectId);
		//}
		//else {
		try { 
			HashMap hmArgs1 = new HashMap();
			hmArgs1.put("UserName",strUserName);
			hmArgs1.put("GCAS",strPartNames);
			hmArgs1.put("ChangeAction",strChangeActions);
			hmArgs1.put("ReportFileName",strReportFileName);
			//Code-Fix for Defect 24821(DSM Report- Input file exceed the limt error) --Start 	
			hmArgs1.put("ReportObjectId",strReportObjectId);
			//Code-Fix for Defect 24821(DSM Report- Input file exceed the limt error) --End 
			//Added For DSM Report 2018x1.1 Scope : 6,12,ALM Defect #25104 : Starts
			//ALM Defect#30565 - corrected "expandProductBOM" -> "ExpandProductBOM"
			hmArgs1.put("ExpandProductBOM",strexpandProductBOM);
			hmArgs1.put("latestReleasePartOnly",strLatestReleasePartOnly);
			//Added For DSM Report 2018x1.1 Scope : 6,12,ALM Defect #25104 : Ends
			//Added code for Requirement 33635 Limit Tabs in Report--Starts
			hmArgs1.put("SelectedTabs",strSelectedTabs);
			//Added code for Requirement 33635 Limit Tabs in Report--Ends
			BackgroundProcess backgroundProcess = new BackgroundProcess();
			backgroundProcess.submitJob(context, "com.pg.dsm.custom.pgFamilyCareReport", "generateFCRForManualEntry", JPO.packArgsRemote(hmArgs1) , (String)null);
		} catch(Exception ex) {
			ContextUtil.abortTransaction(context);
			outLog.print("Exception in generateFCRForInputFile: "+ex+"\n");
			outLog.flush(); 
			throw ex;
		}
		// }
     }		
}
	 
	 /** This method is used to get the viewer URL for all viewers for given format using the File Name as the display Link
		 * @param context the eMatrix <code>Context</code> object
		 * @param objectId the objectid from which file need to be checked out
		 * @param format the format from which file need to be checked out
		 * @param fileName the fileName to be checked out
		 * @returns String URL for all viewers
		 * @throws Exception if the operation fails
		 * */
	 
private StringList getFileURL(Context context, String[]args) throws Exception {
	
	StringList fileNameList = new StringList();
	String URLParameters = "";
	String returnURL = "";
	String viewerURL = "";
	String objectId = "";
	Map tableObjectMap;
	StringList listData = new StringList();
	
	//StringList fileNameList = "";
	String fileName = "";
	try
	{
		HashMap tableMap = (HashMap)JPO.unpackArgs(args);			
		HashMap columnMap =(HashMap)tableMap.get("columnMap");			
		String strColumnName = (String) columnMap.get("name");			
		MapList tableObjectList =(MapList)tableMap.get("objectList");	
		if(null != tableObjectList && tableObjectList.size() != 0){
			Iterator tableObjectItr = tableObjectList.iterator();						 		
			while(tableObjectItr.hasNext()){
				StringBuffer fileViewerURL = new StringBuffer(256);
				//listData.clear();
				tableObjectMap =(Map)tableObjectItr.next();
				objectId=(String)tableObjectMap.get("id");
				
				DomainObject domObject =DomainObject.newInstance(context,objectId);
				fileName = domObject.getInfo(context, "format.file.name");								
				if(fileName!=""){
					URLParameters = "?action=view&id=" + objectId + "&objectId=" + objectId + "&format=generic&file=" + fileName + "&fileName="+ fileName;
					viewerURL = "javascript:showNonModalDialog('../components/emxCommonDocumentPreCheckout.jsp" + URLParameters + "')";
					fileViewerURL.append("<a href=\"" + viewerURL + "\">");
					fileViewerURL.append(fileName);
					fileViewerURL.append("</a>&nbsp");
					returnURL = fileViewerURL.toString();	
					listData.add(returnURL);								
				} else {
					listData.add("");
				}
				
			}
		}
		
	} catch(Exception ex){
		outLog.print("Exception in getFileURL: "+ex+"\n");
		outLog.flush();
		throw ex;
	}		        
	return listData;
}
//Modified the code for 22x.01 Feb CW Defect 51534 - Starts
//Added by DSM Reports (Sogeti) for 22x.04 (December CW 2023) Defect 54465 - Starts
public boolean accessCheck(Context context, String strUserName, String strPartId)  {
	//Added byDSM Reports (Sogeti) for 22x.04 (December CW 2023) Defect 54465 - Ends
	//Modified the code for 22x.01 Feb CW Defect 51534 - Ends
	boolean bAccess = false; 
	String strValue = "";
	//Added by DSM Reports (Sogeti) for 22x.04 (December CW 2023) Defect 54465 - Starts
	try {
	//Added byDSM Reports (Sogeti) for 22x.04 (December CW 2023) Defect 54465 - Ends
	boolean bIsEBPUser = isEBP(context, strUserName);
	//Added the code for Defect 49698 - Spec Reader Access Issue - Starts
	
	if(SPECREADER.equalsIgnoreCase(strOriginatingSource)) {
	
		if(bIsEBPUser) {
			bAccess = accessCheck_ebp(context, strUserName, strPartId);
		}else {
			bAccess = accessCheckforSpecReader(context, strUserName, strPartId);
		}
		 return bAccess;
	}
	//Added the code for Defect 49698 - Spec Reader Access Issue - Ends
	
	
	 
	//Added code for defect id 34552 Starts
	StringList slBusSelect = new StringList(DomainConstants.SELECT_TYPE);
	slBusSelect.add(DomainConstants.SELECT_NAME);
	slBusSelect.add(DomainConstants.SELECT_REVISION);
	ContextUtil.pushContext(context,PropertyUtil.getSchemaProperty(context,"User Agent"),DomainConstants.EMPTY_STRING,DomainConstants.EMPTY_STRING);
    DomainObject objPart = DomainObject.newInstance(context, strPartId);
    Map<String,Object> mpPartDetails = objPart.getInfo(context, slBusSelect);
    ContextUtil.popContext(context);
    String strPartType = (String)mpPartDetails.get(DomainConstants.SELECT_TYPE);
    String strPartName = (String)mpPartDetails.get(DomainConstants.SELECT_NAME);
    String strPartRev = (String)mpPartDetails.get(DomainConstants.SELECT_REVISION);
    ContextUtil.pushContext(context,strUserName,DomainConstants.EMPTY_STRING,DomainConstants.EMPTY_STRING);
    MapList	mlPartAccess = objPart.findObjects(context, //context
    		strPartType, //type
    		strPartName, //name
    		strPartRev, //rev
			null, //owner
			pgV3Constants.VAULT_ESERVICEPRODUCTION, //vault
			null, //where clause
			false, //expand type
			null); //obj select
    ContextUtil.popContext(context);
    if(mlPartAccess.size() > 0){
    //Added code for defect id 34552 Ends
		if (bIsEBPUser) {
			bAccess = accessCheck_ebp(context, strUserName, strPartId);	
		} else {
			
				DomainObject domainObject = DomainObject.newInstance(context);
				domainObject.setId(strPartId);				
				ContextUtil.pushContext(context, strUserName, null,context.getVault().getName());			
				strValue = (String)domainObject.getInfo(context, "current");	
				if(!"#DENIED!".equals(strValue) && !strValue.equals(""))
				{	
					bAccess = true;					
				} else {				
					bAccess = false;
				}
				ContextUtil.popContext(context);
			
		}
    }
    //Added code for defect id 34552 Starts
    else {
    	bAccess = false;
    }
    //Added code for defect id 34552 Ends
  //Added by DSM Reports (Sogeti) for 22x.04 (December CW 2023) Defect 54465 - Starts
	}catch(Exception e) {
		outLog.print("Exception in  accessCheck: "+e+"\n");
		outLog.flush();
	}
	//Added by DSM Reports (Sogeti) for 22x.04 (December CW 2023) Defect 54465 - Ends
	return bAccess;
}
	 
private String getPersonId(Context context, String strUserName) throws Exception {
	String strPersonId = ""; 
	try{
		//short sQueryLimit=1;
		String strUserSecurityType = "";
		StringList slSelect = new StringList(1);
		slSelect.add(DomainConstants.SELECT_ID);
		//MapList mlPerson = DomainObject.findObjects(context,DomainConstants.TYPE_PERSON,strUserName,"-","*",pgV3Constants.VAULT_ESERVICEPRODUCTION,null,"",true,(StringList) slSelect,sQueryLimit);
		MapList mlPerson = DomainObject.findObjects(context,DomainConstants.TYPE_PERSON,strUserName,"-","*",pgV3Constants.VAULT_ESERVICEPRODUCTION,"",false,slSelect);
		int maplistSize = mlPerson.size();
		for(int i=0;i<maplistSize;i++){
			Map mpPersonData = (Map)mlPerson.get(i);					
			strPersonId = (String)mpPersonData.get(DomainConstants.SELECT_ID);					
		}
	}
	catch(Exception e){
		outLog.print("Exception in  getPersonId: "+e+"\n");
		outLog.flush();
	}
	return strPersonId;
}
	 /**
		 * Description: This method is used to check if user is EBP CM.
		 * Returns: True/False
		 */
private boolean isEBP(Context context, String strUserName) throws Exception {
	boolean bIsEBP = false; 
	String strUserSecurityType = "";
	try{
		//short sQueryLimit=1;
		StringList slSelect = new StringList(3);											
		slSelect.add(DomainConstants.SELECT_CURRENT);
		slSelect.add(DomainConstants.SELECT_ID);
		slSelect.add("attribute[pgSecurityEmployeeType]");
		//MapList mlPerson = DomainObject.findObjects(context,DomainConstants.TYPE_PERSON,strUserName,"-","*",pgV3Constants.VAULT_ESERVICEPRODUCTION,null,"",true,(StringList) slSelect,sQueryLimit);
		MapList mlPerson = DomainObject.findObjects(context,DomainConstants.TYPE_PERSON,strUserName,"-","*",pgV3Constants.VAULT_ESERVICEPRODUCTION,"",false,slSelect);
		int maplistSize = mlPerson.size();
		for(int i=0;i<maplistSize;i++){
			Map mpPersonData = (Map)mlPerson.get(i);					
			strUserSecurityType = (String)mpPersonData.get("attribute[pgSecurityEmployeeType]");					
		}
		if (strUserSecurityType.equalsIgnoreCase("EBP")) {
			bIsEBP = true;
		}
	}
	catch(Exception e){
		outLog.print("Exception in isEBP: "+e+"\n");
		outLog.flush();
	}
	return bIsEBP;
}
	 	 /**
		 * Description: This method is used to check if user is EBP CM.
		 * Returns: True/False
		 */
private boolean isAuthorizedToProduce(Context context, String strUserName, String strPartId) throws Exception {			
	boolean bAuthorizedToProduce = false;
	boolean bIsEBP = isEBP(context, strUserName);
	boolean bAccess = accessCheck(context,strUserName,strPartId);
	boolean bCMAccess = hasCMAccess(context,strUserName,strPartId);
	Short sRecursionLevel = 1;
	StringBuffer sbMemberCompany = new StringBuffer();
	StringList slObjSelect = new StringList(1);
	slObjSelect.add("name");
	StringList slRelSelect = new StringList(1);
	slRelSelect.add("attribute[pgIsAuthorizedtoProduce]");
	
	if (bIsEBP && bAccess && bCMAccess)
		try {			
			String strUserOid = getPersonId(context,strUserName);
			DomainObject domPersonObj= DomainObject.newInstance(context,strUserOid);
			DomainObject domPartObj= DomainObject.newInstance(context,strPartId);
			ContextUtil.pushContext(context,PropertyUtil.getSchemaProperty(context,"User Agent"),DomainConstants.EMPTY_STRING,DomainConstants.EMPTY_STRING);
			MapList mlRelatedPlant = domPartObj.getRelatedObjects(context, DomainConstants.RELATIONSHIP_MANUFACTURING_RESPONSIBILITY, pgV3Constants.TYPE_PLANT, slObjSelect,slRelSelect, true, false, (short) 1, "",""); 
			MapList mlRelatedUserVendors = (MapList)domPersonObj.getRelatedObjects(context, "Member", "Plant",slObjSelect,null,true,false,sRecursionLevel,null, null, 0);	
			ContextUtil.popContext(context);
			if (mlRelatedUserVendors.size()>0) {
				Iterator itrVendor = mlRelatedUserVendors.iterator();						
				while (itrVendor.hasNext()) {
					Map mpUserVendor = (Map)itrVendor.next();	
					String strUserVendor =(String)mpUserVendor.get("name");	
					sbMemberCompany.append(strUserVendor);
					sbMemberCompany.append("|");
				}					
			} 	
			if (mlRelatedPlant.size()>0) {
				Iterator itrPlant = mlRelatedPlant.iterator();						
				while (itrPlant.hasNext()){
					Map mpRelatedPlant = (Map)itrPlant.next();	
					String strPlantName =(String)mpRelatedPlant.get("name");						
					String strAuthorizedToProduce =(String)mpRelatedPlant.get("attribute[pgIsAuthorizedtoProduce]");
					if (sbMemberCompany.indexOf(strPlantName)>-1 && strAuthorizedToProduce.equalsIgnoreCase("TRUE")){
						bAuthorizedToProduce = true;
						break;
					}
				}	
			}	
		} catch(Exception e){
			outLog.print("Exception in  isAuthorizedToProduce: "+e+"\n");
			outLog.flush();
		}
	return bAuthorizedToProduce;
}
	 /**
		 * Description: This method is used to check if user is EBP CM.
		 * Returns: True/False
		 */
private boolean isCMEBP(Context context, String strUserName) throws Exception {			
	boolean bisCMEBP = false;					
	boolean bIsEBP = isEBP(context, strUserName);
	
	Short sRecursionLevel = 1;
	StringBuffer sbMemberCompany = new StringBuffer();
	StringList slObjSelect = new StringList(1);							
	slObjSelect.add(DomainConstants.SELECT_NAME);
	StringList slRelSelect = new StringList();	
	
	if (bIsEBP) 
		try {				
			ContextUtil.pushContext(context,PropertyUtil.getSchemaProperty(context,"User Agent"),DomainConstants.EMPTY_STRING,DomainConstants.EMPTY_STRING);
			String strUserOid = getPersonId(context,strUserName);					
			DomainObject domPersonObj= DomainObject.newInstance(context,strUserOid);
			MapList mlRelatedUserVendors = (MapList)domPersonObj.getRelatedObjects(context, "Member", "Plant", slObjSelect, slRelSelect,true,false,sRecursionLevel,null, null, 0);	
			ContextUtil.popContext(context);
			Iterator itrVendor = mlRelatedUserVendors.iterator();	
			while (itrVendor.hasNext()) {
				Map mpUserVendor = (Map)itrVendor.next();
				String strUserVendor = (String) mpUserVendor.get("name");
				String[] slVendorDetail = strUserVendor.split("~");
				String strVendorCode = slVendorDetail[slVendorDetail.length-1];
				int iLength = strVendorCode.length();
				if(iLength == 4){				
					bisCMEBP = true;
					break;
				}
			}
		} catch(Exception e){
			outLog.print("Exception in  isCMEBP: "+e+"\n");
			outLog.flush();
		}
	return bisCMEBP;
}
	 
private boolean isSupplierEBP(Context context, String strUserName) throws Exception {			
	boolean isSupplierEBP = false;					
	boolean bIsEBP = isEBP(context, strUserName);
	
	Short sRecursionLevel = 1;
	StringBuffer sbMemberCompany = new StringBuffer();
	StringList slObjSelect = new StringList(1);							
	slObjSelect.add(DomainConstants.SELECT_NAME);
	StringList slRelSelect = new StringList();	
	
	if (bIsEBP) 
		try {				
			ContextUtil.pushContext(context,PropertyUtil.getSchemaProperty(context,"User Agent"),DomainConstants.EMPTY_STRING,DomainConstants.EMPTY_STRING);
			String strUserOid = getPersonId(context,strUserName);					
			DomainObject domPersonObj= DomainObject.newInstance(context,strUserOid);
			MapList mlRelatedUserVendors = (MapList)domPersonObj.getRelatedObjects(context, "Member", "Company", slObjSelect, slRelSelect,true,false,sRecursionLevel,null, null, 0);	
			ContextUtil.popContext(context);
			Iterator itrVendor = mlRelatedUserVendors.iterator();	
			while (itrVendor.hasNext()) {
				Map mpUserVendor = (Map)itrVendor.next();
				String strUserVendor = (String) mpUserVendor.get("name");
				String[] slVendorDetail = strUserVendor.split("~");
				String strVendorCode = slVendorDetail[slVendorDetail.length-1];
				int iLength = strVendorCode.length();
				if(iLength == 8){				
					isSupplierEBP = true;
					break;
				}
			}	
		} catch(Exception e){
			outLog.print("Exception in isSupplierEBP: "+e+"\n");
			outLog.flush();
		}
	return isSupplierEBP;
}
	 
private boolean hasSupplierAccess(Context context, String strUserName, String strPartId) throws Exception {			
	boolean bhasSupplierAccess = false;
	boolean bHasaccess = false;
	boolean bHasaccessWithOutComment = false;
	boolean bHasaccessUserProject = false;
	boolean bHasaccessUserProjectWithoutComment = false;
	
	boolean bIsEBP = isEBP(context, strUserName);
	boolean bAccess = accessCheck(context,strUserName,strPartId);
	boolean bIsSupplierEBP = isSupplierEBP(context, strUserName);
	Short sRecursionLevel = 1;
	StringBuffer sbMemberCompany = new StringBuffer();
	StringList slObjSelect = new StringList(1);							
	slObjSelect.add(DomainConstants.SELECT_NAME);
	StringList slRelSelect = new StringList();	
	
	if (bIsEBP && bAccess)
		try {
			bHasaccessUserProject = DomainAccess.hasObjectOwnership(context, strPartId, null, strUserName+"_PRJ", "Multiple Ownership For Object");
			bHasaccessUserProjectWithoutComment = DomainAccess.hasObjectOwnership(context, strPartId, null, strUserName+"_PRJ", "");
			if((bHasaccessUserProject || bHasaccessUserProjectWithoutComment) && bIsSupplierEBP) 
			{
				return true;
			}	
			ContextUtil.pushContext(context,PropertyUtil.getSchemaProperty(context,"User Agent"),DomainConstants.EMPTY_STRING,DomainConstants.EMPTY_STRING);
			String strUserOid = getPersonId(context,strUserName);
			DomainObject domPersonObj= DomainObject.newInstance(context,strUserOid);
			MapList mlRelatedUserVendors = (MapList)domPersonObj.getRelatedObjects(context, "Member", "Company", slObjSelect, slRelSelect,true,false,sRecursionLevel,null, null, 0);	
			ContextUtil.popContext(context);
			if (mlRelatedUserVendors.size()>0) {
				Iterator itrVendor = mlRelatedUserVendors.iterator();						
				while (itrVendor.hasNext()){
					Map mpUserVendor = (Map)itrVendor.next();	
					String strUserVendor =(String)mpUserVendor.get("name");
					//Verify that Vendor is actually Supplier and not Plant Company
					String[] slVendorDetail = strUserVendor.split("~");
					String strVendorCode = slVendorDetail[slVendorDetail.length-1];
					int iLength = strVendorCode.length();
					if(iLength == 8){						
						bHasaccess = DomainAccess.hasObjectOwnership(context, strPartId, strUserVendor, "Partners_PG", "Multiple Ownership For Object");
						bHasaccessWithOutComment = DomainAccess.hasObjectOwnership(context, strPartId, strUserVendor, "Partners_PG", "");
						
						if(bHasaccess || bHasaccessWithOutComment || bHasaccessUserProject || bHasaccessUserProjectWithoutComment) 
						{
							bhasSupplierAccess = true;
							break;
						}
					}
				}	
			}
			//For parts where access is inherited
			if (!bhasSupplierAccess && bIsSupplierEBP && bAccess) {
				bhasSupplierAccess = true;
			}
		} catch(Exception e){
			outLog.print("Exception in hasSupplierAccess: "+e+"\n");
			outLog.flush();
		}		
	return bhasSupplierAccess;
}
	
private boolean hasCMAccess(Context context, String strUserName, String strPartId) throws Exception {			
	boolean hasCMAccess = false;
	boolean bHasaccess = false;
	boolean bHasaccessWithOutComment = false;
	boolean bHasaccessUserProject = false;
	boolean bHasaccessUserProjectWithoutComment = false;
	boolean bHasaccessForCoProject = false;
	boolean bHasaccessForCoProjectWithoutComment = false;
	
	boolean bIsEBP = isEBP(context, strUserName);
	boolean bAccess = accessCheck(context,strUserName,strPartId);
	boolean bIsCMEBP = isCMEBP(context,strUserName);
	Short sRecursionLevel = 1;
	StringBuffer sbMemberCompany = new StringBuffer();
	StringList slObjSelect = new StringList(1);							
	slObjSelect.add(DomainConstants.SELECT_NAME);
	StringList slRelSelect = new StringList();	
	
	if (bIsEBP && bAccess)
		try {
			bHasaccessUserProject = DomainAccess.hasObjectOwnership(context, strPartId, null, strUserName+"_PRJ", "Multiple Ownership For Object");
			bHasaccessUserProjectWithoutComment = DomainAccess.hasObjectOwnership(context, strPartId, null, strUserName+"_PRJ", "");
			if((bHasaccessUserProject || bHasaccessUserProjectWithoutComment) && bIsCMEBP) 
			{
				return true;
			}
			ContextUtil.pushContext(context,PropertyUtil.getSchemaProperty(context,"User Agent"),DomainConstants.EMPTY_STRING,DomainConstants.EMPTY_STRING);
			String strUserOid = getPersonId(context,strUserName);
			DomainObject domPersonObj= DomainObject.newInstance(context,strUserOid);
			MapList mlRelatedUserVendors = (MapList)domPersonObj.getRelatedObjects(context, "Member", "Plant", slObjSelect, slRelSelect,true,false,sRecursionLevel,null, null, 0);	
		
			ContextUtil.popContext(context);
			if (mlRelatedUserVendors.size()>0) {
				Iterator itrVendor = mlRelatedUserVendors.iterator();						
				while (itrVendor.hasNext()){
					Map mpUserVendor = (Map)itrVendor.next();	
					String strUserVendor =(String)mpUserVendor.get("name");

					bHasaccess = DomainAccess.hasObjectOwnership(context, strPartId, strUserVendor, "Partners_PG", "Multiple Ownership For Object");
					bHasaccessWithOutComment = DomainAccess.hasObjectOwnership(context, strPartId, strUserVendor, "Partners_PG", "");
					bHasaccessUserProject = DomainAccess.hasObjectOwnership(context, strPartId, null, strUserName+"_PRJ", "Multiple Ownership For Object");
					bHasaccessUserProjectWithoutComment = DomainAccess.hasObjectOwnership(context, strPartId, null, strUserName+"_PRJ", "");
					bHasaccessForCoProject = DomainAccess.hasObjectOwnership(context, strPartId, strUserVendor+" Plant", "Partners_PG", "Multiple Ownership For Object");
					bHasaccessForCoProjectWithoutComment = DomainAccess.hasObjectOwnership(context, strPartId, strUserVendor+" Plant", "Partners_PG", "");
					if(bHasaccess || bHasaccessWithOutComment || bHasaccessUserProject || bHasaccessUserProjectWithoutComment || bHasaccessForCoProject || bHasaccessForCoProjectWithoutComment ) 
					{
						hasCMAccess = true;
						break;
					}					
				}
			}
			//for Parts where access is inherited with other OOTB methods
			if (!hasCMAccess && bIsCMEBP && bAccess) {
				hasCMAccess = true;
			}
			
		} catch(Exception e){
			outLog.print("Exception in hasCMAccess: "+e+"\n");
			outLog.flush();
		}
	return hasCMAccess;
}
	
	/**
	 * Description: This method is used to check ebp access as per DSM Security Model.
	 * Fetching ART attribute[pgIPClassification] and Person attribute[pgSecurityEmployeeType].
	 * Performing access checks on basis of ART Special Project Security Group.
	 * Returns: True/False
	 */
private boolean accessCheck_ebp(Context context, String strUserName, String strPartId) throws Exception{
	boolean bHasaccess = false;
	boolean bHasaccessWithOutComment = false;
	boolean bHasaccessForCoProject = false;
	boolean bHasaccessForCoProjectWithoutComment = false;
	boolean bHasaccessUserProject = false;
	boolean bHasaccessUserProjectWithoutComment = false;
	boolean bAccessToPart = false;
	//Added by DSM Reports (Sogeti) for 22x.04 (Dec CW 2023) Defect 54222 - Starts
	boolean isContextPushed = false;
	//Added by DSM Reports (Sogeti) for 22x.04 (Dec CW 2023) Defect 54222 - End
	
	StringList slObjSelect = new StringList(1);							
	slObjSelect.add(DomainConstants.SELECT_NAME);
	StringList slRelSelect = new StringList();	
	String strValue = "";
	String strUserSecurityType = "";
	String strCurrent= "";
	String strUserOid= "";
	short sQueryLimit=5;
	Short sRecursionLevel = 1;
	StringList slSelect = new StringList(3);											
	slSelect.add(DomainConstants.SELECT_CURRENT);
	slSelect.add(DomainConstants.SELECT_ID);
	slSelect.add("attribute[pgSecurityEmployeeType]");
	//Modified by DSM Reports (Sogeti) for 22x.04 (Dec CW 2023) Defect 54222 - Starts
	try {
		ContextUtil.pushContext(context,PropertyUtil.getSchemaProperty(context,"User Agent"),DomainConstants.EMPTY_STRING,DomainConstants.EMPTY_STRING);
		isContextPushed = true;
		MapList mlPerson = DomainObject.findObjects(context, DomainConstants.TYPE_PERSON,strUserName,"-","*",pgV3Constants.VAULT_ESERVICEPRODUCTION,null,"",true,(StringList) slSelect,	sQueryLimit);
		int maplistSize = mlPerson.size();
		for(int i=0;i<maplistSize;i++){
			Map mpPersonData = (Map)mlPerson.get(i);
			strCurrent = (String)mpPersonData.get(DomainConstants.SELECT_CURRENT);
			strUserOid = (String)mpPersonData.get(DomainConstants.SELECT_ID);
			strUserSecurityType = (String)mpPersonData.get("attribute[pgSecurityEmployeeType]");					
		}
		DomainObject domPersonObj= DomainObject.newInstance(context,strUserOid);		
		MapList mlRelatedUserVendors = (MapList)domPersonObj.getRelatedObjects(context, "Member", "Plant,Company", slObjSelect, slRelSelect,true,false,sRecursionLevel,null, null, 0);	
		if (mlRelatedUserVendors.size()>0) {
			Iterator itrVendor = mlRelatedUserVendors.iterator();						
			while (itrVendor.hasNext()){
				Map mpUserVendor = (Map)itrVendor.next();	
				String strUserVendor =(String)mpUserVendor.get("name");
				bHasaccess = DomainAccess.hasObjectOwnership(context, strPartId, strUserVendor, "Partners_PG", "Multiple Ownership For Object");
				bHasaccessWithOutComment = DomainAccess.hasObjectOwnership(context, strPartId, strUserVendor, "Partners_PG", "");
				bHasaccessForCoProject = DomainAccess.hasObjectOwnership(context, strPartId, strUserVendor+" Plant", "Partners_PG", "Multiple Ownership For Object");
				bHasaccessForCoProjectWithoutComment = DomainAccess.hasObjectOwnership(context, strPartId, strUserVendor+" Plant", "Partners_PG", "");
				bHasaccessUserProject = DomainAccess.hasObjectOwnership(context, strPartId, null, strUserName+"_PRJ", "Multiple Ownership For Object");
				bHasaccessUserProjectWithoutComment = DomainAccess.hasObjectOwnership(context, strPartId, null, strUserName+"_PRJ", "");

				if(bHasaccess || bHasaccessWithOutComment || bHasaccessForCoProject || bHasaccessForCoProjectWithoutComment || bHasaccessUserProject || bHasaccessUserProjectWithoutComment ){
					bAccessToPart = true;
					break;
				}							
			}
		}
	} catch(Exception e){
		outLog.print("Exception in accessCheck_ebp: "+e+"\n");
		outLog.flush();
	}finally {
		if(isContextPushed) {
			isContextPushed = false;
			ContextUtil.popContext(context);
		}
	}
	try {
		if (!bAccessToPart) {
			//For parts where access is inherited 
			DomainObject domainObject = DomainObject.newInstance(context);
			domainObject.setId(strPartId);				
			ContextUtil.pushContext(context, strUserName, null,context.getVault().getName());	
			isContextPushed = true;
			strValue = (String)domainObject.getInfo(context, "current");	
			if(!"#DENIED!".equals(strValue) && !strValue.equals(""))
			{	
				bAccessToPart = true;					
			} else {				
				bAccessToPart = false;
			}
		}
	} catch(Exception e){
		bAccessToPart = false;
		outLog.print("Exception in accessCheck_ebp: "+e+"\n");
		outLog.flush();
	}finally {
		if(isContextPushed) {
			isContextPushed = false;
			ContextUtil.popContext(context);
		}
	}
	//Modified by DSM Reports (Sogeti) for 22x.04 (Dec CW 2023) Defect 54222 - Ends
	return bAccessToPart;		
}
		/**
	 	* Method to get connected Parts from ChangeManagement
	 	* @param context
	 	* @param strCAObjectId - CA object id & its selectable
	 	* @return MapList
	 	*/
private MapList getProposedRealizedActivitiesFromCA(Context context, String strCAObjectId, StringList slObject) throws Exception{
			
	MapList mlProposedRealizedParts = new MapList();
	MapList mlPAParts = new ChangeAction(strCAObjectId).getAffectedItems(context);
	MapList mlRAParts = new ChangeAction(strCAObjectId).getAllRealizedChanges(context);
	
	String strPartId = "";
	String strPartLastId = "";
	String strPartState = "";
	Map mPartSelects = null;
	DomainObject domPart = null;
	if (mlPAParts.size()>0) {
		Iterator itrPAParts = mlPAParts.iterator();						
		while (itrPAParts.hasNext()){
			Map mpPart = (Map)itrPAParts.next();	
			strPartId = (String)mpPart.get("id");
			if (UIUtil.isNotNullAndNotEmpty(strPartId)) {
				domPart = DomainObject.newInstance(context,strPartId);
				mPartSelects = domPart.getInfo(context, slObject);
				strPartLastId = (String) mPartSelects.get("last.id");
				strPartState = (String) mPartSelects.get("current");
				//Added For DSM Report 2018x1.1 Scope, : 11,ALM Defect #25104 - Family Care report- System shall generate the report based on user input and no default restriction based on part state : Starts
				//if (!"Obsolete".equalsIgnoreCase(strPartState)) {
				mlProposedRealizedParts.add(mPartSelects);
				//}
				//Added For DSM Report 2018x1.1 Scope, : 11,ALM Defect #25104 - Family Care report- System shall generate the report based on user input and no default restriction based on part state : Ends
			}
		}
	}
			
	if (mlRAParts.size()>0) {
		Iterator itrRAParts = mlRAParts.iterator();						
		while (itrRAParts.hasNext()){
			Map mpPart = (Map)itrRAParts.next();	
			strPartId = (String)mpPart.get("id");
			if (UIUtil.isNotNullAndNotEmpty(strPartId)) {
				domPart = DomainObject.newInstance(context,strPartId);
				mPartSelects = domPart.getInfo(context, slObject);
				strPartLastId = (String) mPartSelects.get("last.id");
				strPartState = (String) mPartSelects.get("current");
				//Added For DSM Report 2018x1.1 Scope, : 11,ALM Defect #25104 - Family Care report- System shall generate the report based on user input and no default restriction based on part state : Starts
				//if (!"Obsolete".equalsIgnoreCase(strPartState)) {
				mlProposedRealizedParts.add(mPartSelects);
				//}
				//Added For DSM Report 2018x1.1 Scope, : 11,ALM Defect #25104 - Family Care report- System shall generate the report based on user input and no default restriction based on part state : Ends 		
			}
		}
	}
	return mlProposedRealizedParts;
}
				
	/**
	 * Method to get connected CAs from ChangeManagement from Application types(eg : Part..)
	 * @param context
	 * @param args
	 * @return MapList
	 */
@com.matrixone.apps.framework.ui.ProgramCallable
private MapList getConnectedChanges(Context context, String []args, String strUserName) throws Exception {
	//2018x2.1 ALM 30567 Push Context to retreive CA data since EBP users cannot access some CA 
	MapList totalRelatedListCAs = new MapList();
	try {
		
		ContextUtil.pushContext(context,PropertyUtil.getSchemaProperty(context,"User Agent"),DomainConstants.EMPTY_STRING,DomainConstants.EMPTY_STRING);
	StringList stlObjectSelects = new StringList();
	stlObjectSelects.addElement(DomainConstants.SELECT_ID);
	stlObjectSelects.addElement(DomainConstants.SELECT_NAME);
	stlObjectSelects.addElement(DomainConstants.SELECT_CURRENT);
	Set changeActions = new HashSet();
	String strObjectId = args[0];
	BusinessObject busObjePart 	= new BusinessObject(strObjectId) ;
	List lBusoBject = new ArrayList(); 
	lBusoBject.add(busObjePart);
	String physicalId = DomainObject.newInstance(context, strObjectId).getInfo(context, "physicalid");
	List<String> lObjectId = new ArrayList();
	lObjectId.add(physicalId);
	MapList realizedCAMapList = new MapList();
	MapList proposedCAMapList = new MapList();
	ChangeActionFactory factory = new ChangeActionFactory();
	IChangeActionServices changeAction = factory.CreateChangeActionFactory();
	
	Map<String,Map<IChangeAction,List<IOperation>>> mapPrposedOperationAndCa 		= changeAction.getProposedOperationAndChangeActionFromIdList(context,lObjectId);
	Map<String, Map<IChangeAction, List<IRealizedChange>>> mapRealizedAndCaLinked 	= changeAction.getRealizedAndCaFromListObjects(context, lBusoBject, false, true, true);

	for(Entry<String, Map<IChangeAction, List<IOperation>>> mapOutput : mapPrposedOperationAndCa.entrySet()){
		for(Entry<IChangeAction,List<IOperation>> mapOutput2: mapOutput.getValue().entrySet()){
			List<IOperation> proposedList = mapOutput2.getValue();
			IChangeAction iChangeAction = mapOutput2.getKey();
			// just check if it's attached as realized
			if(iChangeAction!= null){
				for(int index = 0; index<proposedList.size(); index++) {
					Map<String, String> proposedCAMap = new HashMap<String, String>();
					IOperation iOpreration = proposedList.get(index);
					String strOperationName = iOpreration.getOperationName();
					String strTargetedStatus = iOpreration.getTargetStatus();
					BusinessObject busChangeAction = iChangeAction.getCaBusinessObject();
					String strChangeActionPhysID = busChangeAction.getObjectId();
					DomainObject domChangeAction = DomainObject.newInstance(context, strChangeActionPhysID);
					Map mapCAInfo = domChangeAction.getInfo(context, stlObjectSelects);
					String strCurrent = (String) mapCAInfo.get(DomainConstants.SELECT_CURRENT);
					String strCAId = (String) mapCAInfo.get(DomainConstants.SELECT_ID);
					String strCAName = (String) mapCAInfo.get(DomainConstants.SELECT_NAME);
					String strReasonForChange = new ChangeAction().getReasonForChangeFromChangeAction(context, strObjectId, strChangeActionPhysID);
					String strRequestedChange = ChangeAction.getRequestedChangeFromOperationAndTargetedState(context, strOperationName, strTargetedStatus);
					proposedCAMap.put(DomainConstants.SELECT_ID, strCAId);
					
					//Modified by DSM Reports (Sogeti) for 2022x.5 (APR CW 2024) Defect 55875 - Start
					//Modified by DSM Reports for 2022x.5 (APR CW 2024) Defect 57310 - Start
					boolean bHasAccessOnCA = false;
						if(!SPECREADER.equalsIgnoreCase(strOriginatingSource)) {
							bHasAccessOnCA = accessCheck(context, strUserName, strCAId);							
						}
					if((bHasAccessOnCA && !SPECREADER.equalsIgnoreCase(strOriginatingSource)) || (SPECREADER.equalsIgnoreCase(strOriginatingSource) && "Complete".equalsIgnoreCase(strCurrent)) ) {
						//Modified by DSM Reports for 2022x.5 (APR CW 2024) Defect 57310 - End
						proposedCAMap.put("CAProposedName", strCAName);
						proposedCAMap.put("CAProposedCurrent", strCurrent);
						proposedCAMap.put("CAProposedRequestedChange",strRequestedChange);
						proposedCAMap.put("CAProposedReasonForChange",strReasonForChange);
						} else if((SPECREADER.equalsIgnoreCase(strOriginatingSource) && !"Complete".equalsIgnoreCase(strCurrent))) {
						
							proposedCAMap.clear();
							
						}
						else {
						proposedCAMap.put("CAProposedName", DomainConstants.EMPTY_STRING);
						proposedCAMap.put("CAProposedCurrent", DomainConstants.EMPTY_STRING);
						proposedCAMap.put("CAProposedRequestedChange",DomainConstants.EMPTY_STRING);
						proposedCAMap.put("CAProposedReasonForChange",DomainConstants.EMPTY_STRING);
					}
					//Modified by DSM Reports (Sogeti) for 2022x.5 (APR CW 2024) Defect 55875 - End
					if(!proposedCAMap.isEmpty()){
						proposedCAMapList.add(proposedCAMap);
					}
				}
			}
		}
	}
	
	for(Entry<String, Map<IChangeAction,List<IRealizedChange>>> mapOutput : mapRealizedAndCaLinked.entrySet()){
		for(Entry<IChangeAction,List<IRealizedChange>> mapOutput2: mapOutput.getValue().entrySet()){
			List<IRealizedChange> realizedList = mapOutput2.getValue();
			IChangeAction iChangeAction = mapOutput2.getKey();
			Map<String, String> realizedCAMap = new HashMap<String, String>();
			
			if(iChangeAction!= null){
				BusinessObject busChangeAction =  iChangeAction.getCaBusinessObject();
				String strChangeActionPhysID = busChangeAction.getObjectId();
				String strReasonForChange = DomainConstants.EMPTY_STRING;
				DomainObject domChangeAction = DomainObject.newInstance(context, strChangeActionPhysID);
				Map mapCAInfo = domChangeAction.getInfo(context, stlObjectSelects);
				String strCurrent = (String) mapCAInfo.get(DomainConstants.SELECT_CURRENT);
				String strCAId = (String) mapCAInfo.get(DomainConstants.SELECT_ID);
				String strCAName = (String) mapCAInfo.get(DomainConstants.SELECT_NAME);
				String strRequestedChange = new ChangeAction().getReaquestedChangeForRealizedFromChangeAction(context, strObjectId, strChangeActionPhysID);
				realizedCAMap.put(DomainConstants.SELECT_ID, strCAId);
				
				//Modified by DSM Reports (Sogeti) for 2022x.5 (APR CW 2024) Defect 55875 - Start
				//Modified by DSM Reports for 2022x.5 (APR CW 2024) Defect 57310 - Start
				boolean bHasAccessOnCA = false;
					if(!SPECREADER.equalsIgnoreCase(strOriginatingSource)) {
						bHasAccessOnCA = accessCheck(context, strUserName, strCAId);						
					}					
				if((bHasAccessOnCA && !SPECREADER.equalsIgnoreCase(strOriginatingSource)) || (SPECREADER.equalsIgnoreCase(strOriginatingSource) && "Complete".equalsIgnoreCase(strCurrent)) ) {
					//Modified by DSM Reports for 2022x.5 (APR CW 2024) Defect 57310 - End
					realizedCAMap.put("CARealizedName", strCAName);
					realizedCAMap.put("CARealizedCurrent", strCurrent);
					realizedCAMap.put("CARealizedRequestedChange",strRequestedChange);
						realizedCAMap.put("CARealizedReasonForChange",strReasonForChange);
					}else if((SPECREADER.equalsIgnoreCase(strOriginatingSource) && !"Complete".equalsIgnoreCase(strCurrent))) {
						realizedCAMap.clear();
				}else {
					realizedCAMap.put("CARealizedName", DomainConstants.EMPTY_STRING);
					realizedCAMap.put("CARealizedCurrent", DomainConstants.EMPTY_STRING);
					realizedCAMap.put("CARealizedRequestedChange", DomainConstants.EMPTY_STRING);
					realizedCAMap.put("CARealizedReasonForChange", DomainConstants.EMPTY_STRING);
				}
				//Modified by DSM Reports (Sogeti) for 2022x.5 (APR CW 2024) Defect 55875 - End
			}
			if(!realizedCAMap.isEmpty()){
				realizedCAMapList.add(realizedCAMap);
			}
		}
	}
	
	String sCAId = DomainConstants.EMPTY_STRING;
	String sCurrent = DomainConstants.EMPTY_STRING; 
	if(proposedCAMapList != null){
		for(Object caObject:proposedCAMapList){
			Map caProposedMap = (Map)caObject;
			sCAId = (String) caProposedMap.get(DomainConstants.SELECT_ID);
			if(!changeActions.contains(sCAId)){
				totalRelatedListCAs.add(caProposedMap);
				changeActions.add(sCAId);
			}
		}
	}
	if(realizedCAMapList!=null){
		for(Object caObject:realizedCAMapList){
			Map caRealizedMap = (Map)caObject;
			sCAId = (String) caRealizedMap.get(DomainConstants.SELECT_ID);
			if(!changeActions.contains(sCAId)){
				totalRelatedListCAs.add(caRealizedMap);
				changeActions.add(sCAId);
			}
		}
	}
	ContextUtil.popContext(context);
	} catch(Exception ex) {
		outLog.print("Exception in accessCheck_ebp: "+ex+"\n");
		outLog.flush();
	}
	return totalRelatedListCAs;
}
	/**Method used to display the EBOM W&D in a new tab of the .xls file

	 * @param context

	 * @param args

	 */	
private void updateWorksheetEBOMWeightAndDimensions(Context context, XSSFWorkbook workbook,XSSFRow rowHeaderEBOMWeightAndDimensions,XSSFCellStyle cellStyleEBOMWeightAndDimentions, MapList mlParentChildEBOMWD,XSSFSheet sheetEBOMWeightAndDimentions,String strHyperlink, String strUserName, XSSFCellStyle styleGlobal) {
	try {
		//Added code for 2018x.6 Requirement id 36700 Ability to generate Part and Spec report with without hyperlink Starts
		String strHyperlinkLimit = EnoviaResourceBundle.getProperty(context, EMXCPNSTRINGRESOURCE, context.getLocale(),"emxCPN.PartAndSpecReport.HyperlinkLimit");
		int iHyperLinkLimit = Integer.parseInt(strHyperlinkLimit);
		int iRowCountAll=0;
		// Added by DSM Reports (Sogeti) for 22x.03 (May CW 2023) Defect 49457 - Start
		boolean bHasObjAccess=false;
		// Added by DSM Reports (Sogeti) for 22x.03 (May CW 2023) Defect 49457 - End
		//Added code for 2018x.6 Requirement id 36700 Ability to generate Part and Spec report with without hyperlink Ends
		String sStringResourceFile="emxCPNStringResource"; 
		String sLanguage = context.getSession().getLanguage();
		String strEBOMWAndDChangeAction= i18nNow.getI18nString("emxCPN.FamilyCareReport.Worksheet.Column.ChangeAction",sStringResourceFile, sLanguage);
		String strEBOMWAndDChangeActionReasonForChange=i18nNow.getI18nString("emxCPN.FamilyCareReport.Worksheet.Column.ChangeActionReasonForChange",sStringResourceFile, sLanguage);
		String strEBOMWAndDTitle=i18nNow.getI18nString("emxCPN.FamilyCareReport.Worksheet.Column.Title",sStringResourceFile, sLanguage);
		String strEBOMWAndDNameOrNumber=i18nNow.getI18nString("emxCPN.FamilyCareReport.Worksheet.Column.NameOrNumber",sStringResourceFile, sLanguage);
		String strEBOMWAndDType=i18nNow.getI18nString("emxCPN.FamilyCareReport.Worksheet.Column.Type",sStringResourceFile, sLanguage);
		//Code for requirement to addition of revision and state on all tabs except attribute - Starts
		String strEBOMWAndDRevision	= i18nNow.getI18nString("emxCPN.FamilyCareReport.Worksheet.Column.Revision",sStringResourceFile, sLanguage);
		//Code for requirement to addition of revision and state on all tabs except attribute - Ends
		String strEBOMWAndDMaterialNumber=i18nNow.getI18nString("emxCPN.FamilyCareReport.Worksheet.EBOMWeightAndDimentions.Column.MaterialNumber",sStringResourceFile, sLanguage);
		String strEBOMWAndDMaterialTitle=i18nNow.getI18nString("emxCPN.FamilyCareReport.Worksheet.EBOMWeightAndDimentions.Column.MaterialTitle",sStringResourceFile, sLanguage);
		String strEBOMWAndDState=i18nNow.getI18nString("emxCPN.FamilyCareReport.Worksheet.EBOMWeightAndDimentions.Column.State",sStringResourceFile, sLanguage);
		String strBOMWAndDLevel=i18nNow.getI18nString("emxCPN.FamilyCareReport.Worksheet.EBOMWeightAndDimentions.Column.Level",sStringResourceFile, sLanguage);
		String strEBOMWAndDSequenceNumber=i18nNow.getI18nString("emxCPN.FamilyCareReport.Worksheet.EBOMWeightAndDimentions.Column.SequenceNumber",sStringResourceFile, sLanguage);
		String strEBOMWAndDQty=i18nNow.getI18nString("emxCPN.FamilyCareReport.Worksheet.EBOMWeightAndDimentions.Column.Qty",sStringResourceFile, sLanguage);
		String strEBOMWAndDGrossWeight=i18nNow.getI18nString("emxCPN.FamilyCareReport.Worksheet.EBOMWeightAndDimentions.Column.GrossWeight",sStringResourceFile, sLanguage);
		String strEBOMWAndDLegacyProductWeight=i18nNow.getI18nString("emxCPN.FamilyCareReport.Worksheet.EBOMWeightAndDimentions.Column.LegacyProductWeight",sStringResourceFile, sLanguage);
		String strEBOMWAndDWeightLegacyWeightFactor=i18nNow.getI18nString("emxCPN.FamilyCareReport.Worksheet.EBOMWeightAndDimentions.Column.WeightLegacyWeightFactor",sStringResourceFile, sLanguage);
		String strEBOMWAndDWeightUoM=i18nNow.getI18nString("emxCPN.FamilyCareReport.Worksheet.EBOMWeightAndDimentions.Column.WeightUoM",sStringResourceFile, sLanguage);
		String strEBOMWAndDLegacyWeightFactorUoM =i18nNow.getI18nString("emxCPN.FamilyCareReport.Worksheet.EBOMWeightAndDimentions.Column.LegacyWeightFactorUoM",sStringResourceFile, sLanguage);
		String strEBOMWAndDNetWeightOfProductInConsumerUnit =i18nNow.getI18nString("emxCPN.FamilyCareReport.Worksheet.EBOMWeightAndDimentions.Column.NetWeightOfProductInConsumerUnit",sStringResourceFile, sLanguage);
		String strEBOMWAndDNetWeightUoM=i18nNow.getI18nString("emxCPN.FamilyCareReport.Worksheet.EBOMWeightAndDimentions.Column.NetWeightUoM",sStringResourceFile, sLanguage);
		String strEBOMWAndDMasterPartName=i18nNow.getI18nString("emxCPN.FamilyCareReport.Worksheet.EBOMWeightAndDimentions.Column.MasterPartName",sStringResourceFile, sLanguage);
		String strEBOMWAndDMasterTitle=i18nNow.getI18nString("emxCPN.FamilyCareReport.Worksheet.EBOMWeightAndDimentions.Column.MasterTitle",sStringResourceFile, sLanguage);
		String strEBOMWAndDMasterRev=i18nNow.getI18nString("emxCPN.FamilyCareReport.Worksheet.EBOMWeightAndDimentions.Column.MasterRev",sStringResourceFile, sLanguage);
		String strEBOMWAndDDepth=i18nNow.getI18nString("emxCPN.FamilyCareReport.Worksheet.EBOMWeightAndDimentions.Column.Depth",sStringResourceFile, sLanguage);
		String strEBOMWAndDWidth=i18nNow.getI18nString("emxCPN.FamilyCareReport.Worksheet.EBOMWeightAndDimentions.Column.Width",sStringResourceFile, sLanguage);
		String strEBOMWAndDHeight=i18nNow.getI18nString("emxCPN.FamilyCareReport.Worksheet.EBOMWeightAndDimentions.Column.Height",sStringResourceFile, sLanguage);
		String strEBOMWAndDUnitofMeasure=i18nNow.getI18nString("emxCPN.FamilyCareReport.Worksheet.EBOMWeightAndDimentions.Column.UnitofMeasure",sStringResourceFile, sLanguage);
		//Added for requirement 37822 - starts
		String strEBOMNetWeight=EnoviaResourceBundle.getProperty(context,sStringResourceFile, context.getLocale(),"emxCPN.FamilyCareReport.Worksheet.EBOMWeightAndDimentions.Column.NetWeight");
		//Added for requirement 37822 - ends
		
		//Creating Header ---Begin
		//1 Change Action
		Cell cellChangeAction = rowHeaderEBOMWeightAndDimensions.createCell(0);
		cellChangeAction.setCellStyle(cellStyleEBOMWeightAndDimentions);
		cellChangeAction.setCellValue(strEBOMWAndDChangeAction);
		
		//2 Change Action 'Reason for Change'
		Cell cellChangeActionReasonForChange = rowHeaderEBOMWeightAndDimensions.createCell(1);
		cellChangeActionReasonForChange.setCellStyle(cellStyleEBOMWeightAndDimentions);
		cellChangeActionReasonForChange.setCellValue(strEBOMWAndDChangeActionReasonForChange);
		
		//3 Name/Number
		Cell cellNameOrNumber = rowHeaderEBOMWeightAndDimensions.createCell(2);
		cellNameOrNumber.setCellStyle(cellStyleEBOMWeightAndDimentions);
		cellNameOrNumber.setCellValue(strEBOMWAndDNameOrNumber);	
		
		//4 Title
		Cell cellTitle = rowHeaderEBOMWeightAndDimensions.createCell(3);
		cellTitle.setCellStyle(cellStyleEBOMWeightAndDimentions);
		cellTitle.setCellValue(strEBOMWAndDTitle);			
		
		//5 Type
		Cell cellType = rowHeaderEBOMWeightAndDimensions.createCell(4);
		cellType.setCellStyle(cellStyleEBOMWeightAndDimentions);
		cellType.setCellValue(strEBOMWAndDType);	

		//6 Revision
		//Code for requirement to addition of revision and state on all tabs except attribute -- Starts
		Cell cellRevision = rowHeaderEBOMWeightAndDimensions.createCell(5);
		cellRevision.setCellStyle(cellStyleEBOMWeightAndDimentions);
		cellRevision.setCellValue(strEBOMWAndDRevision);
		//Code for requirement to addition of revision and state on all tabs except attribute -- Ends
		
		//7 Material Number
		Cell cellMaterialNumber = rowHeaderEBOMWeightAndDimensions.createCell(6);
		cellMaterialNumber.setCellStyle(cellStyleEBOMWeightAndDimentions);
		cellMaterialNumber.setCellValue(strEBOMWAndDMaterialNumber);	
			
		//8 Material Title
		Cell cellMaterialTitle = rowHeaderEBOMWeightAndDimensions.createCell(7);
		cellMaterialTitle.setCellStyle(cellStyleEBOMWeightAndDimentions);
		cellMaterialTitle.setCellValue(strEBOMWAndDMaterialTitle);		
		
		//9 Level
		Cell cellLevel = rowHeaderEBOMWeightAndDimensions.createCell(8);
		cellLevel.setCellStyle(cellStyleEBOMWeightAndDimentions);
		cellLevel.setCellValue(strBOMWAndDLevel);		
		
		//10 State
		Cell cellState = rowHeaderEBOMWeightAndDimensions.createCell(9);
		cellState.setCellStyle(cellStyleEBOMWeightAndDimentions);
		cellState.setCellValue(strEBOMWAndDState);
		
		//11 Sequence Number
		Cell cellSequenceNumber = rowHeaderEBOMWeightAndDimensions.createCell(10);
		cellSequenceNumber.setCellStyle(cellStyleEBOMWeightAndDimentions);
		cellSequenceNumber.setCellValue(strEBOMWAndDSequenceNumber);
		
		//12 Qty
		Cell cellQty = rowHeaderEBOMWeightAndDimensions.createCell(11);
		cellQty.setCellStyle(cellStyleEBOMWeightAndDimentions);
		cellQty.setCellValue(strEBOMWAndDQty);
		
		//13 Gross Weight 
		Cell cellGrossWeight  = rowHeaderEBOMWeightAndDimensions.createCell(12);
		cellGrossWeight.setCellStyle(cellStyleEBOMWeightAndDimentions);
		cellGrossWeight.setCellValue(strEBOMWAndDGrossWeight);
		
		//14 Legacy Product Weight
		Cell cellLegacyProduct  = rowHeaderEBOMWeightAndDimensions.createCell(13);
		cellLegacyProduct.setCellStyle(cellStyleEBOMWeightAndDimentions);
		cellLegacyProduct.setCellValue(strEBOMWAndDLegacyProductWeight);
		
		//15 Legacy Weight Factor
		Cell cellWeightLegacyWeight  = rowHeaderEBOMWeightAndDimensions.createCell(14);
		cellWeightLegacyWeight.setCellStyle(cellStyleEBOMWeightAndDimentions);
		cellWeightLegacyWeight.setCellValue(strEBOMWAndDWeightLegacyWeightFactor);
		
		//16	 Weight UoM
		Cell cellFactorWeightUoM  = rowHeaderEBOMWeightAndDimensions.createCell(15);
		cellFactorWeightUoM.setCellStyle(cellStyleEBOMWeightAndDimentions);
		cellFactorWeightUoM.setCellValue(strEBOMWAndDWeightUoM);
		
		//17 Legacy Weight Factor UoM
		Cell cellLegacyWeightFactorUoM  = rowHeaderEBOMWeightAndDimensions.createCell(16);
		cellLegacyWeightFactorUoM.setCellStyle(cellStyleEBOMWeightAndDimentions);
		cellLegacyWeightFactorUoM.setCellValue(strEBOMWAndDLegacyWeightFactorUoM);
		
		//18 Net Weight Of Product In ConsumerUnit
		Cell cellNetWeightOfProductInConsumerUnit  = rowHeaderEBOMWeightAndDimensions.createCell(17);
		cellNetWeightOfProductInConsumerUnit.setCellStyle(cellStyleEBOMWeightAndDimentions);
		cellNetWeightOfProductInConsumerUnit.setCellValue(strEBOMWAndDNetWeightOfProductInConsumerUnit);
		
		//19 Net Weight UoM
		Cell cellNetWeightUoM  = rowHeaderEBOMWeightAndDimensions.createCell(18);
		cellNetWeightUoM.setCellStyle(cellStyleEBOMWeightAndDimentions);
		cellNetWeightUoM.setCellValue(strEBOMWAndDNetWeightUoM);
		
		//20 Master Part Name
		Cell cellMasterPartName  = rowHeaderEBOMWeightAndDimensions.createCell(19);
		cellMasterPartName.setCellStyle(cellStyleEBOMWeightAndDimentions);
		cellMasterPartName.setCellValue(strEBOMWAndDMasterPartName);
		
		
		//21 Master Title
		Cell cellMasterTitle  = rowHeaderEBOMWeightAndDimensions.createCell(20);
		cellMasterTitle.setCellStyle(cellStyleEBOMWeightAndDimentions);
		cellMasterTitle.setCellValue(strEBOMWAndDMasterTitle);
		
		//22 Master Revision
		Cell cellMasterRevision  = rowHeaderEBOMWeightAndDimensions.createCell(21);
		cellMasterRevision.setCellStyle(cellStyleEBOMWeightAndDimentions);
		cellMasterRevision.setCellValue(strEBOMWAndDMasterRev);
		
		//23 Depth
		Cell cellDepth  = rowHeaderEBOMWeightAndDimensions.createCell(22);
		cellDepth.setCellStyle(cellStyleEBOMWeightAndDimentions);
		cellDepth.setCellValue(strEBOMWAndDDepth);
		
		//24 Width
		Cell cellWidth  = rowHeaderEBOMWeightAndDimensions.createCell(23);
		cellWidth.setCellStyle(cellStyleEBOMWeightAndDimentions);
		cellWidth.setCellValue(strEBOMWAndDWidth);
		
		//25 Height
		Cell cellHeight  = rowHeaderEBOMWeightAndDimensions.createCell(24);
		cellHeight.setCellStyle(cellStyleEBOMWeightAndDimentions);
		cellHeight.setCellValue(strEBOMWAndDHeight);
		
		//26 Unit of Measure
		Cell cellUnitofMeasure  = rowHeaderEBOMWeightAndDimensions.createCell(25);
		cellUnitofMeasure.setCellStyle(cellStyleEBOMWeightAndDimentions);
		cellUnitofMeasure.setCellValue(strEBOMWAndDUnitofMeasure);
		
		//Added for requirement 37822 - starts
		//27 Net Weight
		Cell cellNetWeight  = rowHeaderEBOMWeightAndDimensions.createCell(26);
		cellNetWeight.setCellStyle(cellStyleEBOMWeightAndDimentions);
		cellNetWeight.setCellValue(strEBOMNetWeight);
		//Added for requirement 37822 - ends
		
		int rowCount1 = 0;	
		String strTypeName = DomainConstants.EMPTY_STRING;
		String strParentId = DomainConstants.EMPTY_STRING;
		//Updated for 2018x6 June Defect 42940
		String strExpandLevel=DomainConstants.EMPTY_STRING;
		String strPrevExpandLevel=pgV3Constants.ZERO;
		String strPrevTypeName=DomainConstants.EMPTY_STRING;
		int iPrevExpandLevel = 0;
		int iExpandLevel = 0;
		boolean bInsideLoop = false;
		for (int i=0;i<mlParentChildEBOMWD.size();i++){
			//Added code for 2018x.6 Requirement id 36700 Ability to generate Part and Spec report with without hyperlink Starts
			iRowCountAll = iRowCountAll + 1;
			int columnCount1 = 0;
			Map mp = (Map)mlParentChildEBOMWD.get(i);	
			//Updated for 2018x6 June Defect 42940 
			strTypeName = (String)mp.get(DomainConstants.SELECT_TYPE);
			strExpandLevel=pgV3Constants.ZERO;
			if(mp.containsKey("level")){
				strExpandLevel=(String)mp.get("level");
			} else{				
				strExpandLevel=pgV3Constants.ZERO;				
			}
			if(strExpandLevel==null){
				strExpandLevel=pgV3Constants.ZERO;
			}
			
			iExpandLevel = Integer.parseInt(strExpandLevel);
			//FP and FPP are not expanded in EBOM WD Tab
			if (pgV3Constants.TYPE_PGFINISHEDPRODUCT.equalsIgnoreCase(strPrevTypeName) || pgV3Constants.TYPE_FINISHEDPRODUCTPART.equalsIgnoreCase(strPrevTypeName) && !(pgV3Constants.ZERO).equals(strPrevExpandLevel)){
				while (iPrevExpandLevel<iExpandLevel) {					
					i++;
					bInsideLoop= true;
					mp = (Map)mlParentChildEBOMWD.get(i);
					if(mp.containsKey("level")){
						strExpandLevel=(String)mp.get("level");
					} else{				
						strExpandLevel=pgV3Constants.ZERO;				
					}
					iExpandLevel = Integer.parseInt(strExpandLevel);
				}
			}
			if(bInsideLoop) {
				strPrevTypeName=(String)mp.get(DomainConstants.SELECT_TYPE);
				bInsideLoop=false;
			}else {
				strPrevTypeName = strTypeName;
			}
			strPrevExpandLevel = strExpandLevel;
			iPrevExpandLevel = iExpandLevel;
			//END Updated for 2018x6 June Defect 42940
			Map hmCommonCol = new HashMap<>();
			hmCommonCol= (Map)mp.get("CommonColumns");
			if(null != hmCommonCol){
				strParentId = (String) hmCommonCol.get(DomainConstants.SELECT_ID);
			} 
			String strMasterPart = (String) mp.get("to["+pgV3Constants.RELATIONSHIP_CLASSIFIEDITEM+"].frommid["+pgV3Constants.RELATIONSHIP_PARTFAMILYREFERENCE+"].torel.to.id");
			
				//Added code for defect id: 32813--Starts
				XSSFRow row = sheetEBOMWeightAndDimentions.createRow(++rowCount1);
				//Added code for defect id: 32813--Starts
				String strId=(String)mp.get("id");
				String strCurrentState = (String)mp.get("ParentCurrentState");
				HashMap hm= new HashMap<>();
				String strTypeDisplayName=null;
				strTypeName = (String)mp.get("type");							
				strTypeDisplayName= getTypeDisplayName(context,strTypeName);
				String strTitle="";
				
				// Added by DSM Reports (Sogeti) for 22x.03 (May CW 2023) Defect 49457 - Start
				if(UIUtil.isNotNullAndNotEmpty(strId)) {
					bHasObjAccess = accessCheck(context,strUserName,strId);
				}
				// Added by DSM Reports (Sogeti) for 22x.03 (May CW 2023) Defect 49457 - End
				//Modified For Alternate Name --End			
				//Updated code for Req Id : 33634 - Hyperlinks--Starts
				//Added by DSM Reports (Sogeti) for 2022x.5 (APR CW 2024) Defect 55875 - Start
				String sCAID = (String) mp.get(SCAID);
				if( UIUtil.isNotNullAndNotEmpty(sCAID) && !sCAID.contains(HYPERLINK_PIPE)) {
					hm.put(0, HYPERLINK+mp.get("ChangeAction")+HYPERLINK_PIPE+sCAID);
				}else{
					hm.put(0,mp.get("ChangeAction"));
				}
				//Added by DSM Reports (Sogeti) for 2022x.5 (APR CW 2024) Defect 55875 - End
				//Updated code for Req Id : 33634 - Hyperlinks--Ends
				hm.put(1, mp.get("CAReasonForChange"));	
				//Updated code for Req Id : 33634 - Hyperlinks--Starts		
				hm.put(2, HYPERLINK+mp.get("ParentName")+HYPERLINK_PIPE+strParentId);
				//Updated code for Req Id : 33634 - Hyperlinks--Ends
				hm.put(3, mp.get("ParentTitle"));
				hm.put(4, strTypeDisplayName);
				//Code for requirement to addition of revision and state on all tabs except attribute -- Starts
				hm.put(5, mp.get("ParentRevision"));
				//Code for requirement to addition of revision and state on all tabs except attribute -- Ends
				//Updated code for Req Id : 33634 - Hyperlinks--Starts
				hm.put(6, HYPERLINK+mp.get("name")+HYPERLINK_PIPE+strId);
				//Updated code for Req Id : 33634 - Hyperlinks--Ends
				// Added by DSM Reports (Sogeti) for 22x.03 (May CW 2023) Defect 49457 - Start
				if(bHasObjAccess) {
				if(!mp.containsKey("level")){
					hm.put(7, strTitle);
				}
				else{
					hm.put(7, mp.get("attribute[Title]"));
				}
				hm.put(8, mp.get("level"));				
				hm.put(9, mp.get("current"));
				hm.put(10, mp.get("attribute[Find Number]"));
				hm.put(11, mp.get("attribute[Quantity]"));
				hm.put(12, mp.get("attribute[pgGrossWeightReal]"));
				hm.put(13, mp.get("attribute[pgLegacyProductWeight]"));
				hm.put(14, mp.get("attribute[pgLegacyWeightFactor]"));
				hm.put(15, mp.get("attribute[pgGrossWeightUnitOfMeasure]"));
				hm.put(16, mp.get("attribute[pgLegacyWeightFactorUoM]"));
				hm.put(17, mp.get("attribute[pgNetWeightOfProductInConsumerUnitReal]"));
				//Added for Defect Id :32151- Starts
				hm.put(18, mp.get("attribute[pgNetWeightOfProductInConsumerUnitUoM]"));
				//Added for Defect Id :32151- Ends
				//Updated code for Req Id : 33634 - Hyperlinks--Starts
				
				// Added by DSM Reports (Sogeti) for 22x.03 (May CW 2023) Defect 49457 - START
				if(UIUtil.isNotNullAndNotEmpty(strMasterPart)) {
					bHasObjAccess = accessCheck(context,strUserName,strMasterPart);
				}
				hm.put(19, HYPERLINK+mp.get("to[Classified Item].frommid[Part Family Reference].torel.to.name")+HYPERLINK_PIPE+strMasterPart);
				hm.put(21, mp.get("to[Classified Item].frommid[Part Family Reference].torel.to.revision"));
				if(bHasObjAccess) {
					hm.put(20, mp.get("to[Classified Item].frommid[Part Family Reference].torel.to.attribute[Title]"));
					hm.put(22, mp.get("to[Classified Item].frommid[Part Family Reference].torel.to.attribute[pgOuterDimensionLength]"));
					hm.put(23, mp.get("to[Classified Item].frommid[Part Family Reference].torel.to.attribute[pgOuterDimensionWidth]"));
					hm.put(24, mp.get("to[Classified Item].frommid[Part Family Reference].torel.to.attribute[pgOuterDimensionHeight]"));
					hm.put(25, mp.get("to[Classified Item].frommid[Part Family Reference].torel.to.attribute[pgDimensionUoM]"));
				} else {
					hm.put(20, NO_ACCESS);
					hm.put(22, NO_ACCESS);
					hm.put(23, NO_ACCESS);
					hm.put(24, NO_ACCESS);
					hm.put(25, NO_ACCESS);
				}
				// Added by DSM Reports (Sogeti) for 22x.03 (May CW 2023) Defect 49457 - END
				//Added for requirement 37822 - starts
				hm.put(26, mp.get(pgV3Constants.SELECT_ATTRIBUTE_PGNETWEIGHT));
				}else {
					hm.put(7, NO_ACCESS);
					hm.put(8, mp.get(STRLEVEL));	
					// Added by DSM Reports (Sogeti) for 22x.03 (August CW 2023) Defect 49457 - Start
                    hm.put(9, mp.get(DomainConstants.SELECT_CURRENT));
                    // Added by DSM Reports (Sogeti) for 22x.03 (August CW 2023) Defect 49457 - End
					hm.put(10, mp.get(ATTRIBUTE_FINDNUMBER));
					hm.put(11, mp.get(ATTRIBUTE_QUANTITY));
					hm.put(12, NO_ACCESS);
					hm.put(13, NO_ACCESS);
					hm.put(14, NO_ACCESS);
					hm.put(15, NO_ACCESS);
					hm.put(16, NO_ACCESS);
					hm.put(17, NO_ACCESS);
					hm.put(18, NO_ACCESS);
					hm.put(19, NO_ACCESS);
					hm.put(20, NO_ACCESS);
					hm.put(21, NO_ACCESS);
					hm.put(22, NO_ACCESS);
					hm.put(23, NO_ACCESS);
					hm.put(24, NO_ACCESS);
					hm.put(25, NO_ACCESS);
					hm.put(26, NO_ACCESS);
				}
				// Added by DSM Reports (Sogeti) for 22x.03 (May CW 2023) Defect 49457 - End
				//Added for requirement 37822 - starts
				

				//Added for requirement 37822 - ends
				//For Cells Creation in each Row		
				//if(!strCurrentState.equalsIgnoreCase("Release") && !strCurrentState.equalsIgnoreCase("Released")) {	
				XSSFCellStyle style = workbook.createCellStyle();
				style = setForeGroundColor(strCurrentState, style);
				//Added by DSM Reports (Sogeti) for 2022x.5 (APR CW 2024) Defect 55875 - Start
				XSSFCellStyle style1 = workbook.createCellStyle();
				//Added by DSM Reports (Sogeti) for 2022x.5 (APR CW 2024) Defect 55875 - End
				for(int j=0;j<hm.size();j++){								
					//Modified the code for _2022x_Aug CW Req-47097 :: Start
					// Modified by DSM Reports (Sogeti) for 22x.03 (August CW 2023) Defect 54091 - Start
					
					Cell cell = row.createCell(columnCount1++);
					if (j == 2) {
						style = makeColumnNumeric(workbook, style);
					}
					cell.setCellStyle(style);
					// Modified by DSM Reports (Sogeti) for 22x.03 (August CW 2023) Defect 54091 - End
					//Modified the code for _2022x_Aug CW Req-47097 :: End
					//Added code for Req Id : 33634 - Hyperlinks--Starts
					String strCellValue = (String)hm.get(j);

					if(UIUtil.isNotNullAndNotEmpty(strCellValue) && strCellValue.startsWith(HYPERLINK_COMPARE)){
						String[] strSplittedValue = strCellValue.split("\\|", -1); 
						String strHyperlinkId = strSplittedValue[(strSplittedValue.length)-1];
						String strValue = strSplittedValue[(strSplittedValue.length)-2];
						//Added code for 2018x.6 Requirement id 36700 Ability to generate Part and Spec report with without hyperlink Starts
						if(pgV3Constants.TRUE.equalsIgnoreCase(strHyperlink) && iRowCountAll < iHyperLinkLimit){
							getHyperlink(context,cell,workbook,strValue,strHyperlinkId,strCurrentState);
						
						} else if(UIUtil.isNotNullAndNotEmpty(strValue)) {					
							cell.setCellValue(strValue);
						}
						//Added code for 2018x.6 Requirement id 36700 Ability to generate Part and Spec report with without hyperlink Ends
					}else {
						cell.setCellValue((String)hm.get(j));
						//Added by DSM Reports (Sogeti) for 2022x.5 (APR CW 2024) Defect 55875 - Start
						if(j == 0) {
							style1.cloneStyleFrom(style);
							style1.setWrapText(true);
							cell.setCellStyle(style1);
						}
						//Added by DSM Reports (Sogeti) for 2022x.5 (APR CW 2024) Defect 55875 - End
					}
					//Added code for Req Id : 33634 - Hyperlinks--Starts
				}				
			
		}	
		sheetFormatter(sheetEBOMWeightAndDimentions); // Added by DSM Reports (Sogeti) for 22x.04 (Dec CW 2023) Defect 56156 - START/END
	} catch (Exception e) {
		outLog.print("Exception in updateWorksheetEBOMWeightAndDimensions: "+e+"\n");
		outLog.flush();
	}
}
	
	
	/**Method used to display the Substances And Materials in a new tab of the .xls file

	 * @param context

	 * @param args

	 */	
private void updateWorksheetSubstancesAndMaterials(Context context, XSSFWorkbook workbook,XSSFRow rowHeader,XSSFCellStyle cellStyle, MapList mlSubstanceAndMaterials ,XSSFSheet sheetSubstancesAndMaterials, String strUserName, String strHyperlink, XSSFCellStyle styleGlobal) {

 	try {
 		//Added code for 2018x.6 Requirement id 36700 Ability to generate Part and Spec report with without hyperlink Starts
 		String strHyperlinkLimit = EnoviaResourceBundle.getProperty(context, EMXCPNSTRINGRESOURCE, context.getLocale(),"emxCPN.PartAndSpecReport.HyperlinkLimit");
 		int iHyperLinkLimit = Integer.parseInt(strHyperlinkLimit);
 		int iRowCountAll=0;
 		//Added code for 2018x.6 Requirement id 36700 Ability to generate Part and Spec report with without hyperlink Ends
		String sStringResourceFile="emxCPNStringResource"; 
		String strPercentPostIndustrialRecyclate = PropertyUtil.getSchemaProperty(context,INDUSTRIALCYCLATEATTRIBUTESELECT);
		//Modified for Requirement -- 34942--starts
		String strColumnNames = EnoviaResourceBundle.getProperty(context, sStringResourceFile, context.getLocale(),"emxCPN.FamilyCareReport.Worksheet.SubstancesAndMaterials.ColumnTypes");
		String strColumnName = DomainConstants.EMPTY_STRING;
		String strColumnValue = DomainConstants.EMPTY_STRING;
		StringList slIndividualColumnNames = StringUtil.split(strColumnNames, COMMA);
		for (int i = 0;i<slIndividualColumnNames.size();i++) {
			String columnName = slIndividualColumnNames.get(i);
			strColumnName = String.valueOf(columnName).trim();
			strColumnValue = EnoviaResourceBundle.getProperty(context, sStringResourceFile, context.getLocale(),"emxCPN.FamilyCareReport.Worksheet.SubstancesAndMaterials.Column."+strColumnName);
			Cell cell = rowHeader.createCell(i);
			cell.setCellStyle(cellStyle);
			cell.setCellValue(strColumnValue);	
		}
		int rowCount1 = 0;
		String strTypeName = DomainConstants.EMPTY_STRING;
		XSSFCellStyle style = workbook.createCellStyle();
		style.setFillForegroundColor(IndexedColors.GREY_25_PERCENT.getIndex());	
		style.setFillPattern(FillPatternType.SOLID_FOREGROUND);
		String current = DomainConstants.EMPTY_STRING;
		//Added code for Req Id : 33634 - Hyperlinks--Starts
		String strParentId = DomainConstants.EMPTY_STRING;
		String strParentState = DomainConstants.EMPTY_STRING;
		String strChildId = DomainConstants.EMPTY_STRING;
		String strDerivedId = DomainConstants.EMPTY_STRING;
		String strCellValue = DomainConstants.EMPTY_STRING;
		String strHyperlinkId = DomainConstants.EMPTY_STRING;
		String strValue = DomainConstants.EMPTY_STRING;
		String strCAId = DomainConstants.EMPTY_STRING;
		String strChildTypeDisplayName = DomainConstants.EMPTY_STRING;
		String strChildTypeName = DomainConstants.EMPTY_STRING;
		String strTypeDisplayName = DomainConstants.EMPTY_STRING;
		String strEnvClass = DomainConstants.EMPTY_STRING;
		String strConsumerRecycled = DomainConstants.EMPTY_STRING;
		String strIndustrialRecycled = DomainConstants.EMPTY_STRING;
		String strParentName = DomainConstants.EMPTY_STRING;
		String strLanguage = context.getLocale().getLanguage();
		//Added code for Req Id : 33634 - Hyperlinks--Ends
		for (int i=0;i<mlSubstanceAndMaterials.size();i++){
			//Added code for 2018x.6 Requirement id 36700 Ability to generate Part and Spec report with without hyperlink Starts
			iRowCountAll = iRowCountAll + 1;
			//Added code for 2018x.6 Requirement id 36700 Ability to generate Part and Spec report with without hyperlink Ends
			XSSFRow row = sheetSubstancesAndMaterials.createRow(++rowCount1);
			int columnCount1 = 0;
			Map<String,Object> mp = (Map)mlSubstanceAndMaterials.get(i);
			boolean bHasAccess=false;
			HashMap<Integer,Object> hm= new HashMap<>();
			//Fetching CommonColumns --Begin		
			Map<String,String> htCommonCol= (Map)mp.get("CommonColumns");			
			//Fetching CommonColumns --End
			String strCurrent = htCommonCol.get(DomainConstants.SELECT_CURRENT);
			//Added code for Req Id : 33634 - Hyperlinks--Starts
			strChildId = (String)mp.get(DomainConstants.SELECT_ID);
			strDerivedId = htCommonCol.get("to["+pgV3Constants.RELATIONSHIP_DERIVED+STRFROM+DomainConstants.SELECT_ID);
			strParentId = htCommonCol.get(DomainConstants.SELECT_ID);
			strCAId = htCommonCol.get("sCAId");
			//Added code for Req Id : 33634 - Hyperlinks--Ends
			//Fetching the Types Display name --Begin
			strTypeName = htCommonCol.get(DomainConstants.SELECT_TYPE);
			strTypeDisplayName= i18nNow.getTypeI18NString(strTypeName, strLanguage);
			strChildTypeName = (String)mp.get(STRFINALCHILDTYPE);
			//Added the code for the Defect ID 34908 Starts
			if(UIUtil.isNotNullAndNotEmpty(strChildTypeName))
			{
				strChildTypeDisplayName= i18nNow.getTypeI18NString(strChildTypeName, strLanguage);
			
			//Added code for defect id 36860--Starts
			}else{
				strChildTypeDisplayName=DomainConstants.EMPTY_STRING;
			}
			//Added code for defect id 36860--Ends
			if(UIUtil.isNotNullAndNotEmpty(strChildId))
			{
				bHasAccess=accessCheck(context, strUserName, strChildId);
			}else{
				bHasAccess=true;
			}
			//Added the code for the Defect ID 34908 Ends
			if(mp.containsKey(ISPARENT)) {
				//Modified the code for 2018x.6 MAY CW Defect 46716 - starts
				strConsumerRecycled= getPostCycledValue((String) mp.get(STRCONSUMERCYCLATE));
				strIndustrialRecycled= getPostCycledValue((String)mp.get(STRINDUSTRIALCYCLATE));
				//Modified the code for 2018x.6 MAY CW Defect 46716 - Ends
			}
			else {
				strConsumerRecycled = getPostCycledValue((String)mp.get(pgV3Constants.SELECT_ATTRIBUTE_PGPOSTCONSUMERRECYCLEDCONTENT+".inputvalue"));
				strIndustrialRecycled = getPostCycledValue((String)mp.get("attribute[" + strPercentPostIndustrialRecyclate + "].inputvalue"));
			}
			///Added the code for the Defect ID : 25104 - CA Tab is Empty : Starts
			//Code Upgrade for 2018x Data Model - Starts	
			if(htCommonCol.get("CARealizedName") != null && htCommonCol.get("CAProposedName") != null) {
				//Updated code for Req Id : 33634 - Hyperlinks--Starts
				hm.put(0, HYPERLINK+htCommonCol.get("CARealizedName")+HYPERLINK_PIPE+strCAId);
				//Updated code for Req Id : 33634 - Hyperlinks--Ends
			} else if(htCommonCol.get("CARealizedName") != null){
				//Updated code for Req Id : 33634 - Hyperlinks--Starts
				hm.put(0, HYPERLINK+htCommonCol.get("CARealizedName")+HYPERLINK_PIPE+strCAId);
				//Updated code for Req Id : 33634 - Hyperlinks--Ends
			} else if(htCommonCol.get("CAProposedName") != null){
				//Updated code for Req Id : 33634 - Hyperlinks--Starts
				hm.put(0, HYPERLINK+htCommonCol.get("CAProposedName")+HYPERLINK_PIPE+strCAId);
				//Updated code for Req Id : 33634 - Hyperlinks--Ends
			} else {
				hm.put(0, DomainConstants.EMPTY_STRING);
			}
			//Code Upgrade for 2018x Data Model - Ends
			//Added the code for the Defect ID : 25104 - CA Tab is Empty : Ends
			hm.put(1, htCommonCol.get("attribute[Reason for Change]"));
			//Updated code for Req Id : 33634 - Hyperlinks--Starts
			if(mp.containsKey(ISPARENT)) {
				hm.put(2, HYPERLINK+mp.get("ParentName")+HYPERLINK_PIPE+htCommonCol.get(DomainConstants.SELECT_ID));
			}
			hm.put(2, HYPERLINK+mp.get("ParentName")+HYPERLINK_PIPE+strParentId);
			//Updated code for Req Id : 33634 - Hyperlinks--Ends
			if(mp.containsKey(ISPARENT)) {
				//Modified the code for 2018x.6 APR CW Defect 46718 - Starts
				hm.put(3, htCommonCol.get(pgV3Constants.SELECT_ATTRIBUTE_TITLE));
				//Modified the code for 2018x.6 APR CW Defect 46718 - Ends
			}else {
			hm.put(3, mp.get("ChildTitle"));
			}
			//Updated code for Req Id : 33634 - Hyperlinks--Starts
			hm.put(4, HYPERLINK+mp.get("ChildName")+HYPERLINK_PIPE+strChildId);
			//Updated code for Req Id : 33634 - Hyperlinks--Ends
			hm.put(5, mp.get("level"));
			//Added for Apr22 CW 41657 Starts
			hm.put(6,mp.get(ATTR_PGNSPCG));
			//Added for Apr22 CW 41657 Ends
			hm.put(7,strTypeDisplayName);
			//Code for requirement to addition of revision and state on all tabs except attribute -- Starts
			hm.put(8, htCommonCol.get(DomainConstants.SELECT_REVISION));
			//Code for requirement to addition of revision and state on all tabs except attribute -- Ends
			hm.put(9,strChildTypeDisplayName);
			if (bHasAccess) {
			hm.put(10,  mp.get("QuantityUnitOfMeasure"));
			hm.put(11, mp.get("Quantity"));
			hm.put(12, mp.get(pgV3Constants.SELECT_ATTRIBUTE_MANUFACTURER));
			hm.put(13, mp.get("Sequence value"));
			if(mp.containsKey(ISPARENT)) {
				hm.put(14, htCommonCol.get(DomainConstants.SELECT_DESCRIPTION));
			}else {
				hm.put(14, mp.get(DomainConstants.SELECT_DESCRIPTION));
			}
			hm.put(15, mp.get(pgV3Constants.SELECT_ATTRIBUTE_MARKETINGNAME));
			hm.put(16, mp.get(STRFINALENVCLASS));
			hm.put(17, mp.get("MaterialLayer"));
			//Updated for Defect : 31814 Starts
			hm.put(18, mp.get("Minimum Weight"));
			hm.put(19, mp.get("Maximum Weight"));
			hm.put(20, strConsumerRecycled);
			hm.put(21, strIndustrialRecycled);
			//Updated for Defect : 31814 Ends
			hm.put(22, mp.get("Comment"));	
			} else {
				hm.put(10,  NO_ACCESS);
				hm.put(11, NO_ACCESS);
				hm.put(12, NO_ACCESS);
				hm.put(13, NO_ACCESS);
				if(mp.containsKey(ISPARENT)) {
					hm.put(14, htCommonCol.get(DomainConstants.SELECT_DESCRIPTION));
				}else {
					hm.put(14, NO_ACCESS);
				}
				hm.put(15, NO_ACCESS);
				hm.put(16,NO_ACCESS);
				hm.put(17, NO_ACCESS);
				hm.put(18, NO_ACCESS);
				hm.put(19, NO_ACCESS);
				hm.put(20, NO_ACCESS);
				hm.put(21, NO_ACCESS);
				hm.put(22, NO_ACCESS);	
			}
			//Added code for Defect Id : 29818 - The value of State Revision in Substances & Materials sheet doesn't match the value in UI: Starts
			if(mp.containsKey(ISPARENT)) {
				strParentState = i18nNow.getStateI18NString(htCommonCol.get(DomainConstants.SELECT_POLICY), htCommonCol.get(DomainConstants.SELECT_CURRENT), strLanguage);
				hm.put(23, strParentState);
			} else {
			if(mp.get(DomainConstants.SELECT_CURRENT)!=null){
				current = i18nNow.getStateI18NString((String)mp.get(DomainConstants.SELECT_POLICY), (String)mp.get(DomainConstants.SELECT_CURRENT), strLanguage);
				if(UIUtil.isNotNullAndNotEmpty(current)){
					hm.put(23, current);
				} else {
					hm.put(23, mp.get(DomainConstants.SELECT_CURRENT));
				}
			} else {
				hm.put(23,DomainConstants.EMPTY_STRING);
			}
			}
			//Added code for Defect Id : 29818 - The value of State Revision in Substances & Materials sheet doesn't match the value in UI: Ends
			//Added for Req 42010:18x6 Apr CW -- Starts
			
			hm.put(24,mp.get("Certification_Name"));
			hm.put(25,mp.get("Certification_Status"));
			hm.put(26,mp.get("Certification_ExpDate"));
			hm.put(27,mp.get("Certification_SupDoc"));
			hm.put(28,mp.get("Certification_IntendedCerti"));
			//Added for Req 42010:18x6 Apr CW -- Ends
			//Modified the code for Req 42010:18x6 Apr CW -- Starts
			//Updated code for Req Id : 33634 - Hyperlinks--Starts
			hm.put(29, HYPERLINK+htCommonCol.get("to["+pgV3Constants.RELATIONSHIP_DERIVED+"].from.name")+HYPERLINK_PIPE+strDerivedId);
			//Updated code for Req Id : 33634 - Hyperlinks--Ends
			hm.put(30, htCommonCol.get("to["+pgV3Constants.RELATIONSHIP_DERIVED+STRFROM+pgV3Constants.SELECT_ATTRIBUTE_TITLE));
			if(mp.containsKey(ISPARENT)) {
				hm.put(31, mp.get(STRFINALPARTFAMILYNAME));
			} else {
			hm.put(31, mp.get("PartFamilyName"));
			}
			//Modified the code for Req 42010:18x6 Apr CW -- Ends
			////Modified for Requirement -- 34942--ends
			//For Cells Creation in each Row		
			for(int j=0;j<hm.size();j++){
				Cell cell = row.createCell(columnCount1++);
				//Added code for Req Id : 33634 - Hyperlinks--Starts
				strCellValue = (String)hm.get(j);
				if(!strCurrent.equalsIgnoreCase(pgV3Constants.STATE_RELEASE) && !strCurrent.equalsIgnoreCase(pgV3Constants.STATE_RELEASED)){
					cell.setCellStyle(style);
				}
				if(UIUtil.isNotNullAndNotEmpty(strCellValue) && strCellValue.startsWith(HYPERLINK_COMPARE)){
					String[] strSplittedValue = strCellValue.split("\\|",-1); 
					strHyperlinkId = strSplittedValue[(strSplittedValue.length)-1];
					strValue = strSplittedValue[(strSplittedValue.length)-2];
					//Added code for 2018x.6 Requirement id 36700 Ability to generate Part and Spec report with without hyperlink Starts
					if(pgV3Constants.TRUE.equalsIgnoreCase(strHyperlink) && iRowCountAll < iHyperLinkLimit){
						getHyperlink(context,cell,workbook,strValue,strHyperlinkId,strCurrent);
					
					} else if(UIUtil.isNotNullAndNotEmpty(strValue)) {					
						cell.setCellValue(strValue);
					}
					//Added code for 2018x.6 Requirement id 36700 Ability to generate Part and Spec report with without hyperlink Ends
				}
				else{
					cell.setCellValue((String)hm.get(j));
				}
				//Updated code for Req Id : 33634 - Hyperlinks--Ends
			}
		}
		sheetFormatter(sheetSubstancesAndMaterials); // Added by DSM Reports (Sogeti) for 22x.04 (Dec CW 2023) Defect 56156 - START/END
	} catch (Exception e) {
		outLog.print("Exception in updateWorksheetSubstancesAndMaterials: "+e+"\n");
		outLog.flush();
	}
}


private void updateWorksheetNotes(Context context, XSSFWorkbook workbook,XSSFRow rowHeaderNotes,XSSFCellStyle cellStyleNotes,MapList mlNotes,XSSFSheet sheetNotes, String strHyperlink, XSSFCellStyle styleGlobal){
	try {
		//Added code for 2018x.6 Requirement id 36700 Ability to generate Part and Spec report with without hyperlink Starts
		String strHyperlinkLimit = EnoviaResourceBundle.getProperty(context, EMXCPNSTRINGRESOURCE, context.getLocale(),"emxCPN.PartAndSpecReport.HyperlinkLimit");
		int iHyperLinkLimit = Integer.parseInt(strHyperlinkLimit);
		int iRowCountAll=0;
		//Added code for 2018x.6 Requirement id 36700 Ability to generate Part and Spec report with without hyperlink Ends
		String sStringResourceFile="emxCPNStringResource"; 
		String sLanguage = context.getSession().getLanguage();
		String strNotesChangeAction= i18nNow.getI18nString("emxCPN.FamilyCareReport.Worksheet.Column.ChangeAction",sStringResourceFile, sLanguage);
		String strNotesChangeActionReasonForChange=i18nNow.getI18nString("emxCPN.FamilyCareReport.Worksheet.Column.ChangeActionReasonForChange",sStringResourceFile, sLanguage);
		String strNotesNameOrNumber=i18nNow.getI18nString("emxCPN.FamilyCareReport.Worksheet.Column.NameOrNumber",sStringResourceFile, sLanguage);
		String strNotesTitle=i18nNow.getI18nString("emxCPN.FamilyCareReport.Worksheet.Column.Title",sStringResourceFile, sLanguage);
		String strNotesType=i18nNow.getI18nString("emxCPN.FamilyCareReport.Worksheet.Column.Type",sStringResourceFile, sLanguage);
		//Code for requirement to addition of revision and state on all tabs except attribute - Starts
        String strNotesRevision	= i18nNow.getI18nString("emxCPN.FamilyCareReport.Worksheet.Column.Revision",sStringResourceFile, sLanguage);
        String strNotesState		= i18nNow.getI18nString("emxCPN.FamilyCareReport.Worksheet.Column.State",sStringResourceFile, sLanguage);
        String strNotesSequence="Sequence";
        String strNotes="Notes";
        
		//Creating Header ---Begin
		//1 Change Action
		Cell cellChangeAction = rowHeaderNotes.createCell(0);
		cellChangeAction.setCellStyle(cellStyleNotes);
		cellChangeAction.setCellValue(strNotesChangeAction);

		//2 Change Action 'Reason for Change'
		Cell cellChangeActionReasonForChange = rowHeaderNotes.createCell(1);
		cellChangeActionReasonForChange.setCellStyle(cellStyleNotes);
		cellChangeActionReasonForChange.setCellValue(strNotesChangeActionReasonForChange);

		//3 Name/Number
		Cell cellNameOrNumber = rowHeaderNotes.createCell(2);
		cellNameOrNumber.setCellStyle(cellStyleNotes);
		cellNameOrNumber.setCellValue(strNotesNameOrNumber);

		//4 Title
		Cell cellTitle = rowHeaderNotes.createCell(3);
		cellTitle.setCellStyle(cellStyleNotes);
		cellTitle.setCellValue(strNotesTitle);

		//5 Type
		Cell cellType = rowHeaderNotes.createCell(4);
		cellType.setCellStyle(cellStyleNotes);
		cellType.setCellValue(strNotesType);			

		//6 Revision
		//Code for requirement to addition of revision and state on all tabs except attribute -- Starts
		Cell cellRevision = rowHeaderNotes.createCell(5);
		cellRevision.setCellStyle(cellStyleNotes);
		cellRevision.setCellValue(strNotesRevision);
		
		//7 State
		Cell cellState = rowHeaderNotes.createCell(6);
		cellState.setCellStyle(cellStyleNotes);
		cellState.setCellValue(strNotesState);
		//Code for requirement to addition of revision and state on all tabs except attribute -- Ends
		
		//8 Approve
		Cell cellSequence = rowHeaderNotes.createCell(7);
		cellSequence.setCellStyle(cellStyleNotes);
		cellSequence.setCellValue(strNotesSequence);

		//9 Date Of Approve
		Cell cellNotes = rowHeaderNotes.createCell(8);
		cellNotes.setCellStyle(cellStyleNotes);
		cellNotes.setCellValue(strNotes);

		int rowCount1 = 0;
		String strTypeName = DomainConstants.EMPTY_STRING;
		String strCurrentState = DomainConstants.EMPTY_STRING;
		Hashtable htCommonCol1 = new Hashtable<>();
		//Added code for Req Id : 33634 - Hyperlinks--Starts
		String strValue = DomainConstants.EMPTY_STRING;
		String strParentId = DomainConstants.EMPTY_STRING;
		String strHyperlinkId = DomainConstants.EMPTY_STRING;
		String strCellValue = DomainConstants.EMPTY_STRING;
		String strCAId = DomainConstants.EMPTY_STRING;
		//Added code for Req Id : 33634 - Hyperlinks--Ends
		for (int i=0;i<mlNotes.size();i++){
			//Added code for 2018x.6 Requirement id 36700 Ability to generate Part and Spec report with without hyperlink Starts
			iRowCountAll = iRowCountAll + 1;
			//Added code for 2018x.6 Requirement id 36700 Ability to generate Part and Spec report with without hyperlink Ends
			XSSFRow row = sheetNotes.createRow(++rowCount1);
			int columnCount1 = 0;
			Map mp = (Map)mlNotes.get(i);
			HashMap hm= new HashMap<>();
			Hashtable htCommonCol = new Hashtable<>();
			htCommonCol = (Hashtable) mp.get("CommonColumns");
			String strId = (String) htCommonCol.get(DomainConstants.SELECT_ID);
			String strTypeDisplayName=null;
			strTypeName =(String)htCommonCol.get("type");
			strCurrentState =(String)htCommonCol.get("current");
			strTypeDisplayName= getTypeDisplayName(context,strTypeName);
			//Added code for Req Id : 33634 - Hyperlinks--Starts
			strParentId = (String)htCommonCol.get("id");
			strCAId = (String)htCommonCol.get("sCAId");
			//Added code for Req Id : 33634 - Hyperlinks--Ends
			//if(!strCurrentState.equalsIgnoreCase("Release") && !strCurrentState.equalsIgnoreCase("Released")){
			//Added by DSM Reports (Sogeti) for 2022x.5 (APR CW 2024) Defect 55875 - Start
			if(UIUtil.isNotNullAndNotEmpty(strCAId) && !strCAId.contains(HYPERLINK_PIPE)) {
				if(htCommonCol.get("CARealizedName") != null && htCommonCol.get("CAProposedName") != null) {
					//Updated code for Req Id : 33634 - Hyperlinks--Starts	
					hm.put(0, HYPERLINK+htCommonCol.get("CARealizedName")+HYPERLINK_PIPE+strCAId);
					//Updated code for Req Id : 33634 - Hyperlinks--Ends
					} else if(htCommonCol.get("CARealizedName") != null){
						//Updated code for Req Id : 33634 - Hyperlinks--Starts
						hm.put(0, HYPERLINK+htCommonCol.get("CARealizedName")+HYPERLINK_PIPE+strCAId);
						//Updated code for Req Id : 33634 - Hyperlinks--Ends	
					} else if(htCommonCol.get("CAProposedName") != null){
						//Updated code for Req Id : 33634 - Hyperlinks--Starts
						hm.put(0, HYPERLINK+htCommonCol.get("CAProposedName")+HYPERLINK_PIPE+strCAId);
						//Updated code for Req Id : 33634 - Hyperlinks--Ends
					} else {
						hm.put(0, DomainConstants.EMPTY_STRING);
					}
			}else {
				hm.put(0,htCommonCol.get(CAPROPOSEDNAME));
			}
			//Added by DSM Reports (Sogeti) for 2022x.5 (APR CW 2024) Defect 55875 - End
			hm.put(1, htCommonCol.get("attribute[Reason for Change]"));
			//Updated code for Req Id : 33634 - Hyperlinks--Starts
			hm.put(2, HYPERLINK+htCommonCol.get("name")+HYPERLINK_PIPE+strParentId);
			//Updated code for Req Id : 33634 - Hyperlinks--Ends
			hm.put(3, htCommonCol.get("attribute[Title]"));
			hm.put(4, strTypeDisplayName);
			//Code for requirement to addition of revision and state on all tabs except attribute -- Starts
			hm.put(5, htCommonCol.get("revision"));
			hm.put(6, strCurrentState);
			//Code for requirement to addition of revision and state on all tabs except attribute -- Ends
			hm.put(7, mp.get("Sequence"));
			hm.put(8, mp.get("Notes"));
			XSSFCellStyle style = workbook.createCellStyle();
			style = setForeGroundColor(strCurrentState, style);
			//Added by DSM Reports (Sogeti) for 2022x.5 (APR CW 2024) Defect 55875 - Start
			XSSFCellStyle style1 = workbook.createCellStyle();
			//Added by DSM Reports (Sogeti) for 2022x.5 (APR CW 2024) Defect 55875 - End
			//For Cells Creation in each Row		
			for(int j=0;j<hm.size();j++){								
				//Modified the code for _2022x_Aug CW Req-47097 - Start
				// Modified by DSM Reports (Sogeti) for 22x.03 (August CW 2023) Defect 54091 - Start
				Cell cell = row.createCell(columnCount1++);
				if (j == 2) {
					style = makeColumnNumeric(workbook, style);
				}
				cell.setCellStyle(style);
				
				// Modified by DSM Reports (Sogeti) for 22x.03 (August CW 2023) Defect 54091 - Start
				//Modified the code for _2022x_Aug CW Req-47097 - End
				//Added code for Req Id : 33634 - Hyperlinks--Starts
				strCellValue = (String)hm.get(j);
				if(UIUtil.isNotNullAndNotEmpty(strCellValue) && strCellValue.startsWith(HYPERLINK_COMPARE)){
					String[] strSplittedValue = strCellValue.split("\\|",-1); 
					strHyperlinkId = strSplittedValue[(strSplittedValue.length)-1];
					strValue = strSplittedValue[(strSplittedValue.length)-2];
					//Added code for 2018x.6 Requirement id 36700 Ability to generate Part and Spec report with without hyperlink Starts
					if(pgV3Constants.TRUE.equalsIgnoreCase(strHyperlink) && iRowCountAll < iHyperLinkLimit){
						getHyperlink(context,cell,workbook,strValue,strHyperlinkId,strCurrentState);
					
					} else if(UIUtil.isNotNullAndNotEmpty(strValue)) {					
						cell.setCellValue(strValue);
						//Added code for 2018x.6 Requirement id 36700 Ability to generate Part and Spec report with without hyperlink Ends
					}
				}else {
					cell.setCellValue((String)hm.get(j));
					//Added by DSM Reports (Sogeti) for 2022x.5 (APR CW 2024) Defect 55875 - Start
					if(j == 0) {
						style1.cloneStyleFrom(style);
						style1.setWrapText(true);
						cell.setCellStyle(style1);
					}
					//Added by DSM Reports (Sogeti) for 2022x.5 (APR CW 2024) Defect 55875 - End
				}
				//Added code for Req Id : 33634 - Hyperlinks--Starts
			}
		}
		sheetFormatter(sheetNotes); // Added by DSM Reports (Sogeti) for 22x.04 (Dec CW 2023) Defect 56156 - START/END
	} catch (Exception e) {
		outLog.print("Exception in updateWorksheetNotes: "+e+"\n");
		outLog.flush();
	}
}
/**
 * this method is used to get all the Materials And Composition
 * 
 * @param args
 * @return MapList
 * @throws Exception
 */
private MapList getMaterialsAndComposition(Context context,DomainObject dobjPart, Map<String,Object> mpObjectCommon, String strUserName) throws FrameworkException{
	//Added the code for Defect 49698 - Spec Reader Access Issue - Starts
	boolean hasAccess = false;
	boolean isContextPushed = false;
	//Added the code for Defect 49698 - Spec Reader Access Issue - Ends
	MapList mlMaterialsAndComposition=new MapList();
	MapList mlImAndSubstanceFirstLevelList=new MapList();
	MapList mlSubstanceForIMSecondList=new MapList();
	String strIsContaminant=DomainConstants.EMPTY_STRING;
	Map<String,Object> mpInternalMaterialFirstLevel=new HashMap<>();
	 Map<String,Object> mpInternalMaterialSecondLevel=new HashMap<>();
	 Map<String,Object> mpInternalMaterialSecondLevelSubstance=new HashMap<>();
	String strInternalMaterialSecondId =DomainConstants.EMPTY_STRING;
	String strInternalMaterialSecondType = DomainConstants.EMPTY_STRING; 
	int mlSubstanceForIMSecondListSize=0;
	int mpInternalMaterial1MapListSize =0;
	
	StringList objectSelects = new StringList(DomainConstants.SELECT_ID);
	objectSelects.add(DomainConstants.SELECT_NAME);
	objectSelects.add(DomainConstants.SELECT_TYPE);
	objectSelects.add(DomainConstants.SELECT_DESCRIPTION);
	objectSelects.add(DomainConstants.SELECT_CURRENT);
	objectSelects.add(DomainConstants.SELECT_POLICY);
	objectSelects.add(DomainConstants.SELECT_REVISION);
	objectSelects.add(DomainConstants.SELECT_ORGANIZATION);
	objectSelects.add(FormulationAttribute.TOTAL_QUANTITY_OF_RESTRICTED_SUBSTANCE.getAttributeSelect(context));
	objectSelects.add(FormulationAttribute.CONTAIN_RESTRICTED_SUBSTANCES.getAttributeSelect(context));
	objectSelects.add(FormulationAttribute.EXTERNAL_REVISION_LEVEL.getAttributeSelect(context));
	objectSelects.add(FormulationAttribute.MANUFACTURER.getAttributeSelect(context));
	objectSelects.add(FormulationAttribute.TRADE_NAME.getAttributeSelect(context));
	objectSelects.add("type.kindof["+FormulationType.MATERIAL.getType(context)+"]");
	objectSelects.add("type.kindof["+FormulationType.SUBSTANCE.getType(context)+"]");
	objectSelects.add(FormulationAttribute.EC_NUMBER.getAttributeSelect(context));
	objectSelects.add(pgV3Constants.SELECT_ATTRIBUTE_SUBSTANCENAME);
	objectSelects.add(FormulationAttribute.TITLE.getAttributeSelect(context));
	objectSelects.add(pgV3Constants.SELECT_ATTRIBUTE_CASNUMBER);
	objectSelects.add("attribute["+pgV3Constants.ATTRIBUTE_INTERNAL_MATERIAL_FOR+"]");
	
	Pattern objType = new Pattern(FormulationType.MATERIAL.getType(context));
	Pattern relType = new Pattern(FormulationRelationship.COMPONENT_MATERIAL.getRelationship(context));

	objType.addPattern(FormulationType.SUBSTANCE.getType(context));
	relType.addPattern(FormulationRelationship.COMPONENT_SUBSTANCE.getRelationship(context));
	relType.addPattern(FormulationRelationship.SECURE_COMPONENT_SUBSTANCE.getRelationship(context));
	
	StringList lstRelSelects = new StringList(DomainConstants.SELECT_RELATIONSHIP_ID);

	lstRelSelects.add(DomainConstants.SELECT_RELATIONSHIP_NAME);
	lstRelSelects.add(pgV3Constants.SELECT_ATTRIBUTE_PGMINIMUMPERCENTWEIGHTBYWEIGHT+STRINPUTVALUE);
	lstRelSelects.add(pgV3Constants.SELECT_ATTRIBUTE_PGMAXIMUMPERCENTWEIGHTBYWEIGHT+STRINPUTVALUE);	
	lstRelSelects.add(pgV3Constants.SELECT_ATTRIBUTE_MAXIMUMWEIGHT+STRINPUTVALUE);	
	lstRelSelects.add(pgV3Constants.SELECT_ATTRIBUTE_MINIMUMWEIGHT+STRINPUTVALUE);	

	lstRelSelects.add(FormulationAttribute.IS_CONTAMINANT.getAttributeSelect(context));
	lstRelSelects.add(FormulationAttribute.FILL.getAttributeSelect(context));
	lstRelSelects.add(FormulationAttribute.IS_TARGET_MATERIAL.getAttributeSelect(context));
	lstRelSelects.add(FormulationAttribute.IS_COLORANT.getAttributeSelect(context));
	lstRelSelects.add(FormulationAttribute.ACTIVE_INGREDIENT_FLAG.getAttributeSelect(context));
	lstRelSelects.add(FormulationAttribute.PRESERVATIVE_FLAG.getAttributeSelect(context));
	lstRelSelects.add(pgV3Constants.SELECT_ATTRIBUTE_QUANTITYUNITOFMEASURE);
	lstRelSelects.add(pgV3Constants.SELECT_ATTRIBUTE_QSTOCOMPOSITE);
	lstRelSelects.add(pgV3Constants.SELECT_ATTRIBUTE_QUANTITY+STRINPUTVALUE);
	lstRelSelects.add(pgV3Constants.SELECT_ATTRIBUTE_QUANTITY);
	lstRelSelects.add(pgV3Constants.SELECT_ATTRIBUTE_APPLICATION);
	try{
	//code to get the connected "Internal Material" connected to the Raw Material
		//Added the code for Defect 49698 - Spec Reader Access Issue - Starts
		if(SPECREADER.equalsIgnoreCase(strOriginatingSource)) {
			hasAccess = accessCheck(context, strUserName, (String)dobjPart.getInfo(context, DomainConstants.SELECT_ID));
			if(hasAccess) {
				//Pushing User Agent Context to get the Data if the Spec Reader User have access
				ContextUtil.pushContext(context,PropertyUtil.getSchemaProperty(context,"User Agent"),DomainConstants.EMPTY_STRING,DomainConstants.EMPTY_STRING);
				isContextPushed = true;
				
			}
		}
		//Added the code for Defect 49698 - Spec Reader Access Issue - Ends
	MapList mpInternalMaterialLevel1MapList=dobjPart.getRelatedObjects(context, 
			relType.getPattern(),
			objType.getPattern(), 
			objectSelects, 
			lstRelSelects, 
			false,
			true,
			(short) 1,
			DomainConstants.EMPTY_STRING, 
			DomainConstants.EMPTY_STRING,
			0);
	String strInternalMaterialId = DomainConstants.EMPTY_STRING;

	if(!mpInternalMaterialLevel1MapList.isEmpty()) {
		int mpInternalMaterialMapListSize =mpInternalMaterialLevel1MapList.size();
		for(int i=0;i<mpInternalMaterialMapListSize;i++){
		mpInternalMaterialFirstLevel= (Map<String, Object>) mpInternalMaterialLevel1MapList.get(i);
		mpInternalMaterialFirstLevel=getQuantityAndMaxWeight(context,mpInternalMaterialFirstLevel);
		  
			//added the first 5 column details for the tab
			mpInternalMaterialFirstLevel.put(STRFINALCOMMONCOLUMNS, mpObjectCommon);
			
			mlMaterialsAndComposition.add(mpInternalMaterialFirstLevel);
			
			strInternalMaterialId = (String)mpInternalMaterialFirstLevel.get(DomainConstants.SELECT_ID); 
			 if(UIUtil.isNotNullAndNotEmpty(strInternalMaterialId)) {
				DomainObject dobjInternalMaterial = DomainObject.newInstance(context, strInternalMaterialId);
		
				//code to get the connected First Level "Internal Material" and Substance connected to the Interanl Materials
				mlImAndSubstanceFirstLevelList =dobjInternalMaterial.getRelatedObjects(context, 
				relType.getPattern(),
				objType.getPattern(), 
				objectSelects, 
				lstRelSelects, 
				false,
				true,
				(short) 1,
				DomainConstants.EMPTY_STRING, 
				DomainConstants.EMPTY_STRING,
				0); 
				
		
		if(!mlImAndSubstanceFirstLevelList.isEmpty()) {
			 mpInternalMaterial1MapListSize =mlImAndSubstanceFirstLevelList.size();
			for(int j=0;j<mpInternalMaterial1MapListSize;j++){
				mpInternalMaterialSecondLevel = (Map<String,Object>)mlImAndSubstanceFirstLevelList.get(j);
				strInternalMaterialSecondId = (String)mpInternalMaterialSecondLevel.get(DomainConstants.SELECT_ID);
				strInternalMaterialSecondType = (String)mpInternalMaterialSecondLevel.get(DomainConstants.SELECT_TYPE);
				  strIsContaminant=(String)mpInternalMaterialSecondLevel.get(pgV3Constants.SELECT_ATTRIBUTE_ISCONTAMINANT);
				  mpInternalMaterialSecondLevel=getQuantityAndMaxWeight(context,mpInternalMaterialSecondLevel);
				  //added the first 5 column details for the tab
				  mpInternalMaterialSecondLevel.put(STRFINALCOMMONCOLUMNS, mpObjectCommon);
					mlMaterialsAndComposition.add(mpInternalMaterialSecondLevel);
					//fiter on the base of type "Internal Material"
					if(strInternalMaterialSecondType.equals(pgV3Constants.TYPE_INTERNALMATERIAL) && UIUtil.isNotNullAndNotEmpty(strInternalMaterialSecondId)) {
				
						DomainObject doObjInternalMaterialSecond = DomainObject.newInstance(context, strInternalMaterialSecondId);
						//code to get the connected Substance connected to the Interanl Materials
						mlSubstanceForIMSecondList=doObjInternalMaterialSecond.getRelatedObjects(context, 
							relType.getPattern(),
							objType.getPattern(), 
							objectSelects, 
							lstRelSelects, 
							false,
							true,
							(short) 1,
							DomainConstants.EMPTY_STRING, 
							DomainConstants.EMPTY_STRING,
							0);
						if(!mlSubstanceForIMSecondList.isEmpty()) {
							 mlSubstanceForIMSecondListSize =mlSubstanceForIMSecondList.size();
							for(int k=0;k<mlSubstanceForIMSecondListSize;k++){
								mpInternalMaterialSecondLevelSubstance = (Map<String,Object>)mlSubstanceForIMSecondList.get(k);
								mpInternalMaterialSecondLevelSubstance=getQuantityAndMaxWeight(context,mpInternalMaterialSecondLevelSubstance);
								
								mpInternalMaterialSecondLevelSubstance.put(STRFINALCOMMONCOLUMNS, mpObjectCommon);
								
								mlMaterialsAndComposition.add(mpInternalMaterialSecondLevelSubstance);
							}
						}	
				
				}
			}
			
				
				
		     }
	      }	
	 
		
	 }
	} 
	}catch (Exception e) {
		outLog.print("Exception in getMaterialsAndComposition: "+e+"\n");
		outLog.flush();
		//Added the code for Defect 49698 - Spec Reader Access Issue - Starts
	}finally {
		if(isContextPushed) {
			ContextUtil.popContext(context);
		}
	}
	//Added the code for Defect 49698 - Spec Reader Access Issue - Ends
	return mlMaterialsAndComposition;
}	

//Modified to show blank value for column Max Weight & Target Quantity based on IsContaminant is True Or false for the row.
private Map<String,Object> getQuantityAndMaxWeight(Context context,Map<String,Object> mpInternalMaterialFirstLevel) throws FrameworkException
{
	String strInternalMaterialId = DomainConstants.EMPTY_STRING;
	String strIsContaminant=DomainConstants.EMPTY_STRING;
	String strType=DomainConstants.EMPTY_STRING;
	String strInternalMaterialFor=DomainConstants.EMPTY_STRING;
	String strQty=DomainConstants.EMPTY_STRING;
	String strMaxWeight=DomainConstants.EMPTY_STRING;
	String strRelName=DomainConstants.EMPTY_STRING;
	String strInternalMaterialSecondId =DomainConstants.EMPTY_STRING;
	String isSubstanceKindType=DomainConstants.EMPTY_STRING;
	Map<String,Object> mpInternalMaterialSecondLevel=new HashMap<>();
 
	StringList lstRelSelects = new StringList(DomainConstants.SELECT_RELATIONSHIP_ID);
	lstRelSelects.add(pgV3Constants.SELECT_ATTRIBUTE_QUANTITY);
	lstRelSelects.add(DomainConstants.SELECT_RELATIONSHIP_NAME);
	lstRelSelects.add(FormulationAttribute.IS_CONTAMINANT.getAttributeSelect(context));
			
	StringList objectSelects = new StringList(DomainConstants.SELECT_ID);
	objectSelects.add(DomainConstants.SELECT_NAME);
	objectSelects.add(DomainConstants.SELECT_TYPE);
	objectSelects.add(DomainConstants.SELECT_CURRENT);
	objectSelects.add(DomainConstants.SELECT_REVISION);
	objectSelects.add("type.kindof["+pgV3Constants.TYPE_SUBSTANCE+"]");
	BigDecimal dDefaultValue = BigDecimal.valueOf(0.0);
	BigDecimal dQuantites = BigDecimal.valueOf(0.0);
	int mlImAndSubstanceFirstLevelListSize=0;
	 
		MapList mlImAndSubstanceFirstLevelList=new MapList();
		try {	

			strInternalMaterialId = (String)mpInternalMaterialFirstLevel.get(DomainConstants.SELECT_ID);
			strIsContaminant=(String)mpInternalMaterialFirstLevel.get(pgV3Constants.SELECT_ATTRIBUTE_ISCONTAMINANT);
			strMaxWeight=(String)mpInternalMaterialFirstLevel.get(pgV3Constants.SELECT_ATTRIBUTE_MAXIMUMWEIGHT+STRINPUTVALUE);
			 if(strIsContaminant.equalsIgnoreCase(pgV3Constants.TRUE))
			  {
				 if ((UIUtil.isNullOrEmpty(strMaxWeight) || ("0.0".equals(strMaxWeight))))
					{
						strMaxWeight = (String)mpInternalMaterialFirstLevel.get(pgV3Constants.SELECT_ATTRIBUTE_QUANTITY);
					}
				  mpInternalMaterialFirstLevel.put(STRQUANTITY,DomainConstants.EMPTY_STRING);
			  }
			 
			 else
			 { 
					strType=(String)mpInternalMaterialFirstLevel.get(DomainConstants.SELECT_TYPE);
					//strQty=(String)mpInternalMaterialFirstLevel.get(pgV3Constants.SELECT_ATTRIBUTE_QUANTITY+STRINPUTVALUE);
					strQty=(String)mpInternalMaterialFirstLevel.get(pgV3Constants.SELECT_ATTRIBUTE_QUANTITY);
					if(strType.equals(pgV3Constants.TYPE_INTERNALMATERIAL))
					{
						 strInternalMaterialFor=(String) mpInternalMaterialFirstLevel.get("attribute["+pgV3Constants.ATTRIBUTE_INTERNAL_MATERIAL_FOR+"]");
						
						 if(pgV3Constants.CONSTANT_PRODUCT.equalsIgnoreCase(strInternalMaterialFor))
						 {
							 if(UIUtil.isNotNullAndNotEmpty(strInternalMaterialId)) {
								
								 DomainObject	dobjInternalMaterial = DomainObject.newInstance(context, strInternalMaterialId);
							
							//code to get the connected First Level "Internal Material" and Substance connected to the Interanl Materials
							mlImAndSubstanceFirstLevelList =dobjInternalMaterial.getRelatedObjects(context, 
									pgV3Constants.RELATIONSHIP_COMPONENT_SUBSTANCE,
									pgV3Constants.TYPE_SUBSTANCE, 
									objectSelects, 
									lstRelSelects, 
									false,
									true,
									(short) 1,
									DomainConstants.EMPTY_STRING, 
									DomainConstants.EMPTY_STRING,
									0); 
						
						 String strSubIsContaminant =DomainConstants.EMPTY_STRING;
						 String strInternalMaterialSecondType = DomainConstants.EMPTY_STRING;
						 StringList slQuantList = new StringList();
						 
						 	if(!mlImAndSubstanceFirstLevelList.isEmpty()) {
						 		mlImAndSubstanceFirstLevelListSize=mlImAndSubstanceFirstLevelList.size();
									for(int m=0;m<mlImAndSubstanceFirstLevelListSize;m++){
										mpInternalMaterialSecondLevel= (Map)mlImAndSubstanceFirstLevelList.get(m);
										strInternalMaterialSecondId= (String)mpInternalMaterialSecondLevel.get(DomainConstants.SELECT_ID);
										strInternalMaterialSecondType = (String)mpInternalMaterialSecondLevel.get(DomainConstants.SELECT_TYPE);
										strRelName=(String)mpInternalMaterialSecondLevel.get(DomainConstants.SELECT_RELATIONSHIP_NAME);
										//Added the code for the Defect ID 34908 Starts
										isSubstanceKindType=(String)mpInternalMaterialSecondLevel.get("type.kindof["+pgV3Constants.TYPE_SUBSTANCE+"]");
										if(STRCOMPONENTSUBSTANCE.equals(strRelName) && (pgV3Constants.TRUE).equalsIgnoreCase(isSubstanceKindType))
										{
											//Added the code for the Defect ID 34908 Ends
											strSubIsContaminant=(String)mpInternalMaterialSecondLevel.get(pgV3Constants.SELECT_ATTRIBUTE_ISCONTAMINANT);
											if(!(pgV3Constants.TRUE).equalsIgnoreCase(strSubIsContaminant)) {
												slQuantList.add((String)mpInternalMaterialSecondLevel.get(pgV3Constants.SELECT_ATTRIBUTE_QUANTITY));
											}
											
										}
									}
							
						 }

						 	slQuantList.sort();
							for(int p=0; p<slQuantList.size(); p++){
								dQuantites = dQuantites.add(new BigDecimal(slQuantList.get(p)));   
							}
							
							if(dQuantites.compareTo(dDefaultValue)!=0){
								mpInternalMaterialFirstLevel.put(STRQUANTITY, String.valueOf(dQuantites));
								
							}else{
								mpInternalMaterialFirstLevel.put(STRQUANTITY,strQty );
								
							}
						 	 
						 }
					}
						 else
						 {
							 mpInternalMaterialFirstLevel.put(STRQUANTITY,strQty);
						 }
						
		}
		else
		{
			mpInternalMaterialFirstLevel.put(STRQUANTITY,strQty);
		}			
	
		}
	
			mpInternalMaterialFirstLevel.put(STRMAXWEIGHT, strMaxWeight);
			 
} catch (Exception e) {
	e.printStackTrace();
}

		return mpInternalMaterialFirstLevel;
}

/**
 * this method is used to get the QS And Target Value
 * @param args
 * @return String
 * @throws Exception
 */
private String getQSAndTargetValue(Context context,String qsComposite, String isTargetMaterial) throws Exception {
	String strQSAndTargetValue = DomainConstants.EMPTY_STRING;
	if(UIUtil.isNotNullAndNotEmpty(qsComposite) && UIUtil.isNotNullAndNotEmpty(isTargetMaterial)){
		strQSAndTargetValue	 = (qsComposite.equalsIgnoreCase("TRUE"))? CPNUIUtil.getProperty(context, "emxCPN.Range.QSComposite"):
						(isTargetMaterial.equalsIgnoreCase("TRUE"))? CPNUIUtil.getProperty(context, "emxCPN.Range.TargetMaterial") : "";
			}

		return strQSAndTargetValue;
	}
/**
 * this method is used to get usage Flags Value
 * @param args
 * @return StringList
 * @throws Exception
 */
//updated the code for Defect ID : 33186 - Family Care - DSMReport not correct for CM and Supplier User : starts
private StringList getUsageFlagsValue(Context context,String strType,String drugActive, String colorant, String preservative) throws Exception {
	StringList strList = new StringList();
	//22x updgrade defect 50261 - Start
	if(UIUtil.isNotNullAndNotEmpty(strType) && strType.equalsIgnoreCase(pgV3Constants.TYPE_SUBSTANCE) && UIUtil.isNotNullAndNotEmpty(drugActive) && UIUtil.isNotNullAndNotEmpty(colorant) && UIUtil.isNotNullAndNotEmpty(preservative)){
		//22x updgrade defect 50261 - End	
		if(drugActive.equalsIgnoreCase("Yes"))
				strList.add(CPNUIUtil.getProperty(context, "emxCPN.Range.DrugActive"));
			 if(colorant.equalsIgnoreCase("TRUE"))
				strList.add(CPNUIUtil.getProperty(context, "emxCPN.Range.Colorant"));
			 if(preservative.equalsIgnoreCase("Yes")){
				strList.add(CPNUIUtil.getProperty(context, "emxCPN.Range.Preservative"));
			}

	
	}
		return strList;
	}

//updated the code for Defect ID : 33186 - Family Care - DSMReport not correct for CM and Supplier User : Ends
/**
 * this method is used to filter the Hir Data from BOM Data on click of Expand button
 * @param args
 * @return MapList
 * @throws Exception 
 * @throws Exception
 */
/**Method used to display the View Substitues in a new tab of the .xls file

 * @param context

 * @param args

 */	
////Added the code for 2018x Spec REader Defect 47026,47112 - Starts
private void updateWorksheetViewSubstitutes(Context context, XSSFWorkbook workbook,XSSFRow rowHeader,XSSFCellStyle cellStyle, MapList mlViewSubstituteDetails,XSSFSheet sheetViewSubstitues,String strHyperlink,String strUserName, XSSFCellStyle styleGlobal) {
	//Added the code for 2018x Spec REader Defect 47026,47112 - Ends
	try {
		//Added code for 2018x.6 Requirement id 36700 Ability to generate Part and Spec report with without hyperlink Starts
		String strHyperlinkLimit = EnoviaResourceBundle.getProperty(context, EMXCPNSTRINGRESOURCE, context.getLocale(),"emxCPN.PartAndSpecReport.HyperlinkLimit");
		int iHyperLinkLimit = Integer.parseInt(strHyperlinkLimit);
		int iRowCountAll=0;
		//Added code for 2018x.6 Requirement id 36700 Ability to generate Part and Spec report with without hyperlink Ends
		String sStringResourceFile="emxCPNStringResource"; 
		String sLanguage = context.getSession().getLanguage();
		String strViewSubstitutesChangeAction = i18nNow.getI18nString("emxCPN.FamilyCareReport.Worksheet.Column.ChangeAction",sStringResourceFile, sLanguage);
		String strViewSubstitutesReasonForChange = i18nNow.getI18nString("emxCPN.FamilyCareReport.Worksheet.Column.ChangeActionReasonForChange",sStringResourceFile, sLanguage);
		String strViewSubstitutesNameOrNumber = i18nNow.getI18nString("emxCPN.FamilyCareReport.Worksheet.Column.NameOrNumber",sStringResourceFile, sLanguage);
		String strViewSubstitutesMaterialsTitle = i18nNow.getI18nString("emxCPN.FamilyCareReport.Worksheet.ViewSubstitutes.Column.Title",sStringResourceFile, sLanguage);
		String strViewSubstitutesType = i18nNow.getI18nString("emxCPN.FamilyCareReport.Worksheet.Column.Type",sStringResourceFile, sLanguage);
		String strViewSubstitutesRevision = i18nNow.getI18nString("emxCPN.FamilyCareReport.Worksheet.Column.Revision",sStringResourceFile, sLanguage);
	    String strViewSubstitutesState = i18nNow.getI18nString("emxCPN.FamilyCareReport.Worksheet.Column.State",sStringResourceFile, sLanguage);
	    String strSubstituteParts = i18nNow.getI18nString("emxCPN.FamilyCareReport.Worksheet.ViewSubstitutes.Column.SubstituteParts",sStringResourceFile, sLanguage);
	    String strSubstituteFor = i18nNow.getI18nString("emxCPN.FamilyCareReport.Worksheet.ViewSubstitutes.Column.SubstituteFor",sStringResourceFile, sLanguage);
	    String strSubstitutePartsName = i18nNow.getI18nString("emxCPN.FamilyCareReport.Worksheet.ViewSubstitutes.Column.SubstituteParts.Name",sStringResourceFile, sLanguage);
	    String strSubstitutePartsRawMaterialName = i18nNow.getI18nString("emxCPN.FamilyCareReport.Worksheet.ViewSubstitutes.Column.SubstituteParts.RawMaterialName",sStringResourceFile, sLanguage);
	    String strSubstitutePartsPhase = i18nNow.getI18nString("emxCPN.FamilyCareReport.Worksheet.ViewSubstitutes.Column.SubstituteParts.Phase",sStringResourceFile, sLanguage);
	    String strSubstitutePartMin = i18nNow.getI18nString("emxCPN.FamilyCareReport.Worksheet.ViewSubstitutes.Column.SubstituteParts.Min",sStringResourceFile, sLanguage);
	    String strSubstitutePartMax = i18nNow.getI18nString("emxCPN.FamilyCareReport.Worksheet.ViewSubstitutes.Column.SubstituteParts.Max",sStringResourceFile, sLanguage);
	    String strSubstitutePartWet = i18nNow.getI18nString("emxCPN.FamilyCareReport.Worksheet.ViewSubstitutes.Column.SubstituteParts.Wet",sStringResourceFile, sLanguage);
	    String strSubstitutePartTargetWetWeight = i18nNow.getI18nString("emxCPN.FamilyCareReport.Worksheet.ViewSubstitutes.Column.SubstituteParts.TargetWetWeight",sStringResourceFile, sLanguage);
	    String strSubstitutePartWetWeightMin = i18nNow.getI18nString("emxCPN.FamilyCareReport.Worksheet.ViewSubstitutes.Column.SubstituteParts.WetWeightMin",sStringResourceFile, sLanguage);
	    String strSubstitutePartWetWeightMax = i18nNow.getI18nString("emxCPN.FamilyCareReport.Worksheet.ViewSubstitutes.Column.SubstituteParts.WetWeightMax",sStringResourceFile, sLanguage);
	    String strSubstituteWetDiff = i18nNow.getI18nString("emxCPN.FamilyCareReport.Worksheet.ViewSubstitutes.Column.SubstituteParts.WetDiff",sStringResourceFile, sLanguage);
	    String strSubstituteType = i18nNow.getI18nString("emxCPN.FamilyCareReport.Worksheet.ViewSubstitutes.Column.SubstituteParts.Type",sStringResourceFile, sLanguage);
	    String strSubstituteRev = i18nNow.getI18nString("emxCPN.FamilyCareReport.Worksheet.ViewSubstitutes.Column.SubstituteParts.Rev",sStringResourceFile, sLanguage);
	    String strSubstituteValidUntilDate = i18nNow.getI18nString("emxCPN.FamilyCareReport.Worksheet.ViewSubstitutes.Column.SubstituteParts.ValidUntilDate",sStringResourceFile, sLanguage);
	    String strSubstituteMaterialFunction = i18nNow.getI18nString("emxCPN.FamilyCareReport.Worksheet.ViewSubstitutes.Column.SubstituteParts.MaterialFunction",sStringResourceFile, sLanguage);
	    String strSubstituteProcessingNote = i18nNow.getI18nString("emxCPN.FamilyCareReport.Worksheet.ViewSubstitutes.Column.SubstituteParts.ProcessingNote",sStringResourceFile, sLanguage);
	    String strSubstituteForComments = i18nNow.getI18nString("emxCPN.FamilyCareReport.Worksheet.ViewSubstitutes.Column.SubstituteFor.Comments",sStringResourceFile, sLanguage);
	    String strSubstituteForName = i18nNow.getI18nString("emxCPN.FamilyCareReport.Worksheet.ViewSubstitutes.Column.SubstituteFor.Name",sStringResourceFile, sLanguage);
	    String strSubstituteForRawMaterialName = i18nNow.getI18nString("emxCPN.FamilyCareReport.Worksheet.ViewSubstitutes.Column.SubstituteFor.RawMaterialName",sStringResourceFile, sLanguage);
	    String strSubstituteForRev = i18nNow.getI18nString("emxCPN.FamilyCareReport.Worksheet.ViewSubstitutes.Column.SubstituteFor.Rev",sStringResourceFile, sLanguage);
	    String strSubstituteForType = i18nNow.getI18nString("emxCPN.FamilyCareReport.Worksheet.ViewSubstitutes.Column.SubstituteFor.Type",sStringResourceFile, sLanguage);
	    String strSubstituteForWet = i18nNow.getI18nString("emxCPN.FamilyCareReport.Worksheet.ViewSubstitutes.Column.SubstituteFor.Wet",sStringResourceFile, sLanguage);
	    String strSubstituteForPhase = i18nNow.getI18nString("emxCPN.FamilyCareReport.Worksheet.ViewSubstitutes.Column.SubstituteFor.Phase",sStringResourceFile, sLanguage);
	    String strSubstituteForWetWeightMin = i18nNow.getI18nString("emxCPN.FamilyCareReport.Worksheet.ViewSubstitutes.Column.SubstituteFor.WetWeightMin",sStringResourceFile, sLanguage);
	    String strSubstituteForWetWeightMax = i18nNow.getI18nString("emxCPN.FamilyCareReport.Worksheet.ViewSubstitutes.Column.SubstituteFor.WetWeightMax",sStringResourceFile, sLanguage);
	    String strSubstituteForSeq = i18nNow.getI18nString("emxCPN.FamilyCareReport.Worksheet.ViewSubstitutes.Column.SubstituteFor.Seq",sStringResourceFile, sLanguage);
	    String strSubstituteForInstructions = i18nNow.getI18nString("emxCPN.FamilyCareReport.Worksheet.ViewSubstitutes.Column.SubstituteFor.Instructions",sStringResourceFile, sLanguage);
	    String strFor = i18nNow.getI18nString("emxCPN.FamilyCareReport.Worksheet.ViewSubstitutes.Column.For",sStringResourceFile, sLanguage);
	    String strFOPName = i18nNow.getI18nString("emxCPN.FamilyCareReport.Worksheet.ViewSubstitutes.Column.FOPName",sStringResourceFile, sLanguage);
	    String strSubstituteNameOrTitle = i18nNow.getI18nString("emxCPN.FamilyCareReport.Worksheet.ViewSubstitutes.Column.SubstituteNameAndTitle",sStringResourceFile, sLanguage);
	    String strFunction = i18nNow.getI18nString("emxCPN.FamilyCareReport.Worksheet.ViewSubstitutes.Column.Functions",sStringResourceFile, sLanguage);
	    String strReportedFunction = i18nNow.getI18nString("emxCPN.FamilyCareReport.Worksheet.ViewSubstitutes.Column.ReportedFunction",sStringResourceFile, sLanguage);
	    String strCertifications = i18nNow.getI18nString("emxCPN.FamilyCareReport.Worksheet.ViewSubstitutes.Column.Certifications",sStringResourceFile, sLanguage);
	    String strSubstituteValidStartDate = i18nNow.getI18nString("emxCPN.FamilyCareReport.Worksheet.ViewSubstitutes.Column.ValidStartDate",sStringResourceFile, sLanguage);
	    //Creating Header ---Begin
		//1 Change Action
		Cell cellChangeAction = rowHeader.createCell(0);
		cellChangeAction.setCellStyle(cellStyle);
		cellChangeAction.setCellValue(strViewSubstitutesChangeAction);

		//2 Change Action 'Reason for Change'
		Cell cellChangeActionReasonForChange = rowHeader.createCell(1);
		cellChangeActionReasonForChange.setCellStyle(cellStyle);
		cellChangeActionReasonForChange.setCellValue(strViewSubstitutesReasonForChange);

		//3 Name/Number
		Cell cellNameOrNumber = rowHeader.createCell(2);
		cellNameOrNumber.setCellStyle(cellStyle);
		cellNameOrNumber.setCellValue(strViewSubstitutesNameOrNumber);
	
		//4 Title
		Cell cellTitle = rowHeader.createCell(3);
		cellTitle.setCellStyle(cellStyle);
		cellTitle.setCellValue(strViewSubstitutesMaterialsTitle);
		
		//5 Type
		Cell cellType = rowHeader.createCell(4);
		cellType.setCellStyle(cellStyle);
		cellType.setCellValue(strViewSubstitutesType);

		//6 Revision
		Cell cellRevision = rowHeader.createCell(5);
		cellRevision.setCellStyle(cellStyle);
		cellRevision.setCellValue(strViewSubstitutesRevision);
		
		//7 State
		Cell cellState = rowHeader.createCell(6);
		cellState.setCellStyle(cellStyle);
		cellState.setCellValue(strViewSubstitutesState);
		
		//8 Substitute Name/Title
		Cell cellSubstituteNameOrTitle = rowHeader.createCell(7);
		cellSubstituteNameOrTitle.setCellStyle(cellStyle);
		cellSubstituteNameOrTitle.setCellValue(strSubstituteNameOrTitle);
		
		//9 Substitute Parts Name
		Cell cellSubstitutePartsName = rowHeader.createCell(8);
		cellSubstitutePartsName.setCellStyle(cellStyle);
		cellSubstitutePartsName.setCellValue(strSubstitutePartsName);
		
		//10 Substitute Parts For
		Cell cellFor = rowHeader.createCell(9);
		cellFor.setCellStyle(cellStyle);
		cellFor.setCellValue(strFor);
		
		//11 Substitute Parts Raw Material Name
		Cell cellSubstitutePartsRawMaterialName = rowHeader.createCell(10);
		cellSubstitutePartsRawMaterialName.setCellStyle(cellStyle);
		cellSubstitutePartsRawMaterialName.setCellValue(strSubstitutePartsRawMaterialName);
		

		//12 Substitute Parts Phase
		Cell cellSubstitutePartsPhase = rowHeader.createCell(11);
		cellSubstitutePartsPhase.setCellStyle(cellStyle);
		cellSubstitutePartsPhase.setCellValue(strSubstitutePartsPhase);
		
		//13 Substitute Parts Min
		Cell cellSubstitutePartMin = rowHeader.createCell(12);
		cellSubstitutePartMin.setCellStyle(cellStyle);
		cellSubstitutePartMin.setCellValue(strSubstitutePartMin);
		
		//14 Substitute Parts Max
		Cell cellSubstitutePartMax = rowHeader.createCell(13);
		cellSubstitutePartMax.setCellStyle(cellStyle);
		cellSubstitutePartMax.setCellValue(strSubstitutePartMax);
				
		
		//15 Substitute Parts Wet
		Cell cellSubstitutePartWet = rowHeader.createCell(14);
		cellSubstitutePartWet.setCellStyle(cellStyle);
		//Added for Defect:44470- Removing Trailing Spaces - Starts
		cellSubstitutePartWet.setCellValue(strSubstitutePartWet.trim());
		//Added for Defect:44470- Removing Trailing Spaces - Ends
		
		//16 Substitute Parts Wet Weight
		Cell cellSubstitutePartTargetWetWeight = rowHeader.createCell(15);
		cellSubstitutePartTargetWetWeight.setCellStyle(cellStyle);
		cellSubstitutePartTargetWetWeight.setCellValue(strSubstitutePartTargetWetWeight);
		
		//17 Substitute Parts Wet Weight Min
		Cell cellSubstitutePartWetWeightMin = rowHeader.createCell(16);
		cellSubstitutePartWetWeightMin.setCellStyle(cellStyle);
		//Added For Defect:44470- Removing Trailing Space - Starts
		cellSubstitutePartWetWeightMin.setCellValue(strSubstitutePartWetWeightMin.trim());
		//Added For Defect:44470- Removing Trailing Space - Ends
		
		//18 Substitute Parts Wet Weight Max
		Cell cellSubstitutePartWetWeightMax = rowHeader.createCell(17);
		cellSubstitutePartWetWeightMax.setCellStyle(cellStyle);
		cellSubstitutePartWetWeightMax.setCellValue(strSubstitutePartWetWeightMax);
		
		//19 Substitute Parts Wet Weight Diff
		Cell cellSubstituteWetDiff = rowHeader.createCell(18);
		cellSubstituteWetDiff.setCellStyle(cellStyle);
		//Added for Defect: 44470 - Removing Trailing Spaces - Starts 
		cellSubstituteWetDiff.setCellValue(strSubstituteWetDiff.trim());
		//Added for Defect: 44470 - Removing Trailing Spaces - Ends
		
		//20 Substitute Parts Type
		Cell cellSubstituteType = rowHeader.createCell(19);
		cellSubstituteType.setCellStyle(cellStyle);
		//Added for Defect: 44470 - Removing Trailing Spaces - Starts
		cellSubstituteType.setCellValue(strSubstituteType.trim());
		//Added for Defect: 44470 - Removing Trailing Spaces - Ends
		
		//21 Substitute Parts Rev
		Cell cellSubstituteRev = rowHeader.createCell(20);
		cellSubstituteRev.setCellStyle(cellStyle);
		//Added For Defect: 44470 - Removing Trailing Spaces - Starts
		cellSubstituteRev.setCellValue(strSubstituteRev.trim());
		//Added For Defect: 44470 - Removing Trailing Spaces - Ends
		
		
		//22 Substitute Parts Valid Start Date
		Cell cellSubstituteValidStartDate = rowHeader.createCell(21);
		cellSubstituteValidStartDate.setCellStyle(cellStyle);
		cellSubstituteValidStartDate.setCellValue(strSubstituteValidStartDate);
		
		//23 Substitute Parts Valid Until Date
		Cell cellSubstituteValidUntilDate = rowHeader.createCell(22);
		cellSubstituteValidUntilDate.setCellStyle(cellStyle);
		//Added For Defect:44470 - Removing Trailing Spaces - Starts
		cellSubstituteValidUntilDate.setCellValue(strSubstituteValidUntilDate.trim());
		//Added For Defect:44470 - Removing Trailing Spaces - Ends
		
		//24 Substitute Parts Function
		Cell cellFunction = rowHeader.createCell(23);
		cellFunction.setCellStyle(cellStyle);
		cellFunction.setCellValue(strFunction);
		
		//25 Substitute Parts Reported Function
		Cell cellReportedFunction = rowHeader.createCell(24);
		cellReportedFunction.setCellStyle(cellStyle);
		cellReportedFunction.setCellValue(strReportedFunction);
		
		
		//26 Substitute Parts Processing Note
		Cell cellSubstituteProcessingNote = rowHeader.createCell(25);
		cellSubstituteProcessingNote.setCellStyle(cellStyle);
		cellSubstituteProcessingNote.setCellValue(strSubstituteProcessingNote);
		
		//27 Substitute For Comments
		Cell cellSubstituteForComments = rowHeader.createCell(26);
		cellSubstituteForComments.setCellStyle(cellStyle);
		cellSubstituteForComments.setCellValue(strSubstituteForComments);
		
		//28 Certifications
		Cell cellCertifications = rowHeader.createCell(27);
		cellCertifications.setCellStyle(cellStyle);
		cellCertifications.setCellValue(strCertifications);
		
		//29 Substitute For Seq
		Cell cellSubstituteForSeq = rowHeader.createCell(28);
		cellSubstituteForSeq.setCellStyle(cellStyle);
		cellSubstituteForSeq.setCellValue(strSubstituteForSeq);
		
		//30 Substitute For Instructions
		Cell cellSubstituteForInstructions = rowHeader.createCell(29);
		cellSubstituteForInstructions.setCellStyle(cellStyle);
		cellSubstituteForInstructions.setCellValue(strSubstituteForInstructions);
        //Creating Header ---End
		
        int rowCount1 = 1;
		String strTypeName = DomainConstants.EMPTY_STRING;
		Hashtable htCommonCol1 = new Hashtable<>();
		String strSubForPartsId =DomainConstants.EMPTY_STRING;
		String strSubForName =DomainConstants.EMPTY_STRING;
		String strSubForType =DomainConstants.EMPTY_STRING;
		String strSubForRevision =DomainConstants.EMPTY_STRING;
		DomainObject doObjSubForParts =null;
		Hashtable htCommonCol = new Hashtable<>();
		Map mp =null;
		XSSFRow row = null;
		Cell cell =null;
		String strTypeDisplayName=DomainConstants.EMPTY_STRING;
		int columnCount1 = 0;
		int incFlag = 0;
		Map substitueForInfoMap =null;
		Map certificationArg = new HashMap();
		//Map ReportedFunctionArg = new HashMap();
		MapList mlReportedFunction = new MapList();
		Map mpReportedFunction = null;
		int iReportedFunctionSize = 0;
		String certification = DomainConstants.EMPTY_STRING;
		String sReportedFunction = DomainConstants.EMPTY_STRING;
		//Added code for Req Id : 33634 - Hyperlinks--Starts
		String strValue = DomainConstants.EMPTY_STRING;
		String strParentId = DomainConstants.EMPTY_STRING;
		String strSubPartId = DomainConstants.EMPTY_STRING;
		String strHyperlinkId = DomainConstants.EMPTY_STRING;
		String strCellValue = DomainConstants.EMPTY_STRING;
		String strPhaseId = DomainConstants.EMPTY_STRING;
		String strCAId = DomainConstants.EMPTY_STRING;
		//Added code for Req Id : 33634 - Hyperlinks--Ends
		for (int i=0;i<mlViewSubstituteDetails.size();i++) {
			//Added code for 2018x.6 Requirement id 36700 Ability to generate Part and Spec report with without hyperlink Starts
			iRowCountAll = iRowCountAll + 1;
			//Added code for 2018x.6 Requirement id 36700 Ability to generate Part and Spec report with without hyperlink Ends
			mp = (Map)mlViewSubstituteDetails.get(i);
			htCommonCol= (Hashtable)mp.get("CommonColumns");
			String strCurrent = (String)htCommonCol.get("current");
			strTypeName = (String)htCommonCol.get("type");
			strTypeDisplayName= getTypeDisplayName(context,strTypeName);
			HashMap hm= new HashMap<>();
			//Added code for Req Id : 33634 - Hyperlinks--Starts
			strParentId = (String)htCommonCol.get(DomainConstants.SELECT_ID);
			strCAId = (String)htCommonCol.get(SCAID);
			//Added code for Req Id : 33634 - Hyperlinks--Ends
			//if(!strCurrent.equalsIgnoreCase("Release")){
			//MapList mlSubstituteinfoList = (MapList)mp.get("SubInFBOM");
			//int mlSubstituteinfoListSize =mlSubstituteinfoList.size();
			//Map substituteinfoMap = null;
			int decAdded = 0;	
			//for (int iIndex=0;iIndex<mlSubstituteinfoList.size();iIndex++){
				//substituteinfoMap = (Map)mlSubstituteinfoList.get(iIndex);
				columnCount1 = 0;
			    row = sheetViewSubstitues.createRow(rowCount1++);
				//Added the code for the Defect ID : 25104 - CA Tab is Empty : Starts
				//Code Upgrade for 2018x Data Model - Starts
			    //Added by DSM Reports (Sogeti) for 2022x.5 (APR CW 2024) Defect 55875 - Start
			    if(UIUtil.isNotNullAndNotEmpty(strCAId) && !strCAId.contains(HYPERLINK_PIPE)) {
					if(htCommonCol.get("CARealizedName") != null && htCommonCol.get("CAProposedName") != null) {
						//Updated code for Req Id : 33634 - Hyperlinks--Starts
						hm.put(0, HYPERLINK+htCommonCol.get("CARealizedName")+HYPERLINK_PIPE+strCAId);
						//Updated code for Req Id : 33634 - Hyperlinks--Ends
					} else if(htCommonCol.get("CARealizedName") != null){
						//Updated code for Req Id : 33634 - Hyperlinks--Starts
						hm.put(0, HYPERLINK+htCommonCol.get("CARealizedName")+HYPERLINK_PIPE+strCAId);
						//Updated code for Req Id : 33634 - Hyperlinks--Ends
					} else if(htCommonCol.get(CAPROPOSEDNAME) != null){
						//Updated code for Req Id : 33634 - Hyperlinks--Starts
						hm.put(0, HYPERLINK+htCommonCol.get(CAPROPOSEDNAME)+HYPERLINK_PIPE+strCAId);
						//Updated code for Req Id : 33634 - Hyperlinks--Ends
					} else {
						hm.put(0, DomainConstants.EMPTY_STRING);
					}
			    }else {
			    	hm.put(0,htCommonCol.get(CAPROPOSEDNAME));
			    }
				//Added by DSM Reports (Sogeti) for 2022x.5 (APR CW 2024) Defect 55875 - End
				//Code Upgrade for 2018x Data Model - Ends
				//Added the code for the Defect ID : 25104 - CA Tab is Empty : Ends
				hm.put(1, htCommonCol.get("attribute[Reason for Change]"));
				//Updated code for Req Id : 33634 - Hyperlinks--Starts
				hm.put(2, HYPERLINK+htCommonCol.get("name")+HYPERLINK_PIPE+strParentId);
				//Updated code for Req Id : 33634 - Hyperlinks--Ends
				hm.put(3, htCommonCol.get("attribute[Title]"));
				hm.put(4, strTypeDisplayName);
				hm.put(5, htCommonCol.get("revision"));
				hm.put(6, htCommonCol.get("current"));
				//Added code for Req Id : 33634 - Hyperlinks--Starts
				strSubPartId =(String) mp.get("id");
				strPhaseId = (String)mp.get("PhaseId");
				//Added code for Req Id : 33634 - Hyperlinks--Ends
				String strSubPartType =	(String) mp.get("Type");	
				certificationArg.put("id",strSubPartId);
				certificationArg.put("type",strSubPartType);
				//Added the code for 2018x Spec REader Defect 47026,47112 - Starts
				certification = getCertificatonColumnLinks(context,strUserName,JPO.packArgs(certificationArg));
				////Added the code for 2018x Spec REader Defect 47026,47112 - Ends
				//ReportedFunctionArg.put("id",strSubPartId);
				//mlReportedFunction = getReportedFunction(context,JPO.packArgs(ReportedFunctionArg));
				//iReportedFunctionSize =mlReportedFunction.size();
				//if (iReportedFunctionSize>0){
				//	mpReportedFunction = (Map)mlReportedFunction.get(0);
				//	sReportedFunction = (String) mpReportedFunction.get(DomainConstants.SELECT_NAME);
				//}
			
				hm.put(7,(String)mp.get("SubstituteDescription"));//Substitute Part :Substitute Name/Title
				//Updated code for Req Id : 33634 - Hyperlinks--Starts
				hm.put(8,HYPERLINK+mp.get("PartName")+HYPERLINK_PIPE+strSubPartId);//Substitute Part Name
				//Updated code for Req Id : 33634 - Hyperlinks--Ends
				hm.put(9,mp.get("For"));//Substitute Part : For
				hm.put(10,mp.get("Title"));//Substitute Parts Raw Material Name....Title
				//Updated code for Req Id : 33634 - Hyperlinks--Starts
				hm.put(11,HYPERLINK+mp.get("Phase")+HYPERLINK_PIPE+strPhaseId);//Substitute Parts Phase
				//Updated code for Req Id : 33634 - Hyperlinks--Ends
				hm.put(12,mp.get("MinPercentWW"));//Substitute Parts Min
				hm.put(13,mp.get("MaxPercentWW"));//Substitute Parts Max
				hm.put(14,mp.get("WetPercentWW"));//Substitute Parts Wet
				hm.put(15,mp.get("TargetWetWeight"));//Substitute Parts Target Wet Weight
				hm.put(16,mp.get("WetWeightMin"));//Substitute Parts Wet Weight Min
				hm.put(17,mp.get("WetWeightMax"));//Substitute Parts Wet Weight Max
				hm.put(18,mp.get("WetDiffPercent"));//Substitute Parts Wet Weight Diff
				hm.put(19,mp.get("Type"));//Substitute Parts Type
				hm.put(20,mp.get("Revision"));//Substitute Parts Rev
				hm.put(21,mp.get("ValidStartDate"));//Substitue Part Valid Start Date
				hm.put(22,mp.get("ValidUnitDate"));//Substitue Part Valid Until Date
				hm.put(23,mp.get("Functions"));//Substitue Part Function
				hm.put(24,mp.get("ReportedFunctions"));//Substitue Part Reported Function
				hm.put(25,mp.get("ProcessingNote"));//Substitute Parts Processing Note
				hm.put(26,mp.get("strSubComments"));//Substitute Part Comments
				hm.put(27,certification);//Substitute Part Certifications
				hm.put(28,mp.get("Find_Number"));//Substitute Part Sequence
				hm.put(29,mp.get("SubstituteInstructions"));//Substitute Part Instructions
				//For Cells Creation in each Row		
						
				  XSSFCellStyle style = workbook.createCellStyle();
				    style = setForeGroundColor(strCurrent, style); 
				   //Added by DSM Reports (Sogeti) for 2022x.5 (APR CW 2024) Defect 55875 - Start
				    XSSFCellStyle style1 = workbook.createCellStyle();
					//Added by DSM Reports (Sogeti) for 2022x.5 (APR CW 2024) Defect 55875 - End
					for(int j=0;j<hm.size();j++) {
						//Modified the code for _2022x_Aug CW Req-47097 :: Start
						// Modified by DSM Reports (Sogeti) for 22x.03 (August CW 2023) Defect 54091 - Start
						cell = row.createCell(columnCount1++);
						if (j == 2) {
							style = makeColumnNumeric(workbook, style);
						}
						cell.setCellStyle(style);

						// Modified by DSM Reports (Sogeti) for 22x.03 (August CW 2023) Defect 54091 - End
						//Modified the code for _2022x_Aug CW Req-47097 :: End
						//Added code for Req Id : 33634 - Hyperlinks--Starts
						strCellValue = (String)hm.get(j);
						if(UIUtil.isNotNullAndNotEmpty(strCellValue) && strCellValue.startsWith(HYPERLINK_COMPARE)){
							String[] strSplittedValue = strCellValue.split("\\|",-1); 
							strHyperlinkId = strSplittedValue[(strSplittedValue.length)-1];
							strValue = strSplittedValue[(strSplittedValue.length)-2];
							//Added code for 2018x.6 Requirement id 36700 Ability to generate Part and Spec report with without hyperlink Starts
							if(pgV3Constants.TRUE.equalsIgnoreCase(strHyperlink) && iRowCountAll < iHyperLinkLimit){
								getHyperlink(context,cell,workbook,strValue,strHyperlinkId,strCurrent);
							
							} else if(UIUtil.isNotNullAndNotEmpty(strValue)) {					
								cell.setCellValue(strValue);
							}
							//Added code for 2018x.6 Requirement id 36700 Ability to generate Part and Spec report with without hyperlink Ends
						}else {
							cell.setCellValue((String)hm.get(j));
							//Added by DSM Reports (Sogeti) for 2022x.5 (APR CW 2024) Defect 55875 - Start
							if(j == 0) {
								style1.cloneStyleFrom(style);
								style1.setWrapText(true);
								cell.setCellStyle(style1);
							}
							//Added by DSM Reports (Sogeti) for 2022x.5 (APR CW 2024) Defect 55875 - End
						}
						//Added code for Req Id : 33634 - Hyperlinks--Ends
					} 
	}
		sheetFormatter(sheetViewSubstitues); // Added by DSM Reports (Sogeti) for 22x.04 (Dec CW 2023) Defect 56156 - START/END
	}catch (Exception e) {
		e.printStackTrace();
	}
  }


/**This method fetches the element details required for displaying the Substitutes
 * @param context is the matrix context
 * @param args has the required information
 * @return
 * @throws Exception
 */ 
@com.matrixone.apps.framework.ui.ProgramCallable
private MapList getSubstituteDetails(Context context, String strUserName,DomainObject domObjParent, Map mpObjectCommon) throws Exception
{
	String strPartType = (String)mpObjectCommon.get(DomainConstants.SELECT_TYPE);
	String strPartId = (String) mpObjectCommon.get(DomainConstants.SELECT_ID);
	MapList _finalsubstitutePartList = new MapList();
	//if(bIsTabAccess) {
	//Added the code for Defect 49698 - Spec Reader Access Issue - Starts
	boolean hasAccess = false;
	boolean isContextPushed = false;
	//Added the code for Defect 49698 - Spec Reader Access Issue - Ends
	try
		{
			MapList _substitutePartList = new MapList();
			MapList mlTmpForMap = new MapList();
			MapList mlTmpSubMap = new MapList();
			MapList mlTmpSubForMap = new MapList();
			Map mpForTemp;
			Map mpSubTemp;
			Map tmp_mpForTemp;
			Map _mpForTemp;
			Map _mpSubTemp;
			Map _mpSubForTemp;
			
			
			String strPhaseId = DomainConstants.EMPTY_STRING;
			String strPhaseName = DomainConstants.EMPTY_STRING;
			String strPhaseFindNumber = DomainConstants.EMPTY_STRING;
			String strParentId = DomainConstants.EMPTY_STRING;
			String strFBOMSubstituteParentSubId = DomainConstants.EMPTY_STRING;
			String strBOMSubstituteParentSubDescription = DomainConstants.EMPTY_STRING;
			String strForQuantityAdjustment = DomainConstants.EMPTY_STRING;
			String strForQuantityAdjustmentQuantity = DomainConstants.EMPTY_STRING;
			String strFBOMSubstituteRelId = DomainConstants.EMPTY_STRING;
			String strSubstituteInstruction = DomainConstants.EMPTY_STRING;
			String strForValidUntilDate = DomainConstants.EMPTY_STRING;
			String strForValidStartDate = DomainConstants.EMPTY_STRING;
			String strForInstruction = DomainConstants.EMPTY_STRING;
			String strForFindNumber = DomainConstants.EMPTY_STRING;
			String strForRawMaterialName = DomainConstants.EMPTY_STRING;
			String strForMinPercentWW = DomainConstants.EMPTY_STRING;
			String strForMaxPercentWW = DomainConstants.EMPTY_STRING;
			String strForQuantity = DomainConstants.EMPTY_STRING;
			String strForTargetWetWeight = DomainConstants.EMPTY_STRING;
			String strForWetWeightMin = DomainConstants.EMPTY_STRING;
			String strForWetWeightMax = DomainConstants.EMPTY_STRING;
			String strForApplication = DomainConstants.EMPTY_STRING; 
			String strForProcessingNote = DomainConstants.EMPTY_STRING;
			String strForId = DomainConstants.EMPTY_STRING;
			String strForType = DomainConstants.EMPTY_STRING;
			String strForName = DomainConstants.EMPTY_STRING;
			String strForRev = DomainConstants.EMPTY_STRING;
			String strForTitle = DomainConstants.EMPTY_STRING;
			String strForFunction = DomainConstants.EMPTY_STRING;
			String strForReportedFunction = DomainConstants.EMPTY_STRING;
			String strForCertifications = DomainConstants.EMPTY_STRING;
			String strForPhaseName = DomainConstants.EMPTY_STRING;
			String strForComments = DomainConstants.EMPTY_STRING;
			String strSubFindNumber = DomainConstants.EMPTY_STRING; 
			String strSubRawMaterialName = DomainConstants.EMPTY_STRING;
			String strSubMinPercentWW = DomainConstants.EMPTY_STRING;
			String strSubMaxPercentWW = DomainConstants.EMPTY_STRING;
			String strSubWetPercentWW = DomainConstants.EMPTY_STRING;
			String strSubTargetWetWeight = DomainConstants.EMPTY_STRING;
			String strSubWetWeightMin = DomainConstants.EMPTY_STRING;
			String strSubWetWeightMax = DomainConstants.EMPTY_STRING;
			String strSubWetDiffPercent = DomainConstants.EMPTY_STRING;
			String strSubProcessingNote = DomainConstants.EMPTY_STRING;
			String strSubId = DomainConstants.EMPTY_STRING;
			String strSubType = DomainConstants.EMPTY_STRING;
			String strSubName = DomainConstants.EMPTY_STRING;
			String strSubRev = DomainConstants.EMPTY_STRING;
			String strSubTitle = DomainConstants.EMPTY_STRING;
			String strSubValidUntilDate = DomainConstants.EMPTY_STRING;
			String strSubValidStartDate = DomainConstants.EMPTY_STRING;
			String strSubFunction = DomainConstants.EMPTY_STRING;
			String strSubReportedFunction = DomainConstants.EMPTY_STRING;
			String strSubInstruction = DomainConstants.EMPTY_STRING;
			String strSubPhaseNam = DomainConstants.EMPTY_STRING;
			String strSubCertifications = DomainConstants.EMPTY_STRING;
			String strSubComments = DomainConstants.EMPTY_STRING;
			String strPhaseType = DomainConstants.EMPTY_STRING;
			String strSubForId = DomainConstants.EMPTY_STRING;			
			String strSubFunction_Temp = DomainConstants.EMPTY_STRING;	
			StringBuilder sbReportedFunction = new StringBuilder();
			
			//Added code for Req Id : 33634 - Hyperlinks--Starts
			String strForPhaseId = DomainConstants.EMPTY_STRING;
			//Added code for Req Id : 33634 - Hyperlinks--Ends
			Set<String> virtualIntermediateList = new HashSet<String>();
			//Map relAttributeArg = new HashMap();
			//String applications = DomainConstants.EMPTY_STRING;
			//Added the code for Defect 49698 - Spec Reader Access Issue - Starts
			if(SPECREADER.equalsIgnoreCase(strOriginatingSource)) {
				//Added the code for 2018x Spec REader Defect 47026,47112 - Starts
				hasAccess = checkAccessforinputFOP(context, strUserName, (String)domObjParent.getInfo(context, DomainConstants.SELECT_ID));
				//Added the code for 2018x Spec REader Defect 47026,47112 - Ends
				if(hasAccess) {
					//Pushing User Agent Context to get the Data if the Spec Reader User have access
					ContextUtil.pushContext(context,PropertyUtil.getSchemaProperty(context,"User Agent"),DomainConstants.EMPTY_STRING,DomainConstants.EMPTY_STRING);
					isContextPushed = true;
					
				}
			}
			//Added the code for Defect 49698 - Spec Reader Access Issue - Ends
			String strFormuationProcessId = (String) domObjParent.getInfo(context, "from[Planned For].to.id");
			Pattern relPattern = new Pattern(CPNRelationship.FBOM.getRelationship(context));
		 	relPattern.addPattern(pgV3Constants.RELATIONSHIP_PLBOM);
			//StringList slEBOMSubs = null;
		 	
		 	//Selects to get all Parent Subs and Rels for the Process
		 	StringList relSelectMain = new StringList(2);
		 	relSelectMain.add("id");//FBOM Rel Id : Process-FMPhase
		 	relSelectMain.add("to.from[FBOM].frommid[FBOM Substitute].to.id");//ParentSub Id
		  
		 	StringList objSelectMain = new StringList(1);
		 	objSelectMain.add("name"); //FMPhase Name		 	
						
			//Selects to get Substitute Rel attributes
			StringList relSubSelect = new StringList(9);
			relSubSelect.add("attribute[Find Number].value");	
			relSubSelect.add("attribute[Quantity].inputvalue");
			relSubSelect.add("attribute[Maximum Actual Percent Wet].inputvalue");
			relSubSelect.add("attribute[Minimum Actual Percent Wet].inputvalue");
			relSubSelect.add("attribute[pgMaximumActualWeightWet].inputvalue");
			relSubSelect.add("attribute[pgMinimumActualWeightWet].inputvalue");
			relSubSelect.add("attribute[Target Weight Wet].inputvalue");
			relSubSelect.add("attribute[Virtual Intermediate PhysicalId].value");
			relSubSelect.add("attribute[Processing Note].value");
			relSubSelect.add("attribute[Application].value");
						
			StringList strSubObjList = new StringList(8);
			strSubObjList.add(DomainConstants.SELECT_TYPE);
			strSubObjList.add(DomainConstants.SELECT_NAME);
			strSubObjList.add(DomainConstants.SELECT_REVISION);
			strSubObjList.add(DomainConstants.SELECT_ATTRIBUTE_TITLE);
			strSubObjList.add(DomainConstants.SELECT_ID);
			strSubObjList.add("from[pgPDTemplatestopgPLIReportedFunction].to.name");
			
			StringList slSelects = new StringList(4);
			slSelects.add(DomainConstants.SELECT_DESCRIPTION);
			slSelects.add("attribute[pgValidStartDate].value");
			slSelects.add("attribute[pgValidUntilDate].value");
			slSelects.add("attribute[Substitute Instructions].value");
			
			Map	mpConnectedSub = new HashMap();
			StringList slSubFunction=new StringList();
			StringList slSubReportedFunction=new StringList();
			
			//Get list of FMPhase objects connecteed to Formulation Process
			if(UIUtil.isNotNullAndNotEmpty(strFormuationProcessId)) 
			{
				//Added by DSM Reports (Sogeti) for 2022x.4 (DEC CW 2023) Defect 54465 - Start
				boolean bAccesss = accessCheck(context, strUserName,strFormuationProcessId);
				if(bAccesss) {
				//Added by DSM Reports (Sogeti) for 2022x.4 (DEC CW 2023) Defect 54465 - End
				DomainObject domObj = DomainObject.newInstance(context, strFormuationProcessId);
				MapList mpAllList = new MapList();
				//Identify  substitutes  
				mpAllList = domObj.getRelatedObjects(context,relPattern.getPattern(),FormulationType.FORMULATION_PHASE.getType(context),
						objSelectMain,relSelectMain,false,true,(short)0,"","",0);

				if (mpAllList.size()>0) {
				Iterator mpAllListItr = mpAllList.iterator();
				Map mpMainObj = new HashMap();
				StringList slSubParentsList = new StringList();
				StringList tmp_slSubParentsList = new StringList();
				StringList _slSubParentsList = new StringList();
				String tmp_strParentSub = "";
				String tmp_slSubParentsStr = "";
				
				while(mpAllListItr.hasNext())
				{
					mpMainObj = (Map)mpAllListItr.next();
					tmp_slSubParentsList =  new StringList();
					tmp_slSubParentsStr = "";
					if (mpMainObj.get("to.from[FBOM].frommid[FBOM Substitute].to.id") instanceof StringList) {
						tmp_slSubParentsList.add(mpMainObj.get("to.from[FBOM].frommid[FBOM Substitute].to.id").toString());
					} else {
						tmp_slSubParentsStr = (String)mpMainObj.get("to.from[FBOM].frommid[FBOM Substitute].to.id");						
					}
					
					if (tmp_slSubParentsList!=null && tmp_slSubParentsList.size() > 0) {							
						for(int i=0;i<tmp_slSubParentsList.size();i++) {
							tmp_strParentSub = (String)tmp_slSubParentsList.get(i);									
							if (tmp_strParentSub.indexOf(",")>-1) {				
								_slSubParentsList = FrameworkUtil.split((String)tmp_strParentSub, ",");
								for (int j=0;j<_slSubParentsList.size();j++) {
									String _parentid=_slSubParentsList.get(j);
									_parentid=_parentid.replace("[","");
									_parentid=_parentid.replace("]","");
									slSubParentsList.add(_parentid);
								}
							} else {
								slSubParentsList.add((String)tmp_slSubParentsList.get(i));
							}
						}
					} else {
						if (tmp_slSubParentsStr!="") {
						slSubParentsList.add(tmp_slSubParentsStr);
						}
					}
				}
				//Remove Duplicates 
				slSubParentsList = removeDuplicates(slSubParentsList);
				
				//to get FBOM Substitute: print bus parentsubid select to.id;
				//to get FBOM rel via FBOM Substitute print bus parentsubid select to.fromrel.id;
				//to get FMPhase print bus parentsubid select to.fromrel.from;
				//to get Substitute for print bus parentsubid select to.fromrel.to;
				//DomainObject domParentSub = null;
				if (slSubParentsList.size()>0) {
				for (int i=0;i<slSubParentsList.size();i++) {					
					//build the Sub map
					
					strFBOMSubstituteParentSubId = (String)slSubParentsList.get(i);		
					if (UIUtil.isNotNullAndNotEmpty(strFBOMSubstituteParentSubId)) {
					DomainObject domParentSub = new DomainObject(strFBOMSubstituteParentSubId);
					
					//Get all bojects connected to the Parent Sub			
					MapList subsObject = domParentSub.getRelatedObjects(context,relPattern.getPattern(),pgV3Constants.TYPE_PART,strSubObjList,relSubSelect,false,true,(short)0,"","",0);
					if (subsObject.size()>0) {
					
					int iNumberOfSubs = subsObject.size();				
					mlTmpForMap = new MapList();
					mlTmpSubMap = new MapList();
					mlTmpSubForMap = new MapList();
					Iterator subsObjectItr = subsObject.iterator();
					String strCmd="";
					String strMessage = "";
					Map mPart = domParentSub.getInfo(context, slSelects);
					strBOMSubstituteParentSubDescription = (String) mPart.get(DomainConstants.SELECT_DESCRIPTION);
					strSubValidStartDate = (String) mPart.get("attribute[pgValidStartDate].value");
					strSubValidUntilDate = (String) mPart.get("attribute[pgValidUntilDate].value");
					strSubInstruction = (String) mPart.get("attribute[Substitute Instructions].value");
					
					while(subsObjectItr.hasNext())
					{
						//create  map to store each row datastrSubReportedFunction
						mpConnectedSub = (Map)subsObjectItr.next();
						strSubId = (String)mpConnectedSub.get(DomainConstants.SELECT_ID);
						//ALM Defect 41828
						//Reset String and StringBuilder
						strSubFunction = "";
						strSubFunction_Temp= "";
						if (mpConnectedSub.get("attribute[Application].value") != null) {							
							strSubFunction_Temp = (String)mpConnectedSub.get("attribute[Application].value");
							strSubFunction = getMaterialFunctionName(context,strSubFunction_Temp);
						} 
						//Reset String and StringBuilder
						sbReportedFunction.delete(0, sbReportedFunction.length());
						strSubReportedFunction = "";
						if (mpConnectedSub.get("from[pgPDTemplatestopgPLIReportedFunction].to.name") != null) {							
							if (mpConnectedSub.get("from[pgPDTemplatestopgPLIReportedFunction].to.name") instanceof StringList){
								slSubReportedFunction = (StringList)mpConnectedSub.get("from[pgPDTemplatestopgPLIReportedFunction].to.name");
								if (slSubReportedFunction.size() > 0) {
									for(int y=0;y<slSubReportedFunction.size();y++) {
										strSubReportedFunction=slSubReportedFunction.get(y);
										sbReportedFunction.append(strSubReportedFunction).append(COMMA);
									} 
									strSubReportedFunction = sbReportedFunction.toString();
									if(strSubReportedFunction.endsWith(COMMA))
									{
										strSubReportedFunction = strSubReportedFunction.substring(0,strSubReportedFunction.length()-1);
									}
								} else {
									strSubReportedFunction = "";
								}
							} else {
								strSubReportedFunction = (String) mpConnectedSub.get("from[pgPDTemplatestopgPLIReportedFunction].to.name").toString();
							}
						}
						
						strSubFindNumber = "";
						strSubRawMaterialName = (String)mpConnectedSub.get(DomainConstants.SELECT_NAME);					
						strSubMinPercentWW = (String)mpConnectedSub.get("attribute[Minimum Actual Percent Wet].inputvalue");
						strSubMaxPercentWW = (String)mpConnectedSub.get("attribute[Maximum Actual Percent Wet].inputvalue");
						strSubWetPercentWW = (String)mpConnectedSub.get("attribute[Quantity].inputvalue");
						strSubTargetWetWeight = (String)mpConnectedSub.get("attribute[Target Weight Wet].inputvalue");
						strSubWetWeightMin = (String)mpConnectedSub.get("attribute[pgMinimumActualWeightWet].inputvalue");
						strSubWetWeightMax = (String)mpConnectedSub.get("attribute[pgMaximumActualWeightWet].inputvalue");
						strSubWetDiffPercent = "";
						strSubProcessingNote = (String)mpConnectedSub.get("attribute[Processing Note].value");	
						strSubId = (String)mpConnectedSub.get(DomainConstants.SELECT_ID);
						strSubType = (String)mpConnectedSub.get(DomainConstants.SELECT_TYPE);
						strSubName = (String)mpConnectedSub.get(DomainConstants.SELECT_NAME);
						strSubRev = (String)mpConnectedSub.get(DomainConstants.SELECT_REVISION);
						strSubTitle = (String)mpConnectedSub.get(DomainConstants.SELECT_ATTRIBUTE_TITLE);
						strSubCertifications = "";
						strSubComments = (String)mpConnectedSub.get("attribute[Comments]");
						
						//Add values to HashMap
						mpSubTemp = new HashMap();
						mpSubTemp.put("CommonColumns", mpObjectCommon);
						mpSubTemp.put("For","Sub");
						mpSubTemp.put("Find_Number", strSubFindNumber);
						mpSubTemp.put("SubstituteDescription",strBOMSubstituteParentSubDescription);
						mpSubTemp.put("PartName",strSubName);
						mpSubTemp.put("RawMaterialName",strSubRawMaterialName);
						mpSubTemp.put("MinPercentWW",strSubMinPercentWW);
						mpSubTemp.put("MaxPercentWW",strSubMaxPercentWW);
						mpSubTemp.put("WetPercentWW",strSubWetPercentWW);
						mpSubTemp.put("TargetWetWeight",strSubTargetWetWeight);//Quantity attribute
						mpSubTemp.put("WetWeightMin",strSubWetWeightMin);
						mpSubTemp.put("WetWeightMax",strSubWetWeightMax);
						mpSubTemp.put("WetDiffPercent",strSubWetDiffPercent);
						mpSubTemp.put("id",strSubId);
						mpSubTemp.put("Type",strSubType);
						mpSubTemp.put("Revision",strSubRev);
						mpSubTemp.put("Title",strSubTitle);
						mpSubTemp.put("ValidStartDate",strSubValidStartDate);
						mpSubTemp.put("ValidUnitDate",strSubValidUntilDate);
						mpSubTemp.put("Functions",strSubFunction);
						mpSubTemp.put("ReportedFunctions",strSubReportedFunction);
						mpSubTemp.put("ProcessingNote",strSubProcessingNote);
						mpSubTemp.put("Comments",strSubComments);
						mpSubTemp.put("Certifications","");
						mpSubTemp.put("Sequence",strSubFindNumber);
						mpSubTemp.put("SubstituteInstructions","");
						mpSubTemp.put("Phase",strPhaseName);
						mlTmpSubMap.add((Map)mpSubTemp);
						
						}
					//get the FBOM Subsituute Rel
					strParentId =slSubParentsList.get(i);
					strCmd = "print bus $1 select $2 dump $3";
					strMessage = MqlUtil.mqlCommand(context,strCmd,strParentId,"to.id","|");
					StringList slFBOMSubsRel = FrameworkUtil.split(strMessage,"|");
					Iterator fbomsubsItr = slFBOMSubsRel.iterator();
					String fbomsubRelId = null;
					String fbomid = "";
					String strForVirtualIntermediate = "";
					while(fbomsubsItr.hasNext())
					{
						fbomsubRelId = (String) fbomsubsItr.next();
						strCmd = "print connection $1 select $2 dump $3";
						strForQuantityAdjustment = MqlUtil.mqlCommand(context,strCmd,fbomsubRelId,"attribute[Quantity Adjustment].inputvalue","|");
						strForQuantityAdjustmentQuantity = MqlUtil.mqlCommand(context,strCmd,fbomsubRelId,"attribute[Quantity].inputvalue","|");
						//get FBOM rel id
					    strCmd = "print connection $1 select $2 dump $3";
						fbomid = MqlUtil.mqlCommand(context,strCmd,fbomsubRelId,"fromrel.id","|");
						if (UIUtil.isNotNullAndNotEmpty(fbomid)) {
							//get the FMPhase and Sub for Id
							 strCmd = "print connection $1 select $2 dump $3";							 
							 strForType = MqlUtil.mqlCommand(context,strCmd,fbomid,"to.type","|");
							 strForName = MqlUtil.mqlCommand(context,strCmd,fbomid,"to.name","|");
							//Added code for Req Id : 33634 - Hyperlinks--Starts
							 strForId = MqlUtil.mqlCommand(context,strCmd,fbomid,"to.id","|");
							//Added code for Req Id : 33634 - Hyperlinks--Ends
							 strForRev = MqlUtil.mqlCommand(context,strCmd,fbomid,"to.revision","|");
							 strForRawMaterialName = MqlUtil.mqlCommand(context,strCmd,fbomid,"to.attribute[Title].value","|");
							 strForPhaseName = MqlUtil.mqlCommand(context,strCmd,fbomid,"from.name","|");
							//Added code for Req Id : 33634 - Hyperlinks--Starts
							 strForPhaseId = MqlUtil.mqlCommand(context,strCmd,fbomid,"from.id","|");
							//Added code for Req Id : 33634 - Hyperlinks--Ends
							 strPhaseFindNumber= MqlUtil.mqlCommand(context,strCmd,fbomid,"from.to.attribute[Find Number].value","|");
							 strForFindNumber = MqlUtil.mqlCommand(context,strCmd,fbomid,"attribute[Find Number].value","|");
							 strForMinPercentWW = MqlUtil.mqlCommand(context,strCmd,fbomid,"attribute[Minimum Actual Percent Wet].inputvalue","|");	
							 strForMaxPercentWW = MqlUtil.mqlCommand(context,strCmd,fbomid,"attribute[Maximum Actual Percent Wet].inputvalue","|");
							 strForQuantity = MqlUtil.mqlCommand(context,strCmd,fbomid,"attribute[Quantity].inputvalue","|");
							 strForTargetWetWeight = MqlUtil.mqlCommand(context,strCmd,fbomid,"attribute[Target Weight Wet].inputvalue","|");							
							 strForWetWeightMin = MqlUtil.mqlCommand(context,strCmd,fbomid,"attribute[pgMinimumActualWeightWet].inputvalue","|");
							 strForWetWeightMax = MqlUtil.mqlCommand(context,strCmd,fbomid,"attribute[pgMaximumActualWeightWet].inputvalue","|");
							 strForApplication = MqlUtil.mqlCommand(context,strCmd,fbomid,"attribute[Application].value","|");
							 strForProcessingNote = MqlUtil.mqlCommand(context,strCmd,fbomid,"attribute[Processing Note].value","|");
							 strForVirtualIntermediate = MqlUtil.mqlCommand(context,strCmd,fbomid,"attribute[Virtual Intermediate PhysicalId].value","|");
							 strForComments = MqlUtil.mqlCommand(context,strCmd,fbomid,"to.attribute[Comments].value","|");
							 strForFindNumber = strPhaseFindNumber + "." + strForFindNumber;	
							 strForCertifications = "";
							 strForReportedFunction = MqlUtil.mqlCommand(context,strCmd,fbomid,"to.from[pgPDTemplatestopgPLIReportedFunction].to.name","|");
							strForValidUntilDate = "";
							strForValidStartDate = "";
							strForFunction="";
							if (UIUtil.isNotNullAndNotEmpty(strForApplication)) {	
								strForFunction = getMaterialFunctionName(context, strForApplication);
							}
							
							mpForTemp = new HashMap();	
							mpForTemp.put("CommonColumns", mpObjectCommon);
							mpForTemp.put("SubstituteDescription",strBOMSubstituteParentSubDescription);
							mpForTemp.put("For","For");
							mpForTemp.put("Find_Number",strForFindNumber);
							mpForTemp.put("PartName",strForName);
							mpForTemp.put("RawMaterialName",strForRawMaterialName);
							mpForTemp.put("MinPercentWW",strForMinPercentWW);
							mpForTemp.put("MaxPercentWW",strForMaxPercentWW);
							mpForTemp.put("WetPercentWW",strForQuantity);
							mpForTemp.put("TargetWetWeight",strForTargetWetWeight);//Quantity attribute
							mpForTemp.put("WetWeightMin",strForWetWeightMin);
							mpForTemp.put("WetWeightMax",strForWetWeightMax);
							mpForTemp.put("WetDiffPercent",strForQuantityAdjustment);
							mpForTemp.put("id",strForId);
							mpForTemp.put("Type",strForType);
							mpForTemp.put("Revision",strForRev);
							mpForTemp.put("Title",strForRawMaterialName);
							mpForTemp.put("ValidStartDate","");
							mpForTemp.put("ValidUntilDate","");
							mpForTemp.put("Functions","");
							mpForTemp.put("ReportedFunctions","");
							mpForTemp.put("ProcessingNote",strForProcessingNote);
							mpForTemp.put("Comments",strForComments);
							mpForTemp.put("Certifications","");
							mpForTemp.put("Sequence",strForFindNumber);
							mpForTemp.put("SubstituteInstructions",strSubInstruction);
							mpForTemp.put("Phase",strForPhaseName);
							//Added code for Req Id : 33634 - Hyperlinks--Starts
							mpForTemp.put("PhaseId", strForPhaseId);
							//Added code for Req Id : 33634 - Hyperlinks--Ends
							//Add mpForTemp Maps to temporary map to retain display order
							mlTmpForMap.add(mpForTemp);
							 
							 if(iNumberOfSubs > 0 && (!strForQuantityAdjustment.equals("0") && !strForQuantityAdjustment.equals("0.0") && !strForQuantityAdjustment.equals("")))
							 {
								tmp_mpForTemp = new HashMap();
								tmp_mpForTemp.putAll(mpForTemp);								
								tmp_mpForTemp.put("For","Sub");
								tmp_mpForTemp.put("Find_Number","");
								tmp_mpForTemp.put("WetWeightMin","");
								tmp_mpForTemp.put("WetWeightMax","");
								tmp_mpForTemp.put("WetPercentWW",strForQuantityAdjustmentQuantity);
								tmp_mpForTemp.put("SubstituteInstructions","");
								tmp_mpForTemp.put("Functions",strForFunction);
								tmp_mpForTemp.put("ReportedFunctions",strForReportedFunction);
								mlTmpSubForMap.add((Map)tmp_mpForTemp);
							} 
						}
						//Add subs to final list
						if(mlTmpSubMap.size()>0){
							for(int iIndex=0;iIndex<mlTmpSubMap.size();iIndex++){
								_mpSubTemp=(Map)mlTmpSubMap.get(iIndex);
								_mpSubTemp.put("Phase",strForPhaseName);
								//Added code for Req Id : 33634 - Hyperlinks--Starts
								_mpSubTemp.put("PhaseId", strForPhaseId);
								//Added code for Req Id : 33634 - Hyperlinks--Ends
								_finalsubstitutePartList.add(_mpSubTemp);
							}
						}
						//Add Sub-For Rows to final list
						if(mlTmpSubForMap.size()>0){
							for(int iIndex=0;iIndex<mlTmpSubForMap.size();iIndex++){
								_mpSubForTemp=(Map)mlTmpSubForMap.get(iIndex);
								_finalsubstitutePartList.add(_mpSubForTemp);
							}
						}
						
						//Add mpForTemp Maps from temporary map to _finalsubstitutePartList						
						if(mlTmpForMap.size()>0){
							for(int iIndex=0;iIndex<mlTmpForMap.size();iIndex++){
								_mpForTemp=(Map)mlTmpForMap.get(iIndex);
								_mpForTemp.put("MinPercentWW","");
								_mpForTemp.put("MaxPercentWW","");
								_mpForTemp.put("WetDiffPercent","");
								_mpForTemp.put("Functions","");
								_mpForTemp.put("ReportedFunctions","");
								_mpForTemp.put("ProcessingNote","");
								_mpForTemp.put("TargetWetWeight","");
								_finalsubstitutePartList.add(_mpForTemp);
							}
						}
					}
				}				
				}
				}
				}
				//End New COde
				
				//TODO Virtual Intermediate code -->move to correct place
				//String strCommand = "print connection $1 select $2 dump $3";
				//String strMessage = MqlUtil.mqlCommand(context,strCommand,sEBOMID,"frommid[".concat(FormulationRelationship.FBOM_SUBSTITUTE.getRelationship(context)).concat("].id","|");
				//slEBOMSubs = FrameworkUtil.split(strMessage,"|");
				//if(UIUtil.isNullOrEmpty(strMessage)){
				//	String viPhysicalId = MqlUtil.mqlCommand(context,strCommand,sEBOMID,"attribute[Virtual Intermediate PhysicalId]","|");
				//	if(UIUtil.isNotNullAndNotEmpty(viPhysicalId)){
				//		virtualIntermediateList.add(viPhysicalId);
				//	}
	 			//}
			
			   //TO DO : invlude code for Virtual Intermediate
					//Iterator itr = virtualIntermediateList.iterator();
					//while(itr.hasNext()){
					//	String virtualIntermediateId = (String)itr.next();
					//	HashMap hm = new HashMap();
					//	hm.put("objectId", virtualIntermediateId);
					//	_finalsubstitutePartList.addAll(getSubstituteDetails(context,domObj, hm));
					//}
			}
			}
			}
			  //return _finalsubstitutePartList;			
		}
		catch (Exception e)
		{
			ContextUtil.abortTransaction(context);
			throw new FrameworkException(e);
			//Added the code for Defect 49698 - Spec Reader Access Issue - Starts
		}finally {
			if(isContextPushed) {
				ContextUtil.popContext(context);
			}
		}
	//Added the code for Defect 49698 - Spec Reader Access Issue - Starts
	//}
	return _finalsubstitutePartList;
}




private MapList getNotes(Context context, String strUserName, DomainObject dobjPart, Map mpObjectCommon) throws Exception
{	
	//Added the code for Defect 49698 - Spec Reader Access Issue - Starts
	boolean hasAccess = false;
	boolean isContextPushed = false;
	//Added the code for Defect 49698 - Spec Reader Access Issue - Ends
	MapList mpNotesMapList = new MapList();	
	MapList mlNotesMapListAll=new MapList();
	short recurseToLevel = 1;
	String strType = (String)mpObjectCommon.get(DomainConstants.SELECT_TYPE);
	StringList objectSelects = new StringList(DomainConstants.SELECT_ID);
	objectSelects.add(DomainConstants.SELECT_DESCRIPTION);
	Pattern objType = new Pattern("pgNotesCharacteristic");
	Pattern relType = new Pattern("Extended Data");
	StringList relSelects = new StringList(DomainConstants.SELECT_RELATIONSHIP_ID);
	relSelects.add("attribute[SharedTableCharacteristicSequence]");	
	//code to get the connected "Notes
	//Added the code for Defect 49698 - Spec Reader Access Issue - Starts
	try {
	if(SPECREADER.equalsIgnoreCase(strOriginatingSource)) {
		hasAccess = accessCheck(context, strUserName, (String)dobjPart.getInfo(context, DomainConstants.SELECT_ID));
		if(hasAccess) {
			//Push Context User Agent
			ContextUtil.pushContext(context,PropertyUtil.getSchemaProperty(context,"User Agent"),DomainConstants.EMPTY_STRING,DomainConstants.EMPTY_STRING);
			isContextPushed = true;
			
		}
	}
	//Added the code for Defect 49698 - Spec Reader Access Issue - Ends
	mpNotesMapList=dobjPart.getRelatedObjects(context, 
			relType.getPattern(),
			objType.getPattern(), 
			objectSelects, 
			relSelects, 
			false,
			true,
			(short) 1,
			null, 
			null);
	
	Map mpNotesRow = null;
	String strNotesSequence = DomainConstants.EMPTY_STRING;
	String strNotesDescription = DomainConstants.EMPTY_STRING;
	
	int mpNotesMapListSize = mpNotesMapList.size();
	if(mpNotesMapListSize>0) {
	for(int i=0;i<mpNotesMapListSize;i++) {
		mpNotesRow = (Map)mpNotesMapList.get(i);
		strNotesSequence = (String)mpNotesRow.get("attribute[SharedTableCharacteristicSequence]");
		strNotesDescription = (String)mpNotesRow.get(DomainConstants.SELECT_DESCRIPTION);
		mpNotesRow.put("CommonColumns", mpObjectCommon);
		mpNotesRow.put("Sequence", strNotesSequence);
		mpNotesRow.put("Notes", strNotesDescription);
		mlNotesMapListAll.add(mpNotesRow);
		}
		mlNotesMapListAll.sort("attribute[SharedTableCharacteristicSequence]", "ascending","integer");
	
		} 
	//Added the code for Defect 49698 - Spec Reader Access Issue - Starts
		}catch(Exception e) {
			outLog.print("Exception in method getNotes "+e+"\n");
			outLog.flush();
			
		}finally {
			if(isContextPushed) {
				ContextUtil.popContext(context);
			}
		}
	//Added the code for Defect 49698 - Spec Reader Access Issue - Ends
	return mlNotesMapListAll;
}

/**
 * Function Added  to traverse through the Product Data EBOM Structure and return it's Customer , Inner Pack and Consumer unit and their Master's Characterstics.
 * @param context
 * @param paramMap
 * @param finishedPartDO
 * @param objList
 * @param derivedFilterSelection
 * @return MapList with the connected EBOM Part and their Masters Characterstics
 * @throws Exception
 */
//Modifing the code for 2022x.02 May CW Defect 52204 - Starts
   private MapList getEbomPartsCharacterstics(Context context, DomainObject finishedPartDO, MapList objList,Map mpObjectCommon,boolean bIsEBPUser, boolean bHasCMAccess, boolean HasSupplierAccess) throws Exception
   {
	 //Modifing the code for 2022x.02 May CW Defect 52204 - Ends
	   HashMap paramMap                = new HashMap();
	   MapList ebomCharList            = new MapList();
	   MapList returnList              = new MapList();
	   String [] newArguments          = null;
	   String ebomPartId               = null;
	   String ebomPartName             = null;
	   String strDerivedPath           = null;
	   String relFromType              = null;
	   String relToType                = null;
	   String relFromId                = null;
	   String relFromName              = null;
	   String ebomPartType             = null;
	   MapList mlMasterCharList        = new MapList();
	   MapList mlFinalPerCharList      = new MapList();
	   StringList strlObjectSelectable = new StringList(3);
	   strlObjectSelectable.add(DomainConstants.SELECT_ID);
	   strlObjectSelectable.add(DomainConstants.SELECT_TYPE);
	   strlObjectSelectable.add(DomainConstants.SELECT_NAME);
       StringList strlRelSelectable = new StringList(3);
	   strlRelSelectable.add(DomainRelationship.SELECT_FROM_TYPE);
	   strlRelSelectable.add(DomainRelationship.SELECT_TO_TYPE);
	   strlRelSelectable.add(DomainRelationship.SELECT_FROM_ID);
       if (objList != null && objList.size() > 0)
	   {
		   returnList.addAll(objList);
	   }
       MapList conectedEBOMPartList = finishedPartDO.getRelatedObjects(context,
			   DomainObject.RELATIONSHIP_EBOM,
			   TYPE_PG_CUSTOMERUNIT+ ","+ TYPE_PG_INNERPACK+ ","+ TYPE_PG_CONSUMERUNIT,
			   strlObjectSelectable,//Object Select
			   strlRelSelectable, //rel Select
			   false,//get To
			   true,//get From
			   (short)0,//recurse level
			   "",//where Clause
			   null,//relationshipWhere Clause
			   0);//return all
       Iterator ebomItr         =conectedEBOMPartList.iterator();
	   while(ebomItr.hasNext())
	   {
		   Map partMap          =(Map)ebomItr.next();
		   ebomPartId           =(String)partMap.get(DomainConstants.SELECT_ID);
		   ebomPartName         =(String)partMap.get(DomainConstants.SELECT_NAME);
		   ebomPartType         =(String)partMap.get(DomainConstants.SELECT_TYPE);
		   if(TYPE_PG_CUSTOMERUNIT.equals(ebomPartType))
		   {
			 //Modifing the code for 2022x.02 May CW Defect 52204 - Starts
			   mlMasterCharList = getPerformanceCharactersticsValueForEBOMParts(context,ebomPartId,mpObjectCommon,bIsEBPUser, bHasCMAccess, HasSupplierAccess);
			 //Modifing the code for 2022x.02 May CW Defect 52204 - Ends
			   mlFinalPerCharList.addAll(mlMasterCharList);
		   }
		   //Added for Defect 49998:22x 01 -- Starts
		   if(TYPE_PG_CONSUMERUNIT.equals(ebomPartType) && !TYPE_PG_CONSUMERUNIT.equals(partMap.get(FROM_TYPE)))
		   {
			 //Modifing the code for 2022x.02 May CW Defect 52204 - Starts
			   mlMasterCharList = getPerformanceCharactersticsValueForEBOMParts(context,ebomPartId,mpObjectCommon,bIsEBPUser, bHasCMAccess, HasSupplierAccess);
			 //Modifing the code for 2022x.02 May CW Defect 52204 - Ends
			   mlFinalPerCharList.addAll(mlMasterCharList);
		   }
		   //Added for Defect 49998:22x 01 -- Ends
		   if(TYPE_PG_INNERPACK.equals(ebomPartType))
		   {
			 //Modifing the code for 2022x.02 May CW Defect 52204 - Starts
			   mlMasterCharList = getPerformanceCharactersticsValueForEBOMParts(context,ebomPartId,mpObjectCommon,bIsEBPUser, bHasCMAccess, HasSupplierAccess);
			 //Modifing the code for 2022x.02 May CW Defect 52204 - Ends
			   mlFinalPerCharList.addAll(mlMasterCharList);
		   }
		   

	   }
	   return mlFinalPerCharList;
}
   
/**This method is used to get the Selectable for the Part Masters.
* @param context is the matrix context
* @param args has the required information
* @return String
* 
*/ 
private String getMasterPartSelect(Context context, String finalSelect) {
		String classifiedItemRel          = PropertyUtil.getSchemaProperty(context,"relationship_ClassifiedItem");
		String partFamilyReferenceRel     = PropertyUtil.getSchemaProperty(context,"relationship_PartFamilyReference");
		StringBuffer masterPartSelectBuf  = new StringBuffer();
		masterPartSelectBuf.append("to[")
							.append(classifiedItemRel)
							.append("].frommid[")
							.append(partFamilyReferenceRel)
							.append("].torel.to.")
							.append(finalSelect);
		return masterPartSelectBuf.toString();
	}
   
   /**
	 * This Method returns StringList of selectable 
	 * @param selects
	 * @return selectList
	 */
private StringList createSelects(String... selects)
	{
		StringList selectList = new StringList();
		for(String select : selects)
		{
			selectList.add(select);
		}
		return selectList;
	}
	
	/**This method is used to get the Performance Characterstics.
	* @param context is the matrix context
	* @param args has the required information
	* @return MapList
	* 
	*/ 
//Modifing the code for 2022x.02 May CW Defect 52204 - Starts
private MapList getCharacteristicsList(Context context, String objectId,Map mpObjectCommon, boolean bIsEBPUser, boolean bHasCMAccess, boolean bHasSupplierAccess) throws Exception {
	
	boolean bHasTabAccess = false;
	String strParttype="";
	//Modifing the code for 2022x.02 May CW Defect 52204 - Ends
	
	String relExtendedData = PropertyUtil.getSchemaProperty(context,"relationship_ExtendedData");
	String relPattern             = relExtendedData+pgV3Constants.SYMBOL_COMMA+RELATIONSHIP_CHARACTERISTIC + "," + RELATIONSHIP_SHARED_TABLE;
	MapList objList               = new MapList();
		MapList mpfinalPerCharList    = new MapList();
		String strCharId              = null;
		StringList slTMObjectsSelect  =new StringList(2);
		MapList mlTestMethodList      = new MapList();
		StringList slTMNames          =new StringList(1);
		MapList mlTMRD                =new MapList();
		StringList slTMRDNames        =new StringList(1);
		String objTMRDTypes           =TYPE_PG_TMRD_TYPES;
		int iTMSize                   =0;
		String typePattern            = TYPE_SHARED_TABLE + "," +TYPE_PG_PERFORMANCECHARACTERISTIC;
		StringList objectSelects      = new StringList();
		objectSelects.add(DomainConstants.SELECT_ID);
		objectSelects.add(DomainConstants.SELECT_CURRENT);
		objectSelects.add(DomainObject.SELECT_NAME);
		objectSelects.add(DomainObject.SELECT_TYPE);
		objectSelects.add(DomainObject.SELECT_POLICY);
		objectSelects.add(CPNCommonConstants.SELECT_ATTRIBUTE_SHAREDTTABLECHARACTERISTICTYPE);
		objectSelects.add("attribute["+ATTR_PG_CHANGE + "]");
		objectSelects.add("attribute["+ATTR_PG_CHARACTERISTIC + "]");
		objectSelects.add("attribute["+ATTR_PG_CHARACTERISTIC_SPECIFIC + "]");
		objectSelects.add("attribute["+ATTR_PG_CHARACTERISTIC_SPECIFIC + "]");
		objectSelects.add("attribute["+ATTR_PG_TM_LOGIC + "]");
		objectSelects.add("attribute["+ATTR_PG_METHOD_ORIGIN + "]");
		objectSelects.add("attribute["+ATTR_PG_METHOD_NUMBER + "]");
		objectSelects.add("attribute["+ATTR_PG_METHOD_SPECIFICS + "]");
		objectSelects.add("attribute["+ATTR_PG_SAMPLING + "]");
		objectSelects.add("attribute["+ATTR_PG_SUB_GROUP + "]");
		objectSelects.add("attribute["+ATTR_PG_PLANT_RETESTING + "]");
		objectSelects.add("attribute["+ATTR_PG_PLANT_TESTING + "]");
		objectSelects.add("attribute["+ATTR_PG_RETESTING_UOM + "]");
		objectSelects.add("attribute["+ATTR_PG_LOWER_SPECIFICATION_LIMIT + "]");
		objectSelects.add("attribute["+ATTR_PG_LOWER_TARGET + "]");
		objectSelects.add("attribute["+ATTR_PG_TARGET + "]");
		objectSelects.add("attribute["+ATTR_PG_UPPER_TARGET + "]");
		objectSelects.add("attribute["+ATTR_PG_UPPER_SPECIFICATION_LIMIT + "]");
		objectSelects.add("attribute["+ATTR_PG_UOM + "]");
		objectSelects.add("attribute["+ATTR_PG_REPORT_NEAREST + "]");
		objectSelects.add("attribute["+ATTR_PG_REPORT_TYPE + "]");
		objectSelects.add("attribute["+ATTR_PG_RELEASE_CRITERIA + "]");
		objectSelects.add("attribute["+ATTR_PG_ACTION_REQUIRED + "]");
		objectSelects.add("attribute["+ATTR_PG_CRITICALITY_FACTOR + "]");
		objectSelects.add("attribute["+ATTR_PG_BASIS + "]");
		objectSelects.add("attribute["+ATTR_PG_TEST_GROUP + "]");
		objectSelects.add("attribute["+ATTR_PG_APPLICATION + "]");
		objectSelects.add("to[Derived].from.name");
		objectSelects.add("to[Derived].from.attribute[Title]");
		objectSelects.add(pgV3Constants.SELECT_ATTRIBUTE_PGUPPERROUTINERELEASELIMIT);
		objectSelects.add(pgV3Constants.SELECT_ATTRIBUTE_PGLOWERROUTINRRELEASELIMIT);
		StringList relSelects = new StringList();
		relSelects.add(DomainObject.SELECT_RELATIONSHIP_ID);
		relSelects.add(SELECT_ATTRIBUTE_SHAREDTABLECHARACTERISTICSEQUENCE);
		DomainObject doMasterPart = DomainObject.newInstance(context,objectId);
		//Modifing the code for 2022x.02 May CW Defect 52204 - Starts
		StringList slObjectSelectables = new StringList();
		slObjectSelectables.add(DomainConstants.SELECT_TYPE);
		Map mpPartFamilyInputData = doMasterPart.getInfo(context, slObjectSelectables);
		strParttype = (String)mpPartFamilyInputData.get(DomainConstants.SELECT_TYPE);
		//Modifing the code for 2022x.02 May CW Defect 52204 - Ends
		
		if(!"#DENIED!".equals(objectId)) {
	       objList = doMasterPart.getRelatedObjects(context,
			relPattern,
			typePattern,
			objectSelects,
			relSelects,
			false,
			true,
			(short)1,
			null,
			null);
		Map mpCharacterstics              = null;  
		String strCharType                = DomainConstants.EMPTY_STRING;
		for(int j=0;j<objList.size();j++){
			mpCharacterstics              = (Map)objList.get(j);
			strCharType=(String)mpCharacterstics.get("type");
			if(strCharType.equals(TYPE_PG_PERFORMANCECHARACTERISTIC))
			{
				mpCharacterstics.put("CommonColumns", mpObjectCommon);
                strCharId                  =(String)mpCharacterstics.get("id");
				DomainObject doObjChar     = DomainObject.newInstance(context, strCharId);
				String sRelRefDoc          = DomainConstants.RELATIONSHIP_REFERENCE_DOCUMENT;
				String sPropertiesRel      = "Properties Testing Requirements";
				String strTestMethodTypes  =TYPE_PG_TEST_METHOD + "," +TYPE_TEST_METHOD;
				slTMObjectsSelect.add(DomainConstants.SELECT_ID);
				slTMObjectsSelect.add(DomainConstants.SELECT_NAME);
				slTMObjectsSelect.add(DomainConstants.SELECT_CURRENT);
				slTMObjectsSelect.add(DomainConstants.SELECT_DESCRIPTION);
				slTMObjectsSelect.add(DomainConstants.SELECT_REVISION);
				slTMObjectsSelect.add(DomainConstants.SELECT_TYPE);
				slTMObjectsSelect.add(pgV3Constants.SELECT_ATTRIBUTE_TITLE);
				mlTestMethodList            = doObjChar.getRelatedObjects(context,sRelRefDoc,strTestMethodTypes,slTMObjectsSelect,DomainConstants.EMPTY_STRINGLIST, true, true, (short) 1, null, null,0);
				iTMSize                     =mlTestMethodList.size();
				String strTMNames           =null;
				String strTMRDNames         =null;
				String strCompleteTMNames   =DomainConstants.EMPTY_STRING;
				String strCompleteTMRDNames =DomainConstants.EMPTY_STRING;
				String strCompleteTMNamesId =DomainConstants.EMPTY_STRING;
				Map mpTMNames = null;
				String strTMId = DomainConstants.EMPTY_STRING;
				for(int iIndex=0;iIndex<iTMSize;iIndex++)
				{
					mpTMNames               =(Map)mlTestMethodList.get(iIndex);
					strTMNames              =(String)mpTMNames.get("name");
					strTMId                 = (String)mpTMNames.get("id");
					slTMNames.addElement(strTMNames);
                    strCompleteTMNamesId    =strCompleteTMNamesId+","+strTMId;

				}
				slTMNames.sort();

				for(int iIndex1=0;iIndex1<slTMNames.size();iIndex1++)
				{

					strCompleteTMNames      =strCompleteTMNames+"@#@"+slTMNames.get(iIndex1);
				}

				mpCharacterstics.put("TestMethod",strCompleteTMNames);
				mpCharacterstics.put("TestMethodIds",strCompleteTMNamesId);

				// TMRD LOGIC
				mlTMRD = doObjChar.getRelatedObjects(context, sRelRefDoc, objTMRDTypes, slTMObjectsSelect, null, true, true, (short) 1, null, null,0);
				iTMSize=mlTMRD.size();
				Map mpTMRDNames  = null;
				for(int iIndex=0;iIndex<iTMSize;iIndex++)
				{
					mpTMRDNames            =(Map)mlTMRD.get(iIndex);
					strTMRDNames           =(String)mpTMRDNames.get("name");
					slTMRDNames.addElement(strTMRDNames);
				}
				slTMRDNames.sort();

				for(int iIndex1=0;iIndex1<slTMRDNames.size();iIndex1++)
				{

					strCompleteTMRDNames   =strCompleteTMRDNames+"@#@"+slTMRDNames.get(iIndex1);
				}

				mpCharacterstics.put("TMRD",strCompleteTMRDNames);
				//Modifing the code for 2022x.02 May CW Defect 52204 - Starts
				bHasTabAccess = getUserTabAccess(bIsEBPUser, bHasCMAccess, bHasSupplierAccess, strParttype, strEBPSpecsDocsCharRef_CM, strEBPSpecsDocsCharRef_Supplier, strSpecsDocsCharDocs_NonEBP);
				if(bHasTabAccess){
					mpCharacterstics.put("TMRDAccess","TRUE");
				}
				//Modifing the code for 2022x.02 May CW Defect 52204 - Ends
                mpfinalPerCharList.add(mpCharacterstics);
				slTMNames.clear();
				slTMRDNames.clear();
			}
			
        }
		 
	} 
        
        return mpfinalPerCharList;
	}
	
	/**This method is used to get the Performance Characterstics Value for the EBOM Relationship connected Parts.
	* @param context is the matrix context
	* @param args has the required information
	* @return MapList
	* 
	*/ 
//Modifing the code for 2022x.02 May CW Defect 52204 - Starts
	 private MapList getPerformanceCharactersticsValueForEBOMParts(Context context, String ebomPartId,Map mpObjectCommon, boolean bIsEBPUser, boolean bHasCMAccess, boolean bHasSupplierAccess) throws Exception {
		//Modifing the code for 2022x.02 May CW Defect 52204 - Ends	  
		 MapList mlMasterCharList       = new MapList();
		   MapList mlEBOMCharList         = new MapList();
		   MapList mlFinalPerCharList     = new MapList();
		   //Modified the code for Defect 49998 22x 01 - CW - starts
		   boolean isContextPushed=false;
		   try {
			 //We are pushing the User Agent context to fetch the Substitute Part info - if we are doing the same with CM/Supplier/any user who does not have access on a Part, ml will be empty but data is shown in the UI so we are making this change to match the report with UI   

//			//Modified the code for  Defect 49998 22x 01 - CW - Ends
		   String masterPartIdSelect      = getMasterPartSelect(context, SELECT_ID);
		   String masterPartNameSelect    = getMasterPartSelect(context, SELECT_NAME);
		   String masterPartTypeSelect    = getMasterPartSelect(context, SELECT_TYPE);
	       String masterPartCurrentSelect = getMasterPartSelect(context, SELECT_CURRENT);
	       if(UIUtil.isNotNullAndNotEmpty(ebomPartId)) {
	       DomainObject doObj             = DomainObject.newInstance(context, ebomPartId);
	     //Modifing the code for 2022x.02 May CW Defect 52204 - Starts
	       mlEBOMCharList                 = getCharacteristicsList(context, ebomPartId,mpObjectCommon,bIsEBPUser, bHasCMAccess, bHasSupplierAccess);
	     //Modifing the code for 2022x.02 May CW Defect 52204 - Ends
	       mlFinalPerCharList.addAll(mlEBOMCharList);
		   StringList objSelects          = createSelects(SELECT_ID,SELECT_NAME,SELECT_POLICY,"attribute["+ATTRIBUTE_STAGE+"]",masterPartIdSelect, masterPartNameSelect,masterPartTypeSelect, "to["+pgV3Constants.RELATIONSHIP_CLASSIFIEDITEM+"].frommid["+REL_PARTFAMILYREFERENCE+"].torel.to.current");	
		   Map objAndMasterMap            = doObj.getInfo(context, objSelects);
		   if(objAndMasterMap != null && !objAndMasterMap.isEmpty())
			{
				String masterPartId       = (String)objAndMasterMap.get(masterPartIdSelect);				
				String strMasterPartPolicy= (String)objAndMasterMap.get(SELECT_POLICY);
				String strMasterPartState = (String)objAndMasterMap.get("to["+pgV3Constants.RELATIONSHIP_CLASSIFIEDITEM+"].frommid["+REL_PARTFAMILYREFERENCE+"].torel.to.current");
	
				if (UIUtil.isNotNullAndNotEmpty(masterPartId) && pgV3Constants.STATE_RELEASE.equalsIgnoreCase(strMasterPartState)){
					//Modifing the code for 2022x.02 May CW Defect 52204 - Starts
					mlMasterCharList      =getCharacteristicsList(context, masterPartId,mpObjectCommon,bIsEBPUser, bHasCMAccess, bHasSupplierAccess);
					//Modifing the code for 2022x.02 May CW Defect 52204 - Starts	
					
				mlFinalPerCharList.addAll(mlMasterCharList);
				} 
				
			}
		   
	      } 
	     //Modified the code for 22x 01 - CW - starts
		   }catch(Exception e) {
			   outLog.print("Exception in getPerformanceCharactersticsValueForEBOMParts "+e+"\n");
				outLog.flush();
		   }
		 //Modified the code for 22x 01 - CW - Ends
	       return mlFinalPerCharList;
			
		}
	 /**This method is used to update the worksheet for the FOP Formula Ingredient Tab.
		* @param context is the matrix context
		* @param args has the required information
		* @return void
		* 
		*/ 
	 private void updateWorksheetFormulaIngredient(Context context, XSSFWorkbook workbook,XSSFRow rowHeaderFormulaIngredient,XSSFCellStyle cellStyleFormulaIngredient,MapList mlFormulaIngredient,XSSFSheet sheetFormulaIngredient, String strHyperlink, XSSFCellStyle styleGlobal){
			try {
				//Added code for 2018x.6 Requirement id 36700 Ability to generate Part and Spec report with without hyperlink Starts
				String strHyperlinkLimit = EnoviaResourceBundle.getProperty(context, EMXCPNSTRINGRESOURCE, context.getLocale(),"emxCPN.PartAndSpecReport.HyperlinkLimit");
				int iHyperLinkLimit = Integer.parseInt(strHyperlinkLimit);
				int iRowCountAll=0;
				//Added code for 2018x.6 Requirement id 36700 Ability to generate Part and Spec report with without hyperlink Ends
				String sStringResourceFile="emxCPNStringResource"; 
				String sLanguage = context.getSession().getLanguage();
				String strFormulaIngredientChangeAction= i18nNow.getI18nString("emxCPN.FamilyCareReport.Worksheet.Column.ChangeAction",sStringResourceFile, sLanguage);
				String strFormulaIngredientReasonForChange=i18nNow.getI18nString("emxCPN.FamilyCareReport.Worksheet.Column.ChangeActionReasonForChange",sStringResourceFile, sLanguage);
				String strFormulaIngredientNameOrNumber=i18nNow.getI18nString("emxCPN.FamilyCareReport.Worksheet.Column.NameOrNumber",sStringResourceFile, sLanguage);
				String strFormulaIngredientTitle=i18nNow.getI18nString("emxCPN.FamilyCareReport.Worksheet.Column.Title",sStringResourceFile, sLanguage);
				String strFormulaIngredientType=i18nNow.getI18nString("emxCPN.FamilyCareReport.Worksheet.Column.Type",sStringResourceFile, sLanguage);
			    String strFormulaIngredientRevision	= i18nNow.getI18nString("emxCPN.FamilyCareReport.Worksheet.Column.Revision",sStringResourceFile, sLanguage);
		        String strFormulaIngredientState= i18nNow.getI18nString("emxCPN.FamilyCareReport.Worksheet.Column.State",sStringResourceFile, sLanguage);
		        String strName= i18nNow.getI18nString("emxCPN.FamilyCareReport.Worksheet.FormulaIngredient.Column.Name",sStringResourceFile, sLanguage);
		        String strSequenceNumber= i18nNow.getI18nString("emxCPN.FamilyCareReport.Worksheet.FormulaIngredient.Column.SequenceNumber",sStringResourceFile, sLanguage);
		        String strTitleAndInstruction= i18nNow.getI18nString("emxCPN.FamilyCareReport.Worksheet.FormulaIngredient.Column.TitleAndInstruction",sStringResourceFile, sLanguage);
		        String strVIName= i18nNow.getI18nString("emxCPN.FamilyCareReport.Worksheet.FormulaIngredient.Column.VIName",sStringResourceFile, sLanguage);
		        String strMin= i18nNow.getI18nString("emxCPN.FamilyCareReport.Worksheet.FormulaIngredient.Column.Min",sStringResourceFile, sLanguage);
		        String strWetWeightMin= i18nNow.getI18nString("emxCPN.FamilyCareReport.Worksheet.FormulaIngredient.Column.WetWeightMin",sStringResourceFile, sLanguage);
		        String strWet= i18nNow.getI18nString("emxCPN.FamilyCareReport.Worksheet.FormulaIngredient.Column.Wet",sStringResourceFile, sLanguage);
		        String strMax= i18nNow.getI18nString("emxCPN.FamilyCareReport.Worksheet.FormulaIngredient.Column.Max",sStringResourceFile, sLanguage);
		        String strWetWeightMax= i18nNow.getI18nString("emxCPN.FamilyCareReport.Worksheet.FormulaIngredient.Column.WetWeightMax",sStringResourceFile, sLanguage);
		        String strTargetWetWeight= i18nNow.getI18nString("emxCPN.FamilyCareReport.Worksheet.FormulaIngredient.Column.TargetWetWeight",sStringResourceFile, sLanguage);
		        String strProcessingLoss= i18nNow.getI18nString("emxCPN.FamilyCareReport.Worksheet.FormulaIngredient.Column.ProcessingLoss",sStringResourceFile, sLanguage);
		        String strTargetDryWeight= i18nNow.getI18nString("emxCPN.FamilyCareReport.Worksheet.FormulaIngredient.Column.TargetDryWeight",sStringResourceFile, sLanguage);
		        String strDry= i18nNow.getI18nString("emxCPN.FamilyCareReport.Worksheet.FormulaIngredient.Column.Dry",sStringResourceFile, sLanguage);
		        String strProcessingNote= i18nNow.getI18nString("emxCPN.FamilyCareReport.Worksheet.FormulaIngredient.Column.ProcessingNote",sStringResourceFile, sLanguage);
		        String strFunction= i18nNow.getI18nString("emxCPN.FamilyCareReport.Worksheet.FormulaIngredient.Column.Function",sStringResourceFile, sLanguage);
		        String strReportedFunction= i18nNow.getI18nString("emxCPN.FamilyCareReport.Worksheet.FormulaIngredient.Column.ReportedFunction",sStringResourceFile, sLanguage);
		        String strPhase= i18nNow.getI18nString("emxCPN.FamilyCareReport.Worksheet.FormulaIngredient.Column.Phase",sStringResourceFile, sLanguage);
		        String strTypeInfo= i18nNow.getI18nString("emxCPN.FamilyCareReport.Worksheet.FormulaIngredient.Column.TypeInfo",sStringResourceFile, sLanguage);
		        String strUnitsValue= i18nNow.getI18nString("emxCPN.FamilyCareReport.Worksheet.FormulaIngredient.Column.UnitsValue",sStringResourceFile, sLanguage);
		        String strCertifications= i18nNow.getI18nString("emxCPN.FamilyCareReport.Worksheet.FormulaIngredient.Column.Certifications",sStringResourceFile, sLanguage);
		        String strStateInfo= i18nNow.getI18nString("emxCPN.FamilyCareReport.Worksheet.FormulaIngredient.Column.StateInfo",sStringResourceFile, sLanguage);
		        String strRevInfo= i18nNow.getI18nString("emxCPN.FamilyCareReport.Worksheet.FormulaIngredient.Column.RevInfo",sStringResourceFile, sLanguage);
		        String strPolicyInfo= i18nNow.getI18nString("emxCPN.FamilyCareReport.Worksheet.FormulaIngredient.Column.PolicyInfo",sStringResourceFile, sLanguage);
		        
		        //Creating Header ---Begin
				//1 Change Action
				Cell cellChangeAction = rowHeaderFormulaIngredient.createCell(0);
				cellChangeAction.setCellStyle(cellStyleFormulaIngredient);
				cellChangeAction.setCellValue(strFormulaIngredientChangeAction);

				//2 Change Action 'Reason for Change'
				Cell cellChangeActionReasonForChange = rowHeaderFormulaIngredient.createCell(1);
				cellChangeActionReasonForChange.setCellStyle(cellStyleFormulaIngredient);
				cellChangeActionReasonForChange.setCellValue(strFormulaIngredientReasonForChange);

				//3 Name/Number
				Cell cellNameOrNumber = rowHeaderFormulaIngredient.createCell(2);
				cellNameOrNumber.setCellStyle(cellStyleFormulaIngredient);
				cellNameOrNumber.setCellValue(strFormulaIngredientNameOrNumber);

				//4 Title
				Cell cellTitle = rowHeaderFormulaIngredient.createCell(3);
				cellTitle.setCellStyle(cellStyleFormulaIngredient);
				cellTitle.setCellValue(strFormulaIngredientTitle);

				//5 Type
				Cell cellType = rowHeaderFormulaIngredient.createCell(4);
				cellType.setCellStyle(cellStyleFormulaIngredient);
				cellType.setCellValue(strFormulaIngredientType);			

				//6 Revision
				
				Cell cellRevision = rowHeaderFormulaIngredient.createCell(5);
				cellRevision.setCellStyle(cellStyleFormulaIngredient);
				cellRevision.setCellValue(strFormulaIngredientRevision);
				
				//7 State
				Cell cellState = rowHeaderFormulaIngredient.createCell(6);
				cellState.setCellStyle(cellStyleFormulaIngredient);
				cellState.setCellValue(strFormulaIngredientState);
				
				//8 Name
				Cell cellFormulaIngredientName = rowHeaderFormulaIngredient.createCell(7);
				cellFormulaIngredientName.setCellStyle(cellStyleFormulaIngredient);
				cellFormulaIngredientName.setCellValue(strName);
			
				//9 Sequence Number
				Cell cellSequenceNumber = rowHeaderFormulaIngredient.createCell(8);
				cellSequenceNumber.setCellStyle(cellStyleFormulaIngredient);
				cellSequenceNumber.setCellValue(strSequenceNumber);
				
				//10 Title/Instruction
				Cell cellTitleAndInstruction = rowHeaderFormulaIngredient.createCell(9);
				cellTitleAndInstruction.setCellStyle(cellStyleFormulaIngredient);
				cellTitleAndInstruction.setCellValue(strTitleAndInstruction);
				
				//11 VI Name
				Cell cellVIName = rowHeaderFormulaIngredient.createCell(10);
				cellVIName.setCellStyle(cellStyleFormulaIngredient);
				cellVIName.setCellValue(strVIName);
				
				//12 Min % (w/w)
				Cell cellMin = rowHeaderFormulaIngredient.createCell(11);
				cellMin.setCellStyle(cellStyleFormulaIngredient);
				cellMin.setCellValue(strMin);
				
				//13 Wet Weight Min 
				Cell cellWetWeightMin = rowHeaderFormulaIngredient.createCell(12);
				cellWetWeightMin.setCellStyle(cellStyleFormulaIngredient);
				// Added for Defect:44470 - Removing Trailing Spaces - Starts
				cellWetWeightMin.setCellValue(strWetWeightMin.trim());
				// Added for Defect:44470 - Removing Trailing Spaces - Ends
				
				//14 Wet % (w/w)
				Cell cellWet = rowHeaderFormulaIngredient.createCell(13);
				cellWet.setCellStyle(cellStyleFormulaIngredient);
				cellWet.setCellValue(strWet);
				
				//15 Max % (w/w)
				Cell cellMax = rowHeaderFormulaIngredient.createCell(14);
				cellMax.setCellStyle(cellStyleFormulaIngredient);
				cellMax.setCellValue(strMax);
				
				//16 Wet Weight Max
				Cell cellWetWeightMax = rowHeaderFormulaIngredient.createCell(15);
				cellWetWeightMax.setCellStyle(cellStyleFormulaIngredient);
				cellWetWeightMax.setCellValue(strWetWeightMax);
				
				//17 Target Wet Weight
				Cell cellTargetWetWeight = rowHeaderFormulaIngredient.createCell(16);
				cellTargetWetWeight.setCellStyle(cellStyleFormulaIngredient);
				cellTargetWetWeight.setCellValue(strTargetWetWeight);
				
				//18 Processing Loss %
				Cell cellProcessingLoss = rowHeaderFormulaIngredient.createCell(17);
				cellProcessingLoss.setCellStyle(cellStyleFormulaIngredient);
				cellProcessingLoss.setCellValue(strProcessingLoss);
				
				//19 Target Dry Weight
				Cell cellTargetDryWeight = rowHeaderFormulaIngredient.createCell(18);
				cellTargetDryWeight.setCellStyle(cellStyleFormulaIngredient);
				cellTargetDryWeight.setCellValue(strTargetDryWeight);
				
				//20 Dry % (w/w)
				Cell cellDry = rowHeaderFormulaIngredient.createCell(19);
				cellDry.setCellStyle(cellStyleFormulaIngredient);
				cellDry.setCellValue(strDry);
				
				
				//21 Processing Note
				Cell cellProcessingNote = rowHeaderFormulaIngredient.createCell(20);
				cellProcessingNote.setCellStyle(cellStyleFormulaIngredient);
				cellProcessingNote.setCellValue(strProcessingNote);
				
				//22 Function
				Cell cellFunction = rowHeaderFormulaIngredient.createCell(21);
				cellFunction.setCellStyle(cellStyleFormulaIngredient);
				cellFunction.setCellValue(strFunction);
				
				//23 Reported Function
				Cell cellReportedFunction = rowHeaderFormulaIngredient.createCell(22);
				cellReportedFunction.setCellStyle(cellStyleFormulaIngredient);
				cellReportedFunction.setCellValue(strReportedFunction);
				
				//24 Phase
				Cell cellPhase = rowHeaderFormulaIngredient.createCell(23);
				cellPhase.setCellStyle(cellStyleFormulaIngredient);
				cellPhase.setCellValue(strPhase);
				
				//25 Type
				Cell cellTypeInfo = rowHeaderFormulaIngredient.createCell(24);
				cellTypeInfo.setCellStyle(cellStyleFormulaIngredient);
				cellTypeInfo.setCellValue(strTypeInfo);
				
				//26 Units Value
				Cell cellUnitsValue = rowHeaderFormulaIngredient.createCell(25);
				cellUnitsValue.setCellStyle(cellStyleFormulaIngredient);
				cellUnitsValue.setCellValue(strUnitsValue);
				
				//27 Certifications
				Cell cellCertifications = rowHeaderFormulaIngredient.createCell(26);
				cellCertifications.setCellStyle(cellStyleFormulaIngredient);
				cellCertifications.setCellValue(strCertifications);
				//28 State
				Cell cellStateInfo = rowHeaderFormulaIngredient.createCell(27);
				cellStateInfo.setCellStyle(cellStyleFormulaIngredient);
				cellStateInfo.setCellValue(strStateInfo);
				//29 Rev
				Cell cellRevInfo = rowHeaderFormulaIngredient.createCell(28);
				cellRevInfo.setCellStyle(cellStyleFormulaIngredient);
				cellRevInfo.setCellValue(strRevInfo);
				//30 Policy
				Cell cellPolicyInfo = rowHeaderFormulaIngredient.createCell(29);
				cellPolicyInfo.setCellStyle(cellStyleFormulaIngredient);
				cellPolicyInfo.setCellValue(strPolicyInfo);
				 //Creating Header ---End
				
				int rowCount1 = 0;
				String strTypeName = DomainConstants.EMPTY_STRING;
				String strCurrentState = DomainConstants.EMPTY_STRING;
				Hashtable htCommonCol1 = new Hashtable<>();
				Map mp=null;
				HashMap hm= new HashMap<>();
				Hashtable htCommonCol = new Hashtable<>();
				String strTypeDisplayName=null;
				XSSFRow row=null;
				int columnCount1 = 0;
				Cell cell =null;
				String strFOPChildType = DomainConstants.EMPTY_STRING;
				//Added code for Req Id : 33634 - Hyperlinks--Starts
				String strValue = DomainConstants.EMPTY_STRING;
				String strParentId = DomainConstants.EMPTY_STRING;
				String strChildId = DomainConstants.EMPTY_STRING;
				String strPartName = DomainConstants.EMPTY_STRING;
				String strPartId = DomainConstants.EMPTY_STRING;
				String strVIId = DomainConstants.EMPTY_STRING;
				String strCAId = DomainConstants.EMPTY_STRING;
				String strHyperlinkId = DomainConstants.EMPTY_STRING;
				String strCellValue = DomainConstants.EMPTY_STRING;
				//Added code for Req Id : 33634 - Hyperlinks--Ends
				//Added code for 2018x6.1 Oct CW requirement 44448 Starts
				String strQuantity = DomainConstants.EMPTY_STRING;
				//Added code for 2018x6.1 Oct CW requirement 44448 Ends
				for (int i=0;i<mlFormulaIngredient.size();i++){
					//Added code for 2018x.6 Requirement id 36700 Ability to generate Part and Spec report with without hyperlink Starts
					iRowCountAll = iRowCountAll + 1;
					//Added code for 2018x.6 Requirement id 36700 Ability to generate Part and Spec report with without hyperlink Ends
					row = sheetFormulaIngredient.createRow(++rowCount1);
					columnCount1 = 0;
					mp = (Map)mlFormulaIngredient.get(i);
					htCommonCol = (Hashtable) mp.get("CommonColumns");
					strTypeName =(String)htCommonCol.get("type");
					strCurrentState =(String)htCommonCol.get("current");
					strTypeDisplayName= getTypeDisplayName(context,strTypeName);
					//Added for Defect - 32736--starts
					if((pgV3Constants.TYPE_FORMULATIONPART).equals(mp.get(DomainConstants.SELECT_TYPE))){
						String strMappedType = getMappedType(context,(String)mp.get(DomainConstants.SELECT_ID));
						strFOPChildType =  i18nNow.getTypeI18NString(strMappedType, context.getLocale().getLanguage());
					} else{
						strFOPChildType = getTypeDisplayName(context,(String)mp.get(DomainConstants.SELECT_TYPE));
					}
					//Added for Defect - 32736--ends
					//Added code for Req Id : 33634 - Hyperlinks--Starts
					strParentId = (String)htCommonCol.get("id");
					strChildId = (String)mp.get("id");
					strVIId = (String)mp.get(STRING_VIID);
					//Added by DSM Reports (Sogeti) for 2022x.5 (APR CW 2024) Defect 55875 - Start
					strCAId = (String)htCommonCol.get(SCAID);
					if(UIUtil.isNotNullAndNotEmpty(strCAId) && !strCAId.contains(HYPERLINK_PIPE)) {
						//Added code for Req Id : 33634 - Hyperlinks--Endss
						//if(strCurrentState.equalsIgnoreCase("Release") || strCurrentState.equalsIgnoreCase("Released")){
						if(htCommonCol.get(CAREALIZEDNAME) != null && htCommonCol.get(CAPROPOSEDNAME) != null) {
							//Updated code for Req Id : 33634 - Hyperlinks--Starts
							hm.put(0, HYPERLINK+htCommonCol.get(CAREALIZEDNAME)+HYPERLINK_PIPE+strCAId);
							//Updated code for Req Id : 33634 - Hyperlinks--Ends
						} else if(htCommonCol.get(CAREALIZEDNAME) != null){
							//Updated code for Req Id : 33634 - Hyperlinks--Starts
							hm.put(0, HYPERLINK+htCommonCol.get(CAREALIZEDNAME)+HYPERLINK_PIPE+strCAId);
							//Updated code for Req Id : 33634 - Hyperlinks--Ends
						} else if(htCommonCol.get(CAPROPOSEDNAME) != null){
							//Updated code for Req Id : 33634 - Hyperlinks--Starts
							hm.put(0, HYPERLINK+htCommonCol.get(CAPROPOSEDNAME)+HYPERLINK_PIPE+strCAId);
							//Updated code for Req Id : 33634 - Hyperlinks--Ends
						} else {
							hm.put(0, DomainConstants.EMPTY_STRING);
						}
					} else {
						hm.put(0,htCommonCol.get(CAPROPOSEDNAME));
					}
					//Added by DSM Reports (Sogeti) for 2022x.5 (APR CW 2024) Defect 55875 - End
					hm.put(1, htCommonCol.get("attribute[Reason for Change]"));
					//Updated code for Req Id : 33634 - Hyperlinks--Starts
					hm.put(2, HYPERLINK+htCommonCol.get("name")+HYPERLINK_PIPE+strParentId);
					//Updated code for Req Id : 33634 - Hyperlinks--Ends
					hm.put(3, htCommonCol.get("attribute[Title]"));
					hm.put(4, strTypeDisplayName);
					hm.put(5, htCommonCol.get("revision"));
					hm.put(6, strCurrentState);
					//Updated code for Req Id : 33634 - Hyperlinks--Starts
					hm.put(7, HYPERLINK+mp.get(DomainConstants.SELECT_NAME)+HYPERLINK_PIPE+strChildId);// Name
					//Updated code for Req Id : 33634 - Hyperlinks--Ends
					hm.put(8, mp.get(pgV3Constants.SELECT_ATTRIBUTE_FINDNUMBER));// Sequence Number
					hm.put(9, mp.get(pgV3Constants.SELECT_ATTRIBUTE_TITLE));// Title/Instruction
					//Updated code for Req Id : 33634 - Hyperlinks--Starts
					hm.put(10, HYPERLINK+mp.get(STRING_VINAME)+HYPERLINK_PIPE+strVIId);// VI Name
					//Updated code for Req Id : 33634 - Hyperlinks--Ends
					hm.put(11, mp.get("attribute[Minimum Actual Percent Wet].inputvalue"));// Min % (w/w)
					hm.put(12, mp.get("attribute[pgMinimumActualWeightWet].inputvalue"));// Wet Weight Min 
					//Added code for 2018x6.1 Oct CW defect 44448 Starts
					strQuantity = (String) mp.get(pgV3Constants.SELECT_ATTRIBUTE_QUANTITY+pgV3Constants.KEY_INPUTVALUE);
					strQuantity = getFormatedDecimalValue(strQuantity,FORMAT_DECIMAL_SIX); 
					hm.put(13, strQuantity);// Wet % (w/w)
					//Added code for 2018x6.1 Oct CW defect 44448 Ends
					hm.put(14, mp.get("attribute[Maximum Actual Percent Wet].inputvalue"));//Max % (w/w)
					hm.put(15, mp.get("attribute[pgMaximumActualWeightWet].inputvalue"));// Wet Weight Max
					hm.put(16, mp.get("attribute[Target Weight Wet].inputvalue"));// Target Wet Weight
					hm.put(17, mp.get("attribute[Loss].inputvalue"));// Processing Loss %
					hm.put(18, mp.get("attribute[Target Weight Dry].inputvalue"));// Target Dry Weight
					hm.put(19, mp.get("attribute[Total].inputvalue"));// Dry % (w/w)					
					hm.put(20, mp.get("attribute[Processing Note]"));// Processing Note
					hm.put(21, mp.get("attribute[" + ATTRIBUTE_APPLICATION + "]"));// Function
					hm.put(22, mp.get(STRING_REPORTEDFUNCTION));// Reported Function
					hm.put(23, mp.get("attribute[" + ATTRIBUTE_STAGE + "]"));// Phase
					hm.put(24, strFOPChildType);// Type
					hm.put(25, mp.get("attribute[Units Value]"));// Units Value
					hm.put(26, mp.get(STRING_CERTIFICATION));// Certifications
					hm.put(27, mp.get(DomainConstants.SELECT_CURRENT));// State
					hm.put(28, mp.get(DomainConstants.SELECT_REVISION));// Rev
					hm.put(29, mp.get(DomainConstants.SELECT_POLICY));//Policy
					
					//For Cells Creation in each Row
					XSSFCellStyle style = workbook.createCellStyle();
					style = setForeGroundColor(strCurrentState, style);
					//Added by DSM Reports (Sogeti) for 2022x.5 (APR CW 2024) Defect 55875 - Start
					XSSFCellStyle style1 = workbook.createCellStyle();
					//Added by DSM Reports (Sogeti) for 2022x.5 (APR CW 2024) Defect 55875 - End
					for(int j=0;j<hm.size();j++){								
						//Modified the code for _2022x_Aug CW Req-47097 :: Start
						// Modified by DSM Reports (Sogeti) for 22x.03 (August CW 2023) Defect 54091 - Start
						cell = row.createCell(columnCount1++);
						if (j == 2) {
							style = makeColumnNumeric(workbook, style);
						}
						cell.setCellStyle(style);
						
						// Modified by DSM Reports (Sogeti) for 22x.03 (August CW 2023) Defect 54091 - End
						//Modified the code for _2022x_Aug CW Req-47097 :: End
						//Added code for Req Id : 33634 - Hyperlinks--Starts
						strCellValue = (String)hm.get(j);
						if(UIUtil.isNotNullAndNotEmpty(strCellValue) && strCellValue.startsWith(HYPERLINK_COMPARE)){
							String[] strSplittedValue = strCellValue.split("\\|",-1); 
							strHyperlinkId = strSplittedValue[(strSplittedValue.length)-1];
							strValue = strSplittedValue[(strSplittedValue.length)-2];
							//Added code for 2018x.6 Requirement id 36700 Ability to generate Part and Spec report with without hyperlink Starts
							if(pgV3Constants.TRUE.equalsIgnoreCase(strHyperlink) && iRowCountAll < iHyperLinkLimit){
								getHyperlink(context,cell,workbook,strValue,strHyperlinkId,strCurrentState);
							
							} else if(UIUtil.isNotNullAndNotEmpty(strValue)) {					
								cell.setCellValue(strValue);
							}
							//Added code for 2018x.6 Requirement id 36700 Ability to generate Part and Spec report with without hyperlink Ends
						}else {
							cell.setCellValue((String)hm.get(j));
							//Added by DSM Reports (Sogeti) for 2022x.5 (APR CW 2024) Defect 55875 - Start
							if(j == 0) {
								style1.cloneStyleFrom(style);
								style1.setWrapText(true);
								cell.setCellStyle(style1);
							}
							//Added by DSM Reports (Sogeti) for 2022x.5 (APR CW 2024) Defect 55875 - End
						}
						//Added code for Req Id : 33634 - Hyperlinks--Ends
					}
				}
				sheetFormatter(sheetFormulaIngredient); // Added by DSM Reports (Sogeti) for 22x.04 (Dec CW 2023) Defect 56156 - START/END
			} catch (Exception e) {
				outLog.print("Exception in updateWorksheetFormulaIngredient: "+e+"\n");
				outLog.flush();
			}
		}
	
	/**This method is used to get the FOP Formula Ingredient Tab all the information.
		* @param context is the matrix context
		* @param args has the required information
		* @return MapList
		* 
		*/ 
	 private MapList getFormulaIngredientDetails(Context context, String strUserName,DomainObject dobjPart, Map mpObjectCommon) throws Exception
	 {
		//Added the code for Defect 49698 - Spec Reader Access Issue - Starts
		 boolean hasAccess = false;
		 boolean isContextPushed = false;
		 ////Added the code for Defect 49698 - Spec Reader Access Issue - Ends
		String strObjId = (String)mpObjectCommon.get("id");
		String strType = (String)mpObjectCommon.get("type");
	 	MapList mlFormulaIngredient = new MapList();
		MapList mlReportedFunction = new MapList();
		MapList mlVIName = new MapList();
		Map mpReportedFunction = null;
		Map mpVIName = null;
	 	MapList mlFormulaIngredientAll=new MapList();
	 	MapList mlFormulationPhase = new MapList();
	 	Map mpCommonColumn = new HashMap();
	 	Map mpFormulaIngredient = null;
	 	//boolean bIsEBPUser = isEBP(context, strUserName);
		//boolean bHasCMAccess = hasCMAccess(context, strUserName,strObjId);
		//boolean bHasSupplierAccess = hasSupplierAccess(context, strUserName,strObjId);
		//String strEBPFormulaIngredient_CM="~Formulation Part~Formulation~";
		//String strEBPFormulaIngredient_Supplier="";
		//boolean bIsTabAccess = getUserTabAccess(bIsEBPUser, bHasCMAccess, bHasSupplierAccess, strType, strEBPFormulaIngredient_CM, strEBPFormulaIngredient_Supplier);
	 	//if(bIsTabAccess){
		StringList objectSelects = new StringList(DomainConstants.SELECT_ID);
	 	objectSelects.add(DomainConstants.SELECT_NAME);
	 	objectSelects.add(DomainConstants.SELECT_TYPE);
	 	objectSelects.add(DomainConstants.SELECT_REVISION);
	 	objectSelects.add(DomainConstants.SELECT_POLICY);
	 	objectSelects.add(DomainConstants.SELECT_CURRENT);
	 	objectSelects.add(DomainConstants.SELECT_DESCRIPTION);
	 	objectSelects.add(pgV3Constants.SELECT_ATTRIBUTE_TITLE);
		objectSelects.add("attribute[" + ATTRIBUTE_STAGE + "]");
		
		Pattern objTypePattern = new Pattern(pgV3Constants.TYPE_FORMULATIONPROCESS);
	 	objTypePattern.addPattern(pgV3Constants.TYPE_FORMULATIONPHASE);
	 	objTypePattern.addPattern(pgV3Constants.TYPE_PGRAWMATERIAL);
	 	objTypePattern.addPattern(pgV3Constants.TYPE_RAWMATERIALPART);
	 	//Added code for Defect Id - 29969 : FOP not showing on FOP-Formula Ingredient--Starts
	 	objTypePattern.addPattern(pgV3Constants.TYPE_FORMULATIONPART);
	 	objTypePattern.addPattern(pgV3Constants.TYPE_ANCILLARYRAWMATERIALPART);
	 	objTypePattern.addPattern(pgV3Constants.TYPE_PGFORMULATEDPRODUCT);
	 	objTypePattern.addPattern(TYPE_VIRTUALINTERMEDIATE);
	 	objTypePattern.addPattern(pgV3Constants.TYPE_PGNONGCASPART);
	 	//Added code for Defect Id - 29969 : FOP not showing on FOP-Formula Ingredient--Ends
	 	Pattern relPattern = new Pattern(pgV3Constants.RELATIONSHIP_PLANNEDFOR);
	 	relPattern.addPattern(pgV3Constants.RELATIONSHIP_PLBOM);
	 	StringList relSelects = new StringList(DomainConstants.SELECT_RELATIONSHIP_ID);
	 	relSelects.add(pgV3Constants.SELECT_ATTRIBUTE_FINDNUMBER);
	 	//relSelects.add(pgV3Constants.SELECT_ATTRIBUTE_QUANTITY+".inputvalue");
	 	//relSelects.add("attribute[" + pgV3Constants.ATTRIBUTE_MIN + "].inputvalue");
	 	//relSelects.add(pgV3Constants.SELECT_ATTRIBUTE_PGMINIMUMACTUALWEIGHTWET+".inputvalue");
	 	//relSelects.add("attribute[" + pgV3Constants.ATTRIBUTE_MAX + "].inputvalue");
	 	//relSelects.add(pgV3Constants.SELECT_ATTRIBUTE_PGMAXIMUMACTUALWEIGHTWET+".inputvalue");
	 	//relSelects.add(pgV3Constants.SELECT_ATTRIBUTE_TARGETWETWEIGHT+".inputvalue");
	 	//relSelects.add(pgV3Constants.SELECT_ATTRIBUTE_LOSS+".inputvalue");
	 	//relSelects.add(pgV3Constants.SELECT_ATTRIBUTE_TARGETWEIGHTDRY+".inputvalue");
		//relSelects.add(pgV3Constants.SELECT_ATTRIBUTE_TOTAL+".inputvalue");
	 	//relSelects.add(pgV3Constants.SELECT_ATTRIBUTE_UNITSVALUE+".inputvalue");
	 	relSelects.add("attribute[Quantity].inputvalue");
	 	relSelects.add("attribute[Minimum Actual Percent Wet].inputvalue");
		relSelects.add("attribute[Maximum Actual Percent Wet].inputvalue");
	 	relSelects.add("attribute[pgMaximumActualWeightWet].inputvalue");
		relSelects.add("attribute[pgMinimumActualWeightWet].inputvalue");
	 	relSelects.add("attribute[Target Weight Wet].inputvalue");
		relSelects.add("attribute[Target Weight Dry].inputvalue");
	 	relSelects.add("attribute[Loss].inputvalue");
		relSelects.add("attribute[Total].inputvalue");
	 	relSelects.add("attribute[Units Value]");
	 	relSelects.add("attribute[Processing Note]");
	 	relSelects.add(pgV3Constants.SELECT_ATTRIBUTE_VIRTUALINTERMEDIATEPHYSICALID);
		relSelects.add(FormulationAttribute.APPLICATION.getAttributeSelect(context));
		//StringList relSelecteqNum = new StringList("to[FBOM].from.to[FBOM].attribute[Find Number]");
	 	String strFormulationProcessId =DomainConstants.EMPTY_STRING;
	 	Map mpFormulationProcess =null;
		Map relAttributeArg =new HashMap();
		Map certificationArg = new HashMap();
		Map ReportedFunctionArg = new HashMap();
		Map relVINameArg =new HashMap();
		String applications=DomainConstants.EMPTY_STRING;
		String certification=DomainConstants.EMPTY_STRING;
		String strVIName = DomainConstants.EMPTY_STRING;
		String strFormulationType = DomainConstants.EMPTY_STRING;
		String strParentSeqNumber = DomainConstants.EMPTY_STRING;
		String strObjectId = DomainConstants.EMPTY_STRING;
		String strSeqNum = DomainConstants.EMPTY_STRING;
		String strNewSeqNum = DomainConstants.EMPTY_STRING;
		DomainObject dObj =null;
		int strLevel = 0;
		int strFormulationLevel = 0;
		int strParentLevel = 0;
		//Added code for Req Id : 33634 - Hyperlinks--Starts
		Map mpVIData = new HashMap<>();
		//Added code for Req Id : 33634 - Hyperlinks--Ends
		try {
			//Added the code for Defect 49698 - Spec Reader Access Issue - Starts
		if(SPECREADER.equalsIgnoreCase(strOriginatingSource)) {
			//Added the code for 2018x Spec REader Defect 47026,47112 - Starts
			hasAccess = checkAccessforinputFOP(context, strUserName, (String)dobjPart.getInfo(context, DomainConstants.SELECT_ID));
			//Added the code for 2018x Spec REader Defect 47026,47112 - Ends
			if(hasAccess) {
				//Push Context User Agent
				ContextUtil.pushContext(context,PropertyUtil.getSchemaProperty(context,"User Agent"),DomainConstants.EMPTY_STRING,DomainConstants.EMPTY_STRING);
				isContextPushed = true;
				
			}
		}
		//Added the code for Defect 49698 - Spec Reader Access Issue - Ends
	 	mlFormulaIngredient = dobjPart.getRelatedObjects(context, 
	 			relPattern.getPattern(),
	 			objTypePattern.getPattern(), 
	 			objectSelects, 
	 			relSelects, 
	 			false,
	 			true,
	 			(short) 3,
	 			null, 
	 			null);
	 	int iFormulaIngredientSize =mlFormulaIngredient.size();
	 	if(iFormulaIngredientSize>0){
	 		for(int iIndex=0;iIndex<iFormulaIngredientSize;iIndex++) {
	 			mpFormulaIngredient = (Map) mlFormulaIngredient.get(iIndex);
	 			strFormulationType = (String)mpFormulaIngredient.get(DomainConstants.SELECT_TYPE);
	 			strObjectId = (String)mpFormulaIngredient.get(DomainConstants.SELECT_ID);
	 			strLevel= Integer.parseInt((String)mpFormulaIngredient.get("level"));
	 			//Added code for Defect Id - 29991 : Value of Sequence number in family care report FOP-Formula Ingredient sheet doesn't match the value in UI--Starts
	 				if(strFormulationType.equals(pgV3Constants.TYPE_FORMULATIONPHASE)){
	 					strParentSeqNumber = (String)mpFormulaIngredient.get(pgV3Constants.SELECT_ATTRIBUTE_FINDNUMBER);
	 					strParentLevel = strLevel;
	 				} else{
	 					if(strParentLevel<strLevel){
	 						strSeqNum = (String)mpFormulaIngredient.get(pgV3Constants.SELECT_ATTRIBUTE_FINDNUMBER);
	 						if(UIUtil.isNotNullAndNotEmpty(strSeqNum)){
	 							if(!strSeqNum.contains(".")){
	 								strNewSeqNum = strParentSeqNumber.concat(".").concat(strSeqNum);
	 							}
	 							else {
	 								strNewSeqNum=strSeqNum;
	 							}
	 							mpFormulaIngredient.put(pgV3Constants.SELECT_ATTRIBUTE_FINDNUMBER, strNewSeqNum);
	 						}
	 					}
	 				}
	 			//Added code for Defect Id - 29991 : Value of Sequence number in family care report FOP-Formula Ingredient sheet doesn't match the value in UI--Ends
	 				relAttributeArg.put("applications", (String)mpFormulaIngredient.get("attribute[" + ATTRIBUTE_APPLICATION + "]"));
	 				applications = getIdFromPhysicalId(context,JPO.packArgs(relAttributeArg));
	 				mpFormulaIngredient.put("attribute[" + ATTRIBUTE_APPLICATION + "]",applications);
	 				certificationArg.put("id",(String)mpFormulaIngredient.get(DomainConstants.SELECT_ID));
	 				certificationArg.put("type",(String)mpFormulaIngredient.get(DomainConstants.SELECT_TYPE));
	 				//Added the code for 2018x Spec REader Defect 47026,47112 - Starts
	 				certification = getCertificatonColumnLinks(context,strUserName,JPO.packArgs(certificationArg));
	 				//Added the code for 2018x Spec REader Defect 47026,47112 - Ends
	 				mpFormulaIngredient.put("certification",certification);
	 				ReportedFunctionArg.put("id",(String)mpFormulaIngredient.get(DomainConstants.SELECT_ID));
	 				mlReportedFunction = getReportedFunction(context,JPO.packArgs(ReportedFunctionArg));
	 				int iReportedFunctionSize =mlReportedFunction.size();
	 				if (iReportedFunctionSize>0){
	 					mpReportedFunction = (Map)mlReportedFunction.get(0);
	 					mpFormulaIngredient.put("reportedFunction",(String)mpReportedFunction.get(DomainConstants.SELECT_NAME));
	 				}
	 				relVINameArg.put("attribute_VirtualIntermediatePhysicalId",(String)mpFormulaIngredient.get(pgV3Constants.SELECT_ATTRIBUTE_VIRTUALINTERMEDIATEPHYSICALID));
	 				mpVIData = getVIName(context,JPO.packArgs(relVINameArg));
	 				//Updated code for defect id 39311 Starts
	 				if(!mpVIData.isEmpty()) {
		 				mpFormulaIngredient.put("VIname",mpVIData.get(STRING_VINAME));
		 				//Updated code for Req Id : 33634 - Hyperlinks--Starts
		 				mpFormulaIngredient.put("VIId",mpVIData.get(STRING_VIID));
		 				//Updated code for Req Id : 33634 - Hyperlinks--Ends
	 				} else {
	 					mpFormulaIngredient.put("VIname",DomainConstants.EMPTY_STRING);
		 				mpFormulaIngredient.put("VIId",DomainConstants.EMPTY_STRING);
	 				}
	 				//Updated code for defect id 39311 Ends
	 				mpFormulaIngredient.put("CommonColumns", mpObjectCommon);
	 				mlFormulaIngredientAll.add(mpFormulaIngredient);
	 			}
	 		}
	 	//}
	 	    //mlFormulaIngredientAll.sort(pgV3Constants.SELECT_ATTRIBUTE_FINDNUMBER,"ascending", "integer");
	 	//Added the code for Defect 49698 - Spec Reader Access Issue - Starts
	 }catch(Exception e) {
		 outLog.print("Exeception in getFormulaIngredientDetails method"+e+"\n");
		 outLog.flush();
	 }finally {
		 if(isContextPushed) {
				ContextUtil.popContext(context);
			}
	 }
		//Added the code for Defect 49698 - Spec Reader Access Issue - Ends
	 	    return mlFormulaIngredientAll;
	 	
	 }

	 /**
	 * This method is get the string of Virtual Intermediate PhysicalId attribute  value(stored as a physical id in the DB). 
	 * @param context the eMatrix <code>Context</code> object
	 * @param args 
	 * @return String
	 */
	 private Map getVIName(Context context, String[] args) {
		 String viName = DomainConstants.EMPTY_STRING;
		 String viId = DomainConstants.EMPTY_STRING;
		 Map mpVI = new HashMap<>();
		 try {
			Map mProgramData = (Map) JPO.unpackArgs(args);
			String viPhysicalId = (String)mProgramData.get("attribute_VirtualIntermediatePhysicalId");
			if(UIUtil.isNotNullAndNotEmpty(viPhysicalId)){
				 VirtualIntermediate VI = new VirtualIntermediate(context,viPhysicalId);
				 viName = VI.getName();
				 viId = VI.getId();
				 mpVI.put(STRING_VINAME, viName);
				 mpVI.put(STRING_VIID, viId);
			} else {
				mpVI.put(STRING_VINAME, DomainConstants.EMPTY_STRING);
				mpVI.put(STRING_VIID, DomainConstants.EMPTY_STRING);
			}
		} catch (Exception e) {
			outLog.print("Exception in getVIName: "+e+"\n");
			outLog.flush();
		}
		return mpVI;
	}

	/**
	 * This method is used to get Reported Function value from RELATIONSHIP_PGPDTEMPLATESTOPGPLIREPORTEDFUNCTION. 
	 * @param context the eMatrix <code>Context</code> object
	 * @param args 
	 * @return MapList
	 */
	 
	 private MapList getReportedFunction(Context context, String args[]) {
		 String strObjectId = DomainConstants.EMPTY_STRING;
		 DomainObject dobjPart =null;
		 MapList mlReportedFunction = new MapList();
		 Map mpReportedFunction = null;
		 Pattern objTypePattern = new Pattern(pgV3Constants.TYPE_FORMULATIONPROCESS);
		 objTypePattern.addPattern(TYPE_PG_PLIREPORTEDFUNCTION);
		 Pattern relPattern = new Pattern(pgV3Constants.RELATIONSHIP_PGPDTEMPLATESTOPGPLIREPORTEDFUNCTION);
		 StringList objectSelects = new StringList(DomainConstants.SELECT_NAME);
	 	 objectSelects.add(DomainConstants.SELECT_TYPE);
	 	 objectSelects.add(DomainConstants.SELECT_REVISION);
		 try {
			Map mProgramData = (Map) JPO.unpackArgs(args);
			if(mProgramData != null && !mProgramData.isEmpty())
			{
				strObjectId = (String)mProgramData.get(DomainConstants.SELECT_ID);
				dobjPart = DomainObject.newInstance(context,strObjectId);
				mlReportedFunction = dobjPart.getRelatedObjects(context, 
		 			relPattern.getPattern(),
		 			objTypePattern.getPattern(), 
		 			objectSelects, 
		 			null, 
		 			false,
		 			true,
		 			(short) 0,
		 			null, 
		 			null);
			}
		} catch (Exception e) {
			outLog.print("Exception in getReportedFunction: "+e+"\n");
			outLog.flush();
		}
		return mlReportedFunction;
	 }
/**
	 * This method is get the string of relationship APPLICATION attribute  value(stored as a physical id in the DB)  using the rel id passed as an argument . 
	 *
	 * @param context the eMatrix <code>Context</code> object
	 * @param args 
	 * @return String
	 * @throws Exception if the operation fails
	 */
private String getIdFromPhysicalId(Context context , String[] args)
	{
		StringBuilder strBuilder = new StringBuilder();
		try
		{
		Map<?, ?> argsMap = (Map<?, ?>) JPO.unpackArgs(args);
		String strApplications = (String) argsMap.get("applications");
		StringList selectList = new StringList(DomainConstants.SELECT_NAME);
		StringList appList = new StringList(FrameworkUtil.split(strApplications, ","));
		String[] valueArray =  convertListToArray(appList);
		MapList mapApplications = DomainObject.getInfo(context, valueArray, selectList);
		Iterator it = mapApplications.iterator();
		Map objMap = null;
		while(it.hasNext()){
			objMap = (Map<?,?>) it.next();
			strBuilder.append(objMap.get(DomainConstants.SELECT_NAME));
			if(it.hasNext())
				strBuilder.append(",");
		}
		}
		catch(Exception e)
		{
			outLog.print("Exception in getIdFromPhysicalId: "+e+"\n");
			outLog.flush();
		}
		return strBuilder.toString();
	}
	
	/**
	This Method is used to convert a StringList to String Array after removing all preceding and trailing spaces
	 * from each String value
	 * 
	 * @param slFunctionList
	 *            Input StringList with Object Ids or Physical Ids
	 * @return String Array of object Ids and/or Physical Ids
	 */
private String[] convertListToArray(StringList slFunctionList) {
		String[] strArrayIds = new String[] {};
		String strfuncId = null;
		if (slFunctionList != null) {
			int nSize = slFunctionList.size();
			strArrayIds = new String[nSize];
			for (int i = 0; i < nSize; i++) {
				strfuncId = (String) slFunctionList.get(i);
				if (UIUtil.isNotNullAndNotEmpty(strfuncId)) {
					strfuncId = strfuncId.trim();
				} else {
					strfuncId = "";
				}
				strArrayIds[i] = strfuncId;
			}
		}
		return strArrayIds;
	}
	
/** This method is used for getting Certifications column value
 * @param args
 * @return String
 * @throws Exception
 */
private String getCertificatonColumnLinks(Context context, String strUserName, String args[]) throws Exception{
	
	////Added the code for 2018x Spec REader Defect 47026,47112 - Starts
	boolean hasAccess = false;
	boolean isContextPushed = false;
	//Added the code for 2018x Spec REader Defect 47026,47112 - Ends
		Map mObjectInfo = null;
		String strObjectId = DomainConstants.EMPTY_STRING;
		DomainObject dObj =null;
		Access access = null;
		String strURL = DomainConstants.EMPTY_STRING;
		boolean hasModifyAccess = false;
		String strType = DomainConstants.EMPTY_STRING;
		String strCertificationConnected = DomainConstants.EMPTY_STRING;
		String streditButtonHTML = DomainConstants.EMPTY_STRING;
		try{		
			Map mProgramData = (Map) JPO.unpackArgs(args);
			if(mProgramData != null && !mProgramData.isEmpty())
			{
				strObjectId = (String)mProgramData.get(DomainConstants.SELECT_ID);
				strType =(String)mProgramData.get(DomainConstants.SELECT_TYPE);
				//Added the code for 2018x Spec REader Defect 47026,47112 - Starts
				if(SPECREADER.equalsIgnoreCase(strOriginatingSource)) {
					hasAccess = accessCheck(context, strUserName, strObjectId);
					if(isEBP(context, strUserName) && SPECREADER.equalsIgnoreCase(strOriginatingSource)) {
						hasAccess = true;
					}
					if(hasAccess) {
						//Pushing User Agent Context to get the Data if the Spec Reader User have access
						ContextUtil.pushContext(context,PropertyUtil.getSchemaProperty(context,"User Agent"),DomainConstants.EMPTY_STRING,DomainConstants.EMPTY_STRING);
						isContextPushed = true;
						
					}
					//Added the code for 2018x Spec REader Defect 47026,47112 - Starts
				}
				if(UIUtil.isNotNullAndNotEmpty(strObjectId) && UIUtil.isNotNullAndNotEmpty(strType))
				{
					dObj = DomainObject.newInstance(context,strObjectId);
					if(UIUtil.isNotNullAndNotEmpty(strObjectId) && !CONST_DENIED.equalsIgnoreCase(strObjectId)) {
						dObj.setId(strObjectId);
					}
					access = dObj.getAccessMask(context);
					hasModifyAccess = access.hasReadAccess();
					//Updated code for defect id: 32736 (Removed Formulation Part from if condition)--Starts
					//Modified the code for May CW 22x.02 Defect 50738 - Starts
					if(hasModifyAccess && (pgV3Constants.TYPE_RAWMATERIALPART.equalsIgnoreCase(strType) || TYPE_PG_ANCILLARY_RAW_MATERIAL_PART.equalsIgnoreCase(strType))){
						//Modified the code for May CW 22x.02 Defect 50738 - Ends
						
						strCertificationConnected = dObj.getInfo(context, "from[" + REL_PG_PLI_MATERIAL_CERTIFICATIONS + "].to.id");
						if(UIUtil.isNotNullAndNotEmpty(strCertificationConnected)) {		
							streditButtonHTML = INIT_CAPS_YES;
						}else {
							streditButtonHTML = INIT_CAPS_NO;
						}
					} else {
						streditButtonHTML = DomainConstants.EMPTY_STRING;
					}
				} else{
						streditButtonHTML = DomainConstants.EMPTY_STRING;
				}
			}
		}catch(Exception ex){
			outLog.print("Exception in getCertificatonColumnLinks: "+ex+"\n");
			outLog.flush();
			throw ex;
		}
		//Added the code for 2018x Spec REader Defect 47026,47112 - Starts
		finally {
			if(isContextPushed) {
				ContextUtil.popContext(context);
			}
		}
		//Added the code for 2018x Spec REader Defect 47026,47112 - Ends
		return streditButtonHTML;
	}
	
 /**This method is used to update the worksheet for the SAP BOM As Fed Tab.
		* @param context is the matrix context
		* @param args has the required information
		* @return void
		* 
		*/	 
private void updateWorksheetSAPBOMAsFed(Context context, XSSFWorkbook workbook,XSSFRow rowHeaderSAPBOM,XSSFCellStyle cellStyleSAPBOM,MapList mlSAPBOM,XSSFSheet sheetSAPBOM,String strHyperlink, XSSFCellStyle styleGlobal) {
	try {
		//Added code for 2018x.6 Requirement id 36700 Ability to generate Part and Spec report with without hyperlink Starts
		String strHyperlinkLimit = EnoviaResourceBundle.getProperty(context, EMXCPNSTRINGRESOURCE, context.getLocale(),"emxCPN.PartAndSpecReport.HyperlinkLimit");
		int iHyperLinkLimit = Integer.parseInt(strHyperlinkLimit);
		int iRowCountAll=0;
		//Added code for 2018x.6 Requirement id 36700 Ability to generate Part and Spec report with without hyperlink Ends
		String sStringResourceFile="emxCPNStringResource"; 
		String sLanguage = context.getSession().getLanguage();
		String strSAPBOMChangeAction= i18nNow.getI18nString("emxCPN.FamilyCareReport.Worksheet.Column.ChangeAction",sStringResourceFile, sLanguage);
		String strSAPBOMChangeActionReasonForChange=i18nNow.getI18nString("emxCPN.FamilyCareReport.Worksheet.Column.ChangeActionReasonForChange",sStringResourceFile, sLanguage);
		String strSAPBOMNameOrNumber=i18nNow.getI18nString("emxCPN.FamilyCareReport.Worksheet.Column.NameOrNumber",sStringResourceFile, sLanguage);
		String strSAPBOMTitle=i18nNow.getI18nString("emxCPN.FamilyCareReport.Worksheet.Column.Title",sStringResourceFile, sLanguage);
		String strSAPBOMType=i18nNow.getI18nString("emxCPN.FamilyCareReport.Worksheet.Column.Type",sStringResourceFile, sLanguage);
        String strSAPBOMRevision = i18nNow.getI18nString("emxCPN.FamilyCareReport.Worksheet.Column.Revision",sStringResourceFile, sLanguage);
        String strSAPBOMState = i18nNow.getI18nString("emxCPN.FamilyCareReport.Worksheet.Column.State",sStringResourceFile, sLanguage);
		String strSAPBOMName = i18nNow.getI18nString("emxCPN.FamilyCareReport.Worksheet.SAPBOMAsFed.Column.Name",sStringResourceFile, sLanguage);
		String strSAPBOMPartType = i18nNow.getI18nString("emxCPN.FamilyCareReport.Worksheet.SAPBOMAsFed.Column.Type",sStringResourceFile, sLanguage);
		String strSAPDescription = i18nNow.getI18nString("emxCPN.FamilyCareReport.Worksheet.SAPBOMAsFed.Column.SAPDescription",sStringResourceFile, sLanguage);
		String strSpecificationSubType = i18nNow.getI18nString("emxCPN.FamilyCareReport.Worksheet.SAPBOMAsFed.Column.SpecificationSubType",sStringResourceFile, sLanguage);
		String strSAPType = i18nNow.getI18nString("emxCPN.FamilyCareReport.Worksheet.SAPBOMAsFed.Column.SAPType",sStringResourceFile, sLanguage);
		String strSubstituteAlternateGrouping = i18nNow.getI18nString("emxCPN.FamilyCareReport.Worksheet.SAPBOMAsFed.Column.SubstituteAlternateGrouping",sStringResourceFile, sLanguage);
		String strBOMMinimumQuantity = i18nNow.getI18nString("emxCPN.FamilyCareReport.Worksheet.SAPBOMAsFed.Column.BOMMinimumQuantity",sStringResourceFile, sLanguage);
		String strBOMQuantity = i18nNow.getI18nString("emxCPN.FamilyCareReport.Worksheet.SAPBOMAsFed.Column.BOMQuantity",sStringResourceFile, sLanguage);
		String strBOMMaximumQuantity = i18nNow.getI18nString("emxCPN.FamilyCareReport.Worksheet.SAPBOMAsFed.Column.BOMMaximumQuantity",sStringResourceFile, sLanguage);
		String strBaseUnitofMeasure = i18nNow.getI18nString("emxCPN.FamilyCareReport.Worksheet.SAPBOMAsFed.Column.BaseUnitofMeasure",sStringResourceFile, sLanguage);
		String strAuthorized = EnoviaResourceBundle.getProperty(context, sStringResourceFile, context.getLocale(),"emxCPN.FamilyCareReport.Worksheet.SAPBOMAsFed.Column.Authorized");
		String strAuthorizedToUse = EnoviaResourceBundle.getProperty(context, sStringResourceFile, context.getLocale(),"emxCPN.FamilyCareReport.Worksheet.SAPBOMAsFed.Column.AuthorizedToUse");
		String strAuthorizedToProduce = EnoviaResourceBundle.getProperty(context, sStringResourceFile, context.getLocale(),"emxCPN.FamilyCareReport.Worksheet.SAPBOMAsFed.Column.AuthorizedToProduce");
		String strOptionalComponent = i18nNow.getI18nString("emxCPN.FamilyCareReport.Worksheet.SAPBOMAsFed.Column.OptionalComponent",sStringResourceFile, sLanguage);
		String strTransportUnit = i18nNow.getI18nString("emxCPN.FamilyCareReport.Worksheet.SAPBOMAsFed.Column.TransportUnit",sStringResourceFile, sLanguage);
		String strComments = i18nNow.getI18nString("emxCPN.FamilyCareReport.Worksheet.SAPBOMAsFed.Column.Comments",sStringResourceFile, sLanguage);
        
		//Creating Header ---Begin
		//1 Change Action
		Cell cellChangeAction = rowHeaderSAPBOM.createCell(0);
		cellChangeAction.setCellStyle(cellStyleSAPBOM);
		cellChangeAction.setCellValue(strSAPBOMChangeAction);

		//2 Change Action 'Reason for Change'
		Cell cellChangeActionReasonForChange = rowHeaderSAPBOM.createCell(1);
		cellChangeActionReasonForChange.setCellStyle(cellStyleSAPBOM);
		cellChangeActionReasonForChange.setCellValue(strSAPBOMChangeActionReasonForChange);

		//3 Name/Number
		Cell cellNameOrNumber = rowHeaderSAPBOM.createCell(2);
		cellNameOrNumber.setCellStyle(cellStyleSAPBOM);
		cellNameOrNumber.setCellValue(strSAPBOMNameOrNumber);

		//4 Title
		Cell cellTitle = rowHeaderSAPBOM.createCell(3);
		cellTitle.setCellStyle(cellStyleSAPBOM);
		cellTitle.setCellValue(strSAPBOMTitle);

		//5 Type
		Cell cellType = rowHeaderSAPBOM.createCell(4);
		cellType.setCellStyle(cellStyleSAPBOM);
		cellType.setCellValue(strSAPBOMType);			

		//6 Revision
		Cell cellRevision = rowHeaderSAPBOM.createCell(5);
		cellRevision.setCellStyle(cellStyleSAPBOM);
		cellRevision.setCellValue(strSAPBOMRevision);
		
		//7 State
		Cell cellState = rowHeaderSAPBOM.createCell(6);
		cellState.setCellStyle(cellStyleSAPBOM);
		cellState.setCellValue(strSAPBOMState);
		
		//8 SAP BOM Name
		Cell cellSAPBOMName = rowHeaderSAPBOM.createCell(7);
		cellSAPBOMName.setCellStyle(cellStyleSAPBOM);
		cellSAPBOMName.setCellValue(strSAPBOMName);

		//9 SAP BOM Description
		Cell cellDescription = rowHeaderSAPBOM.createCell(8);
		cellDescription.setCellStyle(cellStyleSAPBOM);
		cellDescription.setCellValue(strSAPDescription);
		
		//10 SAP BOM Type
		Cell cellSAPBOMType = rowHeaderSAPBOM.createCell(9);
		cellSAPBOMType.setCellStyle(cellStyleSAPBOM);
		cellSAPBOMType.setCellValue(strSAPBOMPartType);
		
		//11 SAP BOM SpecificationSubType
		Cell cellSpecificationSubType = rowHeaderSAPBOM.createCell(10);
		cellSpecificationSubType.setCellStyle(cellStyleSAPBOM);
		cellSpecificationSubType.setCellValue(strSpecificationSubType);
		
		//12 SAP BOM SAPType
		Cell cellSAPType = rowHeaderSAPBOM.createCell(11);
		cellSAPType.setCellStyle(cellStyleSAPBOM);
		cellSAPType.setCellValue(strSAPType);
		
		//13 SAP BOM Substitute/Alternate Grouping
		Cell cellSubstituteGrouping = rowHeaderSAPBOM.createCell(12);
		cellSubstituteGrouping.setCellStyle(cellStyleSAPBOM);
		cellSubstituteGrouping.setCellValue(strSubstituteAlternateGrouping);
		
		//14 SAP BOM BOM Minimum Quantity
		Cell cellMinimumQuantity = rowHeaderSAPBOM.createCell(13);
		cellMinimumQuantity.setCellStyle(cellStyleSAPBOM);
		cellMinimumQuantity.setCellValue(strBOMMinimumQuantity);
		
		//15 SAP BOM BOM Quantity
		Cell cellQuantity = rowHeaderSAPBOM.createCell(14);
		cellQuantity.setCellStyle(cellStyleSAPBOM);
		cellQuantity.setCellValue(strBOMQuantity);
		
		//16 SAP BOM BOM Maximum Quantity
		Cell cellMaximumQuantity = rowHeaderSAPBOM.createCell(15);
		cellMaximumQuantity.setCellStyle(cellStyleSAPBOM);
		cellMaximumQuantity.setCellValue(strBOMMaximumQuantity);
		
		//17 SAP BOM Base Unit of Measure
		Cell cellBaseUnitofMeasure = rowHeaderSAPBOM.createCell(16);
		cellBaseUnitofMeasure.setCellStyle(cellStyleSAPBOM);
		cellBaseUnitofMeasure.setCellValue(strBaseUnitofMeasure);
		
		//Added code for Requirement 2018x.6 36697 report shall include Authorized, Authorized to use and authorized to produced in SAP BOM as Fed tab Starts
		//18 SAP BOM Optional Component
		Cell cellAuthorized = rowHeaderSAPBOM.createCell(17);
		cellAuthorized.setCellStyle(cellStyleSAPBOM);
		cellAuthorized.setCellValue(strAuthorized);
		
		//19 SAP BOM Optional Component
		Cell cellAuthorizedToUse = rowHeaderSAPBOM.createCell(18);
		cellAuthorizedToUse.setCellStyle(cellStyleSAPBOM);
		cellAuthorizedToUse.setCellValue(strAuthorizedToUse);
				
		//20 SAP BOM Optional Component
		Cell cellAuthorizedToProduce = rowHeaderSAPBOM.createCell(19);
		cellAuthorizedToProduce.setCellStyle(cellStyleSAPBOM);
		cellAuthorizedToProduce.setCellValue(strAuthorizedToProduce);
		//Added code for Requirement 2018x.6 36697 report shall include Authorized, Authorized to use and authorized to produced in SAP BOM as Fed tab Ends
		//21 SAP BOM Optional Component
		Cell cellOptionalComponent = rowHeaderSAPBOM.createCell(20);
		cellOptionalComponent.setCellStyle(cellStyleSAPBOM);
		cellOptionalComponent.setCellValue(strOptionalComponent);
		
		//22 SAP BOM Transport Unit
		Cell cellTransportUnit = rowHeaderSAPBOM.createCell(21);
		cellTransportUnit.setCellStyle(cellStyleSAPBOM);
		cellTransportUnit.setCellValue(strTransportUnit);
		
		//23 SAP BOM Comments
		Cell cellComments = rowHeaderSAPBOM.createCell(22);
		cellComments.setCellStyle(cellStyleSAPBOM);
		cellComments.setCellValue(strComments);
		int rowCount1 = 0;
		String strTypeName = DomainConstants.EMPTY_STRING;
		String strSAPTypeName = DomainConstants.EMPTY_STRING;
		String strCurrentState = DomainConstants.EMPTY_STRING;
		Hashtable htCommonCol1 = new Hashtable<>();
		Map mp=null;
		HashMap hm= new HashMap<>();
		Hashtable htCommonCol = new Hashtable<>();
		String strTypeDisplayName=null;
		String strSAPTypeDisplayName=null;
		String strParentId=null;
		String strId=null;
		//Added code for defect id 38914 Starts
		Person person = new Person(context.getUser());
		boolean bIsCMRole = person.isAssigned(context,pgV3Constants.ROLE_PGCONTRACTMANUFACTURER);
		boolean bIsSupplierRole = person.isAssigned(context,pgV3Constants.ROLE_PGCONTRACTSUPPLIER);
		//Added code for defect id 38914 Ends
		for (int i=0;i<mlSAPBOM.size();i++){
			//Added code for 2018x.6 Requirement id 36700 Ability to generate Part and Spec report with without hyperlink Starts
			iRowCountAll = iRowCountAll + 1;
			//Added code for 2018x.6 Requirement id 36700 Ability to generate Part and Spec report with without hyperlink Ends
			XSSFRow row = sheetSAPBOM.createRow(++rowCount1);
			int columnCount1 = 0;
			mp = (Map)mlSAPBOM.get(i);
			htCommonCol = (Hashtable) mp.get("CommonColumns");
			strTypeName =(String)htCommonCol.get("type");
			strCurrentState =(String)htCommonCol.get("current");
			strTypeDisplayName= getTypeDisplayName(context,strTypeName);
			strSAPTypeName= (String)mp.get("type");
			strSAPTypeDisplayName= getTypeDisplayName(context,strSAPTypeName);
			strParentId =(String)htCommonCol.get(DomainConstants.SELECT_ID);
			strId =(String)mp.get(DomainConstants.SELECT_ID);
			//if(strCurrentState.equalsIgnoreCase("Release") || strCurrentState.equalsIgnoreCase("Released")){
			//Added by DSM Reports (Sogeti) for 2022x.5 (APR CW 2024) Defect 55875 - Start
			String sCAID = (String) htCommonCol.get(SCAID);
			if( UIUtil.isNotNullAndNotEmpty(sCAID) && !sCAID.contains(HYPERLINK_PIPE)) {
				if(htCommonCol.get(CAREALIZEDNAME) != null && htCommonCol.get(CAPROPOSEDNAME) != null) {
					//Updated code for Req Id : 33634 - Hyperlinks--Starts
					hm.put(0, HYPERLINK+htCommonCol.get(CAREALIZEDNAME)+HYPERLINK_PIPE+sCAID);
					//Updated code for Req Id : 33634 - Hyperlinks--Ends
				} else if(htCommonCol.get(CAREALIZEDNAME) != null){
					//Updated code for Req Id : 33634 - Hyperlinks--Starts
					hm.put(0, HYPERLINK+htCommonCol.get(CAREALIZEDNAME)+HYPERLINK_PIPE+sCAID);
					//Updated code for Req Id : 33634 - Hyperlinks--Ends
				} else if(htCommonCol.get(CAPROPOSEDNAME) != null){
					//Updated code for Req Id : 33634 - Hyperlinks--Starts
					hm.put(0, HYPERLINK+htCommonCol.get(CAPROPOSEDNAME)+HYPERLINK_PIPE+sCAID);
					//Updated code for Req Id : 33634 - Hyperlinks--Ends
				} else {
					hm.put(0, DomainConstants.EMPTY_STRING);
				}
			}else {
				hm.put(0,htCommonCol.get(CAPROPOSEDNAME));
			}
			//Added by DSM Reports (Sogeti) for 2022x.5 (APR CW 2024) Defect 55875 - End
			hm.put(1, htCommonCol.get("attribute[Reason for Change]"));
			//Updated code for Req Id : 33634 - Hyperlinks--Starts
			hm.put(2, HYPERLINK+htCommonCol.get("name")+HYPERLINK_PIPE+strParentId);
			//Updated code for Req Id : 33634 - Hyperlinks--Ends
			hm.put(3, htCommonCol.get("attribute[Title]"));
			hm.put(4, strTypeDisplayName);
			hm.put(5, htCommonCol.get("revision"));
			hm.put(6, strCurrentState);
			//Updated code for Req Id : 33634 - Hyperlinks--Starts
			hm.put(7, HYPERLINK+mp.get("name")+HYPERLINK_PIPE+strId);
			//Updated code for Req Id : 33634 - Hyperlinks--Ends
			hm.put(8, mp.get("description"));
			hm.put(9, strSAPTypeDisplayName);
			hm.put(10, mp.get("specSubType"));
			hm.put(11, mp.get("SAPType"));
			hm.put(12, mp.get("substitute"));
			hm.put(13, mp.get("Min"));
			hm.put(14, mp.get("BOMQty"));
			hm.put(15, mp.get("Max"));
			hm.put(16, mp.get("SAPUOM"));
			//Added code for Requirement 2018x.6 36697 report shall include Authorized, Authorized to use and authorized to produced in SAP BOM as Fed tab Starts
			//Updated code for defect id 38914 Starts
			if(!bIsCMRole && !bIsSupplierRole) {
				hm.put(17, mp.get("AVPlantDetails"));
				hm.put(18, mp.get("AUPlantDetails"));
				hm.put(19, mp.get("APPlantDetails"));
			
			} else {
				hm.put(17, DomainConstants.EMPTY_STRING);
				hm.put(18, DomainConstants.EMPTY_STRING);
				hm.put(19, DomainConstants.EMPTY_STRING);
			}
			//Updated code for defect id 38914 Ends
			//Added code for Requirement 2018x.6 36697 report shall include Authorized, Authorized to use and authorized to produced in SAP BOM as Fed tab Ends
			hm.put(20, mp.get("OptComponent"));
			hm.put(21, mp.get("TUP_ID"));
			hm.put(22, mp.get("Comment"));
			//For Cells Creation in each Row
			XSSFCellStyle style = workbook.createCellStyle();
			style = setForeGroundColor(strCurrentState, style);
			//Added by DSM Reports (Sogeti) for 2022x.5 (APR CW 2024) Defect 55875 - Start
			XSSFCellStyle style1 = workbook.createCellStyle();
			//Added by DSM Reports (Sogeti) for 2022x.5 (APR CW 2024) Defect 55875 - End
			for(int j=0;j<hm.size();j++){								
				//Modified the code for _2022x_Aug CW Req-47097
				// Modified by DSM Reports (Sogeti) for 22x.03 (August CW 2023) Defect 54091 - Start
				Cell cell = row.createCell(columnCount1++);
				if (j == 2) {
					style = makeColumnNumeric(workbook, style);
				}
				cell.setCellStyle(style);
				
				// Modified by DSM Reports (Sogeti) for 22x.03 (August CW 2023) Defect 54091 - End
				//Modified the code for _2022x_Aug CW Req-47097
				String strCellValue = (String)hm.get(j);
				//Added code for Req Id : 33634 - Hyperlinks--Starts
				if(UIUtil.isNotNullAndNotEmpty(strCellValue) && strCellValue.startsWith(HYPERLINK_COMPARE)){
					String[] strSplittedValue = strCellValue.split("\\|", -1); 
					String strHyperlinkId = strSplittedValue[(strSplittedValue.length)-1];
					String strValue = strSplittedValue[(strSplittedValue.length)-2];
					//Added code for 2018x.6 Requirement id 36700 Ability to generate Part and Spec report with without hyperlink Starts
					if(pgV3Constants.TRUE.equalsIgnoreCase(strHyperlink) && iRowCountAll < iHyperLinkLimit){
						getHyperlink(context,cell,workbook,strValue,strHyperlinkId,strCurrentState);
					
					} else if(UIUtil.isNotNullAndNotEmpty(strValue)){					
						cell.setCellValue(strValue);
					}
					//Added code for 2018x.6 Requirement id 36700 Ability to generate Part and Spec report with without hyperlink Ends
				}else {
					cell.setCellValue((String)hm.get(j));
					//Added by DSM Reports (Sogeti) for 2022x.5 (APR CW 2024) Defect 55875 - Start
					if(j == 0) {
						style1.cloneStyleFrom(style);
						style1.setWrapText(true);
						cell.setCellStyle(style1);
					}
					//Added by DSM Reports (Sogeti) for 2022x.5 (APR CW 2024) Defect 55875 - End
				}
				//Added code for Req Id : 33634 - Hyperlinks--Ends
			}	
		}
		sheetFormatter(sheetSAPBOM); // Added by DSM Reports (Sogeti) for 22x.04 (Dec CW 2023) Defect 56156 - START/END
	} catch (Exception e) {
		e.printStackTrace();
	}
}
	

	 /**
 * This method is used to get SAP BOM As Fed data
 * @param args
 * @return MapList
 * @throws Exception
 */
private MapList getSAPBOMAsFed(Context context, String strUserName,DomainObject dobjPart,Map mpObjectCommon) throws Exception {
	//Added the code for Defect 49698 - Spec Reader Access Issue - Starts
	boolean hasAccess = false;
	boolean isContextPushed = false;
	//Added the code for Defect 49698 - Spec Reader Access Issue - Ends
	String strObjId = (String)mpObjectCommon.get(DomainConstants.SELECT_ID);
	String strType = (String)mpObjectCommon.get(DomainConstants.SELECT_TYPE);
	String strPartId = (String)mpObjectCommon.get(DomainConstants.SELECT_ID);
	MapList mlSAPBOMMapListAll=new MapList();
	
	boolean isTypePresent=false;
	if (strType.equals(pgV3Constants.TYPE_FORMULATIONPART) || strType.equals(pgV3Constants.TYPE_ASSEMBLEDPRODUCTPART) || strType.equals(pgV3Constants.TYPE_DEVICEPRODUCTPART)) {
		isTypePresent=true;
	}
	Map mpSAPBOMRow = null;
	//MapList mlSAPBOMMapListAll=new MapList();
	String strMin = DomainConstants.EMPTY_STRING;
	String strMax = DomainConstants.EMPTY_STRING;
	String strSubType = DomainConstants.EMPTY_STRING;
	HashMap hmArgs = new HashMap();
	hmArgs.put("objectId",strObjId);
	try{
		//Added the code for Defect 49698 - Spec Reader Access Issue - Starts
		if(SPECREADER.equalsIgnoreCase(strOriginatingSource)) {
			hasAccess = accessCheck(context, strUserName, (String)dobjPart.getInfo(context, DomainConstants.SELECT_ID));
			if(hasAccess) {
				//Push Context User Agent
				ContextUtil.pushContext(context,PropertyUtil.getSchemaProperty(context,"User Agent"),DomainConstants.EMPTY_STRING,DomainConstants.EMPTY_STRING);
				isContextPushed = true;
				
			}
		}
		//Added the code for Defect 49698 - Spec Reader Access Issue - Ends
		MapList mpReturnList = (MapList)JPO.invoke(context,"pgIPMSAPBOMJPO",null,"getTableData",JPO.packArgs(hmArgs),MapList.class);
		int mpSAPBOMMapListSize = mpReturnList.size();
		if(mpSAPBOMMapListSize>0) {
			for(int i=0;i<mpSAPBOMMapListSize;i++) {
				mpSAPBOMRow = (Map)mpReturnList.get(i);
				//Added code for Defect Id - 29990 : Value of Specification SubType in family care report SAP BOM As Fed  sheet doesn't match the value in UI-Starts
				strSubType = (String)getSpecificationSubtypeForSAP(context, JPO.packArgs(mpSAPBOMRow));
				if(strSubType!=null) {
					mpSAPBOMRow.put("specSubType",strSubType);
				}
				else {
					mpSAPBOMRow.put("specSubType","");
				}
				//Added code for Defect Id - 29990 : Value of Specification SubType in family care report SAP BOM As Fed  sheet doesn't match the value in UI-Ends
				strMin = (String)mpSAPBOMRow.get("Min");
				strMax = (String)mpSAPBOMRow.get("Max");
				if (!isTypePresent) {
					if (strMin.equalsIgnoreCase("-9.99")) {
						mpSAPBOMRow.put("Min", "");
					}
					if (strMax.equalsIgnoreCase("-9.99")) {
						mpSAPBOMRow.put("Max", "");
					}
				}
				mpSAPBOMRow.put("CommonColumns", mpObjectCommon);
				mlSAPBOMMapListAll.add(mpSAPBOMRow);
				}
			}
			
		} catch (Exception e){
			e.printStackTrace();	 
			//Added the code for Defect 49698 - Spec Reader Access Issue - Starts
		}finally {
			if(isContextPushed) {
				ContextUtil.popContext(context);
			}
		}
	//Added the code for Defect 49698 - Spec Reader Access Issue - Ends
	//} 
	return mlSAPBOMMapListAll;
	}

/**This method is used to update the worksheet for GPS Assessments.
* @param context is the matrix context
* @param args has the required information
* @return void
* 
*/	
//Modified for requirement : 38092-starts
private void updateWorksheetGPSAssessment(Context context, XSSFWorkbook workbook,XSSFRow rowHeaderGPSAssessments,XSSFCellStyle cellStyleGPSAssessments,MapList mlGPSAssessments,XSSFSheet sheetGPSAssessments,String strHyperlink, XSSFCellStyle styleGlobal) {
	try {
		//Added code for 2018x.6 Requirement id 36700 Ability to generate Part and Spec report with without hyperlink Starts
		String strHyperlinkLimit = EnoviaResourceBundle.getProperty(context, EMXCPNSTRINGRESOURCE, context.getLocale(),"emxCPN.PartAndSpecReport.HyperlinkLimit");
		int iHyperLinkLimit = Integer.parseInt(strHyperlinkLimit);
		int iRowCountAll=0;
		//Added code for 2018x.6 Requirement id 36700 Ability to generate Part and Spec report with without hyperlink Ends
		String strGPSAssessmentChangeAction=EnoviaResourceBundle.getProperty(context, EMXCPNSTRINGRESOURCE, context.getLocale(),"emxCPN.FamilyCareReport.Worksheet.Column.ChangeAction");
		String strGPSAssessmentChangeActionReasonForChange=EnoviaResourceBundle.getProperty(context, EMXCPNSTRINGRESOURCE, context.getLocale(),"emxCPN.FamilyCareReport.Worksheet.Column.ChangeActionReasonForChange");
		String strGPSAssessmentNameOrNumber=EnoviaResourceBundle.getProperty(context, EMXCPNSTRINGRESOURCE, context.getLocale(),"emxCPN.FamilyCareReport.Worksheet.Column.NameOrNumber");
		String strGPSAssessmentTitle=EnoviaResourceBundle.getProperty(context, EMXCPNSTRINGRESOURCE, context.getLocale(),"emxCPN.FamilyCareReport.Worksheet.Column.Title");
		String strGPSAssessmentType=EnoviaResourceBundle.getProperty(context, EMXCPNSTRINGRESOURCE, context.getLocale(),"emxCPN.FamilyCareReport.Worksheet.Column.Type");
		String strGPSAssessmentRevision= EnoviaResourceBundle.getProperty(context, EMXCPNSTRINGRESOURCE, context.getLocale(),"emxCPN.FamilyCareReport.Worksheet.Column.Revision");
		String strGPSAssessmentState = EnoviaResourceBundle.getProperty(context, EMXCPNSTRINGRESOURCE, context.getLocale(),"emxCPN.FamilyCareReport.Worksheet.Column.State");
		String strGPSAssessmentStatus = EnoviaResourceBundle.getProperty(context, EMXCPNSTRINGRESOURCE, context.getLocale(),"emxCPN.FamilyCareReport.Worksheet.GPSAssesments.Column.Status");
		String strGPSAssessmentTaskName = EnoviaResourceBundle.getProperty(context, EMXCPNSTRINGRESOURCE, context.getLocale(),"emxCPN.FamilyCareReport.Worksheet.GPSAssesments.Column.TaskName");
		String strGPSAssessmentNRQID = EnoviaResourceBundle.getProperty(context, EMXCPNSTRINGRESOURCE, context.getLocale(),"emxCPN.FamilyCareReport.Worksheet.GPSAssesments.Column.NRQID");
		String strGPSAssessmentRequestCategory = EnoviaResourceBundle.getProperty(context, EMXCPNSTRINGRESOURCE, context.getLocale(),"emxCPN.FamilyCareReport.Worksheet.GPSAssesments.Column.GPSAssessmentRequestCategory");
		String strGPSAssessmentTaskDescription = EnoviaResourceBundle.getProperty(context, EMXCPNSTRINGRESOURCE, context.getLocale(),"emxCPN.FamilyCareReport.Worksheet.GPSAssesments.Column.TaskDescription");
		String strGPSAssessmentGPSSummary = EnoviaResourceBundle.getProperty(context, EMXCPNSTRINGRESOURCE, context.getLocale(),"emxCPN.FamilyCareReport.Worksheet.GPSAssesments.Column.GPSSummary");
		String strGPSAssessmentTaskState = EnoviaResourceBundle.getProperty(context, EMXCPNSTRINGRESOURCE, context.getLocale(),"emxCPN.FamilyCareReport.Worksheet.GPSAssesments.Column.GPSAssessmentTaskState");
		//Added for Reuirement Id : 35249--starts
		String strGPSAssessmentBusinessArea = EnoviaResourceBundle.getProperty(context, EMXCPNSTRINGRESOURCE, context.getLocale(),"emxCPN.FamilyCareReport.Worksheet.GPSAssesments.Column.GPSAssessmentBusinessArea");
		//Added for Reuirement Id : 35249--ends
		//Added for Requirement 37823 -starts
		String strGPSAssessmentPCP = EnoviaResourceBundle.getProperty(context, EMXCPNSTRINGRESOURCE, context.getLocale(),"emxCPN.FamilyCareReport.Worksheet.GPSAssesments.Column.GPSAssessmentPCP");
		String strGPSAssessmentProductType = EnoviaResourceBundle.getProperty(context, EMXCPNSTRINGRESOURCE, context.getLocale(),"emxCPN.FamilyCareReport.Worksheet.GPSAssesments.Column.GPSAssessmentProductType");
		//Added for Requirement 37823 -ends
		//Added for 2018x6.1 Oct Requirement 38913 Starts
		String strPath = EnoviaResourceBundle.getProperty(context, EMXCPN, context.getLocale(),"emxCPN.FamilyCareReport.Worksheet.GPSAssesments.Column.GPSAssessmentPath");
		String strClearanceLevel = EnoviaResourceBundle.getProperty(context, EMXCPN, context.getLocale(),"emxCPN.FamilyCareReport.Worksheet.GPSAssesments.Column.GPSAssessmentClearanceLevel");
		String strProductCategoryPlatform = EnoviaResourceBundle.getProperty(context, EMXCPN, context.getLocale(),"emxCPN.FamilyCareReport.Worksheet.GPSAssesments.Column.GPSAssessmentProductCategoryPlatform");
		String strMaxUsageAmount = EnoviaResourceBundle.getProperty(context, EMXCPN, context.getLocale(),"emxCPN.FamilyCareReport.Worksheet.GPSAssesments.Column.GPSAssessmentMaxUsageAmount");
		String strUoM = EnoviaResourceBundle.getProperty(context, EMXCPN, context.getLocale(),"emxCPN.FamilyCareReport.Worksheet.GPSAssesments.Column.GPSAssessmentUoM");
		String strMarketsCleared = EnoviaResourceBundle.getProperty(context, EMXCPN, context.getLocale(),"emxCPN.FamilyCareReport.Worksheet.GPSAssesments.Column.GPSAssessmentMarketsCleared");
		String strTradename = EnoviaResourceBundle.getProperty(context, EMXCPN, context.getLocale(),"emxCPN.FamilyCareReport.Worksheet.GPSAssesments.Column.GPSAssessmentTradename");
		String strSRI = EnoviaResourceBundle.getProperty(context, EMXCPN, context.getLocale(),"emxCPN.FamilyCareReport.Worksheet.GPSAssesments.Column.GPSAssessmentSRI");
		String strSupplierName = EnoviaResourceBundle.getProperty(context, EMXCPN, context.getLocale(),"emxCPN.FamilyCareReport.Worksheet.GPSAssesments.Column.GPSAssessmentSupplierName");
		String strClassHdr = EnoviaResourceBundle.getProperty(context, EMXCPN, context.getLocale(),"emxCPN.FamilyCareReport.Worksheet.GPSAssesments.Column.GPSAssessmentClass");
		String strReportedFunctionHdr = EnoviaResourceBundle.getProperty(context, EMXCPN, context.getLocale(),"emxCPN.FamilyCareReport.Worksheet.GPSAssesments.Column.GPSAssessmentReportedFunction");
		
		//Added for 2018x6.1 Oct Requirement 38913 Ends
		//Creating Header ---Begin
		//1 Change Action
		Cell cellChangeAction = rowHeaderGPSAssessments.createCell(0);
		cellChangeAction.setCellStyle(cellStyleGPSAssessments);
		cellChangeAction.setCellValue(strGPSAssessmentChangeAction);
		
		//2 Change Action 'Reason for Change'
		Cell cellChangeActionReasonForChange = rowHeaderGPSAssessments.createCell(1);
		cellChangeActionReasonForChange.setCellStyle(cellStyleGPSAssessments);
		cellChangeActionReasonForChange.setCellValue(strGPSAssessmentChangeActionReasonForChange);
		
		//3 Name/Number
		Cell cellNameOrNumber = rowHeaderGPSAssessments.createCell(2);
		cellNameOrNumber.setCellStyle(cellStyleGPSAssessments);
		cellNameOrNumber.setCellValue(strGPSAssessmentNameOrNumber);
		
		//4 Title
		Cell cellTitle = rowHeaderGPSAssessments.createCell(3);
		cellTitle.setCellStyle(cellStyleGPSAssessments);
		cellTitle.setCellValue(strGPSAssessmentTitle);
		
		//5 Type
		Cell cellType = rowHeaderGPSAssessments.createCell(4);
		cellType.setCellStyle(cellStyleGPSAssessments);
		cellType.setCellValue(strGPSAssessmentType);			
		
		//6 Revision
		Cell cellRevision = rowHeaderGPSAssessments.createCell(5);
		cellRevision.setCellStyle(cellStyleGPSAssessments);
		cellRevision.setCellValue(strGPSAssessmentRevision);
		
		//7 State
		Cell cellState = rowHeaderGPSAssessments.createCell(6);
		cellState.setCellStyle(cellStyleGPSAssessments);
		cellState.setCellValue(strGPSAssessmentState);
		
		//8 Status
		Cell cellStatus = rowHeaderGPSAssessments.createCell(7);
		cellStatus.setCellStyle(cellStyleGPSAssessments);
		cellStatus.setCellValue(strGPSAssessmentStatus);
		
		
		//9 Task Name
		Cell cellTaskName = rowHeaderGPSAssessments.createCell(8);
		cellTaskName.setCellStyle(cellStyleGPSAssessments);
		cellTaskName.setCellValue(strGPSAssessmentTaskName);
		
		//10 NRQ ID
		Cell cellNRQID = rowHeaderGPSAssessments.createCell(9);
		cellNRQID.setCellStyle(cellStyleGPSAssessments);
		cellNRQID.setCellValue(strGPSAssessmentNRQID);
		
		//11 GPS Assessment Request Category
		Cell cellGPSAssessmentRequestCategory = rowHeaderGPSAssessments.createCell(10);
		cellGPSAssessmentRequestCategory.setCellStyle(cellStyleGPSAssessments);
		cellGPSAssessmentRequestCategory.setCellValue(strGPSAssessmentRequestCategory);
		
		//12 Task Description
		Cell cellTaskDescription = rowHeaderGPSAssessments.createCell(11);
		cellTaskDescription.setCellStyle(cellStyleGPSAssessments);
		cellTaskDescription.setCellValue(strGPSAssessmentTaskDescription);
		
	 	//13 GPS Summary
		Cell cellGPSSummary = rowHeaderGPSAssessments.createCell(12);
		cellGPSSummary.setCellStyle(cellStyleGPSAssessments);
		cellGPSSummary.setCellValue(strGPSAssessmentGPSSummary);
		
		//14 GPS Assessment Task State
		Cell cellGPSAssessmentTaskState = rowHeaderGPSAssessments.createCell(13);
		cellGPSAssessmentTaskState.setCellStyle(cellStyleGPSAssessments);
		cellGPSAssessmentTaskState.setCellValue(strGPSAssessmentTaskState);
		
		//Added for Reuirement Id : 35249--starts
		//15 GPS Assessment Business Area
		Cell cellGPSAssessmentTaskBusinessArea = rowHeaderGPSAssessments.createCell(14);
		cellGPSAssessmentTaskBusinessArea.setCellStyle(cellStyleGPSAssessments);
		cellGPSAssessmentTaskBusinessArea.setCellValue(strGPSAssessmentBusinessArea);
		//Added for Reuirement Id : 35249--ends
		
		//Added for Requirement 37823 -starts
		//16 GPS Assessment Task PCP
		Cell cellGPSAssessmentTaskPCP = rowHeaderGPSAssessments.createCell(15);
		cellGPSAssessmentTaskPCP.setCellStyle(cellStyleGPSAssessments);
		cellGPSAssessmentTaskPCP.setCellValue(strGPSAssessmentPCP);
			
		//17 GPS Assessment Task ProductTye
		Cell cellGPSAssessmentTaskProductType= rowHeaderGPSAssessments.createCell(16);
		cellGPSAssessmentTaskProductType.setCellStyle(cellStyleGPSAssessments);
		cellGPSAssessmentTaskProductType.setCellValue(strGPSAssessmentProductType);
		//Added for 2018x6.1 Sept Requirement 38913 Starts
		//18 GPS Assessment RM Path
		Cell cellGPSAssessmentTaskClearanceLevel= rowHeaderGPSAssessments.createCell(17);
		cellGPSAssessmentTaskClearanceLevel.setCellStyle(cellStyleGPSAssessments);
		cellGPSAssessmentTaskClearanceLevel.setCellValue(strPath);
				
		//19 GPS Assessment Task ClearanceLevel
		Cell cellGPSAssessmentTaskRMPath= rowHeaderGPSAssessments.createCell(18);
		cellGPSAssessmentTaskRMPath.setCellStyle(cellStyleGPSAssessments);
		cellGPSAssessmentTaskRMPath.setCellValue(strClearanceLevel);
		
		//20 GPS Assessment Task Product Category Platform NRQ
		Cell cellGPSAssessmentPCPNRQ= rowHeaderGPSAssessments.createCell(19);
		cellGPSAssessmentPCPNRQ.setCellStyle(cellStyleGPSAssessments);
		cellGPSAssessmentPCPNRQ.setCellValue(strProductCategoryPlatform);
		
		//21 GPS Assessment Task Max Usage Amount NRQ
		Cell cellGPSAssessmentMaxUsageAmount= rowHeaderGPSAssessments.createCell(20);
		cellGPSAssessmentMaxUsageAmount.setCellStyle(cellStyleGPSAssessments);
		cellGPSAssessmentMaxUsageAmount.setCellValue(strMaxUsageAmount);

		//22 GPS Assessment Task UoM NRQ
		Cell cellGPSAssessmentUoM= rowHeaderGPSAssessments.createCell(21);
		cellGPSAssessmentUoM.setCellStyle(cellStyleGPSAssessments);
		cellGPSAssessmentUoM.setCellValue(strUoM);
		
		//23 GPS Assessment Task Markets Cleared NRQ
		Cell cellGPSAssessmentMarketCleared= rowHeaderGPSAssessments.createCell(22);
		cellGPSAssessmentMarketCleared.setCellStyle(cellStyleGPSAssessments);
		cellGPSAssessmentMarketCleared.setCellValue(strMarketsCleared);
		
		//24 GPS Assessment Task Supplier
		Cell cellGPSAssessmentSupplier= rowHeaderGPSAssessments.createCell(23);
		cellGPSAssessmentSupplier.setCellStyle(cellStyleGPSAssessments);
		cellGPSAssessmentSupplier.setCellValue(strSupplierName);
		
		//25 GPS Assessment Task Tradename
		Cell cellGPSAssessmentTradename= rowHeaderGPSAssessments.createCell(24);
		cellGPSAssessmentTradename.setCellStyle(cellStyleGPSAssessments);
		cellGPSAssessmentTradename.setCellValue(strTradename);
		
		//26 GPS Assessment Task SRI or PA No
		Cell cellGPSAssessmentSRIOrPA= rowHeaderGPSAssessments.createCell(25);
		cellGPSAssessmentSRIOrPA.setCellStyle(cellStyleGPSAssessments);
		cellGPSAssessmentSRIOrPA.setCellValue(strSRI);
		
		//26 GPS Assessment Task Class
		Cell cellGPSAssessmentClass= rowHeaderGPSAssessments.createCell(26);
		cellGPSAssessmentClass.setCellStyle(cellStyleGPSAssessments);
		cellGPSAssessmentClass.setCellValue(strClassHdr);
				
		//26 GPS Assessment Task Reported Function
		Cell cellGPSAssessmentReportedFunction= rowHeaderGPSAssessments.createCell(27);
		cellGPSAssessmentReportedFunction.setCellStyle(cellStyleGPSAssessments);
		cellGPSAssessmentReportedFunction.setCellValue(strReportedFunctionHdr);
		
		//Added for 2018x6.1 Sept Requirement 38913 Ends
		int rowCount = 0;
		String strTypeName = DomainConstants.EMPTY_STRING;
		String strCurrentState = DomainConstants.EMPTY_STRING;
		Map mp=null;
		HashMap hm= new HashMap<>();
		Hashtable htCommonCol = new Hashtable<>();
		String strTypeDisplayName=null;
		StringBuilder sbGPSSummaryLink = new StringBuilder();
		//Added code for Req Id : 33634 - Hyperlinks--Starts
		String strValue = DomainConstants.EMPTY_STRING;
		String strParentId = DomainConstants.EMPTY_STRING;
		String strTaskId = DomainConstants.EMPTY_STRING;
		String strHyperlinkId = DomainConstants.EMPTY_STRING;
		String strCellValue = DomainConstants.EMPTY_STRING;
		String strCAId = DomainConstants.EMPTY_STRING;
		//Added code for Req Id : 33634 - Hyperlinks--Ends
		//Modified for Requirement : 35249- Starts
		String strGPSTaskName = DomainConstants.EMPTY_STRING;
		String strFinalURL = DomainConstants.EMPTY_STRING;
		Map<String,Object> mConfigurationInfo = null;
		//Selectable for GPS Status or GPS Summary attributes of config object
		String strFieldName = PropertyUtil.getSchemaProperty(context,"attribute_pgGPSSummary");
		String strGPSURLSelectable = (new StringBuilder("attribute[").append(strFieldName).append("]")).toString();
		String strGPSDepotURLSelectable =( new StringBuilder("attribute[").append(PropertyUtil.getSchemaProperty(context,"attribute_pgGPSDepotRoot")).append("]")).toString();
		StringList slConfigSelectables = new StringList(2);
		slConfigSelectables.add(strGPSURLSelectable);
		slConfigSelectables.add(strGPSDepotURLSelectable);
		BusinessObject bObjConfigurationObject = new BusinessObject(pgV3Constants.TYPE_PGCONFIGURATIONADMIN,CONSTANT_PGGPSASSESSMENTADMIN,pgV3Constants.SYMBOL_HYPHEN,pgV3Constants.VAULT_ESERVICEPRODUCTION);
		DomainObject dobjConfigurationObject = DomainObject.newInstance(context, bObjConfigurationObject);
		mConfigurationInfo = dobjConfigurationObject.getInfo(context,slConfigSelectables);
		//Modified for Requirement : 35249- Ends
		//Added code for 2018x6.1 Oct CW requirement 38913 Starts
		String strValidGPSCategory = (new StringBuilder()).append(pgV3Constants.SYMBOL_TILDA).append("A8 - Commercial Use").append(pgV3Constants.SYMBOL_TILDA).append("A7b - Commercial Use Limited Quantity").append(pgV3Constants.SYMBOL_TILDA).append("A7a2 - Investigational Use - NonMarketed Sale Samples").append(pgV3Constants.SYMBOL_TILDA).toString();
		String strGPSCategory = DomainConstants.EMPTY_STRING;
		String strMarketName = DomainConstants.EMPTY_STRING;
		String strPartPolicy = DomainConstants.EMPTY_STRING;
		Map<String,Object> mpContextOfUseData = new HashMap<>();
		String strNRQName = DomainConstants.EMPTY_STRING;
		String strSupplier = DomainConstants.EMPTY_STRING;
		String strPCPValue = DomainConstants.EMPTY_STRING;
		String strNRQId = DomainConstants.EMPTY_STRING;
		String strClass = DomainConstants.EMPTY_STRING;
		String strReportedFunction = DomainConstants.EMPTY_STRING;
		Map<String,Object> mpMEPData = new HashMap<>();
		//Added code for 2018x6.1 Oct CW requirement 38913 Ends
		for (int i=0;i<mlGPSAssessments.size();i++){
			//Added code for 2018x.6 Requirement id 36700 Ability to generate Part and Spec report with without hyperlink Starts
			iRowCountAll = iRowCountAll + 1;
			//Added code for 2018x.6 Requirement id 36700 Ability to generate Part and Spec report with without hyperlink Ends
			++rowCount;
			XSSFRow row = sheetGPSAssessments.createRow(rowCount);
			int columnCount = 0;
			mp = (Map)mlGPSAssessments.get(i);
			sbGPSSummaryLink.setLength(0);
			htCommonCol = (Hashtable) mp.get("CommonColumns");
			strTypeName =(String)htCommonCol.get(DomainConstants.SELECT_TYPE);
			strCurrentState =(String)htCommonCol.get(DomainConstants.SELECT_CURRENT);
			strTypeDisplayName= getTypeDisplayName(context,strTypeName);
			//Added code for 2018x6.1 Oct CW requirement 38913 Starts
			strPartPolicy = (String)htCommonCol.get(DomainConstants.SELECT_POLICY);
			//Added code for 2018x6.1 Oct CW requirement 38913 Ends
			//Modified for Requirement : 35249- Starts
			strGPSTaskName=(String)mp.get(DomainConstants.SELECT_NAME);
			if(UIUtil.isNotNullAndNotEmpty(strGPSTaskName) && null != mConfigurationInfo) {
				//Retrieving the url of "GPS Assessment In Progress" or "GPS Summary" from the configuration object
				strFinalURL = (new StringBuilder(CONST_HTTPS).append( (String)mConfigurationInfo.get(strGPSDepotURLSelectable)).append("/").append((String)mConfigurationInfo.get(strGPSURLSelectable)).append("/")).toString();
			}
			//Modified for Requirement : 35249- Ends
			//Added code for Req Id : 33634 - Hyperlinks--Starts
			strParentId = (String)htCommonCol.get(DomainConstants.SELECT_ID);
			strTaskId = (String)mp.get(DomainConstants.SELECT_ID);
			strCAId = (String) htCommonCol.get(SCAID);
			//Added code for Req Id : 33634 - Hyperlinks--Ends
			//Added by DSM Reports (Sogeti) for 2022x.5 (APR CW 2024) Defect 55875 - Start
			if(UIUtil.isNotNullAndNotEmpty(strCAId) && !strCAId.contains(HYPERLINK_PIPE)) {
				if(htCommonCol.get("CARealizedName") != null && htCommonCol.get("CAProposedName") != null) {
						//Updated code for Req Id : 33634 - Hyperlinks--Starts
						hm.put(0, HYPERLINK+htCommonCol.get("CARealizedName")+HYPERLINK_PIPE+strCAId);
						//Updated code for Req Id : 33634 - Hyperlinks--Ends
				} else if(htCommonCol.get("CARealizedName") != null){
						//Updated code for Req Id : 33634 - Hyperlinks--Starts
						hm.put(0, HYPERLINK+htCommonCol.get("CARealizedName")+HYPERLINK_PIPE+strCAId);
						//Updated code for Req Id : 33634 - Hyperlinks--Ends
				} else if(htCommonCol.get("CAProposedName") != null){
						//Updated code for Req Id : 33634 - Hyperlinks--Starts
						hm.put(0, HYPERLINK+htCommonCol.get("CAProposedName")+HYPERLINK_PIPE+strCAId);
						//Updated code for Req Id : 33634 - Hyperlinks--Ends
				} else {
						hm.put(0, DomainConstants.EMPTY_STRING);
				}
			}else {
				hm.put(0,htCommonCol.get(CAPROPOSEDNAME));
			}
			//Added by DSM Reports (Sogeti) for 2022x.5 (APR CW 2024) Defect 55875 - End
			hm.put(1, htCommonCol.get(pgV3Constants.SELECT_ATTRIBUTE_REASON_FOR_CHANGE));
			//Updated code for Req Id : 33634 - Hyperlinks--Starts
			hm.put(2, HYPERLINK+htCommonCol.get(DomainConstants.SELECT_NAME)+HYPERLINK_PIPE+strParentId);
			//Updated code for Req Id : 33634 - Hyperlinks--Ends
			hm.put(3, htCommonCol.get(pgV3Constants.SELECT_ATTRIBUTE_TITLE));
			hm.put(4, strTypeDisplayName);
			hm.put(5, htCommonCol.get(DomainConstants.SELECT_REVISION));
			hm.put(6, strCurrentState);
			hm.put(7, mp.get(AWLUtil.strcat("attribute[", ATTRIBUTE_PG_GPSSTATUS, "]")));
			//Updated code for Req Id : 33634 - Hyperlinks--Starts
			hm.put(8, HYPERLINK+mp.get(AWLUtil.strcat("attribute[", ATTRIBUTE_PG_GPSORIGINATEDTASKNAME, "]"))+HYPERLINK_PIPE+strTaskId);
			//Updated code for Req Id : 33634 - Hyperlinks--Ends
			hm.put(9, mp.get(AWLUtil.strcat("attribute[", ATTRIBUTE_PG_NRQID, "]")));
			hm.put(10, mp.get(AWLUtil.strcat("attribute[", ATTRIBUTE_PG_GPSASSESSMENTCATEGORY, "]")));
			hm.put(11, mp.get(DomainConstants.SELECT_DESCRIPTION));
			//Modified for Requirement : 35249- Starts
			hm.put(12, sbGPSSummaryLink.append(strFinalURL).append(strGPSTaskName).toString());
			//Modified for Requirement : 35249- Ends
			hm.put(13, mp.get(DomainConstants.SELECT_CURRENT));
			//Added for Reuirement Id : 35249--starts
			hm.put(14, mp.get("BusinessArea"));
			//Added for Reuirement Id : 35249--ends
			//Added for Requirement 37823 -starts
			hm.put(15, mp.get("PCP"));
			hm.put(16, mp.get("GPSProductType"));
			//Added for Requirement 37823 -ends
			//Added code for 2018x6.1 Sept Requirement 38913 Starts
			hm.put(17, mp.get("Path"));
			strNRQName = (String) mp.get(AWLUtil.strcat("attribute[", ATTRIBUTE_PG_NRQID, "]"));
			if(UIUtil.isNotNullAndNotEmpty(strNRQName)) {
				hm.put(18, mp.get(SELECT_ATTR_CLEARANCELEVELREQUESTED));
				strMarketName = geMarketValue(context,strParentId);
				strPCPValue = getPCPValue(context,strParentId);
				hm.put(19, strPCPValue);
				mpContextOfUseData = getContextOfUse(mp);
				hm.put(20, mpContextOfUseData.get("UsageAmount"));
				hm.put(21, mpContextOfUseData.get("UoM"));
				strGPSCategory = (String) mp.get(AWLUtil.strcat("attribute[", ATTRIBUTE_PG_GPSASSESSMENTCATEGORY, "]"));
				if(UIUtil.isNotNullAndNotEmpty(strGPSCategory) && strValidGPSCategory.contains(pgV3Constants.SYMBOL_TILDA+strGPSCategory+pgV3Constants.SYMBOL_TILDA)) {
					hm.put(22, strMarketName);
				} else {
					hm.put(22,DomainConstants.EMPTY_STRING);
				}
				strNRQId = (String) mp.get(DomainConstants.SELECT_ID);
				mpMEPData = getSupplier(context,strNRQId);
				hm.put(23,mpMEPData.get("SupplierName"));
				hm.put(24,mpMEPData.get("MEPTitle"));
				hm.put(25,mpMEPData.get("ExternalMaterial"));
				strClass = getClass(context,strParentId);
				hm.put(26,strClass);
				strReportedFunction = getReportedFunctionForGPS(context,strParentId);
				hm.put(27,strReportedFunction);
			} else {
				hm.put(18, DomainConstants.EMPTY_STRING);
				hm.put(19, DomainConstants.EMPTY_STRING);
				hm.put(20, DomainConstants.EMPTY_STRING);
				hm.put(21, DomainConstants.EMPTY_STRING);
				hm.put(22, DomainConstants.EMPTY_STRING);
				hm.put(23, DomainConstants.EMPTY_STRING);
				hm.put(24, DomainConstants.EMPTY_STRING);
				hm.put(25, DomainConstants.EMPTY_STRING);
				hm.put(26, DomainConstants.EMPTY_STRING);
				hm.put(27, DomainConstants.EMPTY_STRING);
			}
			//Added code for 2018x6.1 Sept Requirement 38913 Ends
			//For Cells Creation in each Row
			XSSFCellStyle style = workbook.createCellStyle();
			style = setForeGroundColor(strCurrentState, style);
			//Added by DSM Reports (Sogeti) for 2022x.5 (APR CW 2024) Defect 55875 - Start
			XSSFCellStyle style1 = workbook.createCellStyle();
			//Added by DSM Reports (Sogeti) for 2022x.5 (APR CW 2024) Defect 55875 - End
			for(int j=0;j<hm.size();j++){								
				//Modified the code for _2022x_Aug CW Req-47097
				// Modified by DSM Reports (Sogeti) for 22x.03 (August CW 2023) Defect 54091 - Start
				Cell cell = row.createCell(columnCount++);
				if (j == 2) {
					style = makeColumnNumeric(workbook, style);
				}
				cell.setCellStyle(style);

				// Modified by DSM Reports (Sogeti) for 22x.03 (August CW 2023) Defect 54091 - Start
				//Modified the code for _2022x_Aug CW Req-47097
				//Added code for Req Id : 33634 - Hyperlinks--Starts
				strCellValue = (String)hm.get(j);
				if(UIUtil.isNotNullAndNotEmpty(strCellValue) && strCellValue.startsWith(HYPERLINK_COMPARE)){
					String[] strSplittedValue = strCellValue.split("\\|",-1); 
					strHyperlinkId = strSplittedValue[(strSplittedValue.length)-1];
					strValue = strSplittedValue[(strSplittedValue.length)-2];
					//Added code for 2018x.6 Requirement id 36700 Ability to generate Part and Spec report with without hyperlink Starts
					if(pgV3Constants.TRUE.equalsIgnoreCase(strHyperlink) && iRowCountAll < iHyperLinkLimit){
						getHyperlink(context,cell,workbook,strValue,strHyperlinkId,strCurrentState);
					
					} else if(UIUtil.isNotNullAndNotEmpty(strValue)) {					
						cell.setCellValue(strValue);
					}
					//Added code for 2018x.6 Requirement id 36700 Ability to generate Part and Spec report with without hyperlink Ends
				}else {
					cell.setCellValue((String)hm.get(j));
					//Added by DSM Reports (Sogeti) for 2022x.5 (APR CW 2024) Defect 55875 - Start
					if(j == 0) {
						style1.cloneStyleFrom(style);
						style1.setWrapText(true);
						cell.setCellStyle(style1);
					}
					//Added by DSM Reports (Sogeti) for 2022x.5 (APR CW 2024) Defect 55875 - End
				}
				//Added code for Req Id : 33634 - Hyperlinks--Ends
			}
		}
		sheetFormatter(sheetGPSAssessments); // Added by DSM Reports (Sogeti) for 22x.04 (Dec CW 2023) Defect 56156 - START/END
	} catch (Exception e) {
		outLog.print("Exception in  updateWorksheetGPSAssessment: " +e+"\n");
		outLog.flush();	
	}
}
//Modified for requirement : 38092-ends

/**
 * This method is used to get GPS Assessment data
 * @param args
 * @return MapList
 * @throws Exception
 */
//Modified for requirement : 38092-starts
private MapList getGPSAssessment(Context context,DomainObject dobjPart,Map mpObjectCommon,String strUserName,MapList mlGPSAssessmentsListAll,String strPath) throws Exception {	
	//Added the code for Defect 49698 - Spec Reader Access Issue - Starts
	boolean hasAccess = false;
	boolean isContextPushed = false;
	//Added the code for Defect 49698 - Spec Reader Access Issue - Ends
	Map<String,Object> mpGPSAssessmentsRow = null;
	StringList slSelect=new StringList();
	//Modified for Requirement : 35249- Starts
	String strTaskId = DomainConstants.EMPTY_STRING;
	String strBusinessArea = DomainConstants.EMPTY_STRING;
	//Modified for Requirement : 35249- Ends
	//Added for Requirement 37823 -starts
	String strPCP = DomainConstants.EMPTY_STRING;
	String strGPSProductType = DomainConstants.EMPTY_STRING;
	//Added for Requirement 37823 -ends
	//Added code for 2018x6.1 Oct requirement 38913 Starts
	String strPartType = (String) mpObjectCommon.get(DomainConstants.SELECT_TYPE);
	//Added code for 2018x6.1 Oct requirement 38913 Ends
	slSelect.addElement(DomainConstants.SELECT_ID);
	slSelect.addElement(DomainConstants.SELECT_TYPE);
	slSelect.addElement(DomainConstants.SELECT_NAME);
	slSelect.add(AWLUtil.strcat("attribute[", ATTRIBUTE_PG_GPSSTATUS, "]"));
	slSelect.add(AWLUtil.strcat("attribute[", ATTRIBUTE_PG_GPSORIGINATEDTASKNAME, "]"));
	slSelect.add(AWLUtil.strcat("attribute[", ATTRIBUTE_PG_NRQID, "]"));
	slSelect.add(AWLUtil.strcat("attribute[", ATTRIBUTE_PG_GPSASSESSMENTCATEGORY, "]"));
	slSelect.add(DomainConstants.SELECT_DESCRIPTION);
	slSelect.add(DomainConstants.SELECT_CURRENT);
	//Added code for 2018x6.1 Oct requirement 38913 Starts
	slSelect.add(SELECT_ATTR_CLEARANCELEVELREQUESTED);
	slSelect.add("from["+REL_PGRELATEDCONTEXTOFUSE+"].to."+SELECT_ATTR_ESTIMATEDUPPERLEVELOFMATERIALINPRODUCT);
	slSelect.add("from["+REL_PGRELATEDCONTEXTOFUSE+"].to."+SELECT_ATTR_ESTIMATEDUPPERLEVELOFMATERIALINPRODUCTUOM);
	//Added code for 2018x6.1 Oct requirement 38913 Ends
	try{
		//Added the code for Defect 49698 - Spec Reader Access Issue - Starts
		if(SPECREADER.equalsIgnoreCase(strOriginatingSource)) {
			hasAccess = accessCheck(context, strUserName, (String)dobjPart.getInfo(context, DomainConstants.SELECT_ID));
			if(hasAccess) {
				//Pushing User Agent Context to get the Data if the Spec Reader User have access
				ContextUtil.pushContext(context,PropertyUtil.getSchemaProperty(context,"User Agent"),DomainConstants.EMPTY_STRING,DomainConstants.EMPTY_STRING);
				isContextPushed = true;
				
			}
		}
		//Added the code for Defect 49698 - Spec Reader Access Issue - Ends
		MapList mpReturnList = dobjPart.getRelatedObjects(context,//context
				RELATIONSHIP_PG_GPSASSESSMENTTASKINPUT,//rel pattern
				TYPE_PG_GPSASSESSMENTTASK, //type pattern
				slSelect, //obj select
				null, // rel select
				true,//get To
				false, //get From
				(short)1, //recurse level
				null, //obj where clause
				null, //rel where clause
				0);//limit
		if(null != mpReturnList && !mpReturnList.isEmpty()) {
			for(int i=0;i<mpReturnList.size();i++) {
				mpGPSAssessmentsRow = new HashMap<>();
				mpGPSAssessmentsRow = (Map)mpReturnList.get(i);
				//Modified for Reuirement Id : 35249--starts
				strTaskId = (String) mpGPSAssessmentsRow.get(DomainConstants.SELECT_ID);
				strBusinessArea = getBusinessAreaForGpsAssessment(context,strTaskId);
				//Added for Requirement 37823 -starts
				strPCP = getProductCategoryPlatformFromPart(context,strTaskId);
				strGPSProductType = getGPSProductType(context,strTaskId);
				//Added for Requirement 37823 -ends
				mpGPSAssessmentsRow.put("CommonColumns", mpObjectCommon);
				mpGPSAssessmentsRow.put("BusinessArea",strBusinessArea);
				//Modified for Reuirement Id : 35249--Ends
				//Added for Requirement 37823 -starts
				mpGPSAssessmentsRow.put("PCP",strPCP);
				mpGPSAssessmentsRow.put("GPSProductType",strGPSProductType);
				mpGPSAssessmentsRow.put("Path",strPath);
				//Added for Requirement 37823 -ends
				mlGPSAssessmentsListAll.add(mpGPSAssessmentsRow);
			}
		}
		//Added code for 2018x6.1 Oct Requirement 39410 Starts
		if(UIUtil.isNotNullAndNotEmpty(strPartType) && (pgV3Constants.TYPE_ASSEMBLEDPRODUCTPART.equalsIgnoreCase(strPartType) || TYPE_ASSEMBLEDPRODUCTPART.equalsIgnoreCase(strPartType))) {
			processRMConnectedToAPP(context,dobjPart,strUserName,mlGPSAssessmentsListAll,mpObjectCommon);
		}
		//Added code for 2018x6.1 Oct Requirement 39410 Ends
	} catch (Exception e){
		outLog.print("Exception in  getGPSAssessment: " +e+"\n");
		outLog.flush();	 
		//Added the code for Defect 49698 - Spec Reader Access Issue - Starts
	}	finally {
		if(isContextPushed) {
			ContextUtil.popContext(context);
		}
	}
	//Added the code for Defect 49698 - Spec Reader Access Issue - Ends
	return mlGPSAssessmentsListAll;
}
//Modified for requirement : 38092-ends

/**This method is used to update the worksheet for Country Clerance.
* @param context is the matrix context
* @param args has the required information
* @return void
*/
//Modified for requirement : 38092-starts
private void updateWorksheetCountryClerance(Context context, XSSFWorkbook workbook,XSSFRow rowHeaderCountryClearance,XSSFCellStyle cellStyleCountryClearance,MapList mlCountryClearance,XSSFSheet sheetCountryClearance,String strHyperlink, XSSFCellStyle styleGlobal) {
	try {
		//Added code for 2018x.6 Requirement id 36700 Ability to generate Part and Spec report with without hyperlink Starts
		String strHyperlinkLimit = EnoviaResourceBundle.getProperty(context, EMXCPNSTRINGRESOURCE, context.getLocale(),"emxCPN.PartAndSpecReport.HyperlinkLimit");
		int iHyperLinkLimit = Integer.parseInt(strHyperlinkLimit);
		int iRowCountAll=0;
		//Added code for 2018x.6 Requirement id 36700 Ability to generate Part and Spec report with without hyperlink Ends
		String strCountryClearanceCA= EnoviaResourceBundle.getProperty(context, EMXCPNSTRINGRESOURCE, context.getLocale(),"emxCPN.FamilyCareReport.Worksheet.Column.ChangeAction");
		String strCountryClearanceCAReasonForChange=EnoviaResourceBundle.getProperty(context, EMXCPNSTRINGRESOURCE, context.getLocale(),"emxCPN.FamilyCareReport.Worksheet.Column.ChangeActionReasonForChange");
		String strCountryClearanceNameOrNumber=EnoviaResourceBundle.getProperty(context, EMXCPNSTRINGRESOURCE, context.getLocale(),"emxCPN.FamilyCareReport.Worksheet.Column.NameOrNumber");
		String strCountryClearanceTitle=EnoviaResourceBundle.getProperty(context, EMXCPNSTRINGRESOURCE, context.getLocale(),"emxCPN.FamilyCareReport.Worksheet.Column.Title");
		String strCountryClearanceType=EnoviaResourceBundle.getProperty(context, EMXCPNSTRINGRESOURCE, context.getLocale(),"emxCPN.FamilyCareReport.Worksheet.Column.Type");
        String strCountryClearanceRevision = EnoviaResourceBundle.getProperty(context, EMXCPNSTRINGRESOURCE, context.getLocale(),"emxCPN.FamilyCareReport.Worksheet.Column.Revision");
        String strCountryClearanceState = EnoviaResourceBundle.getProperty(context, EMXCPNSTRINGRESOURCE, context.getLocale(),"emxCPN.FamilyCareReport.Worksheet.Column.State");
		String strCountryName = EnoviaResourceBundle.getProperty(context, EMXCPNSTRINGRESOURCE, context.getLocale(),"emxCPN.FamilyCareReport.Worksheet.CountryClerance.Column.Country");
		String strOverallClearanceStatus = EnoviaResourceBundle.getProperty(context, EMXCPNSTRINGRESOURCE, context.getLocale(),"emxCPN.FamilyCareReport.Worksheet.CountryClerance.Column.OverallClearanceStatus");
		String strGPSApprovalStatus = EnoviaResourceBundle.getProperty(context, EMXCPNSTRINGRESOURCE, context.getLocale(),"emxCPN.FamilyCareReport.Worksheet.CountryClerance.Column.GPSApprovalStatus");
		String strClearanceNumber = EnoviaResourceBundle.getProperty(context, EMXCPNSTRINGRESOURCE, context.getLocale(),"emxCPN.FamilyCareReport.Worksheet.CountryClerance.Column.ClearanceNumber");
		String strProductRegulatoryClassification = EnoviaResourceBundle.getProperty(context, EMXCPNSTRINGRESOURCE, context.getLocale(),"emxCPN.FamilyCareReport.Worksheet.CountryClerance.Column.ProductRegulatoryClassification");
		String strCountryProductRegNumber = EnoviaResourceBundle.getProperty(context, EMXCPNSTRINGRESOURCE, context.getLocale(),"emxCPN.FamilyCareReport.Worksheet.CountryClerance.Column.CountryProductRegNumber");
		String strRegStatus = EnoviaResourceBundle.getProperty(context, EMXCPNSTRINGRESOURCE, context.getLocale(),"emxCPN.FamilyCareReport.Worksheet.CountryClerance.Column.RegStatus");
		String strRegExprDate = EnoviaResourceBundle.getProperty(context, EMXCPNSTRINGRESOURCE, context.getLocale(),"emxCPN.FamilyCareReport.Worksheet.CountryClerance.Column.RegExprDate");
		//Added for Defect Id : 32292 - Starts
		String strRegRenewalLeadTime = EnoviaResourceBundle.getProperty(context, EMXCPNSTRINGRESOURCE, context.getLocale(),"emxCPN.FamilyCareReport.Worksheet.CountryClerance.Column.RegRenewalLeadTime");
		String strRegRenewalStatus = EnoviaResourceBundle.getProperty(context, EMXCPNSTRINGRESOURCE, context.getLocale(),"emxCPN.FamilyCareReport.Worksheet.CountryClerance.Column.RegRenewalStatus");
		//Added for Defect Id : 32292 - Ends
		String strRestrictions = EnoviaResourceBundle.getProperty(context, EMXCPNSTRINGRESOURCE, context.getLocale(),"emxCPN.FamilyCareReport.Worksheet.CountryClerance.Column.Restrictions");
		String strComments = EnoviaResourceBundle.getProperty(context, EMXCPNSTRINGRESOURCE, context.getLocale(),"emxCPN.FamilyCareReport.Worksheet.CountryClerance.Column.Comments");
		String strPackingSite = EnoviaResourceBundle.getProperty(context, EMXCPNSTRINGRESOURCE, context.getLocale(),"emxCPN.FamilyCareReport.Worksheet.CountryClerance.Column.PackingSite");
		String strBulkMakingManfSite = EnoviaResourceBundle.getProperty(context, EMXCPNSTRINGRESOURCE, context.getLocale(),"emxCPN.FamilyCareReport.Worksheet.CountryClerance.Column.BulkMakingManfSite");
		//Added for Requirement no :37824 - starts
		String strRPN = EnoviaResourceBundle.getProperty(context, EMXCPNSTRINGRESOURCE, context.getLocale(),"emxCPN.FamilyCareReport.Worksheet.CountryClerance.Column.RPN");
		String strPackSize = EnoviaResourceBundle.getProperty(context, EMXCPNSTRINGRESOURCE, context.getLocale(),"emxCPN.FamilyCareReport.Worksheet.CountryClerance.Column.PackSize");
		String strBusinessChannel = EnoviaResourceBundle.getProperty(context, EMXCPNSTRINGRESOURCE, context.getLocale(),"emxCPN.FamilyCareReport.Worksheet.CountryClerance.Column.BusinessChannel");
		String strLegalEntity = EnoviaResourceBundle.getProperty(context, EMXCPNSTRINGRESOURCE, context.getLocale(),"emxCPN.FamilyCareReport.Worksheet.CountryClerance.Column.LegalEntity");
		String strMAH = EnoviaResourceBundle.getProperty(context, EMXCPNSTRINGRESOURCE, context.getLocale(),"emxCPN.FamilyCareReport.Worksheet.CountryClerance.Column.MAH");
		//Added for Requirement no :37824 - ends
		//Creating Header ---Begin
		//1 Change Action
		Cell cellChangeAction = rowHeaderCountryClearance.createCell(0);
		cellChangeAction.setCellStyle(cellStyleCountryClearance);
		cellChangeAction.setCellValue(strCountryClearanceCA);

		//2 Change Action 'Reason for Change'
		Cell cellChangeActionReasonForChange = rowHeaderCountryClearance.createCell(1);
		cellChangeActionReasonForChange.setCellStyle(cellStyleCountryClearance);
		cellChangeActionReasonForChange.setCellValue(strCountryClearanceCAReasonForChange);

		//3 Name/Number
		Cell cellNameOrNumber = rowHeaderCountryClearance.createCell(2);
		cellNameOrNumber.setCellStyle(cellStyleCountryClearance);
		cellNameOrNumber.setCellValue(strCountryClearanceNameOrNumber);

		//4 Title
		Cell cellTitle = rowHeaderCountryClearance.createCell(3);
		cellTitle.setCellStyle(cellStyleCountryClearance);
		cellTitle.setCellValue(strCountryClearanceTitle);

		//5 Type
		Cell cellType = rowHeaderCountryClearance.createCell(4);
		cellType.setCellStyle(cellStyleCountryClearance);
		cellType.setCellValue(strCountryClearanceType);			

		//6 Revision
		Cell cellRevision = rowHeaderCountryClearance.createCell(5);
		cellRevision.setCellStyle(cellStyleCountryClearance);
		cellRevision.setCellValue(strCountryClearanceRevision);
		
		//7 State
		Cell cellState = rowHeaderCountryClearance.createCell(6);
		cellState.setCellStyle(cellStyleCountryClearance);
		cellState.setCellValue(strCountryClearanceState);
		
		//8 Country Name
		Cell cellSAPBOMName = rowHeaderCountryClearance.createCell(7);
		cellSAPBOMName.setCellStyle(cellStyleCountryClearance);
		cellSAPBOMName.setCellValue(strCountryName);

		//9 Overall Clearance Status
		Cell cellDescription = rowHeaderCountryClearance.createCell(8);
		cellDescription.setCellStyle(cellStyleCountryClearance);
		cellDescription.setCellValue(strOverallClearanceStatus);
		
		//10 GPS Approval Status
		Cell cellSAPBOMType = rowHeaderCountryClearance.createCell(9);
		cellSAPBOMType.setCellStyle(cellStyleCountryClearance);
		cellSAPBOMType.setCellValue(strGPSApprovalStatus);
		
		//11 Clearance Number
		Cell cellSpecificationSubType = rowHeaderCountryClearance.createCell(10);
		cellSpecificationSubType.setCellStyle(cellStyleCountryClearance);
		cellSpecificationSubType.setCellValue(strClearanceNumber);
		
		//12 Product Regulatory Classification
		Cell cellSAPType = rowHeaderCountryClearance.createCell(11);
		cellSAPType.setCellStyle(cellStyleCountryClearance);
		cellSAPType.setCellValue(strProductRegulatoryClassification);
		
		//Added for Requirement no :37824 - starts
		//13 Market Approval Holder
		Cell cellMAH = rowHeaderCountryClearance.createCell(12);
		cellMAH.setCellStyle(cellStyleCountryClearance);
		cellMAH.setCellValue(strMAH);

		//14 Legal Entity
		Cell cellLegalEntity = rowHeaderCountryClearance.createCell(13);
		cellLegalEntity.setCellStyle(cellStyleCountryClearance);
		cellLegalEntity.setCellValue(strLegalEntity);
		
		
		//15 Business Channel
		Cell cellBusinessChannel = rowHeaderCountryClearance.createCell(14);
		cellBusinessChannel.setCellStyle(cellStyleCountryClearance);
		cellBusinessChannel.setCellValue(strBusinessChannel);
		
		//16 Pack Size
		Cell cellPackSize = rowHeaderCountryClearance.createCell(15);
		cellPackSize.setCellStyle(cellStyleCountryClearance);
		cellPackSize.setCellValue(strPackSize);
		//Added for Requirement no :37824 - ends
		
		//17 Country Product Registration Number
		Cell cellSubstituteGrouping = rowHeaderCountryClearance.createCell(16);
		cellSubstituteGrouping.setCellStyle(cellStyleCountryClearance);
		cellSubstituteGrouping.setCellValue(strCountryProductRegNumber);
		
		//18 Registration Status
		Cell cellMinimumQuantity = rowHeaderCountryClearance.createCell(17);
		cellMinimumQuantity.setCellStyle(cellStyleCountryClearance);
		cellMinimumQuantity.setCellValue(strRegStatus);
		
		//19 Registration Expiration Date
		Cell cellQuantity = rowHeaderCountryClearance.createCell(18);
		cellQuantity.setCellStyle(cellStyleCountryClearance);
		cellQuantity.setCellValue(strRegExprDate);
		
		//Added for Defect Id : 32292 - Starts
		//20 Registration Renewal Lead Time
		Cell cellLeadTime = rowHeaderCountryClearance.createCell(19);
		cellLeadTime.setCellStyle(cellStyleCountryClearance);
		cellLeadTime.setCellValue(strRegRenewalLeadTime);
		
		//21 Registration Renewal Status
		Cell cellRenewalStatus = rowHeaderCountryClearance.createCell(20);
		cellRenewalStatus.setCellStyle(cellStyleCountryClearance);
		cellRenewalStatus.setCellValue(strRegRenewalStatus);
		//Added for Defect Id : 32292 - Ends
		
		//Added for Requirement no :37824 - starts
		//22 Registered Product Name
		Cell cellRPN = rowHeaderCountryClearance.createCell(21);
		cellRPN.setCellStyle(cellStyleCountryClearance);
		cellRPN.setCellValue(strRPN);
		//Added for Requirement no :37824 - ends
		
		//23 Restrictions
		Cell cellMaximumQuantity = rowHeaderCountryClearance.createCell(22);
		cellMaximumQuantity.setCellStyle(cellStyleCountryClearance);
		cellMaximumQuantity.setCellValue(strRestrictions);
		
		//24 Comments
		Cell cellBaseUnitofMeasure = rowHeaderCountryClearance.createCell(23);
		cellBaseUnitofMeasure.setCellStyle(cellStyleCountryClearance);
		cellBaseUnitofMeasure.setCellValue(strComments);
		
		//25 Packing Site
		Cell cellOptionalComponent = rowHeaderCountryClearance.createCell(24);
		cellOptionalComponent.setCellStyle(cellStyleCountryClearance);
		cellOptionalComponent.setCellValue(strPackingSite);
		
		//26 Bulk Making / Manufacturing Site
		Cell cellTransportUnit = rowHeaderCountryClearance.createCell(25);
		cellTransportUnit.setCellStyle(cellStyleCountryClearance);
		cellTransportUnit.setCellValue(strBulkMakingManfSite);
		
		
		HashMap hm= new HashMap<>();
		int rowCount = 0;
		String strTypeName = DomainConstants.EMPTY_STRING;
		String strCurrentState = DomainConstants.EMPTY_STRING;
		Map mp=new HashMap();
		Hashtable htCommonCol = new Hashtable<>();
		String strTypeDisplayName=null;
		//Added code for Req Id : 33634 - Hyperlinks--Starts
		String strValue = DomainConstants.EMPTY_STRING;
		String strParentId = DomainConstants.EMPTY_STRING;
		String strHyperlinkId = DomainConstants.EMPTY_STRING;
		String strCellValue = DomainConstants.EMPTY_STRING;
		String strCAId = DomainConstants.EMPTY_STRING;
		//Added code for Req Id : 33634 - Hyperlinks--Ends
		//Added for Requirement no :37824 - starts
		String strCountryRPN = DomainConstants.EMPTY_STRING;
		String strCountryMAH = DomainConstants.EMPTY_STRING;
		String strCountryLegalEntity = DomainConstants.EMPTY_STRING;
		String strCountryBusinessChannel = DomainConstants.EMPTY_STRING;
		String strCountryPackSize = DomainConstants.EMPTY_STRING;
		String strCountryOverallClearanceStatus = DomainConstants.EMPTY_STRING;
		String strPSRAApprovalStatus = DomainConstants.EMPTY_STRING;
		String strCountryClearanceNumber = DomainConstants.EMPTY_STRING;
		String strCountryProductRegulatoryClassification = DomainConstants.EMPTY_STRING;
		String strProductRegistrationNumber = DomainConstants.EMPTY_STRING;
		String strRegistrationStatus = DomainConstants.EMPTY_STRING;
		String strRegistrationEndDate = DomainConstants.EMPTY_STRING;
		String strRegistrationLeadTime = DomainConstants.EMPTY_STRING;
		String strRegistrationRenewalStatus = DomainConstants.EMPTY_STRING;
		String strRestriction = DomainConstants.EMPTY_STRING;
		String strComment = DomainConstants.EMPTY_STRING;
		String strCountryPackingSite = DomainConstants.EMPTY_STRING;
		String strManufacturingSite = DomainConstants.EMPTY_STRING;
		//Added for Requirement no :37824 - ends
		for (int i=0;i<mlCountryClearance.size();i++){
			//Added code for 2018x.6 Requirement id 36700 Ability to generate Part and Spec report with without hyperlink Starts
			iRowCountAll = iRowCountAll + 1;
			//Added code for 2018x.6 Requirement id 36700 Ability to generate Part and Spec report with without hyperlink Ends
			++rowCount;
			XSSFRow row = sheetCountryClearance.createRow(rowCount);
			int columnCount = 0;
			mp = (Map)mlCountryClearance.get(i);
			htCommonCol = (Hashtable) mp.get("CommonColumns");
			strTypeName =(String)htCommonCol.get(DomainConstants.SELECT_TYPE);
			strCurrentState =(String)htCommonCol.get(DomainConstants.SELECT_CURRENT);
			strTypeDisplayName= getTypeDisplayName(context,strTypeName);
			//Added code for Req Id : 33634 - Hyperlinks--Starts
			strParentId = (String)htCommonCol.get(DomainConstants.SELECT_ID);
			strCAId = (String)htCommonCol.get(SCAID);
			//Added code for Req Id : 33634 - Hyperlinks--Ends
			//Updated for Defect : 41465 - starts
			strCountryOverallClearanceStatus = getAttributeValueForCountryClearance(context,mp,pgV3Constants.ATTRIBUTE_PGOVERALLCLEARANCESTATUS);
			strPSRAApprovalStatus = getAttributeValueForCountryClearance(context,mp,pgV3Constants.ATTRIBUTE_PGPSRAAPPROVALSTATUS);
			strCountryClearanceNumber = getAttributeValueForCountryClearance(context,mp,pgV3Constants.ATTRIBUTE_PGCTNUMBER);
			strCountryProductRegulatoryClassification = getAttributeValueForCountryClearance(context,mp,pgV3Constants.ATTRIBUTE_PGPRODUCTREGULATORYCLASSIFICATION);
			strProductRegistrationNumber = getAttributeValueForCountryClearance(context,mp,pgV3Constants.ATTRIBUTE_PGCOUNTRYPRODUCTREGISTRATIONNUMBER);
			strRegistrationStatus = getAttributeValueForCountryClearance(context,mp,pgV3Constants.ATTRIBUTE_PGREGISTRATIONSTATUS);
			strRegistrationEndDate = getAttributeValueForCountryClearance(context,mp,pgV3Constants.ATTRIBUTE_PGREGISTRATIONENDDATE);
			strRegistrationLeadTime = getAttributeValueForCountryClearance(context,mp,ATTRIBUTE_PG_REGISTRATIONRENEWALLEADTIME);
			strRegistrationRenewalStatus = getAttributeValueForCountryClearance(context,mp,ATTRIBUTE_PG_REGISTRATIONRENEWALSTATUS);
			strRestriction = getAttributeValueForCountryClearance(context,mp,pgV3Constants.ATTRIBUTE_PGPLANTRESTRICTION);
			strComment = getAttributeValueForCountryClearance(context,mp,pgV3Constants.ATTRIBUTE_PGCLEARANCECOMMENT);
			strCountryPackingSite = getAttributeValueForCountryClearance(context,mp,ATTRIBUTE_PG_PACKINGSITE);
			strManufacturingSite = getAttributeValueForCountryClearance(context,mp,ATTRIBUTE_PG_MANUFACTURINGSITE);
			strCountryMAH = getAttributeValueForCountryClearance(context,mp,PropertyUtil.getSchemaProperty(context,"attribute_pgMarketApproverHolder"));
			strCountryLegalEntity = getAttributeValueForCountryClearance(context,mp,PropertyUtil.getSchemaProperty(context,"attribute_pgLegalEntity"));
			strCountryBusinessChannel = getAttributeValueForCountryClearance(context,mp,PropertyUtil.getSchemaProperty(context,"attribute_pgBusinessChannel"));
			strCountryPackSize = getAttributeValueForCountryClearance(context,mp,PropertyUtil.getSchemaProperty(context,"attribute_pgPackSize"));
			strCountryRPN = getAttributeValueForCountryClearance(context,mp,pgV3Constants.ATTRIBUTE_REGISTEREDPRODUCTNAME);
			//Updated for Defect : 41465 - ends
			//Added by DSM Reports (Sogeti) for 2022x.5 (APR CW 2024) Defect 55875 - Start
			if(UIUtil.isNotNullAndNotEmpty(strCAId) && !strCAId.contains(HYPERLINK_PIPE)) {
					if(htCommonCol.get("CARealizedName") != null && htCommonCol.get("CAProposedName") != null) {
						//Updated code for Req Id : 33634 - Hyperlinks--Starts
						hm.put(0, HYPERLINK+htCommonCol.get("CARealizedName")+HYPERLINK_PIPE+strCAId);
						//Updated code for Req Id : 33634 - Hyperlinks--Ends
					} else if(htCommonCol.get("CARealizedName") != null){
						//Updated code for Req Id : 33634 - Hyperlinks--Starts
						hm.put(0, HYPERLINK+htCommonCol.get("CARealizedName")+HYPERLINK_PIPE+strCAId);
						//Updated code for Req Id : 33634 - Hyperlinks--Ends
					} else if(htCommonCol.get("CAProposedName") != null){
						//Updated code for Req Id : 33634 - Hyperlinks--Starts
						hm.put(0, HYPERLINK+htCommonCol.get("CAProposedName")+HYPERLINK_PIPE+strCAId);
						//Updated code for Req Id : 33634 - Hyperlinks--Ends
					} else {
						hm.put(0, DomainConstants.EMPTY_STRING);
					}
			}else {
				hm.put(0,htCommonCol.get(CAPROPOSEDNAME));	
			}
			//Added by DSM Reports (Sogeti) for 2022x.5 (APR CW 2024) Defect 55875 -End
			hm.put(1, htCommonCol.get(pgV3Constants.SELECT_ATTRIBUTE_REASON_FOR_CHANGE));
			//Updated code for Req Id : 33634 - Hyperlinks--Starts
			hm.put(2, HYPERLINK+htCommonCol.get(DomainConstants.SELECT_NAME)+HYPERLINK_PIPE+strParentId);
			//Updated code for Req Id : 33634 - Hyperlinks--Ends
			hm.put(3, htCommonCol.get(pgV3Constants.SELECT_ATTRIBUTE_TITLE));
			hm.put(4, strTypeDisplayName);
			hm.put(5, htCommonCol.get(DomainConstants.SELECT_REVISION));
			hm.put(6, strCurrentState);
			hm.put(7, mp.get(DomainConstants.SELECT_NAME));
			hm.put(8, strCountryOverallClearanceStatus);
			hm.put(9, strPSRAApprovalStatus);
			hm.put(10, strCountryClearanceNumber);
			hm.put(11, strCountryProductRegulatoryClassification);
			//Added for Requirement no :37824 - starts
			hm.put(12, strCountryMAH);
			hm.put(13, strCountryLegalEntity);
			hm.put(14, strCountryBusinessChannel);
			hm.put(15, strCountryPackSize);
			//Added for Requirement no :37824 - ends
			hm.put(16, strProductRegistrationNumber);
			hm.put(17, strRegistrationStatus);
			hm.put(18, strRegistrationEndDate);
			//Added for Defect Id : 32292 - Starts
			hm.put(19, strRegistrationLeadTime);
			hm.put(20, strRegistrationRenewalStatus);
			//Added for Defect Id : 32292 - Ends
			//Added for Requirement no :37824 - starts
			hm.put(21, strCountryRPN);
			//Added for Requirement no :37824 - ends
			hm.put(22, strRestriction);
			hm.put(23, strComment);
			hm.put(24, strCountryPackingSite);
			hm.put(25, strManufacturingSite);	

            XSSFCellStyle style = workbook.createCellStyle();
			style = setForeGroundColor(strCurrentState, style);
			//Added by DSM Reports (Sogeti) for 2022x.5 (APR CW 2024) Defect 55875 - Start
			XSSFCellStyle style1 = workbook.createCellStyle();
			//Added by DSM Reports (Sogeti) for 2022x.5 (APR CW 2024) Defect 55875 - End
			for(int j=0;j<hm.size();j++){								
				//Modified the code for _2022x_Aug CW Req-47097
				// Modified by DSM Reports (Sogeti) for 22x.03 (August CW 2023) Defect 54091 - Start
				Cell cell = row.createCell(columnCount++);
				if (j == 2) {
					style = makeColumnNumeric(workbook, style);
				}
				cell.setCellStyle(style);
				
				// Modified by DSM Reports (Sogeti) for 22x.03 (August CW 2023) Defect 54091 - Start
				//Modified the code for _2022x_Aug CW Req-47097
				//Added code for Req Id : 33634 - Hyperlinks--Starts
				strCellValue = (String)hm.get(j);
				if(UIUtil.isNotNullAndNotEmpty(strCellValue) && strCellValue.startsWith(HYPERLINK_COMPARE)){
					String[] strSplittedValue = strCellValue.split("\\|",-1); 
					strHyperlinkId = strSplittedValue[(strSplittedValue.length)-1];
					strValue = strSplittedValue[(strSplittedValue.length)-2];
					//Added code for 2018x.6 Requirement id 36700 Ability to generate Part and Spec report with without hyperlink Starts
					if(pgV3Constants.TRUE.equalsIgnoreCase(strHyperlink) && iRowCountAll < iHyperLinkLimit){
						getHyperlink(context,cell,workbook,strValue,strHyperlinkId,strCurrentState);
					
					} else if(UIUtil.isNotNullAndNotEmpty(strValue)) {					
						cell.setCellValue(strValue);
					}
					//Added code for 2018x.6 Requirement id 36700 Ability to generate Part and Spec report with without hyperlink Ends
				}else {
					cell.setCellValue((String)hm.get(j));
					//Added by DSM Reports (Sogeti) for 2022x.5 (APR CW 2024) Defect 55875 - Start
					if(j == 0) {
						style1.cloneStyleFrom(style);
						style1.setWrapText(true);
						cell.setCellStyle(style1);
					}
					//Added by DSM Reports (Sogeti) for 2022x.5 (APR CW 2024) Defect 55875 - End
				}
				//Added code for Req Id : 33634 - Hyperlinks--Ends
			}
		}
		sheetFormatter(sheetCountryClearance); // Added by DSM Reports (Sogeti) for 22x.04 (Dec CW 2023) Defect 56156 - START/END
	} catch (Exception e) {
		outLog.print("Exception in  updateWorksheetCountryClerance: " +e+"\n");
		outLog.flush();
	}
}
//Modified for requirement : 38092-ends

/**
* This method is used to get the Country Clearance data of a part
* @return MapList
* @throws Exception
*/
//Modified for requirement : 38092-starts
private MapList getCountryClearance(Context context,DomainObject dobjPart, Map mpObjectCommon, String strUserName) throws Exception{
	//Added the code for Defect 49698 - Spec Reader Access Issue - Starts
	boolean hasAccess = false;
	boolean isContextPushed = false;
	//Added the code for Defect 49698 - Spec Reader Access Issue - Ends
	MapList mlCountryClearanceAll=new MapList();
	Map mlCountryClearanceRow = null;
	StringList slBusSelect=new StringList();
	slBusSelect.addElement(DomainConstants.SELECT_ID);
	slBusSelect.addElement(DomainConstants.SELECT_TYPE);
	slBusSelect.addElement(DomainConstants.SELECT_NAME);
	StringList slRelSelect=new StringList();
	slRelSelect.add(pgV3Constants.SELECT_ATTRIBUTE_PGOVERALLCLEARANCESTATUS);
	slRelSelect.add(pgV3Constants.SELECT_ATTRIBUTE_PGPSRAAPPROVALSTATUS);
	slRelSelect.add(pgV3Constants.SELECT_ATTRIBUTE_PGCTNUMBER);
	slRelSelect.add(pgV3Constants.SELECT_ATTRIBUTE_PGPRODUCTREGULATORYCLASSIFICATION);
	slRelSelect.add(pgV3Constants.SELECT_ATTRIBUTE_PGCOUNTRYPRODUCTREGISTRATIONNUMBER);
	slRelSelect.add(pgV3Constants.SELECT_ATTRIBUTE_PGREGISTRATIONSTATUS);
	slRelSelect.add(pgV3Constants.SELECT_ATTRIBUTE_PGREGISTRATIONENDDATE);
	slRelSelect.add(pgV3Constants.SELECT_ATTRIBUTE_PGPLANTRESTRICTION);
	slRelSelect.add(pgV3Constants.SELECT_ATTRIBUTE_PGCLEARANCECOMMENT);
	slRelSelect.add(AWLUtil.strcat("attribute[", ATTRIBUTE_PG_PACKINGSITE, "]"));
	slRelSelect.add(AWLUtil.strcat("attribute[", ATTRIBUTE_PG_MANUFACTURINGSITE, "]"));
	//Added for Defect Id : 32292 - Starts
	slRelSelect.add(AWLUtil.strcat("attribute[", ATTRIBUTE_PG_REGISTRATIONRENEWALLEADTIME, "]"));
	slRelSelect.add(AWLUtil.strcat("attribute[", ATTRIBUTE_PG_REGISTRATIONRENEWALSTATUS, "]"));
	//Added for Defect Id : 32292 - Ends
	//Added for Requirement no :37824 - starts
	slRelSelect.add(AWLUtil.strcat("attribute[", pgV3Constants.ATTRIBUTE_REGISTEREDPRODUCTNAME, "]"));
	//Updated for Defect : 41465 - starts
	slRelSelect.add(AWLUtil.strcat("attribute[", PropertyUtil.getSchemaProperty(context,"attribute_pgPackSize"), "].inputvalue"));
	//Updated for Defect : 41465 - ends
	slRelSelect.add(AWLUtil.strcat("attribute[", PropertyUtil.getSchemaProperty(context,"attribute_pgBusinessChannel"), "]"));
	slRelSelect.add(AWLUtil.strcat("attribute[", PropertyUtil.getSchemaProperty(context,"attribute_pgLegalEntity"), "]"));
	slRelSelect.add(AWLUtil.strcat("attribute[", PropertyUtil.getSchemaProperty(context,"attribute_pgMarketApproverHolder"), "]"));
	//Added for Requirement no :37824 - ends
	try{
		//Added the code for Defect 49698 - Spec Reader Access Issue - Starts
		if(SPECREADER.equalsIgnoreCase(strOriginatingSource)) {
			hasAccess = accessCheck(context, strUserName, (String)dobjPart.getInfo(context, DomainConstants.SELECT_ID));
			if(hasAccess) {
				//Push Context User Agent
				ContextUtil.pushContext(context,PropertyUtil.getSchemaProperty(context,"User Agent"),DomainConstants.EMPTY_STRING,DomainConstants.EMPTY_STRING);
				isContextPushed = true;
				
			}
		}
		//Added the code for Defect 49698 - Spec Reader Access Issue - Ends
		MapList mpReturnList =  dobjPart.getRelatedObjects(
			context, //Context
			pgV3Constants.RELATIONSHIP_PGPRODUCTCOUNTRYCLEARANCE, //Relationship
			pgV3Constants.TYPE_COUNTRY, //Type
			slBusSelect, //Object Select
			slRelSelect, //Rel Select
			false, //get To
			true, //get From
			(short)1, //recurse level
			null, //object where clause
			null, //relationship where clause
			0); //limit
		if(null != mpReturnList && !mpReturnList.isEmpty()) {
			for(int i=0;i<mpReturnList.size();i++) {
				mlCountryClearanceRow = (Map)mpReturnList.get(i);
				mlCountryClearanceRow.put("CommonColumns", mpObjectCommon);
				mlCountryClearanceAll.add(mlCountryClearanceRow);
			}
		}
			
	} catch (Exception e){
			outLog.print("Exception in  getCountryClearance: " +e+"\n");
			outLog.flush();	
			//Added the code for Defect 49698 - Spec Reader Access Issue - Starts
	}finally {
		if(isContextPushed) {
			ContextUtil.popContext(context);
		}
	}
	//Added the code for Defect 49698 - Spec Reader Access Issue - Ends
	return mlCountryClearanceAll;
}
//Modified for requirement : 38092-ends
/**
* This method is used to get the Substitue For Information
* @param args
* @return Map
* @throws Exception
*/
private Map getSubstitueForInfo(Context context,DomainObject doObjSubForParts) throws Exception {
	StringList slObjInfoSelect = new StringList(10);
    slObjInfoSelect.add(DomainConstants.SELECT_ID);
    slObjInfoSelect.add(DomainConstants.SELECT_NAME);
	slObjInfoSelect.add(DomainConstants.SELECT_TYPE);
	slObjInfoSelect.add(DomainConstants.SELECT_REVISION);
	Map substitueForInfo = doObjSubForParts.getInfo(context, slObjInfoSelect);
	return substitueForInfo;
}

/**
* This method is used to get Back-End values of Current for Internal Material and Substance 
* @param String
* @return String
*/
private String getMappedState(String current) {
	String mpCurrent = DomainConstants.EMPTY_STRING;
	//22x updgrade defect 50261 - Start
	if(BusinessUtil.isNotNullOrEmpty(current)) {
		if(current.equalsIgnoreCase("Development")){
			mpCurrent = STATE_IN_WORK;
		}
		if(current.equalsIgnoreCase("Approved")){
			mpCurrent = STATE_RELEASED;
		}
		if(current.equalsIgnoreCase("Review")){
			mpCurrent = STATE_FROZEN;
		}
		if(current.equalsIgnoreCase("Obsolete")){
			mpCurrent = STATE_OBSOLETE;
		}
		if(current.equalsIgnoreCase("Active")){
			mpCurrent = STATE_ACTIVE;
		}
		if(current.equalsIgnoreCase("Released")){
			mpCurrent = STATE_RELEASED;
		}
	}
	//22x updgrade defect 50261 - End
	return mpCurrent;
}


/**
 * This API gives data Abbreviation  for Sub Types 
 * @param context
 * @param args
 * @return String
 * @throws Exception
 */

private String getSpecificationSubtypeForSAP(Context context,String[] args) throws Exception {
	String strSpecificatioSubType = DomainConstants.EMPTY_STRING;
	long startTime = System.currentTimeMillis();
	Map mapObject=(Map)JPO.unpackArgs(args);
	Map mapDataMapping = null;
	String strAttrPgAssemblyType = ""; 
	//DSO2013x.4 :- To update value of Specification Sub Type :- Start
	String strSpecSubTypeValue = DomainConstants.EMPTY_STRING;  
	String strRelPgPDTemplatestopgPLIAssemblyType = DomainConstants.EMPTY_STRING;
	String strSelect = DomainConstants.EMPTY_STRING;
	//DSO2013x.4 :- To update value of Specification Sub Type :- End
	//Added by DSM Reports (Sogeti) for 22x.04 (Dec CW 2023) Defect 56156 -- START
	StringList slSelect = new StringList();
	slSelect.add(pgV3Constants.SELECT_ATTRIBUTE_PGASSEMBLYTYPE);
	slSelect.add(pgV3Constants.SELECT_ATTRIBUTE_PGCSSTYPE);
	slSelect.add("to["+pgV3Constants.RELATIONSHIP_FORMULATIONPROPAGATE+"].from."+pgV3Constants.SELECT_ATTRIBUTE_FORMULATIONTYPE); //Added the code for 22x.06 Defect 577668- Starts/Ends
	//Added by DSM Reports (Sogeti) for 22x.04 (Dec CW 2023) Defect 56156 -- END
	String strID="";
	String strRootNode="";
	String strSpecSubType = "";
	String strType = "";
	String strAttrPgCSSType = "";
	boolean isContextPush = false;
	ContextUtil.pushContext(context, "User Agent", "", "");
	isContextPush = true;
	mapDataMapping = new HashMap();
	mapDataMapping.put("pgPackingMaterial","Packaging");
	mapDataMapping.put("Packing Material Part","Packaging");
	strID=(String)mapObject.get("dispId");	
	DomainObject dom = new DomainObject(strID);
	boolean isDSO = isOfDSOOrigin(context,strID);
	strType = (String)mapObject.get(DomainConstants.SELECT_TYPE);
	//Added by DSM Reports (Sogeti) for 22x.04 (Dec CW 2023) Defect 56156 -- START
	Map mpData = (Map) dom.getInfo(context, slSelect);
	if (pgV3Constants.TYPE_PGFINISHEDPRODUCT.equals(strType) || pgV3Constants.TYPE_PGPACKINGSUBASSEMBLY.equals(strType)) {
		strAttrPgAssemblyType = (String)mpData.get(pgV3Constants.SELECT_ATTRIBUTE_PGASSEMBLYTYPE);
	//Added by DSM Reports (Sogeti) for 22x.04 (Dec CW 2023) Defect 56156 -- END
		if("".equals(strAttrPgAssemblyType)){
			mapDataMapping.put("pgFinishedProduct","Finished Product");
			}
			else if("FWIP-Finished Work in Process".equals(strAttrPgAssemblyType)) {
				mapDataMapping.put("pgFinishedProduct","FWIP-Finished Work in Process");			
			}
			else if("Purchased Subassembly".equals(strAttrPgAssemblyType)){
				mapDataMapping.put("pgPackingSubassembly","Purchased Subassembly");
				mapDataMapping.put("Packaging Assembly Part","Purchased Subassembly");
			}
			else if("Purchased and/or Produced Subassembly".equals(strAttrPgAssemblyType)){
				mapDataMapping.put("pgPackingSubassembly","Purchased and/or Produced Subassembly");	
			} else {
				mapDataMapping.put("pgFinishedProduct",strAttrPgAssemblyType);	
			}				
	}
	//Added by DSM Reports (Sogeti) for 22x.04 (Dec CW 2023) Defect 56156 -- START
		if (pgV3Constants.TYPE_PGQUALITYSPECIFICATION.equals(strType) && !isDSO){
		strAttrPgCSSType = (String)mpData.get(pgV3Constants.SELECT_ATTRIBUTE_PGCSSTYPE);
	//Added by DSM Reports (Sogeti) for 22x.04 (Dec CW 2023) Defect 56156 -- END
		if("AMAT".equals(strAttrPgCSSType)) {
		mapDataMapping.put("pgQualitySpecification","AMAT");			
		}
		else if ("CBA".equals(strAttrPgCSSType)){
		mapDataMapping.put("pgQualitySpecification","CBA");	
		}
		else if ("GPMS".equals(strAttrPgCSSType)){
		mapDataMapping.put("pgQualitySpecification","GPMS");	
		}
		else if ("GPS".equals(strAttrPgCSSType)){
		mapDataMapping.put("pgQualitySpecification","GPS");	
		}
		else if ("IAS".equals(strAttrPgCSSType)){
		mapDataMapping.put("pgQualitySpecification","IAS");	
		}
		else if ("MOC".equals(strAttrPgCSSType)){
		mapDataMapping.put("pgQualitySpecification","MOC");	
		}
		else if ("QAC".equals(strAttrPgCSSType)){
		mapDataMapping.put("pgQualitySpecification","QAC");	
		}
		else if ("RMPI".equals(strAttrPgCSSType)){
		mapDataMapping.put("pgQualitySpecification","RMPI");	
		} else {
			mapDataMapping.put("pgQualitySpecification",strAttrPgCSSType);
		}		
	}
	if(pgV3Constants.TYPE_PGRAWMATERIAL.equals(strType)){
		if(!isDSO){
			mapDataMapping.put("pgRawMaterial","Raw");
		}
	}
	if(isDSO){
		if(pgV3Constants.TYPE_FORMULATIONPART.equals(strType)){
			//Added by DSM Reports (Sogeti) for 22x.04 (Dec CW 2023) Defect 56156 -- START
			strSpecSubTypeValue = (String)mpData.get("to["+pgV3Constants.RELATIONSHIP_FORMULATIONPROPAGATE+"].from."+pgV3Constants.SELECT_ATTRIBUTE_FORMULATIONTYPE); //Added the code for 22x.06 Defect 57768 - Starts/Ends
			//Added by DSM Reports (Sogeti) for 22x.04 (Dec CW 2023) Defect 56156 -- END
		} else {
			//Added by DSM Reports (Sogeti) for 22x.04 (Dec CW 2023) Defect 56156 -- START
			strSpecSubTypeValue =  (String)mpData.get(pgV3Constants.SELECT_ATTRIBUTE_PGASSEMBLYTYPE);
			//Added by DSM Reports (Sogeti) for 22x.04 (Dec CW 2023) Defect 56156 -- END
		}
	} else {
		strSpecSubTypeValue= "";
	}
	//Added by DSM Reports (Sogeti) for 22x.04 (Dec CW 2023) Defect 56156 -- START
	if (pgV3Constants.TYPE_PGTESTMETHOD.equals(strType)) {   
			strAttrPgCSSType = (String)mpData.get(pgV3Constants.SELECT_ATTRIBUTE_PGCSSTYPE);
	//Added by DSM Reports (Sogeti) for 22x.04 (Dec CW 2023) Defect 56156 -- END
		if ("TAMU".equals(strAttrPgCSSType)){
		mapDataMapping.put("pgTestMethod","TAMU");
		} else {
		mapDataMapping.put("pgTestMethod","");
		}
	}								
	strRootNode=(String)mapObject.get("Root Node");
	if(strRootNode==null){
		strRootNode=DomainConstants.EMPTY_STRING;
	}
	if(!"true".equalsIgnoreCase(strRootNode))
	{
		strSpecSubType = (String)mapDataMapping.get(strType);
		if(strSpecSubType != null){
			strSpecificatioSubType = strSpecSubType;
		}
		else if(UIUtil.isNotNullAndNotEmpty(strSpecSubTypeValue))
		{
			strSpecificatioSubType = strSpecSubTypeValue;			
			
		}
		//DSO2013x.4 :- To update value of Specification Sub Type :- End
		else
		{
			strSpecificatioSubType = "";
		}
	} else {
		strSpecificatioSubType = "";
	}
	long endTime = System.currentTimeMillis();
	if(isContextPush){
		ContextUtil.popContext(context);
		isContextPush = false;
	}		
	return strSpecificatioSubType;
}
/**
 * This method checks fmor the pgOriginatingSource attribute for the object
 * @param context
 * @param strObjectId
 * @return boolean
 * @throws FrameworkException
 */

private boolean isOfDSOOrigin(Context context, String strObjectId) throws FrameworkException
{
	boolean isDSO = false;
	try
	{
		if(UIUtil.isNotNullAndNotEmpty(strObjectId))
		{
			DomainObject doObject = DomainObject.newInstance(context, strObjectId);
			String strAttrValue = doObject.getInfo(context, "attribute["+ATTRIBUTE_PGORIGINATINGSOURCE+"]");
			if("DSO".equalsIgnoreCase(strAttrValue))
			{
				isDSO = true;
			}
		}
	}
	catch(FrameworkException fme){
		throw fme;
	}
	return isDSO;
}

/**
* This method is used to get the type information for Refrerence Document
* @param args
* @return String
* @throws Exception
*/
private String getRefDocTypeInfo(Context context,String strCSSTypeAttrValue) throws Exception {
	String strRefDocType =DomainConstants.EMPTY_STRING;
	if(UIUtil.isNotNullAndNotEmpty(strCSSTypeAttrValue)) {
		if(strCSSTypeAttrValue.contains(SYMBOL_UNDERSCORE)) {
			
			strRefDocType = strCSSTypeAttrValue.replace(SYMBOL_UNDERSCORE, " ");
		}else {
			strRefDocType =strCSSTypeAttrValue;
		}
		
	}
	return strRefDocType;
}

/**
* This method is used to get the Find Number Attribute of Parent Part 
* @param String
* @return String
* @throws Exception
*/

private String getSequenceNumber(Context context, String strObjectId) throws Exception{
	StringList relSelecteqNum = new StringList(PARENT_ATTR_FINDNUMBER);
	DomainObject dObj = DomainObject.newInstance(context,strObjectId);
	Map mpParentSeqNumber = dObj.getInfo(context, relSelecteqNum);
	String strSeqNum = (String)mpParentSeqNumber.get(PARENT_ATTR_FINDNUMBER);
	if(strSeqNum==null){
		strSeqNum = DomainConstants.EMPTY_STRING;
	}
	return strSeqNum;	
}

/**
 * this method is used to filter the Hir Data from BOM Data on click of Expand button
 * @param args
 * @return MapList
 * @throws Exception 
 * @throws Exception
 */
private MapList filterBOMForHirData(Context context,MapList retList,String strUserName,String strexpandProductBOM) throws Exception {
	//Updated for 2018x2 December
	//code for Defect Id:28659,29996,30016 - value displayed in family care report EBOM Weight Characteristics, Bill of Materials and W&D sheet doesn't match the value in UI-Starts 
	//Adding the code for the 2018x.6 defect 49767 -starts
	boolean isContextnotUserAgent = false;
	//Adding the code for the 2018x.6 defect 49767 -ends
		Map obj1 = null;
	MapList ebomHiRList = new MapList();
	String strType = DomainConstants.EMPTY_STRING;
	MapList finalRetList = new MapList();
	Map hIRObjectInfoMap = null;
	MapList hIRObjectInfoFinalMap = new MapList();
	boolean isAccess = false;
	Set hIRObjectInfoSet = new HashSet();
	//Added the code for 2022x-04 Dec CW Spec Reader Defect 54768  - Starts
	try {
		//Added the code for 2022x-04 Dec CW Spec Reader Defect 54768  - Ends
		for(int index=0; index < retList.size(); index++){
			//01/09/2019  - reset access boolean for each item
			isAccess = false;
			obj1 = (Map)retList.get(index);
			String strChildId = (String)obj1.get(DomainConstants.SELECT_ID);
			//Adding the code for the 2018x.6 defect 49767 -starts
			if(SPECREADER.equalsIgnoreCase(strOriginatingSource) && isEBP(context, strUserName)&&!pgV3Constants.PERSON_USER_AGENT.equals(context.getUser())) {
				isContextnotUserAgent = true;
				//Pushing the User Agent Context to prevent exception in context of logged in Spec Reader User
				ContextUtil.pushContext(context,PropertyUtil.getSchemaProperty(context,"User Agent"),DomainConstants.EMPTY_STRING,DomainConstants.EMPTY_STRING);
				
			}
			//Adding the code for the 2018x.6 defect 49767 -Ends
			DomainObject dObjChild = DomainObject.newInstance(context, strChildId);
			strType = (String)obj1.get(DomainConstants.SELECT_TYPE);
			String strName = (String)obj1.get(DomainConstants.SELECT_NAME);
			String strChildIdBOM=dObjChild.getInfo(context,"id");
			//Adding the code for the 2018x.6 defect 49767 -starts
			if(isContextnotUserAgent) {
				ContextUtil.popContext(context);
				isContextnotUserAgent = false;
			}
			//Adding the code for the 2018x.6 defect 49767 -Ends
			
			isAccess = accessCheck(context, strUserName, strChildId);
			//Added the code for 2018x Spec REader Defect 47026,47112 - Starts
			if(SPECREADER.equalsIgnoreCase(strOriginatingSource) && isEBP(context, strUserName)) {
				isAccess = true;
				ContextUtil.pushContext(context,PropertyUtil.getSchemaProperty(context,"User Agent"),DomainConstants.EMPTY_STRING,DomainConstants.EMPTY_STRING);
				//Added the code for 2022x-04 Dec CW Spec Reader Defect 54768  - Starts
				isContextnotUserAgent = true;
				//Added the code for 2022x-04 Dec CW Spec Reader Defect 54768  - Ends
			}
			//Added the code for 2018x Spec REader Defect 47026,47112 - Ends
			if (!isAccess || (dObjChild.isKindOf(context,"pgFormulatedProduct") || dObjChild.isKindOf(context,"Formulation Part") || dObjChild.isKindOf(context,"pgAssembledProductPart") || dObjChild.isKindOf(context,"pgDeviceProductPart") || dObjChild.isKindOf(context,"pgIntermediateProductPart"))){					
				//Added the code for 2018x Spec REader Defect 49811,50040 - Starts
				if(SPECREADER.equalsIgnoreCase(strOriginatingSource) && isEBP(context, strUserName)) {
					ContextUtil.popContext(context);
					//Added the code for 2022x-04 Dec CW Spec Reader Defect 54768  - Starts
					isContextnotUserAgent = false;
					//Added the code for 2022x-04 Dec CW Spec Reader Defect 54768  - Ends
				}
				//Added the code for 2018x Spec REader Defect 49811,50040 - Ends
				ContextUtil.pushContext(context,PropertyUtil.getSchemaProperty(context,"User Agent"),DomainConstants.EMPTY_STRING,DomainConstants.EMPTY_STRING);
				//Added the code for 2022x-04 Dec CW Spec Reader Defect 54768  - Starts
				isContextnotUserAgent = true;
				//Added the code for 2022x-04 Dec CW Spec Reader Defect 54768  - Ends
				hIRObjectInfoMap=(Map)dObjChild.getInfo(context,SL_OBJECT_BOM_SELECT);
				String strHirObjectId = (String)hIRObjectInfoMap.get(DomainConstants.SELECT_ID);
				hIRObjectInfoSet.add(strHirObjectId);
				//Always remove Formulation Part children
				if(!isAccess || strexpandProductBOM.equals("false") || dObjChild.isKindOf(context,"Formulation Part")){
					ebomHiRList = (MapList)dObjChild.getRelatedObjects(context,pgV3Constants.RELATIONSHIP_EBOM, pgV3Constants.TYPE_PART, SL_OBJECT_BOM_SELECT, SL_REL_BOM_SELECT, false,true, (short)0, null, null, 0);
				}
				ContextUtil.popContext(context);
				//Added the code for 2022x-04 Dec CW Spec Reader Defect 54768  - Starts
				isContextnotUserAgent = false;
				//Added the code for 2022x-04 Dec CW Spec Reader Defect 54768  - Ends
				for(int i=0;i<ebomHiRList.size();i++) {
					 Map tmp_ebomHiRMap = (Map)ebomHiRList.get(i);
					 tmp_ebomHiRMap.put("ParentId", strChildIdBOM);
					 finalRetList.add(tmp_ebomHiRMap);
				}
			}
			if(hIRObjectInfoMap != null) 
				hIRObjectInfoFinalMap.add(hIRObjectInfoMap);
			 }
			 //Loop to iterate and remove the branches from the excluded List.
			String objectId = DomainConstants.EMPTY_STRING;	
			String objectParentId = DomainConstants.EMPTY_STRING;	
			String objectIdRet =  DomainConstants.EMPTY_STRING;
			String objToBeRemovedID = DomainConstants.EMPTY_STRING;
			for(int i=0;i<finalRetList.size();i++){
				Map objFromFinalList = (Map)finalRetList.get(i);	
				if (UIUtil.isNotNullAndNotEmpty((String)objFromFinalList.get(DomainConstants.SELECT_ID))) {
					objectId = (String)objFromFinalList.get(DomainConstants.SELECT_ID);
					objectParentId = (String)objFromFinalList.get("ParentId");		
					for(int j=0;j<retList.size();j++){
						Map objFromRetList = (Map)retList.get(j);
						if (UIUtil.isNotNullAndNotEmpty((String)objFromRetList.get(DomainConstants.SELECT_ID))) {
							objectIdRet = (String)objFromRetList.get(DomainConstants.SELECT_ID);
							if (objectParentId.equals(objectIdRet)) {
								for(int k=j+1;k<retList.size();k++) {
									Map objFromRetNext = (Map)retList.get(k);
									objToBeRemovedID = (String)objFromRetNext.get(DomainConstants.SELECT_ID);					
									if(objectId.equals(objToBeRemovedID)) {
										retList.remove(k);
										break;
									}
								}
							}
						}
					}
				}
			 }
			 finalRetList.clear();
			 //Added the code for 2022x-04 Dec CW Spec Reader Defect 54768  - Starts
		} finally {
			if(isContextnotUserAgent) {
				ContextUtil.popContext(context);
			}
		}
		//Added the code for 2022x-04 Dec CW Spec Reader Defect 54768  - Ends
		 return retList;
}

/**
* This method determines if user has access to extract tab data
* @param 
* @return boolean
*/
private boolean getUserTabAccess(boolean bIsEBPUser, boolean bHasCMAccess, boolean bHasSupplierAccess, 
	String strType, String strEBPTabType_CM, String strEBPTabType_Supplier, String strNEBPTabType_NonEBP) {
	boolean hasTabAccess = false;
	
	if(!bIsEBPUser){
		if(strNEBPTabType_NonEBP.contains("~"+strType+"~")){
			hasTabAccess = true;
		}
	} else {
		if(bHasCMAccess && !bHasSupplierAccess){
			if(strEBPTabType_CM.contains("~"+strType+"~")){
				hasTabAccess = true;

			}
		} else if(bHasSupplierAccess && !bHasCMAccess){
			if(strEBPTabType_Supplier.contains("~"+strType+"~")){
				hasTabAccess = true;
			}
		} else if(bHasSupplierAccess && bHasCMAccess){
			if(strEBPTabType_CM.contains("~"+strType+"~") || strEBPTabType_Supplier.contains("~"+strType+"~")){
				hasTabAccess = true;
			}
		}
	}
	return hasTabAccess;
}

/**
* This method removed duplicates from a stringlist
* @param StringList
* @return StringList
*/
private StringList removeDuplicates(StringList slList) 
{ 
    StringList slNewList = new StringList(); 
    String tempVal = "";
	Iterator slListItr = slList.iterator();
	while(slListItr.hasNext()) 
	{
		tempVal = (String)slListItr.next();
		if(!slNewList.contains(tempVal))
		{
			slNewList.add(tempVal);
        } 
    } 
    // return the new list 
    return slNewList; 
}

/**
* This method is not being used
* @param args
* @return String
* @throws Exception
*/
/*
public String getFOPTypeDisplayName(Context context, String strType) {
	// TODO Auto-generated method stub
	String strMappedType = DomainConstants.EMPTY_STRING;
	if(strType.equalsIgnoreCase(pgV3Constants.TYPE_FORMULATIONPART)){
		strMappedType = TYPE_INTERMEDIATEFORMULA;
	}
	return strMappedType;
}
*/

/**This method is used for Hyperlink
 * @param context
 * @param cell
 * @param workbook
 * @param strValue
 * @param strId
 * @param strCurrent
 * @throws Exception
 */
//Modified the code for 22x.01 Feb CW Defect 51534 - Starts
public void getHyperlink(Context context, Cell cell, XSSFWorkbook workbook, String strValue, String strId, String strCurrent) throws Exception{  
//Modified the code for 22x.01 Feb CW Defect 51534 - Ends
	//Added for Apr22 CW requirement 41502 Starts
	String strURL = "";
	String strNewURL = "";
	boolean bFlag = true;
	//Added for Apr22 CW requirement 41502 Ends
	CreationHelper createHelper = workbook.getCreationHelper();
	 XSSFCellStyle style = workbook.createCellStyle();
	 style.setFillForegroundColor(IndexedColors.GREY_25_PERCENT.getIndex());	
	 style.setFillPattern(FillPatternType.SOLID_FOREGROUND);
	 XSSFCellStyle hlinkstyle = workbook.createCellStyle();
	 Font hlinkfont = workbook.createFont();
	 hlinkfont.setUnderline(Font.U_SINGLE);
	 hlinkfont.setColor(HSSFColor.HSSFColorPredefined.BLUE.getIndex());
	 hlinkstyle.setFont(hlinkfont);
	//Modified the code for _2022x_Aug CW Req-47097 - Start
	 if(cell.getColumnIndex()==2) {
		 style.setDataFormat(workbook.createDataFormat().getFormat(pgV3Constants.ZERO));
		 hlinkstyle.setDataFormat(workbook.createDataFormat().getFormat(pgV3Constants.ZERO));
	 }
	//Modified the code for _2022x_Aug CW Req-47097 - End
	 XSSFHyperlink link = (XSSFHyperlink)createHelper.createHyperlink(HyperlinkType.URL);
	 if(UIUtil.isNotNullAndNotEmpty(strId) && UIUtil.isNotNullAndNotEmpty(strValue)){
		//Updated for Apr22 CW requirement 41502 Ends
		 //Modified the code for 22x.01 Feb CW Defect 51534 - Starts
		 if(UIUtil.isNullOrEmpty(strOriginatingSource)){
			 strOriginatingSource="ENOVIA";
		 }
		 //Modified the code for 22x.01 Feb CW Defect 51534 - Ends
		 if(UIUtil.isNotNullAndNotEmpty(strOriginatingSource) && "ENOVIA".equalsIgnoreCase(strOriginatingSource)) {
				strURL = EnoviaResourceBundle.getProperty(context,EMXCPN, context.getLocale(), "emxCPN.BaseURL");
				strNewURL = String.valueOf(strURL).trim();
				link.setAddress(strNewURL + "?objectId=" + strId);
			} else if(UIUtil.isNotNullAndNotEmpty(strOriginatingSource) && SPECREADER.equalsIgnoreCase(strOriginatingSource)) {
				strURL = getSpecReaderURL(context);
				strNewURL = String.valueOf(strURL).trim();
				//Modified the code for Release_2022x_05 Defect#54465 - Start
				try {
					link.setAddress(strNewURL + strValue);					
				} catch(Exception e) {
					bFlag = false;
					outLog.print("Exception in getHyperlink method:"+e+"\n");
					outLog.flush();
				}
				//Modified the code for Release_2022x_05 Defect#54465 - End
			}
		 	cell.setCellValue(strValue);
		 	if(bFlag) {
				cell.setHyperlink(link);	
		 	}
			cell.setCellStyle(style);
	 } else {
		 cell.setCellValue(DomainConstants.EMPTY_STRING);
	 }
	 if(!strCurrent.equalsIgnoreCase(pgV3Constants.STATE_RELEASE) && !strCurrent.equalsIgnoreCase(pgV3Constants.STATE_RELEASED)){
		 style.setFont(hlinkfont);
		 cell.setCellStyle(style);
		} else if(bFlag){
			cell.setCellStyle(hlinkstyle);
		}
}

/**This method is used to update the worksheet for Market of Sale.
 * @param context
 * @param workbook
 * @param rowHeaderMarketOfSale
 * @param cellStyleMarketOfSale
 * @param mlMarketOfSale
 * @param sheetMarketOfSale
 * @return void
 */
private void updateWorksheetMarketOfSale(Context context, XSSFWorkbook workbook,XSSFRow rowHeaderMarketOfSale,XSSFCellStyle cellStyleMarketOfSale,MapList mlMarketOfSale,XSSFSheet sheetMarketOfSale,String strHyperlink, XSSFCellStyle styleGlobal) {
	try {
		//Added code for 2018x.6 Requirement id 36700 Ability to generate Part and Spec report with without hyperlink Starts
		String strHyperlinkLimit = EnoviaResourceBundle.getProperty(context, EMXCPNSTRINGRESOURCE, context.getLocale(),"emxCPN.PartAndSpecReport.HyperlinkLimit");
		int iHyperLinkLimit = Integer.parseInt(strHyperlinkLimit);
		int iRowCountAll=0;
		//Added code for 2018x.6 Requirement id 36700 Ability to generate Part and Spec report with without hyperlink Ends
		String sLanguage = context.getSession().getLanguage();
		String strColumnNames = EnoviaResourceBundle.getProperty(context, EMXCPNSTRINGRESOURCE, context.getLocale(),"emxCPN.FamilyCareReport.Worksheet.MarketOfSale.ColumnTypes");
		String strColumnName = DomainConstants.EMPTY_STRING;
		String strColumnValue = DomainConstants.EMPTY_STRING;
		StringList slIndividualColumnNames = FrameworkUtil.split(strColumnNames, COMMA);
		String columnName = DomainConstants.EMPTY_STRING;
		int slIndividualColumnNamesSize = slIndividualColumnNames.size();
		for (int i = 0;i<slIndividualColumnNamesSize;i++) {
			columnName = slIndividualColumnNames.get(i);
			strColumnName = String.valueOf(columnName).trim();
			strColumnValue = EnoviaResourceBundle.getProperty(context, EMXCPNSTRINGRESOURCE, context.getLocale(),"emxCPN.FamilyCareReport.Worksheet.Column."+strColumnName);
			Cell cell = rowHeaderMarketOfSale.createCell(i);
			cell.setCellStyle(cellStyleMarketOfSale);
			cell.setCellValue(strColumnValue);	
		}
		
		HashMap<Integer,Object> hm= new HashMap<>();
		int rowCount1 = 0;
		String strTypeName = DomainConstants.EMPTY_STRING;
		String strSAPTypeName = DomainConstants.EMPTY_STRING;
		String strCurrentState = DomainConstants.EMPTY_STRING;
		Map<String,Object> mp=new HashMap();
		Hashtable<String,Object> htCommonCol = new Hashtable<>();
		String strTypeDisplayName=null;
		//Added code for Req Id : 33634 - Hyperlinks--Starts
		String strValue = DomainConstants.EMPTY_STRING;
		String strParentId = DomainConstants.EMPTY_STRING;
		String strHyperlinkId = DomainConstants.EMPTY_STRING;
		String strCellValue = DomainConstants.EMPTY_STRING;
		String strCAId = DomainConstants.EMPTY_STRING;
		String strCountryId = DomainConstants.EMPTY_STRING;
		//Added code for Req Id : 33634 - Hyperlinks--Ends
		int hmSize = 0;
		int columnCount1 = 0;
		int mlMarketOfSaleSize = mlMarketOfSale.size();
		String[] strSplittedValue;
		for (int i=0;i<mlMarketOfSaleSize;i++){
			//Added code for 2018x.6 Requirement id 36700 Ability to generate Part and Spec report with without hyperlink Starts
			iRowCountAll = iRowCountAll + 1;
			//Added code for 2018x.6 Requirement id 36700 Ability to generate Part and Spec report with without hyperlink Ends
			XSSFRow row = sheetMarketOfSale.createRow(++rowCount1);
			columnCount1 = 0;
			mp = (Map)mlMarketOfSale.get(i);
			htCommonCol = (Hashtable) mp.get(COMMONCOLUMNS);
			strTypeName =(String)htCommonCol.get(DomainConstants.SELECT_TYPE);
			strCurrentState =(String)htCommonCol.get(DomainConstants.SELECT_CURRENT);
			strTypeDisplayName= getTypeDisplayName(context,strTypeName);
			strSAPTypeName= (String)mp.get(DomainConstants.SELECT_TYPE);
			//Added code for Req Id : 33634 - Hyperlinks--Starts
			strParentId = (String)htCommonCol.get(DomainConstants.SELECT_ID);
			strCAId = (String)htCommonCol.get(SCAID);
			strCountryId = (String)mp.get(DomainConstants.SELECT_ID);
			//Added code for Req Id : 33634 - Hyperlinks--Ends
			//Added by DSM Reports (Sogeti) for 2022x.5 (APR CW 2024) Defect 55875 - Start
			if(UIUtil.isNotNullAndNotEmpty(strCAId) && !strCAId.contains(HYPERLINK_PIPE)) {
				if(htCommonCol.get(CAREALIZEDNAME) != null && htCommonCol.get(CAPROPOSEDNAME) != null) {
					//Updated code for Req Id : 33634 - Hyperlinks--Starts
					hm.put(0, HYPERLINK+htCommonCol.get(CAREALIZEDNAME)+HYPERLINK_PIPE+strCAId);
					//Updated code for Req Id : 33634 - Hyperlinks--Ends
				} else if(htCommonCol.get(CAREALIZEDNAME) != null){
					//Updated code for Req Id : 33634 - Hyperlinks--Starts
					hm.put(0, HYPERLINK+htCommonCol.get(CAREALIZEDNAME)+HYPERLINK_PIPE+strCAId);
					//Updated code for Req Id : 33634 - Hyperlinks--Ends
				} else if(htCommonCol.get(CAPROPOSEDNAME) != null){
					//Updated code for Req Id : 33634 - Hyperlinks--Starts
					hm.put(0, HYPERLINK+htCommonCol.get(CAPROPOSEDNAME)+HYPERLINK_PIPE+strCAId);
					//Updated code for Req Id : 33634 - Hyperlinks--Ends
				} else {
					hm.put(0, DomainConstants.EMPTY_STRING);
				}
			}else {
				hm.put(0,htCommonCol.get(CAPROPOSEDNAME));
			}
			//Added by DSM Reports (Sogeti) for 2022x.5 (APR CW 2024) Defect 55875 - End
			
			hm.put(1, htCommonCol.get(pgV3Constants.SELECT_ATTRIBUTE_REASONFORCHANGE));
			//Updated code for Req Id : 33634 - Hyperlinks--Starts
			hm.put(2, HYPERLINK+htCommonCol.get(DomainConstants.SELECT_NAME)+HYPERLINK_PIPE+strParentId);
			//Updated code for Req Id : 33634 - Hyperlinks--Ends
			hm.put(3, htCommonCol.get(pgV3Constants.SELECT_ATTRIBUTE_TITLE));
			hm.put(4, strTypeDisplayName);
			hm.put(5, htCommonCol.get(DomainConstants.SELECT_REVISION));
			hm.put(6, strCurrentState);
			hm.put(7, htCommonCol.get("attribute["+pgV3Constants.ATTRIBUTE_PGCOSRUNDATE+"]"));
			hm.put(8, HYPERLINK+mp.get(DomainConstants.SELECT_NAME)+HYPERLINK_PIPE+strCountryId);
			hm.put(9, mp.get(ATTRIBUTE_PGCOSRESTRICTION));
			//Added the code for 22x.02 CW Requirment 46218 - Starts
			hm.put(10, mp.get(STR_PG_MOS_POA_OVERRIDE_LRR));
			hm.put(11, mp.get(STR_PG_MOS_CALCULATION_OVERRIDDEN));
			hm.put(12, mp.get(STR_PG_IS_PRODUCT_REQUIREMENT_MET));
			hm.put(13, mp.get(STR_PG_IS_ART_WITH_MARKET_REQ_MET));
			hm.put(14, mp.get(STR_PG_NON_RELEASED_ART_EXIST));
			////Added the code for 22x.02 CW Requirment 46218 - Ends
			hmSize = hm.size();
			XSSFCellStyle style = workbook.createCellStyle();
			style = setForeGroundColor(strCurrentState, style);
			//Added by DSM Reports (Sogeti) for 2022x.5 (APR CW 2024) Defect 55875 - Start
			XSSFCellStyle style1 = workbook.createCellStyle();
			//Added by DSM Reports (Sogeti) for 2022x.5 (APR CW 2024) Defect 55875 - End
			for(int j=0;j<hmSize;j++){								
				//Modified the code for _2022x_Aug CW Req-47097
				// Modified by DSM Reports (Sogeti) for 22x.03 (August CW 2023) Defect 54091 - Start
				Cell cell = row.createCell(columnCount1++);
				if (j == 2) {
					style = makeColumnNumeric(workbook, style);
				}
				cell.setCellStyle(style);
				
				// Modified by DSM Reports (Sogeti) for 22x.03 (August CW 2023) Defect 54091 - End
				//Modified the code for _2022x_Aug CW Req-47097
				//Added code for Req Id : 33634 - Hyperlinks--Starts
				strCellValue = (String)hm.get(j);
				if(UIUtil.isNotNullAndNotEmpty(strCellValue) && strCellValue.startsWith(HYPERLINK_COMPARE)){
					strSplittedValue = strCellValue.split("\\|",-1); 
					strHyperlinkId = strSplittedValue[(strSplittedValue.length)-1];
					strValue = strSplittedValue[(strSplittedValue.length)-2];
					//Added code for 2018x.6 Requirement id 36700 Ability to generate Part and Spec report with without hyperlink Starts
					if(pgV3Constants.TRUE.equalsIgnoreCase(strHyperlink) && iRowCountAll < iHyperLinkLimit){
						getHyperlink(context,cell,workbook,strValue,strHyperlinkId,strCurrentState);
					
					} else if(UIUtil.isNotNullAndNotEmpty(strValue)) {					
						cell.setCellValue(strValue);
					}
					//Added code for 2018x.6 Requirement id 36700 Ability to generate Part and Spec report with without hyperlink Ends
				} else {
					cell.setCellValue((String)hm.get(j));
					//Added by DSM Reports (Sogeti) for 2022x.5 (APR CW 2024) Defect 55875 - Start
					if(j == 0) {
						style1.cloneStyleFrom(style);
						style1.setWrapText(true);
						cell.setCellStyle(style1);
					}
					//Added by DSM Reports (Sogeti) for 2022x.5 (APR CW 2024) Defect 55875 - End
				}
				//Added code for Req Id : 33634 - Hyperlinks--Ends
			}
		}
		sheetFormatter(sheetMarketOfSale); 		// Added by DSM Reports (Sogeti) for 22x.04 (Dec CW 2023) Defect 56156 - START/END
	} catch (Exception e) {
		e.printStackTrace();
	}
}

/** This method is used to get the Market of Sale data of a part
 * @param context
 * @param dobjPart
 * @param mpObjectCommon
 * @return MapList
 * @throws FrameworkException
 */
private MapList getMarketOfSale(Context context, DomainObject dobjPart, Map<String,Object> mpObjectCommon, String strUserName) throws FrameworkException{
	//Added the code for 22x.02 CW Requirment 46218 - Starts
	String strIsProductRequirementMet ="";
	String strIsArtWithMarketRequiremntMet="";
	String strNonReleasedArtExist="";
	String strMOSCalculationOverridden="";
	String strMOSPOAOverrideLRR="";
	//Added the code for 22x.02 CW Requirment 46218 - Ends
	
	//Added the code for Defect 49698 - Spec Reader Access Issue - Starts
	boolean hasAccess = false;
	boolean isContextPushed = false;
	//Added the code for Defect 49698 - Spec Reader Access Issue - Ends
	MapList mlMarketOfSaleAll=new MapList();
	
	Map<String,Object> mpMarketOfSaleRow = null;
	StringList slBusSelect=new StringList();
	slBusSelect.addElement(DomainConstants.SELECT_ID);
	slBusSelect.addElement(DomainConstants.SELECT_TYPE);
	slBusSelect.addElement(DomainConstants.SELECT_NAME);
	//Added the code for 22x.02 CW Requirment 46218 - Starts
	StringList slObjSelect=new StringList();
	slObjSelect.add(pgV3Constants.SELECT_ATTRIBUTE_ISFCEXIST);
	slObjSelect.add(pgV3Constants.SELECT_ATTRIBUTE_ISARTEXIST);
	slObjSelect.add(pgV3Constants.SELECT_ATTRIBUTE_NON_RELEASED_ART_EXIST);
	slObjSelect.add(pgV3Constants.SELECT_ATTRIBUTE_PGHASCOSFPPOVERRIDDEN);
	//Added the code for 22x.02 CW Requirment 46218 - Ends
	
	StringList slRelSelect=new StringList();
	slRelSelect.add(ATTRIBUTE_PGCOSRESTRICTION);
	//Added the code for 22x.02 CW Requirment 46218 - Starts
	slRelSelect.add(SELECT_ATTRIBUTE_PGMOSPOAOVERRIDELRR);
	//Added the code for 22x.02 CW Requirment 46218 - Ends
	try{
		//Added the code for Defect 49698 - Spec Reader Access Issue - Starts
		if(SPECREADER.equalsIgnoreCase(strOriginatingSource)) {
			hasAccess = accessCheck(context, strUserName, (String)dobjPart.getInfo(context, DomainConstants.SELECT_ID));
			if(hasAccess) {
				//Pushing User Agent Context to get the Data if the Spec Reader User have access
				ContextUtil.pushContext(context,PropertyUtil.getSchemaProperty(context,"User Agent"),DomainConstants.EMPTY_STRING,DomainConstants.EMPTY_STRING);
				isContextPushed = true;
				
			}
		}
		
		//Added the code for 22x.02 CW Requirment 46218 - Starts
		Map mpObjinfo = dobjPart.getInfo(context,slObjSelect);
		strIsProductRequirementMet = (String)mpObjinfo.get(pgV3Constants.SELECT_ATTRIBUTE_ISFCEXIST);
		strIsArtWithMarketRequiremntMet = (String)mpObjinfo.get(pgV3Constants.SELECT_ATTRIBUTE_ISARTEXIST);
		strNonReleasedArtExist = (String)mpObjinfo.get(pgV3Constants.SELECT_ATTRIBUTE_NON_RELEASED_ART_EXIST);
		strMOSCalculationOverridden = (String)mpObjinfo.get(pgV3Constants.SELECT_ATTRIBUTE_PGHASCOSFPPOVERRIDDEN);

		if(UIUtil.isNotNullAndNotEmpty(strIsProductRequirementMet)) {
			if(strIsProductRequirementMet.equalsIgnoreCase(pgV3Constants.CAPS_TRUE)) {
				strIsProductRequirementMet=STR_YES;
			}else if(strIsProductRequirementMet.equalsIgnoreCase(pgV3Constants.FALSE)){
				strIsProductRequirementMet=STR_NO;
			}
		}else {
			strIsProductRequirementMet="";
		}
		
		if(UIUtil.isNotNullAndNotEmpty(strIsArtWithMarketRequiremntMet)) {
			if(strIsArtWithMarketRequiremntMet.equalsIgnoreCase(pgV3Constants.CAPS_TRUE)) {
				strIsArtWithMarketRequiremntMet=STR_YES;
			}else if(strIsArtWithMarketRequiremntMet.equalsIgnoreCase(pgV3Constants.FALSE)){
				strIsArtWithMarketRequiremntMet=STR_NO;
			}
		}else {
			strIsArtWithMarketRequiremntMet="";
		}
		
		if(UIUtil.isNotNullAndNotEmpty(strNonReleasedArtExist)) {
			if(strNonReleasedArtExist.equalsIgnoreCase(pgV3Constants.CAPS_TRUE)) {
				strNonReleasedArtExist=STR_YES;
			}else if(strNonReleasedArtExist.equalsIgnoreCase(pgV3Constants.FALSE)){
				strNonReleasedArtExist=STR_NO;
			}
			
		}else {
			strNonReleasedArtExist="";
		}
		
		//Added the code for 22x.02 CW Requirment 46218 - Ends
		MapList mpReturnList = dobjPart.getRelatedObjects(
				context, //Context
				pgV3Constants.RELATIONSHIP_PGCOUNTRYOFSALE, //Relationship
				pgV3Constants.TYPE_COUNTRY, //Type
				slBusSelect, //Object Select
				slRelSelect, //Rel Select
				false, //get To
				true, //get From
				(short)0, //recurse level
				null, //object where clause
				null, //relationship where clause
				0); //limit
		int mpMarketOfSaleListSize = mpReturnList.size();
		if(mpMarketOfSaleListSize>0) {
			for(int i=0;i<mpMarketOfSaleListSize;i++) {
				mpMarketOfSaleRow = (Map)mpReturnList.get(i);
				mpMarketOfSaleRow.put(COMMONCOLUMNS, mpObjectCommon);
					strMOSPOAOverrideLRR = (String)mpMarketOfSaleRow.get(SELECT_ATTRIBUTE_PGMOSPOAOVERRIDELRR);
					mpMarketOfSaleRow.put(STR_PG_IS_PRODUCT_REQUIREMENT_MET,strIsProductRequirementMet);
				mpMarketOfSaleRow.put(STR_PG_IS_ART_WITH_MARKET_REQ_MET,strIsArtWithMarketRequiremntMet);
				mpMarketOfSaleRow.put(STR_PG_NON_RELEASED_ART_EXIST,strNonReleasedArtExist);
				mpMarketOfSaleRow.put(STR_PG_MOS_CALCULATION_OVERRIDDEN,strMOSCalculationOverridden);
				mpMarketOfSaleRow.put(STR_PG_MOS_POA_OVERRIDE_LRR,strMOSPOAOverrideLRR);
				
				//Added the code for 22x.02 CW Requirment 46218 - Ends
				mlMarketOfSaleAll.add(mpMarketOfSaleRow);
				}
			}else {
				
				mpMarketOfSaleRow=new HashMap();
				mpMarketOfSaleRow.put(COMMONCOLUMNS, mpObjectCommon);
				mpMarketOfSaleRow.put(STR_PG_IS_PRODUCT_REQUIREMENT_MET,strIsProductRequirementMet);
				mpMarketOfSaleRow.put(STR_PG_IS_ART_WITH_MARKET_REQ_MET,strIsArtWithMarketRequiremntMet);
				mpMarketOfSaleRow.put(STR_PG_NON_RELEASED_ART_EXIST,strNonReleasedArtExist);
				mpMarketOfSaleRow.put(STR_PG_MOS_CALCULATION_OVERRIDDEN,strMOSCalculationOverridden);
				mpMarketOfSaleRow.put(STR_PG_MOS_POA_OVERRIDE_LRR,"");
				
				//Added the code for 22x.02 CW Requirment 46218 - Ends
				mlMarketOfSaleAll.add(mpMarketOfSaleRow);
			
			}
			
		} catch (Exception e){
			e.printStackTrace();	
			//Added the code for Defect 49698 - Spec Reader Access Issue - Starts
		}finally {
			if(isContextPushed) {
				ContextUtil.popContext(context);
			}
		}
	//Added the code for Defect 49698 - Spec Reader Access Issue - Ends
	return mlMarketOfSaleAll;
	}

/**This method is used to update the worksheet for MEP SEP Certification.
 * @param context
 * @param workbook
 * @param rowHeaderMEPSEPCertification
 * @param cellStyleMEPSEPCertification
 * @param mlMEPSEPCertification
 * @param sheetMEPSEPCertification
 */
private void updateWorksheetMEPSEPCertification(Context context, XSSFWorkbook workbook,XSSFRow rowHeaderMEPSEPCertification, XSSFCellStyle cellStyleMEPSEPCertification, MapList mlMEPSEPCertification,XSSFSheet sheetMEPSEPCertification,String strHyperlink, String strUserName, XSSFCellStyle styleGlobal) {
	try {
		//Added code for 2018x.6 Requirement id 36700 Ability to generate Part and Spec report with without hyperlink Starts
		String strHyperlinkLimit = EnoviaResourceBundle.getProperty(context, EMXCPNSTRINGRESOURCE, context.getLocale(),"emxCPN.PartAndSpecReport.HyperlinkLimit");
		int iHyperLinkLimit = Integer.parseInt(strHyperlinkLimit);
		int iRowCountAll=0;
		//Added code for 2018x.6 Requirement id 36700 Ability to generate Part and Spec report with without hyperlink Ends
		String sLanguage = context.getSession().getLanguage();
		String strColumnNames = EnoviaResourceBundle.getProperty(context, EMXCPNSTRINGRESOURCE, context.getLocale(),"emxCPN.FamilyCareReport.Worksheet.MEPSEPCertification.ColumnTypes");
		String strColumnName = DomainConstants.EMPTY_STRING;
		String strColumnValue = DomainConstants.EMPTY_STRING;
		String columnName = DomainConstants.EMPTY_STRING;
		StringList slIndividualColumnNames = FrameworkUtil.split(strColumnNames, COMMA);
		int slIndividualColumnNamesSize = slIndividualColumnNames.size();
		for (int i = 0;i<slIndividualColumnNamesSize;i++) {
			columnName = slIndividualColumnNames.get(i);
			strColumnName = String.valueOf(columnName).trim();
			strColumnValue = EnoviaResourceBundle.getProperty(context, EMXCPNSTRINGRESOURCE, context.getLocale(),"emxCPN.FamilyCareReport.Worksheet.Column."+strColumnName);
			Cell cell = rowHeaderMEPSEPCertification.createCell(i);
			cell.setCellStyle(cellStyleMEPSEPCertification);
			cell.setCellValue(strColumnValue);	
		}		
		HashMap<Integer,Object> hm= new HashMap<>();
		int rowCount1 = 0;
		String strTypeName = DomainConstants.EMPTY_STRING;
		String strCurrentState = DomainConstants.EMPTY_STRING;
		String strPartTypeName = DomainConstants.EMPTY_STRING;
		Map<String,Object> mp=new HashMap<>();
		Hashtable<String,Object> htCommonCol = new Hashtable<>();
		String strTypeDisplayName=null;
		Cell cell=null;
		//Added code for Req Id : 33634 - Hyperlinks--Starts
		String strValue = DomainConstants.EMPTY_STRING;
		String strParentId = DomainConstants.EMPTY_STRING;
		String strHyperlinkId = DomainConstants.EMPTY_STRING;
		String strCellValue = DomainConstants.EMPTY_STRING;
		String strCAId = DomainConstants.EMPTY_STRING;
		String strCertiId = DomainConstants.EMPTY_STRING;
		String strPartId = DomainConstants.EMPTY_STRING;
		//Added code for Req Id : 33634 - Hyperlinks--Ends
		int hmSize = 0;
		int columnCount1 = 0;
		int mlMEPSEPCertificationSize = mlMEPSEPCertification.size();
		// Added by DSM Reports (Sogeti) for 22x.03 (May CW 2023) Defect 49842 - Start
		boolean bHasAccess=false;
		// Added by DSM Reports (Sogeti) for 22x.03 (May CW 2023) Defect 49842 - End
		String[] strSplittedValue;
		for (int i=0;i<mlMEPSEPCertificationSize;i++){
			//Added code for 2018x.6 Requirement id 36700 Ability to generate Part and Spec report with without hyperlink Starts
			iRowCountAll = iRowCountAll + 1;
			//Added code for 2018x.6 Requirement id 36700 Ability to generate Part and Spec report with without hyperlink Ends
			XSSFRow row = sheetMEPSEPCertification.createRow(++rowCount1);
			columnCount1 = 0;
			mp = (Map)mlMEPSEPCertification.get(i);
			htCommonCol = (Hashtable) mp.get(COMMONCOLUMNS);
			strTypeName =(String)htCommonCol.get(DomainConstants.SELECT_TYPE);
			strCurrentState =(String)htCommonCol.get(DomainConstants.SELECT_CURRENT);
			strTypeDisplayName= getTypeDisplayName(context,strTypeName);
			//Added code for Req Id : 33634 - Hyperlinks--Starts
			strParentId = (String)htCommonCol.get(DomainConstants.SELECT_ID);
			strCAId = (String)htCommonCol.get(SCAID);
			strCertiId = (String)mp.get(CERTIFICATION_ID);
			strPartId = (String)mp.get(DomainConstants.SELECT_ID);
			//Added code for Req Id : 33634 - Hyperlinks--Ends
			//Added by DSM Reports (Sogeti) for 2022x.5 (APR CW 2024) Defect 55875 - Start
			if(UIUtil.isNotNullAndNotEmpty(strCAId) && !strCAId.contains(HYPERLINK_PIPE)) {
				if(htCommonCol.get(CAREALIZEDNAME) != null && htCommonCol.get(CAPROPOSEDNAME) != null) {
					//Updated code for Req Id : 33634 - Hyperlinks--Starts
					hm.put(0, HYPERLINK+htCommonCol.get(CAREALIZEDNAME)+HYPERLINK_PIPE+strCAId);
					//Updated code for Req Id : 33634 - Hyperlinks--Ends
				} else if(htCommonCol.get(CAREALIZEDNAME) != null){
					//Updated code for Req Id : 33634 - Hyperlinks--Starts
					hm.put(0, HYPERLINK+htCommonCol.get(CAREALIZEDNAME)+HYPERLINK_PIPE+strCAId);
					//Updated code for Req Id : 33634 - Hyperlinks--Ends
				} else if(htCommonCol.get(CAPROPOSEDNAME) != null){
					//Updated code for Req Id : 33634 - Hyperlinks--Starts
					hm.put(0, HYPERLINK+htCommonCol.get(CAPROPOSEDNAME)+HYPERLINK_PIPE+strCAId);
					//Updated code for Req Id : 33634 - Hyperlinks--Ends
				} else {
					hm.put(0, DomainConstants.EMPTY_STRING);
				}
			}else {
				hm.put(0,htCommonCol.get(CAPROPOSEDNAME));
			}
			//Added by DSM Reports (Sogeti) for 2022x.5 (APR CW 2024) Defect 55875 - End
			// Added by DSM Reports (Sogeti) for 22x.03 (May CW 2023) Defect 49842 - Start
			if(UIUtil.isNotNullAndNotEmpty(strPartId))
			{
				bHasAccess=accessCheck(context, strUserName, strPartId);
			}
			// Added by DSM Reports (Sogeti) for 22x.03 (May CW 2023) Defect 49842 - End
			hm.put(1, htCommonCol.get(pgV3Constants.SELECT_ATTRIBUTE_REASONFORCHANGE));
			//Updated code for Req Id : 33634 - Hyperlinks--Starts
			hm.put(2, HYPERLINK+htCommonCol.get(DomainConstants.SELECT_NAME)+HYPERLINK_PIPE+strParentId);
			//Updated code for Req Id : 33634 - Hyperlinks--Ends
			hm.put(3, htCommonCol.get(pgV3Constants.SELECT_ATTRIBUTE_TITLE));
			hm.put(4, strTypeDisplayName);
			hm.put(5, htCommonCol.get(DomainConstants.SELECT_REVISION));
			hm.put(6, strCurrentState);
			hm.put(7, HYPERLINK+mp.get(DomainConstants.SELECT_NAME)+HYPERLINK_PIPE+strPartId);
			hm.put(8, mp.get(DomainConstants.SELECT_REVISION));
			hm.put(9, mp.get(DomainConstants.SELECT_TYPE));
			// Added by DSM Reports (Sogeti) for 22x.03 (May CW 2023) Defect 49842 - Start
			if(bHasAccess){
				hm.put(10, mp.get(DomainConstants.SELECT_CURRENT));
				//Added code for 2018x.6 Requirement 38063 Replace attribute Description with Title for MEP/SEP part in MEP/SEP certification tab Starts
				hm.put(11, mp.get(DomainConstants.SELECT_ATTRIBUTE_TITLE));
				//Added code for 2018x.6 Requirement 38063 Replace attribute Description with Title for MEP/SEP part in MEP/SEP certification tab Ends
				hm.put(12, HYPERLINK+mp.get(CERTIFICATION_NAME)+HYPERLINK_PIPE+strCertiId);
				hm.put(13, mp.get(CERTIFICATION_STATUS));
				hm.put(14, getExprDateUIformat(mp.get(CERTIFICATION_EXPDATE).toString()));
			}else {
				hm.put(10, NO_ACCESS);
				// Added by DSM Reports (Sogeti) for 22x.03 (August CW 2023) Defect 49842 - Start
				hm.put(11, NO_ACCESS);	
				//Added by DSM Reports (Sogeti) for 2022x.4 (DEC CW 2023) Defect 55205 - Start
				hm.put(12, NO_ACCESS);
				//Added by DSM Reports (Sogeti) for 2022x.4 (DEC CW 2023) Defect 55205 - end
				// Added by DSM Reports (Sogeti) for 22x.03 (August CW 2023) Defect 49842 - End
				hm.put(13, CONST_DENIED);
				hm.put(14, DomainConstants.EMPTY_STRING);
			}
			// Added by DSM Reports (Sogeti) for 22x.03 (May CW 2023) Defect 49842 - End
			hmSize = hm.size();
			XSSFCellStyle style = workbook.createCellStyle();
			style = setForeGroundColor(strCurrentState, style);
			//Added by DSM Reports (Sogeti) for 2022x.5 (APR CW 2024) Defect 55875 - Start
			XSSFCellStyle style1 = workbook.createCellStyle();
			//Added by DSM Reports (Sogeti) for 2022x.5 (APR CW 2024) Defect 55875 - End
			for(int j=0;j<hmSize;j++){								
				//Modified the code for _2022x_Aug CW Req-47097
				// Modified by DSM Reports (Sogeti) for 22x.03 (August CW 2023) Defect 54091 - Start
				cell = row.createCell(columnCount1++);
				if (j == 2) {
					style = makeColumnNumeric(workbook, style);
				}
				cell.setCellStyle(style);
				
				// Modified by DSM Reports (Sogeti) for 22x.03 (August CW 2023) Defect 54091 - End
				//Modified the code for _2022x_Aug CW Req-47097
				//Added code for Req Id : 33634 - Hyperlinks--Starts
				strCellValue = (String)hm.get(j);
				if(UIUtil.isNotNullAndNotEmpty(strCellValue) && strCellValue.startsWith(HYPERLINK_COMPARE)){
					strSplittedValue = strCellValue.split("\\|",-1); 
					strHyperlinkId = strSplittedValue[(strSplittedValue.length)-1];
					strValue = strSplittedValue[(strSplittedValue.length)-2];
					//Added code for 2018x.6 Requirement id 36700 Ability to generate Part and Spec report with without hyperlink Starts
					if(pgV3Constants.TRUE.equalsIgnoreCase(strHyperlink) && iRowCountAll < iHyperLinkLimit){
						getHyperlink(context,cell,workbook,strValue,strHyperlinkId,strCurrentState);
					
					} else if(UIUtil.isNotNullAndNotEmpty(strValue)) {					
						cell.setCellValue(strValue);
					}
					//Added code for 2018x.6 Requirement id 36700 Ability to generate Part and Spec report with without hyperlink Starts
				}else {
					cell.setCellValue((String)hm.get(j));
					//Added by DSM Reports (Sogeti) for 2022x.5 (APR CW 2024) Defect 55875 - Start
					if(j == 0) {
						style1.cloneStyleFrom(style);
						style1.setWrapText(true);
						cell.setCellStyle(style1);
					}
					//Added by DSM Reports (Sogeti) for 2022x.5 (APR CW 2024) Defect 55875 - End
				}
				//Added code for Req Id : 33634 - Hyperlinks--Ends
			}
		}
		sheetFormatter(sheetMEPSEPCertification); 		// Added by DSM Reports (Sogeti) for 22x.04 (Dec CW 2023) Defect 56156 - START/END
	} catch (Exception e) {
		e.printStackTrace();
	}
	
}

/**This method is used to get the MEP SEP Certification data of a part
 * @param context
 * @param dobjPart
 * @param mpObjectCommon
 * @return
 * @throws FrameworkException 
 */
//Added by DRA (Sogeti) for 22x.04 (December CW 2023) Defect 55205  - Starts
private MapList getMEPSEPCertification(Context context, DomainObject dobjPart, Map<String,Object> mpObjectCommon, String strPolicy, String strUserName) throws FrameworkException {
	//Added by DRA (Sogeti) for 22x.04 (December CW 2023) Defect 55205  - Ends	
	MapList mlMEPSEPCertiAll=new MapList();
		Map<String,Object> mpMEPSEPCertiRow = null;
		StringBuilder slRelPattern = new StringBuilder(pgV3Constants.RELATIONSHIP_MANUFACTUREREQUIVALENT);
		slRelPattern.append(",");
		slRelPattern.append(pgV3Constants.RELATIONSHIP_SUPPLIEREQUIVALENT);
		StringList slBusSelect=new StringList();
		slBusSelect.addElement(DomainConstants.SELECT_ID);
		slBusSelect.addElement(DomainConstants.SELECT_TYPE);
		slBusSelect.addElement(DomainConstants.SELECT_NAME);
		slBusSelect.addElement(DomainConstants.SELECT_REVISION);
		slBusSelect.addElement(DomainConstants.SELECT_CURRENT);
		//Added code for 2018x.6 Requirement 38063 Replace attribute Description with Title for MEP/SEP part in MEP/SEP certification tab Starts
		slBusSelect.addElement(DomainConstants.SELECT_ATTRIBUTE_TITLE);
		//Added code for 2018x.6 Requirement 38063 Replace attribute Description with Title for MEP/SEP part in MEP/SEP certification tab Ends

		StringList slRelSelect = new StringList();
		slRelSelect.addElement(CERTIFICATION_NAME);
		slRelSelect.addElement(CERTIFICATION_ID);
		slRelSelect.addElement(CERTIFICATION_STATUS);
		slRelSelect.addElement(CERTIFICATION_EXPDATE);
		//Modified the code for 2018x.6 APR CW Defect 47053,47037,47013,47011 - starts
		slRelSelect.addElement(PG_PMP_CERTIFICATION_NAME);
		slRelSelect.addElement(PG_PMP_CERTIFICATION_SUPPORTDOC);
		slRelSelect.addElement(PG_PMP_CERTIFICATION_EXPDATE);
		////Modified the code for 2018x.6 APR CW Defect 47053,47037,47013,47011 - Ends
		String strWhereExp = "(current!="+pgV3Constants.STATE_OBSOLETE+")";
		StringList slMEPSEPCertiName = new StringList();
		StringList slMEPSEPCertiId = new StringList();
		StringList slMEPSEPCertiStatus = new StringList();
		StringList slMEPSEPCertiDate = new StringList();
		Object strCertiId = null;
		//Added code for Requirement 37983,38062 Add  Certification Section to the Part Component Equivalents tab Starts
		boolean bToDir = false;
		boolean bFromDir = true;
		  if(UIUtil.isNotNullAndNotEmpty(strPolicy) && (pgV3Constants.POLICY_MANUFACTUREREQUIVALENT.equals(strPolicy) || pgV3Constants.POLICY_SUPPLIEREQUIVALENT.equals(strPolicy))){
			  bToDir = true;
			  bFromDir = false;
		  }
		//Added code for Requirement 37983,38062 Add certification section to the Part Component Equivalents tab Ends
		try{
			//Modified the code for 2018x.6 Apr CW Defect 47011 - Starts
			//Pushing the User Agent Context to get Connected Certifications(Support Docs) irrespective of Logged in User
			ContextUtil.pushContext(context,PropertyUtil.getSchemaProperty(context,pgV3Constants.PERSON_USER_AGENT),DomainConstants.EMPTY_STRING,DomainConstants.EMPTY_STRING);
			//Modified the code for 2018x.6 Apr CW Defect 47011 - Ends
			MapList mpReturnList = dobjPart.getRelatedObjects(
					context, //Context
					slRelPattern.toString(), //Relationship
					DomainConstants.TYPE_PART, //Type
					slBusSelect, //Object Select
					slRelSelect, //Rel Select
					bToDir, //get To
					bFromDir, //get From
					(short)1, //recurse level
					strWhereExp, //object where clause
					null, //relationship where clause
					0); //limit
			int mpMEPSEPCertiSize = mpReturnList.size();
			if(mpMEPSEPCertiSize>0) {
				Map<String,Object> mpMEPSEPCertiNew = null;
				int slMEPSEPCertiNameSize=0;
				for(int i=0;i<mpMEPSEPCertiSize;i++) {
					mpMEPSEPCertiRow = (Map)mpReturnList.get(i);
					strCertiId = mpMEPSEPCertiRow.get(CERTIFICATION_ID);
					//Added by DRA (Sogeti) for 22x.04 (December CW 2023) Defect 55205  - Starts
					mpMEPSEPCertiRow.put("strUserName", strUserName);
					//Added by DRA (Sogeti) for 22x.04 (December CW 2023) Defect 55205  - Ends
					//Added for Apr22 CW requirement 42014 Starts
					if(!pgV3Constants.POLICY_MANUFACTUREREQUIVALENT.equals(strPolicy) && !pgV3Constants.POLICY_SUPPLIEREQUIVALENT.equals(strPolicy)){
						mlMEPSEPCertiAll = getMEPSEPCertiForCompEquvi(context,mpMEPSEPCertiRow,mlMEPSEPCertiAll);
					 }
					//Added for Apr22 CW requirement 42014 Ends
					else {
					if(mpMEPSEPCertiRow.get(CERTIFICATION_NAME) instanceof StringList){
						slMEPSEPCertiName = (StringList) mpMEPSEPCertiRow.get(CERTIFICATION_NAME);
						slMEPSEPCertiId = (StringList)mpMEPSEPCertiRow.get(CERTIFICATION_ID);
						slMEPSEPCertiStatus = (StringList)mpMEPSEPCertiRow.get(CERTIFICATION_STATUS);
						slMEPSEPCertiDate = (StringList)mpMEPSEPCertiRow.get(CERTIFICATION_EXPDATE);
						slMEPSEPCertiNameSize = slMEPSEPCertiName.size();
						for(int j=0;j<slMEPSEPCertiNameSize;j++){
							mpMEPSEPCertiNew = new HashMap<>();
							mpMEPSEPCertiNew.put(CERTIFICATION_NAME, slMEPSEPCertiName.get(j));
							mpMEPSEPCertiNew.put(CERTIFICATION_ID, slMEPSEPCertiId.get(j));
							mpMEPSEPCertiNew.put(CERTIFICATION_STATUS, slMEPSEPCertiStatus.get(j));
							mpMEPSEPCertiNew.put(CERTIFICATION_EXPDATE, slMEPSEPCertiDate.get(j));
							mpMEPSEPCertiNew.put(DomainConstants.SELECT_NAME, mpMEPSEPCertiRow.get(DomainConstants.SELECT_NAME));
							mpMEPSEPCertiNew.put(DomainConstants.SELECT_TYPE, mpMEPSEPCertiRow.get(DomainConstants.SELECT_TYPE));
							mpMEPSEPCertiNew.put(DomainConstants.SELECT_ID, mpMEPSEPCertiRow.get(DomainConstants.SELECT_ID));
							mpMEPSEPCertiNew.put(DomainConstants.SELECT_CURRENT, mpMEPSEPCertiRow.get(DomainConstants.SELECT_CURRENT));
							mpMEPSEPCertiNew.put(DomainConstants.SELECT_REVISION, mpMEPSEPCertiRow.get(DomainConstants.SELECT_REVISION));
							mpMEPSEPCertiNew.put(DomainConstants.SELECT_DESCRIPTION, mpMEPSEPCertiRow.get(DomainConstants.SELECT_DESCRIPTION));
							// Added by DSM Reports (Sogeti) for 22x.03 (May CW 2023) Defect 49842 - Start
							mpMEPSEPCertiNew.put(DomainConstants.SELECT_ATTRIBUTE_TITLE, mpMEPSEPCertiRow.get(DomainConstants.SELECT_ATTRIBUTE_TITLE));
							// Added by DSM Reports (Sogeti) for 22x.03 (May CW 2023) Defect 49842 - End
							mpMEPSEPCertiNew.put("relationship", mpMEPSEPCertiRow.get("relationship"));
							mpMEPSEPCertiNew.put(COMMONCOLUMNS, mpObjectCommon);
							mlMEPSEPCertiAll.add(mpMEPSEPCertiNew);
						}
					}
					else if(strCertiId!=null){
						mpMEPSEPCertiRow.put(COMMONCOLUMNS, mpObjectCommon);
						mlMEPSEPCertiAll.add(mpMEPSEPCertiRow);
						}
					}
					}
				}
				
			} catch (Exception e){
				e.printStackTrace();	 
			}
		//Modified the code for 2018x.6 Apr CW Defect 47011 - Starts
		finally {
			ContextUtil.popContext(context);		
		}
		//Modified the code for 2018x.6 Apr CW Defect 47011 - Ends
		return mlMEPSEPCertiAll;
	}


/**This method is used to update the worksheet for Part Certification.
 * @param context
 * @param workbook
 * @param rowHeaderPartCertification
 * @param cellStylePartCertification
 * @param mlPartCerti
 * @param sheetPartCertification
 */
private void updateWorksheetPartCertification(Context context, XSSFWorkbook workbook,XSSFRow rowHeaderPartCertification, XSSFCellStyle cellStylePartCertification, MapList mlPartCerti,XSSFSheet sheetPartCertification,String strHyperlink, XSSFCellStyle styleGlobal) {
	try {
		//Added code for 2018x.6 Requirement id 36700 Ability to generate Part and Spec report with without hyperlink Starts
		String strHyperlinkLimit = EnoviaResourceBundle.getProperty(context, EMXCPNSTRINGRESOURCE, context.getLocale(),"emxCPN.PartAndSpecReport.HyperlinkLimit");
		int iHyperLinkLimit = Integer.parseInt(strHyperlinkLimit);
		int iRowCountAll=0;
		//Added code for 2018x.6 Requirement id 36700 Ability to generate Part and Spec report with without hyperlink Ends
		String sLanguage = context.getSession().getLanguage();
		String strColumnNames = EnoviaResourceBundle.getProperty(context, EMXCPNSTRINGRESOURCE, context.getLocale(),"emxCPN.FamilyCareReport.Worksheet.PartCertification.ColumnTypes");
		String strColumnName = DomainConstants.EMPTY_STRING;
		String strColumnValue = DomainConstants.EMPTY_STRING;
		String columnName = DomainConstants.EMPTY_STRING;
		//Added for Req 41655:18x6 Apr CW -- Starts
		String	strRelationship = "relationship";
		//Added for Req 41655:18x6 Apr CW -- Ends
		StringList slIndividualColumnNames = FrameworkUtil.split(strColumnNames, COMMA);
		int slIndividualColumnNamesSize = slIndividualColumnNames.size();
		for (int i = 0;i<slIndividualColumnNames.size();i++) {
			columnName = slIndividualColumnNames.get(i);
			strColumnName = String.valueOf(columnName).trim();
			strColumnValue = EnoviaResourceBundle.getProperty(context, EMXCPNSTRINGRESOURCE, context.getLocale(),"emxCPN.FamilyCareReport.Worksheet.Column."+strColumnName);
			Cell cell = rowHeaderPartCertification.createCell(i);
			cell.setCellStyle(cellStylePartCertification);
			cell.setCellValue(strColumnValue);	
		}
		HashMap<Integer,Object> hm= new HashMap<>();
		int rowCount1 = 0;
		String strTypeName = DomainConstants.EMPTY_STRING;
		String strCurrentState = DomainConstants.EMPTY_STRING;
		String strPartTypeName = DomainConstants.EMPTY_STRING;
		/*XSSFCellStyle style = workbook.createCellStyle();
		style.setFillForegroundColor(IndexedColors.GREY_25_PERCENT.getIndex());	
		style.setFillPattern(FillPatternType.SOLID_FOREGROUND);*/
		
		Map<String,Object> mp=new HashMap<>();
		Hashtable htCommonCol = new Hashtable<>();
		String strTypeDisplayName=null;
		String strPartTypeDisplayName=DomainConstants.EMPTY_STRING;
		Cell cell=null;
		//Added code for Req Id : 33634 - Hyperlinks--Starts
		String strValue = DomainConstants.EMPTY_STRING;
		String strParentId = DomainConstants.EMPTY_STRING;
		String strHyperlinkId = DomainConstants.EMPTY_STRING;
		String strCellValue = DomainConstants.EMPTY_STRING;
		String strCAId = DomainConstants.EMPTY_STRING;
		String strCertiId = DomainConstants.EMPTY_STRING;
		//Added code for Req Id : 33634 - Hyperlinks--Ends
		int hmSize = 0;
		int columnCount1 = 0;
		int mlPartCertiSize = mlPartCerti.size();
		String[] strSplittedValue;
		for (int i=0;i<mlPartCertiSize;i++){
			//Added code for 2018x.6 Requirement id 36700 Ability to generate Part and Spec report with without hyperlink Starts
			iRowCountAll = iRowCountAll + 1;
			//Added code for 2018x.6 Requirement id 36700 Ability to generate Part and Spec report with without hyperlink Ends
			XSSFRow row = sheetPartCertification.createRow(++rowCount1);
			columnCount1 = 0;
			mp = (Map)mlPartCerti.get(i);
			htCommonCol = (Hashtable) mp.get(COMMONCOLUMNS);
			strTypeName =(String)htCommonCol.get(DomainConstants.SELECT_TYPE);
			strCurrentState =(String)htCommonCol.get(DomainConstants.SELECT_CURRENT);
			strTypeDisplayName= getTypeDisplayName(context,strTypeName);
			//Added code for Req Id : 33634 - Hyperlinks--Starts
			strParentId = (String)htCommonCol.get(DomainConstants.SELECT_ID);
			strCAId = (String)htCommonCol.get(SCAID);
			strCertiId = (String)mp.get(DomainConstants.SELECT_ID);
			//Added code for Req Id : 33634 - Hyperlinks--Ends
			//Added by DSM Reports (Sogeti) for 2022x.5 (APR CW 2024) Defect 55875 - Start
			if(UIUtil.isNotNullAndNotEmpty(strCAId) && !strCAId.contains(HYPERLINK_PIPE)) {
				if(htCommonCol.get(CAREALIZEDNAME) != null && htCommonCol.get(CAPROPOSEDNAME) != null) {
					//Updated code for Req Id : 33634 - Hyperlinks--Starts
					hm.put(0, HYPERLINK+htCommonCol.get(CAREALIZEDNAME)+HYPERLINK_PIPE+strCAId);
					//Updated code for Req Id : 33634 - Hyperlinks--Ends
				} else if(htCommonCol.get(CAREALIZEDNAME) != null){
					//Updated code for Req Id : 33634 - Hyperlinks--Starts
					hm.put(0, HYPERLINK+htCommonCol.get(CAREALIZEDNAME)+HYPERLINK_PIPE+strCAId);
					//Updated code for Req Id : 33634 - Hyperlinks--Ends
				} else if(htCommonCol.get(CAPROPOSEDNAME) != null){
					//Updated code for Req Id : 33634 - Hyperlinks--Starts
					hm.put(0, HYPERLINK+htCommonCol.get(CAPROPOSEDNAME)+HYPERLINK_PIPE+strCAId);
					//Updated code for Req Id : 33634 - Hyperlinks--Ends
				} else {
					hm.put(0, DomainConstants.EMPTY_STRING);
				}
			}else {
				hm.put(0,htCommonCol.get(CAPROPOSEDNAME));
			}
			//Added by DSM Reports (Sogeti) for 2022x.5 (APR CW 2024) Defect 55875 - End
			
			hm.put(1, htCommonCol.get(pgV3Constants.SELECT_ATTRIBUTE_REASONFORCHANGE));
			//Updated code for Req Id : 33634 - Hyperlinks--Starts
			hm.put(2, HYPERLINK+htCommonCol.get(DomainConstants.SELECT_NAME)+HYPERLINK_PIPE+strParentId);
			//Updated code for Req Id : 33634 - Hyperlinks--Ends
			hm.put(3, htCommonCol.get(pgV3Constants.SELECT_ATTRIBUTE_TITLE));
			hm.put(4, strTypeDisplayName);
			hm.put(5, htCommonCol.get(pgV3Constants.SELECT_REVISION));
			hm.put(6, strCurrentState);
			hm.put(7, HYPERLINK+mp.get(PRODUCT_NAME)+HYPERLINK_PIPE+mp.get(PRODUCT_ID));
			//Modified for Req 41655:18x6 Apr CW -- Starts
			if(UIUtil.isNotNullAndNotEmpty((String)mp.get(strRelationship)) && RELATIONSHIP_PG_PLIPACKAGINGCERTIFICATIONS.equalsIgnoreCase((String)mp.get(strRelationship)) || (UIUtil.isNullOrEmpty((String)mp.get(DomainConstants.SELECT_NAME)) && (UIUtil.isNullOrEmpty(strCertiId)))) {
				hm.put(8, "");
			}else {
				hm.put(8, HYPERLINK+mp.get(DomainConstants.SELECT_NAME)+HYPERLINK_PIPE+strCertiId);
			}
			//Modified for Req 41655:18x6 Apr CW -- Ends
			hm.put(9, mp.get(MARKET_NAME));
			//Added for Req 41655:18x6 Apr CW -- Starts
			hm.put(10,mp.get("Certification_Name"));
			hm.put(11,mp.get("Certification_Status"));
			hm.put(12,mp.get("Certification_ExpDate"));
			
			//Modified for Apr22 CW Defect 46599-starts
			hm.put(13,mp.get("Certification_IntendedCerti"));
			//Modified for Apr22 CW Defect 46599-Ends
			//Added for Req 41655:18x6 Apr CW -- Ends
			
			hmSize = hm.size();	
			XSSFCellStyle style = workbook.createCellStyle();
			style = setForeGroundColor(strCurrentState, style);
			//Added by DSM Reports (Sogeti) for 2022x.5 (APR CW 2024) Defect 55875 - Start
			XSSFCellStyle style1 = workbook.createCellStyle();
			//Added by DSM Reports (Sogeti) for 2022x.5 (APR CW 2024) Defect 55875 - End
			for(int j=0;j<hmSize;j++){								
				//Modified the code for _2022x_Aug CW Req-47097
				// Modified by DSM Reports (Sogeti) for 22x.03 (August CW 2023) Defect 54091 - Start
				cell = row.createCell(columnCount1++);
				if (j == 2) {
					style = makeColumnNumeric(workbook, style);
				}
				cell.setCellStyle(style);
				
				// Modified by DSM Reports (Sogeti) for 22x.03 (August CW 2023) Defect 54091 - End
				//Modified the code for _2022x_Aug CW Req-47097
				//Added code for Req Id : 33634 - Hyperlinks--Starts
				strCellValue = (String)hm.get(j);
				if(UIUtil.isNotNullAndNotEmpty(strCellValue) && strCellValue.startsWith(HYPERLINK_COMPARE)){
					strSplittedValue = strCellValue.split("\\|",-1); 
					strHyperlinkId = strSplittedValue[(strSplittedValue.length)-1];
					strValue = strSplittedValue[(strSplittedValue.length)-2];
					//Added code for 2018x.6 Requirement id 36700 Ability to generate Part and Spec report with without hyperlink Starts
					if(pgV3Constants.TRUE.equalsIgnoreCase(strHyperlink) && iRowCountAll < iHyperLinkLimit){
						getHyperlink(context,cell,workbook,strValue,strHyperlinkId,strCurrentState);
					} else {					
						cell.setCellValue(strValue);
					}
					//Added code for 2018x.6 Requirement id 36700 Ability to generate Part and Spec report with without hyperlink Starts
				} else {
					cell.setCellValue((String)hm.get(j));
					//Added by DSM Reports (Sogeti) for 2022x.5 (APR CW 2024) Defect 55875 - Start
					if(j == 0) {
						style1.cloneStyleFrom(style);
						style1.setWrapText(true);
						cell.setCellStyle(style1);
					}
					//Added by DSM Reports (Sogeti) for 2022x.5 (APR CW 2024) Defect 55875 - End
				}
				//Added code for Req Id : 33634 - Hyperlinks--Ends
			}
		}
		sheetFormatter(sheetPartCertification); 		// Added by DSM Reports (Sogeti) for 22x.04 (Dec CW 2023) Defect 56156 - START/END
	} catch (Exception e) {
		e.printStackTrace();
	}
}

/**This method is used to get the Part Certification data of the Part
 * @param context
 * @param dobjPart
 * @param mpProductData
 * @param mpCommonColumnsDetail
 * @return MapList
 */
private MapList getPartCertification(Context context, DomainObject dobjPart, Map mpProductData, Map mpCommonColumnsDetail, String strUserName) {
	MapList mlPartCertiAll=new MapList();
	Map<String,Object> mpPartCertiRow = null;
	int slIntendedCertificationSize;
	StringList slIntendedCertificationList;
	Map<String,Object> mpPackagingPartCertiNew = null;
	//Added the code for Defect 49698 - Spec Reader Access Issue - Starts
	boolean hasAccess = false;
	boolean isContextPushed = false;
	//Added the code for Defect 49698 - Spec Reader Access Issue - Ends
	
		try{
			//Added the code for Defect 49698 - Spec Reader Access Issue - Starts
			if(SPECREADER.equalsIgnoreCase(strOriginatingSource)) {
				hasAccess = accessCheck(context, strUserName, (String)dobjPart.getInfo(context, DomainConstants.SELECT_ID));
				if(hasAccess) {
					//Push Context User Agent
					ContextUtil.pushContext(context,PropertyUtil.getSchemaProperty(context,"User Agent"),DomainConstants.EMPTY_STRING,DomainConstants.EMPTY_STRING);
					isContextPushed = true;
					
				}
			}
			//Added the code for Defect 49698 - Spec Reader Access Issue - Ends
			//Added for 2018x.6 Apr CW Requirement 41655 - Starts
			String strType = dobjPart.getInfo(context, DomainConstants.SELECT_TYPE);
			
			if(strPartCertTypes.contains("~"+strType+"~")) {
				mlPartCertiAll = getProductPartCertification(context, dobjPart, mpCommonColumnsDetail);
			
		} else if(strPackagingPartCertTypes.contains("~"+strType+"~")) {
			mlPartCertiAll = getPackagingCertificationList(context, dobjPart,mpCommonColumnsDetail);
		}
		else if (strRawMaterialCertTypes.contains("~"+strType+"~")) {
			mlPartCertiAll = getRawMaterialCertificationList(context, dobjPart,mpCommonColumnsDetail);
		}
	}catch (Exception e){
		outLog.print("Exception in getPartCertification method:"+e+"\n");
		outLog.flush();
		//Added the code for Defect 49698 - Spec Reader Access Issue - Starts
	}finally {
		try {
			if(isContextPushed) {
				ContextUtil.popContext(context);
			}	
		}catch(Exception e) {
			outLog.print("Exception while popping the context in getPartCertification Method"+e+"\n");
			outLog.flush();
		}
		
	}
		//Added the code for Defect 49698 - Spec Reader Access Issue - Ends
	return mlPartCertiAll;
}



private MapList getProductPartCertification(Context context, DomainObject dobjPart, Map mpCommonColumnsDetail) throws FrameworkException {
	
	//Modified for 2018x.6 APR CW Defect 46676 - starts
	String strngMarket="";
	//Modified for 2018x.6 APR CW Defect 46676 - Ends
	MapList mlPartCertiAll=new MapList();
	Map<String,Object> mpPartCertiRow = null;
	StringList strMarket = new StringList();
	
	StringList slBusSelect=new StringList();
	slBusSelect.addElement(DomainConstants.SELECT_ID);
	slBusSelect.addElement(DomainConstants.SELECT_NAME);
	StringList slRelSelect = new StringList();
	slRelSelect.addElement(MARKET_NAME);
	slRelSelect.addElement(MARKET_ID);
	slRelSelect.add(pgV3Constants.SELECT_ATTRIBUTE_PGPRODUCTPARTPHYSICALID);
	StringBuilder sbRelPattern = new StringBuilder(pgV3Constants.RELATIONSHIP_PG_PLI_MATERIAL_CERTIFICATIONS);
	
	try {
		//Added for 2018x.6 Apr CW Requirement 41655 - Ends			
		MapList mpReturnList = dobjPart.getRelatedObjects(
		context, //Context
		sbRelPattern.toString(), //Relationship
		pgV3Constants.TYPE_PGPLIMATERIALCERTIFICATIONS, //Type
		slBusSelect, //Object Select
		slRelSelect, //Rel Select
		false, //get To
		true, //get From
		(short)1, //recurse level
		null, //object where clause
		null, //relationship where clause
		0); //limit

		int mpPartCertiSize = mpReturnList.size();
		if(mpPartCertiSize>0) {
			for(int i=0;i<mpPartCertiSize;i++) {
			mpPartCertiRow = (Map)mpReturnList.get(i);
			mpPartCertiRow.put(PRODUCT_NAME, "");
			mpPartCertiRow.put(PRODUCT_ID, "");
			mpPartCertiRow.put(SELECT_ATTRIBUTE_PG_INTENDEDCERTIFICATIONS, "");
			mpPartCertiRow.put(EXPRDATE, "");
			mpPartCertiRow.put(PG_PACKAGING_SUPPORTDOCUMENT, "");
			mpPartCertiRow.put(RM_CERTIFICATION_STATUS, "");
			mpPartCertiRow.put(RM_CERTIFICATION_NAME, "");
			mpPartCertiRow.put("relationship", mpPartCertiRow.get("relationship"));
			//Modified for 2018x.6 APR CW Defect 46676 - starts
			//Displaying the connected Markets in the single row instead of new row
			mpPartCertiRow.put(MARKET_ID, "");
			if(null != mpPartCertiRow.get(MARKET_NAME)) {
				if(mpPartCertiRow.get(MARKET_NAME) instanceof StringList){
					strMarket = (StringList)mpPartCertiRow.get(MARKET_NAME);
					strngMarket = strMarket.toString().replace("[", "").replace("]", "");
					mpPartCertiRow.put(MARKET_NAME, strngMarket);
				}else {
					mpPartCertiRow.put(MARKET_NAME, mpPartCertiRow.get(MARKET_NAME));
				}
			}else {
				mpPartCertiRow.put(MARKET_NAME, "");
			}
			//Modified for 2018x.6 APR CW Defect 46676 - Ends
			mpPartCertiRow.put(COMMONCOLUMNS, mpCommonColumnsDetail);
			mlPartCertiAll.add(mpPartCertiRow);
		}
	}	

} catch (Exception e){
	outLog.write("Exception in getProductPartCertification method:"+e); 
}
return mlPartCertiAll;
}

/**This method is used to get the Part Certification data of FPP
 * @param context
 * @param dobjPart
 * @param strType
 * @param mpCommonColumnsDetail
 * @return
 */
private MapList getPartCertificationFPP(Context context, DomainObject dobjPart, String strType, Map mpCommonColumnsDetail, String strUserName) {
	//Added the code for Defect 49698 - Spec Reader Access Issue - Starts
	boolean hasAccess = false;
	boolean isContextPushed = false;
	//Added the code for Defect 49698 - Spec Reader Access Issue - Ends
	MapList mlPartCertiAll=new MapList();
	StringList slBusSelect=new StringList();
	slBusSelect.addElement(DomainConstants.SELECT_ID);
	slBusSelect.addElement(DomainConstants.SELECT_TYPE);
	slBusSelect.addElement(DomainConstants.SELECT_NAME);
	StringList slRelSelect = new StringList();
	slRelSelect.add(pgV3Constants.SELECT_ATTRIBUTE_PGPRODUCTPARTPHYSICALID);
	slRelSelect.add(COUNTRY_NAME);
	slRelSelect.add(COUNTRY_ID);
	Map<String,Object> mpPartCertiRow = null;
	String strPartPhysicalId = DomainConstants.EMPTY_STRING;
	String strProductName = DomainConstants.EMPTY_STRING;
	String strProductId = DomainConstants.EMPTY_STRING;
	DomainObject dob = null;
	StringList strMarket = new StringList();
	//Modified for 2018x.6 APR CW Defect 46676 - starts
	String strngMarket="";
	//Modified for 2018x.6 APR CW Defect 46676 - Ends
	
	Map<String,Object> mpProductPartInfo = new HashMap<>();
	StringList slProductPart = new StringList();
	slProductPart.add(DomainConstants.SELECT_NAME);
	slProductPart.add(DomainConstants.SELECT_ID);
	try{
		//Added the code for Defect 49698 - Spec Reader Access Issue - Starts
		if(SPECREADER.equalsIgnoreCase(strOriginatingSource)) {
			hasAccess = accessCheck(context, strUserName, (String)dobjPart.getInfo(context, DomainConstants.SELECT_ID));
			if(hasAccess) {
				//Push Context User Agent
				ContextUtil.pushContext(context,PropertyUtil.getSchemaProperty(context,"User Agent"),DomainConstants.EMPTY_STRING,DomainConstants.EMPTY_STRING);
				isContextPushed = true;
				
			}
		}
		//Added the code for Defect 49698 - Spec Reader Access Issue - Ends
		MapList mpReturnList = dobjPart.getRelatedObjects(
				context, //Context
				pgV3Constants.RELATIONSHIP_PGROLLEDUPMATERIALCERTIFICATION, //Relationship
				pgV3Constants.TYPE_PGPLIMATERIALCERTIFICATIONS, //Type
				slBusSelect, //Object Select
				slRelSelect, //Rel Select
				false, //get To
				true, //get From
				(short)0, //recurse level
				null, //object where clause
				null, //relationship where clause
				0); //limit
		int mpPartCertiSize = mpReturnList.size();
		if(mpPartCertiSize>0) {
			for(int i=0;i<mpPartCertiSize;i++) {
				mpPartCertiRow = (Map)mpReturnList.get(i);
				strPartPhysicalId = (String)mpPartCertiRow.get(pgV3Constants.SELECT_ATTRIBUTE_PGPRODUCTPARTPHYSICALID);
				dob = DomainObject.newInstance(context, strPartPhysicalId);
				mpProductPartInfo = dob.getInfo(context, slProductPart);
				strProductName = (String)mpProductPartInfo.get(DomainConstants.SELECT_NAME);
				strProductId = (String)mpProductPartInfo.get(DomainConstants.SELECT_ID);
				mpPartCertiRow.put(PRODUCT_NAME, strProductName);
				mpPartCertiRow.put(PRODUCT_ID, strProductId);
				//Modified for 2018x.6 APR CW Defect 46676 - starts
				//Displaying the connected Markets in the single row instead of new row
				mpPartCertiRow.put(MARKET_ID, "");
				if(null != mpPartCertiRow.get(COUNTRY_NAME)) {
					if(mpPartCertiRow.get(COUNTRY_NAME) instanceof StringList){
						strMarket = (StringList)mpPartCertiRow.get(COUNTRY_NAME);
						strngMarket = strMarket.toString().replace("[", "").replace("]", "");
						mpPartCertiRow.put(MARKET_NAME, strngMarket);
					}else{
						mpPartCertiRow.put(MARKET_NAME, mpPartCertiRow.get(COUNTRY_NAME));
					}
				}else {
					mpPartCertiRow.put(MARKET_NAME, "");
				}
				//Modified for 2018x.6 APR CW Defect 46676 - Ends
					mpPartCertiRow.put(COMMONCOLUMNS, mpCommonColumnsDetail);
					mlPartCertiAll.add(mpPartCertiRow);
				
			}
		}	
		} catch (Exception e){
			e.printStackTrace();	 
			//Added the code for Defect 49698 - Spec Reader Access Issue - Starts
		}finally {
			try {
				if(isContextPushed) {
					ContextUtil.popContext(context);
				}
			}catch(Exception e) {
				outLog.print("Exception in getPartCertificationFPP Method "+e+"\n");
				outLog.flush();
			}
		
		}
	//Added the code for Defect 49698 - Spec Reader Access Issue - Ends
	return mlPartCertiAll;
	}

/**This method is used to set Certification data in maplist
 * @param mpPartCertiRow
 * @param strMarket
 * @param strMarketId
 * @param mpCommonColumnsDetail
 * @param mlPartCertiAll
 */
private void setPartCertificationData(Map<String,Object> mpPartCertiRow, StringList strMarket, StringList strMarketId, Map<String,Object> mpCommonColumnsDetail, MapList mlPartCertiAll){
	int strMarketSize= strMarket.size();
	Map<String,Object> mpCertiNew = null;
	for(int j=0;j<strMarketSize;j++){
		mpCertiNew = new HashMap<>();
		mpCertiNew.put(MARKET_NAME, strMarket.get(j));
		mpCertiNew.put(MARKET_ID, strMarketId.get(j));
		mpCertiNew.put(PRODUCT_NAME, mpPartCertiRow.get(PRODUCT_NAME));
		mpCertiNew.put(PRODUCT_ID, mpPartCertiRow.get(PRODUCT_ID));
		mpCertiNew.put(DomainConstants.SELECT_NAME, mpPartCertiRow.get(DomainConstants.SELECT_NAME));
		mpCertiNew.put(DomainConstants.SELECT_TYPE, mpPartCertiRow.get(DomainConstants.SELECT_TYPE));
		mpCertiNew.put(DomainConstants.SELECT_ID, mpPartCertiRow.get(DomainConstants.SELECT_ID));
		mpCertiNew.put(DomainConstants.SELECT_LEVEL, mpPartCertiRow.get(DomainConstants.SELECT_LEVEL));
		//Added for 2018x.6 Apr CW Requirement 41655 - Starts
		mpCertiNew.put("Certification_Name", "");
		mpCertiNew.put("Certification_ExpDate", "");
		mpCertiNew.put("Certification_Status", "");
		mpCertiNew.put("Certification_IntendedCerti", "");
		//Added for 2018x.6 Apr CW Requirement 41655 - Ends
		mpCertiNew.put("relationship", mpPartCertiRow.get("relationship"));
		mpCertiNew.put(COMMONCOLUMNS, mpCommonColumnsDetail);
		mlPartCertiAll.add(mpCertiNew);
	}
}

/**This method is used to update the worksheet for Part Certification.
 * @param context
 * @param workbook
 * @param rowHeaderAlternate
 * @param cellStyleAlternate
 * @param mlAlternate
 * @param sheetAlternate
 */
private void updateWorksheetAlternate(Context context, XSSFWorkbook workbook,XSSFRow rowHeaderAlternate, XSSFCellStyle cellStyleAlternate, MapList mlAlternate, XSSFSheet sheetAlternate,String strHyperlink, XSSFCellStyle styleGlobal) {
	try {
		//Added code for 2018x.6 Requirement id 36700 Ability to generate Part and Spec report with without hyperlink Starts
		String strHyperlinkLimit = EnoviaResourceBundle.getProperty(context, EMXCPNSTRINGRESOURCE, context.getLocale(),"emxCPN.PartAndSpecReport.HyperlinkLimit");
		int iHyperLinkLimit = Integer.parseInt(strHyperlinkLimit);
		int iRowCountAll=0;
		//Added code for 2018x.6 Requirement id 36700 Ability to generate Part and Spec report with without hyperlink Ends
		String sLanguage = context.getSession().getLanguage();
		String strColumnNames = EnoviaResourceBundle.getProperty(context, EMXCPNSTRINGRESOURCE, context.getLocale(),"emxCPN.FamilyCareReport.Worksheet.Alternate.ColumnTypes");
		String strColumnName = DomainConstants.EMPTY_STRING;
		String strColumnValue = DomainConstants.EMPTY_STRING;
		String columnName = DomainConstants.EMPTY_STRING;
		StringList slIndividualColumnNames = FrameworkUtil.split(strColumnNames, COMMA);
		//Modified the code for _2022x_Aug CW Req-47097 :: START
		cellStyleAlternate.setDataFormat(workbook.createDataFormat().getFormat("0"));	
		//Modified the code for _2022x_Aug CW Req-47097 :: END
		int slIndividualColumnNamesSize = slIndividualColumnNames.size();
		for (int i = 0;i<slIndividualColumnNamesSize;i++) {
			columnName = slIndividualColumnNames.get(i);
			strColumnName = String.valueOf(columnName).trim();
			strColumnValue = EnoviaResourceBundle.getProperty(context, EMXCPNSTRINGRESOURCE, context.getLocale(),"emxCPN.FamilyCareReport.Worksheet.Column."+strColumnName);
			Cell cell = rowHeaderAlternate.createCell(i);
			cell.setCellStyle(cellStyleAlternate);
			//Added for Defect:44470 - Removing trailing Spaces - Starts
			cell.setCellValue(strColumnValue.trim());
			//Added for Defect:44470 - Removing trailing Spaces - Ends
		}
				
		HashMap<Integer,Object> hm= new HashMap<>();
		int rowCount1 = 0;
		String strTypeName = DomainConstants.EMPTY_STRING;
		String strCurrentState = DomainConstants.EMPTY_STRING;
		Map<String,Object> mp=new HashMap<>();
		Hashtable htCommonCol = new Hashtable<>();
		String strTypeDisplayName=null;
		//Added code for Req Id : 33634 - Hyperlinks--Starts
		String strValue = DomainConstants.EMPTY_STRING;
		String strParentId = DomainConstants.EMPTY_STRING;
		String strHyperlinkId = DomainConstants.EMPTY_STRING;
		String strCellValue = DomainConstants.EMPTY_STRING;
		String strCAId = DomainConstants.EMPTY_STRING;
		String strAlternateId = DomainConstants.EMPTY_STRING;
		String strMEPSEPId = DomainConstants.EMPTY_STRING;
		//Added code for Req Id : 33634 - Hyperlinks--Ends
		Cell cell=null;
		int columnCount1 = 0;
		Map<String,Object> mpPlant = null;
		int mlAlternateSize = mlAlternate.size();
		int hmSize = 0;
		String[] strSplittedValue;
		for (int i=0;i<mlAlternateSize;i++){
			//Added code for 2018x.6 Requirement id 36700 Ability to generate Part and Spec report with without hyperlink Starts
			iRowCountAll = iRowCountAll + 1;
			//Added code for 2018x.6 Requirement id 36700 Ability to generate Part and Spec report with without hyperlink Ends
			XSSFRow row = sheetAlternate.createRow(++rowCount1);
			columnCount1 = 0;
			hmSize = 0;
			mp = (Map)mlAlternate.get(i);
			htCommonCol = (Hashtable) mp.get(COMMONCOLUMNS);
			strTypeName =(String)htCommonCol.get(DomainConstants.SELECT_TYPE);
			strCurrentState =(String)htCommonCol.get(DomainConstants.SELECT_CURRENT);
			strTypeDisplayName= getTypeDisplayName(context,strTypeName);
			//Added code for Req Id : 33634 - Hyperlinks--Starts
			strParentId = (String)htCommonCol.get(DomainConstants.SELECT_ID);
			strCAId = (String)htCommonCol.get(SCAID);
			//Added code for Req Id : 33634 - Hyperlinks--Ends
			if(mp.containsKey(INPUTPLANT)){
				mpPlant = (Map)mp.get(INPUTPLANT);
				//Added by DSM Reports (Sogeti) for 2022x.5 (APR CW 2024) Defect 55875 - Start
				if(UIUtil.isNotNullAndNotEmpty(strCAId) && !strCAId.contains(HYPERLINK_PIPE)) {
					if(htCommonCol.get(CAREALIZEDNAME) != null && htCommonCol.get(CAPROPOSEDNAME) != null) {
						//Updated code for Req Id : 33634 - Hyperlinks--Starts
						hm.put(0, HYPERLINK+htCommonCol.get(CAREALIZEDNAME)+HYPERLINK_PIPE+strCAId);
						//Updated code for Req Id : 33634 - Hyperlinks--Ends
					} else if(htCommonCol.get(CAREALIZEDNAME) != null){
						//Updated code for Req Id : 33634 - Hyperlinks--Starts
						hm.put(0, HYPERLINK+htCommonCol.get(CAREALIZEDNAME)+HYPERLINK_PIPE+strCAId);
						//Updated code for Req Id : 33634 - Hyperlinks--Ends
					} else if(htCommonCol.get(CAPROPOSEDNAME) != null){
						//Updated code for Req Id : 33634 - Hyperlinks--Starts
						hm.put(0, HYPERLINK+htCommonCol.get(CAPROPOSEDNAME)+HYPERLINK_PIPE+strCAId);
						//Updated code for Req Id : 33634 - Hyperlinks--Ends
					} else {
						hm.put(0, DomainConstants.EMPTY_STRING);
					}
				} else {
					hm.put(0,htCommonCol.get(CAPROPOSEDNAME));
				}
				//Added by DSM Reports (Sogeti) for 2022x.5 (APR CW 2024) Defect 55875 - End
				hm.put(1, htCommonCol.get(pgV3Constants.SELECT_ATTRIBUTE_REASONFORCHANGE));
				//Updated code for Req Id : 33634 - Hyperlinks--Starts
				hm.put(2, HYPERLINK+htCommonCol.get(DomainConstants.SELECT_NAME)+HYPERLINK_PIPE+strParentId);
				//Updated code for Req Id : 33634 - Hyperlinks--Ends
				hm.put(3, htCommonCol.get(DomainConstants.SELECT_ATTRIBUTE_TITLE));
				hm.put(4, strTypeDisplayName);
				hm.put(5, htCommonCol.get(DomainConstants.SELECT_REVISION));
				hm.put(6, strCurrentState);
				hm.put(7, htCommonCol.get(pgV3Constants.SELECT_ATTRIBUTE_PGASSEMBLYTYPE));
				hm.put(8, htCommonCol.get(pgV3Constants.SELECT_ATTRIBUTE_RELEASE_DATE));
				hm.put(9, htCommonCol.get(pgV3Constants.SELECT_ATTRIBUTE_EXPIRATION_DATE));
				hm.put(10, htCommonCol.get(ORGANIZATION));
				hm.put(11, DomainConstants.EMPTY_STRING);
				hm.put(12, DomainConstants.EMPTY_STRING);
				hm.put(13, DomainConstants.EMPTY_STRING);
				hm.put(14, DomainConstants.EMPTY_STRING);
				hm.put(15, DomainConstants.EMPTY_STRING);
				hm.put(16, DomainConstants.EMPTY_STRING);
				hm.put(17, DomainConstants.EMPTY_STRING);
				hm.put(18, DomainConstants.EMPTY_STRING);
				hm.put(19, mpPlant.get(PLANTNAME));
				if(UIUtil.isNotNullAndNotEmpty((String)mpPlant.get(ISAUTHORIZEDVIEW))){
					if(((String) mpPlant.get(ISAUTHORIZEDVIEW)).equalsIgnoreCase("TRUE"))
						hm.put(20, "Yes");
					else
						hm.put(20, "No");
				}
				if(UIUtil.isNotNullAndNotEmpty((String)mpPlant.get(ISAUTHORIZEDUSE))){
					if(((String) mpPlant.get(ISAUTHORIZEDUSE)).equalsIgnoreCase("TRUE"))
						hm.put(21, "Yes");
					else
						hm.put(21, "No");
				}
				if(UIUtil.isNotNullAndNotEmpty((String)mpPlant.get(ISAUTHORIZEDPRODUCE))){
					if(((String) mpPlant.get(ISAUTHORIZEDPRODUCE)).equalsIgnoreCase("TRUE"))
						hm.put(22, "Yes");
					else
						hm.put(22, "No");
				}
				if(UIUtil.isNotNullAndNotEmpty((String)mpPlant.get(ISACTIVATED))){
					if(((String) mpPlant.get(ISACTIVATED)).equalsIgnoreCase("TRUE"))
						hm.put(23, "Yes");
					else
						hm.put(23, "No");
				}
				hm.put(24, DomainConstants.EMPTY_STRING);
				hm.put(25, DomainConstants.EMPTY_STRING);
				hm.put(26, DomainConstants.EMPTY_STRING);
				hmSize = hm.size();	
				XSSFCellStyle style = workbook.createCellStyle();
				style = setForeGroundColor(strCurrentState, style);
				//Added by DSM Reports (Sogeti) for 2022x.5 (APR CW 2024) Defect 55875 - Start
				XSSFCellStyle style1 = workbook.createCellStyle();
				//Added by DSM Reports (Sogeti) for 2022x.5 (APR CW 2024) Defect 55875 - End
				for(int j=0;j<hmSize;j++){	
					//Modified the code for _2022x_Aug CW Req-47097 :: Start
					// Modified by DSM Reports (Sogeti) for 22x.03 (August CW 2023) Defect 54091 - Start
					cell = row.createCell(columnCount1++);
					if (j == 2) {
						style = makeColumnNumeric(workbook, style);
					}
					cell.setCellStyle(style);
					
					// Modified by DSM Reports (Sogeti) for 22x.03 (August CW 2023) Defect 54091 - End
					//Modified the code for _2022x_Aug CW Req-47097 :: End
					//Added code for Req Id : 33634 - Hyperlinks--Starts
					
					//Modified the code for _2022x_Aug CW Req-53807 :: START
					strCellValue = (String)hm.get(j);
					//Modified the code for _2022x_Aug CW Req-53807 :: END
					if(UIUtil.isNotNullAndNotEmpty(strCellValue) && strCellValue.startsWith(HYPERLINK_COMPARE)){
						strSplittedValue = strCellValue.split("\\|",-1); 
						strHyperlinkId = strSplittedValue[(strSplittedValue.length)-1];
						strValue = strSplittedValue[(strSplittedValue.length)-2];
						//Added code for 2018x.6 Requirement id 36700 Ability to generate Part and Spec report with without hyperlink Starts
						if(pgV3Constants.TRUE.equalsIgnoreCase(strHyperlink) && iRowCountAll < iHyperLinkLimit){
							getHyperlink(context,cell,workbook,strValue,strHyperlinkId,strCurrentState);
						
						} else if(UIUtil.isNotNullAndNotEmpty(strValue)) {					
							cell.setCellValue(strValue);
						}
						//Added code for 2018x.6 Requirement id 36700 Ability to generate Part and Spec report with without hyperlink Ends
					}else {
						cell.setCellValue(strCellValue);
						//Added by DSM Reports (Sogeti) for 2022x.5 (APR CW 2024) Defect 55875 - Start
						if(j == 0) {
							style1.cloneStyleFrom(style);
							style1.setWrapText(true);
							cell.setCellStyle(style1);
						}
						//Added by DSM Reports (Sogeti) for 2022x.5 (APR CW 2024) Defect 55875 - End
					}
					//Added code for Req Id : 33634 - Hyperlinks--Ends
				}
			}
			if(mp.containsKey(INPUTMEPSEP)){
				
				mpPlant = (Map)mp.get(INPUTMEPSEP);
				strMEPSEPId = (String)mpPlant.get(DomainConstants.SELECT_ID);
				//Added by DSM Reports (Sogeti) for 2022x.5 (APR CW 2024) Defect 55875 - Start
				if(UIUtil.isNotNullAndNotEmpty(strCAId) && !strCAId.contains(HYPERLINK_PIPE)) {
					if(htCommonCol.get(CAREALIZEDNAME) != null && htCommonCol.get(CAPROPOSEDNAME) != null) {
						//Updated code for Req Id : 33634 - Hyperlinks--Starts
						hm.put(0, HYPERLINK+htCommonCol.get(CAREALIZEDNAME)+HYPERLINK_PIPE+strCAId);
						//Updated code for Req Id : 33634 - Hyperlinks--Ends
					} else if(htCommonCol.get(CAREALIZEDNAME) != null){
						//Updated code for Req Id : 33634 - Hyperlinks--Starts
						hm.put(0, HYPERLINK+htCommonCol.get(CAREALIZEDNAME)+HYPERLINK_PIPE+strCAId);
						//Updated code for Req Id : 33634 - Hyperlinks--Ends
					} else if(htCommonCol.get(CAPROPOSEDNAME) != null){
						//Updated code for Req Id : 33634 - Hyperlinks--Starts
						hm.put(0, HYPERLINK+htCommonCol.get(CAPROPOSEDNAME)+HYPERLINK_PIPE+strCAId);
						//Updated code for Req Id : 33634 - Hyperlinks--Ends
					} else {
						hm.put(0, DomainConstants.EMPTY_STRING);
					}
				}else{
					hm.put(0,htCommonCol.get(CAPROPOSEDNAME));
				}
				//Added by DSM Reports (Sogeti) for 2022x.5 (APR CW 2024) Defect 55875 - End
			hm.put(1, htCommonCol.get(pgV3Constants.SELECT_ATTRIBUTE_REASONFORCHANGE));
			//Updated code for Req Id : 33634 - Hyperlinks--Starts
			hm.put(2, HYPERLINK+htCommonCol.get(DomainConstants.SELECT_NAME)+HYPERLINK_PIPE+strParentId);
			//Updated code for Req Id : 33634 - Hyperlinks--Ends
			hm.put(3, htCommonCol.get(pgV3Constants.SELECT_ATTRIBUTE_TITLE));
			hm.put(4, strTypeDisplayName);
			hm.put(5, htCommonCol.get(DomainConstants.SELECT_REVISION));
			hm.put(6, strCurrentState);
			hm.put(7, htCommonCol.get(pgV3Constants.SELECT_ATTRIBUTE_PGASSEMBLYTYPE));
			hm.put(8, htCommonCol.get(pgV3Constants.SELECT_ATTRIBUTE_RELEASE_DATE));
			hm.put(9, htCommonCol.get(pgV3Constants.SELECT_ATTRIBUTE_EXPIRATION_DATE));
			hm.put(10, htCommonCol.get(ORGANIZATION));
			hm.put(11, DomainConstants.EMPTY_STRING);
			hm.put(12, DomainConstants.EMPTY_STRING);
			hm.put(13, DomainConstants.EMPTY_STRING);
			hm.put(14, DomainConstants.EMPTY_STRING);
			hm.put(15, DomainConstants.EMPTY_STRING);
			hm.put(16, DomainConstants.EMPTY_STRING);
			hm.put(17, DomainConstants.EMPTY_STRING);
			hm.put(18, DomainConstants.EMPTY_STRING);
			hm.put(19, DomainConstants.EMPTY_STRING);
			hm.put(20, DomainConstants.EMPTY_STRING);
			hm.put(21, DomainConstants.EMPTY_STRING);
			hm.put(22, DomainConstants.EMPTY_STRING);
			hm.put(23, DomainConstants.EMPTY_STRING);
			hm.put(24, HYPERLINK+mpPlant.get(DomainConstants.SELECT_NAME)+HYPERLINK_PIPE+strMEPSEPId);
			hm.put(25, mpPlant.get(VENDORNAME));
			hm.put(26, mpPlant.get(VENDORCODE));
			hmSize = hm.size();
			XSSFCellStyle style = workbook.createCellStyle();
			style = setForeGroundColor(strCurrentState, style);
			//Added by DSM Reports (Sogeti) for 2022x.5 (APR CW 2024) Defect 55875 - Start
			XSSFCellStyle style1 = workbook.createCellStyle();
			//Added by DSM Reports (Sogeti) for 2022x.5 (APR CW 2024) Defect 55875 - End
			for(int j=0;j<hmSize;j++){								
				//Modified the code for _2022x_Aug CW Req-47097 :: Start
				// Modified by DSM Reports (Sogeti) for 22x.03 (August CW 2023) Defect 54091 - Start
				cell = row.createCell(columnCount1++);
				if (j == 2) {
					style = makeColumnNumeric(workbook, style);
				}
				cell.setCellStyle(style);
				
				// Modified by DSM Reports (Sogeti) for 22x.03 (August CW 2023) Defect 54091 - End
				//Modified the code for _2022x_Aug CW Req-47097 :: End
				//Added code for Req Id : 33634 - Hyperlinks--Starts
				strCellValue = (String)hm.get(j);
				if(UIUtil.isNotNullAndNotEmpty(strCellValue) && strCellValue.startsWith(HYPERLINK_COMPARE)){
					strSplittedValue = strCellValue.split("\\|",-1); 
					strHyperlinkId = strSplittedValue[(strSplittedValue.length)-1];
					strValue = strSplittedValue[(strSplittedValue.length)-2];
					if(pgV3Constants.TRUE.equalsIgnoreCase(strHyperlink) && iRowCountAll < iHyperLinkLimit){
						getHyperlink(context,cell,workbook,strValue,strHyperlinkId,strCurrentState);
					
					} else if(UIUtil.isNotNullAndNotEmpty(strValue)){
						cell.setCellValue(strValue);
					}
				}else {
					cell.setCellValue(strCellValue);							
					//Added by DSM Reports (Sogeti) for 2022x.5 (APR CW 2024) Defect 55875 - Start
					if(j == 0) {
						style1.cloneStyleFrom(style);
						style1.setWrapText(true);
						cell.setCellStyle(style1);
					}
					//Added by DSM Reports (Sogeti) for 2022x.5 (APR CW 2024) Defect 55875 - End
				}
				//Added code for Req Id : 33634 - Hyperlinks--Ends
			}
			}
			if(mp.containsKey(ALPLANT)){
				mpPlant = (Map)mp.get(ALPLANT);
				strAlternateId = (String)mpPlant.get("alId");
				
				//Added by DSM Reports (Sogeti) for 2022x.5 (APR CW 2024) Defect 55875 - Start
				if(UIUtil.isNotNullAndNotEmpty(strCAId) && !strCAId.contains(HYPERLINK_PIPE)) {
					if(htCommonCol.get(CAREALIZEDNAME) != null && htCommonCol.get(CAPROPOSEDNAME) != null) {
						//Updated code for Req Id : 33634 - Hyperlinks--Starts
						hm.put(0, HYPERLINK+htCommonCol.get(CAREALIZEDNAME)+HYPERLINK_PIPE+strCAId);
						//Updated code for Req Id : 33634 - Hyperlinks--Ends
					} else if(htCommonCol.get(CAREALIZEDNAME) != null){
						//Updated code for Req Id : 33634 - Hyperlinks--Starts
						hm.put(0, HYPERLINK+htCommonCol.get(CAREALIZEDNAME)+HYPERLINK_PIPE+strCAId);
						//Updated code for Req Id : 33634 - Hyperlinks--Ends
					} else if(htCommonCol.get(CAPROPOSEDNAME) != null){
						//Updated code for Req Id : 33634 - Hyperlinks--Starts
						hm.put(0, HYPERLINK+htCommonCol.get(CAPROPOSEDNAME)+HYPERLINK_PIPE+strCAId);
						//Updated code for Req Id : 33634 - Hyperlinks--Ends
					} else {
						hm.put(0, DomainConstants.EMPTY_STRING);
					}
				}else{
					hm.put(0,htCommonCol.get(CAPROPOSEDNAME));
				}
				//Added by DSM Reports (Sogeti) for 2022x.5 (APR CW 2024) Defect 55875 - End
			hm.put(1, htCommonCol.get(pgV3Constants.SELECT_ATTRIBUTE_REASONFORCHANGE));
			//Updated code for Req Id : 33634 - Hyperlinks--Starts
			hm.put(2, HYPERLINK+htCommonCol.get(pgV3Constants.SELECT_NAME)+HYPERLINK_PIPE+strParentId);
			//Updated code for Req Id : 33634 - Hyperlinks--Ends
			hm.put(3, htCommonCol.get(pgV3Constants.SELECT_ATTRIBUTE_TITLE));
			hm.put(4, strTypeDisplayName);
			hm.put(5, htCommonCol.get(DomainConstants.SELECT_REVISION));
			hm.put(6, strCurrentState);
			hm.put(7, htCommonCol.get(pgV3Constants.SELECT_ATTRIBUTE_PGASSEMBLYTYPE));
			hm.put(8, htCommonCol.get(pgV3Constants.SELECT_ATTRIBUTE_RELEASE_DATE));
			hm.put(9, htCommonCol.get(pgV3Constants.SELECT_ATTRIBUTE_EXPIRATION_DATE));
			hm.put(10, htCommonCol.get(ORGANIZATION));
			hm.put(11, HYPERLINK+mpPlant.get(ALNAME)+HYPERLINK_PIPE+strAlternateId);
			hm.put(12, mpPlant.get(ALREV));
			hm.put(13, mpPlant.get(ALSTATE));
			hm.put(14, mpPlant.get(SUBTYPE));
			hm.put(15, mpPlant.get(RELEASEDATE));
			hm.put(16, mpPlant.get(EXPRDATE));
			hm.put(17, mpPlant.get(TITLE));
			hm.put(18, mpPlant.get(ORGANIZATION));
			hm.put(19, mpPlant.get(PLANTNAME));
			if(UIUtil.isNotNullAndNotEmpty((String)mpPlant.get(ISAUTHORIZEDVIEW))){
				if(((String) mpPlant.get(ISAUTHORIZEDVIEW)).equalsIgnoreCase("TRUE"))
					hm.put(20, "Yes");
				else
					hm.put(20, "No");
			}
			if(UIUtil.isNotNullAndNotEmpty((String)mpPlant.get(ISAUTHORIZEDUSE))){
				if(((String) mpPlant.get(ISAUTHORIZEDUSE)).equalsIgnoreCase("TRUE"))
					hm.put(21, "Yes");
				else
					hm.put(21, "No");
			}
			if(UIUtil.isNotNullAndNotEmpty((String)mpPlant.get(ISAUTHORIZEDPRODUCE))){
				if(((String) mpPlant.get(ISAUTHORIZEDPRODUCE)).equalsIgnoreCase("TRUE"))
					hm.put(22, "Yes");
				else
					hm.put(22, "No");
			}
			if(UIUtil.isNotNullAndNotEmpty((String)mpPlant.get(ISACTIVATED))){
				if(((String) mpPlant.get(ISACTIVATED)).equalsIgnoreCase("TRUE"))
					hm.put(23, "Yes");
				else
					hm.put(23, "No");
			}
			hm.put(24, DomainConstants.EMPTY_STRING);
			hm.put(25, DomainConstants.EMPTY_STRING);
			hm.put(26, DomainConstants.EMPTY_STRING);
			hmSize = hm.size();	
			XSSFCellStyle style = workbook.createCellStyle();
			style = setForeGroundColor(strCurrentState, style);
			//Added by DSM Reports (Sogeti) for 2022x.5 (APR CW 2024) Defect 55875 - Start
			XSSFCellStyle style1 = workbook.createCellStyle();
			//Added by DSM Reports (Sogeti) for 2022x.5 (APR CW 2024) Defect 55875 - End
			for(int j=0;j<hmSize;j++){								
				//Modified the code for _2022x_Aug CW Req-47097 :: Start
				// Modified by DSM Reports (Sogeti) for 22x.03 (August CW 2023) Defect 54091 - Start
				cell = row.createCell(columnCount1++);
				if (j == 2) {
					style = makeColumnNumeric(workbook, style);
				}
				cell.setCellStyle(style);
				// Modified by DSM Reports (Sogeti) for 22x.03 (August CW 2023) Defect 54091 - End
				//Modified the code for _2022x_Aug CW Req-47097 :: End
				//Added code for Req Id : 33634 - Hyperlinks--Starts
				strCellValue = (String)hm.get(j);
				if(UIUtil.isNotNullAndNotEmpty(strCellValue) && strCellValue.startsWith(HYPERLINK_COMPARE)){
					strSplittedValue = strCellValue.split("\\|",-1); 
					strHyperlinkId = strSplittedValue[(strSplittedValue.length)-1];
					strValue = strSplittedValue[(strSplittedValue.length)-2];
					if(pgV3Constants.TRUE.equalsIgnoreCase(strHyperlink) && iRowCountAll < iHyperLinkLimit){
						getHyperlink(context,cell,workbook,strValue,strHyperlinkId,strCurrentState);
				
					} else if(UIUtil.isNotNullAndNotEmpty(strValue)){
						cell.setCellValue(strValue);
					}
				}else {
					cell.setCellValue(strCellValue);
					//Added by DSM Reports (Sogeti) for 2022x.5 (APR CW 2024) Defect 55875 - Start
					if(j == 0) {
						style1.cloneStyleFrom(style);
						style1.setWrapText(true);
						cell.setCellStyle(style1);
					}
					//Added by DSM Reports (Sogeti) for 2022x.5 (APR CW 2024) Defect 55875 - End
				}
				//Added code for Req Id : 33634 - Hyperlinks--Ends
			}
			}
			if(mp.containsKey(ALMEPSEP)){
				mpPlant = (Map)mp.get(ALMEPSEP);
				strAlternateId = (String)mpPlant.get("alId");
				strMEPSEPId = (String)mpPlant.get(DomainConstants.SELECT_ID);
				//Added by DSM Reports (Sogeti) for 2022x.5 (APR CW 2024) Defect 55875 - Start
				if(UIUtil.isNotNullAndNotEmpty(strCAId) && !strCAId.contains(HYPERLINK_PIPE)) {
					if(htCommonCol.get(CAREALIZEDNAME) != null && htCommonCol.get(CAPROPOSEDNAME) != null) {
						//Updated code for Req Id : 33634 - Hyperlinks--Starts
						hm.put(0, HYPERLINK+htCommonCol.get(CAREALIZEDNAME)+HYPERLINK_PIPE+strCAId);
						//Updated code for Req Id : 33634 - Hyperlinks--Ends
					} else if(htCommonCol.get(CAREALIZEDNAME) != null){
						//Updated code for Req Id : 33634 - Hyperlinks--Starts
						hm.put(0, HYPERLINK+htCommonCol.get(CAREALIZEDNAME)+HYPERLINK_PIPE+strCAId);
						//Updated code for Req Id : 33634 - Hyperlinks--Ends
					} else if(htCommonCol.get(CAPROPOSEDNAME) != null){
						//Updated code for Req Id : 33634 - Hyperlinks--Starts
						hm.put(0, HYPERLINK+htCommonCol.get(CAPROPOSEDNAME)+HYPERLINK_PIPE+strCAId);
						//Updated code for Req Id : 33634 - Hyperlinks--Ends
					} else {
						hm.put(0, DomainConstants.EMPTY_STRING);
					}
				}else{
					hm.put(0,htCommonCol.get(CAPROPOSEDNAME));
				}
			//Added by DSM Reports (Sogeti) for 2022x.5 (APR CW 2024) Defect 55875 - End
			hm.put(1, htCommonCol.get(pgV3Constants.SELECT_ATTRIBUTE_REASONFORCHANGE));
			//Updated code for Req Id : 33634 - Hyperlinks--Starts
			hm.put(2, HYPERLINK+htCommonCol.get(pgV3Constants.SELECT_NAME)+HYPERLINK_PIPE+strParentId);
			//Updated code for Req Id : 33634 - Hyperlinks--Ends
			hm.put(3, htCommonCol.get(pgV3Constants.SELECT_ATTRIBUTE_TITLE));
			hm.put(4, strTypeDisplayName);
			hm.put(5, htCommonCol.get(DomainConstants.SELECT_REVISION));
			hm.put(6, strCurrentState);
			hm.put(7, htCommonCol.get(pgV3Constants.SELECT_ATTRIBUTE_PGASSEMBLYTYPE));
			hm.put(8, htCommonCol.get(pgV3Constants.SELECT_ATTRIBUTE_RELEASE_DATE));
			hm.put(9, htCommonCol.get(pgV3Constants.SELECT_ATTRIBUTE_EXPIRATION_DATE));
			hm.put(10, htCommonCol.get(ORGANIZATION));
			hm.put(11, HYPERLINK+mpPlant.get(ALNAME)+HYPERLINK_PIPE+strAlternateId);
			hm.put(12, mpPlant.get(ALREV));
			hm.put(13, mpPlant.get(ALSTATE));
			hm.put(14, mpPlant.get(SUBTYPE));
			hm.put(15, mpPlant.get(RELEASEDATE));
			hm.put(16, mpPlant.get(EXPRDATE));
			hm.put(17, mpPlant.get(TITLE));
			hm.put(18, mpPlant.get(ORGANIZATION));
			hm.put(19, DomainConstants.EMPTY_STRING);
			hm.put(20, DomainConstants.EMPTY_STRING);
			hm.put(21, DomainConstants.EMPTY_STRING);
			hm.put(22, DomainConstants.EMPTY_STRING);
			hm.put(23, DomainConstants.EMPTY_STRING);
			hm.put(24, HYPERLINK+mpPlant.get(DomainConstants.SELECT_NAME)+HYPERLINK_PIPE+strMEPSEPId);
			hm.put(25, mpPlant.get(VENDORNAME));
			hm.put(26, mpPlant.get(VENDORCODE));
			hmSize = hm.size();
			XSSFCellStyle style = workbook.createCellStyle();
			style = setForeGroundColor(strCurrentState, style);
			//Added by DSM Reports (Sogeti) for 2022x.5 (APR CW 2024) Defect 55875 - Start
			XSSFCellStyle style1 = workbook.createCellStyle();
			//Added by DSM Reports (Sogeti) for 2022x.5 (APR CW 2024) Defect 55875 - End
			for(int j=0;j<hmSize;j++){								
				//Modified the code for _2022x_Aug CW Req-47097 :: Start
				// Modified by DSM Reports (Sogeti) for 22x.03 (August CW 2023) Defect 54091 - Start
				cell = row.createCell(columnCount1++);
				if (j == 2) {
					style = makeColumnNumeric(workbook, style);
				}
				cell.setCellStyle(style);
				
				// Modified by DSM Reports (Sogeti) for 22x.03 (August CW 2023) Defect 54091 - End
				//Modified the code for _2022x_Aug CW Req-47097 :: End
				//Added code for Req Id : 33634 - Hyperlinks--Starts
				strCellValue = (String)hm.get(j);
				if(UIUtil.isNotNullAndNotEmpty(strCellValue) && strCellValue.startsWith(HYPERLINK_COMPARE)){
					strSplittedValue = strCellValue.split("\\|",-1); 
					strHyperlinkId = strSplittedValue[(strSplittedValue.length)-1];
					strValue = strSplittedValue[(strSplittedValue.length)-2];
					if(pgV3Constants.TRUE.equalsIgnoreCase(strHyperlink) && iRowCountAll < iHyperLinkLimit){
						getHyperlink(context,cell,workbook,strValue,strHyperlinkId,strCurrentState);
					
					} else if(UIUtil.isNotNullAndNotEmpty(strValue)){
						cell.setCellValue(strValue);
					}
				}else {	
					cell.setCellValue(strCellValue);
					//Added by DSM Reports (Sogeti) for 2022x.5 (APR CW 2024) Defect 55875 - Start
					if(j == 0) {
						style1.cloneStyleFrom(style);
						style1.setWrapText(true);
						cell.setCellStyle(style1);
					}
					//Added by DSM Reports (Sogeti) for 2022x.5 (APR CW 2024) Defect 55875 - End
					
				}
				//Added code for Req Id : 33634 - Hyperlinks--Ends
			}
			} if(mp.containsKey(MEPSEPUSER)){
				mpPlant = (Map)mp.get(MEPSEPUSER);
				strAlternateId = (String)mpPlant.get(pgV3Constants.SELECT_ID);
				//Added by DSM Reports (Sogeti) for 2022x.5 (APR CW 2024) Defect 55875 - Start
				if(UIUtil.isNotNullAndNotEmpty(strCAId) && !strCAId.contains(HYPERLINK_PIPE)) {
					if(htCommonCol.get(CAREALIZEDNAME) != null && htCommonCol.get(CAPROPOSEDNAME) != null) {
						//Updated code for Req Id : 33634 - Hyperlinks--Starts
						hm.put(0, HYPERLINK+htCommonCol.get(CAREALIZEDNAME)+HYPERLINK_PIPE+strCAId);
						//Updated code for Req Id : 33634 - Hyperlinks--Ends
					} else if(htCommonCol.get(CAREALIZEDNAME) != null){
						//Updated code for Req Id : 33634 - Hyperlinks--Starts
						hm.put(0, HYPERLINK+htCommonCol.get(CAREALIZEDNAME)+HYPERLINK_PIPE+strCAId);
						//Updated code for Req Id : 33634 - Hyperlinks--Ends
					} else if(htCommonCol.get(CAPROPOSEDNAME) != null){
						//Updated code for Req Id : 33634 - Hyperlinks--Starts
						hm.put(0, HYPERLINK+htCommonCol.get(CAPROPOSEDNAME)+HYPERLINK_PIPE+strCAId);
						//Updated code for Req Id : 33634 - Hyperlinks--Ends
					} else {
						hm.put(0, DomainConstants.EMPTY_STRING);
					}
				}else{
					hm.put(0,htCommonCol.get(CAPROPOSEDNAME));
				}
				//Added by DSM Reports (Sogeti) for 2022x.5 (APR CW 2024) Defect 55875 - End
			
				hm.put(1, htCommonCol.get(pgV3Constants.SELECT_ATTRIBUTE_REASONFORCHANGE));
				//Updated code for Req Id : 33634 - Hyperlinks--Starts
				hm.put(2, HYPERLINK+htCommonCol.get(pgV3Constants.SELECT_NAME)+HYPERLINK_PIPE+strParentId);
				//Updated code for Req Id : 33634 - Hyperlinks--Ends
				hm.put(3, htCommonCol.get(pgV3Constants.SELECT_ATTRIBUTE_TITLE));
				hm.put(4, strTypeDisplayName);
				hm.put(5, htCommonCol.get(pgV3Constants.SELECT_REVISION));
				hm.put(6, strCurrentState);
				hm.put(7, htCommonCol.get(pgV3Constants.SELECT_ATTRIBUTE_PGASSEMBLYTYPE));
				hm.put(8, htCommonCol.get(pgV3Constants.SELECT_ATTRIBUTE_RELEASE_DATE));
				hm.put(9, htCommonCol.get(pgV3Constants.SELECT_ATTRIBUTE_EXPIRATION_DATE));
				hm.put(10, htCommonCol.get(ORGANIZATION));
				hm.put(11, HYPERLINK+mpPlant.get(DomainConstants.SELECT_NAME)+HYPERLINK_PIPE+strAlternateId);
				hm.put(12, mpPlant.get(DomainConstants.SELECT_REVISION));
				hm.put(13, mpPlant.get(DomainConstants.SELECT_CURRENT));
				hm.put(14, mpPlant.get(pgV3Constants.SELECT_ATTRIBUTE_PGASSEMBLYTYPE));
				hm.put(15, mpPlant.get(pgV3Constants.SELECT_ATTRIBUTE_RELEASE_DATE));
				hm.put(16, mpPlant.get(pgV3Constants.SELECT_ATTRIBUTE_EXPIRATION_DATE));
				hm.put(17, mpPlant.get(pgV3Constants.SELECT_ATTRIBUTE_TITLE));
				hm.put(18, mpPlant.get(ORGANIZATION));
				hm.put(19, DomainConstants.EMPTY_STRING);
				hm.put(20, DomainConstants.EMPTY_STRING);
				hm.put(21, DomainConstants.EMPTY_STRING);
				hm.put(22, DomainConstants.EMPTY_STRING);
				hm.put(23, DomainConstants.EMPTY_STRING);
				hm.put(24, DomainConstants.EMPTY_STRING);
				hm.put(25, DomainConstants.EMPTY_STRING);
				hm.put(26, DomainConstants.EMPTY_STRING);
				hmSize = hm.size();
				XSSFCellStyle style = workbook.createCellStyle();
				style = setForeGroundColor(strCurrentState, style);
				//Added by DSM Reports (Sogeti) for 2022x.5 (APR CW 2024) Defect 55875 - Start
				XSSFCellStyle style1 = workbook.createCellStyle();
				//Added by DSM Reports (Sogeti) for 2022x.5 (APR CW 2024) Defect 55875 - End
				for(int j=0;j<hmSize;j++){								
				//Modified the code for _2022x_Aug CW Req-47097 :: Start
				// Modified by DSM Reports (Sogeti) for 22x.03 (August CW 2023) Defect 54091 - Start
				cell = row.createCell(columnCount1++);
				if (j == 2) {
					style = makeColumnNumeric(workbook, style);
				}
                cell.setCellStyle(style);	
				
				// Modified by DSM Reports (Sogeti) for 22x.03 (August CW 2023) Defect 54091 - End
				//Modified the code for _2022x_Aug CW Req-47097 :: End
				//Added code for Req Id : 33634 - Hyperlinks--Starts
				strCellValue = (String)hm.get(j);
				if(UIUtil.isNotNullAndNotEmpty(strCellValue) && strCellValue.startsWith(HYPERLINK_COMPARE)){
					strSplittedValue = strCellValue.split("\\|",-1); 
					strHyperlinkId = strSplittedValue[(strSplittedValue.length)-1];
					strValue = strSplittedValue[(strSplittedValue.length)-2];
					if(pgV3Constants.TRUE.equalsIgnoreCase(strHyperlink) && iRowCountAll < iHyperLinkLimit){
						getHyperlink(context,cell,workbook,strValue,strHyperlinkId,strCurrentState);
					
					} else if(UIUtil.isNotNullAndNotEmpty(strValue)){
							cell.setCellValue(strValue);
						}
				}	else {
					cell.setCellValue(strCellValue);
					//Added by DSM Reports (Sogeti) for 2022x.5 (APR CW 2024) Defect 55875 - Start
					if(j == 0) {
						style1.cloneStyleFrom(style);
						style1.setWrapText(true);
						cell.setCellStyle(style1);
					}
					//Added by DSM Reports (Sogeti) for 2022x.5 (APR CW 2024) Defect 55875 - End
				}
				//Added code for Req Id : 33634 - Hyperlinks--Ends
			}
		}
		}
		sheetFormatter(sheetAlternate);		// Added by DSM Reports (Sogeti) for 22x.04 (Dec CW 2023) Defect 56156 - START/END
	} catch (Exception e) {
		e.printStackTrace();
	}
}

/**This method is used to get the Alternate data of the Part
 * @param context
 * @param strUserName
 * @param dobjPart
 * @param mpCommonColumnsDetail
 * @return MapList
 */
private MapList getAlternate(Context context, String strUserName, DomainObject dobjPart, Map<String,Object> mpCommonColumnsDetail) {
	//Added the code for Defect 49698 - Spec Reader Access Issue - Starts
	boolean hasAccess = false;
	boolean isContextPushed = false;
	//Added the code for Defect 49698 - Spec Reader Access Issue - Ends
	//Added the code for 22xFeb CW for Defect 49642 - Starts
	boolean isCalculationdoneforAlternatePart = false;
	//Added the code for Defect 49642 22x 01 - CW - Starts
	boolean hasAccessforAlternate = false;
	//Added the code for Defect 49642 22x 01 - CW - Ends
	//Added the code for 22xFeb CW for Defect 49642 - Ends
	MapList mlAlternateAll=new MapList();
	StringBuilder slRelPattern = new StringBuilder(pgV3Constants.RELATIONSHIP_ALTERNATE);
	
	StringList slBusSelect=new StringList();
	slBusSelect.add(DomainConstants.SELECT_ID);
	slBusSelect.add(DomainConstants.SELECT_TYPE);
	slBusSelect.add(DomainConstants.SELECT_NAME);
	slBusSelect.add(DomainConstants.SELECT_CURRENT);
	slBusSelect.add(DomainConstants.SELECT_REVISION);
	slBusSelect.add(pgV3Constants.SELECT_ATTRIBUTE_PGASSEMBLYTYPE);
	slBusSelect.add(pgV3Constants.SELECT_ATTRIBUTE_RELEASE_DATE);
	slBusSelect.add(pgV3Constants.SELECT_ATTRIBUTE_EXPIRATION_DATE);
	slBusSelect.add(pgV3Constants.SELECT_ATTRIBUTE_TITLE);
	slBusSelect.add(ORGANIZATION);
	Map<String,Object> mpAlternateRow = null;
	MapList mlAlternatePlantAll = new MapList();
	String strAlternateId = DomainConstants.EMPTY_STRING;
	String strAlternateType = DomainConstants.EMPTY_STRING;
	int isAlternatePlant = 0;
	Map<String,Object> mpNewAlternate = new HashMap<>();
	 try{
		//Added the code for Defect 49698 - Spec Reader Access Issue - Starts
		// if(SPECREADER.equalsIgnoreCase(strOriginatingSource)) {
				hasAccess = accessCheck(context, strUserName, (String)dobjPart.getInfo(context, DomainConstants.SELECT_ID));
				if(hasAccess) {
					//Pushing User Agent Context to get the Data if the Spec Reader User have access
					ContextUtil.pushContext(context,PropertyUtil.getSchemaProperty(context,"User Agent"),DomainConstants.EMPTY_STRING,DomainConstants.EMPTY_STRING);
					isContextPushed = true;
					
				//}
			//}
		//Added the code for Defect 49698 - Spec Reader Access Issue - Ends
		MapList mpReturnList = dobjPart.getRelatedObjects(
				context, //Context
				slRelPattern.toString(), //Relationship
				pgV3Constants.TYPE_PART, //Type
				slBusSelect, //Object Select
				null, //Rel Select
				false, //get To
				true, //get From
				(short)1, //recurse level
				null, //object where clause
				null, //relationship where clause
				0); //limit
		int mpPartCertiSize = mpReturnList.size();
		if(mpPartCertiSize>0) {
			//Added code for Req id 34309:if a user does not have access to the Parts/Alternates displayed, the report shall display No Access in the table, with the exception of the Type, Name, Revision of the Part/Alternate--Starts
			//if(!isEBP(context, strUserName)){
				//Added the code for 22xFeb CW for Defect 49642 - Starts
			//Added the code for 22xFeb CW for Defect 49642 - Starts
				mlAlternatePlantAll = getPlantsMEPSEP(context, dobjPart, mpCommonColumnsDetail, isCalculationdoneforAlternatePart, null, mlAlternateAll,strUserName, hasAccessforAlternate);
				//Added the code for 22xFeb CW for Defect 49642 - Ends
			//}
			//Added the code for 22xFeb CW for Defect 49642 - Ends
			//Added code for Req id 34309:if a user does not have access to the Parts/Alternates displayed, the report shall display No Access in the table, with the exception of the Type, Name, Revision of the Part/Alternate--Ends
			for(int i=0;i<mpPartCertiSize;i++) {
				//Added the code for 22xFeb CW for Defect 49642 - Starts
				isCalculationdoneforAlternatePart = true;
			//Added the code for 22xFeb CW for Defect 49642 - Ends
				mpAlternateRow = (Map)mpReturnList.get(i);
				strAlternateType = (String)mpAlternateRow.get(DomainConstants.SELECT_TYPE);
				if (UIUtil.isNotNullAndNotEmpty(strAlternateType) && PropertyUtil.getSchemaProperty(context,"type_pgRawMaterial").equals(strAlternateType)) {
					mpAlternateRow.put(pgV3Constants.SELECT_ATTRIBUTE_PGASSEMBLYTYPE, "Raw");
				 } if (UIUtil.isNotNullAndNotEmpty(strAlternateType) && PropertyUtil.getSchemaProperty(context, "type_pgPackingMaterial").equals(strAlternateType)) {
					 mpAlternateRow.put(pgV3Constants.SELECT_ATTRIBUTE_PGASSEMBLYTYPE, "Packaging");
				 } 
				//Added code for Req id 34309:if a user does not have access to the Parts/Alternates displayed, the report shall display No Access in the table, with the exception of the Type, Name, Revision of the Part/Alternate--Starts
//				 if(isEBP(context, strUserName)){
//					mpNewAlternate.put(MEPSEPUSER, mpAlternateRow);
//					mpNewAlternate.put(COMMONCOLUMNS, mpCommonColumnsDetail);
//					mlAlternatePlantAll.add(mpNewAlternate);
//				}
			//Added code for Req id 34309:if a user does not have access to the Parts/Alternates displayed, the report shall display No Access in the table, with the exception of the Type, Name, Revision of the Part/Alternate--Ends
				//else{
					strAlternateId = (String)mpAlternateRow.get(DomainConstants.SELECT_ID);
					dobjPart = DomainObject.newInstance(context, strAlternateId);
					//Added the code for 22xFeb CW for Defect 49642 - Starts
					hasAccessforAlternate = accessCheck(context, strUserName, strAlternateId);
					//Added the code for 22xFeb CW for Defect 49642 - Ends
					isAlternatePlant=1;
					//Added the code for 22xFeb CW for Defect 49642 - Starts
					mlAlternatePlantAll = getPlantsMEPSEP(context, dobjPart, mpCommonColumnsDetail, isCalculationdoneforAlternatePart, mpAlternateRow, mlAlternateAll, strUserName,hasAccessforAlternate);
				//Added the code for 22xFeb CW for Defect 49642 - Ends
				//}
			}
		}
	 }
	} catch (Exception e){
		e.printStackTrace();	 
		//Added the code for Defect 49698 - Spec Reader Access Issue - Starts
	}finally {
		try {
			if(isContextPushed) {
				ContextUtil.popContext(context);
			}
		}catch(Exception e) {
			outLog.println("Exception while poping the context in getAlternate Method "+"\n");
			outLog.flush();
		}
		
	}
	//Added the code for Defect 49698 - Spec Reader Access Issue - Ends
	return mlAlternatePlantAll;
}
//Modified the code for 22xFeb CW for Defect 49642 - Starts
/**This method is used to set Plant details in maplist
 * @param mpPlant
 * @param mlAlternateAll
 * @param mpCommonColumnsDetail
 * @param isAlternatePlant
 * @param mpAlternateRow
 * @param bContextPushed 
 * @param strContextUser 
 * @param context 
 * @return
 * @throws FrameworkException 
 */
//Added the code for 22xFeb CW for Defect 49642 - Starts
private MapList setPlantDetails(MapList mlPlants, MapList mlAlternateAll, Map<String,Object> mpCommonColumnsDetail, boolean isCalculationdoneforAlternatePart, Map<String,Object> mpAlternateRow, boolean hasAccessforAlternate) {
	//Added the code for 22xFeb CW for Defect 49642 - Ends
	Map<String,Object> mpNewPlant = null;
	Map<String,Object> mpFinalPlant = null;
	if(null != mlPlants && !mlPlants.isEmpty()) {
	for(int i=0;i<mlPlants.size();i++) {
		mpNewPlant = new HashMap<>();
		mpFinalPlant = new HashMap<>();
		Map mpConnctedPlnts = (Map)mlPlants.get(i);
		mpNewPlant.put(ISACTIVATED, mpConnctedPlnts.get(pgV3Constants.SELECT_ATTRIBUTE_PGISACTIVATED));
		mpNewPlant.put(ISAUTHORIZEDUSE, mpConnctedPlnts.get(pgV3Constants.SELECT_ATTRIBUTE_PGISAUTHORIZEDTOUSE));
		mpNewPlant.put(ISAUTHORIZEDPRODUCE, mpConnctedPlnts.get(pgV3Constants.SELECT_ATTRIBUTE_PGISAUTHORIZEDTOPRODUCE));
		mpNewPlant.put(ISAUTHORIZEDVIEW, mpConnctedPlnts.get(pgV3Constants.SELECT_ATTRIBUTE_PGISAUTHORIZEDTOVIEW));
		mpNewPlant.put(PLANTNAME, mpConnctedPlnts.get(DomainConstants.SELECT_NAME));
		if(isCalculationdoneforAlternatePart) {
//Added the code for 22xFeb CW for Defect 49642 - Starts
			if(hasAccessforAlternate) {
				mpNewPlant.put(ALNAME, mpAlternateRow.get(DomainConstants.SELECT_NAME));
				mpNewPlant.put(ALID, mpAlternateRow.get(DomainConstants.SELECT_ID));
				mpNewPlant.put(ALREV, mpAlternateRow.get(DomainConstants.SELECT_REVISION));
				mpNewPlant.put(ALSTATE, mpAlternateRow.get(DomainConstants.SELECT_CURRENT));
				mpNewPlant.put(TITLE, mpAlternateRow.get(pgV3Constants.SELECT_ATTRIBUTE_TITLE));
				mpNewPlant.put(SUBTYPE, mpAlternateRow.get(pgV3Constants.SELECT_ATTRIBUTE_PGASSEMBLYTYPE));
				mpNewPlant.put(RELEASEDATE, mpAlternateRow.get(pgV3Constants.SELECT_ATTRIBUTE_RELEASE_DATE));
				mpNewPlant.put(EXPRDATE, mpAlternateRow.get(pgV3Constants.SELECT_ATTRIBUTE_EXPIRATION_DATE));
				mpNewPlant.put(ORGANIZATION, mpAlternateRow.get(ORGANIZATION));
			}else {
				mpNewPlant.put(ALNAME, mpAlternateRow.get(DomainConstants.SELECT_NAME));
				//Modified the code for 22xFeb CW for Defect 49642 - Starts
				mpNewPlant.put(ALID, mpAlternateRow.get(DomainConstants.SELECT_ID));
				//Modified the code for 22xFeb CW for Defect 49642 - Ends
				mpNewPlant.put(ALREV, mpAlternateRow.get(DomainConstants.SELECT_REVISION));
				mpNewPlant.put(ALSTATE, NO_ACCESS);
				mpNewPlant.put(TITLE, NO_ACCESS);
				mpNewPlant.put(SUBTYPE, NO_ACCESS);
				mpNewPlant.put(RELEASEDATE, NO_ACCESS);
				mpNewPlant.put(EXPRDATE, NO_ACCESS);
				mpNewPlant.put(ORGANIZATION, NO_ACCESS);
			}
			//Added the code for 22xFeb CW for Defect 49642 - Ends
			mpFinalPlant.put(ALPLANT, mpNewPlant);
			mpFinalPlant.put(COMMONCOLUMNS, mpCommonColumnsDetail);
			mlAlternateAll.add(mpFinalPlant);
		}else {
			mpFinalPlant.put(INPUTPLANT, mpNewPlant);
			mpFinalPlant.put(COMMONCOLUMNS, mpCommonColumnsDetail);
			mlAlternateAll.add(mpFinalPlant);
		}
		
		
	}
	}
	
//	else {
//		mpNewPlant = new HashMap<>();
//		mpFinalPlant = new HashMap<>();
//		mpNewPlant.put(ISACTIVATED, "");
//		mpNewPlant.put(ISAUTHORIZEDUSE, "");
//		mpNewPlant.put(ISAUTHORIZEDPRODUCE, "");
//		mpNewPlant.put(ISAUTHORIZEDVIEW, "");
//		mpNewPlant.put(PLANTNAME,"");
//	
//		mpNewPlant.put(ALNAME, mpAlternateRow.get(DomainConstants.SELECT_NAME));
//		mpNewPlant.put(ALID, mpAlternateRow.get(DomainConstants.SELECT_ID));
//		mpNewPlant.put(ALREV, mpAlternateRow.get(DomainConstants.SELECT_REVISION));
//		mpNewPlant.put(ALSTATE, mpAlternateRow.get(DomainConstants.SELECT_CURRENT));
//		mpNewPlant.put(TITLE, mpAlternateRow.get(pgV3Constants.SELECT_ATTRIBUTE_TITLE));
//		mpNewPlant.put(SUBTYPE, mpAlternateRow.get(pgV3Constants.SELECT_ATTRIBUTE_PGASSEMBLYTYPE));
//		mpNewPlant.put(RELEASEDATE, mpAlternateRow.get(pgV3Constants.SELECT_ATTRIBUTE_RELEASE_DATE));
//		mpNewPlant.put(EXPRDATE, mpAlternateRow.get(pgV3Constants.SELECT_ATTRIBUTE_EXPIRATION_DATE));
//		mpNewPlant.put(ORGANIZATION, mpAlternateRow.get(ORGANIZATION));
//		if(isCalculationdoneforAlternatePart) {
//			mpFinalPlant.put(ALPLANT, mpNewPlant);
//		}else {
//			mpFinalPlant.put(INPUTPLANT, mpNewPlant);
//		}
//		
//		mpFinalPlant.put(COMMONCOLUMNS, mpCommonColumnsDetail);
//		mlAlternateAll.add(mpFinalPlant);
//		
//	}
	
	
	return mlAlternateAll;
	}
//Modified the code for 22xFeb CW for Defect 49642 - Ends
//Modified the code for 22xFeb CW for Defect 49642 - Starts
/** This method is used to get plants details and MEP SEP detals.
 * @param context
 * @param dobjPart
 * @param mpCommonColumnsDetail
 * @param isAlternatePlant
 * @param mpAlternateRow
 * @param mlAlternateAll
 * @return MapList
 * @throws FrameworkException
 */
//Added the code for 22xFeb CW for Defect 49642 - Starts
private MapList getPlantsMEPSEP(Context context,DomainObject dobjPart,Map<String,Object> mpCommonColumnsDetail, boolean isCalculationdoneforAlternatePart, Map<String,Object> mpAlternateRow, MapList mlAlternateAll, String strUserName, boolean hasAccessforAlternate) throws Exception {
	//Added the code for 22xFeb CW for Defect 49642 - Ends
	StringBuilder slRelPattern = new StringBuilder(pgV3Constants.RELATIONSHIP_MANUFACTUREREQUIVALENT);
	slRelPattern.append(",");
	slRelPattern.append(pgV3Constants.RELATIONSHIP_SUPPLIEREQUIVALENT);
//	StringList slRelSelect = new StringList(ISACTIVATED);
//	slRelSelect.add(ISAUTHORIZEDUSE);
//	slRelSelect.add(ISAUTHORIZEDPRODUCE);
//	slRelSelect.add(ISAUTHORIZEDVIEW);
//	slRelSelect.add(PLANTNAME);
	StringList slBusSelect = new StringList(DomainConstants.SELECT_NAME);
	slBusSelect.add(DomainConstants.SELECT_ID);
	slBusSelect.add(VENDOR_NAME);
	slBusSelect.add(VENDOR_CODE);
	//Added the code for 22x.01 Feb CW Defect 49642 - Starts
	slBusSelect.add(DomainConstants.SELECT_POLICY);
	slBusSelect.add(SEP_VENDOR_NAME);
	slBusSelect.add(SEP_VENDOR_CODE);
	//Added the code for 22x.01 Feb CW Defect 49642 - Ends
	//Map<String,Object> mTSDetail = dobjPart.getInfo(context, slRelSelect);
	//Added the code for 22xFeb CW for Defect 49642 - Starts
	if(!isEBP(context, strUserName)){
		MapList mlConnectedPlantList = getConnectedPlantsforInputPart(context, dobjPart);	
		mlAlternateAll = setPlantDetails(mlConnectedPlantList, mlAlternateAll, mpCommonColumnsDetail, isCalculationdoneforAlternatePart, mpAlternateRow, hasAccessforAlternate);
	}
	//Added the code for 22xFeb CW for Defect 49642 - Ends
	
	String strVendorName = DomainConstants.EMPTY_STRING;
	String strVendorCode = DomainConstants.EMPTY_STRING;
	Map<String,Object> mpMEPSEP = new HashMap<>();
	//Added for 2018x.6 Jun CW Defect 47193 - starts
	String strWhereExpressionNonObsolete = (new StringBuilder()).append("current!=").append(pgV3Constants.STATE_OBSOLETE).toString();
	//Modified for 2018x.6 Jun CW Defect 47193 - Ends
	try{
		//Added the code for 22xFeb CW for Defect 49642 - Starts
		Map<String, Object> mpNewMEPSEP = null;
		Map<String, Object> mpFinal = null;
		if((isCalculationdoneforAlternatePart && hasAccessforAlternate) || !isCalculationdoneforAlternatePart) {
			//Added the code for 22xFeb CW for Defect 49642 - Ends
		MapList mpReturnList = dobjPart.getRelatedObjects(
				context, //Context
				slRelPattern.toString(), //Relationship
				pgV3Constants.TYPE_PART, //Type
				slBusSelect, //Object Select
				null, //Rel Select
				false, //get To
				true, //get From
				(short)1, //recurse level
				//Modified for 2018x.6 Jun CW Defect 47193 - starts
				strWhereExpressionNonObsolete, //object where clause
				//Modified for 2018x.6 Jun CW Defect 47193 - Ends
				null, //relationship where clause
				0); //limit
	int mpReturnListSize = mpReturnList.size();
	
	for(int i=0;i<mpReturnListSize;i++){
		mpMEPSEP = (Map)mpReturnList.get(i);
		mpNewMEPSEP = new HashMap<>();
		mpFinal = new HashMap<>();
//Added the code for 22xFeb CW for Defect 49642 - Starts
		if(!accessCheck(context, strUserName, (String)mpMEPSEP.get(DomainConstants.SELECT_ID))) {
			if(isCalculationdoneforAlternatePart){
				mpNewMEPSEP.put(ALNAME, mpAlternateRow.get(DomainConstants.SELECT_NAME));
				mpNewMEPSEP.put(ALID, mpAlternateRow.get(DomainConstants.SELECT_ID));
				mpNewMEPSEP.put(ALREV, mpAlternateRow.get(DomainConstants.SELECT_REVISION));
				mpNewMEPSEP.put(ALSTATE, mpAlternateRow.get(DomainConstants.SELECT_CURRENT));
				mpNewMEPSEP.put(TITLE, mpAlternateRow.get(pgV3Constants.SELECT_ATTRIBUTE_TITLE));
				mpNewMEPSEP.put(SUBTYPE, mpAlternateRow.get(pgV3Constants.SELECT_ATTRIBUTE_PGASSEMBLYTYPE));
				mpNewMEPSEP.put(RELEASEDATE, mpAlternateRow.get(pgV3Constants.SELECT_ATTRIBUTE_RELEASE_DATE));
				mpNewMEPSEP.put(EXPRDATE, mpAlternateRow.get(pgV3Constants.SELECT_ATTRIBUTE_EXPIRATION_DATE));
				mpNewMEPSEP.put(ORGANIZATION, mpAlternateRow.get(ORGANIZATION));
				mpNewMEPSEP.put("name", mpMEPSEP.get(DomainConstants.SELECT_NAME));
				//Modified the code for Modified the code for 22x.01 Feb CW - Starts
				mpNewMEPSEP.put("id", mpMEPSEP.get(DomainConstants.SELECT_ID));
				//Modified the code for Modified the code for 22x.01 Feb CW - Ends
				mpNewMEPSEP.put(VENDORNAME, NO_ACCESS);
				mpNewMEPSEP.put(VENDORCODE, NO_ACCESS);
				mpFinal.put(ALMEPSEP, mpNewMEPSEP);
				mpFinal.put(COMMONCOLUMNS, mpCommonColumnsDetail);
				mlAlternateAll.add(mpFinal);
			}else {
				mpNewMEPSEP.put("name", mpMEPSEP.get(DomainConstants.SELECT_NAME));
				//Modified the code for Modified the code for 22x.01 Feb CW - Starts
				mpNewMEPSEP.put("id", mpMEPSEP.get(DomainConstants.SELECT_ID));
				//Modified the code for Modified the code for 22x.01 Feb CW - Ends
				mpNewMEPSEP.put(VENDORNAME, NO_ACCESS);
				mpNewMEPSEP.put(VENDORCODE, NO_ACCESS);
				mpFinal.put(INPUTMEPSEP, mpNewMEPSEP);
				mpFinal.put(COMMONCOLUMNS, mpCommonColumnsDetail);
				mlAlternateAll.add(mpFinal);
			}
			
			
		}else {
			//Added the code for 22xFeb CW for Defect 49642 - Ends
		mpNewMEPSEP.put("name", mpMEPSEP.get(DomainConstants.SELECT_NAME));
		mpNewMEPSEP.put("id", mpMEPSEP.get(DomainConstants.SELECT_ID));
		
		
//Modified the code for 22xFeb CW for Defect 49642 - Starts
		if(mpMEPSEP.get(VENDOR_NAME) instanceof StringList || mpMEPSEP.get(SEP_VENDOR_NAME) instanceof StringList){
			if(pgV3Constants.POLICY_MANUFACTURER_EQUIVALENT.equalsIgnoreCase((String)mpMEPSEP.get(DomainConstants.SELECT_POLICY))) {
				strVendorName = mpMEPSEP.get(VENDOR_NAME).toString();
				strVendorName = strVendorName.replace("[", "").replace("]", "");
				strVendorCode = mpMEPSEP.get(VENDOR_CODE).toString();
				strVendorCode = strVendorCode.replace("[", "").replace("]", "");
				
			}else if(pgV3Constants.POLICY_SUPPLIEREQUIVALENT.equalsIgnoreCase((String)mpMEPSEP.get(DomainConstants.SELECT_POLICY))) {
				strVendorName = mpMEPSEP.get(SEP_VENDOR_NAME).toString();
				strVendorName = strVendorName.replace("[", "").replace("]", "");
				strVendorCode = mpMEPSEP.get(SEP_VENDOR_CODE).toString();
				strVendorCode = strVendorCode.replace("[", "").replace("]", "");
				//mpNewMEPSEP.put(VENDORNAME, strVendorName);
				//mpNewMEPSEP.put(VENDORCODE, strVendorCode);
			}
			mpNewMEPSEP.put(VENDORNAME, strVendorName);
			mpNewMEPSEP.put(VENDORCODE, strVendorCode);
		}
		else{
			if(pgV3Constants.POLICY_MANUFACTURER_EQUIVALENT.equalsIgnoreCase((String)mpMEPSEP.get(DomainConstants.SELECT_POLICY))) {
				mpNewMEPSEP.put(VENDORNAME, mpMEPSEP.get(VENDOR_NAME));
				mpNewMEPSEP.put(VENDORCODE, mpMEPSEP.get(VENDOR_CODE));
			}else if(pgV3Constants.POLICY_SUPPLIEREQUIVALENT.equalsIgnoreCase((String)mpMEPSEP.get(DomainConstants.SELECT_POLICY))) {
				mpNewMEPSEP.put(VENDORNAME, mpMEPSEP.get(SEP_VENDOR_NAME));
				mpNewMEPSEP.put(VENDORCODE, mpMEPSEP.get(SEP_VENDOR_CODE));
			}
			
		}
			if(isCalculationdoneforAlternatePart){
				mpNewMEPSEP.put(ALNAME, mpAlternateRow.get(DomainConstants.SELECT_NAME));
				mpNewMEPSEP.put(ALID, mpAlternateRow.get(DomainConstants.SELECT_ID));
				mpNewMEPSEP.put(ALREV, mpAlternateRow.get(DomainConstants.SELECT_REVISION));
				mpNewMEPSEP.put(ALSTATE, mpAlternateRow.get(DomainConstants.SELECT_CURRENT));
				mpNewMEPSEP.put(TITLE, mpAlternateRow.get(pgV3Constants.SELECT_ATTRIBUTE_TITLE));
				mpNewMEPSEP.put(SUBTYPE, mpAlternateRow.get(pgV3Constants.SELECT_ATTRIBUTE_PGASSEMBLYTYPE));
				mpNewMEPSEP.put(RELEASEDATE, mpAlternateRow.get(pgV3Constants.SELECT_ATTRIBUTE_RELEASE_DATE));
				mpNewMEPSEP.put(EXPRDATE, mpAlternateRow.get(pgV3Constants.SELECT_ATTRIBUTE_EXPIRATION_DATE));
				mpNewMEPSEP.put(ORGANIZATION, mpAlternateRow.get(ORGANIZATION));
				mpFinal.put(ALMEPSEP, mpNewMEPSEP);
				mpFinal.put(COMMONCOLUMNS, mpCommonColumnsDetail);
				mlAlternateAll.add(mpFinal);
			} 
			else{
				mpNewMEPSEP.putAll(mpMEPSEP);
				mpFinal.put(INPUTMEPSEP, mpNewMEPSEP);
				mpFinal.put(COMMONCOLUMNS, mpCommonColumnsDetail);
				mlAlternateAll.add(mpFinal);
			}
		} 
		//Added the code for 22xFeb CW for Defect 49642 - Starts
	}
	} else if((isCalculationdoneforAlternatePart && !hasAccessforAlternate)) {
		mpNewMEPSEP = new HashMap<>();
		mpFinal = new HashMap<>();
		mpNewMEPSEP.put(ALNAME, mpAlternateRow.get(DomainConstants.SELECT_NAME));
		//Modified the code for 22xFeb CW for Defect 49642 - Starts
		mpNewMEPSEP.put(ALID, mpAlternateRow.get(DomainConstants.SELECT_ID));
		//Modified the code for 22xFeb CW for Defect 49642 - Ends
		mpNewMEPSEP.put(ALREV, mpAlternateRow.get(DomainConstants.SELECT_REVISION));
		mpNewMEPSEP.put(ALSTATE, NO_ACCESS);
		mpNewMEPSEP.put(TITLE, NO_ACCESS);
		mpNewMEPSEP.put(SUBTYPE, NO_ACCESS);
		mpNewMEPSEP.put(RELEASEDATE, NO_ACCESS);
		mpNewMEPSEP.put(EXPRDATE, NO_ACCESS);
		mpNewMEPSEP.put(ORGANIZATION, NO_ACCESS);
		mpFinal.put(ALMEPSEP, mpNewMEPSEP);
		mpFinal.put(COMMONCOLUMNS, mpCommonColumnsDetail);
		mlAlternateAll.add(mpFinal);
		
	}
	//Added the code for 22xFeb CW for Defect 49642 - Ends	
	}catch (Exception e){
		e.printStackTrace();
	
	}
	return mlAlternateAll;
}





//Modified the code for 22xFeb CW for Defect 49642 - Ends
/**This method is used to update the worksheet for Materials And Composition.
 * @param context
 * @param workbook
 * @param rowHeaderMaterialsAndComposition
 * @param cellStyleMaterialsAndComposition
 * @param mlMaterialsAndCompositions
 * @param sheetMaterialsAndComposition
 */
//22x updgrade defect 50261 - Modified the method to support substance and materials changes - Start
private void updateWorksheetMaterialsAndComposition(Context context, XSSFWorkbook workbook,XSSFRow rowHeaderMaterialsAndComposition,XSSFCellStyle cellStyleMaterialsAndComposition, MapList mlMaterialsAndCompositions ,XSSFSheet sheetMaterialsAndComposition,String strHyperlink, String strUserName, XSSFCellStyle styleGlobal)
{
	try
	{
		//Added code for 2018x.6 Requirement id 36700 Ability to generate Part and Spec report with without hyperlink Starts
		String strHyperlinkLimit = EnoviaResourceBundle.getProperty(context, EMXCPNSTRINGRESOURCE, context.getLocale(),"emxCPN.PartAndSpecReport.HyperlinkLimit");
		int iHyperLinkLimit = Integer.parseInt(strHyperlinkLimit);
		int iRowCountAll=0;
		//Added code for 2018x.6 Requirement id 36700 Ability to generate Part and Spec report with without hyperlink Ends
		String strColumnNames = EnoviaResourceBundle.getProperty(context, EMXCPNSTRINGRESOURCE, context.getLocale(),"emxCPN.FamilyCareReport.Worksheet.MaterialsAndComposition.ColumnTypes");
		StringList slIndividualColumnNames = StringUtil.split(strColumnNames, COMMA);															  
		String ColumnName = DomainConstants.EMPTY_STRING;
		String strColumnName = DomainConstants.EMPTY_STRING;
		String strColumnValue= DomainConstants.EMPTY_STRING;
		int slIndividualColumnNamesSize=slIndividualColumnNames.size();
		for (int i = 0;i<slIndividualColumnNamesSize;i++) {
			ColumnName = slIndividualColumnNames.get(i);
			strColumnName= String.valueOf(ColumnName).trim();
			strColumnValue = EnoviaResourceBundle.getProperty(context, EMXCPNSTRINGRESOURCE, context.getLocale(),"emxCPN.FamilyCareReport.Worksheet.MaterialsAndComposition.Column."+strColumnName);
			Cell cell = rowHeaderMaterialsAndComposition.createCell(i);
			cell.setCellStyle(cellStyleMaterialsAndComposition);
			cell.setCellValue(strColumnValue);	
		}
		int rowCount1 = 0;
		String strCurrent  = DomainConstants.EMPTY_STRING;
		String strParentId = DomainConstants.EMPTY_STRING;
		String strMaterialId = DomainConstants.EMPTY_STRING;
		String strHyperlinkId = DomainConstants.EMPTY_STRING;
		String strValue = DomainConstants.EMPTY_STRING;
		String strCellValue = DomainConstants.EMPTY_STRING;
		String strCAId = DomainConstants.EMPTY_STRING;
		String strTypeName = DomainConstants.EMPTY_STRING;
		String current = DomainConstants.EMPTY_STRING;
		String qsComposite= DomainConstants.EMPTY_STRING;
		String isTargetMaterial= DomainConstants.EMPTY_STRING;
		String drugActive = DomainConstants.EMPTY_STRING;
		String strIsColorant= DomainConstants.EMPTY_STRING;
		String strPreservative = DomainConstants.EMPTY_STRING;
		String applications= DomainConstants.EMPTY_STRING;
		String strIsContaminant= DomainConstants.EMPTY_STRING;
		String strIsSubstanceType= DomainConstants.EMPTY_STRING;
		String strTypeDisplayName=null;
		
		String strPercentPostIndustrialRecyclate = PropertyUtil.getSchemaProperty(context,INDUSTRIALCYCLATEATTRIBUTESELECT);
		String strParentState = DomainConstants.EMPTY_STRING;
		String strChildId = DomainConstants.EMPTY_STRING;
		String strDerivedId = DomainConstants.EMPTY_STRING;
		String strChildTypeDisplayName = DomainConstants.EMPTY_STRING;
		String strChildTypeName = DomainConstants.EMPTY_STRING;
		String strEnvClass = DomainConstants.EMPTY_STRING;
		String strConsumerRecycled = DomainConstants.EMPTY_STRING;
		String strIndustrialRecycled = DomainConstants.EMPTY_STRING;
		String strParentName = DomainConstants.EMPTY_STRING;
		String strLanguage = context.getLocale().getLanguage();
		boolean bHasAccess=false;
			
		StringList appList =new StringList();
		Map<String,String> relAttributeArg =new HashMap<>();
		Map<String,Object> mp=new HashMap<>();
		int columnCount1 = 0;
		HashMap<Integer,Object> hm = null;
		Map<String,String> htCommonCol = new HashMap<>();
		int mlMaterialsAndCompositionsSize = mlMaterialsAndCompositions.size();
		int hmSize = 0;
		String[] strSplittedValue;
		for (int i=0;i<mlMaterialsAndCompositionsSize;i++){
			//Added code for 2018x.6 Requirement id 36700 Ability to generate Part and Spec report with without hyperlink Starts
			iRowCountAll = iRowCountAll + 1;
			//Added code for 2018x.6 Requirement id 36700 Ability to generate Part and Spec report with without hyperlink Ends
			XSSFRow row = sheetMaterialsAndComposition.createRow(++rowCount1);
			columnCount1 = 0;
			mp = (Map)mlMaterialsAndCompositions.get(i);
			hm= new HashMap<>();
			htCommonCol= (Map)mp.get(STRFINALCOMMONCOLUMNS);	
			strCurrent = htCommonCol.get(DomainConstants.SELECT_CURRENT);
			strParentId = htCommonCol.get(DomainConstants.SELECT_ID);
			strMaterialId = (String)mp.get(DomainConstants.SELECT_ID);
			strCAId = (String)htCommonCol.get(SCAID);
			//Fetching the Types Display name --Begin
			strTypeName= (String)htCommonCol.get(DomainConstants.SELECT_TYPE);
			strTypeDisplayName= getTypeDisplayName(context,strTypeName);
			//Fetching the Types Display name --End
			//Added by DSM Reports (Sogeti) for 2022x.5 (APR CW 2024) Defect 55875 - Start
			if(UIUtil.isNotNullAndNotEmpty(strCAId)  && !strCAId.contains(HYPERLINK_PIPE)) {
				if(htCommonCol.get(CAREALIZEDNAME) != null && htCommonCol.get(CAPROPOSEDNAME) != null) {
					hm.put(0, HYPERLINK+htCommonCol.get("CARealizedName")+HYPERLINK_PIPE+strCAId);
				} else if(htCommonCol.get(CAREALIZEDNAME) != null){
					hm.put(0, HYPERLINK+htCommonCol.get(CAREALIZEDNAME)+HYPERLINK_PIPE+strCAId);
				
				} else if(htCommonCol.get(CAPROPOSEDNAME) != null){
					hm.put(0, HYPERLINK+htCommonCol.get(CAPROPOSEDNAME)+HYPERLINK_PIPE+strCAId);
				} else {
					hm.put(0, DomainConstants.EMPTY_STRING);
				}
			} else {
				hm.put(0,htCommonCol.get(CAPROPOSEDNAME));
			}
			//Added by DSM Reports (Sogeti) for 2022x.5 (APR CW 2024) Defect 55875 - End
			hm.put(1, htCommonCol.get(pgV3Constants.SELECT_ATTRIBUTE_REASONFORCHANGE));
			hm.put(2, HYPERLINK+htCommonCol.get(DomainConstants.SELECT_NAME)+HYPERLINK_PIPE+strParentId);
			hm.put(3, htCommonCol.get(pgV3Constants.SELECT_ATTRIBUTE_TITLE));
			hm.put(4, strTypeDisplayName);
			hm.put(5, htCommonCol.get(DomainConstants.SELECT_REVISION));
			//22x State changes - start
			//Modified for Defect 51675:22x 01 CW -- Starts
			hm.put(6, htCommonCol.get(DomainConstants.SELECT_CURRENT)); 
			if(mp.containsKey(ISPARENT)) {
				hm.put(7, DomainConstants.EMPTY_STRING);
				hm.put(9, DomainConstants.EMPTY_STRING);				
			} else {
				hm.put(7, HYPERLINK+mp.get(DomainConstants.SELECT_NAME)+HYPERLINK_PIPE+strMaterialId);
				hm.put(9, mp.get(DomainConstants.SELECT_TYPE));					
			}						
			//22x State changes - end
			hm.put(8, mp.get(STRFINALCHILDREVISION)); //Added the code for 22x.06 Defect 57760 - Starts/Ends
			
			if(mp.containsKey(ISPARENT)) {
				hm.put(10, DomainConstants.EMPTY_STRING);
			} else {
				current = getMappedState((String)mp.get(DomainConstants.SELECT_CURRENT));
				hm.put(10, current);
			}
			//Modified for Defect 51675:22x 01 CW -- Ends
			//Added the code for the Defect ID 34908 Starts
			
			//Added the code for the Defect 51675 - Starts
			hm.put(11, mp.get(STRFINALCHILDTITLE));
				
			
			//Added the code for the Defect ID 34908 Ends
			hm.put(12, mp.get(STRFINALMINIMUMWEIGHT));
			//Added for Defect : 50138 Start
			if(strTypeName.equals(pgV3Constants.TYPE_DEVICEPRODUCTPART)) {
				hm.put(13,DomainConstants.EMPTY_STRING);
			}else {
				hm.put(13,mp.get(STRFINALQUANTITY));
			}
			//Added for Defect : 50138 End
			hm.put(14, mp.get(STRFINALMAXIMUMWEIGHT));
			
			hm.put(15, mp.get(STRFINALQUANTITYUNITOFMEASURE));
			//Added the code for the Defect 51675 - Ends
			
			//Modified for Defect 51675:22x 01 CW -- Ends
			qsComposite = (String) mp.get(ATTRFILL);
			isTargetMaterial = (String) mp.get(pgV3Constants.SELECT_ATTRIBUTE_ISTARGETMATERIAL);
			hm.put(16,getQSAndTargetValue(context,qsComposite,isTargetMaterial));
			drugActive = (String) mp.get(ATTRIBUTE_ACTIVEINGREDIENTFLAG);
			strIsColorant = (String) mp.get(ATTRIBUTE_ISCOLORANT);
			strPreservative = (String) mp.get(ATTRIBUTE_PRESERVATIVEFLAG);
			hm.put(17,StringUtil.join(getUsageFlagsValue(context,(String)mp.get(DomainConstants.SELECT_TYPE),drugActive,strIsColorant,strPreservative),pgV3Constants.SYMBOL_COMMA));
			relAttributeArg.put("applications", (String)mp.get(pgV3Constants.SELECT_ATTRIBUTE_APPLICATION));
			applications=getIdFromPhysicalId(context,JPO.packArgs(relAttributeArg));
			appList = new StringList(StringUtil.split(applications, pgV3Constants.SYMBOL_COMMA));
			hm.put(18,appList);
			strIsContaminant=(String)mp.get(pgV3Constants.SELECT_ATTRIBUTE_ISCONTAMINANT);
			hm.put(19, strIsContaminant);
			hm.put(20, mp.get(pgV3Constants.SELECT_ATTRIBUTE_CASNUMBER));
			
			if(mp.containsKey(ISPARENT)) {
				hm.put(21, htCommonCol.get(DomainConstants.SELECT_DESCRIPTION));
			}else {
				hm.put(21, mp.get(DomainConstants.SELECT_DESCRIPTION));
			}			
			
			//22x Substance and materials - Start			
			strChildId = (String)mp.get(DomainConstants.SELECT_ID);
			strDerivedId = htCommonCol.get("to["+pgV3Constants.RELATIONSHIP_DERIVED+STRFROM+DomainConstants.SELECT_ID);
			//Added code for Req Id : 33634 - Hyperlinks--Ends
			//Fetching the Types Display name --Begin
			strTypeName = htCommonCol.get(DomainConstants.SELECT_TYPE);
			strTypeDisplayName= i18nNow.getTypeI18NString(strTypeName, strLanguage);
			strChildTypeName = (String)mp.get(STRFINALCHILDTYPE);
			//Added the code for the Defect ID 34908 Starts
			if(UIUtil.isNotNullAndNotEmpty(strChildTypeName))
			{
				strChildTypeDisplayName= i18nNow.getTypeI18NString(strChildTypeName, strLanguage);
			
			//Added code for defect id 36860--Starts
			}else{
				strChildTypeDisplayName=DomainConstants.EMPTY_STRING;
			}
			//Added code for defect id 36860--Ends
			if(UIUtil.isNotNullAndNotEmpty(strChildId))
			{
				bHasAccess=accessCheck(context, strUserName, strChildId);
			}else{
				bHasAccess=true;
			}
			//Added the code for the Defect ID 34908 Ends
			
				if(mp.containsKey(ISPARENT)) {
					//Modified the code for 2018x.6 MAY CW Defect 46716 - starts
					strConsumerRecycled= getPostCycledValue((String) mp.get(STRCONSUMERCYCLATE));
					strIndustrialRecycled= getPostCycledValue((String)mp.get(STRINDUSTRIALCYCLATE));
					//Modified the code for 2018x.6 MAY CW Defect 46716 - Ends
				}
				else {
					strConsumerRecycled = getPostCycledValue((String)mp.get(pgV3Constants.SELECT_ATTRIBUTE_PGPOSTCONSUMERRECYCLEDCONTENT+".inputvalue"));
					strIndustrialRecycled = getPostCycledValue((String)mp.get("attribute[" + strPercentPostIndustrialRecyclate + "].inputvalue"));
				}
			
				//Added the code for the Defect 51675 - Starts
				hm.put(22, mp.get("level"));
				//Added the code for the Defect 51675 - Ends
			hm.put(23,mp.get(ATTR_PGNSPCG));		
			if (bHasAccess) {
				// Modified by DSM Reports (Sogeti) for 22x.03  (August CW 2023) Defect 53203 - Start
				hm.put(24, mp.get(STRFINALQUANTITY));
				// Modified by DSM Reports (Sogeti) for 22x.03  (August CW 2023) Defect 53203 - End
				hm.put(25, mp.get(pgV3Constants.SELECT_ATTRIBUTE_MANUFACTURER));
				hm.put(26, mp.get("Sequence value"));
				hm.put(27, mp.get(pgV3Constants.SELECT_ATTRIBUTE_MARKETINGNAME));
				//Added by DSM Reports (Sogeti) for 2022x.5 (APR CW 2024) Defect 57336 - Start
				hm.put(28, mp.get(STRFINALENVCLASS));
				//Added by DSM Reports (Sogeti) for 2022x.5 (APR CW 2024) Defect 57336 - End
				//Added by DSM Reports (Sogeti) for 2022x.4 (APR CW 2024) Requirement 48330 - End
				hm.put(29, mp.get("MaterialLayer"));
				//Updated for Defect : 30814 Starts
				//Modified the code for 2022x.02 May CW Defect 52204 - Starts
				hm.put(30, mp.get(STRMINIMUMPERCENTAGEWEIGHTBYWEIGHT));
				hm.put(31, mp.get(STRMAXIMUMPERCENTAGEWEIGHTBYWEIGHT));
				//Modified the code for 2022x.02 May CW Defect 52204 - Ends
				hm.put(32, strConsumerRecycled);
				hm.put(33, strIndustrialRecycled);
				//Updated for Defect : 30814 Ends
				//Added the code for the Defect 51675 - Starts
				hm.put(34, mp.get(STRFINALCOMMENT));	
				//Added the code for the Defect 51675 - Ends
			} else {
				hm.put(24, NO_ACCESS);
				hm.put(25, NO_ACCESS);
				hm.put(26, NO_ACCESS);
				hm.put(27, NO_ACCESS);
				hm.put(28,NO_ACCESS);
				//Added by DSM Reports (Sogeti) for 2022x.5 (APR CW 2024) Defect 57336 - Start
				hm.put(29,NO_ACCESS);
				//Added by DSM Reports (Sogeti) for 2022x.5 (APR CW 2024) Defect 57336 - End
				hm.put(30, NO_ACCESS);
				hm.put(31, NO_ACCESS);
				hm.put(32, NO_ACCESS);
				hm.put(33, NO_ACCESS);
				hm.put(34, NO_ACCESS);	
			}
			
			hm.put(35,mp.get("Certification_Name"));
			hm.put(36,mp.get("Certification_Status"));
			hm.put(37,mp.get("Certification_ExpDate"));
			hm.put(38,mp.get("Certification_SupDoc"));
			hm.put(39,mp.get("Certification_IntendedCerti"));
			
			//Modified the code for Req 42010:18x6 Apr CW -- Starts
			//Updated code for Req Id : 33634 - Hyperlinks--Starts
			hm.put(40, HYPERLINK+htCommonCol.get("to["+pgV3Constants.RELATIONSHIP_DERIVED+"].from.name")+HYPERLINK_PIPE+strDerivedId);
			//Updated code for Req Id : 33634 - Hyperlinks--Ends
			hm.put(41, htCommonCol.get("to["+pgV3Constants.RELATIONSHIP_DERIVED+STRFROM+pgV3Constants.SELECT_ATTRIBUTE_TITLE));
			if(mp.containsKey(ISPARENT)) {
				hm.put(42, mp.get(STRFINALPARTFAMILYNAME));
			} else {
				hm.put(42, mp.get("PartFamilyName"));
			}	
			//22x Substance and materials - End
			//For Cells Creation in each Row
			hmSize = hm.size();
			XSSFCellStyle style = workbook.createCellStyle();
			style = setForeGroundColor(strCurrent, style);
			//Added by DSM Reports (Sogeti) for 2022x.5 (APR CW 2024) Defect 55875 - Start
			XSSFCellStyle style1 = workbook.createCellStyle();
			//Added by DSM Reports (Sogeti) for 2022x.5 (APR CW 2024) Defect 55875 - End
			for(int j=0;j<hmSize;j++){
				//Modified the code for _2022x_Aug CW Req-47097
				// Modified by DSM Reports (Sogeti) for 22x.03 (August CW 2023) Defect 54091 - Start
				Cell cell = row.createCell(columnCount1++);
				if (j == 2) {
					style = makeColumnNumeric(workbook, style);
				}
				cell.setCellStyle(style);
				
				// Modified by DSM Reports (Sogeti) for 22x.03 (August CW 2023) Defect 54091 - End
				//Modified the code for _2022x_Aug CW Req-47097
				Object obj = hm.get(j);
				if(obj != null){

					if(hm.get(j) instanceof StringList){
						strCellValue = (String)(hm.get(j).toString().replace("[", "").replace("]", ""));
					} else{
						strCellValue = (String)hm.get(j);
					}					
					if(UIUtil.isNotNullAndNotEmpty(strCellValue) && !strCellValue.equals("null")) { 
						if(strCellValue.startsWith(HYPERLINK_COMPARE)){
							strSplittedValue = strCellValue.split("\\|",-1); 
							strHyperlinkId = strSplittedValue[(strSplittedValue.length)-1];
							strValue = strSplittedValue[(strSplittedValue.length)-2];
							//Added code for 2018x.6 Requirement id 36700 Ability to generate Part and Spec report with without hyperlink Starts
							if(pgV3Constants.TRUE.equalsIgnoreCase(strHyperlink) && iRowCountAll < iHyperLinkLimit){
								getHyperlink(context,cell,workbook,strValue,strHyperlinkId,strCurrent);
							
							} else if(UIUtil.isNotNullAndNotEmpty(strValue)) {					
								cell.setCellValue(strValue);
							}
							//Added code for 2018x.6 Requirement id 36700 Ability to generate Part and Spec report with without hyperlink Ends
						}else {
							cell.setCellValue(strCellValue);
							//Added by DSM Reports (Sogeti) for 2022x.5 (APR CW 2024) Defect 55875 - Start
							if(j == 0) {
								style1.cloneStyleFrom(style);
								style1.setWrapText(true);
								cell.setCellStyle(style1);
							}
							//Added by DSM Reports (Sogeti) for 2022x.5 (APR CW 2024) Defect 55875 - End
						}
					}else{
						cell.setCellValue("");
					}
				} else {
					cell.setCellValue("");
				}
			}
		}
		sheetFormatter(sheetMaterialsAndComposition); // Added by DSM Reports (Sogeti) for 22x.04 (Dec CW 2023) Defect 56156 - START/END
	}
	catch (Exception e) {
		e.printStackTrace();
	}

	}
//22x updgrade defect 50261 - Modified the method to support substance and materials changes - End	
//Added for Defect - 32736--starts
/** This method is used to get Mapped type for Formulation Part
 * @param context
 * @param strId
 * @return
 * @throws FrameworkException
 */
private String getMappedType(Context context, String strId) throws FrameworkException {
	String formulationType = DomainConstants.EMPTY_STRING;
	try{
		DomainObject domObj = DomainObject.newInstance(context, strId);
		StringList objSelects = StringList.create(
					"type.kindof[".concat(pgV3Constants.TYPE_FORMULATIONPART).concat("]"),
					"to[".concat(pgV3Constants.RELATIONSHIP_FORMULATIONPROPAGATE).concat(STRFROM).concat(pgV3Constants.SELECT_ATTRIBUTE_FORMULATIONTYPE),
					"to[".concat(PropertyUtil.getSchemaProperty(context,"relationship_FormulationPropagateHistory")).concat(STRFROM).concat(pgV3Constants.SELECT_ATTRIBUTE_FORMULATIONTYPE));
		ContextUtil.pushContext(context);    		
		Map<Object,Object> mapObj = domObj.getInfo(context, objSelects);
		ContextUtil.popContext(context);
		boolean isFormulationPart = Boolean.parseBoolean((String)mapObj.get("type.kindof[".concat(pgV3Constants.TYPE_FORMULATIONPART).concat("]")));
		if(isFormulationPart){
			ContextUtil.pushContext(context,PropertyUtil.getSchemaProperty(context,"person_UserAgent"),DomainConstants.EMPTY_STRING,DomainConstants.EMPTY_STRING);
			formulationType = (String)mapObj.get("to[".concat(pgV3Constants.RELATIONSHIP_FORMULATIONPROPAGATE).concat(STRFROM).concat(pgV3Constants.SELECT_ATTRIBUTE_FORMULATIONTYPE));
			if(BusinessUtil.isNullOrEmpty(formulationType))
				formulationType = (String)mapObj.get("to[".concat(PropertyUtil.getSchemaProperty(context,"relationship_FormulationPropagateHistory")).concat(STRFROM).concat(pgV3Constants.SELECT_ATTRIBUTE_FORMULATIONTYPE));
			ContextUtil.popContext(context);
			}
	}catch(Exception e){
		e.printStackTrace();
	}
	return formulationType;
}
//Added for Defect - 32736--ends

//Added for Requirement Id : 34942- starts

/**This method is used to get Post Consumer Recycled values
 * @param context
 * @param mlCompMatChild
 * @param strUserName
 * @param mpCommonColumnsDetail
 * @return
 * @throws FrameworkException
 */
 /*
public String getPostConsumerCycledValue(Context context,MapList mlCompMatChild, String strUserName, Map<String,String> mpCommonColumnsDetail) throws FrameworkException {
	String strTotalPostRecycledContent = DomainConstants.EMPTY_STRING;
	String strCmpMatChildId = DomainConstants.EMPTY_STRING;
	String strQuantity = DomainConstants.EMPTY_STRING;
	String strConsumerRecyclate = DomainConstants.EMPTY_STRING;
	BigDecimal dDefaultValue = BigDecimal.valueOf(0.0);
	BigDecimal dTargetPercent = dDefaultValue;
	BigDecimal dDivideByHundred = BigDecimal.valueOf(100.0);
	BigDecimal dPostRecycledContent = dDefaultValue;
	BigDecimal dTempPostRecycledContent = dDefaultValue;
	BigDecimal dFinalPostRecycledContent = dDefaultValue;
	Map<String,String> mpCompMatChild = new HashMap<>();
	Map<String,Object> mpCompMatChild1 = new HashMap<>();
	int mlCompMatChildSize=mlCompMatChild.size();
	boolean bCompMatAcess=false;
	//Modified for Defect - 34908 Starts
	String strLevel = DomainConstants.EMPTY_STRING;
	try{
		for(int i=0;i<mlCompMatChildSize;i++){
			mpCompMatChild=(Map)mlCompMatChild.get(i);
			strCmpMatChildId=mpCompMatChild.get(DomainConstants.SELECT_ID);
			strLevel =mpCompMatChild.get(STRFINALLEVEL);
			bCompMatAcess=accessCheck(context, strUserName, strCmpMatChildId); 
			if(bCompMatAcess && "1".equals(strLevel))
			//Modified for Defect - 34908 Ends
			{
			strQuantity = mpCompMatChild.get(pgV3Constants.SELECT_ATTRIBUTE_QUANTITY+STRINPUTVALUE);	
			DomainObject dobjCompChild = DomainObject.newInstance(context, strCmpMatChildId);
			mpCompMatChild1=getSubsMaterials(context,strUserName,dobjCompChild,mpCommonColumnsDetail);
			strConsumerRecyclate = (String)mpCompMatChild1.get(pgV3Constants.SELECT_ATTRIBUTE_PGPOSTCONSUMERRECYCLEDCONTENT+STRINPUTVALUE);
			if (UIUtil.isNotNullAndNotEmpty(strQuantity))
			{
				dTargetPercent = new BigDecimal(strQuantity);
				dTargetPercent = dTargetPercent.divide(dDivideByHundred);
			}
			if(UIUtil.isNotNullAndNotEmpty(strConsumerRecyclate))
			{
				dPostRecycledContent = new BigDecimal(strConsumerRecyclate);  
			}
			dTempPostRecycledContent = dPostRecycledContent.multiply(dTargetPercent);
			dFinalPostRecycledContent = dFinalPostRecycledContent.add(dTempPostRecycledContent);	
		}
		}
		//Added for the code for 2018x.6 MAY CW Defect 46716 - starts	
		if(dFinalPostRecycledContent.compareTo(dDefaultValue)==0){
			dFinalPostRecycledContent = dDefaultValue;
		}
		//Added for the code for 2018x.6 MAY CW Defect 46716 - Ends
			//Modified the code for 2018x.6 Apr CW Defect 46629 - starts 
			strTotalPostRecycledContent = String.valueOf(dFinalPostRecycledContent);
			//Modified the code for 2018x.6 Apr CW Defect 46629 - ends
	
	}catch(Exception e){
		e.printStackTrace();
	}
	return strTotalPostRecycledContent;
}
*/
/**This method is used to get Post Industrial Recycled values
 * @param context
 * @param mlCompMatChild
 * @param strUserName
 * @param mpCommonColumnsDetail
 * @return String
 * @throws FrameworkException
 */
//Changing the Access level to be accessibles to other class methods
/*
public String getPostIndustrialCycledValue(Context context,MapList mlCompMatChild, String strUserName, Map<String,String> mpCommonColumnsDetail) throws FrameworkException {
	String strTotalPostRecycledContent = DomainConstants.EMPTY_STRING;
	String strPercentPostIndustrialRecyclate = PropertyUtil.getSchemaProperty(context,INDUSTRIALCYCLATEATTRIBUTESELECT);
	String strCmpMatChildId = DomainConstants.EMPTY_STRING;
	String strQuantity = DomainConstants.EMPTY_STRING;
	String strIndustrialRecyclate = DomainConstants.EMPTY_STRING;
	BigDecimal dDefaultValue = BigDecimal.valueOf(0.0);
	BigDecimal dTargetPercent = dDefaultValue;
	BigDecimal dDivideByHundred = BigDecimal.valueOf(100.0);
	BigDecimal dPostRecycledContent = dDefaultValue;
	BigDecimal dTempPostRecycledContent = dDefaultValue;
	BigDecimal dFinalPostRecycledContent = dDefaultValue;
	Map<String,String> mpCompMatChild = new HashMap<>();
	Map<String,Object> mpCompMatChild1 = new HashMap<>();
	int mlCompMatChildSize=mlCompMatChild.size();
	boolean bCompMatAcess=false;
	//Modified for Defect - 34908 Starts
	String strLevel = DomainConstants.EMPTY_STRING;
	try{
		for(int i=0;i<mlCompMatChildSize;i++){
			mpCompMatChild=(Map)mlCompMatChild.get(i);
			strCmpMatChildId=mpCompMatChild.get(DomainConstants.SELECT_ID);
			strLevel =mpCompMatChild.get(STRFINALLEVEL);
			bCompMatAcess=accessCheck(context, strUserName, strCmpMatChildId);
			if(bCompMatAcess && "1".equals(strLevel))
			//Modified for Defect - 34908 Ends
			{
			strQuantity = mpCompMatChild.get(pgV3Constants.SELECT_ATTRIBUTE_QUANTITY+STRINPUTVALUE);	
			DomainObject dobjCompChild = DomainObject.newInstance(context, strCmpMatChildId);
			mpCompMatChild1=getSubsMaterials(context,strUserName,dobjCompChild,mpCommonColumnsDetail);
			strIndustrialRecyclate = (String) mpCompMatChild1.get("attribute[" + strPercentPostIndustrialRecyclate + "]"+STRINPUTVALUE);
			if (UIUtil.isNotNullAndNotEmpty(strQuantity))
			{
				dTargetPercent = new BigDecimal(strQuantity);
				dTargetPercent = dTargetPercent.divide(dDivideByHundred);
			}
			if(UIUtil.isNotNullAndNotEmpty(strIndustrialRecyclate))
			{
				dPostRecycledContent = new BigDecimal(strIndustrialRecyclate);  
			}
			dTempPostRecycledContent = dPostRecycledContent.multiply(dTargetPercent);
			dFinalPostRecycledContent = dFinalPostRecycledContent.add(dTempPostRecycledContent);	
		}
		}
			//Added the code for 2018x.6 Apr CW Defect 46629 - starts 
		
		//Added for the code for 2018x.6 MAY CW Defect 46716 - starts	
				if(dFinalPostRecycledContent.compareTo(dDefaultValue)==0){
					dFinalPostRecycledContent = dDefaultValue;
				}
				//Added for the code for 2018x.6 MAY CW Defect 46716 - Ends
			
			strTotalPostRecycledContent = String.valueOf(dFinalPostRecycledContent);

		//Added for Req 46629:18x6 Apr CW -- Ends
	}catch(Exception e){
		e.printStackTrace();
	}
	return strTotalPostRecycledContent;
}
*/
/**This method is used to get Post Recycled values
 * @param postCycledAttributeValue
 * @return String
 */
private String getPostCycledValue(String postCycledAttributeValue) {
	String strTotalPostRecycledContent = DomainConstants.EMPTY_STRING;
	BigDecimal dDefaultValue = BigDecimal.valueOf(0.0);
	BigDecimal dPostRecycledContent = dDefaultValue;
	try{
		if(UIUtil.isNotNullAndNotEmpty(postCycledAttributeValue) && !CONST_DENIED.equalsIgnoreCase(postCycledAttributeValue))
		{
			dPostRecycledContent = new BigDecimal(postCycledAttributeValue); 
			// Added by DSM Reports (Sogeti) for 22x.03  (August CW 2023) Defect 53203 - Start
			//Modified for 2018x.6 Apr CW Defect 46629 - starts
			strTotalPostRecycledContent = String.valueOf(dPostRecycledContent);
			//Modified for 2018x.6 Apr CW Defect 46629 - Ends
			// Added by DSM Reports (Sogeti) for 22x.03  (August CW 2023) Defect 53203 - End			
		}

	}catch(Exception e){
		e.printStackTrace();
	}
	return strTotalPostRecycledContent;
}

//Added for Requirement Id : 34942- ends
/**
 * this method is used to retrieve the JVM Instance for logging
 * @param context is the matrix context
 * @param none
 * @return string
 * @throws IOException 
 * @throws Exception
 */
private String getJVMInstance() throws Exception {				
	String strCatalinaPath=System.getProperty(CATALINA_BASE);
	String strInstanceName=DomainConstants.EMPTY_STRING;
	try {
		if(UIUtil.isNotNullAndNotEmpty(strCatalinaPath) && strCatalinaPath.contains(PATH_SEPARATOR)){			
			StringList slInfo=FrameworkUtil.split(strCatalinaPath, PATH_SEPARATOR);
			strInstanceName=slInfo.get(slInfo.size()-2);
		}
	} catch (Exception e) {
		outLog.print("Exception in  getJVMInstance: "+e+"\n");
		outLog.flush();	
	}
	strInstanceName = (null != strInstanceName) ? strInstanceName : "";		
	return strInstanceName;
}


//Added for Reuirement Id : 35249--starts
/**
 * This method is used to get GPS Assessment data
 * @param args
 * @return MapList
 * @throws Exception
 */
private String getBusinessAreaForGpsAssessment(Context context, String strTaskId) throws Exception {
	StringList slSelect=new StringList();
	StringList slBusinessArea = new StringList();
	Object objBA = null;
	Map<String,Object> mpObject = null;
	HashSet<String> hSetUniqueString = new HashSet();
	StringList strNonDuplicateList = new StringList();
	StringBuilder sBuilder = new StringBuilder();
	slSelect.addElement(DomainConstants.SELECT_ID);
	slSelect.add(AWLUtil.strcat(STRFROMSTART, pgV3Constants.RELATIONSHIP_PGDOCUMENTTOBUSINESSAREA, STRTONAME));
	try{
		String strTypeListForPDP = EnoviaResourceBundle.getProperty(context, EMXCPN, context.getLocale(),"emxCPN.ProductData.PDPTypeForBAPCP.AllowedTypes");
		DomainObject dobjTask = DomainObject.newInstance(context, strTaskId);
		MapList mpReturnList =  dobjTask.getRelatedObjects(context, //context
								RELATIONSHIP_PG_GPSASSESSMENTTASKINPUT,//rel pattern
								strTypeListForPDP,//type pattern
								slSelect,//bus select
								null, //rel select
								false,//get To
								true, //get From
								(short)1,//recurse
								null, //obj where clause
								null, //rel where clause
								0); //limit
		if(mpReturnList != null && !mpReturnList.isEmpty())
		{
			for(int i=0;i<mpReturnList.size();i++) {
				mpObject = (Map<String, Object>) mpReturnList.get(i);
				slBusinessArea.clear();
				objBA = mpObject.get(AWLUtil.strcat(STRFROMSTART, pgV3Constants.RELATIONSHIP_PGDOCUMENTTOBUSINESSAREA, STRTONAME));
				if(objBA!=null){
					if(objBA instanceof String){
						slBusinessArea.addElement((String)objBA);
					}
					else{
						slBusinessArea.addAll((StringList) objBA);
					}
					if(i>0 && BusinessUtil.isNotNullOrEmpty(sBuilder.toString()))
						sBuilder.append(COMMA);

					if(null != slBusinessArea && !slBusinessArea.isEmpty()){
						for(String strBAName : slBusinessArea){
							if(hSetUniqueString.add(strBAName)){
								strNonDuplicateList.addElement(strBAName);
							}
						}
					}
				}
			}
			sBuilder.append(StringUtil.join(strNonDuplicateList,", "));
		}	
	} catch (Exception e){
		e.printStackTrace();	 
	}	
	return sBuilder.toString();
}

/**Added method for Requirement 38092 Refactor Part And Spec report: to fetch connected part of CA
 * @param context
 * @param strChangeActions
 * @return
 * @throws Exception
 */
private String getConnectedPartFromCA(Context context, String strChangeActions) throws Exception{
	String strCAName = DomainConstants.EMPTY_STRING;
	StringList slIndividualCAName = StringUtil.split(strChangeActions, pgV3Constants.SYMBOL_COMMA);
	StringList slSelect = new StringList();			
	slSelect.add(DomainConstants.SELECT_ID);
	slSelect.add(DomainConstants.SELECT_NAME);
	slSelect.add(DomainConstants.SELECT_CURRENT);
	slSelect.add(DomainConstants.SELECT_LAST_ID);
	StringBuffer sbPartsName = new StringBuffer();
	//Added code for May22_CW Req 42705 Start
	StringBuffer sbPartsNameCompare = new StringBuffer();
	//Added code for May22_CW Req 42705 End
	String strPartName = DomainConstants.EMPTY_STRING;
	MapList mlChangeAction = new MapList();
	Map<String,Object> mp = new HashMap<>();
	String strCAObjectId = DomainConstants.EMPTY_STRING;
	MapList mlRelatedParts = new MapList();
	Map<String,Object> mpRelatedPart = new HashMap<>();
	Map<String,Object> mpTSInfo = new HashMap<>();
	String strRelatedPartObjectId = DomainConstants.EMPTY_STRING;
	DomainObject dobjRelatedPart = null;
	Iterator itr=null;
	Iterator itr2=null;
	//Added code for Jan22_CW defect for 45497 Strats
	String strComparePart = "";
	//Added code for Jan22_CW defect for 45497 Ends
	for (Object CAName : slIndividualCAName) {
		strCAName = String.valueOf(CAName).trim();	
		outLog.print("Processing : "+strCAName+"\n");
	 	outLog.flush(); 
	 	mlChangeAction=DomainObject.findObjects(context,//context
	 											pgV3Constants.TYPE_CHANGEACTION,//type 
	 											strCAName,//name
	 											DomainConstants.QUERY_WILDCARD,//revision
	 											DomainConstants.QUERY_WILDCARD,//owner
	 											pgV3Constants.VAULT_ESERVICEPRODUCTION,//vault
	 											DomainConstants.EMPTY_STRING,//where clause
	 											false,//expand type
	 											slSelect);//obejct select
		if(!mlChangeAction.isEmpty()){
			itr = mlChangeAction.iterator();
			while(itr.hasNext()){
				mp = (Map)itr.next();
				strCAObjectId= (String)mp.get(DomainConstants.SELECT_ID);	
				//Code Upgrade for 2018x Data Model Starts
				//Context has been pushed with User Agent to get all the Connected parts with CA
				ContextUtil.pushContext(context,PropertyUtil.getSchemaProperty(context,pgV3Constants.PERSON_USER_AGENT),DomainConstants.EMPTY_STRING,DomainConstants.EMPTY_STRING);
				mlRelatedParts = getProposedRealizedActivitiesFromCA(context,strCAObjectId,slSelect);
				//Code Upgrade for 2018x Data Model Ends
				ContextUtil.popContext(context);
				itr2 = mlRelatedParts.iterator();
				while(itr2.hasNext()){
					mpRelatedPart = (Map)itr2.next();
					strRelatedPartObjectId= (String)mpRelatedPart.get(DomainConstants.SELECT_ID);									
					dobjRelatedPart = DomainObject.newInstance(context, strRelatedPartObjectId);
					//If current State of Part is Obsolete then adding in Log file --Begin															
					mpTSInfo= dobjRelatedPart.getInfo(context, slSelect);
					strPartName = (String) mpTSInfo.get(DomainConstants.SELECT_NAME);
					//Added code for Jan22_CW defect for 45497 Strats
					strComparePart = pgV3Constants.SYMBOL_TILDA+strPartName+pgV3Constants.SYMBOL_TILDA;
					//Added code for Jan22_CW defect for 45497 Ends
					if(UIUtil.isNotNullAndNotEmpty(strPartName) && !sbPartsNameCompare.toString().contains(strComparePart)){
						//Added code for May22_CW Req 42705 Start
						sbPartsNameCompare.append(strComparePart).append(pgV3Constants.SYMBOL_COMMA);
						//Added code for May22_CW Req 42705 End
						sbPartsName.append(strPartName).append(pgV3Constants.SYMBOL_COMMA);
					}
				}
			}
		}
	}
	return sbPartsName.toString();
}

/**Added method for 2018x.6 Requirement 38092 Refactor Part And Spec report: to create cell for sheet
 * @param context
 * @param strColumnNames
 * @param rowHeaderWorkSheet
 * @param cellStyleWorkSheet
 */
public static void createCellForWorksheet(Context context, String strColumnNames, XSSFRow rowHeaderWorkSheet, XSSFCellStyle cellStyleWorkSheet, String strEachColumn){
	String strColumnName = DomainConstants.EMPTY_STRING;
	String strColumnValue = DomainConstants.EMPTY_STRING;
	String columnName = DomainConstants.EMPTY_STRING;
	StringList slIndividualColumnNames = StringUtil.split(strColumnNames, COMMA);
	int slIndividualColumnNamesSize = slIndividualColumnNames.size();
	for (int i = 0;i<slIndividualColumnNamesSize;i++) {
		columnName = slIndividualColumnNames.get(i);
		strColumnName = String.valueOf(columnName).trim();
		if(i<=6){
			strColumnValue = EnoviaResourceBundle.getProperty(context, EMXCPN, context.getLocale(),"emxCPN.FamilyCareReport.Worksheet.Column."+strColumnName);
		
		} else{
			strColumnValue = EnoviaResourceBundle.getProperty(context, EMXCPN, context.getLocale(),strEachColumn+"."+strColumnName);
		}
		Cell cell = rowHeaderWorkSheet.createCell(i);
		cell.setCellStyle(cellStyleWorkSheet);
		cell.setCellValue(strColumnValue.trim());	
	}
}

/**Added method for 2018x.6 Requirement 38092 Refactor Part And Spec report: Attribute Tab
 * @param context
 * @param strTypeName
 * @param mp
 * @param ctxObjectId
 * @return
 * @throws MatrixException
 */
private String getLastUpdatedUser(Context context,String strTypeName, Map<String, Object> mp, String ctxObjectId) throws MatrixException {
	String lastUpdatedUser = DomainConstants.EMPTY_STRING;
	String lastModifiedHistory= DomainConstants.EMPTY_STRING;
	if(UIUtil.isNotNullAndNotEmpty(strTypeName) && (pgV3Constants.TYPE_PGAPPROVEDSUPPLIERLIST).equalsIgnoreCase(strTypeName))  {
        lastUpdatedUser = (String)mp.get(pgV3Constants.SELECT_ATTRIBUTE_PGLASTUPDATEUSER);
	} else {
		//Reverted code based on information for App Manager - We should never use attribute value.
		if(UIUtil.isNotNullAndNotEmpty(ctxObjectId)){
			DomainObject dobProductData = DomainObject.newInstance(context,ctxObjectId);
			StringList slHistoryInfo = dobProductData.getHistory(context);
			if(null != slHistoryInfo && !slHistoryInfo.isEmpty()){
				for(int j=slHistoryInfo.size()-1;j>0;j--){
                     lastModifiedHistory = slHistoryInfo.get(j);
                     if(UIUtil.isNotNullAndNotEmpty(lastModifiedHistory)){
                             lastUpdatedUser = lastModifiedHistory.substring(lastModifiedHistory.indexOf("user:")+6, lastModifiedHistory.indexOf("time:")-2).trim();
                             if(!(pgV3Constants.PERSON_USER_AGENT).equalsIgnoreCase(lastUpdatedUser)){
                                 break;
                             }
                     	}
					}
				}
			}
		}
	return lastUpdatedUser;
}


/**Added method for 2018x.6 Requirement 38092 Refactor Part And Spec report: Attribute Tab
 * @param strHasArt
 * @return
 */
private String getHasArt(String strHasArt) {
	if(UIUtil.isNotNullAndNotEmpty(strHasArt)){
		if(pgV3Constants.TRUE.equalsIgnoreCase(strHasArt)){
			strHasArt = pgV3Constants.KEY_YES_VALUE;
		}
		else if(pgV3Constants.FALSE.equalsIgnoreCase(strHasArt)){
			strHasArt = pgV3Constants.KEY_NO_VALUE;
		}
	} else{
		strHasArt = DomainConstants.EMPTY_STRING;
	}
	return strHasArt;
}

/**Added method for 2018x.6 Requirement 38092 Refactor Part And Spec report: Attribute tab
 * @param strHasMultipleGTINS
 * @return
 */
private String getHasMultipleGTINS(String strHasMultipleGTINS) {
	if(UIUtil.isNotNullAndNotEmpty(strHasMultipleGTINS)){
		if(pgV3Constants.TRUE.equalsIgnoreCase(strHasMultipleGTINS)){
			strHasMultipleGTINS = pgV3Constants.KEY_YES_VALUE;
		}
		else if(pgV3Constants.FALSE.equalsIgnoreCase(strHasMultipleGTINS)){
					strHasMultipleGTINS = pgV3Constants.KEY_NO_VALUE;
		}
	} else{
		strHasMultipleGTINS = DomainConstants.EMPTY_STRING;
	}
	return strHasMultipleGTINS;
}

/**Added method for 2018x.6 Requirement 38092 Refactor Part And Spec report: Attribute Tab
 * @param strIsThisABattery
 * @return
 */
private String getIsThisABattery(String strIsThisABattery) {
	if(UIUtil.isNotNullAndNotEmpty(strIsThisABattery)){
		if(pgV3Constants.TRUE.equalsIgnoreCase(strIsThisABattery) || pgV3Constants.KEY_YES_VALUE.equalsIgnoreCase(strIsThisABattery)){
			strIsThisABattery = pgV3Constants.KEY_YES_VALUE;
		}
		else if(pgV3Constants.FALSE.equalsIgnoreCase(strIsThisABattery) || pgV3Constants.KEY_NO_VALUE.equalsIgnoreCase(strIsThisABattery)){
			strIsThisABattery = pgV3Constants.KEY_NO_VALUE;
		}
	} else{
		strIsThisABattery = DomainConstants.EMPTY_STRING;
	}
	return strIsThisABattery;
}

/**Added method for 2018x.6 Requirement 38092 Refactor Part And Spec report: Attribute Tab
 * @param strContainsBattery
 * @return
 */
private String getContainsBattery(String strContainsBattery) {
	if(UIUtil.isNotNullAndNotEmpty(strContainsBattery)){
	       if(pgV3Constants.TRUE.equalsIgnoreCase(strContainsBattery)){
	              strContainsBattery = pgV3Constants.KEY_YES_VALUE;
	       }
	       else if(pgV3Constants.FALSE.equalsIgnoreCase(strContainsBattery)){
	              strContainsBattery = pgV3Constants.KEY_NO_VALUE;
	       }
	} else{
		strContainsBattery = DomainConstants.EMPTY_STRING;
	}
	return strContainsBattery;
}

/**Added method for 2018x.6 Requirement 38092 Refactor Part And Spec report: Attribute Tab
 * @param mp
 * @return
 * @throws FrameworkException 
 */
private String getBrand(Context context,String strId) throws FrameworkException {
	String strBrand = DomainConstants.EMPTY_STRING;
	DomainObject dobj = DomainObject.newInstance(context, strId);
	StringList slBrand = dobj.getInfoList(context, "from["+pgV3Constants.RELATIONSHIP_PGPDTEMPLATESTOPGBRAND+"].to.name");
	if (null!=slBrand && !slBrand.isEmpty()){
		strBrand = slBrand.toString().replace("[", "").replace("]", "");
	}
	return strBrand;
}

/**Added method for 2018x.6 Requirement 38092 Refactor Part And Spec report: Attribute Tab
 * @param strTypeName
 * @param slAccessTypes
 * @param strMarketingName
 * @param mpAttrData
 * @return
 */
private String getMarketingName(String strTypeName, StringList slAccessTypes, String strMarketingName, Map<String, Object> mpAttrData) {
	//Updated code for 2018x6.1 Oct Requirement 39403 Add attribute Product Form in Attribute of Part and Spec report Starts
	Map<String,Object> htCommonCol= (Map<String, Object>) mpAttrData.get(COMMONCOLUMNS);
	String strOriginatingSource =  (String) htCommonCol.get(pgV3Constants.SELECT_ATTRIBUTE_PGORIGINATINGSOURCE);
	if((UIUtil.isNotNullAndNotEmpty(strTypeName) && slAccessTypes.contains(strTypeName))){
		if(strOriginatingSource.contains("CSS") || pgV3Constants.TYPE_POA.equalsIgnoreCase(strTypeName)) {
			strMarketingName = (String) mpAttrData.get(AWLUtil.strcat("attribute[",pgV3Constants.ATTRIBUTE_PGPRODUCTFORM, "]"));
			
		}
		else if(pgV3Constants.DSM_ORIGIN.equalsIgnoreCase(strOriginatingSource)){
			strMarketingName = (String)mpAttrData.get("to["+pgV3Constants.RELATIONSHIP_OWNINGPRODUCTLINE+"].from["+TYPE_PG_PLIPRODUCTFORM+"].name");
			
		}
		//Updated code for 2018x6.1 Oct Requirement 39403 Add attribute Product Form in Attribute of Part and Spec report Ends
	} else{
		strMarketingName = DomainConstants.EMPTY_STRING;	
	}
	return strMarketingName;
}

/**Added method for 2018x.6 Requirement 36698, 37286, 37290, 37294, 37295 Report of BOM children parts
 * @param context
 * @param strPartNames
 * @param strUserName
 * @return
 * @throws Exception
 */
private String getExpandProductChildBOM(Context context, String strPartNames, String strUserName,Map<String,String> mPassValue) throws Exception {
	StringList slEachPartName = StringUtil.split(strPartNames, pgV3Constants.SYMBOL_COMMA);
	String strPartType = DomainConstants.EMPTY_STRING;
	StringList slSelect = new StringList();
	slSelect.add(DomainConstants.SELECT_ID);
	slSelect.add(DomainConstants.SELECT_TYPE);
	//Added code for defect 42382 starts
	slSelect.add(DomainConstants.SELECT_REVISION);
	slSelect.add(DomainConstants.SELECT_CURRENT);
	//Added code for defect 42382 starts
	String strPartId = DomainConstants.EMPTY_STRING;
	StringBuffer sbPartNames = new StringBuffer();
	String strChildPart = DomainConstants.EMPTY_STRING;
	String strConsumerUnitPart = PropertyUtil.getSchemaProperty(context, "type_ConsumerUnitPart");
	String strValidType = (new StringBuffer()).append(pgV3Constants.SYMBOL_TILDA).append(pgV3Constants.TYPE_FINISHEDPRODUCTPART).append(pgV3Constants.SYMBOL_TILDA).append(pgV3Constants.TYPE_PGFINISHEDPRODUCT).append(pgV3Constants.SYMBOL_TILDA).append(pgV3Constants.TYPE_PGTRANSPORTUNITPART).append(pgV3Constants.SYMBOL_TILDA).append(pgV3Constants.TYPE_PGCONSUMERUNITPART).append(pgV3Constants.SYMBOL_TILDA).append(strConsumerUnitPart).append(pgV3Constants.SYMBOL_TILDA).append(pgV3Constants.TYPE_PGCUSTOMERUNITPART).append(pgV3Constants.SYMBOL_TILDA).append(pgV3Constants.TYPE_PACKAGINGASSEMBLYPART).append(pgV3Constants.SYMBOL_TILDA).append(pgV3Constants.TYPE_FABRICATEDPART).append(pgV3Constants.SYMBOL_TILDA).append(pgV3Constants.TYPE_PGINNERPACKUNITPART).append(pgV3Constants.SYMBOL_TILDA).toString();		
	String strValidInputType = (new StringBuffer()).append(pgV3Constants.TYPE_FINISHEDPRODUCTPART).append(pgV3Constants.SYMBOL_COMMA).append(pgV3Constants.TYPE_PGFINISHEDPRODUCT).append(pgV3Constants.SYMBOL_COMMA).append(pgV3Constants.TYPE_PGTRANSPORTUNITPART).append(pgV3Constants.SYMBOL_COMMA).append(pgV3Constants.TYPE_PGCONSUMERUNITPART).append(pgV3Constants.SYMBOL_COMMA).append(strConsumerUnitPart).append(pgV3Constants.SYMBOL_COMMA).append(pgV3Constants.TYPE_PGCUSTOMERUNITPART).append(pgV3Constants.SYMBOL_COMMA).append(pgV3Constants.TYPE_PACKAGINGASSEMBLYPART).append(pgV3Constants.SYMBOL_COMMA).append(pgV3Constants.TYPE_FABRICATEDPART).append(pgV3Constants.SYMBOL_COMMA).append(pgV3Constants.TYPE_PGINNERPACKUNITPART).toString();
	DomainObject dObjPart = null;
	Map<String,Object> mpConnectedPart = new HashMap<>();
	MapList mlExpandProductChildBOM = new MapList();
	Map<String,Object> mpChild = new HashMap<>(); 
	String strexpandProductBOM = (String) mPassValue.get("ExpandProductBOM");
	//Updated code for defect 42382 starts
	String strLatestReleasePartOnly = (String) mPassValue.get("LatestReleasePartOnly");
	MapList mlLatestNonReleasePart = new MapList();
	MapList mlLatestReleasePart = new MapList();
	MapList mlInputPartNew = new MapList();
	String strWhereExpressionNonRelease = (new StringBuilder()).append("current!=").append(pgV3Constants.STATE_RELEASE).append(pgV3Constants.SYMBOL_SPACE).append(pgV3Constants.SYMBOL_AND).append(" current!=").append(pgV3Constants.STATE_OBSOLETE).append(pgV3Constants.SYMBOL_SPACE).append(pgV3Constants.SYMBOL_AND).append(" revision == last").toString();
	String strWhereExpression = (new StringBuilder()).append("current==").append(pgV3Constants.STATE_RELEASE).toString();
	for (Object PartName : slEachPartName) {
		//To filter out latest release version of all inputed part
		mlLatestReleasePart = DomainObject.findObjects(context,//context
					   strValidInputType,//Type
					   (String)PartName,//name
					   DomainConstants.QUERY_WILDCARD,//revision
					   DomainConstants.QUERY_WILDCARD,//owner
					   pgV3Constants.VAULT_ESERVICEPRODUCTION,//vault
					   strWhereExpression,//where expression
					   false,//expand type
					   slSelect);//object select
		mlLatestReleasePart.sort(DomainConstants.SELECT_REVISION, "descending", "string");
		if(!mlLatestReleasePart.isEmpty())
			mlInputPartNew.add(mlLatestReleasePart.get(0));
		if(pgV3Constants.FALSE.equalsIgnoreCase(strLatestReleasePartOnly)) {
			//To filter out latest pre-release version of all inputed part
			mlLatestNonReleasePart = DomainObject.findObjects(context,//context
											   strValidInputType,//Type
											   (String)PartName,//name
											   DomainConstants.QUERY_WILDCARD,//revision
											   DomainConstants.QUERY_WILDCARD,//owner
											   pgV3Constants.VAULT_ESERVICEPRODUCTION,//vault
											   strWhereExpressionNonRelease,//where expression
											   false,//expand type
											   slSelect);//object select
			mlLatestNonReleasePart.sort(DomainConstants.SELECT_REVISION, "descending", "string");
			if(!mlLatestNonReleasePart.isEmpty())
				mlInputPartNew.add(mlLatestNonReleasePart.get(0));
			}
			//Updated code for defect 42382 Ends
			if(!mlInputPartNew.isEmpty()) {
			for(int inputPartSize=0;inputPartSize<mlInputPartNew.size();inputPartSize++){
				mpConnectedPart = (Map<String, Object>) mlInputPartNew.get(inputPartSize);
				strPartId = (String) mpConnectedPart.get(DomainConstants.SELECT_ID);
				strPartType = (String) mpConnectedPart.get(DomainConstants.SELECT_TYPE);
				if(strValidType.contains(pgV3Constants.SYMBOL_TILDA+strPartType+pgV3Constants.SYMBOL_TILDA)){
					dObjPart = DomainObject.newInstance(context,strPartId);
					mlExpandProductChildBOM = getBOMDataWithRestrictedDataCheck(context,dObjPart,strUserName,strexpandProductBOM);
					if(!mlExpandProductChildBOM.isEmpty()){
						for(int iChildPart=0;iChildPart<mlExpandProductChildBOM.size();iChildPart++){
							mpChild = (Map<String, Object>) mlExpandProductChildBOM.get(iChildPart);
							strChildPart = (String) mpChild.get(DomainConstants.SELECT_NAME);
							if(!sbPartNames.toString().contains(strChildPart)){
								sbPartNames.append(strChildPart).append(pgV3Constants.SYMBOL_COMMA);
							}
						}
					}
				}
			}
		}
	}
	return sbPartNames.toString();
}

/**Added method for 2018x.6 Requirement 37983,38062 Add Certification Section to the Part Component Equivalents tab  
 * @param strCertification
 * @param sbCertificationName
 * @return
 */
private StringBuffer getCertificationDetails(String strCertification, StringBuffer sbCertificationName) {
	if(UIUtil.isNotNullAndNotEmpty(strCertification)){
		sbCertificationName.append(strCertification).append(pgV3Constants.SYMBOL_COMMA); 
	}
	return sbCertificationName;
	}

/**Added code for 2018x.6 Requirement 35515 show reviewer in Approve tab
 * @param context
 * @param strApprovalStatusValue
 * @param strInboxTaskState
 * @param strRouteAction
 * @return
 */
private String getApprovalStatus(Context context, String strApprovalStatusValue, String strInboxTaskState, String strRouteAction, String strRouteStatus) {
	String strPolicyInboxTaskStateReview = PropertyUtil.getSchemaProperty(context, DomainConstants.SELECT_POLICY, DomainConstants.POLICY_INBOX_TASK, "state_Review");
	String strResourceBundle = "emxFrameworkStringResource"; 
	String strApproved = EnoviaResourceBundle.getProperty(context, strResourceBundle, context.getLocale(), "emxFramework.Lifecycle.Approved");
	String strRejected = EnoviaResourceBundle.getProperty(context, strResourceBundle, context.getLocale(), "emxFramework.Lifecycle.Rejected");
    String strAbstained = EnoviaResourceBundle.getProperty(context, strResourceBundle, context.getLocale(), "emxFramework.Lifecycle.Abstained");
    String strNeedsReview = EnoviaResourceBundle.getProperty(context, strResourceBundle, context.getLocale(), "emxFramework.Lifecycle.NeedsReview");
    String strPending = EnoviaResourceBundle.getProperty(context, strResourceBundle, context.getLocale(), "emxFramework.LifecycleTasks.Pending");
    String strApprove = EnoviaResourceBundle.getProperty(context, strResourceBundle, context.getLocale(), "emxFramework.Lifecycle.Approve");
    String strComment = EnoviaResourceBundle.getProperty(context, strResourceBundle, context.getLocale(), "emxFramework.LifecycleTasks.Comment");
    String strInformationOnly = EnoviaResourceBundle.getProperty(context, strResourceBundle, context.getLocale(), "emxFramework.LifecycleTasks.InformationOnly");
    String strInvestigate = EnoviaResourceBundle.getProperty(context, strResourceBundle, context.getLocale(), "emxFramework.LifecycleTasks.Investigate");
    String strNotifyOnly = EnoviaResourceBundle.getProperty(context, strResourceBundle, context.getLocale(), "emxFramework.LifecycleTasks.NotifyOnly");
    String strCompleted = EnoviaResourceBundle.getProperty(context, strResourceBundle, context.getLocale(), "emxFramework.LifecycleTasks.Completed");
	
	//Start: ALM-49592 Fix
	String strRouteStopped =EnoviaResourceBundle.getProperty(context, strResourceBundle, context.getLocale(), "emxFramework.LifecycleTasks.RouteStopped");
	String strAwaitingApproval = EnoviaResourceBundle.getProperty(context, strResourceBundle, context.getLocale(),"emxFramework.LifecycleTasks.AwaitingApproval");       
	String strAwaitingComment =  EnoviaResourceBundle.getProperty(context, strResourceBundle, context.getLocale(),"emxFramework.LifecycleTasks.AwaitingComment");	 
	//End: ALM-49592 Fix
		
	
    if(pgV3Constants.STATE_COMPLETE.equalsIgnoreCase(strInboxTaskState)){
    	if(strApprove.equalsIgnoreCase(strRouteAction)){
			if("Approve".equalsIgnoreCase(strApprovalStatusValue))
				return strApproved;
			else if("Reject".equalsIgnoreCase(strApprovalStatusValue))
				return strRejected;
			else if("Abstain".equalsIgnoreCase(strApprovalStatusValue))
				return strAbstained;
			else
				return strCompleted;
    	}
    	else if(strComment.equalsIgnoreCase(strRouteAction))
    		return strComment;
    	else if(strInformationOnly.equalsIgnoreCase(strRouteAction))
    		return strInformationOnly;
    	else if(strInvestigate.equalsIgnoreCase(strRouteAction))
    		return strInvestigate;
    	else if(strNotifyOnly.equalsIgnoreCase(strRouteAction))
    		return strNotifyOnly;
    	 else
    		 return DomainConstants.EMPTY_STRING;
	} 
	else if(strPolicyInboxTaskStateReview.equalsIgnoreCase(strInboxTaskState)){
		return strNeedsReview;
	}
	else{
			//Start: ALM-49592 Fix
			if ("Stopped".equals(strRouteStatus)) {
			        return strRouteStopped;		
	        } else {
				if(UIUtil.isNotNullAndNotEmpty(strRouteAction) && "Comment".equalsIgnoreCase(strRouteAction)) {
			         return strAwaitingComment;
				}	else  if(UIUtil.isNotNullAndNotEmpty(strRouteAction) && "Approve".equalsIgnoreCase(strRouteAction)) {
			         return strAwaitingApproval;
				}else {
					return strPending;
				}
			}
			//End: ALM-49592 Fix
	}
}

/**Added code for 2018x.6 Requirement 35515 show reviewer in Approve tab Starts
 * @param context
 * @param strScheduledCompletionDate
 * @param strInboxTaskState
 * @return
 */
private String getDueDate(Context context, String strScheduledCompletionDate, String strInboxTaskState) {
	String strPOLICYINBOXTASKSTATECOMPLETE = PropertyUtil.getSchemaProperty(context, DomainConstants.SELECT_POLICY, DomainConstants.POLICY_INBOX_TASK, "state_Complete");
	if(!strPOLICYINBOXTASKSTATECOMPLETE.equalsIgnoreCase(strInboxTaskState))
		return strScheduledCompletionDate;
	else
		return DomainConstants.EMPTY_STRING;
}
//Added for Requirement 37823 -starts
/**
 * This method is used to get Product Category Platform data
 * @param context
 * @return String
 * @throws Exception
 */
private String getProductCategoryPlatformFromPart(Context context, String strTaskId) throws FrameworkException {
	StringBuilder sbBuilder = new StringBuilder();
	StringBuilder sbRelationshipBuilder = new StringBuilder();
	try{
		sbRelationshipBuilder.append("from[").append(pgV3Constants.RELATIONSHIP_PGDOCUMENTTOPLATFORM).append("].to.name");
		StringBuilder sRelationshipBuilderAttr = new StringBuilder("from[").append(pgV3Constants.RELATIONSHIP_PGDOCUMENTTOPLATFORM).append(pgV3Constants.SYMBOL_PIPE).append(DomainObject.getAttributeSelect(pgV3Constants.ATTRIBUTE_PGPLATFORMTYPE)).append("~~ \"").append("Product Category Platform").append("\"").append("].to.").append(DomainConstants.SELECT_NAME);
		String strTypeListForPDP = EnoviaResourceBundle.getProperty(context, EMXCPN, context.getLocale(),"emxCPN.ProductData.PDPTypeForBAPCP.AllowedTypes");
		StringList busSelects  = new StringList();
		busSelects.addElement(DomainConstants.SELECT_ID);
		busSelects.addElement(sRelationshipBuilderAttr.toString());
		Map<String,Object> mpObj = new HashMap<>();
		StringList slPCP  = new StringList();
		Object objPCP = null;
		HashSet<String> hSetUniqueString = new HashSet<>();
		StringList strNonDuplicateList = new StringList();
		if(UIUtil.isNotNullAndNotEmpty(strTaskId)){
			DomainObject domObj = DomainObject.newInstance(context, strTaskId);
			MapList mlObjectDetails = domObj.getRelatedObjects(context,
					RELATIONSHIP_PG_GPSASSESSMENTTASKINPUT, // relationship pattern
					strTypeListForPDP,                 // object pattern
					busSelects,                       // object selects
					null,                   		 // relationship selects
					false,                              // to direction
					true,                             // from direction
					(short) 1,                         // recursion level
					null,                      // object where clause
					null,0);                     // relationship where clause
			if(mlObjectDetails != null && !mlObjectDetails.isEmpty()){	
				for(int i =0; i < mlObjectDetails.size(); i ++){
					slPCP.clear();
						mpObj = (Map<String,Object>)mlObjectDetails.get(i);
						objPCP = mpObj.get(sbRelationshipBuilder.toString());
						if(null!=objPCP){
						if(objPCP instanceof String){
							slPCP.addElement((String)objPCP);
						}
						else{
							slPCP.addAll((StringList) objPCP);
						}
						if(i>0 && BusinessUtil.isNotNullOrEmpty(sbBuilder.toString()))
							sbBuilder.append(pgV3Constants.SYMBOL_COMMA);
						if(null != slPCP && !slPCP.isEmpty()){
							for(String strPCPName : slPCP){
								if(hSetUniqueString.add(strPCPName)){
									strNonDuplicateList.addElement(strPCPName);
								}
							}
						}
					}
				}
					sbBuilder.append(StringUtil.join(strNonDuplicateList,", "));
			}
		}				
	} catch (Exception e){
		outLog.print("Exception in  getChangeActionReportProcess: " +e+"\n");
		outLog.flush();
	}
	return sbBuilder.toString();
}

/**
 * This method is used to get GPS Product Type
 * @param context
 * @return String
 * @throws Exception
 */
private String getGPSProductType(Context context, String strTaskId) throws FrameworkException {
	StringList slConnectedBrand = new StringList();
	StringBuilder sbBrand = new StringBuilder();
	try{
		if(UIUtil.isNotNullAndNotEmpty(strTaskId)){	
			String strRelationshipName = PropertyUtil.getSchemaProperty(context,"relationship_pgGPSToGPSProductType");
			DomainObject doCtxtObject = DomainObject.newInstance(context, strTaskId);
			if(UIUtil.isNotNullAndNotEmpty(strRelationshipName)){
				slConnectedBrand = doCtxtObject.getInfoList(context, "from["+strRelationshipName+"].to."+DomainConstants.SELECT_NAME);
			}
			if(null != slConnectedBrand && !slConnectedBrand.isEmpty()){
				for(Object objBrand : slConnectedBrand){
					if(UIUtil.isNotNullAndNotEmpty(sbBrand.toString())){
						sbBrand.append(pgV3Constants.SYMBOL_COMMA).append(" ");
					}
					sbBrand.append(objBrand);
				}
			}
		}				
	} catch (Exception e){
		outLog.print("Exception in  getChangeActionReportProcess: " +e+"\n");
		outLog.flush();
	}
	return sbBrand.toString();
}
//Added for Requirement 37823 -ends

//Added for Requirement 37824 -starts
/**
 * This method is used to get Attribute value
 * @param context
 * @return String
 * @throws Exception
 */
private String getAttributeValueForCountryClearance(Context context,Map<String,Object> mpAttributeClearance,String strAttributeName){
	String strAttributeValue=DomainConstants.EMPTY_STRING;
	try{
		//Updated for Defect : 41465 - starts
		if(PropertyUtil.getSchemaProperty(context,"attribute_pgPackSize").equals(strAttributeName)) {
			if(mpAttributeClearance.get(AWLUtil.strcat("attribute[", strAttributeName, "].inputvalue")) instanceof StringList){
				strAttributeValue = mpAttributeClearance.get(AWLUtil.strcat("attribute[", strAttributeName, "].inputvalue")).toString();
				strAttributeValue = strAttributeValue.replace("[", "").replace("]", "");
			}else{
				strAttributeValue = (String)mpAttributeClearance.get(AWLUtil.strcat("attribute[", strAttributeName, "].inputvalue"));
			}	
			//Updated for Defect : 41465 - ends
		} else {
			if(mpAttributeClearance.get(AWLUtil.strcat("attribute[", strAttributeName, "]")) instanceof StringList){
				strAttributeValue = mpAttributeClearance.get(AWLUtil.strcat("attribute[", strAttributeName, "]")).toString();
				strAttributeValue = strAttributeValue.replace("[", "").replace("]", "");
			}else{
				strAttributeValue = (String)mpAttributeClearance.get(AWLUtil.strcat("attribute[", strAttributeName, "]"));
			}
		}
	} catch (Exception e){
		outLog.print("Exception in  getChangeActionReportProcess: " +e+"\n");
		outLog.flush();
	}
	return strAttributeValue;
}
//Added for Requirement 37824 -ends


/**Added method for Requirement 38401 Modify code for Cognitive Complexity exception
 * @param mpArtWorkPrimary
 * @return strArtworkPrimary
 */
private String getArtWorkPrimary(Map<String, Object> mpArtWorkPrimary) {
	String strArtworkPrimaryValue = (String)mpArtWorkPrimary.get(ATTRIBUTE+ATTRIBUTE_PGARTWORKPRIMARY+CLOSINGBRACKET);
	if(UIUtil.isNotNullAndNotEmpty(strArtworkPrimaryValue)){
		if(pgV3Constants.CAPS_TRUE.equalsIgnoreCase(strArtworkPrimaryValue)){
			strArtworkPrimaryValue = pgV3Constants.KEY_YES_VALUE;
		} else if(pgV3Constants.KEY_FALSE.equalsIgnoreCase(strArtworkPrimaryValue)){
			strArtworkPrimaryValue = pgV3Constants.KEY_NO_VALUE;
		}
	}
	return strArtworkPrimaryValue;
}

/**Added method for Requirement 38092 Refactor Part & Specs code as per SonarQube and Enovia rules
 * @param mpPQRDetails
 * @return
 */
private Map<String,Object> getPQRDetails(Map<String, Object> mpPQRDetails) {
	String strPQRName = DomainConstants.EMPTY_STRING;
	String strPQRState = DomainConstants.EMPTY_STRING;
	String strPQRRev = DomainConstants.EMPTY_STRING;
	String	strPQRNameIndividual = DomainConstants.EMPTY_STRING;
	StringList slPQRNames = new StringList();
	StringBuffer sbPQRNames = new StringBuffer();
	StringList slPQRStates = new StringList();
	StringBuffer sbPQRStates = new StringBuffer();	
	StringList slPQRRevision = new StringList();
	StringBuffer sbPQRRevision = new StringBuffer();
	Map<String,Object> mpPQRData = new HashMap<>();
	
	//Added by DSM Reports (Sogeti) for 2022x.4 (DEC CW 2023) Defect 49395 - Start
	int k = 0;
	//Added by DSM Reports (Sogeti) for 2022x.4 (DEC CW 2023) Defect 49395 - End
	if (mpPQRDetails.get("tomid["+pgV3Constants.RELATIONSHIP_QUALIFICATION+"].from.current") instanceof StringList) {
										
		slPQRStates = (StringList) mpPQRDetails.get("tomid["+pgV3Constants.RELATIONSHIP_QUALIFICATION+"].from.current");
		//Added by DSM Reports (Sogeti) for 2022x.4 (DEC CW 2023) Defect 49395 - Start
		slPQRNames = (StringList) mpPQRDetails.get("tomid["+pgV3Constants.RELATIONSHIP_QUALIFICATION+"].from.name");
		slPQRRevision = (StringList) mpPQRDetails.get("tomid["+pgV3Constants.RELATIONSHIP_QUALIFICATION+"].from.revision");
		
		for (int j = 0; j < slPQRStates.size(); j++) {
			strPQRNameIndividual = slPQRStates.get(j);
			if(UIUtil.isNotNullAndNotEmpty(strPQRNameIndividual) && !"Frozen".equalsIgnoreCase(strPQRNameIndividual)) {
				sbPQRStates.append(strPQRNameIndividual);
				sbPQRStates.append(pgV3Constants.SYMBOL_PIPE);
				
			}else {
				slPQRNames.remove(k);
				slPQRRevision.remove(k);
				k--;
			}
			k++;
			//Added by DSM Reports (Sogeti) for 2022x.4 (DEC CW 2023) Defect 49395 - End

		}
		strPQRState= sbPQRStates.toString();						
	} else {
		strPQRState = (String) mpPQRDetails.get("tomid["+pgV3Constants.RELATIONSHIP_QUALIFICATION+"].from.current");
	}
	
	if (mpPQRDetails.get("tomid["+pgV3Constants.RELATIONSHIP_QUALIFICATION+"].from.name") instanceof StringList) {												
		
		for (int j = 0; j < slPQRNames.size(); j++) {
			strPQRNameIndividual =  slPQRNames.get(j);	
			sbPQRNames.append(strPQRNameIndividual);
			sbPQRNames.append(pgV3Constants.SYMBOL_PIPE);
		}
		strPQRName= sbPQRNames.toString();						
	} else {
		strPQRName = (String) mpPQRDetails.get("tomid["+pgV3Constants.RELATIONSHIP_QUALIFICATION+"].from.name");
	}

	// Modified Code to handle multiple PQRs in Component Equivalent tab on 19-July-18 --End
	//Added code for Requirement 33656, 33871, 33872 New Tab: MEP-SEP Component Equivalents--Starts
	if (mpPQRDetails.get("tomid["+pgV3Constants.RELATIONSHIP_QUALIFICATION+"].from.revision") instanceof StringList) {
														
		
		for (int j = 0; j < slPQRRevision.size(); j++) {
			strPQRNameIndividual = slPQRRevision.get(j);	
			sbPQRRevision.append(strPQRNameIndividual);
			sbPQRRevision.append(pgV3Constants.SYMBOL_PIPE);
		}
		strPQRRev= sbPQRRevision.toString();						
	} else {
		strPQRRev = (String) mpPQRDetails.get("tomid["+pgV3Constants.RELATIONSHIP_QUALIFICATION+"].from.revision");
	}
	mpPQRData.put("PQRName",strPQRName);
	mpPQRData.put("PQRState",strPQRState);
	mpPQRData.put("PQRRev",strPQRRev);
	return mpPQRData;
}

/**Added method for Requirement 37821, 36695 Add attributes in Attribute tab
 * @param strValue
 * @return
 */
private String getRollUpNetWeightToCOP(String strValue) {
	String strRollUpNetWeightToCOP = DomainConstants.EMPTY_STRING;
	if(pgV3Constants.TRUE.equalsIgnoreCase(strValue))
		strRollUpNetWeightToCOP = pgV3Constants.KEY_YES_VALUE;
	if(pgV3Constants.FALSE.equalsIgnoreCase(strValue))
		strRollUpNetWeightToCOP = pgV3Constants.KEY_NO_VALUE;
	return strRollUpNetWeightToCOP;
}

/**Added method for 2018x.6 requirement 36696 Add Battery Attribute
 * @param context
 * @param strPgBatteryType
 * @return
 * @throws FrameworkException
 */
private Map<String, Object> getBatteryComponent(Context context, String strPgBatteryType) throws FrameworkException {
	StringBuffer strPLIBatteryChemistryValue = new StringBuffer();
	StringBuffer strPLIBatterySizeValue = new StringBuffer();
	Map<String,Object> mpBatteryValue = new HashMap<>();
	String strPLIBatterySizeFinalValue = DomainConstants.EMPTY_STRING;
	String strPLIBatteryChemistryFinalValue = DomainConstants.EMPTY_STRING;
	if(UIUtil.isNotNullAndNotEmpty(strPgBatteryType)) {
		StringList slObjectSelect = new StringList();
		slObjectSelect.add(DomainConstants.SELECT_ID);
		slObjectSelect.add(pgV3Constants.SELECT_ATTRIBUTE_PGPLBATTERYWEIGHT);
		MapList mlPLIBattery = DomainObject.findObjects(context,//context
				pgV3Constants.TYPE_PGPLIBATTERYTYPE,//type
				strPgBatteryType,//name
				pgV3Constants.SYMBOL_HYPHEN,//revision
				DomainConstants.QUERY_WILDCARD,//owner
				pgV3Constants.VAULT_ESERVICEPRODUCTION,//vault
				DomainConstants.EMPTY_STRING,//where clause
				false,//expand type
				slObjectSelect);//object select
		if(!mlPLIBattery.isEmpty()) {
			Map<String,Object> mp = (Map<String, Object>) mlPLIBattery.get(0);
			String strObjectId = (String) mp.get(DomainConstants.SELECT_ID);
			String strAttrBatteryWeight = (String) mp.get(pgV3Constants.SELECT_ATTRIBUTE_PGPLBATTERYWEIGHT);
			String strPgPLIBatteryChemistry = PropertyUtil.getSchemaProperty(context,"type_pgPLIChemistry");
			String relPgPLRelatedData = PropertyUtil.getSchemaProperty(context,"relationship_pgPLRelatedData");
			StringBuilder slTypePattern = new StringBuilder(strPgPLIBatteryChemistry);
			slTypePattern.append(pgV3Constants.SYMBOL_COMMA);
			slTypePattern.append(pgV3Constants.TYPE_PGPLIBATTERYSIZE);
			StringList slSelect = new StringList();
			slSelect.add(DomainConstants.SELECT_NAME);
			slSelect.add(DomainConstants.SELECT_TYPE);
			DomainObject dobjBattery = DomainObject.newInstance(context, strObjectId);
			MapList mlPLIBatteryConnection = dobjBattery.getRelatedObjects(context, //context
											relPgPLRelatedData, //rel pattern
											slTypePattern.toString(), //type pattern
											slSelect,// object select
											null, // rel select
											false,//get To
											true, //get From
											(short)0, //recurse level
											null, // obj where clause
											null, //rel where clause
											0);//limit
			if(!mlPLIBatteryConnection.isEmpty()) {
				Map<String,Object> mpEachBattery = new HashMap<>();
				String strPLIBatteryChemistryEachValue = DomainConstants.EMPTY_STRING; 
				String strpgPLIBatterySizeEachValue = DomainConstants.EMPTY_STRING;
				for(int i=0;i<mlPLIBatteryConnection.size();i++) {
					mpEachBattery = (Map<String, Object>) mlPLIBatteryConnection.get(i);
					if(strPgPLIBatteryChemistry.equalsIgnoreCase((String)mpEachBattery.get(DomainConstants.SELECT_TYPE))) {
						strPLIBatteryChemistryEachValue = (String) mpEachBattery.get(DomainConstants.SELECT_NAME);
						if(UIUtil.isNotNullAndNotEmpty(strPLIBatteryChemistryEachValue) && !strPLIBatteryChemistryValue.toString().contains(strPLIBatteryChemistryEachValue)) {
							strPLIBatteryChemistryValue.append(strPLIBatteryChemistryEachValue).append(pgV3Constants.SYMBOL_COMMA);
						}
					}
				else {
					strpgPLIBatterySizeEachValue = (String) mpEachBattery.get(DomainConstants.SELECT_NAME);
					if(UIUtil.isNotNullAndNotEmpty(strpgPLIBatterySizeEachValue) && !strPLIBatterySizeValue.toString().contains(strpgPLIBatterySizeEachValue)) {
						strPLIBatterySizeValue.append(strpgPLIBatterySizeEachValue).append(pgV3Constants.SYMBOL_COMMA);
					}

				}
			}
			//To remove last appended ","
			strPLIBatterySizeFinalValue=strPLIBatterySizeValue.substring(0, strPLIBatterySizeValue.length()-1);
			strPLIBatteryChemistryFinalValue=strPLIBatteryChemistryValue.toString().substring(0, strPLIBatteryChemistryValue.length()-1);
			//To remove last appended ","	
		}
			mpBatteryValue.put("BatteryWeight",strAttrBatteryWeight);
			mpBatteryValue.put("BatteryChemistry",strPLIBatteryChemistryFinalValue);
			mpBatteryValue.put("BatterySize",strPLIBatterySizeFinalValue);
		} 
	} else {
		mpBatteryValue.put("BatteryWeight",DomainConstants.EMPTY_STRING);
		mpBatteryValue.put("BatteryChemistry",DomainConstants.EMPTY_STRING);
		mpBatteryValue.put("BatterySize",DomainConstants.EMPTY_STRING);
	}
	return mpBatteryValue;
}

/**Added method for Requirement 37821 Add vendor attributes in Attribute tab
 * @param context
 * @param dobjRelatedPart
 * @return
 * @throws FrameworkException
 */
private Map<String, Object> getVendorDetails(Context context, DomainObject dobjRelatedPart) throws FrameworkException {
	StringBuilder slRelPattern = new StringBuilder(pgV3Constants.RELATIONSHIP_MANUFACTURINGRESPONSIBILITY);
	slRelPattern.append(pgV3Constants.SYMBOL_COMMA);
	slRelPattern.append(pgV3Constants.RELATIONSHIP_SUPPLYRESPONSIBILITY);
	StringList slVendorInfoSelect = new StringList();
	slVendorInfoSelect.add(DomainConstants.SELECT_NAME);
	slVendorInfoSelect.add(pgV3Constants.SELECT_ATTRIBUTE_ORGANIZATIONID);
	slVendorInfoSelect.add(AWLUtil.strcat(ATTRIBUTE,pgV3Constants.ATTRIBUTE_COUNTRY ,CLOSINGBRACKET));
	slVendorInfoSelect.add(AWLUtil.strcat(ATTRIBUTE,pgV3Constants.ATTRIBUTE_CITY ,CLOSINGBRACKET));
	MapList mlVendorDetails = dobjRelatedPart.getRelatedObjects(context, //Context
											  slRelPattern.toString(), //Relationship
							  				  pgV3Constants.TYPE_COMPANY, //Type
							  				  slVendorInfoSelect, //Object Select
							  				  null, //Rel Select
							  				  true, //get To
							  				  false, //get From
							  				  (short)1, //recurse level
							  				  null, //object where clause
							  				  null, //relationship where clause
							  				  0); //limit
	
	int iVendorSize = mlVendorDetails.size();
	Map<String,Object> mpVendor = new HashMap<>();
	String strVendorName = DomainConstants.EMPTY_STRING;
	String strVendorID = DomainConstants.EMPTY_STRING;
	String strVendorMarket = DomainConstants.EMPTY_STRING;
	String strVendorCity = DomainConstants.EMPTY_STRING;
	StringBuffer sbVendorName = new StringBuffer();
	StringBuffer sbVendorID = new StringBuffer();
	StringBuffer sbVendorMarket = new StringBuffer();
	StringBuffer sbVendorCity = new StringBuffer();
	Map<String,Object> mpVendorInfo = new HashMap<>();
	if(!mlVendorDetails.isEmpty()) {
		for(int i=0;i<iVendorSize;i++) {
			mpVendor = (Map<String, Object>) mlVendorDetails.get(i);
			strVendorName = (String) mpVendor.get(DomainConstants.SELECT_NAME);
			strVendorID = (String) mpVendor.get(pgV3Constants.SELECT_ATTRIBUTE_ORGANIZATIONID);
			strVendorMarket = (String) mpVendor.get(AWLUtil.strcat(ATTRIBUTE,pgV3Constants.ATTRIBUTE_COUNTRY ,CLOSINGBRACKET));
			strVendorCity = (String) mpVendor.get(AWLUtil.strcat(ATTRIBUTE,pgV3Constants.ATTRIBUTE_CITY ,CLOSINGBRACKET));
			if(UIUtil.isNotNullAndNotEmpty(strVendorName) && !sbVendorName.toString().contains(strVendorName)) {
				sbVendorName.append(strVendorName).append(pgV3Constants.SYMBOL_COMMA);
				sbVendorID.append(strVendorID).append(pgV3Constants.SYMBOL_COMMA);
				sbVendorMarket.append(strVendorMarket).append(pgV3Constants.SYMBOL_COMMA);
				sbVendorCity.append(strVendorCity).append(pgV3Constants.SYMBOL_COMMA);
			}
		}
		//To remove last appended "," Starts
		String strVendorNameFinalValue=sbVendorName.toString().substring(0, sbVendorName.length()-1);
		String strVendorIDFinalValue=sbVendorID.toString().substring(0, sbVendorID.length()-1);
		String strVendorMarketFinalValue=sbVendorMarket.toString().substring(0,sbVendorMarket.length()-1);
		String strVendorCityFinalValue=sbVendorCity.toString().substring(0,sbVendorCity.length()-1);
		//To remove last appended "," Ends
		mpVendorInfo.put("VendorName",strVendorNameFinalValue);
		mpVendorInfo.put("VendorID",strVendorIDFinalValue);
		mpVendorInfo.put("VendorMarket",strVendorMarketFinalValue);
		mpVendorInfo.put("VendorCity",strVendorCityFinalValue);
	} else {
		mpVendorInfo.put("VendorName",DomainConstants.EMPTY_STRING);
		mpVendorInfo.put("VendorID",DomainConstants.EMPTY_STRING);
		mpVendorInfo.put("VendorMarket",DomainConstants.EMPTY_STRING);
		mpVendorInfo.put("VendorCity",DomainConstants.EMPTY_STRING);
	}
	return mpVendorInfo;
}
/**This method is used to check if report object exist or not
 * @param context
 * @return boolean
 * @throws FrameworkException
 */
private boolean isReportExist(Context context, String strReportObjectId) throws FrameworkException{
	boolean bReturn = true;
	try{
		DomainObject dObjPart = DomainObject.newInstance(context, strReportObjectId); 
	}catch (Exception e){
		bReturn = false;
		outLog.print("Report Object does not exist: "+e+"\n");
		outLog.flush(); 
	}
	return bReturn;
}
//Added for Defect 40145 - ends

//Added for ALM Defect 41828
/**
 * This method is used to get Material Function Name
 * @param context
 * @return String
 * @throws Exception
 */
private String getMaterialFunctionName(Context context, String strApplication) throws FrameworkException {	
	StringBuilder sbFunction = new StringBuilder();
	StringList slSubFunction = new StringList();
	String sPhysicalId = DomainConstants.EMPTY_STRING;
	String strFinalList = DomainConstants.EMPTY_STRING;
	if (UIUtil.isNotNullAndNotEmpty(strApplication)) {								
		slSubFunction = StringUtil.split(strApplication, "|");
		if (slSubFunction.size() > 0) {
			for(int i=0;i<slSubFunction.size();i++) {
				sPhysicalId = slSubFunction.get(i);
				if (UIUtil.isNotNullAndNotEmpty(sPhysicalId)) {
					sbFunction.append(getNameFromPhysicalId(context,sPhysicalId)).append(COMMA);
				} 	
			} 
		} 
	}
	strFinalList = sbFunction.toString();
	if(strFinalList.endsWith(COMMA))
	{
		strFinalList = strFinalList.substring(0,strFinalList.length()-1);
	}	
	return strFinalList;
}
/**
 * This method is used to get Material Function Name for Physical ID
 * @param context
 * @return String
 * @throws Exception
 */
private String getNameFromPhysicalId(Context context, String sPhysicalId) throws FrameworkException {
	DomainObject domObj = null;	
	String strName = DomainConstants.EMPTY_STRING;;
	try {
		domObj = DomainObject.newInstance(context, sPhysicalId);
		if (domObj!=null) {
			strName = domObj.getInfo(context,DomainConstants.SELECT_NAME);			
		} else {
			strName = sPhysicalId;
		}
	} catch (Exception e) {
		outLog.print("Exception in getNameFromPhysicalId : " +sPhysicalId+"\n");
		strName = sPhysicalId;
	}
	return strName;
}

/**Added for 2018x6_September Requirement 39410
 * @param context
 * @param dobjPart
 * @param strUserName
 * @param strexpandProductBOM
 * @param mlGPSAssessmentsListAll
 * @throws Exception
 */
private void processRMConnectedToAPP(Context context, DomainObject dobjPart,String strUserName,MapList mlGPSAssessmentsListAll,Map<String,Object> mpObjectCommon) throws Exception {
	MapList mlExpandProductChildBOM = expandEBOM(context, dobjPart, strUserName);
	Map<String,Object> mpChild = new HashMap<>();
	String strChildPart = DomainConstants.EMPTY_STRING;
	String strChildType = DomainConstants.EMPTY_STRING;
	String strChildId = DomainConstants.EMPTY_STRING;
	String strChildCurrent = DomainConstants.EMPTY_STRING;
	StringBuilder sbPartIds = new StringBuilder();
	Map<String,Object> mpCommonColumn = new HashMap<>();
	DomainObject dobjPartRM = null;
	String strPath = DomainConstants.EMPTY_STRING;
	String strAPPName = DomainConstants.EMPTY_STRING;
	boolean bAccess = false;
	if(!mlExpandProductChildBOM.isEmpty()){
		for(int iChildPart=0;iChildPart<mlExpandProductChildBOM.size();iChildPart++){
			mpChild = (Map<String, Object>) mlExpandProductChildBOM.get(iChildPart);
			strChildPart = (String) mpChild.get(DomainConstants.SELECT_NAME);
			strChildType = (String) mpChild.get(DomainConstants.SELECT_TYPE);
			strChildId = (String) mpChild.get(DomainConstants.SELECT_ID);
			strChildCurrent = (String) mpChild.get(DomainConstants.SELECT_CURRENT);
			if((pgV3Constants.TYPE_RAWMATERIALPART.equalsIgnoreCase(strChildType) || pgV3Constants.TYPE_PGRAWMATERIAL.equalsIgnoreCase(strChildType) || TYPE_PG_ANCILLARY_RAW_MATERIAL_PART.equalsIgnoreCase(strChildType)) && (!pgV3Constants.STATE_OBSOLETE.equalsIgnoreCase(strChildCurrent)) && !sbPartIds.toString().contains(strChildId)){
				sbPartIds.append(strChildId).append(pgV3Constants.SYMBOL_COMMA);
				bAccess = accessCheck(context,strUserName,strChildId);
				if(bAccess) {
					dobjPartRM = DomainObject.newInstance(context,strChildId);
					//Modified by DSM Reports (Sogeti) for 2022x.4 (DEC CW 2023) Defect 55875 - Start	
					mpCommonColumn = getCommonColumnsDetail(context,strUserName, dobjPartRM);
					//Modified by DSM Reports (Sogeti) for 2022x.4 (DEC CW 2023) Defect 55875 - End	
					strAPPName = (String) mpObjectCommon.get(DomainConstants.SELECT_NAME);
					strPath = strAPPName+"-->"+strChildPart;
					getGPSAssessment(context, dobjPartRM, mpCommonColumn, strUserName,mlGPSAssessmentsListAll,strPath);
				}
			}
		}
	}
}

/**Added method for 2018x6.1 Oct requirement 38913
 * @param context
 * @param mp
 * @param strParentId
 * @return
 */
private String geMarketValue(Context context, String strParentId) {
	String strMarketValue = DomainConstants.EMPTY_STRING;
	try {
		DomainObject dObj = DomainObject.newInstance(context,strParentId);
		StringList strList = dObj.getInfoList(context, "to["+RELATIONSHIP_PG_GPSASSESSMENTTASKINPUT+"].tomid["+REL_COUNTRIESTOBECLEARED+"].from.name");
		if(null != strList && !strList.isEmpty()) {
			strMarketValue = strList.toString().replace("[", "").replace("]", "").replace(pgV3Constants.SYMBOL_COMMA,pgV3Constants.SYMBOL_PIPE);
		}
	} catch (Exception e) {
		outLog.print("Exception in  getMarketValue: "+e+"\n");
		outLog.flush();
	}
	return strMarketValue;
}

/**Added method for 2018x6.1 Oct requirement 38913
 * @param context
 * @param mp
 * @param strParentId
 * @return
 */
private String getPCPValue(Context context, String strParentId) {
	String strPCPValue = DomainConstants.EMPTY_STRING;
	try {
			DomainObject dObj = DomainObject.newInstance(context,strParentId);
			StringList strList = dObj.getInfoList(context, SELECT_ATTR_PRODUCTCATEGORYPLATFORM);
			if(null != strList && !strList.isEmpty()) {
				strPCPValue = strList.toString().replace("[", "").replace("]", "").replace(pgV3Constants.SYMBOL_COMMA,pgV3Constants.SYMBOL_PIPE);
			}
	} catch (Exception e) {
		outLog.print("Exception in  getPCPValue: "+e+"\n");
		outLog.flush();
	}
	return strPCPValue;
}

/**Added method for 2018x6.1 Oct requirement 38913
 * @param context
 * @param mp
 * @param strParentId
 * @return
 */
private String getReportedFunctionForGPS(Context context, String strParentId) {
	String strReportedFunction = DomainConstants.EMPTY_STRING;
	try {
			DomainObject dObj = DomainObject.newInstance(context,strParentId);
			StringList strList = dObj.getInfoList(context, "from["+pgV3Constants.RELATIONSHIP_PGPDTEMPLATESTOPGPLIREPORTEDFUNCTION+"].to.name");
			if(null != strList && !strList.isEmpty()) {
				strReportedFunction = strList.toString().replace("[", "").replace("]", "").replace(pgV3Constants.SYMBOL_COMMA,pgV3Constants.SYMBOL_PIPE);
			}
	} catch (Exception e) {
		outLog.print("Exception in  getReportedFunctionForGPS: "+e+"\n");
		outLog.flush();
	}
	return strReportedFunction;
}

/**Added method for 2018x6.1 Oct requirement 38913
 * @param context
 * @param mp
 * @param strParentId
 * @return
 */
private String getClass(Context context, String strParentId) {
	String strClass = DomainConstants.EMPTY_STRING;
	try {
			DomainObject dObj = DomainObject.newInstance(context,strParentId);
			StringList strList = dObj.getInfoList(context, pgV3Constants.SELECT_ATTRIBUTE_PGCLASS);
			if(null != strList && !strList.isEmpty()) {
				strClass = strList.toString().replace("[", "").replace("]", "").replace(pgV3Constants.SYMBOL_COMMA,pgV3Constants.SYMBOL_PIPE);
			}
	} catch (Exception e) {
		outLog.print("Exception in  getClass: "+e+"\n");
		outLog.flush();
	}
	return strClass;
}

/**Added method for 2018x6.1 Oct requirement 38913
 * @param mp
 * @return
 */
private Map<String, Object> getContextOfUse(Map<String,Object> mp) {
	String strMaxUsageAmount = DomainConstants.EMPTY_STRING;
	String strUoM = DomainConstants.EMPTY_STRING;
	Map<String,Object> mpContextOfUseData = new HashMap<>();
	if(mp.get("from["+REL_PGRELATEDCONTEXTOFUSE+"].to."+SELECT_ATTR_ESTIMATEDUPPERLEVELOFMATERIALINPRODUCT) instanceof StringList) {
		strMaxUsageAmount = mp.get("from["+REL_PGRELATEDCONTEXTOFUSE+"].to."+SELECT_ATTR_ESTIMATEDUPPERLEVELOFMATERIALINPRODUCT).toString().replace("[", "").replace("]", "").replace(pgV3Constants.SYMBOL_COMMA,pgV3Constants.SYMBOL_PIPE);
	} else {
		strMaxUsageAmount = (String) mp.get("from["+REL_PGRELATEDCONTEXTOFUSE+"].to."+SELECT_ATTR_ESTIMATEDUPPERLEVELOFMATERIALINPRODUCT);
	}
	if(mp.get("from["+REL_PGRELATEDCONTEXTOFUSE+"].to."+SELECT_ATTR_ESTIMATEDUPPERLEVELOFMATERIALINPRODUCTUOM) instanceof StringList) {
		strUoM = mp.get("from["+REL_PGRELATEDCONTEXTOFUSE+"].to."+SELECT_ATTR_ESTIMATEDUPPERLEVELOFMATERIALINPRODUCTUOM).toString().replace("[", "").replace("]", "").replace(pgV3Constants.SYMBOL_COMMA,pgV3Constants.SYMBOL_PIPE);
	
	} else {
		strUoM = (String) mp.get("from["+REL_PGRELATEDCONTEXTOFUSE+"].to."+SELECT_ATTR_ESTIMATEDUPPERLEVELOFMATERIALINPRODUCTUOM);
	}
	mpContextOfUseData.put("UsageAmount",strMaxUsageAmount);
	mpContextOfUseData.put("UoM",strUoM);
	return mpContextOfUseData;
}

/**Added method for 2018x6.1 Oct requirement 38913
 * @param context
 * @param strId
 * @return
 * @throws FrameworkException
 */
private Map<String,Object> getSupplier(Context context, String strNRQId) throws FrameworkException {
	DomainObject dobj = DomainObject.newInstance(context, strNRQId);
	StringBuilder sbRelPattern = new StringBuilder();
	sbRelPattern.append(pgV3Constants.RELATIONSHIP_MANUFACTUREREQUIVALENT);
	sbRelPattern.append(pgV3Constants.SYMBOL_COMMA);
	sbRelPattern.append(RELATIONSHIP_COMPONENTMATERIAL);
	StringList slSelect = new StringList();
	slSelect.add(DomainConstants.SELECT_NAME);
	slSelect.add(DomainConstants.SELECT_ID);
	slSelect.add(DomainConstants.SELECT_CURRENT);
	slSelect.add(DomainConstants.SELECT_ATTRIBUTE_TITLE);
	slSelect.add(DomainConstants.SELECT_POLICY);
	String strWhereExp = "policy=="+"\'"+pgV3Constants.POLICY_SUPPLIEREQUIVALENT+"\'";
	String strWhereExpMEP = "policy=="+"\'"+pgV3Constants.POLICY_MANUFACTUREREQUIVALENT+"\'";
	StringBuilder sbSuppliers = new StringBuilder();
	String strSupplier = DomainConstants.EMPTY_STRING;
	String strMEPId = DomainConstants.EMPTY_STRING;
	Map<String,Object> mpDataFromMEP = new HashMap<>();
	String strMEPtitle = DomainConstants.EMPTY_STRING;
	StringBuilder sbMEPtitle = new StringBuilder();
	Map<String,Object> mpSupplier = new HashMap<>();
	StringBuilder sbExternalMaterial = new StringBuilder();
	String strExternalMaterial = DomainConstants.EMPTY_STRING;
	Map<String,Object> mpExtMaterial = new HashMap<>();
	MapList mlExtMaterial = new MapList();
	MapList mlSupplier = new MapList();
	MapList mlMEPData = dobj.getRelatedObjects(context,//context
			RELATIONSHIP_PG_GPSASSESSMENTTASKINPUT,//rel pattern
			TYPE_PART, //type pattern
			slSelect, //obj select
			null, // rel select
			false,//get To
			true, //get From
			(short)1, //recurse level
			strWhereExpMEP, //obj where clause
			null, //rel where clause
			0);//limit
	if(!mlMEPData.isEmpty()) {
		Map<String,Object> mpMEPData = new HashMap<>();
		for(int iMEPData=0;iMEPData<mlMEPData.size();iMEPData++) {
			mpMEPData = (Map<String, Object>) mlMEPData.get(iMEPData); 
			strMEPId = (String) mpMEPData.get(DomainConstants.SELECT_ID);
			sbMEPtitle.append(mpMEPData.get(DomainConstants.SELECT_ATTRIBUTE_TITLE)).append(pgV3Constants.SYMBOL_PIPE).toString();
			if(UIUtil.isNotNullAndNotEmpty(strMEPId)) {
				dobj = DomainObject.newInstance(context, strMEPId);
				mlExtMaterial = dobj.getRelatedObjects(context,//context
						RELATIONSHIP_COMPONENTMATERIAL,//rel pattern
						TYPE_EXTERNALMATERIAL, //type pattern
						slSelect, //obj select
						null, // rel select
						false,//get To
						true, //get From
						(short)1, //recurse level
						null, //obj where clause
						null, //rel where clause
						0);//limit
				if(!mlExtMaterial.isEmpty()) {
					for(int iExtMaterial=0;iExtMaterial<mlExtMaterial.size();iExtMaterial++) {
						mpExtMaterial = (Map<String, Object>) mlExtMaterial.get(iExtMaterial);
						sbExternalMaterial.append(mpExtMaterial.get(DomainConstants.SELECT_NAME)).append(pgV3Constants.SYMBOL_PIPE).toString();
					}
				} else {
					sbExternalMaterial.append(DomainConstants.EMPTY_STRING).append(pgV3Constants.SYMBOL_PIPE).toString();
				}
				mlSupplier = dobj.getRelatedObjects(context,//context
						pgV3Constants.RELATIONSHIP_MANUFACTURINGRESPONSIBILITY,//rel pattern
						pgV3Constants.TYPE_COMPANY, //type pattern
						slSelect, //obj select
						null, // rel select
						true,//get To
						false, //get From
						(short)1, //recurse level
						null, //obj where clause
						null, //rel where clause
						0);//limit
				
				if(!mlSupplier.isEmpty()) {
					for(int i=0;i<mlSupplier.size();i++) {
						mpSupplier = (Map<String, Object>) mlSupplier.get(i);
						sbSuppliers.append(mpSupplier.get(DomainConstants.SELECT_NAME)).append(pgV3Constants.SYMBOL_PIPE).toString();
						
					}
				} else {
					sbSuppliers.append(mpSupplier.get(DomainConstants.EMPTY_STRING)).append(pgV3Constants.SYMBOL_PIPE).toString();
				}
			}
		}
		if(sbSuppliers.length()>0)
			strSupplier = sbSuppliers.toString().substring(0, sbSuppliers.length()-1);
		if(sbMEPtitle.length()>0)
			strMEPtitle = sbMEPtitle.toString().substring(0, sbMEPtitle.length()-1);
		if(sbExternalMaterial.length()>0)
			strExternalMaterial = sbExternalMaterial.toString().substring(0, sbExternalMaterial.length()-1);
	}
	mpDataFromMEP.put("SupplierName",strSupplier);
	mpDataFromMEP.put("MEPTitle",strMEPtitle);
	mpDataFromMEP.put("ExternalMaterial",strExternalMaterial);
	return mpDataFromMEP;
}

/**Added for 2018x6.1 Oct CW requirement 39692
 * @param context
 * @param dobjPart
 * @param mpCommonColumnsDetail
 * @return
 */
private MapList getBatteryRollUp(Context context, Map<String,Object> mpCommonColumnsDetail, String strUserName) {
	MapList mlBatteryRollupAll=new MapList();
	String strObjId=(String) mpCommonColumnsDetail.get(DomainConstants.SELECT_ID);
	HashMap<String,String> hmArgs = new HashMap<>();
	Map<String,String> settingsMap = new HashMap<>();
	Map<String,Object> mpObjMap = null;
	String strProductId = DomainConstants.EMPTY_STRING;
	hmArgs.put("objectId",strObjId);
	hmArgs.put("type",PGBATTERY);
	String strColumnName = (new StringBuilder()).append("ProductName").append(pgV3Constants.SYMBOL_COMMA).append("ProductRevision").append(pgV3Constants.SYMBOL_COMMA).append("ProductTitle").append(pgV3Constants.SYMBOL_COMMA).append("pgDPPQtyperCOP").append(pgV3Constants.SYMBOL_COMMA).append("pgNetWeight").append(pgV3Constants.SYMBOL_COMMA).append("pgGrossWeightUnitOfMeasure").append(pgV3Constants.SYMBOL_COMMA).append("pgPowerSource").append(pgV3Constants.SYMBOL_COMMA).append("pgBatteryType").append(pgV3Constants.SYMBOL_COMMA).append("pgBatteriesShippedInsideDevice").append(pgV3Constants.SYMBOL_COMMA).append("pgBatteriesShippedOutsideDevice").append(pgV3Constants.SYMBOL_COMMA).append("pgNumberOfBatteriesRequired").append(pgV3Constants.SYMBOL_COMMA).append("pgPLIBatteryChemistry").append(pgV3Constants.SYMBOL_COMMA).append("pgPLBatteryWeight").append(pgV3Constants.SYMBOL_COMMA).append("pgPLBatteryWeightUOM").append(pgV3Constants.SYMBOL_COMMA).append("pgPLIBatterySize").append(pgV3Constants.SYMBOL_COMMA).append("pgPLIBatteryVoltage").append(pgV3Constants.SYMBOL_COMMA).append("pgPLBatteryVolUOM").append(pgV3Constants.SYMBOL_COMMA).append("pgPLIBatteryCapacity").append(pgV3Constants.SYMBOL_COMMA).append("pgPLBatteryTCUOM").append(pgV3Constants.SYMBOL_COMMA).append("pgPLIBatteryCells").append(pgV3Constants.SYMBOL_COMMA).append("pgPLIBatteryLithum").append(pgV3Constants.SYMBOL_COMMA).append("pgPLBatteryWeightLiUOM").append(pgV3Constants.SYMBOL_COMMA).append("pgPLIYesNo").append(pgV3Constants.SYMBOL_COMMA).append("pgPLIBatteryWhRating").append(pgV3Constants.SYMBOL_COMMA).append("pgPLBatteryEnRUOM").toString();
	StringList slColumnNames = StringUtil.split(strColumnName,pgV3Constants.SYMBOL_COMMA);
	String strPickListTypeName = DomainConstants.EMPTY_STRING;
	String strPickListAttributeName = DomainConstants.EMPTY_STRING;
	boolean isExists=false;
	String strBatteryType = DomainConstants.EMPTY_STRING;
	String strPickListValue = DomainConstants.EMPTY_STRING;
	String strAttributeName = DomainConstants.EMPTY_STRING;
	String strattributeValue = DomainConstants.EMPTY_STRING;
	String strProductType = DomainConstants.EMPTY_STRING;
	String strKeyName = DomainConstants.EMPTY_STRING;
	String strCommomColumnName = DomainConstants.EMPTY_STRING;
	String strCommomColumnValue = DomainConstants.EMPTY_STRING;
	//Added the code for Defect 49698 - Spec Reader Access Issue - Starts
	boolean hasAccess = false;
	boolean isContextPushed = false;
	//Added the code for Defect 49698 - Spec Reader Access Issue - Ends
	try {
		//Added the code for Defect 49698 - Spec Reader Access Issue - Starts
		if(SPECREADER.equalsIgnoreCase(strOriginatingSource)) {
			hasAccess = accessCheck(context, strUserName, strObjId);
			if(hasAccess) {
				//Modified the code for Defect 49698 - Spec Reader Access Issue - Starts
				ContextUtil.pushContext(context,PropertyUtil.getSchemaProperty(context,"User Agent"),DomainConstants.EMPTY_STRING,DomainConstants.EMPTY_STRING);
				isContextPushed = true;
				
			}
		}
		//Added the code for Defect 49698 - Spec Reader Access Issue - Ends
		MapList mlObjectList = JPO.invoke(context,"pgFPPRollup",null,"getAllTableData",JPO.packArgs(hmArgs),MapList.class);
		if(!mlObjectList.isEmpty()) {
			//Added for 2018x6.1 Dec CW requirement 41170 Starts
			StringList slAPPSelect = new StringList();
			slAPPSelect.add(pgV3Constants.SELECT_ATTRIBUTE_PGAREBATTERIESINCLUDED);
			slAPPSelect.add(pgV3Constants.SELECT_ATTRIBUTE_PGAREBATTERIESREQUIRED);
			slAPPSelect.add(pgV3Constants.SELECT_ATTRIBUTE_PGAREBATTERIESBUILTIN);
			DomainObject dobjAPP = DomainObject.newInstance(context, strObjId);
			Map<String,Object> mpAPP = dobjAPP.getInfo(context, slAPPSelect);
			//Added for 2018x6.1 Dec CW requirement 41170 Ends
			int impReturnList = mlObjectList.size();
			for(int i=0;i<impReturnList;i++) {
				mpObjMap = new HashMap<>();
				mpObjMap = (Map) mlObjectList.get(i);
				strProductId = (String) mpObjMap.get(DomainConstants.SELECT_ID);
				strProductType = (String) mpObjMap.get(DomainConstants.SELECT_TYPE);
				if (UIUtil.isNotNullAndNotEmpty(strProductId)) {
					isExists = doesBusinessObjectExist(context,strProductId);
					for(int j=0;j<slColumnNames.size();j++) {
						settingsMap = getSettings(slColumnNames.get(j));
						strPickListTypeName = settingsMap.get(PICKLISTTYPENAME);
						strPickListAttributeName = settingsMap.get(PICKLISTATTRIBUTENAME);
						strAttributeName = settingsMap.get(ATTRIBUTENAME);
						strCommomColumnName = settingsMap.get(PRODUCTPARTDETAILS);
						strCommomColumnValue = getCommonDetailsOfProductPart(context,strCommomColumnName,isExists,mpObjMap);
						if(isExists){
							if(UIUtil.isNotNullAndNotEmpty(strAttributeName)) {
								if(pgV3Constants.ATTRIBUTE_PGPOWERSOURCE.equalsIgnoreCase(strAttributeName) &&
										(pgV3Constants.TYPE_PGRAWMATERIAL.equalsIgnoreCase(strProductType) || 
												pgV3Constants.TYPE_RAWMATERIALPART.equalsIgnoreCase(strProductType))){
									strattributeValue = pgV3Constants.KEY_BATTERY;
								}else{
									strattributeValue = (String) mpObjMap.get("attribute["+strAttributeName+"]");
								}
							}
							else if(UIUtil.isNotNullAndNotEmpty(strPickListTypeName) || UIUtil.isNotNullAndNotEmpty(strPickListAttributeName)) {
								strBatteryType = (String) mpObjMap.get(pgV3Constants.SELECT_ATTRIBUTE_PGBATTERYTYPE);
								strPickListTypeName= UIUtil.isNullOrEmpty(strPickListTypeName) ? DomainConstants.EMPTY_STRING : strPickListTypeName;
								strPickListAttributeName= UIUtil.isNullOrEmpty(strPickListAttributeName) ? DomainConstants.EMPTY_STRING : strPickListAttributeName;	
								strKeyName = getAttributeName(strPickListTypeName,strPickListAttributeName);
								strPickListValue = getBatteryTypeFields(context, strBatteryType, strPickListTypeName, strPickListAttributeName);
							}
							}else{
								strPickListValue = pgV3Constants.NO_ACCESS;	
								strattributeValue = pgV3Constants.NO_ACCESS;	
							}
						mpObjMap.put(strAttributeName,strattributeValue);
						mpObjMap.put(strKeyName,strPickListValue);
						//Added for 2018x6.1 Dec CW requirement 41170 Starts
						mpObjMap.put("AreBatteriesIncluded",mpAPP.get(pgV3Constants.SELECT_ATTRIBUTE_PGAREBATTERIESINCLUDED));
						mpObjMap.put("AreBatteriesRequired",mpAPP.get(pgV3Constants.SELECT_ATTRIBUTE_PGAREBATTERIESREQUIRED));
						mpObjMap.put("AreBatteriesBuiltIn",mpAPP.get(pgV3Constants.SELECT_ATTRIBUTE_PGAREBATTERIESBUILTIN));
						//Added for 2018x6.1 Dec CW requirement 41170 Ends
						mpObjMap.put(strCommomColumnName,strCommomColumnValue);
						}
					}
				mpObjMap.put(COMMONCOLUMNS,mpCommonColumnsDetail);
				mlBatteryRollupAll.add(mpObjMap);
				}
			}
	
	} catch (Exception e) {
		outLog.print("Exception in  getBatteryRollUp: "+e+"\n");
		outLog.flush();
		//Modified the code for Defect 49698 - Spec Reader Access Issue - Starts
	}finally {
		try {
			if(isContextPushed) {
				ContextUtil.popContext(context);
			}
		}catch(Exception e) {
			outLog.print("Exception in poping context in getBatteryRollUp Method "+e+"\n");
			outLog.flush();
		}
		
	}
	//Modified the code for Defect 49698 - Spec Reader Access Issue - Ends
	return mlBatteryRollupAll;
}


/**Added for 2018x6.1 Oct CW requirement 39692
 * @param strPickListTypeName
 * @param strPickListAttributeName
 * @return
 */
private String getAttributeName(String strPickListTypeName, String strPickListAttributeName) {
	if(UIUtil.isNotNullAndNotEmpty(strPickListTypeName)) {
		return strPickListTypeName;
	} else {
		return strPickListAttributeName;
	}
}

/**Added for 2018x6.1 Oct CW requirement 39692
 * @param context
 * @param strIfYesselectbatterytype
 * @param strpgPicklistTypeName
 * @param strpgPicklistAttributeName
 * @return
 * @throws Exception
 */
private String getBatteryTypeFields(Context context, String strIfYesselectbatterytype, String strpgPicklistTypeName, String strpgPicklistAttributeName) throws Exception

{
	String strReturnValue = DomainConstants.EMPTY_STRING;
	try
    {
		String strRELATIONSHIPPGPLRELATEDDATA = PropertyUtil.getSchemaProperty(context,"relationship_pgPLRelatedData");
		if(UIUtil.isNotNullAndNotEmpty(strIfYesselectbatterytype) && (UIUtil.isNotNullAndNotEmpty(strpgPicklistTypeName) || UIUtil.isNotNullAndNotEmpty(strpgPicklistAttributeName)))
		{
			StringBuilder sbRelatedData = new StringBuilder();
			StringList objectSelects = new StringList();
			objectSelects.add(DomainConstants.SELECT_ID);
			if(UIUtil.isNotNullAndNotEmpty(strpgPicklistTypeName))
			{
				sbRelatedData.append("from[").append(strRELATIONSHIPPGPLRELATEDDATA).append("].to[").append(strpgPicklistTypeName).append("].name");
			} else {
				sbRelatedData.append("attribute[").append(strpgPicklistAttributeName).append("]");
			}
			objectSelects.add(sbRelatedData.toString());
			MapList mlPickListObjects = DomainObject.findObjects(context, //context
					pgV3Constants.TYPE_PGPLIBATTERYTYPE, //type
					strIfYesselectbatterytype, //name
					pgV3Constants.SYMBOL_HYPHEN, //revision
					DomainConstants.QUERY_WILDCARD, //owner
					context.getVault().getName(), //vault
					null, //where clause
					true, //expand type
					objectSelects);//object select
			if(mlPickListObjects != null && ! mlPickListObjects.isEmpty())
			{
				Map<String,Object> mapPickListObj = new HashMap<>();
				String strObjectId = DomainConstants.EMPTY_STRING;
				String strConnectedData = DomainConstants.EMPTY_STRING;
				for(int i = 0; i < mlPickListObjects.size(); i++)
				{
					mapPickListObj = (Map) mlPickListObjects.get(i);
					strObjectId = (String) mapPickListObj.get(DomainConstants.SELECT_ID);
					strConnectedData = (String) mapPickListObj.get(sbRelatedData.toString());
					if(UIUtil.isNotNullAndNotEmpty(strObjectId) && UIUtil.isNotNullAndNotEmpty(strConnectedData))
					{
						if(strConnectedData.contains(SelectConstants.cSelectDelimiter))
						{
							
							strReturnValue = StringUtil.split(strConnectedData, SelectConstants.cSelectDelimiter).get(0);

						} else {
							strReturnValue = strConnectedData;
						}
					}
				}
			}
		}
    }
    catch (Exception ex) {
    	outLog.print("Exception in  getBatteryTypeFields: "+ex+"\n");
		outLog.flush();
    }
    return strReturnValue;
}

/**Added for 2018x6.1 Oct CW requirement 39692
 * @param strColumnName
 * @return
 */
private Map<String,String> getSettings(String strColumnName) {
	Map<String,String> mpColumnSettings = new HashMap<>();
	String strPicklistTypeName = (new StringBuilder()).append(pgV3Constants.SYMBOL_TILDA).append("pgPLIBatteryChemistry").append(pgV3Constants.SYMBOL_TILDA).append("pgPLIBatterySize").append(pgV3Constants.SYMBOL_TILDA).append("pgPLIYesNo").append(pgV3Constants.SYMBOL_TILDA).toString();
	String strPicklistAttributeName = (new StringBuilder()).append(pgV3Constants.SYMBOL_TILDA).append("pgPLBatteryWeight").append(pgV3Constants.SYMBOL_TILDA).append("pgPLBatteryWeightUOM").append(pgV3Constants.SYMBOL_TILDA).append("pgPLIBatteryVoltage").append(pgV3Constants.SYMBOL_TILDA).append("pgPLBatteryVolUOM").append(pgV3Constants.SYMBOL_TILDA).append("pgPLIBatteryCapacity").append(pgV3Constants.SYMBOL_TILDA).append("pgPLBatteryTCUOM").append(pgV3Constants.SYMBOL_TILDA).append("pgPLIBatteryCells").append(pgV3Constants.SYMBOL_TILDA).append("pgPLIBatteryLithum").append(pgV3Constants.SYMBOL_TILDA).append("pgPLBatteryWeightLiUOM").append(pgV3Constants.SYMBOL_TILDA).append("pgPLIBatteryWhRating").append(pgV3Constants.SYMBOL_TILDA).append("pgPLBatteryEnRUOM").append(pgV3Constants.SYMBOL_TILDA).toString();
	String strAttributeName = (new StringBuilder()).append(pgV3Constants.SYMBOL_TILDA).append("pgDPPQtyperCOP").append(pgV3Constants.SYMBOL_TILDA).append("pgNetWeight").append(pgV3Constants.SYMBOL_TILDA).append("pgGrossWeightUnitOfMeasure").append(pgV3Constants.SYMBOL_TILDA).append("pgPowerSource").append(pgV3Constants.SYMBOL_TILDA).append("pgBatteryType").append(pgV3Constants.SYMBOL_TILDA).append("pgBatteriesShippedInsideDevice").append(pgV3Constants.SYMBOL_TILDA).append("pgBatteriesShippedOutsideDevice").append(pgV3Constants.SYMBOL_TILDA).append("pgNumberOfBatteriesRequired").append(pgV3Constants.SYMBOL_TILDA).toString();
	//ProductName,ProductRevision,ProductTitle
	String strCommonColumnName = (new StringBuilder()).append(pgV3Constants.SYMBOL_TILDA).append("ProductName").append(pgV3Constants.SYMBOL_TILDA).append("ProductRevision").append(pgV3Constants.SYMBOL_TILDA).append("ProductTitle").append(pgV3Constants.SYMBOL_TILDA).toString();
	if(strPicklistTypeName.contains(pgV3Constants.SYMBOL_TILDA+strColumnName+pgV3Constants.SYMBOL_TILDA)) {
		mpColumnSettings.put(PRODUCTPARTDETAILS,DomainConstants.EMPTY_STRING);
		mpColumnSettings.put(PICKLISTTYPENAME,strColumnName);
		mpColumnSettings.put(PICKLISTATTRIBUTENAME,DomainConstants.EMPTY_STRING);
		mpColumnSettings.put(ATTRIBUTENAME,DomainConstants.EMPTY_STRING);
	} else if(strPicklistAttributeName.contains(pgV3Constants.SYMBOL_TILDA+strColumnName+pgV3Constants.SYMBOL_TILDA)) {
		mpColumnSettings.put(PRODUCTPARTDETAILS,DomainConstants.EMPTY_STRING);
		mpColumnSettings.put(PICKLISTTYPENAME,DomainConstants.EMPTY_STRING);
		mpColumnSettings.put(PICKLISTATTRIBUTENAME,strColumnName);	
		mpColumnSettings.put(ATTRIBUTENAME,DomainConstants.EMPTY_STRING);
	} else if(strAttributeName.contains(pgV3Constants.SYMBOL_TILDA+strColumnName+pgV3Constants.SYMBOL_TILDA)) {
		mpColumnSettings.put(PRODUCTPARTDETAILS,DomainConstants.EMPTY_STRING);
		mpColumnSettings.put(ATTRIBUTENAME,strColumnName);
		mpColumnSettings.put(PICKLISTATTRIBUTENAME,DomainConstants.EMPTY_STRING);
		mpColumnSettings.put(PICKLISTTYPENAME,DomainConstants.EMPTY_STRING);
	}
	else if(strCommonColumnName.contains(pgV3Constants.SYMBOL_TILDA+strColumnName+pgV3Constants.SYMBOL_TILDA)) {
		mpColumnSettings.put(PRODUCTPARTDETAILS,strColumnName);
		mpColumnSettings.put(ATTRIBUTENAME,DomainConstants.EMPTY_STRING);
		mpColumnSettings.put(PICKLISTATTRIBUTENAME,DomainConstants.EMPTY_STRING);
		mpColumnSettings.put(PICKLISTTYPENAME,DomainConstants.EMPTY_STRING);
	}
	return mpColumnSettings;
}

/**Added for 2018x6.1 Oct CW requirement 39692
 * @param context
 * @param strColumnName
 * @param isExists
 * @param mpObjectMap
 * @return
 * @throws Exception
 */
private String getCommonDetailsOfProductPart(Context context, String strColumnName, boolean isExists,
		Map<String, Object> mpObjectMap) throws Exception {
	String objId = (String) mpObjectMap.get(DomainConstants.SELECT_ID);
	String strReturn = DomainConstants.EMPTY_STRING;
	boolean hasAccess=false;
	if (UIUtil.isNotNullAndNotEmpty(objId)) {
		DomainObject domProductPart = DomainObject.newInstance(context);
		if (isExists) {
			domProductPart.setId(objId);
			hasAccess = FrameworkUtil.hasAccess(context,domProductPart,pgV3Constants.READSHOW_ACCESS);	
			if(strColumnName.equalsIgnoreCase(pgV3Constants.KEY_PRODUCTNAME)){
				strReturn = (String) mpObjectMap.get(DomainConstants.SELECT_NAME);							
			}else if(strColumnName.equalsIgnoreCase(pgV3Constants.KEY_PRODUCTREVISION)){
				strReturn = (String) mpObjectMap.get(DomainConstants.SELECT_REVISION);
			}else if(strColumnName.equalsIgnoreCase(pgV3Constants.KEY_PRODUCTTITLE)){
				strReturn = (String) mpObjectMap.get(pgV3Constants.SELECT_ATTRIBUTE_TITLE);
				if (strReturn.equalsIgnoreCase(pgV3Constants.DENIED) || !hasAccess) {
					strReturn = pgV3Constants.NO_ACCESS;
				}
			}						
		} else {
			strReturn = getCommonDetails(context, objId, strColumnName);
		}	
							
	}
	return strReturn;
}

/**Added for 2018x6.1 Oct CW requirement 39692
 * @param context
 * @param strObjectId
 * @param strColumnName
 * @return
 * @throws FrameworkException
 */
private String getCommonDetails(Context context, String strObjectId, String strColumnName) throws FrameworkException {
	
	boolean isContextPushed = false;
	String columnValue = DomainConstants.EMPTY_STRING;
	StringList slObjectSelects = new StringList(3);
	slObjectSelects.add(DomainConstants.SELECT_NAME);
	slObjectSelects.add(DomainConstants.SELECT_REVISION);
	slObjectSelects.add(pgV3Constants.ATTRIBUTE_TITLE);	
	if(UIUtil.isNotNullAndNotEmpty(strObjectId)){ 
		try {
			DomainObject domProductPart = DomainObject.newInstance(context);
			//User doesn't have access to fetch details of some Parts owned by other user, so need to push context to user agent.
			ContextUtil.pushContext(context,pgV3Constants.PERSON_USER_AGENT,DomainConstants.EMPTY_STRING,DomainConstants.EMPTY_STRING);			
			isContextPushed = true;
			domProductPart.setId(strObjectId);
			Map<String, Object> mMPPData;
			mMPPData = domProductPart.getInfo(context, slObjectSelects);			
			if(mMPPData.size()>0){
				if(strColumnName.equalsIgnoreCase(pgV3Constants.KEY_PRODUCTNAME)){
					columnValue = (String) mMPPData.get(DomainConstants.SELECT_NAME);
				}else if(strColumnName.equalsIgnoreCase(pgV3Constants.KEY_PRODUCTREVISION)){
					columnValue = (String) mMPPData.get(DomainConstants.SELECT_REVISION);
				}else if(strColumnName.equalsIgnoreCase(pgV3Constants.KEY_PRODUCTTITLE)){
					columnValue = (String) mMPPData.get(pgV3Constants.SELECT_ATTRIBUTE_TITLE);
					if (columnValue.equalsIgnoreCase(pgV3Constants.DENIED)) {
						columnValue = pgV3Constants.NO_ACCESS;
					}
				}
			}
		} catch (Exception e) {
			outLog.print("Exception in  getColumnDetails: "+e+"\n");
			outLog.flush();
		}finally {
			if (isContextPushed) {
				ContextUtil.popContext(context);
			}
		}
	}
	return columnValue;
}

/**Added for 2018x6.1 Oct CW requirement 39692
 * @param context
 * @param busId
 * @return
 * @throws Exception
 */
public boolean doesBusinessObjectExist(Context context, String busId)
{
	boolean returnValue = false;
	try{
		String[] objIDs = new String[]{busId};

		StringList busSelect = new StringList();
		busSelect.add(DomainConstants.SELECT_EXISTS);

		MapList mapList = DomainObject.getInfo(context, objIDs, busSelect);

		Map<String,Object> objectInformation = (Map) mapList.get(0);

		returnValue   = Boolean.parseBoolean((String) objectInformation.get(DomainConstants.SELECT_EXISTS));
	}
	catch(Exception e){
		outLog.print("Exception in  doesBusinessObjectExist: "+e+"\n");
		outLog.flush();
	}
	return returnValue;
}

/**Added for 2018x6.1 Oct CW requirement 39692
 * @param context
 * @param workbook
 * @param rowHeaderBatteryRollup
 * @param cellStyleBatteryRollup
 * @param mlBatteryRollUp
 * @param strSheetBatteryRollup
 * @param strHyperlink
 */
private void updateWorksheetBatteryRollup(Context context, XSSFWorkbook workbook, XSSFRow rowHeaderBatteryRollup,XSSFCellStyle cellStyleBatteryRollup, MapList mlBatteryRollUp, XSSFSheet sheetBatteryRollup,String strHyperlink, XSSFCellStyle styleGlobal) {
	try {
			String strHyperlinkLimit = EnoviaResourceBundle.getProperty(context, EMXCPNSTRINGRESOURCE, context.getLocale(),"emxCPN.PartAndSpecReport.HyperlinkLimit");
			int iHyperLinkLimit = Integer.parseInt(strHyperlinkLimit);
			int iRowCountAll=0;
			String strColumnNames = EnoviaResourceBundle.getProperty(context, EMXCPN, context.getLocale(),"emxCPN.FamilyCareReport.Worksheet.BatteryRollup.ColumnTypes");
			StringList slIndividualColumnNames = StringUtil.split(strColumnNames, COMMA);
			String columnName = DomainConstants.EMPTY_STRING;
			String strColumnValue = DomainConstants.EMPTY_STRING;
			String strColumnName = DomainConstants.EMPTY_STRING;
			int slIndividualColumnNamesSize = slIndividualColumnNames.size();
			for (int i = 0;i<slIndividualColumnNamesSize;i++) {
				columnName = slIndividualColumnNames.get(i);
				strColumnName = String.valueOf(columnName).trim();
				strColumnValue = EnoviaResourceBundle.getProperty(context, EMXCPN, context.getLocale(),"emxCPN.FamilyCareReport.Worksheet.Column."+strColumnName);
				Cell cell = rowHeaderBatteryRollup.createCell(i);
				cell.setCellStyle(cellStyleBatteryRollup);
				cell.setCellValue(strColumnValue);	
			}
			int rowCount = 0;
			String strCellValue = DomainConstants.EMPTY_STRING;
			Hashtable<String,Object> htCommonCol = new Hashtable<>();
			Map<String,Object> mp=new HashMap<>();
			HashMap<Integer,Object> hm= new HashMap<>();
			String strId = DomainConstants.EMPTY_STRING;
			Cell cell=null;
			String strValue = DomainConstants.EMPTY_STRING;
			String strChildId = DomainConstants.EMPTY_STRING;
			String strHyperlinkId = DomainConstants.EMPTY_STRING;
			String[] strSplittedValue;
			String strCurrentState = DomainConstants.EMPTY_STRING;
			String strTypeDisplay = DomainConstants.EMPTY_STRING;
			String sLanguage = context.getSession().getLanguage();
			int columnCount1 = 0;
			int mlBatteryRollUpSize = mlBatteryRollUp.size();
			for (int i=0;i<mlBatteryRollUpSize;i++){
				++rowCount;
				iRowCountAll = iRowCountAll + 1;
				XSSFRow row = sheetBatteryRollup.createRow(rowCount);
				columnCount1 = 0;
				mp = (Map)mlBatteryRollUp.get(i);
				htCommonCol =  (Hashtable<String, Object>) mp.get(COMMONCOLUMNS);
				strId = (String) htCommonCol.get(DomainConstants.SELECT_ID);
				strChildId = (String) mp.get(DomainConstants.SELECT_ID);
				strCurrentState = (String) htCommonCol.get(DomainConstants.SELECT_CURRENT);
				strTypeDisplay = (String) htCommonCol.get(DomainConstants.SELECT_TYPE);
				strTypeDisplay = i18nNow.getTypeI18NString(strTypeDisplay, sLanguage);
				String sCAID = (String) htCommonCol.get(SCAID);
				//Added by DSM Reports (Sogeti) for 2022x.5 (APR CW 2024) Defect 55875 - Start
				if(UIUtil.isNotNullAndNotEmpty(sCAID) && !sCAID.contains(HYPERLINK_PIPE)) {
					if(htCommonCol.get(CAREALIZEDNAME) != null && htCommonCol.get(CAPROPOSEDNAME) != null) {
						hm.put(0, HYPERLINK+htCommonCol.get(CAREALIZEDNAME)+HYPERLINK_PIPE+sCAID);
					} else if(htCommonCol.get(CAREALIZEDNAME) != null){
						hm.put(0, HYPERLINK+htCommonCol.get(CAREALIZEDNAME)+HYPERLINK_PIPE+sCAID);
					} else if(htCommonCol.get(CAPROPOSEDNAME) != null){
						hm.put(0, HYPERLINK+htCommonCol.get(CAPROPOSEDNAME)+HYPERLINK_PIPE+sCAID);
					} else {
						hm.put(0, DomainConstants.EMPTY_STRING);
					}
				} else {
					hm.put(0,htCommonCol.get(CAPROPOSEDNAME));
				}
				//Added by DSM Reports (Sogeti) for 2022x.5 (APR CW 2024) Defect 55875 - End
				
				hm.put(1, htCommonCol.get(pgV3Constants.SELECT_ATTRIBUTE_REASON_FOR_CHANGE));
				hm.put(2, HYPERLINK+htCommonCol.get(DomainConstants.SELECT_NAME)+HYPERLINK_PIPE+strId);
				hm.put(3, htCommonCol.get(pgV3Constants.SELECT_ATTRIBUTE_TITLE));
				hm.put(4, strTypeDisplay);
				hm.put(5, htCommonCol.get(DomainConstants.SELECT_REVISION));
				hm.put(6, strCurrentState);
				//Upadted order for defect 45372 Starts
				//Added for 2018x6.1 Dec CW requirement 41170 Starts
				hm.put(7, mp.get("AreBatteriesIncluded"));
				hm.put(8, mp.get("AreBatteriesRequired"));
				hm.put(9, mp.get("AreBatteriesBuiltIn"));
				//Added for 2018x6.1 Dec CW requirement 41170 Ends
				hm.put(10, HYPERLINK+mp.get("ProductName")+HYPERLINK_PIPE+strChildId);
				hm.put(11, mp.get("ProductRevision"));
				hm.put(12, mp.get("ProductTitle"));
				hm.put(13, mp.get("pgDPPQtyperCOP"));
				hm.put(14, mp.get("pgNetWeight"));
				hm.put(15, mp.get("pgGrossWeightUnitOfMeasure"));
				hm.put(16, mp.get("pgPowerSource"));
				hm.put(17, mp.get("pgBatteryType"));
				hm.put(18, mp.get("pgBatteriesShippedInsideDevice"));
				hm.put(19, mp.get("pgBatteriesShippedOutsideDevice"));
				hm.put(20, mp.get("pgNumberOfBatteriesRequired"));
				hm.put(21, mp.get("pgPLIBatteryChemistry"));
				hm.put(22, mp.get("pgPLBatteryWeight"));
				hm.put(23, mp.get("pgPLBatteryWeightUOM"));
				hm.put(24, mp.get("pgPLIBatterySize"));
				hm.put(25, mp.get("pgPLIBatteryVoltage"));
				hm.put(26, mp.get("pgPLBatteryVolUOM"));
				hm.put(27, mp.get("pgPLIBatteryCapacity"));
				hm.put(28, mp.get("pgPLBatteryTCUOM"));
				hm.put(29, mp.get("pgPLIBatteryCells"));
				hm.put(30, mp.get("pgPLIBatteryLithum"));
				hm.put(31, mp.get("pgPLBatteryWeightLiUOM"));
				hm.put(32, mp.get("pgPLIYesNo"));
				hm.put(33, mp.get("pgPLIBatteryWhRating"));
				hm.put(34, mp.get("pgPLBatteryEnRUOM"));
				//Upadted order for defect 45372 Ends
				XSSFCellStyle style = workbook.createCellStyle();
				style = setForeGroundColor(strCurrentState, style);
				//Added by DSM Reports (Sogeti) for 2022x.5 (APR CW 2024) Defect 55875 - Start
				XSSFCellStyle style1 = workbook.createCellStyle();
				//Added by DSM Reports (Sogeti) for 2022x.5 (APR CW 2024) Defect 55875 - End
				for(int j=0;j<hm.size();j++){								
					//Modified the code for _2022x_Aug CW Req-47097 :: Start
					// Modified by DSM Reports (Sogeti) for 22x.03 (August CW 2023) Defect 54091 - Start
					cell = row.createCell(columnCount1++);
					if (j == 2) {
						style = makeColumnNumeric(workbook, style);
					}
					cell.setCellStyle(style);
					
					// Modified by DSM Reports (Sogeti) for 22x.03 (August CW 2023) Defect 54091 - End
					//Modified the code for _2022x_Aug CW Req-47097 :: End
					strCellValue = (String)hm.get(j);
					if(UIUtil.isNotNullAndNotEmpty(strCellValue) && strCellValue.startsWith(HYPERLINK_COMPARE)){
						strSplittedValue = strCellValue.split("\\|",-1); 
						strHyperlinkId = strSplittedValue[(strSplittedValue.length)-1];
						strValue = strSplittedValue[(strSplittedValue.length)-2];
						if(pgV3Constants.TRUE.equalsIgnoreCase(strHyperlink) && iRowCountAll < iHyperLinkLimit){
							getHyperlink(context,cell,workbook,strValue,strHyperlinkId,strCurrentState);
						
						} else if(UIUtil.isNotNullAndNotEmpty(strValue)) {					
							cell.setCellValue(strValue);
						}
					}else {
						cell.setCellValue((String)hm.get(j));
						//Added by DSM Reports (Sogeti) for 2022x.5 (APR CW 2024) Defect 55875 - Start
						if(j == 0) {
							style1.cloneStyleFrom(style);
							style1.setWrapText(true);
							cell.setCellStyle(style1);
						}
						//Added by DSM Reports (Sogeti) for 2022x.5 (APR CW 2024) Defect 55875 - End
					}
					
				}
			}
			sheetFormatter(sheetBatteryRollup); // Added by DSM Reports (Sogeti) for 22x.04 (Dec CW 2023) Defect 56156 - START/END
			} catch (Exception e) {		
				 outLog.print("Exception in  updateWorksheetBatteryRollup: "+e+"\n");
				 outLog.flush();
			}
	}


/**Added for 2018x6.1 Oct CW requirement 39692
 * @param context
 * @param strObjectId
 * @param strColumnName
 * @return
 */
public  String getFormatedDecimalValue(String strValue, String strDecimalFormat)
{  
	double dNumber;
   try{
		int integerPlaces = strValue.indexOf('.');
		int decimalPlaces = strValue.length() - integerPlaces - 1;
		if(decimalPlaces>6 && UIUtil.isNotNullAndNotEmpty(strDecimalFormat)){
			DecimalFormat dfnumberFormat = new DecimalFormat(strDecimalFormat);
			if(UIUtil.isNotNullAndNotEmpty(strValue)){
				dNumber = Double.parseDouble(strValue);
				if(dNumber>0){
					strValue = dfnumberFormat.format(dNumber);
				}
			}
		} 	
   }catch(Exception e){
	   outLog.print("Exception in  getFormatedDecimalValue: "+e+"\n");
	   outLog.flush();
	}
	return strValue;
}

/**Added code for 2018x6.1 Oct CW requirement 39407
 * @param context
 * @param strValidInputType
 * @param mPassValue
 * @param obPartName
 * @return
 * @throws FrameworkException
 */
private MapList getValidParts(Context context,String strValidInputType,Map<String,String> mPassValue, Object obPartName) throws FrameworkException {
	String strLatestReleasePartOnly = mPassValue.get("LatestReleasePartOnly");
	MapList mlLatestNonReleasePart = new MapList();
	MapList mlLatestReleasePart = new MapList();
	MapList mlInputPartNew = new MapList();
	StringList slSelect = new StringList();
	slSelect.add(DomainConstants.SELECT_ID);
	slSelect.add(DomainConstants.SELECT_TYPE);
	//Added code for defect 42382 starts
	slSelect.add(DomainConstants.SELECT_REVISION);
	slSelect.add(DomainConstants.SELECT_CURRENT);
	//Added code for defect 42382 starts
	String strIncludeCompEquv = mPassValue.get("IncludeMatCompFromCompEquv");
	String strWhereExpressionNonRelease = "";
	String strWhereExpression = "";
	if(pgV3Constants.TRUE.equalsIgnoreCase(strIncludeCompEquv)) {
		strWhereExpressionNonRelease = (new StringBuilder()).append("current!=").append(pgV3Constants.STATE_RELEASE).append(pgV3Constants.SYMBOL_SPACE).append(pgV3Constants.SYMBOL_AND).append(" current!=").append(pgV3Constants.STATE_OBSOLETE).append(pgV3Constants.SYMBOL_SPACE).append(pgV3Constants.SYMBOL_AND).append(" revision == last").append(pgV3Constants.SYMBOL_SPACE).append(pgV3Constants.SYMBOL_AND).append(DomainConstants.SELECT_POLICY+"!="+"\'"+pgV3Constants.POLICY_MANUFACTUREREQUIVALENT+"\'").append(pgV3Constants.SYMBOL_SPACE).append(pgV3Constants.SYMBOL_AND).append(DomainConstants.SELECT_POLICY+"!="+"\'"+pgV3Constants.POLICY_SUPPLIEREQUIVALENT+"\'").toString();
		strWhereExpression = (new StringBuilder()).append("current==").append(pgV3Constants.STATE_RELEASE).append(pgV3Constants.SYMBOL_SPACE).append(pgV3Constants.SYMBOL_AND).append(DomainConstants.SELECT_POLICY+"!="+"\'"+pgV3Constants.POLICY_MANUFACTUREREQUIVALENT+"\'").append(pgV3Constants.SYMBOL_SPACE).append(pgV3Constants.SYMBOL_AND).append(DomainConstants.SELECT_POLICY+"!="+"\'"+pgV3Constants.POLICY_SUPPLIEREQUIVALENT+"\'").toString();
	} else {
		strWhereExpressionNonRelease = (new StringBuilder()).append("current!=").append(pgV3Constants.STATE_RELEASE).append(pgV3Constants.SYMBOL_SPACE).append(pgV3Constants.SYMBOL_AND).append(" current!=").append(pgV3Constants.STATE_OBSOLETE).append(pgV3Constants.SYMBOL_SPACE).append(pgV3Constants.SYMBOL_AND).append(" revision == last").toString();
		strWhereExpression = (new StringBuilder()).append("current==").append(pgV3Constants.STATE_RELEASE).toString();
	}
	mlLatestReleasePart = DomainObject.findObjects(context,//context
			   strValidInputType,//Type
			   (String)obPartName,//name
			   DomainConstants.QUERY_WILDCARD,//revision
			   DomainConstants.QUERY_WILDCARD,//owner
			   pgV3Constants.VAULT_ESERVICEPRODUCTION,//vault
			   strWhereExpression,//where expression
			   false,//expand type
			   slSelect);//object select
	mlLatestReleasePart.sort(DomainConstants.SELECT_REVISION, "descending", "string");
	if(!mlLatestReleasePart.isEmpty())
		mlInputPartNew.add(mlLatestReleasePart.get(0));
	if(pgV3Constants.FALSE.equalsIgnoreCase(strLatestReleasePartOnly)) {
		//To filter out latest pre-release version of all inputed part
		mlLatestNonReleasePart = DomainObject.findObjects(context,//context
										   strValidInputType,//Type
										   (String)obPartName,//name
										   DomainConstants.QUERY_WILDCARD,//revision
										   DomainConstants.QUERY_WILDCARD,//owner
										   pgV3Constants.VAULT_ESERVICEPRODUCTION,//vault
										   strWhereExpressionNonRelease,//where expression
										   false,//expand type
										   slSelect);//object select
		mlLatestNonReleasePart.sort(DomainConstants.SELECT_REVISION, "descending", "string");
		if(!mlLatestNonReleasePart.isEmpty())
			mlInputPartNew.add(mlLatestNonReleasePart.get(0));
		}
	return mlInputPartNew;
}

/**Added code for 2018x6.1 Oct CW requirement 39407
 * @param context
 * @param strPartNames
 * @param strUserName
 * @param mPassValue
 * @return
 * @throws Exception
 */
private String getFOPMaterials(Context context, String strPartNames, String strUserName,Map<String, String> mPassValue) throws Exception {
	String strexpandProductBOM =  mPassValue.get("ExpandProductBOM");
	StringList slEachPartName = StringUtil.split(strPartNames, pgV3Constants.SYMBOL_COMMA);
	String strChildType = DomainConstants.EMPTY_STRING;
	String strValidInputType = (new StringBuilder()).append(pgV3Constants.TYPE_FINISHEDPRODUCTPART).append(pgV3Constants.SYMBOL_COMMA).append(pgV3Constants.TYPE_PGFINISHEDPRODUCT).append(pgV3Constants.SYMBOL_COMMA).toString();
	MapList mlInputPartNew = new MapList();
	Map<String,Object> mpConnectedPart = new HashMap<>();
	String strPartId = DomainConstants.EMPTY_STRING;
	DomainObject dObjPart = null;
	MapList mlExpandProductChildBOM = new MapList();
	Map<String,Object> mpChild = new HashMap<>();
	String strChildId = DomainConstants.EMPTY_STRING;
	String strChildName = DomainConstants.EMPTY_STRING;
	StringBuilder sbPartNames = new StringBuilder();
	for (Object PartName : slEachPartName) {
		mlInputPartNew = getValidParts(context,strValidInputType,mPassValue,PartName);
		if(!mlInputPartNew.isEmpty()) {
			for(int inputPartSize=0;inputPartSize<mlInputPartNew.size();inputPartSize++){
				mpConnectedPart = (Map<String, Object>) mlInputPartNew.get(inputPartSize);
				strPartId = (String) mpConnectedPart.get(DomainConstants.SELECT_ID);
				dObjPart = DomainObject.newInstance(context,strPartId);
				mlExpandProductChildBOM = getBOMDataWithRestrictedDataCheck(context,dObjPart,strUserName,strexpandProductBOM);
				if(!mlExpandProductChildBOM.isEmpty()){
					for(int iChildPart=0;iChildPart<mlExpandProductChildBOM.size();iChildPart++){
						mpChild = (Map<String, Object>) mlExpandProductChildBOM.get(iChildPart);
						strChildName = (String) mpChild.get(DomainConstants.SELECT_NAME);
						strChildType = (String) mpChild.get(DomainConstants.SELECT_TYPE);
						strChildId = (String) mpChild.get(DomainConstants.SELECT_ID);
						if(pgV3Constants.TYPE_FORMULATIONPART.equalsIgnoreCase(strChildType)) {
							if(!sbPartNames.toString().contains(strChildName)){
								sbPartNames.append(strChildName).append(pgV3Constants.SYMBOL_COMMA);
							}
							sbPartNames = getRawMaterialFromFOP(context,strChildId,sbPartNames,strUserName);
						}
					}
				}
			}
		}
	}
	return sbPartNames.toString();
}

/**Added code for 2018x6.1 Oct CW requirement 39407
 * @param context
 * @param strChildId
 * @param sbPartNames
 * @return
 * @throws FrameworkException
 */
private StringBuilder getRawMaterialFromFOP(Context context, String strChildId,StringBuilder sbPartNames,String strUserName) throws FrameworkException {
	Pattern relPattern = new Pattern(pgV3Constants.RELATIONSHIP_PLANNEDFOR);
 	relPattern.addPattern(pgV3Constants.RELATIONSHIP_PLBOM);
 	Pattern objTypePattern = new Pattern(pgV3Constants.TYPE_PGRAWMATERIAL);
 	objTypePattern.addPattern(pgV3Constants.TYPE_RAWMATERIALPART);
 	objTypePattern.addPattern(pgV3Constants.TYPE_FORMULATIONPHASE);
 	objTypePattern.addPattern(pgV3Constants.TYPE_FORMULATIONPROCESS);
 	//Added for 2018x6.1 Oct CW defect 44886 Starts
 	objTypePattern.addPattern(pgV3Constants.TYPE_FORMULATIONPART);
 	objTypePattern.addPattern(pgV3Constants.TYPE_ANCILLARYRAWMATERIALPART);
 	//Added for 2018x6.1 Oct CW defect 44886 Ends
 	StringList objectSelects = new StringList(DomainConstants.SELECT_ID);
 	objectSelects.add(DomainConstants.SELECT_NAME);
 	objectSelects.add(DomainConstants.SELECT_TYPE);
 	objectSelects.add(DomainConstants.SELECT_REVISION);
 	objectSelects.add(DomainConstants.SELECT_POLICY);
 	objectSelects.add(DomainConstants.SELECT_CURRENT);
 	MapList mlFormulaIngredient = new MapList();
 	Map<String,Object> mpFOPChild = new HashMap<>();
 	String strFOPChildType = DomainConstants.EMPTY_STRING;
	String strFOPChildName = DomainConstants.EMPTY_STRING;
	//Added for 2018x6.1 Oct CW defect 44886 Starts
	String strFOPName = DomainConstants.EMPTY_STRING;
	String strFOPId = DomainConstants.EMPTY_STRING;
	boolean bAccess = false;
	//Added for 2018x6.1 Oct CW defect 44886 Ends
 	try {
 		DomainObject dObjPart = DomainObject.newInstance(context, strChildId);
		mlFormulaIngredient = dObjPart.getRelatedObjects(context, //context
				relPattern.getPattern(), //rel pattern
				objTypePattern.getPattern(),//type pattern
				objectSelects, //obj select
				null, //rel select 
				false, //get to
				true, //get from
				(short) 3,//recurse level
				null, //obj where cluase
				null, //rel where clause
				0); //limit
		if(!mlFormulaIngredient.isEmpty()) {
			for(int iFOPChildPart=0;iFOPChildPart<mlFormulaIngredient.size();iFOPChildPart++) {
				mpFOPChild = (Map<String, Object>) mlFormulaIngredient.get(iFOPChildPart);
				strFOPChildType = (String) mpFOPChild.get(DomainConstants.SELECT_TYPE);
				if(pgV3Constants.TYPE_RAWMATERIALPART.equalsIgnoreCase(strFOPChildType) || pgV3Constants.TYPE_PGRAWMATERIAL.equalsIgnoreCase(strFOPChildType) || TYPE_PG_ANCILLARY_RAW_MATERIAL_PART.equalsIgnoreCase(strFOPChildType)){
					strFOPChildName = (String) mpFOPChild.get(DomainConstants.SELECT_NAME);
					if(!sbPartNames.toString().contains(strFOPChildName)){
						sbPartNames.append(strFOPChildName).append(pgV3Constants.SYMBOL_COMMA);
					}
				}
				//Added for 2018x6.1 Oct CW defect 44886 Starts
				if(pgV3Constants.TYPE_FORMULATIONPART.equalsIgnoreCase(strFOPChildType)) {
					strFOPId = (String) mpFOPChild.get(DomainConstants.SELECT_ID);
					bAccess = accessCheck(context, strUserName, strFOPId);
					if(bAccess) {
						strFOPName = (String) mpFOPChild.get(DomainConstants.SELECT_NAME);
						if(!sbPartNames.toString().contains(strFOPName)){
							sbPartNames.append(strFOPName).append(pgV3Constants.SYMBOL_COMMA);
						}
						getRawMaterialFromFOP(context, strFOPId,sbPartNames,strUserName);
					}
				}
				//Added for 2018x6.1 Oct CW defect 44886 Ends
			}
		}
		
	} catch (Exception e) {
		outLog.print("Exception in  getRawMaterialFromFOP: "+e+"\n");
		outLog.flush();
	}
 	return sbPartNames;
}

/**Added for 2018x6.1 Dec_CW requirement 40223
 * @param context
 * @param workbook
 * @param rowHeaderCharacteristics
 * @param cellStyleCharacteristics
 * @param mlCharacteristics
 * @param sheetCharacteristics
 * @param strHyperlink
 */
private void updateWorksheetCharacteristics(Context context, XSSFWorkbook workbook, XSSFRow rowHeaderCharacteristics,XSSFCellStyle cellStyleCharacteristics, MapList mlCharacteristics, XSSFSheet sheetCharacteristics,String strHyperlink, XSSFCellStyle styleGlobal) {
	try {
			String strHyperlinkLimit = EnoviaResourceBundle.getProperty(context, EMXCPNSTRINGRESOURCE, context.getLocale(),"emxCPN.PartAndSpecReport.HyperlinkLimit");
			int iHyperLinkLimit = Integer.parseInt(strHyperlinkLimit);
			int iRowCountAll=0;
			String strColumnNames = EnoviaResourceBundle.getProperty(context, EMXCPN, context.getLocale(),"emxCPN.FamilyCareReport.Worksheet.Characteristics.ColumnTypes");
			String strCharacteristicsColumn = "emxCPN.FamilyCareReport.Worksheet.Characteristics.Column";
			createCellForWorksheet(context,strColumnNames,rowHeaderCharacteristics,cellStyleCharacteristics,strCharacteristicsColumn);
			int rowCount = 0;
			String strCellValue = DomainConstants.EMPTY_STRING;
			Hashtable<String,Object> htCommonCol = new Hashtable<>();
			Map<String,Object> mp=new HashMap<>();
			HashMap<Integer,Object> hm= new HashMap<>();
			String strId = DomainConstants.EMPTY_STRING;
			Cell cell=null;
			String strValue = DomainConstants.EMPTY_STRING;
			String strHyperlinkId = DomainConstants.EMPTY_STRING;
			String[] strSplittedValue;
			String strCurrentState = DomainConstants.EMPTY_STRING;
			String strTypeDisplay = DomainConstants.EMPTY_STRING;
			String sLanguage = context.getSession().getLanguage();
			int columnCount1 = 0;
			String strCriteria = DomainConstants.EMPTY_STRING;

			int mlCharacteristicsSize = mlCharacteristics.size();
			for (int i=0;i<mlCharacteristicsSize;i++){
				++rowCount;
				iRowCountAll = iRowCountAll + 1;
				XSSFRow row = sheetCharacteristics.createRow(rowCount);
				columnCount1 = 0;
				mp = (Map)mlCharacteristics.get(i);
				htCommonCol =  (Hashtable<String, Object>) mp.get(COMMONCOLUMNS);
				strId = (String) htCommonCol.get(DomainConstants.SELECT_ID);
				strCurrentState = (String) htCommonCol.get(DomainConstants.SELECT_CURRENT);
				strTypeDisplay = (String) htCommonCol.get(DomainConstants.SELECT_TYPE);
				strTypeDisplay = i18nNow.getTypeI18NString(strTypeDisplay, sLanguage);
				//Added by DSM Reports (Sogeti) for 2022x.5 (APR CW 2024) Defect 55875 - Start
				String sCAID = (String) htCommonCol.get(SCAID);
				if(UIUtil.isNotNullAndNotEmpty(sCAID) && !sCAID.contains(HYPERLINK_PIPE)) {
					if(htCommonCol.get(CAREALIZEDNAME) != null && htCommonCol.get(CAPROPOSEDNAME) != null) {
						hm.put(0, HYPERLINK+htCommonCol.get(CAREALIZEDNAME)+HYPERLINK_PIPE+htCommonCol.get(SCAID));
					} else if(htCommonCol.get(CAREALIZEDNAME) != null){
						hm.put(0, HYPERLINK+htCommonCol.get(CAREALIZEDNAME)+HYPERLINK_PIPE+htCommonCol.get(SCAID));
					} else if(htCommonCol.get(CAPROPOSEDNAME) != null){
						hm.put(0, HYPERLINK+htCommonCol.get(CAPROPOSEDNAME)+HYPERLINK_PIPE+htCommonCol.get(SCAID));
					} else {
						hm.put(0, DomainConstants.EMPTY_STRING);
					}
				}else {
					hm.put(0,htCommonCol.get(CAPROPOSEDNAME));
				}
				//Added by DSM Reports (Sogeti) for 2022x.5 (APR CW 2024) Defect 55875 - End

				hm.put(1, htCommonCol.get(pgV3Constants.SELECT_ATTRIBUTE_REASON_FOR_CHANGE));
				hm.put(2, HYPERLINK+htCommonCol.get(DomainConstants.SELECT_NAME)+HYPERLINK_PIPE+strId);
				hm.put(3, htCommonCol.get(pgV3Constants.SELECT_ATTRIBUTE_TITLE));
				hm.put(4, strTypeDisplay);
				hm.put(5, htCommonCol.get(DomainConstants.SELECT_REVISION));
				hm.put(6, strCurrentState);
				hm.put(7, mp.get(SELECT_ATTRIBUTE_PG_CHARACTERISTIC_CATEGORY));
				hm.put(8, mp.get(SELECT_ATTRIBUTE_SEQUENCEORDER));
				hm.put(9, mp.get(pgV3Constants.SELECT_ATTRIBUTE_PGCHANGE));
				hm.put(10, mp.get(SELECT_ATTRIBUTE_CATEGORYSPECIFICS));
				hm.put(11, mp.get(pgV3Constants.SELECT_ATTRIBUTE_TITLE));
				hm.put(12, mp.get(pgV3Constants.SELECT_ATTRIBUTE_PGCHARACTERISTICSPECIFICS));
				hm.put(13, mp.get(SELECT_ATTRIBUTE_DESIGNSPECIFICS));
				hm.put(14, mp.get(SELECT_TM_NAME));
				hm.put(15, mp.get(pgV3Constants.SELECT_ATTRIBUTE_PGTMLOGIC));
				hm.put(16, mp.get(pgV3Constants.SELECT_ATTRIBUTE_PGMETHODORIGIN));
				hm.put(17, mp.get(pgV3Constants.SELECT_ATTRIBUTE_PGMETHODNUMBER));
				hm.put(18, mp.get(pgV3Constants.SELECT_ATTRIBUTE_PGMETHODSPECIFICS));
				hm.put(19, mp.get(SELECT_TMRD_NAME));
				hm.put(20, mp.get(pgV3Constants.SELECT_ATTRIBUTE_PGSAMPLING));
				hm.put(21, mp.get(pgV3Constants.SELECT_ATTRIBUTE_PGSUBGROUP));
				hm.put(22, mp.get(pgV3Constants.SELECT_ATTRIBUTE_PGPLANTTESTING));
				hm.put(23, mp.get(pgV3Constants.SELECT_ATTRIBUTE_PGPLANTTESTINGRETESTING));
				hm.put(24, mp.get(pgV3Constants.SELECT_ATTRIBUTE_PGRETESTINGUOM));
				hm.put(25, mp.get("Dimension"));
				hm.put(26, mp.get("LSL"));
				hm.put(27, mp.get("LRRL"));
				hm.put(28, mp.get("LT"));
				hm.put(29, mp.get("Target"));
				hm.put(30, mp.get("UT"));
				hm.put(31, mp.get("URRL"));
				hm.put(32, mp.get("USL"));
				hm.put(33, mp.get("Display Unit"));
				hm.put(34, mp.get(SELECT_ATTRIBUTE_REPORTTONEAREST));
				hm.put(35, mp.get(pgV3Constants.SELECT_ATTRIBUTE_PGREPORTTYPE));
				hm.put(36, mp.get(pgV3Constants.SELECT_ATTRIBUTE_PGRELEASECRITERIA));
				hm.put(37, mp.get(pgV3Constants.SELECT_ATTRIBUTE_PGACTIONREQUIRED));
				hm.put(38, mp.get(pgV3Constants.SELECT_ATTRIBUTE_PGCRITICALITYFACTOR));
				hm.put(39, mp.get(pgV3Constants.SELECT_ATTRIBUTE_PGBASIS));
				hm.put(40, mp.get(pgV3Constants.SELECT_ATTRIBUTE_PGTESTGROUP));
				hm.put(41, mp.get(pgV3Constants.SELECT_ATTRIBUTE_PGAPPLICATION));
				hm.put(42, mp.get(DomainConstants.SELECT_DESCRIPTION));
				hm.put(43, mp.get(SELECT_ATTRIBUTE_CHARNOTES));
				hm.put(44, mp.get(SELECT_CHAR_MASTER_NAME));
				hm.put(45, mp.get(SELECT_CHAR_MASTER_REVISION));
				hm.put(46, mp.get(SELECT_CHAR_MASTER_TITLE));
				strCriteria = getCriteria(context,mp);
				hm.put(47, strCriteria);
				XSSFCellStyle style = workbook.createCellStyle();
				style = setForeGroundColor(strCurrentState, style);
				//Added by DSM Reports (Sogeti) for 2022x.5 (APR CW 2024) Defect 55875 - Start
				XSSFCellStyle style1 = workbook.createCellStyle();
				//Added by DSM Reports (Sogeti) for 2022x.5 (APR CW 2024) Defect 55875 - End
				for(int j=0;j<hm.size();j++){								
					//Modified the code for _2022x_Aug CW Req-47097 :: Start
					// Modified by DSM Reports (Sogeti) for 22x.03 (August CW 2023) Defect 54091 - Start
					cell = row.createCell(columnCount1++);
					if (j == 2) {
						style = makeColumnNumeric(workbook, style);
					}
					cell.setCellStyle(style);
					
					// Modified by DSM Reports (Sogeti) for 22x.03 (August CW 2023) Defect 54091 - End
					//Modified the code for _2022x_Aug CW Req-47097 :: End
					if(hm.get(j) instanceof StringList) {
						strCellValue = hm.get(j).toString().replace("[", "").replace("]", "").replace(pgV3Constants.SYMBOL_COMMA,pgV3Constants.SYMBOL_PIPE);
					}
					else {
						strCellValue = (String)hm.get(j);
					}
					if(UIUtil.isNotNullAndNotEmpty(strCellValue) && strCellValue.startsWith(HYPERLINK_COMPARE)){
						strSplittedValue = strCellValue.split("\\|",-1); 
						strHyperlinkId = strSplittedValue[(strSplittedValue.length)-1];
						strValue = strSplittedValue[(strSplittedValue.length)-2];
						if(pgV3Constants.TRUE.equalsIgnoreCase(strHyperlink) && iRowCountAll < iHyperLinkLimit){
							getHyperlink(context,cell,workbook,strValue,strHyperlinkId,strCurrentState);
						
						} else if(UIUtil.isNotNullAndNotEmpty(strValue)) {					
							cell.setCellValue(strValue);
						}
					}else {
						cell.setCellValue(strCellValue);
						//Added by DSM Reports (Sogeti) for 2022x.5 (APR CW 2024) Defect 55875 - Start
						if(j == 0) {
							style1.cloneStyleFrom(style);
							style1.setWrapText(true);
							cell.setCellStyle(style1);
						}
						//Added by DSM Reports (Sogeti) for 2022x.5 (APR CW 2024) Defect 55875 - End
					}
					
				}
			}
			sheetFormatter(sheetCharacteristics); // Added by DSM Reports (Sogeti) for 22x.04 (Dec CW 2023) Defect 56156 - START/END
			} catch (Exception e) {		
				 outLog.print("Exception in  updateWorksheetCharacteristics: "+e+"\n");
				 outLog.flush();
			}
	}

/**Added for 2018x6.1 Dec_CW requirement 40223
 * @param context
 * @param mp
 * @return
 * @throws FrameworkException
 */
private String getCriteria(Context context, Map<String, Object> mp) throws FrameworkException {
	//Updated code for 45338 Starts
	StringList slCriteria = new StringList();
	String strCriteria = DomainConstants.EMPTY_STRING;
	String strPhysicalId = DomainConstants.EMPTY_STRING;
	StringBuilder sbCriteria = new StringBuilder();
	String strCriteriaFinal = DomainConstants.EMPTY_STRING;
	DomainObject dobj = null;
	String strCompareCriteria = "";
	StringList slCompareCriteria = new StringList();
	if(mp.get(SELECT_CRITERIA) instanceof StringList) {
		slCriteria = (StringList) mp.get(SELECT_CRITERIA);
		for(int i=0;i<slCriteria.size();i++) {
			strPhysicalId = slCriteria.get(i);
			dobj = DomainObject.newInstance(context, strPhysicalId);
			strCriteria = dobj.getInfo(context, pgV3Constants.SELECT_ATTRIBUTE_TITLE);
			//Added by DSM Reports (Sogeti) for 22x.04 (December CW 2023) Defect 54817 - Starts
			if(i==(sbCriteria.length()-1)){
				sbCriteria.append(strCriteria).toString();;
			}else {
				//Added by DSM Reports (Sogeti) for 22x.04 (December CW 2023) Defect 54817 - Ends
				sbCriteria.append(strCriteria).append(pgV3Constants.SYMBOL_PIPE).toString();
			}
		}
		if(sbCriteria.length()>0) {
			strCriteriaFinal = sbCriteria.toString().substring(0, sbCriteria.length()-1);
		}
	} else {
		strPhysicalId = (String) mp.get(SELECT_CRITERIA);
		if(UIUtil.isNotNullAndNotEmpty(strPhysicalId)) {
			dobj = DomainObject.newInstance(context, strPhysicalId);
			strCriteriaFinal = dobj.getInfo(context, pgV3Constants.SELECT_ATTRIBUTE_TITLE);
		}
	}
	
	//Updated code for 45338 Ends
	return strCriteriaFinal;
}

/**Added for 2018x6.1 Dec_CW requirement 40223
 * @param context
 * @param mpCommonColumnsDetail
 * @return
 * @throws Exception
 */
private MapList getAPPCharacteristic(Context context , Map<String,Object> mpCommonColumnsDetail, String strUserName)throws Exception{
	
	boolean bContextPushed=false;
	//Check is LPD APP
	String strAPPId = (String) mpCommonColumnsDetail.get(DomainConstants.SELECT_ID);
	Map<String,Object> programMap = new HashMap<>();
	programMap.put("objectId", strAPPId);
	programMap.put("objectType", pgV3Constants.TYPE_ASSEMBLEDPRODUCTPART);
	String []args = JPO.packArgs(programMap);
	boolean isLPDAPP = (boolean)JPO.invoke(context, "pgDSMLayeredProductUtil", null, "isLayeredProductPart", args, Object.class);
	MapList appFinalCharList = new MapList();
	if(isLPDAPP) {
		//Fetch Dimension Display Values Map
		ENOICharacteristicsUtil charUtil = ENOCharacteristicFactory.getCharacteristicUtil(context);
		HashMap<String, StringList> mpDimensionDisplayVals =  charUtil.getDimensions(context);
		try {
			//Push Context is done to get the characteristic and improve the performance of the Characteristic tab in the widget. In Enovia too if the user has access to the APP they already get access to the Characteristics
			ContextUtil.pushContext(context, PropertyUtil.getSchemaProperty(context, pgV3Constants.PERSON_USER_AGENT), null, context.getVault().getName());
			bContextPushed = true;
			//Get EBOM 
			DomainObject appObj = DomainObject.newInstance(context , strAPPId);
			MapList childApp =appObj.getRelatedObjects(context, //context
					DomainConstants.RELATIONSHIP_EBOM, //relationship name
					pgV3Constants.TYPE_ASSEMBLEDPRODUCTPART, //Type Name
					new StringList(DomainConstants.SELECT_ID),//Object Select
					null,//rel Select
					false,//get To
					true,//get From
					(short)1,//recurse level
					null,//obj where Clause
					null,//rel where Clause
					0);//limit	
			StringList appListIds =new StringList();
			appListIds.add(strAPPId);
			Iterator<Map<String,Object>> childAppItr = childApp.iterator();
			Map<String,Object> appTempMap;
			while(childAppItr.hasNext()) {
				appTempMap =childAppItr.next();
				appListIds.add((String)appTempMap.get(DomainConstants.SELECT_ID));
				
			}
			StringList strSelectable = new StringList();
			strSelectable.add(pgV3Constants.SELECT_ATTRIBUTE_TITLE);
			strSelectable.add(pgV3Constants.SELECT_ATTRIBUTE_PGCRITICALITYFACTOR);
			strSelectable.add(pgV3Constants.SELECT_ATTRIBUTE_PGACTIONREQUIRED);
			strSelectable.add(pgV3Constants.SELECT_ATTRIBUTE_PGCHANGE);
			strSelectable.add(pgV3Constants.SELECT_ATTRIBUTE_PGCHARACTERISTIC);
			strSelectable.add(pgV3Constants.SELECT_ATTRIBUTE_PGCHARACTERISTICSPECIFICS);
			strSelectable.add(pgV3Constants.SELECT_ATTRIBUTE_PGTMLOGIC);
			strSelectable.add(pgV3Constants.SELECT_ATTRIBUTE_PGMETHODORIGIN);
			strSelectable.add(pgV3Constants.SELECT_ATTRIBUTE_PGMETHODNUMBER);
			strSelectable.add(pgV3Constants.SELECT_ATTRIBUTE_PGMETHODSPECIFICS);
			strSelectable.add(pgV3Constants.SELECT_ATTRIBUTE_PGSAMPLING);
			strSelectable.add(pgV3Constants.SELECT_ATTRIBUTE_PGSUBGROUP);
			strSelectable.add(pgV3Constants.SELECT_ATTRIBUTE_PGPLANTTESTING);
			strSelectable.add(pgV3Constants.SELECT_ATTRIBUTE_PGPLANTTESTINGRETESTING);
			strSelectable.add(pgV3Constants.SELECT_ATTRIBUTE_PGRETESTINGUOM);
			strSelectable.add(pgV3Constants.SELECT_ATTRIBUTE_PGRELEASECRITERIA);
			strSelectable.add(pgV3Constants.SELECT_ATTRIBUTE_PGREPORTTYPE);
			strSelectable.add(pgV3Constants.SELECT_ATTRIBUTE_PGBASIS);
			strSelectable.add(pgV3Constants.SELECT_ATTRIBUTE_PGTESTGROUP);
			strSelectable.add(pgV3Constants.SELECT_ATTRIBUTE_PGAPPLICATION);
			strSelectable.add(DomainConstants.SELECT_DESCRIPTION);
			strSelectable.add(SELECT_ATTRIBUTE_CATEGORYSPECIFICS);
			strSelectable.add(SELECT_ATTRIBUTE_PG_CHARACTERISTIC_CATEGORY);
			strSelectable.add(SELECT_ATTRIBUTE_DESIGNSPECIFICS);
			strSelectable.add(SELECT_ATTRIBUTE_REPORTTONEAREST);
			strSelectable.add(SELECT_ATTRIBUTE_CHARNOTES);
			strSelectable.add(SELECT_CHAR_MASTER_TITLE);
			strSelectable.add(SELECT_TM_NAME);
			strSelectable.add(SELECT_TM_PHYSICALID);
			strSelectable.add(SELECT_TM_TYPE);
			strSelectable.add(SELECT_TMRD_NAME);
			strSelectable.add(SELECT_TMRD_PHYSICALID);
			strSelectable.add(SELECT_TMRD_TYPE);
			strSelectable.add(SELECT_CHAR_MASTER);
			strSelectable.add(SELECT_CHAR_MASTER_NAME);
			strSelectable.add(SELECT_CHAR_MASTER_REVISION);
			strSelectable.add(SELECT_CRITERIA);
			strSelectable.add(SELECT_CRITERIA_TITLE);
			strSelectable.add("interface");
			strSelectable.add(SELECT_TMRD);
			strSelectable.add(SELECT_TMRD_ID);
	
			MapList appCharList = new MapList();
			for(String strTempAppID : appListIds) {
				appCharList.addAll(CharacteristicServices.getAssociatedCharactertisticsOnItem(context, strTempAppID, strSelectable, false));
			}
			Map<String,Object> mpCharData;
			Map<String,Object> mapCriteriaDetails = new HashMap<>();
			StringList slInterface;
			String sDimension;
			for(int j = 0 ; j < appCharList.size(); j++) {
				mpCharData = (Map) appCharList.get(j);
				filterCriteriaPhysicalIds(context, mpCharData, mapCriteriaDetails);
				ENOICharacteristic characteristic = ENOCharacteristicFactory.getCharacteristicById(context, (String)mpCharData.get("physicalid"));
				mpCharData.put("LSL",characteristic.getLowerSpecificationLimit(context));
				mpCharData.put("LRRL",characteristic.getLowerRoutineReleaseLimit(context));
				mpCharData.put("LT",characteristic.getMinimalValue(context));
				mpCharData.put("Target",characteristic.getNominalValue(context));
				mpCharData.put("UT",characteristic.getMaximalValue(context));
				mpCharData.put("URRL",characteristic.getUpperRoutineReleaseLimit(context));
				mpCharData.put("USL",characteristic.getUpperSpecificationLimit(context));
				mpCharData.put(CharacteristicMasterConstants.PARAM_DISPLAY_UNIT,characteristic.getDisplayUnit());
				slInterface = (StringList) mpCharData.get("interface");
				sDimension =identifyDimensionUsingInterface(slInterface,mpDimensionDisplayVals);
				mpCharData.put("Dimension", sDimension);
				mpCharData.put(COMMONCOLUMNS,mpCommonColumnsDetail);
				appFinalCharList.add(mpCharData);
			}
			appFinalCharList.sort(pgV3Constants.SELECT_ATTRIBUTE_PGREPORTTYPE, "descending", "string");
			appFinalCharList.sort(SELECT_ATTRIBUTE_PG_CHARACTERISTIC_CATEGORY, "ascending", "string");
		
		} catch (Exception e) {		
			 outLog.print("Exception in  getAPPCharacteristic: "+e+"\n");
			 outLog.flush();
		}
		
		finally {
			if(bContextPushed)
			{
				ContextUtil.popContext(context);
				bContextPushed = false;
			}
		}
	}
	return appFinalCharList;

}

/**
 * @param context
 * @param mpCharData
 * @param mapCriteriaDetails
 * @throws FrameworkException
 */
private void filterCriteriaPhysicalIds(Context context, Map<String,Object> mpCharData, Map<String,Object> mapCriteriaDetails) throws FrameworkException 
{
	StringList slCriteriaPhysicalIdList = new StringList();
	Object objectCriteriaPhysicalIdList;
	Map<String,Object> mapCriteriaInfo;
	Map<String,Object> mapFinalCriteriaInfo = new HashMap<>();
	String sObjectLogicalId;
	MapList mlCriteriaInfo;
	Map<String,Object> mapCriteria;
	String sObjectPhysicalId;
	String sCriteriaLocalPhysicalId;
	if(mpCharData.containsKey(SELECT_CRITERIA))
	{
		objectCriteriaPhysicalIdList = mpCharData.get(SELECT_CRITERIA);
		if ((objectCriteriaPhysicalIdList instanceof StringList)) {
			slCriteriaPhysicalIdList = (StringList)objectCriteriaPhysicalIdList;
		}				
	}
	StringList slCriteriaPhysicalIdToBeFetched = new StringList();
	if(!slCriteriaPhysicalIdList.isEmpty())
	{
		for(String sCriteriaPhysicalId : slCriteriaPhysicalIdList)
		{
			if(!mapCriteriaDetails.containsKey(sCriteriaPhysicalId))
			{
				slCriteriaPhysicalIdToBeFetched.add(sCriteriaPhysicalId);
			}
		}
		if(!slCriteriaPhysicalIdToBeFetched.isEmpty())
		{
			StringList slObjectSelects = new StringList();
			slObjectSelects.add(DomainConstants.SELECT_REVISION);
			slObjectSelects.add(SELECT_LOGICAL_ID);
			slObjectSelects.add(SELECT_PHYSICAL_ID);
			MapList mlCriteriaFetched = DomainObject.getInfo(context, slCriteriaPhysicalIdToBeFetched.toArray(new String[slCriteriaPhysicalIdToBeFetched.size()]), slObjectSelects);
			for(int n = 0; n < mlCriteriaFetched.size(); n++)
			{
				mapCriteria = (Map) mlCriteriaFetched.get(n);
				sObjectPhysicalId = (String) mapCriteria.get(SELECT_PHYSICAL_ID);
				mapCriteriaDetails.put(sObjectPhysicalId, mapCriteria);
			}
		}		
		for(String sCriteriaPhysicalId : slCriteriaPhysicalIdList)
		{
			if(mapCriteriaDetails.containsKey(sCriteriaPhysicalId))
			{
				mapCriteriaInfo = (Map)mapCriteriaDetails.get(sCriteriaPhysicalId);
				sObjectLogicalId = (String)mapCriteriaInfo.get(SELECT_LOGICAL_ID);
				mlCriteriaInfo = new MapList();
				if(mapFinalCriteriaInfo.containsKey(sObjectLogicalId))
				{
					mlCriteriaInfo = (MapList)mapFinalCriteriaInfo.get(sObjectLogicalId);
				}
				mlCriteriaInfo.add(mapCriteriaInfo);
				mapFinalCriteriaInfo.put(sObjectLogicalId, mlCriteriaInfo);
			}
		}
		Map<String,Object> mapLocalCriteriaMap;
		StringList slLocalCriteriaPhysicalIdList = new StringList();
		for(String sCriteriaPhysicalId : slCriteriaPhysicalIdList)
		{
			mapCriteriaInfo = (Map) mapCriteriaDetails.get(sCriteriaPhysicalId);
			sObjectLogicalId = (String)mapCriteriaInfo.get(SELECT_LOGICAL_ID);
			if(mapFinalCriteriaInfo.containsKey(sObjectLogicalId))
			{
				mlCriteriaInfo = (MapList)mapFinalCriteriaInfo.get(sObjectLogicalId);					
				if(!mlCriteriaInfo.isEmpty())
				{
					mlCriteriaInfo.sort(DomainConstants.SELECT_REVISION, "descending", "integer");
					mapLocalCriteriaMap = (Map)mlCriteriaInfo.get(0);
					sCriteriaLocalPhysicalId = (String)mapLocalCriteriaMap.get(SELECT_PHYSICAL_ID);	
					if(!slLocalCriteriaPhysicalIdList.contains(sCriteriaLocalPhysicalId))
					{
						slLocalCriteriaPhysicalIdList.add(sCriteriaLocalPhysicalId);						
					}
				}
			}
		}
		mpCharData.put(SELECT_CRITERIA, slLocalCriteriaPhysicalIdList);
	}
}

/**Added for 2018x6.1 Dec_CW requirement 40223
 * @param slInterfaceList
 * @param mpDimensionDisplayVals
 * @return
 */
private String identifyDimensionUsingInterface(StringList slInterfaceList, Map<String, StringList> mpDimensionDisplayVals) {
	String sReturnDimension = DomainConstants.EMPTY_STRING;
  	Map<String,Object> mpDimensionNames;
  	if(mpDimensionDisplayVals.size() > 0 ) {
  		mpDimensionNames = prepareMapForName(mpDimensionDisplayVals);
  		
  		if(!mpDimensionNames.isEmpty()) {
	  		String sValue;
		  	for(int i = 0 ; i < slInterfaceList.size(); i++) {
		  		sValue = slInterfaceList.get(i);
		  		if(UIUtil.isNotNullAndNotEmpty(sValue) && mpDimensionNames.containsKey(sValue)) {
		  			sReturnDimension = (String) mpDimensionNames.get(sValue);
		  			break;
		  		}
		  	}
	  	}
  	}
	return sReturnDimension;
}

/**Added for 2018x6.1 Dec_CW requirement 40223
 * @param mpReturnMap
 * @return
 */
public Map<String,Object> prepareMapForName(Map<String, StringList> mpReturnMap) {
	HashMap<String,Object> mpDisplayName = new HashMap<>();
	StringList slActual = mpReturnMap.get("field_choices");
	StringList slDisplay = mpReturnMap.get("field_display_choices"); 
	for(int i = 0 ; i < slActual.size(); i++ ) {
		mpDisplayName.put(slActual.get(i),slDisplay.get(i) );
	}
	return mpDisplayName;
}


/**Added for 2018x6.1 Dec_CW requirement 40224
 * @param context
 * @param mpCommonColumnsDetail
 * @return
 */
private MapList getDesignParameter(Context context, Map<String,Object> mpCommonColumnsDetail, String strUserName) {
	Map<String,Object> hmArgs = new HashMap<>();
	String strPartId = (String) mpCommonColumnsDetail.get(DomainConstants.SELECT_ID);
	hmArgs.put("objectId",strPartId);
	MapList mlFinalDesignParameter = new MapList();
	MapList mlDesignParameterTemp = new MapList();
	Map<String,Object> mpDesignParameter = new HashMap<>();
	//Modified the code for Defect 49698 - Spec Reader Access Issue - Starts
	boolean hasAccess = false;
	boolean isContextPushed = false;
	//Modified the code for Defect 49698 - Spec Reader Access Issue - Ends
	try {
		//Modified the code for Defect 49698 - Spec Reader Access Issue - Starts
		if(SPECREADER.equalsIgnoreCase(strOriginatingSource)) {
			hasAccess = accessCheck(context, strUserName, strPartId);
			if(hasAccess) {
				//Push Context User Agent
				ContextUtil.pushContext(context,PropertyUtil.getSchemaProperty(context,"User Agent"),DomainConstants.EMPTY_STRING,DomainConstants.EMPTY_STRING);
				isContextPushed = true;
				
			}
		}
		//Modified the code for Defect 49698 - Spec Reader Access Issue - Ends
		MapList mlDesignParameter = JPO.invoke(context,"pgDSMLayeredProductUtil",null,"getValuesFromXML",JPO.packArgs(hmArgs),MapList.class);
		if(!mlDesignParameter.isEmpty()) {
			//Code to sort the rows 
			Map<String,Object> mp=new HashMap<>();
			MapList mlGroupList = new MapList();
			MapList mlLayerList = new MapList();
			MapList mlParameterList = new MapList();
			String strGroup = DomainConstants.EMPTY_STRING;
			String strLayer = DomainConstants.EMPTY_STRING;
			String strParameterSet = DomainConstants.EMPTY_STRING;
			String strPrevGroup = DomainConstants.EMPTY_STRING;
			String strPrevLayer = DomainConstants.EMPTY_STRING;
			String strPrevParameterSet = DomainConstants.EMPTY_STRING;
			mlDesignParameter.sort("Group", "ascending", "string");
			int mlDesignParameterSize = mlDesignParameter.size();
			int mlGroupListSize = 0;
			int mlLayerListSize = 0;
			int mlParameterListSize = 0;
			for (int i=0;i<mlDesignParameterSize;i++){				
				mp = (Map)mlDesignParameter.get(i);
				strGroup = (String)(mp.get("Group"));
				if (strGroup.equals(strPrevGroup) || strPrevGroup.equals(DomainConstants.EMPTY_STRING)) {
					mlGroupList.add(mp);
					strPrevGroup = strGroup;
				}
				else {
					--i;
					strPrevGroup = DomainConstants.EMPTY_STRING;
				}
				if (i==mlDesignParameterSize - 1  || !strGroup.equals(strPrevGroup)) {
					strPrevGroup = DomainConstants.EMPTY_STRING;					
					mlGroupList.sort("Layer", "ascending", "string");
					mlGroupListSize = mlGroupList.size();
					for (int j=0;j<mlGroupListSize;j++){			
						mp = (Map)mlGroupList.get(j);
						strLayer = (String)(mp.get("Layer"));
						if (strLayer.equals(strPrevLayer) || strPrevLayer.equals(DomainConstants.EMPTY_STRING)) {
							mlLayerList.add(mp);
							strPrevLayer = strLayer;
						}
						else {
							--j;
							strPrevLayer = DomainConstants.EMPTY_STRING;
						}
						if (j==mlGroupListSize - 1 || !strLayer.equals(strPrevLayer)) {
							strPrevLayer = DomainConstants.EMPTY_STRING;							
							mlLayerList.sort("ParameterSet", "ascending", "string");
							mlLayerListSize = mlLayerList.size();
							for (int k=0;k<mlLayerListSize;k++){				
								mp = (Map)mlLayerList.get(k);
								mlDesignParameterTemp.add(mp);
							}
							mlLayerList.clear();
						}
					}					
					mlGroupList.clear();
				}	
			}
			//end sort rows				
			for(int i=0;i<mlDesignParameterTemp.size();i++) {
				mpDesignParameter = (Map<String, Object>) mlDesignParameterTemp.get(i);
				mpDesignParameter.put(COMMONCOLUMNS,mpCommonColumnsDetail);
				mlFinalDesignParameter.add(mpDesignParameter);
			}
		}
	} catch (Exception e) {
		 outLog.print("Exception in  getDesignParameter: "+e+"\n");
		 outLog.flush();
		//Added the code for Defect 49698 - Spec Reader Access Issue - Starts
	}finally {
		if(isContextPushed) {
			try {
				ContextUtil.popContext(context);
			}catch(Exception e) {
				outLog.print("Exception in getDesignParameter Method while popping the context "+e+"\n");
				outLog.flush();
			}
			
		}
	}
	//Added the code for Defect 49698 - Spec Reader Access Issue - Ends
	return mlFinalDesignParameter;
}

/**Added for 2018x6.1 Dec_CW requirement 40224
 * @param context
 * @param workbook
 * @param rowHeaderDesignParameter
 * @param cellStyleDesignParameter
 * @param mlDesignParameter
 * @param sheetDesignParameter
 * @param strHyperlink
 */
private void updateWorksheetDesignParameter(Context context, XSSFWorkbook workbook, XSSFRow rowHeaderDesignParameter,XSSFCellStyle cellStyleDesignParameter, MapList mlDesignParameter, XSSFSheet sheetDesignParameter,String strHyperlink, XSSFCellStyle styleGlobal) {
	try {
			String strHyperlinkLimit = EnoviaResourceBundle.getProperty(context, EMXCPNSTRINGRESOURCE, context.getLocale(),"emxCPN.PartAndSpecReport.HyperlinkLimit");
			int iHyperLinkLimit = Integer.parseInt(strHyperlinkLimit);
			int iRowCountAll=0;
			String strColumnNames = EnoviaResourceBundle.getProperty(context, EMXCPN, context.getLocale(),"emxCPN.FamilyCareReport.Worksheet.DesignParameter.ColumnTypes");
			String strDesignParameterColumn = "emxCPN.FamilyCareReport.Worksheet.DesignParameter.Column";
			createCellForWorksheet(context,strColumnNames,rowHeaderDesignParameter,cellStyleDesignParameter,strDesignParameterColumn);
			int rowCount = 0;
			String strCellValue = DomainConstants.EMPTY_STRING;
			Hashtable<String,Object> htCommonCol = new Hashtable<>();
			Map<String,Object> mp=new HashMap<>();
			HashMap<Integer,Object> hm= new HashMap<>();
			String strId = DomainConstants.EMPTY_STRING;
			Cell cell=null;
			String strValue = DomainConstants.EMPTY_STRING;
			String strHyperlinkId = DomainConstants.EMPTY_STRING;
			String[] strSplittedValue;
			String strCurrentState = DomainConstants.EMPTY_STRING;
			String strTypeDisplay = DomainConstants.EMPTY_STRING;
			String sLanguage = context.getSession().getLanguage();
			int columnCount1 = 0;
			int mlDesignParameterSize = mlDesignParameter.size();
			for (int i=0;i<mlDesignParameterSize;i++){
				++rowCount;
				iRowCountAll = iRowCountAll + 1;
				XSSFRow row = sheetDesignParameter.createRow(rowCount);
				columnCount1 = 0;
				mp = (Map)mlDesignParameter.get(i);
				htCommonCol =  (Hashtable<String, Object>) mp.get(COMMONCOLUMNS);
				strId = (String) htCommonCol.get(DomainConstants.SELECT_ID);
				strCurrentState = (String) htCommonCol.get(DomainConstants.SELECT_CURRENT);
				strTypeDisplay = (String) htCommonCol.get(DomainConstants.SELECT_TYPE);
				strTypeDisplay = i18nNow.getTypeI18NString(strTypeDisplay, sLanguage);
				//Added by DSM Reports (Sogeti) for 2022x.5 (APR CW 2024) Defect 55875 - Start
				String sCAID = (String) htCommonCol.get(SCAID);
				if(UIUtil.isNotNullAndNotEmpty(sCAID) && !sCAID.contains(HYPERLINK_PIPE)){
					if(htCommonCol.get(CAREALIZEDNAME) != null && htCommonCol.get(CAPROPOSEDNAME) != null) {
						hm.put(0, HYPERLINK+htCommonCol.get(CAREALIZEDNAME)+HYPERLINK_PIPE+sCAID);
					} else if(htCommonCol.get(CAREALIZEDNAME) != null){
						hm.put(0, HYPERLINK+htCommonCol.get(CAREALIZEDNAME)+HYPERLINK_PIPE+sCAID);
					} else if(htCommonCol.get(CAPROPOSEDNAME) != null){
						hm.put(0, HYPERLINK+htCommonCol.get(CAPROPOSEDNAME)+HYPERLINK_PIPE+sCAID);
					} else {
						hm.put(0, DomainConstants.EMPTY_STRING);
					}
				}else{
					hm.put(0,htCommonCol.get(CAPROPOSEDNAME));
				}
				//Added by DSM Reports (Sogeti) for 2022x.5 (APR CW 2024) Defect 55875 - End
				
				hm.put(1, htCommonCol.get(pgV3Constants.SELECT_ATTRIBUTE_REASON_FOR_CHANGE));
				hm.put(2, HYPERLINK+htCommonCol.get(DomainConstants.SELECT_NAME)+HYPERLINK_PIPE+strId);
				hm.put(3, htCommonCol.get(pgV3Constants.SELECT_ATTRIBUTE_TITLE));
				hm.put(4, strTypeDisplay);
				hm.put(5, htCommonCol.get(DomainConstants.SELECT_REVISION));
				hm.put(6, strCurrentState);
				hm.put(7, mp.get("Group"));
				hm.put(8, mp.get("Layer"));
				hm.put(9, mp.get("ParameterSet"));
				hm.put(10, mp.get("Design Parameter"));
				hm.put(11, mp.get("Design Parameter Values"));
				hm.put(12, mp.get("Chg"));
				XSSFCellStyle style = workbook.createCellStyle();
				style = setForeGroundColor(strCurrentState, style);
				//Added by DSM Reports (Sogeti) for 2022x.5 (APR CW 2024) Defect 55875 - Start
				XSSFCellStyle style1 = workbook.createCellStyle();
				//Added by DSM Reports (Sogeti) for 2022x.5 (APR CW 2024) Defect 55875 - End
				for(int j=0;j<hm.size();j++){								
					//Modified the code for _2022x_Aug CW Req-47097 :: Start
					// Modified by DSM Reports (Sogeti) for 22x.03 (August CW 2023) Defect 54091 - Start
					cell = row.createCell(columnCount1++);
					if (j == 2) {
						style = makeColumnNumeric(workbook, style);
					}
					cell.setCellStyle(style);
					
					// Modified by DSM Reports (Sogeti) for 22x.03 (August CW 2023) Defect 54091 - End
					//Modified the code for _2022x_Aug CW Req-47097 :: End
					if(hm.get(j) instanceof StringList) {
						strCellValue = hm.get(j).toString().replace("[", "").replace("]", "").replace(pgV3Constants.SYMBOL_COMMA,pgV3Constants.SYMBOL_PIPE);
					}
					else {
						strCellValue = (String)hm.get(j);
					}
					if(UIUtil.isNotNullAndNotEmpty(strCellValue) && strCellValue.startsWith(HYPERLINK_COMPARE)){
						strSplittedValue = strCellValue.split("\\|",-1); 
						strHyperlinkId = strSplittedValue[(strSplittedValue.length)-1];
						strValue = strSplittedValue[(strSplittedValue.length)-2];
						if(pgV3Constants.TRUE.equalsIgnoreCase(strHyperlink) && iRowCountAll < iHyperLinkLimit){
							getHyperlink(context,cell,workbook,strValue,strHyperlinkId,strCurrentState);
						
						} else if(UIUtil.isNotNullAndNotEmpty(strValue)) {					
							cell.setCellValue(strValue);
						}
					}else {
						cell.setCellValue(strCellValue);
						//Added by DSM Reports (Sogeti) for 2022x.5 (APR CW 2024) Defect 55875 - Start
						if(j == 0) {
							style1.cloneStyleFrom(style);
							style1.setWrapText(true);
							cell.setCellStyle(style1);
						}
						//Added by DSM Reports (Sogeti) for 2022x.5 (APR CW 2024) Defect 55875 - End
					}
					
				}
			}
			sheetFormatter(sheetDesignParameter); // Added by DSM Reports (Sogeti) for 22x.04 (Dec CW 2023) Defect 56156 - START/END
			} catch (Exception e) {		
				 outLog.print("Exception in  updateWorksheetDesignParameter: "+e+"\n");
				 outLog.flush();
			}
	}

/**Added for 2018x6.1 Dec_CW requirement 40942
 * @param context
 * @param mpCommonColumnsDetail
 * @return
 */
private MapList getChemPhysicalProperties(Context context, Map<String,Object> mpCommonColumnsDetail, String strUserName) {
	//Added the code for Defect 49698 - Spec Reader Access Issue - Starts
	boolean hasAccess = false;
	boolean isContextPushed = false;
	//Added the code for Defect 49698 - Spec Reader Access Issue - Ends
	StringList slObjectSelect = new StringList();
	slObjectSelect.add(pgV3Constants.SELECT_ATTRIBUTE_PGCOLOR+pgV3Constants.KEY_INPUTVALUE);
	slObjectSelect.add(pgV3Constants.SELECT_ATTRIBUTE_PG_COLOR_INTENSITY+pgV3Constants.KEY_INPUTVALUE);
	//Updated for defect 45392 Starts
	slObjectSelect.add(pgV3Constants.SELECT_ATTRIBUTE_ODOUR);
	//Updated for defect 45392 Ends
	slObjectSelect.add(pgV3Constants.SELECT_ATTRIBUTE_PG_HEAT_OF_COMBUSTION+pgV3Constants.KEY_INPUTVALUE);
	slObjectSelect.add(pgV3Constants.SELECT_ATTRIBUTE_PG_CAN_CONSTRUCTION);
	slObjectSelect.add(pgV3Constants.SELECT_ATTRIBUTE_PGGAUGEPRESSURE+pgV3Constants.KEY_INPUTVALUE);
	slObjectSelect.add(pgV3Constants.SELECT_ATTRIBUTE_PG_AEROSOLTYPE);
	slObjectSelect.add(pgV3Constants.SELECT_ATTRIBUTE_PG_IS_AEROSOLTYPE_TEST);
	slObjectSelect.add(pgV3Constants.SELECT_ATTRIBUTE_PGIGNITIONDISTANCE+pgV3Constants.KEY_INPUTVALUE);
	slObjectSelect.add(pgV3Constants.SELECT_ATTRIBUTE_PGENCLOSEDSPACEIGNITION+pgV3Constants.KEY_INPUTVALUE);
	slObjectSelect.add(pgV3Constants.SELECT_ATTRIBUTE_PG_FLAMEHEIGHT+pgV3Constants.KEY_INPUTVALUE);
	slObjectSelect.add(pgV3Constants.SELECT_ATTRIBUTE_PG_FLAME_DURATION+pgV3Constants.KEY_INPUTVALUE);
	slObjectSelect.add(pgV3Constants.SELECT_ATTRIBUTE_VAPORPRESSURE+pgV3Constants.KEY_INPUTVALUE);
	slObjectSelect.add(pgV3Constants.SELECT_ATTRIBUTE_VAPOUR_DENSITY+pgV3Constants.KEY_INPUTVALUE);
	slObjectSelect.add(pgV3Constants.SELECT_ATTRIBUTE_PGRELATIVEDENSITYORSPECIFICGRAVITY+pgV3Constants.KEY_INPUTVALUE);
	slObjectSelect.add(pgV3Constants.SELECT_ATTRIBUTE_PGISTHELIQUIDANAQEOUSSOLUTION);
	slObjectSelect.add(pgV3Constants.SELECT_ATTRIBUTE_PGPHDATAAVAILABLE);
	slObjectSelect.add(pgV3Constants.SELECT_ATTRIBUTE_PG_PH+pgV3Constants.KEY_INPUTVALUE);
	slObjectSelect.add(pgV3Constants.SELECT_ATTRIBUTE_PGPHMIN+pgV3Constants.KEY_INPUTVALUE);
	slObjectSelect.add(pgV3Constants.SELECT_ATTRIBUTE_PGPHMAX+pgV3Constants.KEY_INPUTVALUE);
	slObjectSelect.add(pgV3Constants.SELECT_ATTRIBUTE_PG_PH_DILUTION);
	slObjectSelect.add(pgV3Constants.SELECT_ATTRIBUTE_PGAEROSOLCANCORROSIVETOMETALS);
	slObjectSelect.add(pgV3Constants.SELECT_ATTRIBUTE_PG_TECHNICAL_CTM);
	slObjectSelect.add(pgV3Constants.SELECT_ATTRIBUTE_PG_AEROSOL_CONDUCTIVITY+pgV3Constants.KEY_INPUTVALUE);
	slObjectSelect.add(pgV3Constants.SELECT_ATTRIBUTE_PGCLOSEDCUPFLASHPOINT+pgV3Constants.KEY_INPUTVALUE);
	slObjectSelect.add(pgV3Constants.SELECT_ATTRIBUTE_PGBOILINGPOINT);
	slObjectSelect.add(pgV3Constants.SELECT_ATTRIBUTE_PG_BOILINGPOINTVALUE+pgV3Constants.KEY_INPUTVALUE);
	slObjectSelect.add(pgV3Constants.SELECT_ATTRIBUTE_PGPRODUCTSUSTAINCOMBUSTION);
	slObjectSelect.add(pgV3Constants.SELECT_ATTRIBUTE_PGPRODUCTOXIDIZER);
	slObjectSelect.add(pgV3Constants.SELECT_ATTRIBUTE_PG_OXIDIZERSODIUMPERCARBONATE);
	slObjectSelect.add(pgV3Constants.SELECT_ATTRIBUTE_PG_OXIDIZERHYDROGENPEROXIDE);
	//Updated for defect 45473 Starts
	slObjectSelect.add(pgV3Constants.SELECT_ATTRIBUTE_PGPRODUCTPOTENTIALTOINCREASEBURNINGRATE);
	//Updated for defect 45473 Ends
	slObjectSelect.add(pgV3Constants.SELECT_ATTRIBUTE_PG_ORGANIC_PEROXIDE);
	slObjectSelect.add(pgV3Constants.SELECT_ATTRIBUTE_PG_AVAILABLE_OXYGEN_CONTENT+pgV3Constants.KEY_INPUTVALUE);
	slObjectSelect.add(pgV3Constants.SELECT_ATTRIBUTE_PGKINEMATICVISCOSITY+pgV3Constants.KEY_INPUTVALUE);
	slObjectSelect.add(pgV3Constants.SELECT_ATTRIBUTE_PGEVAPORATIONRATE+pgV3Constants.KEY_INPUTVALUE);
	slObjectSelect.add(pgV3Constants.SELECT_ATTRIBUTE_PGRESERVERALKALINITY+pgV3Constants.KEY_INPUTVALUE);
	slObjectSelect.add(pgV3Constants.SELECT_ATTRIBUTE_PGRESERVEACIDITY+pgV3Constants.KEY_INPUTVALUE);
	slObjectSelect.add(pgV3Constants.SELECT_ATTRIBUTE_PGRESERVEALKALINITYUOM);
	slObjectSelect.add(pgV3Constants.SELECT_ATTRIBUTE_PGRESERVEALKALINITYTITRATIONENDPOINT+pgV3Constants.KEY_INPUTVALUE);
	slObjectSelect.add(pgV3Constants.SELECT_ATTRIBUTE_PG_LIQUID_CORROSIVE_TO_METAL);
	slObjectSelect.add(pgV3Constants.SELECT_ATTRIBUTE_PGCONDUCTIVITYOFTHELIQUID+pgV3Constants.KEY_INPUTVALUE);
	slObjectSelect.add(pgV3Constants.SELECT_ATTRIBUTE_PG_FLAMMABLE_LIQUID);
	slObjectSelect.add(pgV3Constants.SELECT_ATTRIBUTE_PGBURNRATE+pgV3Constants.KEY_INPUTVALUE);
	slObjectSelect.add(pgV3Constants.SELECT_ATTRIBUTE_PG_SELF_REACTIVE_PROPERTIES);
	slObjectSelect.add(pgV3Constants.SELECT_ATTRIBUTE_PGHEATOFDECOMPOSITION+pgV3Constants.KEY_INPUTVALUE);
	slObjectSelect.add(pgV3Constants.SELECT_ATTRIBUTE_PGSELFACCELDECOMTEMP+pgV3Constants.KEY_INPUTVALUE);
	slObjectSelect.add(pgV3Constants.SELECT_ATTRIBUTE_PGFLAMMABLEORNONFLAMMABLE);
	slObjectSelect.add(pgV3Constants.SELECT_ATTRIBUTE_PG_PERCENT_OF_WEIGHT_FLAMMABLE+pgV3Constants.KEY_INPUTVALUE);
	slObjectSelect.add(pgV3Constants.SELECT_ATTRIBUTE_PGPCBBYVWMISCIBLEALOHOLS);
	slObjectSelect.add(pgV3Constants.SELECT_ATTRIBUTE_PG_PRODUCT_CONTAIN_ETHANOL);
	slObjectSelect.add(pgV3Constants.SELECT_ATTRIBUTE_PG_BASEPRODUCTSUSTAINCOMBUSTION);
	slObjectSelect.add(pgV3Constants.SELECT_ATTRIBUTE_PGPRODUCTHAVEAFIREPOINT);
	slObjectSelect.add(pgV3Constants.SELECT_ATTRIBUTE_PG_FLAMMABLE_GAS_PROPELLANT);
	slObjectSelect.add(pgV3Constants.SELECT_ATTRIBUTE_PG_PRODUCT_CONTAIN_GAS);
	slObjectSelect.add(pgV3Constants.SELECT_ATTRIBUTE_PGPROPELLANTEMULSIFIEDPRODUCT);
	slObjectSelect.add(pgV3Constants.SELECT_ATTRIBUTE_PGPROPELLANTNONFLAMMABLE);
	slObjectSelect.add(pgV3Constants.SELECT_ATTRIBUTE_PGWTPARAMETERIZED+pgV3Constants.KEY_INPUTVALUE);
	slObjectSelect.add(pgV3Constants.SELECT_ATTRIBUTE_PGKSTDUSTDEFLAGRATIONINDEX+pgV3Constants.KEY_INPUTVALUE);
	slObjectSelect.add(pgV3Constants.SELECT_ATTRIBUTE_PGPMAXEXPLOSIONPRESSURE+pgV3Constants.KEY_INPUTVALUE);
	MapList mlPhysicalChemicalInfoFinal = new MapList();
	MapList mlPhysicalChemicalInfo = new MapList();
	String strPartType = (String) mpCommonColumnsDetail.get(DomainConstants.SELECT_TYPE);
	String strPartName = (String) mpCommonColumnsDetail.get(DomainConstants.SELECT_NAME);
	String strPartRev = (String) mpCommonColumnsDetail.get(DomainConstants.SELECT_REVISION);
	Map<String,Object> mpPhysicalChemicalInfo = new HashMap<>();
	int hasData = 0;
	String strValue = "";
	try {
		String strPartId = (String) mpCommonColumnsDetail.get(DomainConstants.SELECT_ID);
		//Added the code for Defect 49698 - Spec Reader Access Issue - Starts
		if(SPECREADER.equalsIgnoreCase(strOriginatingSource)) {
			hasAccess = accessCheck(context, strUserName, strPartId);
			if(hasAccess) {
				//Pushing User Agent Context to get the Data if the Spec Reader User have access
				ContextUtil.pushContext(context,PropertyUtil.getSchemaProperty(context,"User Agent"),DomainConstants.EMPTY_STRING,DomainConstants.EMPTY_STRING);
				isContextPushed = true;
				
			}
		}
		//Added the code for Defect 49698 - Spec Reader Access Issue - Ends
		DomainObject dobj = DomainObject.newInstance(context, strPartId);
		mlPhysicalChemicalInfo = DomainObject.findObjects(context, //context
														  strPartType,//type
														  strPartName,//name
														  strPartRev,//revision
														  DomainConstants.QUERY_WILDCARD,//owner
														  pgV3Constants.VAULT_ESERVICEPRODUCTION,//vault
														  null,//where cluase
														  false,//expandtype
														  slObjectSelect); //object select
		if(!mlPhysicalChemicalInfo.isEmpty()) {
			mpPhysicalChemicalInfo = (Map<String, Object>) mlPhysicalChemicalInfo.get(0);
			 for (Entry<String, Object> entry : mpPhysicalChemicalInfo.entrySet()) {
				 strValue = (String) entry.getValue();
		         if(UIUtil.isNullOrEmpty(strValue)) {
		        	 hasData = hasData+1;
		         }
			 }
			if(hasData!=mpPhysicalChemicalInfo.size()-1) {
				String strWareHouse = getWarehousingClassification(context, dobj);
				mpPhysicalChemicalInfo.put("WarehousingClassification",strWareHouse);
				mpPhysicalChemicalInfo.put(COMMONCOLUMNS,mpCommonColumnsDetail);
				mlPhysicalChemicalInfoFinal.add(mpPhysicalChemicalInfo);
			}
		}
	} catch (Exception e) {
		outLog.print("Exception in  getChemPhysicalProperties: "+e+"\n");
		outLog.flush();
		//Added the code for Defect 49698 - Spec Reader Access Issue - Starts
	}finally {
		if(isContextPushed) {
			try {
				ContextUtil.popContext(context);
			} catch(Exception e) {
				outLog.println("Exception in getChemPhysicalProperties Method while popping the context"+e+"\n");
				outLog.flush();
			}
			
		}
	}
	//Added the code for Defect 49698 - Spec Reader Access Issue - Ends
	return mlPhysicalChemicalInfoFinal;
}

/**Added for 2018x6.1 Dec_CW requirement 40942
 * @param context
 * @param workbook
 * @param rowHeaderChemPhysicalProperties
 * @param cellStyleChemPhysicalProperties
 * @param mlChemPhysicalProperties
 * @param sheetChemPhysicalProperties
 * @param strHyperlink
 */
private void updateWorksheetChemPhysicalProperties(Context context, XSSFWorkbook workbook, XSSFRow rowHeaderChemPhysicalProperties,XSSFCellStyle cellStyleChemPhysicalProperties, MapList mlChemPhysicalProperties, XSSFSheet sheetChemPhysicalProperties,String strHyperlink, XSSFCellStyle styleGlobal) {
	try {
			String strHyperlinkLimit = EnoviaResourceBundle.getProperty(context, EMXCPNSTRINGRESOURCE, context.getLocale(),"emxCPN.PartAndSpecReport.HyperlinkLimit");
			int iHyperLinkLimit = Integer.parseInt(strHyperlinkLimit);
			int iRowCountAll=0;
			String strColumnNames = EnoviaResourceBundle.getProperty(context, EMXCPN, context.getLocale(),"emxCPN.FamilyCareReport.Worksheet.ChemPhysicalProperties.ColumnTypes");
			String strCharacteristicsColumn = "emxCPN.FamilyCareReport.Worksheet.ChemPhysicalProperties.Column";
			createCellForWorksheet(context,strColumnNames,rowHeaderChemPhysicalProperties,cellStyleChemPhysicalProperties,strCharacteristicsColumn);
			int rowCount = 0;
			String strCellValue = DomainConstants.EMPTY_STRING;
			Hashtable<String,Object> htCommonCol = new Hashtable<>();
			Map<String,Object> mp=new HashMap<>();
			HashMap<Integer,Object> hm= new HashMap<>();
			String strId = DomainConstants.EMPTY_STRING;
			Cell cell=null;
			String strValue = DomainConstants.EMPTY_STRING;
			String strHyperlinkId = DomainConstants.EMPTY_STRING;
			String[] strSplittedValue;
			String strCurrentState = DomainConstants.EMPTY_STRING;
			String strTypeDisplay = DomainConstants.EMPTY_STRING;
			String sLanguage = context.getSession().getLanguage();
			String strPartType = DomainConstants.EMPTY_STRING;
			int columnCount1 = 0;
			int mlChemPhysicalPropertiesSize = mlChemPhysicalProperties.size();
			for (int i=0;i<mlChemPhysicalPropertiesSize;i++){
				++rowCount;
				iRowCountAll = iRowCountAll + 1;
				XSSFRow row = sheetChemPhysicalProperties.createRow(rowCount);
				columnCount1 = 0;
				mp = (Map)mlChemPhysicalProperties.get(i);
				htCommonCol =  (Hashtable<String, Object>) mp.get(COMMONCOLUMNS);
				strId = (String) htCommonCol.get(DomainConstants.SELECT_ID);
				strCurrentState = (String) htCommonCol.get(DomainConstants.SELECT_CURRENT);
				strPartType = (String) htCommonCol.get(DomainConstants.SELECT_TYPE);
				strTypeDisplay = i18nNow.getTypeI18NString(strPartType, sLanguage);
				//Added by DSM Reports (Sogeti) for 2022x.5 (APR CW 2024) Defect 55875 - Start
				String sCAID = (String) htCommonCol.get(SCAID);
				if(UIUtil.isNotNullAndNotEmpty(sCAID) && !sCAID.contains(HYPERLINK_PIPE)) {
					if(htCommonCol.get(CAREALIZEDNAME) != null && htCommonCol.get(CAPROPOSEDNAME) != null) {
						hm.put(0, HYPERLINK+htCommonCol.get(CAREALIZEDNAME)+HYPERLINK_PIPE+htCommonCol.get(SCAID));
					} else if(htCommonCol.get(CAREALIZEDNAME) != null){
						hm.put(0, HYPERLINK+htCommonCol.get(CAREALIZEDNAME)+HYPERLINK_PIPE+htCommonCol.get(SCAID));
					} else if(htCommonCol.get(CAPROPOSEDNAME) != null){
						hm.put(0, HYPERLINK+htCommonCol.get(CAPROPOSEDNAME)+HYPERLINK_PIPE+htCommonCol.get(SCAID));
					} else {
						hm.put(0, DomainConstants.EMPTY_STRING);
					}
				}else {
					hm.put(0,htCommonCol.get(CAPROPOSEDNAME));
				}
				//Added by DSM Reports (Sogeti) for 2022x.5 (APR CW 2024) Defect 55875 - End
				
				hm.put(1, htCommonCol.get(pgV3Constants.SELECT_ATTRIBUTE_REASON_FOR_CHANGE));
				hm.put(2, HYPERLINK+htCommonCol.get(DomainConstants.SELECT_NAME)+HYPERLINK_PIPE+strId);
				hm.put(3, htCommonCol.get(pgV3Constants.SELECT_ATTRIBUTE_TITLE));
				hm.put(4, strTypeDisplay);
				hm.put(5, htCommonCol.get(DomainConstants.SELECT_REVISION));
				hm.put(6, strCurrentState);
				hm.put(7, mp.get(pgV3Constants.SELECT_ATTRIBUTE_PGCOLOR+pgV3Constants.KEY_INPUTVALUE));
				hm.put(8, mp.get(pgV3Constants.SELECT_ATTRIBUTE_PG_COLOR_INTENSITY+pgV3Constants.KEY_INPUTVALUE));
				//Updated for defect 45392 Starts
				hm.put(9, mp.get(pgV3Constants.SELECT_ATTRIBUTE_ODOUR));
				//Updated for defect 45392 Ends
				hm.put(10, mp.get(pgV3Constants.SELECT_ATTRIBUTE_PG_HEAT_OF_COMBUSTION+pgV3Constants.KEY_INPUTVALUE));
				hm.put(11, mp.get(pgV3Constants.SELECT_ATTRIBUTE_PG_CAN_CONSTRUCTION));
				hm.put(12, mp.get(pgV3Constants.SELECT_ATTRIBUTE_PGGAUGEPRESSURE+pgV3Constants.KEY_INPUTVALUE));
				hm.put(13, mp.get(pgV3Constants.SELECT_ATTRIBUTE_PG_AEROSOLTYPE));
				hm.put(14, mp.get(pgV3Constants.SELECT_ATTRIBUTE_PG_IS_AEROSOLTYPE_TEST));
				hm.put(15, mp.get(pgV3Constants.SELECT_ATTRIBUTE_PGIGNITIONDISTANCE+pgV3Constants.KEY_INPUTVALUE));
				hm.put(16, mp.get(pgV3Constants.SELECT_ATTRIBUTE_PGENCLOSEDSPACEIGNITION+pgV3Constants.KEY_INPUTVALUE));
				hm.put(17, mp.get(pgV3Constants.SELECT_ATTRIBUTE_PG_FLAMEHEIGHT+pgV3Constants.KEY_INPUTVALUE));
				hm.put(18, mp.get(pgV3Constants.SELECT_ATTRIBUTE_PG_FLAME_DURATION+pgV3Constants.KEY_INPUTVALUE));
				hm.put(19, mp.get(pgV3Constants.SELECT_ATTRIBUTE_VAPORPRESSURE+pgV3Constants.KEY_INPUTVALUE));
				hm.put(20, mp.get(pgV3Constants.SELECT_ATTRIBUTE_VAPOUR_DENSITY+pgV3Constants.KEY_INPUTVALUE));
				hm.put(21, mp.get(pgV3Constants.SELECT_ATTRIBUTE_PGRELATIVEDENSITYORSPECIFICGRAVITY+pgV3Constants.KEY_INPUTVALUE));
				hm.put(22, mp.get(pgV3Constants.SELECT_ATTRIBUTE_PGISTHELIQUIDANAQEOUSSOLUTION));
				hm.put(23, mp.get(pgV3Constants.SELECT_ATTRIBUTE_PGPHDATAAVAILABLE));
				hm.put(24, mp.get(pgV3Constants.SELECT_ATTRIBUTE_PG_PH+pgV3Constants.KEY_INPUTVALUE));
				hm.put(25, mp.get(pgV3Constants.SELECT_ATTRIBUTE_PGPHMIN+pgV3Constants.KEY_INPUTVALUE));
				hm.put(26, mp.get(pgV3Constants.SELECT_ATTRIBUTE_PGPHMAX+pgV3Constants.KEY_INPUTVALUE));
				hm.put(27, mp.get(pgV3Constants.SELECT_ATTRIBUTE_PG_PH_DILUTION));
				hm.put(28, mp.get(pgV3Constants.SELECT_ATTRIBUTE_PGAEROSOLCANCORROSIVETOMETALS));
				hm.put(29, mp.get(pgV3Constants.SELECT_ATTRIBUTE_PG_TECHNICAL_CTM));
				hm.put(30, mp.get(pgV3Constants.SELECT_ATTRIBUTE_PG_AEROSOL_CONDUCTIVITY+pgV3Constants.KEY_INPUTVALUE));
				hm.put(31, mp.get(pgV3Constants.SELECT_ATTRIBUTE_PGCLOSEDCUPFLASHPOINT+pgV3Constants.KEY_INPUTVALUE));
				hm.put(32, mp.get(pgV3Constants.SELECT_ATTRIBUTE_PGBOILINGPOINT));
				hm.put(33, mp.get(pgV3Constants.SELECT_ATTRIBUTE_PG_BOILINGPOINTVALUE+pgV3Constants.KEY_INPUTVALUE));
				hm.put(34, mp.get(pgV3Constants.SELECT_ATTRIBUTE_PGPRODUCTSUSTAINCOMBUSTION));
				hm.put(35, mp.get(pgV3Constants.SELECT_ATTRIBUTE_PGPRODUCTOXIDIZER));
				hm.put(36, mp.get(pgV3Constants.SELECT_ATTRIBUTE_PG_OXIDIZERSODIUMPERCARBONATE));
				hm.put(37, mp.get(pgV3Constants.SELECT_ATTRIBUTE_PG_OXIDIZERHYDROGENPEROXIDE));
				//Updated for defect 45473 Starts
				hm.put(38, mp.get(pgV3Constants.SELECT_ATTRIBUTE_PGPRODUCTPOTENTIALTOINCREASEBURNINGRATE));
				//Updated for defect 45473 Ends
				hm.put(39, mp.get(pgV3Constants.SELECT_ATTRIBUTE_PG_ORGANIC_PEROXIDE));
				hm.put(40, mp.get(pgV3Constants.SELECT_ATTRIBUTE_PG_AVAILABLE_OXYGEN_CONTENT+pgV3Constants.KEY_INPUTVALUE));
				hm.put(41, mp.get(pgV3Constants.SELECT_ATTRIBUTE_PGKINEMATICVISCOSITY+pgV3Constants.KEY_INPUTVALUE));
				hm.put(42, mp.get(pgV3Constants.SELECT_ATTRIBUTE_PGEVAPORATIONRATE+pgV3Constants.KEY_INPUTVALUE));
				hm.put(43, mp.get(pgV3Constants.SELECT_ATTRIBUTE_PGRESERVERALKALINITY+pgV3Constants.KEY_INPUTVALUE));
				hm.put(44, mp.get(pgV3Constants.SELECT_ATTRIBUTE_PGRESERVEACIDITY+pgV3Constants.KEY_INPUTVALUE));
				hm.put(45, mp.get(pgV3Constants.SELECT_ATTRIBUTE_PGRESERVEALKALINITYUOM));
				hm.put(46, mp.get(pgV3Constants.SELECT_ATTRIBUTE_PGRESERVEALKALINITYTITRATIONENDPOINT+pgV3Constants.KEY_INPUTVALUE));
				hm.put(47, mp.get(pgV3Constants.SELECT_ATTRIBUTE_PG_LIQUID_CORROSIVE_TO_METAL));
				hm.put(48, mp.get(pgV3Constants.SELECT_ATTRIBUTE_PGCONDUCTIVITYOFTHELIQUID+pgV3Constants.KEY_INPUTVALUE));
				hm.put(49, mp.get(pgV3Constants.SELECT_ATTRIBUTE_PG_FLAMMABLE_LIQUID));
				hm.put(50, mp.get(pgV3Constants.SELECT_ATTRIBUTE_PGBURNRATE+pgV3Constants.KEY_INPUTVALUE));
				hm.put(51, mp.get(pgV3Constants.SELECT_ATTRIBUTE_PG_SELF_REACTIVE_PROPERTIES));
				hm.put(52, mp.get(pgV3Constants.SELECT_ATTRIBUTE_PGHEATOFDECOMPOSITION+pgV3Constants.KEY_INPUTVALUE));
				hm.put(53, mp.get(pgV3Constants.SELECT_ATTRIBUTE_PGSELFACCELDECOMTEMP+pgV3Constants.KEY_INPUTVALUE));
				hm.put(54, mp.get("WarehousingClassification"));
				hm.put(55, mp.get(pgV3Constants.SELECT_ATTRIBUTE_PGFLAMMABLEORNONFLAMMABLE));
				hm.put(56, mp.get(pgV3Constants.SELECT_ATTRIBUTE_PG_PERCENT_OF_WEIGHT_FLAMMABLE+pgV3Constants.KEY_INPUTVALUE));
				hm.put(57, mp.get(pgV3Constants.SELECT_ATTRIBUTE_PGPCBBYVWMISCIBLEALOHOLS));
				hm.put(58, mp.get(pgV3Constants.SELECT_ATTRIBUTE_PG_PRODUCT_CONTAIN_ETHANOL));
				hm.put(59, mp.get(pgV3Constants.SELECT_ATTRIBUTE_PG_BASEPRODUCTSUSTAINCOMBUSTION));
				hm.put(60, mp.get(pgV3Constants.SELECT_ATTRIBUTE_PGPRODUCTHAVEAFIREPOINT));
				hm.put(61, mp.get(pgV3Constants.SELECT_ATTRIBUTE_PG_FLAMMABLE_GAS_PROPELLANT));
				hm.put(62, mp.get(pgV3Constants.SELECT_ATTRIBUTE_PG_PRODUCT_CONTAIN_GAS));
				if(pgV3Constants.TYPE_FORMULATIONPART.equalsIgnoreCase(strPartType)) {
					hm.put(63, mp.get(pgV3Constants.SELECT_ATTRIBUTE_PGPROPELLANTEMULSIFIEDPRODUCT));
					hm.put(64, mp.get(pgV3Constants.SELECT_ATTRIBUTE_PGPROPELLANTNONFLAMMABLE));
					hm.put(65, mp.get(pgV3Constants.SELECT_ATTRIBUTE_PGWTPARAMETERIZED+pgV3Constants.KEY_INPUTVALUE));
					hm.put(66, mp.get(pgV3Constants.SELECT_ATTRIBUTE_PGKSTDUSTDEFLAGRATIONINDEX+pgV3Constants.KEY_INPUTVALUE));
					hm.put(67, mp.get(pgV3Constants.SELECT_ATTRIBUTE_PGPMAXEXPLOSIONPRESSURE+pgV3Constants.KEY_INPUTVALUE));
				} else {
					hm.put(63, DomainConstants.EMPTY_STRING);
					hm.put(64, DomainConstants.EMPTY_STRING);
					hm.put(65, DomainConstants.EMPTY_STRING);
					hm.put(66, DomainConstants.EMPTY_STRING);
					hm.put(67, DomainConstants.EMPTY_STRING);
				}
				    XSSFCellStyle style = workbook.createCellStyle();
				    style = setForeGroundColor(strCurrentState, style);
				   //Added by DSM Reports (Sogeti) for 2022x.5 (APR CW 2024) Defect 55875 - Start
				    XSSFCellStyle style1 = workbook.createCellStyle();
					//Added by DSM Reports (Sogeti) for 2022x.5 (APR CW 2024) Defect 55875 - End
					for(int j=0;j<hm.size();j++){								
					//Modified the code for _2022x_Aug CW Req-47097 :: Start
					// Modified by DSM Reports (Sogeti) for 22x.03 (August CW 2023) Defect 54091 - Start
					cell = row.createCell(columnCount1++);
					if (j == 2) {
						style = makeColumnNumeric(workbook, style);
					}
                    cell.setCellStyle(style);	
					
					// Modified by DSM Reports (Sogeti) for 22x.03 (August CW 2023) Defect 54091 - End
					//Modified the code for _2022x_Aug CW Req-47097 :: End
					if(hm.get(j) instanceof StringList) {
						strCellValue = hm.get(j).toString().replace("[", "").replace("]", "").replace(pgV3Constants.SYMBOL_COMMA,pgV3Constants.SYMBOL_PIPE);
					}
					else {
						strCellValue = (String)hm.get(j);
					}
					if(UIUtil.isNotNullAndNotEmpty(strCellValue) && strCellValue.startsWith(HYPERLINK_COMPARE)){
						strSplittedValue = strCellValue.split("\\|",-1); 
						strHyperlinkId = strSplittedValue[(strSplittedValue.length)-1];
						strValue = strSplittedValue[(strSplittedValue.length)-2];
						if(pgV3Constants.TRUE.equalsIgnoreCase(strHyperlink) && iRowCountAll < iHyperLinkLimit){
							getHyperlink(context,cell,workbook,strValue,strHyperlinkId,strCurrentState);
						
						} else if(UIUtil.isNotNullAndNotEmpty(strValue)) {					
							cell.setCellValue(strValue);
						}
					}else {
						cell.setCellValue(strCellValue);
						//Added by DSM Reports (Sogeti) for 2022x.5 (APR CW 2024) Defect 55875 - Start
						if(j == 0) {
							style1.cloneStyleFrom(style);
							style1.setWrapText(true);
							cell.setCellStyle(style1);
						}
						//Added by DSM Reports (Sogeti) for 2022x.5 (APR CW 2024) Defect 55875 - End
					}
					
				}
			}
			sheetFormatter(sheetChemPhysicalProperties); // Added by DSM Reports (Sogeti) for 22x.04 (Dec CW 2023) Defect 56156 - START/END
			} catch (Exception e) {		
				 outLog.print("Exception in  updateWorksheetChemPhysicalProperties: "+e+"\n");
				 outLog.flush();
			}
	}

/**Added for defect id 45400 Starts
 * @param context
 * @param dobjRelatedPart
 * @return
 * @throws FrameworkException
 */
private String getWarehousingClassification(Context context, DomainObject dobjRelatedPart) throws FrameworkException {
	StringList slWareHouse = dobjRelatedPart.getInfoList(context, "from["+pgV3Constants.RELATIONSHIP_PGTOWAREHOUSECLASSIFICATION+"].to.name");
	String strWareHouse = "";
	if(null!=slWareHouse && !slWareHouse.isEmpty()) {
		strWareHouse = slWareHouse.toString().replace("[","").replace("]","").replace(pgV3Constants.SYMBOL_COMMA,pgV3Constants.SYMBOL_PIPE);
	}
	return strWareHouse;
}

/**Added for defect 45074 Jan22_CW
 * @param context
 * @param strId
 * @return
 * @throws FrameworkException
 */
private String getPrintinProcess(Context context, String strId) throws FrameworkException {
	String strPrintingProcess = DomainConstants.EMPTY_STRING;
	DomainObject dobj = DomainObject.newInstance(context, strId);
	StringList slPrintingProcess = dobj.getInfoList(context, "from["+pgV3Constants.RELATIONSHIP_PGPDTEMPLATESTOPGPLIPRINTINGPROCESS+"].to.name");
	if (null!=slPrintingProcess && !slPrintingProcess.isEmpty()){
		strPrintingProcess = slPrintingProcess.toString().replace("[", "").replace("]", "");
	}
	return strPrintingProcess;
}

/**Added for Jan22_CW defect 44566
 * @param context
 * @param strName
 * @return
 * @throws FrameworkException
 */
private String getLanguage(Context context,String strName) throws FrameworkException {
	StringList slSelect = new StringList();
	slSelect.add(DomainConstants.SELECT_ID);
	MapList mlLanguage = DomainObject.findObjects(context,//context
				TYPE_LANGUAGE,//type 
				strName,//name
				pgV3Constants.SYMBOL_HYPHEN,//revision
				DomainConstants.QUERY_WILDCARD,//owner
				pgV3Constants.VAULT_ESERVICEPRODUCTION,//vault
				DomainConstants.EMPTY_STRING,//where clause
				false,//expand type
				slSelect);//obejct select
	if(!mlLanguage.isEmpty()) {
		return strName;
	} else {
		return DomainConstants.EMPTY_STRING;
	}
}

/**Added for Apr22 CW requirement id 41600
 * @param context
 * @param mpCommonColumnsDetail
 * @return
 */
private MapList getSustainability(Context context,Map<String,Object> mpCommonColumnsDetail,String strUserName) {
	//Added the code for Defect 49698 - Spec Reader Access Issue - Starts
	boolean hasAccess = false;
	boolean isContextPushed = false;
	//Added the code for Defect 49698 - Spec Reader Access Issue - Ends
	StringList slSelect = new StringList();
	slSelect.add(ATTR_PGPACKAGECOMPONENTOPTICALPROPERTIES);
	slSelect.add(ATTR_PGMATERIALDENSITY);
	slSelect.add(ATTR_PGMATERIALTHICKNESS);
	slSelect.add(ATTR_PGPACKAGEDURABILITY);
	slSelect.add(ATTR_PGLABELREMOVABILITY);
	slSelect.add(ATTR_PGPAPERWETSTRENGTH);
	slSelect.add(ATTR_PGPAPERDISSOLVABILITY);
	slSelect.add(ATTR_PGINTEGRATEDLIDGLASSBOTTLEONLY);
	slSelect.add(ATTR_PGDESIGNEDFORREUSE);
	MapList mlSustainability = new MapList();
	try {
		String strPartId = (String) mpCommonColumnsDetail.get(DomainConstants.SELECT_ID);
		//Added the code for Defect 49698 - Spec Reader Access Issue - Starts
		if(SPECREADER.equalsIgnoreCase(strOriginatingSource)) {
			hasAccess = accessCheck(context, strUserName, strPartId);
			if(hasAccess) {
				//Push Context User Agent
				ContextUtil.pushContext(context,PropertyUtil.getSchemaProperty(context,"User Agent"),DomainConstants.EMPTY_STRING,DomainConstants.EMPTY_STRING);
				isContextPushed = true;
				
			}
		}
		//Added the code for Defect 49698 - Spec Reader Access Issue - Ends
		DomainObject dobj = DomainObject.newInstance(context, strPartId);
		Map<String,Object> mpSustainability = dobj.getInfo(context, slSelect);
		if(!mpSustainability.isEmpty()) {
			mpSustainability.put(COMMONCOLUMNS,mpCommonColumnsDetail);
			mlSustainability.add(mpSustainability);
		}
	} catch(Exception e) {
		outLog.print("Exception in  getSustainability: "+e+"\n");
		outLog.flush();
		//Added the code for Defect 49698 - Spec Reader Access Issue - Starts
	}finally {
		if(isContextPushed) {
			try {
				ContextUtil.popContext(context);
			}catch(Exception e) {
				outLog.print("Exception while popping the context for  getSustainability: "+e+"\n");
				outLog.flush();
			}
			
		}
	}
	//Added the code for Defect 49698 - Spec Reader Access Issue - Ends
	return mlSustainability;
}

/**Added for Apr22 CW requirement id 41600
 * @param context
 * @param workbook
 * @param rowHeaderSustainibility
 * @param cellStyleSustainibility
 * @param mlSustainibility
 * @param sheetSustainibility
 * @param strHyperlink
 */
private void updateWorksheetSustainibility(Context context, XSSFWorkbook workbook, XSSFRow rowHeaderSustainibility,XSSFCellStyle cellStyleSustainibility, MapList mlSustainibility, XSSFSheet sheetSustainibility,String strHyperlink, XSSFCellStyle styleGlobal) {
	try {
			String strHyperlinkLimit = EnoviaResourceBundle.getProperty(context, EMXCPNSTRINGRESOURCE, context.getLocale(),"emxCPN.PartAndSpecReport.HyperlinkLimit");
			int iHyperLinkLimit = Integer.parseInt(strHyperlinkLimit);
			int iRowCountAll=0;
			String strColumnNames = EnoviaResourceBundle.getProperty(context, EMXCPN, context.getLocale(),"emxCPN.FamilyCareReport.Worksheet.Sustainibility.ColumnTypes");
			String strSustainibilityColumn = "emxCPN.FamilyCareReport.Worksheet.Sustainibility.Column";
			createCellForWorksheet(context,strColumnNames,rowHeaderSustainibility,cellStyleSustainibility,strSustainibilityColumn);
			int rowCount = 0;
			String strCellValue = "";
			Hashtable<String,Object> htCommonCol = new Hashtable<>();
			Map<String,Object> mp=new HashMap<>();
			HashMap<Integer,Object> hm= new HashMap<>();
			String strId = "";
			Cell cell=null;
			String strValue = "";
			String strHyperlinkId = "";
			String[] strSplittedValue;
			String strCurrentState = "";
			String strTypeDisplay = "";
			String sLanguage = context.getSession().getLanguage();
			int columnCount1 = 0;
			int mlSustainibilitySize = mlSustainibility.size();
			for (int i=0;i<mlSustainibilitySize;i++){
				++rowCount;
				iRowCountAll = iRowCountAll + 1;
				XSSFRow row = sheetSustainibility.createRow(rowCount);
				columnCount1 = 0;
				mp = (Map)mlSustainibility.get(i);
				htCommonCol =  (Hashtable<String, Object>) mp.get(COMMONCOLUMNS);
				strId = (String) htCommonCol.get(DomainConstants.SELECT_ID);
				strCurrentState = (String) htCommonCol.get(DomainConstants.SELECT_CURRENT);
				strTypeDisplay = (String) htCommonCol.get(DomainConstants.SELECT_TYPE);
				strTypeDisplay = i18nNow.getTypeI18NString(strTypeDisplay, sLanguage);
				//Added by DSM Reports (Sogeti) for 2022x.5 (APR CW 2024) Defect 55875 - Start
				String sCAID = (String) htCommonCol.get(SCAID);
				if(UIUtil.isNotNullAndNotEmpty(sCAID) &&  !sCAID.contains(HYPERLINK_PIPE)) {
					if(htCommonCol.get(CAREALIZEDNAME) != null && htCommonCol.get(CAPROPOSEDNAME) != null) {
						hm.put(0, HYPERLINK+htCommonCol.get(CAREALIZEDNAME)+HYPERLINK_PIPE+sCAID);
					} else if(htCommonCol.get(CAREALIZEDNAME) != null){
						hm.put(0, HYPERLINK+htCommonCol.get(CAREALIZEDNAME)+HYPERLINK_PIPE+sCAID);
					} else if(htCommonCol.get(CAPROPOSEDNAME) != null){
						hm.put(0, HYPERLINK+htCommonCol.get(CAPROPOSEDNAME)+HYPERLINK_PIPE+sCAID);
					} else {
						hm.put(0, DomainConstants.EMPTY_STRING);
					}
				}else {
					hm.put(0,htCommonCol.get(CAPROPOSEDNAME));
				}
				//Added by DSM Reports (Sogeti) for 2022x.5 (APR CW 2024) Defect 55875 - End
				
				hm.put(1, htCommonCol.get(pgV3Constants.SELECT_ATTRIBUTE_REASON_FOR_CHANGE));
				hm.put(2, HYPERLINK+htCommonCol.get(DomainConstants.SELECT_NAME)+HYPERLINK_PIPE+strId);
				hm.put(3, htCommonCol.get(pgV3Constants.SELECT_ATTRIBUTE_TITLE));
				hm.put(4, strTypeDisplay);
				hm.put(5, htCommonCol.get(DomainConstants.SELECT_REVISION));
				hm.put(6, strCurrentState);
				hm.put(7, mp.get(ATTR_PGPACKAGECOMPONENTOPTICALPROPERTIES));
				hm.put(8, mp.get(ATTR_PGMATERIALDENSITY));
				hm.put(9, mp.get(ATTR_PGMATERIALTHICKNESS));
				hm.put(10, mp.get(ATTR_PGPACKAGEDURABILITY));
				hm.put(11, mp.get(ATTR_PGLABELREMOVABILITY));
				hm.put(12, mp.get(ATTR_PGPAPERWETSTRENGTH));
				hm.put(13, mp.get(ATTR_PGPAPERDISSOLVABILITY));
				hm.put(14, mp.get(ATTR_PGINTEGRATEDLIDGLASSBOTTLEONLY));
				hm.put(15, mp.get(ATTR_PGDESIGNEDFORREUSE));
				XSSFCellStyle style = workbook.createCellStyle();
				style = setForeGroundColor(strCurrentState, style);
				//Added by DSM Reports (Sogeti) for 2022x.5 (APR CW 2024) Defect 55875 - Start
				XSSFCellStyle style1 = workbook.createCellStyle();
				//Added by DSM Reports (Sogeti) for 2022x.5 (APR CW 2024) Defect 55875 - End
				for(int j=0;j<hm.size();j++){								
					//Modified the code for _2022x_Aug CW Req-47097
					// Modified by DSM Reports (Sogeti) for 22x.03 (August CW 2023) Defect 54091 - Start
					cell = row.createCell(columnCount1++);
					if (j == 2) {
						style = makeColumnNumeric(workbook, style);
					}
					cell.setCellStyle(style);
					
					// Modified by DSM Reports (Sogeti) for 22x.03 (August CW 2023) Defect 54091 - End
					//Modified the code for _2022x_Aug CW Req-47097
					if(hm.get(j) instanceof StringList) {
						strCellValue = hm.get(j).toString().replace("[", "").replace("]", "").replace(pgV3Constants.SYMBOL_COMMA,pgV3Constants.SYMBOL_PIPE);
					}
					else {
						strCellValue = (String)hm.get(j);
					}
					if(UIUtil.isNotNullAndNotEmpty(strCellValue) && strCellValue.startsWith(HYPERLINK_COMPARE)){
						strSplittedValue = strCellValue.split("\\|",-1); 
						strHyperlinkId = strSplittedValue[(strSplittedValue.length)-1];
						strValue = strSplittedValue[(strSplittedValue.length)-2];
						if(pgV3Constants.TRUE.equalsIgnoreCase(strHyperlink) && iRowCountAll < iHyperLinkLimit){
							getHyperlink(context,cell,workbook,strValue,strHyperlinkId,strCurrentState);
						
						} else if(UIUtil.isNotNullAndNotEmpty(strValue)) {					
							cell.setCellValue(strValue);
						}
					}else {
						cell.setCellValue(strCellValue);
						//Added by DSM Reports (Sogeti) for 2022x.5 (APR CW 2024) Defect 55875 - Start
						if(j == 0) {
							style1.cloneStyleFrom(style);
							style1.setWrapText(true);
							cell.setCellStyle(style1);
						}
						//Added by DSM Reports (Sogeti) for 2022x.5 (APR CW 2024) Defect 55875 - End
					}
					
				}
			}
			sheetFormatter(sheetSustainibility); // Added by DSM Reports (Sogeti) for 22x.04 (Dec CW 2023) Defect 56156 - START/END
		} catch (Exception e) {		
			outLog.print("Exception in  updateWorksheetSustainibility: "+e+"\n");
			outLog.flush();
		}
	}

/**Added for Apr22 CW requirement 42019
 * @param context
 * @param strPartNames
 * @param strUserName
 * @param mPassValue
 * @return
 * @throws Exception
 */
private String getMEPSEPFromPart(Context context, String strPartNames, Map<String, String> mPassValue) throws Exception {
	StringList slEachPartName = StringUtil.split(strPartNames, pgV3Constants.SYMBOL_COMMA);
	MapList mlInputPartNew = new MapList();
	Map<String,Object> mpConnectedPart = new HashMap<>();
	String strPartId = "";
	DomainObject dObjPart = null;
	Map<String,Object> mpMEPSEPInfo = new HashMap<>();
	String strMEPSEPName = "";
	StringBuilder sbPartNames = new StringBuilder();
	Pattern slRelPattern = new Pattern(pgV3Constants.RELATIONSHIP_MANUFACTUREREQUIVALENT);
	slRelPattern.addPattern(pgV3Constants.RELATIONSHIP_SUPPLIEREQUIVALENT);
	StringList slBusSelect = new StringList();
	slBusSelect.add(DomainConstants.SELECT_NAME);
	//Added by DSM Reports (Sogeti) for 22x.04 (December CW 2023) Defect 54465 - Starts
	boolean isContextPushed = false;
	ContextUtil.pushContext(context,PropertyUtil.getSchemaProperty(context,pgV3Constants.PERSON_USER_AGENT),DomainConstants.EMPTY_STRING,DomainConstants.EMPTY_STRING);
	isContextPushed = true;
	try {
		//Added by DSM Reports (Sogeti) for 22x.04 (December CW 2023) Defect 54465 - Ends
	for (Object PartName : slEachPartName) {
		mlInputPartNew = getValidParts(context,strType,mPassValue,PartName);
		if(!mlInputPartNew.isEmpty()) {
			for(int inputPartSize=0;inputPartSize<mlInputPartNew.size();inputPartSize++){
				mpConnectedPart = (Map<String, Object>) mlInputPartNew.get(inputPartSize);
				strPartId = (String) mpConnectedPart.get(DomainConstants.SELECT_ID);
				dObjPart = DomainObject.newInstance(context,strPartId);
				//To extract the collective list of connect manufacturer/supplier from list of input parts, we need to call getRelated API inside for loop
				MapList mlReturnList = dObjPart.getRelatedObjects(
						context, //Context
						slRelPattern.getPattern(), //Relationship
						pgV3Constants.TYPE_PART, //Type
						slBusSelect, //Object Select
						null, //Rel Select
						false, //get To
						true, //get From
						(short)1, //recurse level
						null, //object where clause
						null, //relationship where clause
						0); //limit
				if(!mlReturnList.isEmpty()){
					for(int i=0;i<mlReturnList.size();i++){
						mpMEPSEPInfo = (Map<String, Object>) mlReturnList.get(i);
						strMEPSEPName = (String) mpMEPSEPInfo.get(DomainConstants.SELECT_NAME);
						if(!sbPartNames.toString().contains(strMEPSEPName) && !slEachPartName.toString().contains(strMEPSEPName)){
							sbPartNames.append(strMEPSEPName).append(pgV3Constants.SYMBOL_COMMA);
						}
					}
				}
			}
		//Added by DSM Reports (Sogeti) for 22x.04 (December CW 2023) Defect 54465 - Starts
		}
	}
	}catch(Exception e) {
		 outLog.write("Exception in getMEPSEPFromPart method"+e+"\n");
    	 outLog.flush();
	} finally {
		if(isContextPushed) {
			ContextUtil.popContext(context);
		//Added by DSM Reports (Sogeti) for 22x.04 (December CW 2023) Defect 54465 - Starts
		}
	}
	return sbPartNames.toString();

}
/**Added for Apr22 CW requirement 42014
 * @param mpMEPSEPCertiRow
 * @param mlMEPSEPCertiAll
 * @return
 */
private MapList getMEPSEPCertiForCompEquvi(Context context,Map<String, Object> mpMEPSEPCertiRow, MapList mlMEPSEPCertiAll) {
try {
	String strMEPSEPType = (String) mpMEPSEPCertiRow.get(DomainConstants.SELECT_TYPE);
	String strMEPSEPName = "";
	String keyCertification = "";
	String keyStatus = "";
	String keyExpDate = "";
	String keySupportDoc = "";
	String strMEPSEPCertiName = "";
	String strMEPSEPCertiStatus = "";
	String strMEPSEPCertiDate = "";
	String strMEPSEPSupportDoc = "";
	//Added by DSM Reports (Sogeti) for 2022x.4 (DEC CW 2023) Defect 55205 - Start
	String strUserName = (String) mpMEPSEPCertiRow.get("strUserName");
	//Added by DSM Reports (Sogeti) for 2022x.4 (DEC CW 2023) Defect 55205 - End
	//Added the code for 2018x.6 APR CW Defect 47053,47037,47013,47011 - starts
	String strMEPSEPId = "";
	StringList slCertifications = new StringList();
	StringList slSupportDocs = new StringList();
	//Added the code for 2018x.6 APR CW Defect 47053,47037,47013,47011 - Ends
	Map<String,Object> mpMEPSEPCertiNew = new HashMap<>();
	if(UIUtil.isNotNullAndNotEmpty(strMEPSEPType) && (pgV3Constants.TYPE_PACKAGINGMATERIALPART.equalsIgnoreCase(strMEPSEPType) || pgV3Constants.TYPE_PACKAGINGASSEMBLYPART.equalsIgnoreCase(strMEPSEPType))) {
		//Modified the code for 2018x.6 APR CW Defect 47053,47037,47013,47011 - starts
		keyCertification = PG_PMP_CERTIFICATION_NAME;
		keyExpDate = PG_PMP_CERTIFICATION_EXPDATE;
		keySupportDoc = PG_PMP_CERTIFICATION_SUPPORTDOC;
		//Modified the code for 2018x.6 APR CW Defect 47053,47037,47013,47011 - Ends
	} else {
		keyCertification = CERTIFICATION_NAME;
		keyStatus = CERTIFICATION_STATUS;
		keyExpDate = CERTIFICATION_EXPDATE;
	}
	if(mpMEPSEPCertiRow.get(keyCertification) instanceof StringList){
		//Added by DSM Reports (Sogeti) for 2022x.4 (DEC CW 2023) Defect 55205 - Start
		strMEPSEPCertiName = pg.getFinalCertiNames(context,strUserName,keyCertification,mpMEPSEPCertiRow);
		//Added by DSM Reports (Sogeti) for 2022x.4 (DEC CW 2023) Defect 55205 - End
		strMEPSEPCertiStatus = getCertificationForMultivalue(mpMEPSEPCertiRow.get(keyStatus));
		strMEPSEPCertiDate = getCertificationForMultivalue(mpMEPSEPCertiRow.get(keyExpDate));
		strMEPSEPSupportDoc = getCertificationForMultivalue(mpMEPSEPCertiRow.get(keySupportDoc));
		strMEPSEPName = (String) mpMEPSEPCertiRow.get(DomainConstants.SELECT_NAME);
		strMEPSEPId = (String) mpMEPSEPCertiRow.get(DomainConstants.SELECT_ID);
		
	}
	else {
		//Added by DSM Reports (Sogeti) for 2022x.4 (DEC CW 2023) Defect 55205 - Start
		strMEPSEPCertiName = pg.getFinalCertiNames(context,strUserName,keyCertification,mpMEPSEPCertiRow);
		//Added by DSM Reports (Sogeti) for 2022x.4 (DEC CW 2023) Defect 55205 - End
		strMEPSEPCertiStatus = (String) mpMEPSEPCertiRow.get(keyStatus);
		strMEPSEPCertiDate = (String) mpMEPSEPCertiRow.get(keyExpDate);
		strMEPSEPSupportDoc = (String) mpMEPSEPCertiRow.get(keySupportDoc);
		strMEPSEPName = (String) mpMEPSEPCertiRow.get(DomainConstants.SELECT_NAME);
		strMEPSEPId = (String) mpMEPSEPCertiRow.get(DomainConstants.SELECT_ID);
		
	}
	mpMEPSEPCertiNew.put("CertificationName", strMEPSEPCertiName);
	mpMEPSEPCertiNew.put("CertificationStatus", getValue(strMEPSEPCertiStatus));
	//Added for Defect 46598:18x6 Apr CW -- Starts
	mpMEPSEPCertiNew.put("CertificationExpDate", getExprDateUIformat(strMEPSEPCertiDate));
	//Added for Defect 46598:18x6 Apr CW -- Ends
	mpMEPSEPCertiNew.put("CertificationSupportDoc", getValue(strMEPSEPSupportDoc));
	mpMEPSEPCertiNew.put(DomainConstants.SELECT_NAME, strMEPSEPName);
	mpMEPSEPCertiNew.put(DomainConstants.SELECT_ID, strMEPSEPId);
	mlMEPSEPCertiAll.add(mpMEPSEPCertiNew);
}
catch(Exception e) {
	outLog.write("Exception in getMEPSEPCertiForCompEquvi method "+e+"\n");
	outLog.flush();
}
	return mlMEPSEPCertiAll;
}

/**Added for Apr22 CW requirement 42014
 * @param slCertiInfo
 * @return
 */
private String getCertificationForMultivalue(Object slCertiInfo) {
	String strFinalValue = "";
	if(slCertiInfo!=null) {
		strFinalValue = slCertiInfo.toString().replace("[","").replace("]","");
	}
	return strFinalValue;
}

/**Added for Apr22 CW requirement 42014
 * @param strMEPSEPCertiName
 * @return
 */
private String getValue(String strMEPSEPCertiName) {
	String strFinalValue = "";
	if(strMEPSEPCertiName==null) {
		return DomainConstants.EMPTY_STRING;
	} 
	//Modified the code for 2018x.6 AprCW Defect 47012 - starts 
	else if(UIUtil.isNotNullAndNotEmpty(strMEPSEPCertiName) && strMEPSEPCertiName.contains(", ")) {
		strFinalValue = strMEPSEPCertiName.replace(", ",pgV3Constants.SYMBOL_PIPE);
	} 
	//Modified the code for 2018x.6 AprCW Defect 47012 - Ends
	else if(UIUtil.isNotNullAndNotEmpty(strMEPSEPCertiName) && strMEPSEPCertiName.contains(",")) {
		strFinalValue = strMEPSEPCertiName.replace(pgV3Constants.SYMBOL_COMMA,pgV3Constants.SYMBOL_PIPE);
	} else {
		strFinalValue = strMEPSEPCertiName;
	}
	return strFinalValue;
}
/**Added for Req 41655:18x6 Apr CW -- Starts
 * @param context
 * @param dobjPart
 * @return MapList
 * @throws Exception*/
private MapList getPackagingCertificationList(Context context, DomainObject dobjPart,Map mpCommonColumnsDetail) throws FrameworkException {
	Map<String, Object> mpPartCertiRow = new HashMap<>();
	MapList mlPackagingCertiAll=new MapList();
	StringList slSupportDocument = new StringList();
	StringList slIntendedCertifications = new StringList();
	String strIntendedCertifications="";
	SimpleDateFormat formatter = new SimpleDateFormat (SYSTEMDATEFORMAT);
	SimpleDateFormat smpdateformat = new SimpleDateFormat("MMM d, yyyy");
	String strExprDate = "";
	Date tmpDate;
	try {		
		int slConnectedCertificationSize;
		StringList slConnectedCertificationList;
		
		StringList slObjSelect = new StringList();
		slObjSelect.addElement(DomainConstants.SELECT_ID);
		slObjSelect.addElement(DomainConstants.SELECT_NAME);
		slIntendedCertifications = dobjPart.getInfoList(context, SELECT_ATTRIBUTE_PG_INTENDEDCERTIFICATIONS);
		if(null != slIntendedCertifications && !slIntendedCertifications.isEmpty()){
			strIntendedCertifications = slIntendedCertifications.toString().replace("[", "").replace("]", "");
		}
		
		
		StringList slRelSelect = new StringList();
		slRelSelect.addElement(pgV3Constants.SELECT_ATTRIBUTE_EXPIRATION_DATE);
		slRelSelect.addElement(SELECT_ATTRIBUTE_PG_CERTFICATION_STATUS);
		slRelSelect.addElement(PG_PACKAGING_SUPPORTDOCUMENT);
		
		MapList mpReturnList = dobjPart.getRelatedObjects(			
			context, //Context
			RELATIONSHIP_PG_PLIPACKAGINGCERTIFICATIONS, //Relationship
			TYPE_PG_PLIPACKAGINGMATERIALCERTIFICATION, //Type
			slObjSelect, //Object Select
			slRelSelect, //Rel Select
			false, //get To
			true, //get From
			(short)1, //recurse level
			null, //object where clause
			null, //relationship where clause
			0); //limit
	
	
	int mpPartCertiSize = mpReturnList.size();
	if(mpPartCertiSize>0) {
		for(int i=0;i<mpPartCertiSize;i++) {
			mpPartCertiRow = (Map)mpReturnList.get(i);
				
				mpPartCertiRow.put(PRODUCT_NAME, "");
				mpPartCertiRow.put(PRODUCT_ID, "");
				mpPartCertiRow.put(MARKET_NAME, "");
				mpPartCertiRow.put(MARKET_ID, "");
				
				strExprDate = (String)mpPartCertiRow.get(pgV3Constants.SELECT_ATTRIBUTE_EXPIRATION_DATE);
				if (UIUtil.isNotNullAndNotEmpty(strExprDate)) {
					tmpDate = formatter.parse(strExprDate);
					strExprDate = smpdateformat.format(tmpDate);
					mpPartCertiRow.put("Certification_ExpDate", strExprDate);
				}else {
					mpPartCertiRow.put("Certification_ExpDate", "");
				}
				mpPartCertiRow.put("Certification_Name", mpPartCertiRow.get(DomainConstants.SELECT_NAME));
				if(mpPartCertiRow.containsKey(SELECT_ATTRIBUTE_PG_CERTFICATION_STATUS)) {
					mpPartCertiRow.put("Certification_Status", mpPartCertiRow.get(SELECT_ATTRIBUTE_PG_CERTFICATION_STATUS));
				}else {
					mpPartCertiRow.put("Certification_Status", "");
				}
				mpPartCertiRow.put("relationship", mpPartCertiRow.get("relationship"));
				mpPartCertiRow.put("Certification_IntendedCerti", strIntendedCertifications);
				
				//Added for Defect 46615:18x6 Apr CW -- Starts
				if(null!=mpPartCertiRow.get(PG_PACKAGING_SUPPORTDOCUMENT)) {
				if(mpPartCertiRow.get(PG_PACKAGING_SUPPORTDOCUMENT) instanceof StringList) {
					
					slSupportDocument = (StringList)mpPartCertiRow.get(PG_PACKAGING_SUPPORTDOCUMENT);
					mpPartCertiRow.put("Certification_SupDoc", slSupportDocument.toString().replace("[", "").replace("]", ""));
				}else {
					mpPartCertiRow.put("Certification_SupDoc", mpPartCertiRow.get(PG_PACKAGING_SUPPORTDOCUMENT) );
				}
				}else {
					mpPartCertiRow.put("Certification_SupDoc", "");
				}
				//Added for Defect 46615:18x6 Apr CW -- Ends
				
				mpPartCertiRow.put(COMMONCOLUMNS, mpCommonColumnsDetail);
				mlPackagingCertiAll.add(mpPartCertiRow);
			}	
		} else if(UIUtil.isNotNullAndNotEmpty(strIntendedCertifications)){
			mpPartCertiRow = new HashMap();
			mpPartCertiRow.put(PRODUCT_NAME, "");
			mpPartCertiRow.put(PRODUCT_ID, "");
			mpPartCertiRow.put(MARKET_NAME, "");
			mpPartCertiRow.put(MARKET_ID, "");
			mpPartCertiRow.put("Certification_ExpDate","");
			mpPartCertiRow.put("Certification_Name", "");
			mpPartCertiRow.put("Certification_Status", "");
			mpPartCertiRow.put("Certification_IntendedCerti",strIntendedCertifications);
			mpPartCertiRow.put("relationship", "");
			mpPartCertiRow.put(COMMONCOLUMNS, mpCommonColumnsDetail);
			mlPackagingCertiAll.add(mpPartCertiRow);
		}
     } catch(Exception e) {
    	 outLog.write("Exception in getPackagingCertificationList"+e+"\n");
    	 outLog.flush();
    }
	return mlPackagingCertiAll;
}

//Added for Req 41655:18x6 Apr CW -- Ends
/**Added for Req 41655:18x6 Apr CW -- Starts
 * @param context
 * @param dobjPart
 * @return MapList
 * @throws Exception*/
private MapList getRawMaterialCertificationList(Context context, DomainObject dobjPart, Map mpCommonColumnsDetail) throws FrameworkException {
	Map<String, Object> mpPartCertiRow = new HashMap<>();
	MapList mlRMCertiAll=new MapList();
	StringList slCertificationStatus = new StringList();
	String strExprDate = "";
	try{
		StringBuilder sbRelPattern = new StringBuilder(pgV3Constants.RELATIONSHIP_PG_PLI_MATERIAL_CERTIFICATIONS);
		StringList slObjSelect = new StringList();
		
		slObjSelect.addElement(DomainConstants.SELECT_NAME);
		StringList slRelSelect = new StringList();
		slRelSelect.addElement(RM_CERTIFICATION_EXPDATE);
		slRelSelect.addElement(RM_CERTIFICATION_STATUS);
		
		MapList mpReturnList = dobjPart.getRelatedObjects(			
			context, //Context
			sbRelPattern.toString(), //Relationship
			pgV3Constants.TYPE_PGPLIMATERIALCERTIFICATIONS, //Type
			slObjSelect, //Object Select
			slRelSelect, //Rel Select
			false, //get To
			true, //get From
			(short)1, //recurse level
			null, //object where clause
			null, //relationship where clause
			0); //limit
	
	int mpPartCertiSize = mpReturnList.size();	
	if(mpPartCertiSize>0) {
		for(int i=0;i<mpPartCertiSize;i++) {
			mpPartCertiRow = (Map)mpReturnList.get(i);
			mpPartCertiRow.put(PRODUCT_NAME, "");
			mpPartCertiRow.put(PRODUCT_ID, "");
			mpPartCertiRow.put(MARKET_NAME, "");
			mpPartCertiRow.put(MARKET_ID, "");
			mpPartCertiRow.put("Certification_IntendedCerti", "");
			mpPartCertiRow.put("Certification_Name", "");
			mpPartCertiRow.put("relationship", mpPartCertiRow.get("relationship"));
			strExprDate = getRMCertificationDate(mpPartCertiRow.get(RM_CERTIFICATION_EXPDATE));
			mpPartCertiRow.put("Certification_ExpDate", strExprDate);	
			if(mpPartCertiRow.get(RM_CERTIFICATION_STATUS) instanceof StringList) {
				slCertificationStatus = (StringList)mpPartCertiRow.get(RM_CERTIFICATION_STATUS);
				mpPartCertiRow.put("Certification_Status", slCertificationStatus.toString().replace("[", "").replace("]", "") );
			} else {
				mpPartCertiRow.put("Certification_Status", mpPartCertiRow.get(RM_CERTIFICATION_STATUS));	
			}				
			mpPartCertiRow.put("Certification_SupDoc", "");
			
			mpPartCertiRow.put(COMMONCOLUMNS, mpCommonColumnsDetail);
			mlRMCertiAll.add(mpPartCertiRow);			
			}	
		} 
	} catch(Exception e) {
		outLog.write("Exception in getRawMaterialCertificationList"+e);
	}
	return mlRMCertiAll;
}
//Added for Req 41655:18x6 Apr CW -- Ends

/**Added for Req 42010:18x6 Apr CW -- Starts
 * @param context
 * @param strMCPid
 * @return MapList
 * @throws Exception*/
//Changing the Access level to be accessibles to other class methods
public MapList getPackagingCertification(Context context, String strPartid) throws FrameworkException {
	MapList mpReturnList = new MapList();
	MapList mlMCPCertiAll=new MapList();	
	Map<String, Object> mpMCPCertiNew = new HashMap<>();
	StringList slIntendedCertifications = new StringList();
	String strIntendedCertifications="";
	StringList slSupportDocument = new StringList();
	String strCertificationStatus = DomainConstants.EMPTY_STRING;
	String strSupportingDoc = DomainConstants.EMPTY_STRING;
	StringList slMCPCertiSupDocs = new StringList();
	Map<String,Object> mpMCPCertiRow = null;
	SimpleDateFormat formatter = new SimpleDateFormat (SYSTEMDATEFORMAT);
	SimpleDateFormat smpdateformat = new SimpleDateFormat("MMM d, yyyy");
	String strExprDate = "";
	Date tmpDate;
	try {
		if(UIUtil.isNotNullAndNotEmpty(strPartid)) {	
		DomainObject doMCP = DomainObject.newInstance(context, strPartid);	
		StringList slObjSelect = new StringList();
		slObjSelect.addElement(DomainConstants.SELECT_ID);
		slObjSelect.addElement(DomainConstants.SELECT_NAME);
		slIntendedCertifications = doMCP.getInfoList(context, SELECT_ATTRIBUTE_PG_INTENDEDCERTIFICATIONS);
		if(null != slIntendedCertifications && !slIntendedCertifications.isEmpty()){
			strIntendedCertifications = slIntendedCertifications.toString().replace("[", "").replace("]", "");
		}
		
		StringList slRelSelect = new StringList();
		slRelSelect.addElement(pgV3Constants.SELECT_ATTRIBUTE_EXPIRATION_DATE);
		slRelSelect.addElement(SELECT_ATTRIBUTE_PG_CERTFICATION_STATUS);
		slRelSelect.addElement(PG_PACKAGING_SUPPORTDOCUMENT);	
		
		//Modified the code for 2018x.6 Apr CW Defect 46862 - Starts
		//Pushing the User Agent Context to get Connected Certifications irrespective of Logged in User
		ContextUtil.pushContext(context,PropertyUtil.getSchemaProperty(context,pgV3Constants.PERSON_USER_AGENT),DomainConstants.EMPTY_STRING,DomainConstants.EMPTY_STRING);
		//Modified the code for 2018x.6 Apr CW Defect 46862 - Ends
		mpReturnList = doMCP.getRelatedObjects(			
			context, //Context
			RELATIONSHIP_PG_PLIPACKAGINGCERTIFICATIONS, //Relationship
			TYPE_PG_PLIPACKAGINGMATERIALCERTIFICATION, //Type
			slObjSelect, //Object Select
			slRelSelect, //Rel Select
			false, //get To
			true, //get From
			(short)1, //recurse level
			null, //object where clause
			null, //relationship where clause
			0); //limit
	
		int mpMCPCertiSize = mpReturnList.size();
		if(mpMCPCertiSize>0) {						
			Map<String,Object> mpMCPPCertiNew = null;
			
				
				for(int i=0;i<mpMCPCertiSize;i++) {
					mpMCPCertiRow = (Map)mpReturnList.get(i);				
					mpMCPCertiNew = new HashMap<>();
					mpMCPCertiNew.put("Certification_Name", (String) mpMCPCertiRow.get(DomainConstants.SELECT_NAME));
					
					if(mpMCPCertiRow.containsKey(SELECT_ATTRIBUTE_PG_CERTFICATION_STATUS)) {
						mpMCPCertiNew.put("Certification_Status", (String) mpMCPCertiRow.get(SELECT_ATTRIBUTE_PG_CERTFICATION_STATUS));
					}else {
						mpMCPCertiNew.put("Certification_Status", "");
					}
					
					strExprDate = (String)mpMCPCertiRow.get(pgV3Constants.SELECT_ATTRIBUTE_EXPIRATION_DATE);
						if (UIUtil.isNotNullAndNotEmpty(strExprDate)) {
							tmpDate = formatter.parse(strExprDate);
							strExprDate = smpdateformat.format(tmpDate);
							mpMCPCertiNew.put("Certification_ExpDate", strExprDate);
						}else {
							mpMCPCertiNew.put("Certification_ExpDate", "");
						}
						
					mpMCPCertiNew.put("Certification_IndendedCerti", strIntendedCertifications);
					//Added for Defect 46615:18x6 Apr CW -- Starts
					if(null!= mpMCPCertiRow.get(PG_PACKAGING_SUPPORTDOCUMENT)) {
						
				if(mpMCPCertiRow.get(PG_PACKAGING_SUPPORTDOCUMENT) instanceof StringList) {
						
						slSupportDocument = (StringList)mpMCPCertiRow.get(PG_PACKAGING_SUPPORTDOCUMENT);
						strSupportingDoc = (String) slSupportDocument.toString().replace("[", "").replace("]", "");
						mpMCPCertiNew.put("Certification_SupDoc", strSupportingDoc);
					}else {
						mpMCPCertiNew.put("Certification_SupDoc", mpMCPCertiRow.get(PG_PACKAGING_SUPPORTDOCUMENT) );
					}
					}else {
						mpMCPCertiNew.put("Certification_SupDoc", "");
					}
					//Added for Defect 46615:18x6 Apr CW -- Ends
					mlMCPCertiAll.add(mpMCPCertiNew);	
				} 			
			} else if(UIUtil.isNotNullAndNotEmpty(strIntendedCertifications)) {
				mpMCPCertiNew.put("Certification_Name","");
				mpMCPCertiNew.put("Certification_Status","");
				mpMCPCertiNew.put("Certification_ExpDate","");
				mpMCPCertiNew.put("Certification_IndendedCerti",strIntendedCertifications);
				mpMCPCertiNew.put("Certification_SupDoc","");
				mlMCPCertiAll.add(mpMCPCertiNew);
			}
		}
	} catch(Exception e) {
		outLog.write("Exception in getPackagingCertification method"+e);
	}
	//Modified the code for 2018x.6 Apr CW Defect 46862 - Starts
	finally {
		ContextUtil.popContext(context);		
	}
	//Modified the code for 2018x.6 Apr CW Defect 46862 - Ends
	
	return mlMCPCertiAll;
}

	
	/**Added for Req 42010:18x6 Apr CW -- Starts
	 * @param ExprDate
	 * @return
	 */
	private String getRMCertificationDate(Object ExprDate) {
		SimpleDateFormat formatter = new SimpleDateFormat (SYSTEMDATEFORMAT);
		SimpleDateFormat smpdateformat = new SimpleDateFormat("MMM d, yyyy");
		String strExpirationDate = "";
		StringBuilder sbExprDate = new StringBuilder();
		Date tmpDate;
		try {
		if(ExprDate instanceof StringList) {
			strExpirationDate = ExprDate.toString().replace("[", "").replace("]", "");
			String[] strArrayExprDate = strExpirationDate.split(COMMA);
			for(int i=0;i<strArrayExprDate.length;i++) {
				if (UIUtil.isNotNullAndNotEmpty(strArrayExprDate[i])) {
					
				tmpDate = formatter.parse(strArrayExprDate[i]);
					strExpirationDate = smpdateformat.format(tmpDate);
					if(sbExprDate.length()==0) {
						sbExprDate.append(strExpirationDate);
					}else {
						sbExprDate.append(COMMA);
						sbExprDate.append(strExpirationDate);
					}
				}else {
					if(sbExprDate.length()==0) {
					sbExprDate.append(strArrayExprDate[i]);
					}else {
						sbExprDate.append(COMMA);
						sbExprDate.append(strArrayExprDate[i]);
					}
				}
			}
			strExpirationDate = sbExprDate.toString();
		}else {
			strExpirationDate = (String)ExprDate;
			if (UIUtil.isNotNullAndNotEmpty(strExpirationDate)) {
				
				
					tmpDate = formatter.parse(strExpirationDate);
					strExpirationDate = smpdateformat.format(tmpDate);
			}
			}
			
		}catch(Exception e) {
			outLog.write("Exception in getRMCertificationDate method"+e);
		}
	
		return strExpirationDate;
	}
	//Added for Req 42010:18x6 Apr CW -- Ends
	
	/**
	 * @param context
	 * @return
	 * @throws FrameworkException
	 */
	public String getSpecReaderURL(Context context) throws FrameworkException {
		String objName = pgV3Constants.GLOBAL_SUB_NAME;
		StringList slSelect = new StringList();
		slSelect.add(pgV3Constants.SELECT_ATTRIBUTE_PGSPECREADERURL);
		String strURL = "";
		MapList mlLatestReleasePart = DomainObject.findObjects(context,//context
				TYPE_GLOBALSUBSCRIPTIONCOFIGURATION,//Type
				   objName,//name
				   DomainConstants.EMPTY_STRING,//revision
				   DomainConstants.QUERY_WILDCARD,//owner
				  //Added by DSM Reports (Sogeti) for 22x.03 (August CW 2023) Requirement 47102 - Starts
				   STR_VAULT_ADMINISTRATION,//vault
				 //Added by DSM Reports (Sogeti) for 22x.03 (August CW 2023) Requirement 47102 - Ends
					null,//where expression
				   false,//expand type
				   slSelect);//object select
		if(!mlLatestReleasePart.isEmpty()) {
			Map<String,Object> mpConfigInfo = (Map<String, Object>) mlLatestReleasePart.get(0);
			strURL = (String) mpConfigInfo.get(pgV3Constants.SELECT_ATTRIBUTE_PGSPECREADERURL);
		}
		return strURL;
	}
	
	/**Added for Defect 46598:18x6 Apr CW -- Starts
	 * @param exprDate
	 * @return
	 */
	private String getExprDateUIformat(String strExpDate) {
		SimpleDateFormat formatter = new SimpleDateFormat (SYSTEMDATEFORMAT);
		SimpleDateFormat smpdateformat = new SimpleDateFormat("MMM d, yyyy");
		String strExprDate = "";
		StringBuilder sbExprDate = new StringBuilder();
		Date tmpDate;
		try {
			if (UIUtil.isNotNullAndNotEmpty(strExpDate)) {
				if(strExpDate.contains(",")) {
					String[] strArrExprDate = strExpDate.split(COMMA);
					for(int i=0;i<strArrExprDate.length;i++) {
						if(UIUtil.isNotNullAndNotEmpty(strArrExprDate[i])) {
							tmpDate = formatter.parse(strArrExprDate[i]);
							strExprDate = smpdateformat.format(tmpDate);
							sbExprDate.append(strExprDate);
							sbExprDate.append(pgV3Constants.SYMBOL_PIPE);
							}
						else {
							//Modified the code for 2018x.6 AprCW Defect 47012 - starts 
							sbExprDate.append("");
							//Modified the code for 2018x.6 AprCW Defect 47012 - Ends
							sbExprDate.append(pgV3Constants.SYMBOL_PIPE);
						}
					}
					if(sbExprDate.length()>0) {
						strExprDate = sbExprDate.toString().substring(0, sbExprDate.length()-1);
					}
				}else {
					tmpDate = formatter.parse(strExpDate);
					strExprDate = smpdateformat.format(tmpDate);	
					}
			}
		}catch(Exception e) {
			outLog.write("Exception in getExprDateUIformat "+e);
		}
		return strExprDate;
	}
	//Added for Defect 46598:18x6 Apr CW -- Ends
	
	/**Added for 2018x.6 May22 CW requirement 41969-Starts
	 * @param context
	 * @param dobjPart
	 * @param strType
	 * @param mpCommonColumnsDetail
	 * @return
	 */
	private MapList getDGClassificationDetailsFPP(Context context, DomainObject dobjPart, Map<String,Object> mpCommonColumnsDetail, String strUserName) {
		//Added the code for Defect 49698 - Spec Reader Access Issue - Starts
		boolean hasAccess = false;
		boolean isContextPushed = false;
		//Added the code for Defect 49698 - Spec Reader Access Issue - Ends
		MapList mlDGClassifictionAll=new MapList();
		StringList slBusSelect=new StringList();
		slBusSelect.addElement(DomainConstants.SELECT_ID);
		slBusSelect.addElement(DomainConstants.SELECT_TYPE);
		slBusSelect.addElement(DomainConstants.SELECT_NAME);
		slBusSelect.addElement(DomainConstants.SELECT_REVISION);
		slBusSelect.addElement(pgV3Constants.SELECT_ATTRIBUTE_TITLE);
		slBusSelect.addElement(DomainConstants.SELECT_DESCRIPTION);
		slBusSelect.addElement(pgV3Constants.SELECT_ATTRIBUTE_PGDGCUPLABELREQUIRED);
		StringList slRelSelect=new StringList();
		slRelSelect.addElement(pgV3Constants.SELECT_ATTRIBUTE_PGPRODUCTPARTPHYSICALID);
		Map<String,Object> mpDGClassifiRow = null;
		MapList mlDGClassifiAll=new MapList();
		String strProdPhysicalId = "";
		String strProductPartObjectId = "";
		String strProductPartName = "";
		String strProductPartRevision = "";
		String strProductPartTitle = "";
		String strDGDescription = "";
		String strDGMLonCUP="";
		
		boolean bAccess = false;
		Map<String,Object> mpDGProductPartInfo = new HashMap<>();
		StringList slDGProductPart = new StringList();
		slDGProductPart.add(DomainConstants.SELECT_NAME);
		slDGProductPart.add(DomainConstants.SELECT_REVISION);
		slDGProductPart.add(pgV3Constants.SELECT_ATTRIBUTE_TITLE);
		slDGProductPart.add(DomainConstants.SELECT_ID);
		slDGProductPart.add(DomainConstants.SELECT_DESCRIPTION);
		slDGProductPart.add(pgV3Constants.SELECT_ATTRIBUTE_PGDGCUPLABELREQUIRED);
		
		
		try {
			//Added the code for Defect 49698 - Spec Reader Access Issue - Starts
			//Added the code for Defect 49698 - Spec Reader Access Issue - Starts
			if(SPECREADER.equalsIgnoreCase(strOriginatingSource)) {
				hasAccess = accessCheck(context, strUserName, (String)dobjPart.getInfo(context, DomainConstants.SELECT_ID));
				if(hasAccess) {
					//Pushing User Agent Context to get the Data if the Spec Reader User have access
					ContextUtil.pushContext(context,PropertyUtil.getSchemaProperty(context,"User Agent"),DomainConstants.EMPTY_STRING,DomainConstants.EMPTY_STRING);
					isContextPushed = true;
					
				}
			}
			//Added the code for Defect 49698 - Spec Reader Access Issue - Starts
			//Added the code for Defect 49698 - Spec Reader Access Issue - Ends
			MapList mpReturnList = dobjPart.getRelatedObjects(
					context, //Context
					pgV3Constants.RELATIONSHIP_PGROLLEDUPDGC, //Relationship
					pgV3Constants.TYPE_PGDANGEROUSGOODS, //Type
					slBusSelect, //Object Select
					slRelSelect, //Rel Select
					false, //get To
					true, //get From
					(short)1, //recurse level
					DomainConstants.EMPTY_STRING, //object where clause
					null, //relationship where clause
					0); //limit
			

			int mpDGClassificationDetailsSize = mpReturnList.size();
			if(mpDGClassificationDetailsSize > 0) {
				for(int i=0;i<mpDGClassificationDetailsSize;i++) {
					mpDGClassifiRow = (Map)mpReturnList.get(i);
					
						bAccess = false;
					strProdPhysicalId = (String)mpDGClassifiRow.get(pgV3Constants.SELECT_ATTRIBUTE_PGPRODUCTPARTPHYSICALID);
					if (UIUtil.isNotNullAndNotEmpty(strProdPhysicalId)) {
						DomainObject domProductPart = DomainObject.newInstance(context, strProdPhysicalId);
						mpDGProductPartInfo = domProductPart.getInfo(context, slDGProductPart);
						if(!mpDGProductPartInfo.isEmpty()) {
						
						strProductPartName = (String)mpDGProductPartInfo.get(DomainConstants.SELECT_NAME);
						strProductPartRevision = (String) mpDGProductPartInfo.get(DomainConstants.SELECT_REVISION);
						strProductPartObjectId = (String)mpDGProductPartInfo.get(DomainConstants.SELECT_ID);
						strDGDescription=(String)mpDGClassifiRow.get(DomainConstants.SELECT_DESCRIPTION);
						strDGMLonCUP = (String)mpDGClassifiRow.get(pgV3Constants.SELECT_ATTRIBUTE_PGDGCUPLABELREQUIRED);
						//Added the code for 2018x.6 May CW Defect 47312 - starts
						bAccess = accessCheck(context,strUserName,strProductPartObjectId);
						if(bAccess) {
							strProductPartTitle = (String) mpDGProductPartInfo.get(pgV3Constants.SELECT_ATTRIBUTE_TITLE);
						}else {
							strProductPartTitle= NO_ACCESS;
						}
						//Added the code for 2018x.6 May CW Defect 47312 - Ends
						
					}
					}
					
					
						mpDGClassifiRow.put(PRODUCTPARTNAME,strProductPartName);
						mpDGClassifiRow.put(PRODUCTPARTREVISION,strProductPartRevision);
						mpDGClassifiRow.put(PRODUCTPARTTITLE,strProductPartTitle);
						mpDGClassifiRow.put(PRODUCTPARTOBJECTID,strProductPartObjectId);
						mpDGClassifiRow.put(DGDESCRIPTION,strDGDescription);
						mpDGClassifiRow.put(DGMLONCUP,strDGMLonCUP);
						mpDGClassifiRow.put(COMMONCOLUMNS, mpCommonColumnsDetail);
						mlDGClassifiAll.add(mpDGClassifiRow);
						
					
				}
			}
			
			
		}catch(Exception e) {
			
			outLog.print("Exception in  getDGClassificationDetailsFPP: "+e+"\n");
			
			outLog.flush();	
			//Added the code for Defect 49698 - Spec Reader Access Issue - Starts
		}finally {
			try {
				if(isContextPushed) {
					ContextUtil.popContext(context);
				}
			}catch(Exception e) {
				outLog.print("Exception in getDGClassificationDetailsFPP Method while popping the context "+e+"\n");
				outLog.flush();
			}
			
		}
		//Added the code for Defect 49698 - Spec Reader Access Issue - Ends
		return mlDGClassifiAll;
	}
	//Added for 2018x.6 May22 CW requirement 41969-Ends
	
	
	/**Added for 2018x.6 May22 CW requirement 41969-Starts
	 * @param context
	 * @param dobjPart
	 * @param strType
	 * @param mpCommonColumnsDetail
	 * @return
	 */
	private MapList getDGClassificationDetails(Context context, DomainObject dobjPart ,Map<String,Object> mpCommonColumnsDetail, String strUserName) {
		//Added the code for Defect 49698 - Spec Reader Access Issue - Starts
		boolean hasAccess = false;
		boolean isContextPushed = false;
		//Added the code for Defect 49698 - Spec Reader Access Issue - Ends
		Map<String,Object> mpDGClassifiRow = null;
		MapList mlDGClassifiAll=new MapList();
		String strProdPhysicalId = "";
		String strProductPartObjectId = "";
		String strProductPartName = "";
		String strProductPartRevision = "";
		String strProductPartTitle = "";
		String strDGDescription = "";
		String strDGMLonCUP="";
		//*******push the user context
		//********Make the code change to get the DG Description even when physical Id is not present for both FPP and non-FPP
		StringList slBusSelect=new StringList();
		slBusSelect.addElement(DomainConstants.SELECT_TYPE);
		slBusSelect.addElement(DomainConstants.SELECT_NAME);
		slBusSelect.addElement(DomainConstants.SELECT_REVISION);
		slBusSelect.addElement(pgV3Constants.SELECT_ATTRIBUTE_TITLE);
		slBusSelect.addElement(DomainConstants.SELECT_DESCRIPTION);
		slBusSelect.addElement(pgV3Constants.SELECT_ATTRIBUTE_PGDGCUPLABELREQUIRED);
		
		try {
			//Added the code for Defect 49698 - Spec Reader Access Issue - Starts
			if(SPECREADER.equalsIgnoreCase(strOriginatingSource)) {
				hasAccess = accessCheck(context, strUserName, (String)dobjPart.getInfo(context, DomainConstants.SELECT_ID));
				if(hasAccess) {
					//Push Context User Agent
					ContextUtil.pushContext(context,PropertyUtil.getSchemaProperty(context,"User Agent"),DomainConstants.EMPTY_STRING,DomainConstants.EMPTY_STRING);
					isContextPushed = true;
					
				}
			}
			//Added the code for Defect 49698 - Spec Reader Access Issue - Ends
			MapList mpReturnList = dobjPart.getRelatedObjects(
					context, //Context
					pgV3Constants.TYPE_PGDANGEROUSGOODS, //Relationship
					pgV3Constants.TYPE_PGDANGEROUSGOODS, //Type
					slBusSelect, //Object Select
					null, //Rel Select
					false, //get To
					true, //get From
					(short)1, //recurse level
					null, //object where clause
					null, //relationship where clause
					0); //limit
			int mpDGClassificationDetailsSize = mpReturnList.size();
			if(mpDGClassificationDetailsSize > 0) {
				for(int i=0;i<mpDGClassificationDetailsSize;i++) {
					mpDGClassifiRow = (Map)mpReturnList.get(i);
					strDGDescription=(String)mpDGClassifiRow.get(DomainConstants.SELECT_DESCRIPTION);
					strDGMLonCUP = (String)mpDGClassifiRow.get(pgV3Constants.SELECT_ATTRIBUTE_PGDGCUPLABELREQUIRED);
					mpDGClassifiRow.put(PRODUCTPARTNAME,strProductPartName);
					mpDGClassifiRow.put(PRODUCTPARTREVISION,strProductPartRevision);
					mpDGClassifiRow.put(PRODUCTPARTTITLE,strProductPartTitle);
					mpDGClassifiRow.put(DGDESCRIPTION,strDGDescription);
					mpDGClassifiRow.put(DGMLONCUP,strDGMLonCUP);
					mpDGClassifiRow.put(PRODUCTPARTOBJECTID,strProductPartObjectId);
					
					mpDGClassifiRow.put(COMMONCOLUMNS, mpCommonColumnsDetail);
					mlDGClassifiAll.add(mpDGClassifiRow);
					
				}
			}
			
		}catch(Exception e) {
			outLog.print("Exception in  getDGClassificationDetails: "+e+"\n");
			
			outLog.flush();	
			//Added the code for Defect 49698 - Spec Reader Access Issue - Starts
		}finally {
			try {
				if(isContextPushed) {
					ContextUtil.popContext(context);
				}
			}catch(Exception e) {
				outLog.print("Inside the getDGClassificationDetails Method  while popping the context"+e+"\n");
				outLog.flush();
			}
			
		}
		//Added the code for Defect 49698 - Spec Reader Access Issue - Ends
		return mlDGClassifiAll;
	}
	//Added for 2018x.6 May22 CW requirement 41969-Ends
	
	/**Added for 2018x.6 May22 CW requirement 41969-Starts
	 * @param context
	 * @param workbook
	 * @param rowHeaderDGClassification
	 * @param cellStyleDGClassification
	 * @param mlDGClassification
	 * @param sheetDGClassification
	 * @param strHyperlink
	 */
	private void updateWorksheetDGClassification(Context context, XSSFWorkbook workbook, XSSFRow rowHeaderDGClassification,XSSFCellStyle cellStyleDGClassification, MapList mlDGClassification, XSSFSheet sheetDGClassification,String strHyperlink, XSSFCellStyle styleGlobal) {
		try {
		String strHyperlinkLimit = EnoviaResourceBundle.getProperty(context, EMXCPNSTRINGRESOURCE, context.getLocale(),"emxCPN.PartAndSpecReport.HyperlinkLimit");
		int iHyperLinkLimit = Integer.parseInt(strHyperlinkLimit);
		int iRowCountAll=0;
		String strColumnNames = EnoviaResourceBundle.getProperty(context, EMXCPN, context.getLocale(),"emxCPN.FamilyCareReport.Worksheet.DGClassification.ColumnTypes");
		
		createCellForWorksheet(context,strColumnNames,rowHeaderDGClassification,cellStyleDGClassification,STRDGCLASSIFICATIONCOLUMN);
		int rowCount = 0;
		String strCellValue = "";
		Hashtable<String,Object> htCommonCol = new Hashtable<>();
		Map<String,Object> mp=new HashMap<>();
		HashMap<Integer,Object> hm= new HashMap<>();
		String strId = "";
		Cell cell=null;
		String strValue = "";
		String strHyperlinkId = "";
		String[] strSplittedValue;
		String strCurrentState = "";
		String strTypeDisplay = "";
		String sLanguage = context.getSession().getLanguage();
		int columnCount1 = 0;
		int mlDGClassificationSize = mlDGClassification.size();
		for(int i=0;i<mlDGClassificationSize;i++) {
			++rowCount;
			iRowCountAll = iRowCountAll + 1;
			XSSFRow row = sheetDGClassification.createRow(rowCount);
			columnCount1 = 0;
			mp = (Map)mlDGClassification.get(i);
			htCommonCol =  (Hashtable<String, Object>) mp.get(COMMONCOLUMNS);
			strId = (String) htCommonCol.get(DomainConstants.SELECT_ID);
			strCurrentState = (String) htCommonCol.get(DomainConstants.SELECT_CURRENT);
			strTypeDisplay = (String) htCommonCol.get(DomainConstants.SELECT_TYPE);
			strTypeDisplay = i18nNow.getTypeI18NString(strTypeDisplay, sLanguage);
			//Added by DSM Reports (Sogeti) for 2022x.5 (APR CW 2024) Defect 55875 - Start
			String sCAID = (String) htCommonCol.get(SCAID);
			if( UIUtil.isNotNullAndNotEmpty(sCAID) && !sCAID.contains(HYPERLINK_PIPE)) {
				if(htCommonCol.get(CAREALIZEDNAME) != null && htCommonCol.get(CAPROPOSEDNAME) != null) {
					hm.put(0, HYPERLINK+htCommonCol.get(CAREALIZEDNAME)+HYPERLINK_PIPE+sCAID);
				} else if(htCommonCol.get(CAREALIZEDNAME) != null){
					hm.put(0, HYPERLINK+htCommonCol.get(CAREALIZEDNAME)+HYPERLINK_PIPE+sCAID);
				} else if(htCommonCol.get(CAPROPOSEDNAME) != null){
					hm.put(0, HYPERLINK+htCommonCol.get(CAPROPOSEDNAME)+HYPERLINK_PIPE+sCAID);
				} else {
					hm.put(0, DomainConstants.EMPTY_STRING);
				}
			}else{
				hm.put(0,htCommonCol.get(CAPROPOSEDNAME));
			}
			//Added by DSM Reports (Sogeti) for 2022x.5 (APR CW 2024) Defect 55875 - End
			hm.put(1, htCommonCol.get(pgV3Constants.SELECT_ATTRIBUTE_REASON_FOR_CHANGE));
			hm.put(2, HYPERLINK+htCommonCol.get(DomainConstants.SELECT_NAME)+HYPERLINK_PIPE+strId);
			hm.put(3, htCommonCol.get(pgV3Constants.SELECT_ATTRIBUTE_TITLE));
			hm.put(4, strTypeDisplay);
			hm.put(5, htCommonCol.get(DomainConstants.SELECT_REVISION));
			hm.put(6, strCurrentState);
			hm.put(7, HYPERLINK+mp.get(PRODUCTPARTNAME)+HYPERLINK_PIPE+mp.get(PRODUCTPARTOBJECTID));
			hm.put(8, mp.get(PRODUCTPARTREVISION));
			hm.put(9, mp.get(PRODUCTPARTTITLE));
			hm.put(10, mp.get(DGDESCRIPTION));
			hm.put(11, mp.get(DGMLONCUP));
			XSSFCellStyle style = workbook.createCellStyle();
			style = setForeGroundColor(strCurrentState, style);
			//Added by DSM Reports (Sogeti) for 2022x.5 (APR CW 2024) Defect 55875 - Start
			XSSFCellStyle style1 = workbook.createCellStyle();
			//Added by DSM Reports (Sogeti) for 2022x.5 (APR CW 2024) Defect 55875 - End
			for(int j=0;j<hm.size();j++){								
				//Modified the code for _2022x_Aug CW Req-47097 :: Start
				// Modified by DSM Reports (Sogeti) for 22x.03 (August CW 2023) Defect 54091 - Start
				cell = row.createCell(columnCount1++);
				if (j == 2) {
					style = makeColumnNumeric(workbook, style);
				}
				cell.setCellStyle(style);
				
				// Modified by DSM Reports (Sogeti) for 22x.03 (August CW 2023) Defect 54091 - End
				//Modified the code for _2022x_Aug CW Req-47097 :: End
				if(hm.get(j) instanceof StringList) {
					strCellValue = hm.get(j).toString().replace("[", "").replace("]", "").replace(pgV3Constants.SYMBOL_COMMA,pgV3Constants.SYMBOL_PIPE);
				}
				else {
					strCellValue = (String)hm.get(j);
				}
				if(UIUtil.isNotNullAndNotEmpty(strCellValue) && strCellValue.startsWith(HYPERLINK_COMPARE)){
					strSplittedValue = strCellValue.split("\\|",-1); 
					strHyperlinkId = strSplittedValue[(strSplittedValue.length)-1];
					strValue = strSplittedValue[(strSplittedValue.length)-2];
					if(pgV3Constants.TRUE.equalsIgnoreCase(strHyperlink) && iRowCountAll < iHyperLinkLimit){
						getHyperlink(context,cell,workbook,strValue,strHyperlinkId,strCurrentState);
					
					} else if(UIUtil.isNotNullAndNotEmpty(strValue)) {					
						cell.setCellValue(strValue);
					}
				}else {
					cell.setCellValue(strCellValue);
					//Added by DSM Reports (Sogeti) for 2022x.5 (APR CW 2024) Defect 55875 - Start
					if(j == 0) {
						style1.cloneStyleFrom(style);
						style1.setWrapText(true);
						cell.setCellStyle(style1);
					}
					//Added by DSM Reports (Sogeti) for 2022x.5 (APR CW 2024) Defect 55875 - End
				}
				
			}
		
			
		}
		sheetFormatter(sheetDGClassification); // Added by DSM Reports (Sogeti) for 22x.04 (Dec CW 2023) Defect 56156 - START/END
		}catch(Exception e) {
			
			outLog.print("Exception in  updateWorksheetDGClassification: "+e+"\n");
			outLog.flush();
		}
	}
	//Added for 2018x.6 May22 CW requirement 41969-Ends
	
	/**Added the code for Defect 49698 - Spec Reader Access Issue
	 * @param context
	 * @param strUserName
	 * @param strPartId
	 * @return boolean
	 */
	private boolean accessCheckforSpecReader(Context context, String strUserName, String strPartId) {
		boolean hasAccessforSpecReader = false;
		boolean isHirData = false;
		boolean isContextPushed = false;
		//Added the code for 2018x Spec REader Defect 47026,47112 - Starts
		boolean isSecurityControlClassMatched=false;
		boolean isSecurityIPControlClassMatched=false;
		//Added the code for 2018x Spec REader Defect 47026,47112 - Ends
		Map mpPerson = new HashMap();
		String strUserSecurityType = "";
		MapList mlConnectedIpControlClass = new MapList();
		MapList mlConnectedNonDisclosureAgreement = new MapList(); 
		Map mpConnectedIpControlClass = new HashMap();
		Map mpConnectedNonDisclosureAgreement = new HashMap(); 
		List connectedIpControlClass = new ArrayList();
		List connectedNonDisclosureAgreement = new ArrayList();
		List connectedSecurityControlClass = new ArrayList();
		String strUserId = "";
		
		StringBuffer sbTypePattern = new StringBuffer();		    
		sbTypePattern.append(pgV3Constants.TYPE_IPCONTROLCLASS);
		sbTypePattern.append(pgV3Constants.SYMBOL_COMMA);
		sbTypePattern.append(pgV3Constants.TYPE_SECURITYCONTROLCLASS);
		StringList slSelect = new StringList();
		slSelect.add(DomainConstants.SELECT_NAME);
		slSelect.add(DomainConstants.SELECT_TYPE);
		slSelect.add("attribute[pgSecurityEmployeeType]");
		slSelect.add(DomainConstants.SELECT_ID);
		StringList slNonDisclosureAgreement = new StringList();
		slNonDisclosureAgreement.add(DomainConstants.SELECT_NAME);
		slNonDisclosureAgreement.add(DomainConstants.SELECT_TYPE);
		StringList slConnectedIpControlClass = new StringList();
		slConnectedIpControlClass.add(DomainConstants.SELECT_NAME);
		slConnectedIpControlClass.add(DomainConstants.SELECT_TYPE);

		
		try {
			//Pushing User Agent Context to get the Data if the Spec Reader User have access
			ContextUtil.pushContext(context,PropertyUtil.getSchemaProperty(context,"person_UserAgent"),DomainConstants.EMPTY_STRING,DomainConstants.EMPTY_STRING);
			isContextPushed = true;
			DomainObject dobjPart = DomainObject.newInstance(context, strPartId);
			if(dobjPart.isKindOf(context,"pgFormulatedProduct")  || dobjPart.isKindOf(context,"Formulation Part") || dobjPart.isKindOf(context,"pgAssembledProductPart") || dobjPart.isKindOf(context,"pgDeviceProductPart")|| dobjPart.isKindOf(context,"pgIntermediateProductPart")){
				isHirData = true;
				
			}
			//Added the code for 2018x Spec REader Defect 47026,47112 - Starts
			if(pgV3Constants.TYPE_FORMULATIONPART.equalsIgnoreCase(FormulationType.FORMULATION_PART.getType(context))) {
				hasAccessforSpecReader = true;
				return hasAccessforSpecReader;
			}
			//Added the code for 2018x Spec REader Defect 47026,47112 - Ends
			MapList	mlPerson = DomainObject.findObjects(context, //context
					DomainConstants.TYPE_PERSON, //type
					strUserName,//name
					pgV3Constants.SYMBOL_HYPHEN, //revision
					null, //owner
					pgV3Constants.VAULT_ESERVICEPRODUCTION, //vault
					null, //where clause
					false, //expand type
					slSelect);//object select
			if(!mlPerson.isEmpty()) {
				mpPerson = (Map)mlPerson.get(0);
				strUserSecurityType = (String)mpPerson.get("attribute[pgSecurityEmployeeType]");
				strUserId = (String)mpPerson.get(DomainConstants.SELECT_ID);
				
			}else {
				return hasAccessforSpecReader;
			}
				if("Employee".equalsIgnoreCase(strUserSecurityType) && !isHirData){
				hasAccessforSpecReader = true;
				return hasAccessforSpecReader;
			}else if(("Employee".equalsIgnoreCase(strUserSecurityType) && isHirData) || ("Non-Emp".equalsIgnoreCase(strUserSecurityType))) {
				DomainObject dobjPerson = DomainObject.newInstance(context, strUserId);
				mlConnectedNonDisclosureAgreement = dobjPerson.getRelatedObjects(
						context, //Context
						RELATIONSHIP_EXCLICENSEDPEOPLE, //Relationship
						ExportControlConstants.TYPE_IP_EXCEPTION, //Type
						slNonDisclosureAgreement, //Object Select
						null, //Rel Select
						true, //get To
						false, //get From
						(short)1, //recurse level
						DomainConstants.EMPTY_STRING, //object where clause
						null, //relationship where clause
						0); //limit;
				if(!mlConnectedNonDisclosureAgreement.isEmpty()) {
					for(int i=0;i<mlConnectedNonDisclosureAgreement.size();i++){
						mpConnectedNonDisclosureAgreement = (Map)mlConnectedNonDisclosureAgreement.get(i);
						connectedNonDisclosureAgreement.add((String)mpConnectedNonDisclosureAgreement.get(DomainConstants.SELECT_NAME));
					}
					
				}else {
					return hasAccessforSpecReader;
				}
				
				mlConnectedIpControlClass = dobjPart.getRelatedObjects(
						context, //Context
						DomainConstants.RELATIONSHIP_PROTECTED_ITEM, //Relationship
						sbTypePattern.toString(), //Type
						slConnectedIpControlClass, //Object Select
						null, //Rel Select
						true, //get To
						false, //get From
						(short)1, //recurse level
						DomainConstants.EMPTY_STRING, //object where clause
						null, //relationship where clause
						0); //limit;
				
				if(!mlConnectedIpControlClass.isEmpty()) {
					for(int k=0;k<mlConnectedIpControlClass.size();k++){
						mpConnectedIpControlClass = (Map)mlConnectedIpControlClass.get(k);
					if(pgV3Constants.TYPE_SECURITYCONTROLCLASS.equalsIgnoreCase((String)mpConnectedIpControlClass.get(DomainConstants.SELECT_TYPE))) {
						connectedSecurityControlClass.add((String)mpConnectedIpControlClass.get(DomainConstants.SELECT_NAME));
					}else if(pgV3Constants.TYPE_IPCONTROLCLASS.equalsIgnoreCase((String)mpConnectedIpControlClass.get(DomainConstants.SELECT_TYPE))) {
						connectedIpControlClass.add((String)mpConnectedIpControlClass.get(DomainConstants.SELECT_NAME));
					}
					}
					
				}else {
					return hasAccessforSpecReader;
				}
				//Added the code for 2018x Spec REader Defect 47026,47112 - Starts
				if(!connectedSecurityControlClass.isEmpty()) {
					isSecurityControlClassMatched = isSecurityControlClassMatchedforAccess(connectedSecurityControlClass,connectedNonDisclosureAgreement);
				}else if(!connectedIpControlClass.isEmpty()){
					isSecurityIPControlClassMatched = isIpControlClassMatchedforAccess(connectedIpControlClass,connectedNonDisclosureAgreement);
					
				}
				if(!connectedSecurityControlClass.isEmpty() && isSecurityControlClassMatched &&  isSecurityIPControlClassMatched) {
					hasAccessforSpecReader = true;
				}else if(connectedSecurityControlClass.isEmpty() && isSecurityIPControlClassMatched) {
					hasAccessforSpecReader = true;
				}
				}
				//Added the code for 2018x Spec REader Defect 47026,47112 - Starts
		}catch(Exception e) {
			outLog.write("Exception in method accessCheckforSpecReader "+e+"\n");
			outLog.flush();
		}finally {
			try {
				if(isContextPushed) {
					ContextUtil.popContext(context);	
				}
			}catch(Exception e) {
				outLog.write("Exception in while popping the context in accessCheckforSpecReader Method "+e+"\n");
				outLog.flush();
			}
			
		}
		return hasAccessforSpecReader;
		
	}
	//Added the code for Defect 49698 - Spec Reader Access Issue - Ends
	
	//22x updgrade defect 50261 - Start
	/**
	 * Method to check if the data is for Material and Comp or Sub and Materials.
	 * @param context
	 * @param strPartType - Part Type
	 * @param strPgAssemblyType - Specification Subtype
	 * @return true if Materials and Composition else false
	 * @throws Exception
	 */
	private boolean isMaterialAndComposition(Context context, String strPartType, String strPgAssemblyType) throws Exception{
		boolean isMaterialAndComposition = true;
		try{
			//22x Upgrade - Modifed for ALM-50646 - Start
			if ((strPartType.equals(pgV3Constants.TYPE_PGRAWMATERIAL)) || (strPartType.equals(pgV3Constants.TYPE_PGANCILLARYPACKAGINGMATERIALPART)) || (strPartType.equals(pgV3Constants.TYPE_PACKAGINGASSEMBLYPART)) || (strPartType.equals(pgV3Constants.TYPE_PGMASTERPACKAGINGMATERIALPART)) || (strPartType.equals(pgV3Constants.TYPE_PGONLINEPRINTINGPART)) || (strPartType.equals(pgV3Constants.TYPE_PACKAGINGMATERIALPART)) || (strPartType.equals(pgV3Constants.TYPE_FABRICATEDPART)) || (strPartType.equals(pgV3Constants.TYPE_PGPROMOTIONALITEMPART)) || (((strPartType.equals(pgV3Constants.TYPE_ANCILLARYRAWMATERIALPART)) || (strPartType.equals(pgV3Constants.TYPE_RAWMATERIALPART))) && ((strPgAssemblyType.equals("Device")) || (strPgAssemblyType.equals("Packaging"))))) {
				isMaterialAndComposition = false;
			}
			//22x Upgrade - Modifed for ALM-50646 - End
		}catch(Exception e) {
			outLog.write("Exception in isMaterialAndComposition Method "+e+"\n");
			outLog.flush();
		}
		return isMaterialAndComposition;
	}
	//22x updgrade defect 50261 - End	
	/** This Method Checks the Spec Reader Security for Input FOP Part
	 * @param context
	 * @param strFOPId
	 * @return
	 */
	private boolean checkAccessforinputFOP(Context context, String strUserName, String strFOPId) {
		
		boolean hasAccessforFormulation = false;
		try {
			
			String strConnectedFormulationId = "";
			MapList mlConnectedFormulation = new MapList();
			Map mpConnectedFormulation = new HashMap();
			StringList slConnectedFormulation = new StringList();
			slConnectedFormulation.add(DomainConstants.SELECT_ID);
			slConnectedFormulation.add(DomainConstants.SELECT_TYPE);
			slConnectedFormulation.add(DomainConstants.SELECT_CURRENT);
			//String strWhere = pgV3Constants.SELECT_CURRENT+pgV3Constants.CONST_SYMBOL_EQUAL+pgV3Constants.STATE_RELEASE;
			//Pattern objType = new Pattern(FormulationType.FORMULATION.getType(context));
			DomainObject dobjFOP = DomainObject.newInstance(context, strFOPId);
			mlConnectedFormulation = dobjFOP.getRelatedObjects(
					context, //Context
					pgV3Constants.RELATIONSHIP_FORMULATIONPROPAGATE, //Relationship
					
					DomainConstants.QUERY_WILDCARD, 
					slConnectedFormulation, //Object Select
					null, //Rel Select
					true, //get To
					false, //get From
					(short)1, //recurse level
					DomainConstants.EMPTY_STRING, //object where clause
					//strWhere, //object where clause
					null, //relationship where clause
					0); //limit;
			if(!mlConnectedFormulation.isEmpty()) {
				
				for(int i=0;i<mlConnectedFormulation.size();i++){
					
					mpConnectedFormulation = (Map)mlConnectedFormulation.get(i);
					if(mlConnectedFormulation.size()==1) {
						strConnectedFormulationId = (String)mpConnectedFormulation.get(DomainConstants.SELECT_ID);
					}else {
					if(pgV3Constants.STATE_RELEASE.equalsIgnoreCase((String)(mpConnectedFormulation.get(DomainConstants.SELECT_CURRENT)))) {
						strConnectedFormulationId = (String)mpConnectedFormulation.get(DomainConstants.SELECT_ID);
						break;
					}	
					}
					
				}
			}
		hasAccessforFormulation = 	accessCheck(context, strUserName, strConnectedFormulationId);
			
		}catch(Exception e) {
			outLog.print("Exception in checkAccessforinputFOP Method "+e+"\n");
			outLog.flush();
		}
		
		return hasAccessforFormulation;
		
	
	}
	
	/**
	 * @param connectedSecurityControlClass
	 * @param connectedNonDisclosureAgreement
	 * @return
	 */
	private boolean isSecurityControlClassMatchedforAccess(List connectedSecurityControlClass, List connectedNonDisclosureAgreement) {
		boolean isSecurityControlClassMatched = false;
		if(!connectedSecurityControlClass.isEmpty()) {
			for(int p=0;p<connectedNonDisclosureAgreement.size();p++) {
				for(int q=0;q<connectedSecurityControlClass.size();q++) {
					if(connectedNonDisclosureAgreement.get(p).equals(connectedSecurityControlClass.get(q))) {
					isSecurityControlClassMatched = true;
						break;
					}	
				}
			}
		}
		return isSecurityControlClassMatched;
		
	}
	
	/**
	 * @param connectedIpControlClass
	 * @param connectedNonDisclosureAgreement
	 * @return
	 */
	private boolean isIpControlClassMatchedforAccess(List connectedIpControlClass, List connectedNonDisclosureAgreement) {
		boolean isIpControlClassMatched = false;
		for(int p=0;p<connectedNonDisclosureAgreement.size();p++) {
			for(int q=0;q<connectedIpControlClass.size();q++) {
				if(connectedNonDisclosureAgreement.get(p).equals(connectedIpControlClass.get(q))) {
					isIpControlClassMatched = true;
					break;
			}
			}
		}
		return isIpControlClassMatched;
	}
	
	//Added the code for 2018x Spec REader Defect 47026,47112 - Ends
	
	//Added the code for 22x Feb CW for Defect 49642 - Starts
	private MapList getConnectedPlantsforInputPart(Context context, DomainObject dobjPart) {
		
		StringList slRelSelect = new StringList(pgV3Constants.SELECT_ATTRIBUTE_PGISACTIVATED);
		slRelSelect.add(pgV3Constants.SELECT_ATTRIBUTE_PGISAUTHORIZEDTOUSE);
		slRelSelect.add(pgV3Constants.SELECT_ATTRIBUTE_PGISAUTHORIZEDTOPRODUCE);
		slRelSelect.add(pgV3Constants.SELECT_ATTRIBUTE_PGISAUTHORIZEDTOVIEW);
		StringList slBusSelect = new StringList();
		slBusSelect.add(DomainConstants.SELECT_NAME);
		slBusSelect.add(DomainConstants.SELECT_POLICY);

		StringBuilder slRelPattern = new StringBuilder(pgV3Constants.RELATIONSHIP_MANUFACTURINGRESPONSIBILITY);
		MapList mlReturnList = null;
		try {
		 mlReturnList = dobjPart.getRelatedObjects(
				context, //Context
				slRelPattern.toString(), //Relationship
				pgV3Constants.PLANT, //Type
				slBusSelect, //Object Select
				slRelSelect, //Rel Select
				true, //get To
				false, //get From
				(short)1, //recurse level
				null, //object where clause
				null, //relationship where clause
				0); //limit
		}catch(Exception e) {
			outLog.print("Exception in getConnectedPlantsforInputPart Method "+e+"\n");
			outLog.flush();
		}
		return mlReturnList;
	}
	//Added the code for 22x Feb CW for Defect 49642 - Ends
	
	
	
	/**
	 * Added the code for _2022x_Aug CW Req-47097
	 * @param row
	 * @param workbook
	 * @param strCurrent
	 * @param column
	 * @param columnCount1
	 * @return
	 */
	// Modified by DSM Reports (Sogeti) for 22x.03 (August CW 2023) Defect 54091 - Start

    // Modified by DSM Reports (Sogeti) for 22x.03 (August CW 2023) Defect 54091 - End
	
	/**
	 * Added the code for _2022x_Aug CW Req-47097
	 * @param sheet
	 * @param hm
	 */
	 //Added by DSM Reports (Sogeti) for 22x.04 (Dec CW 2023) Defect 56156 -- START
	protected void 	sheetFormatter(XSSFSheet sheet) {
		int columncount = sheet.getRow(0).getLastCellNum()-1;
		sheet.setAutoFilter(new CellRangeAddress(0, sheet.getLastRowNum() + 1,
						0, sheet.getRow(0).getLastCellNum()-1));
		for(int j=0;j<columncount;j++){

			sheet.autoSizeColumn(j);
		}
	}
	//Added by DSM Reports (Sogeti) for 22x.04 (Dec CW 2023) Defect 56156 -- END
	
	
	protected XSSFCellStyle makeColumnNumeric(XSSFWorkbook workbook, XSSFCellStyle style) {
		style.setDataFormat(workbook.createDataFormat().getFormat("0"));
		return style;
	}


	protected XSSFCellStyle setForeGroundColor(String strCurrent, XSSFCellStyle style) {
		if (!strCurrent.equalsIgnoreCase(pgV3Constants.STATE_RELEASE)
				&& !strCurrent.equalsIgnoreCase(pgV3Constants.STATE_RELEASED)) {
			style.setFillForegroundColor(IndexedColors.GREY_25_PERCENT.getIndex());
			style.setFillPattern(FillPatternType.SOLID_FOREGROUND);
		}
		return style;
	}
	
	
	
	
	
}