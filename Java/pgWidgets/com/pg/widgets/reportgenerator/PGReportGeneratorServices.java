/*
 * PGReportGeneratorServices.java
 * 
 * Added by Dashboard Team
 * For Report Generator Widget related Web services
 * 
 */

package com.pg.widgets.reportgenerator;

import com.dassault_systemes.platform.restServices.RestService;

import java.util.logging.Level;
import java.util.logging.Logger;

import javax.servlet.http.HttpServletRequest;
import javax.ws.rs.GET;
import javax.ws.rs.POST;
import javax.ws.rs.Path;
import javax.ws.rs.QueryParam;
import javax.ws.rs.core.Response;

/**
 * Class PGReportGeneratorServices is used to invoke the web service methods
 * required for report generator widget
 * 
 * @since 2018x.5
 * @author
 *
 */
@Path("/pgreportgeneratorservices")
public class PGReportGeneratorServices extends RestService {
	
	static final String TYPE_APPLICATION_FORMAT  = "application/json";
	static final String EXCEPTION_MESSAGE  = "Exception in PGReportGeneratorServices";
	static final Logger logger = Logger.getLogger(PGReportGeneratorServices.class.getName());
	
	/**
	 * Method to get the information of Report Template object, specifically input and out put attribute information
	 * @param request : HttpServletRequest request param
	 * @param type : String type "Report Model"
	 * @param name : String name of the object of type "Report Model"
	 * @param revision : String revision of the object of type "Report Model"
	 * @param showAllCols : String with value true or false to decide whether to show custom columns from page object
	 * @return : Response of Json object with "Report Model" object info
	 * @throws Exception
	 */
	@GET
	@Path("/getReportTemplateData")
	public Response getReportTemplateData(@javax.ws.rs.core.Context HttpServletRequest request,
			@QueryParam("type") String type, 
			@QueryParam("name") String name,
			@QueryParam("revision") String revision,
			@QueryParam("showAllCols") String showAllCols,
			@QueryParam("templateId") String templateId)
			throws Exception {
		Response res = null;
		try {
			boolean isSCMandatory = true;
			matrix.db.Context context = getAuthenticatedContext(request, isSCMandatory);
			PGReportGeneratorUtil pgReportGenUtil = new PGReportGeneratorUtil();
			String strOutput = pgReportGenUtil.getReportTemplateData(context, type, name, revision,showAllCols,templateId);
			
			res = Response.ok(strOutput).type(TYPE_APPLICATION_FORMAT).build();
		} catch (Exception e) {
			logger.log(Level.SEVERE, EXCEPTION_MESSAGE, e);
			res=Response.status(Response.Status.BAD_REQUEST).entity(e.getMessage()).build();
		}
		return res;
	}
	
	/**
	 * Method to get the input information during generation of report with changes
	 * @param request : HttpServletRequest request param
	 * @param oid : String report object id
	 * @return : Response json with input information on Report and Report Template
	 * @throws Exception
	 */
	@GET
	@Path("/getReportTemplateDataWithInputData")
	public Response getReportTemplateDataWithInputData(@javax.ws.rs.core.Context HttpServletRequest request,
			@QueryParam("oid") String oid)
			throws Exception {
		Response res = null;
		try {
			boolean isSCMandatory = true;
			matrix.db.Context context = getAuthenticatedContext(request, isSCMandatory);
			PGReportGeneratorUtil pgReportGenUtil = new PGReportGeneratorUtil();
			String strOutput = pgReportGenUtil.getReportTemplateDataWithChanges(context, oid);
			
			res = Response.ok(strOutput).type(TYPE_APPLICATION_FORMAT).build();
		} catch (Exception e) {
			logger.log(Level.SEVERE, EXCEPTION_MESSAGE, e);
			res=Response.status(Response.Status.BAD_REQUEST).entity(e.getMessage()).build();
		}
		return res;
	}
	
	/**
	 * Method returns the details of all report objects generated by using the widget
	 * @param request : HttpServletRequest request param
	 * @return : Response with json info of report object
	 * @throws Exception
	 */
	@GET
	@Path("/getReports")
	public Response getReports(@javax.ws.rs.core.Context HttpServletRequest request) throws Exception {
		Response res = null;
		try {
			boolean isSCMandatory = true;
			matrix.db.Context context = getAuthenticatedContext(request, isSCMandatory);
			
			PGReportGeneratorUtil pgReportGenUtil = new PGReportGeneratorUtil();
			String strOutput = pgReportGenUtil.getReports(context);
			
			res = Response.ok(strOutput).type(TYPE_APPLICATION_FORMAT).build();
		} catch (Exception e) {
			logger.log(Level.SEVERE, EXCEPTION_MESSAGE, e);
			res=Response.status(Response.Status.BAD_REQUEST).entity(e.getMessage()).build();
		}
		return res;
	}
	
	/**
	 * Method to create CAT Report Reference (frequently referred as 'Report') object
	 * @param request : HttpServletRequest request param
	 * @param sData : String input Json with details such as Report Doc id need to be connected, report 'V_Name' ,input and out put json etc needed to create Report
	 * @return : Response with json with created Report object info
	 * @throws Exception
	 */
	@POST
	@Path("/createReport")
	public Response createReport(@javax.ws.rs.core.Context HttpServletRequest request, String sData) throws Exception {
		Response res = null;
		try {
			boolean isSCMandatory = true;
			matrix.db.Context context = getAuthenticatedContext(request, isSCMandatory);
			
			PGReportGeneratorUtil pgReportGenUtil = new PGReportGeneratorUtil();
			String strOutput = pgReportGenUtil.createCATReportObject(context, sData);
			
			res = Response.ok(strOutput).type(TYPE_APPLICATION_FORMAT).build();
		} catch (Exception e) {
			logger.log(Level.SEVERE, EXCEPTION_MESSAGE, e);
			res=Response.status(Response.Status.BAD_REQUEST).entity(e.getMessage()).build();
		}
		return res;
	}
	
	/**
	 * Method to generate report as background Job
	 * @param request : HttpServletRequest request param
	 * @param strReportId : String report object id
	 * @return : Response with status of the operation
	 * @throws Exception
	 */
	@GET
	@Path("/generateReport")
	public Response generateReport(@javax.ws.rs.core.Context HttpServletRequest request,
			@QueryParam("id") String strReportId) throws Exception {
		Response res = null;
		try {
			boolean isSCMandatory = true;
			matrix.db.Context context = getAuthenticatedContext(request, isSCMandatory);
			PGReportGeneratorUtil pgReportGenUtil = new PGReportGeneratorUtil();
			String strOutput = pgReportGenUtil.generateReport(context, strReportId);
			res = Response.ok(strOutput).type(TYPE_APPLICATION_FORMAT).build();
		} catch (Exception e) {
			logger.log(Level.SEVERE, EXCEPTION_MESSAGE, e);
			res=Response.status(Response.Status.BAD_REQUEST).entity(e.getMessage()).build();
		}
		return res;
	}
	
	/**
	 * Method to delete the report objects
	 * @param request : HttpServletRequest request param
	 * @param strReportIds : String of report object id/ids to be deleted
	 * @return : Response with status of the operation
	 * @throws Exception
	 */
	@GET
	@Path("/deleteReports")
	public Response deleteReports(@javax.ws.rs.core.Context HttpServletRequest request,
			@QueryParam("oids") String strReportIds) throws Exception {
		Response res = null;
		try {
			boolean isSCMandatory = true;
			matrix.db.Context context = getAuthenticatedContext(request, isSCMandatory);
			PGReportGeneratorUtil pgReportGenUtil = new PGReportGeneratorUtil();
			String strOutput = pgReportGenUtil.deleteReportObjects(context, strReportIds);
			res = Response.ok(strOutput).type(TYPE_APPLICATION_FORMAT).build();
		} catch (Exception e) {
			logger.log(Level.SEVERE, EXCEPTION_MESSAGE, e);
			res=Response.status(Response.Status.BAD_REQUEST).entity(e.getMessage()).build();
		}
		return res;
	}
	
	/**
	 * Method to generate report with new input
	 * @param request : HttpServletRequest request param
	 * @param strQueryInfo : String json with new input details
	 * @return : Response with status of the operation
	 * @throws Exception
	 */
	@POST
	@Path("/generateReportWithChanges")
	public Response generateReportWithChanges(@javax.ws.rs.core.Context HttpServletRequest request,
			String strQueryInfo) throws Exception {
		Response res = null;
		
		try {
			boolean isSCMandatory = true;
			matrix.db.Context context = getAuthenticatedContext(request, isSCMandatory);
			PGReportGeneratorUtil pgReportGenUtil = new PGReportGeneratorUtil();
			String strOutput = pgReportGenUtil.generateReportWithChanges(context, strQueryInfo);
			res = Response.ok(strOutput).type(TYPE_APPLICATION_FORMAT).build();
		} catch (Exception e) {
			logger.log(Level.SEVERE, EXCEPTION_MESSAGE, e);
			res=Response.status(Response.Status.BAD_REQUEST).entity(e.getMessage()).build();
		}
		return res;
	}
	
	/**
	 * Method to get the Job status
	 * @param request : HttpServletRequest request param
	 * @param strReportId : String Report object id
	 * @param strJobId : String Job object id
	 * @return : Response json with Job details else report doc info
	 * @throws Exception
	 */
	@GET
	@Path("/getJobStatus")
	public Response getJobStatus(@javax.ws.rs.core.Context HttpServletRequest request,
			@QueryParam("oid") String strReportId,
			@QueryParam("jobId") String strJobId) throws Exception {
		Response res = null;
		try {
			boolean isSCMandatory = true;
			matrix.db.Context context = getAuthenticatedContext(request, isSCMandatory);
			PGReportGeneratorUtil pgReportGenUtil = new PGReportGeneratorUtil();
			String strOutput = pgReportGenUtil.getJobStatus(context, strReportId,strJobId);
			res = Response.ok(strOutput).type(TYPE_APPLICATION_FORMAT).build();
		} catch (Exception e) {
			logger.log(Level.SEVERE, EXCEPTION_MESSAGE, e);
			res=Response.status(Response.Status.BAD_REQUEST).entity(e.getMessage()).build();
		}
		return res;
	}
	
}